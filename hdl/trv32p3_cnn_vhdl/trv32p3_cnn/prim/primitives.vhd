
-- File generated by Go version U-2022.12#33f3808fcb#221128, Wed Feb 21 17:37:19 2024
-- Copyright 2014-2022 Synopsys, Inc. All rights reserved.
-- go -I../lib -F -DIS_VHDL -DSYNTHESIS_NO_UNGROUP -D__tct_patch__=0 -VHDL -otrv32p3_cnn_vhdl -cgo_options.cfg -Itrv32p3_cnn_vhdl/tmp_pdg -updg -updg_controller trv32p3_cnn




-- File generated by pdg version U-2022.12#33f3808fcb#221128
-- Copyright 2014-2022 Synopsys, Inc. All rights reserved.
-- pdg -I../lib -D__go__ -VHDL -cgo_options.cfg -DIS_VHDL -DSYNTHESIS_NO_UNGROUP -D__tct_patch__=0 +wtrv32p3_cnn_vhdl/tmp_pdg trv32p3_cnn


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library trv32p3_cnn_lib;
use trv32p3_cnn_lib.data_types.all;

package primitives is
  procedure w32_add_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_sub_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_slt_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_sltu_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_seq0_w32
    (signal result : out t_w32;
     a : in t_w32);

  procedure w32_sne0_w32
    (signal result : out t_w32;
     a : in t_w32);

  procedure w32_mul_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_mulh_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_mulhsu_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_mulhu_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_band_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_bor_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_bxor_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure bool_eq_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32);

  procedure bool_ne_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32);

  procedure bool_lt_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32);

  procedure bool_ge_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32);

  procedure bool_ltu_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32);

  procedure bool_geu_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32);

  procedure w32_sra_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_sll_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_srl_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32);

  procedure w32_sext_w08
    (signal result : out t_w32;
     a : in t_w08);

  procedure w32_zext_w08
    (signal result : out t_w32;
     a : in t_w08);

  procedure w32_sext_w16
    (signal result : out t_w32;
     a : in t_w16);

  procedure w32_zext_w16
    (signal result : out t_w32;
     a : in t_w16);

  procedure void_nop;

  procedure addr_incr1_addr
    (signal result : out t_addr;
     a : in t_addr);

  procedure addr_incr4_addr
    (signal result : out t_addr;
     a : in t_addr);

  procedure void_mul_hw_w32_w32_t2u_w32_w32
    (opa : in t_w32;
     opb : in t_w32;
     mode : in t_t2u;
     signal pl : out t_w32;
     signal ph : out t_w32);

  procedure w32_mac_w32_w32_w32
    (signal result_0 : out t_w32;
     c : in t_w32;
     a : in t_w32;
     b : in t_w32);

end primitives;

package body primitives is
  procedure w32_add_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= (a + b);
  end w32_add_w32_w32;

  procedure w32_sub_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= (a - b);
  end w32_sub_w32_w32;

  procedure w32_slt_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= signed(resize(std_logic_to_unsigned(boolean_to_std_logic(a < b)), 32));
  end w32_slt_w32_w32;

  procedure w32_sltu_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= signed(resize(std_logic_to_unsigned(boolean_to_std_logic(unsigned(a) < unsigned(b))), 32));
  end w32_sltu_w32_w32;

  procedure w32_seq0_w32
    (signal result : out t_w32;
     a : in t_w32) is
    constant Cint32_t_0 : signed(31 downto 0) := (others => '0');
  begin
    result <= signed(resize(std_logic_to_unsigned(boolean_to_std_logic(a = Cint32_t_0)), 32));
  end w32_seq0_w32;

  procedure w32_sne0_w32
    (signal result : out t_w32;
     a : in t_w32) is
    constant Cint32_t_0 : signed(31 downto 0) := (others => '0');
  begin
    result <= signed(resize(std_logic_to_unsigned(boolean_to_std_logic(a /= Cint32_t_0)), 32));
  end w32_sne0_w32;

  procedure w32_mul_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= signed(resize(unsigned((a * b)), 32));
  end w32_mul_w32_w32;

  procedure w32_mulh_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
    variable p : signed(63 downto 0);
  begin
    p := (a * b);
    result <= p(63 downto 32);
  end w32_mulh_w32_w32;

  procedure w32_mulhsu_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
    variable p : signed(63 downto 0);
  begin
    p := resize(a * ('0' & signed(unsigned(b))), 64);
    result <= p(63 downto 32);
  end w32_mulhsu_w32_w32;

  procedure w32_mulhu_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
    variable p : signed(63 downto 0);
  begin
    p := signed((unsigned(a) * unsigned(b)));
    result <= p(63 downto 32);
  end w32_mulhu_w32_w32;

  procedure w32_band_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= (a and b);
  end w32_band_w32_w32;

  procedure w32_bor_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= (a or b);
  end w32_bor_w32_w32;

  procedure w32_bxor_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= (a xor b);
  end w32_bxor_w32_w32;

  procedure bool_eq_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= std_logic_to_boolean(boolean_to_std_logic(a = b));
  end bool_eq_w32_w32;

  procedure bool_ne_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= std_logic_to_boolean(boolean_to_std_logic(a /= b));
  end bool_ne_w32_w32;

  procedure bool_lt_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= std_logic_to_boolean(boolean_to_std_logic(a < b));
  end bool_lt_w32_w32;

  procedure bool_ge_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= std_logic_to_boolean(boolean_to_std_logic(a >= b));
  end bool_ge_w32_w32;

  procedure bool_ltu_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= std_logic_to_boolean(boolean_to_std_logic(unsigned(a) < unsigned(b)));
  end bool_ltu_w32_w32;

  procedure bool_geu_w32_w32
    (signal result : out boolean;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= std_logic_to_boolean(boolean_to_std_logic(unsigned(a) >= unsigned(b)));
  end bool_geu_w32_w32;

  procedure w32_sra_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= shift_right(a, to_integer(unsigned(b(4 downto 0))));
  end w32_sra_w32_w32;

  procedure w32_sll_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= signed(shift_left(unsigned(a), to_integer(unsigned(b(4 downto 0)))));
  end w32_sll_w32_w32;

  procedure w32_srl_w32_w32
    (signal result : out t_w32;
     a : in t_w32;
     b : in t_w32) is
  begin
    result <= signed(shift_right(unsigned(a), to_integer(unsigned(b(4 downto 0)))));
  end w32_srl_w32_w32;

  procedure w32_sext_w08
    (signal result : out t_w32;
     a : in t_w08) is
  begin
    result <= resize(a, 32);
  end w32_sext_w08;

  procedure w32_zext_w08
    (signal result : out t_w32;
     a : in t_w08) is
  begin
    result <= signed(resize(unsigned(a), 32));
  end w32_zext_w08;

  procedure w32_sext_w16
    (signal result : out t_w32;
     a : in t_w16) is
  begin
    result <= resize(a, 32);
  end w32_sext_w16;

  procedure w32_zext_w16
    (signal result : out t_w32;
     a : in t_w16) is
  begin
    result <= signed(resize(unsigned(a), 32));
  end w32_zext_w16;

  procedure void_nop is
  begin
  end void_nop;

  procedure addr_incr1_addr
    (signal result : out t_addr;
     a : in t_addr) is
    constant Cuint32_t_1 : unsigned(31 downto 0) := "00000000000000000000000000000001";
  begin
    result <= (a + Cuint32_t_1);
  end addr_incr1_addr;

  procedure addr_incr4_addr
    (signal result : out t_addr;
     a : in t_addr) is
    constant Cuint32_t_4 : unsigned(31 downto 0) := "00000000000000000000000000000100";
  begin
    result <= (a + Cuint32_t_4);
  end addr_incr4_addr;

  procedure void_mul_hw_w32_w32_t2u_w32_w32
    (opa : in t_w32;
     opb : in t_w32;
     mode : in t_t2u;
     signal pl : out t_w32;
     signal ph : out t_w32) is
    variable a : unsigned(32 downto 0);
    variable a_0 : signed(32 downto 0);
    variable b : unsigned(32 downto 0);
    variable b_0 : signed(32 downto 0);
    variable r : signed(65 downto 0);
  begin
    a := std_logic_to_unsigned((mode(1) and opa(31))) & unsigned(opa);
    a_0 := signed(a);
    b := std_logic_to_unsigned((mode(0) and opb(31))) & unsigned(opb);
    b_0 := signed(b);
    r := (a_0 * b_0);
    pl <= r(31 downto 0);
    ph <= r(63 downto 32);
  end void_mul_hw_w32_w32_t2u_w32_w32;

  procedure w32_mac_w32_w32_w32
    (signal result_0 : out t_w32;
     c : in t_w32;
     a : in t_w32;
     b : in t_w32) is
    variable multResult : signed(31 downto 0);
    variable result : signed(31 downto 0);
    variable INT32_SATURATION_result : signed(31 downto 0);
    variable fullResult : signed(63 downto 0);
    variable saturatedResult : signed(31 downto 0);
    variable INT32_SATURATION_result_0 : signed(31 downto 0);
    variable fullResult_0 : signed(63 downto 0);
    variable saturatedResult_0 : signed(31 downto 0);
    constant Cint64_t_2147483647 : signed(63 downto 0) := "0000000000000000000000000000000001111111111111111111111111111111";
    constant Cint32_t_2147483647 : signed(31 downto 0) := "01111111111111111111111111111111";
    constant Cint64_t_m2147483648 : signed(63 downto 0) := "1111111111111111111111111111111110000000000000000000000000000000";
    constant Cint32_t_m2147483648 : signed(31 downto 0) := "10000000000000000000000000000000";
  begin
    fullResult := (a * b);
    if ((fullResult > Cint64_t_2147483647)) then
      saturatedResult := Cint32_t_2147483647;
    else
      if ((fullResult < Cint64_t_m2147483648)) then
        saturatedResult := Cint32_t_m2147483648;
      else
        saturatedResult := fullResult(31 downto 0);
      end if;
    end if;
    INT32_SATURATION_result := saturatedResult;
    multResult := INT32_SATURATION_result;
    fullResult_0 := resize((c + multResult), 64);
    if ((fullResult_0 > Cint64_t_2147483647)) then
      saturatedResult_0 := Cint32_t_2147483647;
    else
      if ((fullResult_0 < Cint64_t_m2147483648)) then
        saturatedResult_0 := Cint32_t_m2147483648;
      else
        saturatedResult_0 := fullResult_0(31 downto 0);
      end if;
    end if;
    INT32_SATURATION_result_0 := saturatedResult_0;
    result := INT32_SATURATION_result_0;
    result_0 <= result;
  end w32_mac_w32_w32_w32;

end primitives;
