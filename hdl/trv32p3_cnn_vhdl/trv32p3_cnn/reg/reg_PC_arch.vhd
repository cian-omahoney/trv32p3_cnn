
-- File generated by Go version U-2022.12#33f3808fcb#221128, Wed Feb 21 17:37:19 2024
-- Copyright 2014-2022 Synopsys, Inc. All rights reserved.
-- go -I../lib -F -DIS_VHDL -DSYNTHESIS_NO_UNGROUP -D__tct_patch__=0 -VHDL -otrv32p3_cnn_vhdl -cgo_options.cfg -Itrv32p3_cnn_vhdl/tmp_pdg -updg -updg_controller trv32p3_cnn



architecture rtl of reg_PC is

  signal reg_val : t_addr;
  -- synopsys translate_off
  signal cycles       : natural := 0;
  signal max_cycles   : natural := 0;
  signal first_reset  : boolean := true;
  signal reset_active : boolean := false;
  -- synopsys translate_on

begin

  -- synopsys translate_off
  p_cycles_count : process(clock, reset)
  begin
    if reset = '1' then
      cycles <= 0;
      first_reset <= false;
    elsif clock'event and clock = '1' then
      if first_reset = false then
        cycles <= cycles + 1;
      end if;
    end if;
  end process p_cycles_count;

  p_max_cycles: process(clock)
  begin
    if clock'event and clock = '0' then
      if ((max_cycles /= 0) and (cycles >= max_cycles)) then
        assert false report "**INFO: Simulation stopped after " & natural'image(cycles) & " cycles." severity failure;
      end if;
    end if;
  end process p_max_cycles;
  -- synopsys translate_on

  -- synopsys translate_off
  p_reg_PC_log : process(clock, reset)
    -- NOTE: The PC value from BEFORE the rising clock edge is logged.

    procedure log_cycles(cycles : in natural; PC : in t_addr) is
      variable lline : line;
    begin
      write(lline, cycles);
      write(lline, string'(" ("));
      write(lline, to_integer(PC(30 downto 0)));
      write(lline, string'(")"));
      logfile_write(lline);
    end log_cycles;

    procedure reset_logfile (rcd_valid: out boolean) is
    begin
      renew_logfile(rcd_valid);
    end reset_logfile;

    variable var_cycles    : natural := 0;
    variable loc_rcd_valid : boolean := false;

  begin

    if reg_log_gen then
      if reset = '1' then
        if (not reset_active) then
          reset_logfile(loc_rcd_valid);
          rcd_valid <= loc_rcd_valid;
          var_cycles := 0;
          reset_active <= true;
        end if;
      elsif clock'event and clock = '1' then
        reset_active <= false;
        var_cycles := cycles + 1;
        log_cycles(var_cycles, reg_val);
      end if;
    end if;
  end process p_reg_PC_log;

  -- synopsys translate_on

  p_read_reg_PC : process(reg_val)
  begin
    -- pcr_out <= (others => '0');

    -- (pcr_rd_PC)
    pcr_out <= reg_val;

  end process p_read_reg_PC;

  p_write_reg_PC : process(clock, reset)
  begin
    if reset /= '0' then
      reg_val <= to_unsigned(0, t_addr'length);
    elsif clock'event and clock = '1' then

      -- (PC_wr_pcw_PC_pcw_cntrl_nxtpc_pdg_en)
      if PC_pcw_cntrl_nxtpc_pdg_en_in = '1' then
        reg_val <= pcw_in;
      end if;

    end if;
  end process p_write_reg_PC;

end rtl;
