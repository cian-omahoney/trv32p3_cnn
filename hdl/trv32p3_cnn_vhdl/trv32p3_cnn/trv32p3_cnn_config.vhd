
-- File generated by Go version U-2022.12#33f3808fcb#221128, Wed Feb 21 13:01:39 2024
-- Copyright 2014-2022 Synopsys, Inc. All rights reserved.
-- go -I../lib -F -DIS_VHDL -DSYNTHESIS_NO_UNGROUP -D__tct_patch__=0 -VHDL -otrv32p3_cnn_vhdl -cgo_options.cfg -Itrv32p3_cnn_vhdl/tmp_pdg -updg -updg_controller trv32p3_cnn



library trv32p3_cnn_lib;

configuration trv32p3_cnn_config of trv32p3_cnn is
  for structural
    for inst_alu : alu
      use entity trv32p3_cnn_lib.alu(rtl);
    end for;

    for inst_pca : pca
      use entity trv32p3_cnn_lib.pca(rtl);
    end for;

    for inst_cmp : cmp
      use entity trv32p3_cnn_lib.cmp(rtl);
    end for;

    for inst_div : div
      use entity trv32p3_cnn_lib.div(rtl);
    end for;

    for inst_lx : lx
      use entity trv32p3_cnn_lib.lx(rtl);
    end for;

    for inst_agu : agu
      use entity trv32p3_cnn_lib.agu(rtl);
    end for;

    for inst_mpy : mpy
      use entity trv32p3_cnn_lib.mpy(rtl);
    end for;

    for inst_ocd_addr_incr : ocd_addr_incr
      use entity trv32p3_cnn_lib.ocd_addr_incr(rtl);
    end for;

    for inst_cnn : cnn
      use entity trv32p3_cnn_lib.cnn(rtl);
    end for;

    for inst_dm_merge : dm_merge
      use entity trv32p3_cnn_lib.dm_merge(rtl);
    end for;

    for inst_dm_wbb : dm_wbb
      use entity trv32p3_cnn_lib.dm_wbb(rtl);
    end for;

    for inst_controller : controller
      use entity trv32p3_cnn_lib.controller(rtl);
    end for;

    for inst_reg_PC : reg_PC
      use entity trv32p3_cnn_lib.reg_PC(rtl)
        -- synopsys translate_off
        generic map (
          reg_log_gen => reg_log_gen)
        -- synopsys translate_on
        ;
    end for;

    for inst_reg_PC_ID : reg_PC_ID
      use entity trv32p3_cnn_lib.reg_PC_ID(rtl)
        -- synopsys translate_off
        generic map (
          reg_log_gen => reg_log_gen)
        -- synopsys translate_on
        ;
    end for;

    for inst_reg_PC_EX : reg_PC_EX
      use entity trv32p3_cnn_lib.reg_PC_EX(rtl)
        -- synopsys translate_off
        generic map (
          reg_log_gen => reg_log_gen)
        -- synopsys translate_on
        ;
    end for;

    for inst_reg_X : reg_X
      use entity trv32p3_cnn_lib.reg_X(rtl)
        -- synopsys translate_off
        generic map (
          reg_log_gen => reg_log_gen)
        -- synopsys translate_on
        ;
    end for;

    for inst_reg_ocd_addr : reg_ocd_addr
      use entity trv32p3_cnn_lib.reg_ocd_addr(rtl)
        -- synopsys translate_off
        generic map (
          reg_log_gen => reg_log_gen)
        -- synopsys translate_on
        ;
    end for;

    for inst_reg_ocd_data : reg_ocd_data
      use entity trv32p3_cnn_lib.reg_ocd_data(rtl)
        -- synopsys translate_off
        generic map (
          reg_log_gen => reg_log_gen)
        -- synopsys translate_on
        ;
    end for;

    for inst_reg_ocd_instr : reg_ocd_instr
      use entity trv32p3_cnn_lib.reg_ocd_instr(rtl)
        -- synopsys translate_off
        generic map (
          reg_log_gen => reg_log_gen)
        -- synopsys translate_on
        ;
    end for;

    for inst_mem_PMb : mem_PMb
      use entity trv32p3_cnn_lib.mem_PMb(rtl);
    end for;

    for inst_mem_DMb : mem_DMb
      use entity trv32p3_cnn_lib.mem_DMb(rtl);
    end for;

    for inst_mux_pm_addr : mux_pm_addr
      use entity trv32p3_cnn_lib.mux_pm_addr(rtl);
    end for;

    for inst_mux_pm_wr : mux_pm_wr
      use entity trv32p3_cnn_lib.mux_pm_wr(rtl);
    end for;

    for inst_mux_dm_addr : mux_dm_addr
      use entity trv32p3_cnn_lib.mux_dm_addr(rtl);
    end for;

    for inst_mux_dmb_wr : mux_dmb_wr
      use entity trv32p3_cnn_lib.mux_dmb_wr(rtl);
    end for;

    for inst_mux_x_w1 : mux_x_w1
      use entity trv32p3_cnn_lib.mux_x_w1(rtl);
    end for;

    for inst_mux_x_w1_dead : mux_x_w1_dead
      use entity trv32p3_cnn_lib.mux_x_w1_dead(rtl);
    end for;

    for inst_mux_ocd_data_w : mux_ocd_data_w
      use entity trv32p3_cnn_lib.mux_ocd_data_w(rtl);
    end for;

    for inst_mux_ocd_instr_w : mux_ocd_instr_w
      use entity trv32p3_cnn_lib.mux_ocd_instr_w(rtl);
    end for;

    for inst_mux_aluA : mux_aluA
      use entity trv32p3_cnn_lib.mux_aluA(rtl);
    end for;

    for inst_mux_aluB : mux_aluB
      use entity trv32p3_cnn_lib.mux_aluB(rtl);
    end for;

    for inst_mux_pcaA : mux_pcaA
      use entity trv32p3_cnn_lib.mux_pcaA(rtl);
    end for;

    for inst_mux_pcaB : mux_pcaB
      use entity trv32p3_cnn_lib.mux_pcaB(rtl);
    end for;

    for inst_mux_jmp_tgt_ID : mux_jmp_tgt_ID
      use entity trv32p3_cnn_lib.mux_jmp_tgt_ID(rtl);
    end for;

    for inst_mux_aguB : mux_aguB
      use entity trv32p3_cnn_lib.mux_aguB(rtl);
    end for;

    for inst_mux_mpyM : mux_mpyM
      use entity trv32p3_cnn_lib.mux_mpyM(rtl);
    end for;

    for inst_mux_ocd_swbreak : mux_ocd_swbreak
      use entity trv32p3_cnn_lib.mux_ocd_swbreak(rtl);
    end for;

    for inst_pipe_pidTGT : pipe_pidTGT
      use entity trv32p3_cnn_lib.pipe_pidTGT(rtl);
    end for;

    for inst_mux_pidTGT_w : mux_pidTGT_w
      use entity trv32p3_cnn_lib.mux_pidTGT_w(rtl);
    end for;

    for inst_mux_X_x_w1_wad : mux_X_x_w1_wad
      use entity trv32p3_cnn_lib.mux_X_x_w1_wad(rtl);
    end for;

    for inst_pipe_ocd_ld_DMbEX : pipe_ocd_ld_DMbEX
      use entity trv32p3_cnn_lib.pipe_ocd_ld_DMbEX(rtl);
    end for;

    for inst_pipe_ocd_ld_DMbS3 : pipe_ocd_ld_DMbS3
      use entity trv32p3_cnn_lib.pipe_ocd_ld_DMbS3(rtl);
    end for;

    for inst_pipe_ocd_st_DMbEX : pipe_ocd_st_DMbEX
      use entity trv32p3_cnn_lib.pipe_ocd_st_DMbEX(rtl);
    end for;

    for inst_pipe_ocd_st_DMbS3 : pipe_ocd_st_DMbS3
      use entity trv32p3_cnn_lib.pipe_ocd_st_DMbS3(rtl);
    end for;

    for inst_pipe_ocd_ld_PMbEX : pipe_ocd_ld_PMbEX
      use entity trv32p3_cnn_lib.pipe_ocd_ld_PMbEX(rtl);
    end for;

    for inst_pipe_ocd_ld_PMbS3 : pipe_ocd_ld_PMbS3
      use entity trv32p3_cnn_lib.pipe_ocd_ld_PMbS3(rtl);
    end for;

    for inst_pipe_ocd_st_PMbEX : pipe_ocd_st_PMbEX
      use entity trv32p3_cnn_lib.pipe_ocd_st_PMbEX(rtl);
    end for;

    for inst_hazards : hazards
      use entity trv32p3_cnn_lib.hazards(rtl);
    end for;

    for inst_debug_controller : debug_controller
      use entity trv32p3_cnn_lib.debug_controller(rtl)
        generic map (
          nid_gen => nid_gen)
        ;
    end for;

    for inst_jtag_interface : jtag_interface
      use entity trv32p3_cnn_lib.jtag_interface(rtl);
    end for;

    for inst_jtag_tap_controller : jtag_tap_controller
      use entity trv32p3_cnn_lib.jtag_tap_controller(rtl);
    end for;

    for inst_decoder : decoder
      use entity trv32p3_cnn_lib.decoder(rtl);
    end for;

  end for;
end trv32p3_cnn_config;

