
-- File generated by pdg version U-2022.12#33f3808fcb#221128
-- Copyright 2014-2022 Synopsys, Inc. All rights reserved.
-- pdg -I../lib -D__go__ -VHDL -cgo_options.cfg -DIS_VHDL -DSYNTHESIS_NO_UNGROUP -D__tct_patch__=0 +wtrv32p3_cnn_vhdl/tmp_pdg trv32p3_cnn


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_textio.all;
use std.textio.all;

library trv32p3_cnn_lib;
use trv32p3_cnn_lib.data_types.all;

package utilities is
  procedure hread(l : inout line; value : out signed; good : out boolean);

  procedure hread(l : inout line; value : out signed);

  procedure hread(l : inout line; value : out unsigned; good : out boolean);

  procedure hread(l : inout line; value : out unsigned);

  procedure hwrite(l : inout line; value : in signed; justified : in side := right; field : in width := 0);

  procedure hwrite(l : inout line; value : in unsigned; justified : in side := right; field : in width := 0);

end utilities;

package body utilities is
  procedure hread(l : inout line; value : out signed; good : out boolean) is
    variable slv_value : std_logic_vector(((value'length + 3) / 4) * 4 - 1 downto 0);
  begin
    hread(l, slv_value, good); value := signed(slv_value(value'range));
  end hread;

  procedure hread(l : inout line; value : out signed) is
    variable good : boolean;
  begin
    hread(l, value, good); assert good report "hread(line, signed) failed" severity error;
  end hread;

  procedure hread(l : inout line; value : out unsigned; good : out boolean) is
    variable slv_value : std_logic_vector(((value'length + 3) / 4) * 4 - 1 downto 0);
  begin
    hread(l, slv_value, good); value := unsigned(slv_value(value'range));
  end hread;

  procedure hread(l : inout line; value : out unsigned) is
    variable good : boolean;
  begin
    hread(l, value, good); assert good report "hread(line, unsigned) failed" severity error;
  end hread;

  procedure hwrite(l : inout line; value : in signed; justified : in side := right; field : in width := 0) is
  begin
    hwrite(l, std_logic_vector(value), justified, field);
  end hwrite;

  procedure hwrite(l : inout line; value : in unsigned; justified : in side := right; field : in width := 0) is
  begin
    hwrite(l, std_logic_vector(value), justified, field);
  end hwrite;

end utilities;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library trv32p3_cnn_lib;
use trv32p3_cnn_lib.data_types.all;
library primitives_lib;
use primitives_lib.primitives.all;
use primitives_lib.utilities.all;
use std.textio.all;

entity test_bench is
end test_bench;

architecture rtl of test_bench is
  signal w32_add_w32_w32_result : t_w32;
  signal w32_add_w32_w32_a : t_w32;
  signal w32_add_w32_w32_b : t_w32;
  signal w32_sub_w32_w32_result : t_w32;
  signal w32_sub_w32_w32_a : t_w32;
  signal w32_sub_w32_w32_b : t_w32;
  signal w32_slt_w32_w32_result : t_w32;
  signal w32_slt_w32_w32_a : t_w32;
  signal w32_slt_w32_w32_b : t_w32;
  signal w32_sltu_w32_w32_result : t_w32;
  signal w32_sltu_w32_w32_a : t_w32;
  signal w32_sltu_w32_w32_b : t_w32;
  signal w32_seq0_w32_result : t_w32;
  signal w32_seq0_w32_a : t_w32;
  signal w32_sne0_w32_result : t_w32;
  signal w32_sne0_w32_a : t_w32;
  signal w32_mul_w32_w32_result : t_w32;
  signal w32_mul_w32_w32_a : t_w32;
  signal w32_mul_w32_w32_b : t_w32;
  signal w32_mulh_w32_w32_result : t_w32;
  signal w32_mulh_w32_w32_a : t_w32;
  signal w32_mulh_w32_w32_b : t_w32;
  signal w32_mulhsu_w32_w32_result : t_w32;
  signal w32_mulhsu_w32_w32_a : t_w32;
  signal w32_mulhsu_w32_w32_b : t_w32;
  signal w32_mulhu_w32_w32_result : t_w32;
  signal w32_mulhu_w32_w32_a : t_w32;
  signal w32_mulhu_w32_w32_b : t_w32;
  signal w32_band_w32_w32_result : t_w32;
  signal w32_band_w32_w32_a : t_w32;
  signal w32_band_w32_w32_b : t_w32;
  signal w32_bor_w32_w32_result : t_w32;
  signal w32_bor_w32_w32_a : t_w32;
  signal w32_bor_w32_w32_b : t_w32;
  signal w32_bxor_w32_w32_result : t_w32;
  signal w32_bxor_w32_w32_a : t_w32;
  signal w32_bxor_w32_w32_b : t_w32;
  signal bool_eq_w32_w32_result : boolean;
  signal bool_eq_w32_w32_a : t_w32;
  signal bool_eq_w32_w32_b : t_w32;
  signal bool_ne_w32_w32_result : boolean;
  signal bool_ne_w32_w32_a : t_w32;
  signal bool_ne_w32_w32_b : t_w32;
  signal bool_lt_w32_w32_result : boolean;
  signal bool_lt_w32_w32_a : t_w32;
  signal bool_lt_w32_w32_b : t_w32;
  signal bool_ge_w32_w32_result : boolean;
  signal bool_ge_w32_w32_a : t_w32;
  signal bool_ge_w32_w32_b : t_w32;
  signal bool_ltu_w32_w32_result : boolean;
  signal bool_ltu_w32_w32_a : t_w32;
  signal bool_ltu_w32_w32_b : t_w32;
  signal bool_geu_w32_w32_result : boolean;
  signal bool_geu_w32_w32_a : t_w32;
  signal bool_geu_w32_w32_b : t_w32;
  signal w32_sra_w32_w32_result : t_w32;
  signal w32_sra_w32_w32_a : t_w32;
  signal w32_sra_w32_w32_b : t_w32;
  signal w32_sll_w32_w32_result : t_w32;
  signal w32_sll_w32_w32_a : t_w32;
  signal w32_sll_w32_w32_b : t_w32;
  signal w32_srl_w32_w32_result : t_w32;
  signal w32_srl_w32_w32_a : t_w32;
  signal w32_srl_w32_w32_b : t_w32;
  signal w32_sext_w08_result : t_w32;
  signal w32_sext_w08_a : t_w08;
  signal w32_zext_w08_result : t_w32;
  signal w32_zext_w08_a : t_w08;
  signal w32_sext_w16_result : t_w32;
  signal w32_sext_w16_a : t_w16;
  signal w32_zext_w16_result : t_w32;
  signal w32_zext_w16_a : t_w16;
  signal addr_incr1_addr_result : t_addr;
  signal addr_incr1_addr_a : t_addr;
  signal addr_incr4_addr_result : t_addr;
  signal addr_incr4_addr_a : t_addr;
  signal void_mul_hw_w32_w32_t2u_w32_w32_opa : t_w32;
  signal void_mul_hw_w32_w32_t2u_w32_w32_opb : t_w32;
  signal void_mul_hw_w32_w32_t2u_w32_w32_mode : t_t2u;
  signal void_mul_hw_w32_w32_t2u_w32_w32_pl : t_w32;
  signal void_mul_hw_w32_w32_t2u_w32_w32_ph : t_w32;
  signal w32_mac_w32_w32_w32_result_0 : t_w32;
  signal w32_mac_w32_w32_w32_c : t_w32;
  signal w32_mac_w32_w32_w32_a : t_w32;
  signal w32_mac_w32_w32_w32_b : t_w32;
begin
  main : process
    file data : text open read_mode is "trv32p3_cnn_testcases.txt";
    file failures : text open write_mode is "trv32p3_cnn_vhdl_failures.txt";
    variable line_in : line;
    variable line_out : line;
    variable primitive_name : string(1 to 300);
    variable char : character;
    variable rOK : boolean;
    variable i : natural;
    variable int : integer;
    variable v_w32_add_w32_w32_result : t_w32;
    variable v_w32_add_w32_w32_a : t_w32;
    variable v_w32_add_w32_w32_b : t_w32;
    variable v_w32_sub_w32_w32_result : t_w32;
    variable v_w32_sub_w32_w32_a : t_w32;
    variable v_w32_sub_w32_w32_b : t_w32;
    variable v_w32_slt_w32_w32_result : t_w32;
    variable v_w32_slt_w32_w32_a : t_w32;
    variable v_w32_slt_w32_w32_b : t_w32;
    variable v_w32_sltu_w32_w32_result : t_w32;
    variable v_w32_sltu_w32_w32_a : t_w32;
    variable v_w32_sltu_w32_w32_b : t_w32;
    variable v_w32_seq0_w32_result : t_w32;
    variable v_w32_seq0_w32_a : t_w32;
    variable v_w32_sne0_w32_result : t_w32;
    variable v_w32_sne0_w32_a : t_w32;
    variable v_w32_mul_w32_w32_result : t_w32;
    variable v_w32_mul_w32_w32_a : t_w32;
    variable v_w32_mul_w32_w32_b : t_w32;
    variable v_w32_mulh_w32_w32_result : t_w32;
    variable v_w32_mulh_w32_w32_a : t_w32;
    variable v_w32_mulh_w32_w32_b : t_w32;
    variable v_w32_mulhsu_w32_w32_result : t_w32;
    variable v_w32_mulhsu_w32_w32_a : t_w32;
    variable v_w32_mulhsu_w32_w32_b : t_w32;
    variable v_w32_mulhu_w32_w32_result : t_w32;
    variable v_w32_mulhu_w32_w32_a : t_w32;
    variable v_w32_mulhu_w32_w32_b : t_w32;
    variable v_w32_band_w32_w32_result : t_w32;
    variable v_w32_band_w32_w32_a : t_w32;
    variable v_w32_band_w32_w32_b : t_w32;
    variable v_w32_bor_w32_w32_result : t_w32;
    variable v_w32_bor_w32_w32_a : t_w32;
    variable v_w32_bor_w32_w32_b : t_w32;
    variable v_w32_bxor_w32_w32_result : t_w32;
    variable v_w32_bxor_w32_w32_a : t_w32;
    variable v_w32_bxor_w32_w32_b : t_w32;
    variable v_bool_eq_w32_w32_result : boolean;
    variable v_bool_eq_w32_w32_a : t_w32;
    variable v_bool_eq_w32_w32_b : t_w32;
    variable v_bool_ne_w32_w32_result : boolean;
    variable v_bool_ne_w32_w32_a : t_w32;
    variable v_bool_ne_w32_w32_b : t_w32;
    variable v_bool_lt_w32_w32_result : boolean;
    variable v_bool_lt_w32_w32_a : t_w32;
    variable v_bool_lt_w32_w32_b : t_w32;
    variable v_bool_ge_w32_w32_result : boolean;
    variable v_bool_ge_w32_w32_a : t_w32;
    variable v_bool_ge_w32_w32_b : t_w32;
    variable v_bool_ltu_w32_w32_result : boolean;
    variable v_bool_ltu_w32_w32_a : t_w32;
    variable v_bool_ltu_w32_w32_b : t_w32;
    variable v_bool_geu_w32_w32_result : boolean;
    variable v_bool_geu_w32_w32_a : t_w32;
    variable v_bool_geu_w32_w32_b : t_w32;
    variable v_w32_sra_w32_w32_result : t_w32;
    variable v_w32_sra_w32_w32_a : t_w32;
    variable v_w32_sra_w32_w32_b : t_w32;
    variable v_w32_sll_w32_w32_result : t_w32;
    variable v_w32_sll_w32_w32_a : t_w32;
    variable v_w32_sll_w32_w32_b : t_w32;
    variable v_w32_srl_w32_w32_result : t_w32;
    variable v_w32_srl_w32_w32_a : t_w32;
    variable v_w32_srl_w32_w32_b : t_w32;
    variable v_w32_sext_w08_result : t_w32;
    variable v_w32_sext_w08_a : t_w08;
    variable v_w32_zext_w08_result : t_w32;
    variable v_w32_zext_w08_a : t_w08;
    variable v_w32_sext_w16_result : t_w32;
    variable v_w32_sext_w16_a : t_w16;
    variable v_w32_zext_w16_result : t_w32;
    variable v_w32_zext_w16_a : t_w16;
    variable v_addr_incr1_addr_result : t_addr;
    variable v_addr_incr1_addr_a : t_addr;
    variable v_addr_incr4_addr_result : t_addr;
    variable v_addr_incr4_addr_a : t_addr;
    variable v_void_mul_hw_w32_w32_t2u_w32_w32_opa : t_w32;
    variable v_void_mul_hw_w32_w32_t2u_w32_w32_opb : t_w32;
    variable v_void_mul_hw_w32_w32_t2u_w32_w32_mode : t_t2u;
    variable v_void_mul_hw_w32_w32_t2u_w32_w32_pl : t_w32;
    variable v_void_mul_hw_w32_w32_t2u_w32_w32_ph : t_w32;
    variable v_w32_mac_w32_w32_w32_result_0 : t_w32;
    variable v_w32_mac_w32_w32_w32_c : t_w32;
    variable v_w32_mac_w32_w32_w32_a : t_w32;
    variable v_w32_mac_w32_w32_w32_b : t_w32;
  begin
    while not endfile(data) loop
      readline(data , line_in);
      line_out := new string'(line_in.all);
      i := 1;
      char := '.';
      while not (char = ' ') loop
        read(line_in, char, rOK);
        primitive_name(i) := char;
        i := i + 1;
      end loop;
      if (primitive_name(1 to 16) = "w32_add_w32_w32 ") then
        hread(line_in, v_w32_add_w32_w32_a, rOK);
        w32_add_w32_w32_a <= v_w32_add_w32_w32_a;
        hread(line_in, v_w32_add_w32_w32_b, rOK);
        w32_add_w32_w32_b <= v_w32_add_w32_w32_b;
        hread(line_in, v_w32_add_w32_w32_result, rOK);
        wait for 0 ns;
          w32_add_w32_w32(w32_add_w32_w32_result, w32_add_w32_w32_a, w32_add_w32_w32_b);
          wait for 1 ns;
            if not (w32_add_w32_w32_result = v_w32_add_w32_w32_result) then
              write(line_out, string'(" ; found w32_add_w32_w32_result: "));
              hwrite(line_out, w32_add_w32_w32_result);
              writeline(failures, line_out);
            end if;
            assert (w32_add_w32_w32_result = v_w32_add_w32_w32_result) report "output of result wrong" severity error;
          end if;
          if (primitive_name(1 to 16) = "w32_sub_w32_w32 ") then
            hread(line_in, v_w32_sub_w32_w32_a, rOK);
            w32_sub_w32_w32_a <= v_w32_sub_w32_w32_a;
            hread(line_in, v_w32_sub_w32_w32_b, rOK);
            w32_sub_w32_w32_b <= v_w32_sub_w32_w32_b;
            hread(line_in, v_w32_sub_w32_w32_result, rOK);
            wait for 0 ns;
              w32_sub_w32_w32(w32_sub_w32_w32_result, w32_sub_w32_w32_a, w32_sub_w32_w32_b);
              wait for 1 ns;
                if not (w32_sub_w32_w32_result = v_w32_sub_w32_w32_result) then
                  write(line_out, string'(" ; found w32_sub_w32_w32_result: "));
                  hwrite(line_out, w32_sub_w32_w32_result);
                  writeline(failures, line_out);
                end if;
                assert (w32_sub_w32_w32_result = v_w32_sub_w32_w32_result) report "output of result wrong" severity error;
              end if;
              if (primitive_name(1 to 16) = "w32_slt_w32_w32 ") then
                hread(line_in, v_w32_slt_w32_w32_a, rOK);
                w32_slt_w32_w32_a <= v_w32_slt_w32_w32_a;
                hread(line_in, v_w32_slt_w32_w32_b, rOK);
                w32_slt_w32_w32_b <= v_w32_slt_w32_w32_b;
                hread(line_in, v_w32_slt_w32_w32_result, rOK);
                wait for 0 ns;
                  w32_slt_w32_w32(w32_slt_w32_w32_result, w32_slt_w32_w32_a, w32_slt_w32_w32_b);
                  wait for 1 ns;
                    if not (w32_slt_w32_w32_result = v_w32_slt_w32_w32_result) then
                      write(line_out, string'(" ; found w32_slt_w32_w32_result: "));
                      hwrite(line_out, w32_slt_w32_w32_result);
                      writeline(failures, line_out);
                    end if;
                    assert (w32_slt_w32_w32_result = v_w32_slt_w32_w32_result) report "output of result wrong" severity error;
                  end if;
                  if (primitive_name(1 to 17) = "w32_sltu_w32_w32 ") then
                    hread(line_in, v_w32_sltu_w32_w32_a, rOK);
                    w32_sltu_w32_w32_a <= v_w32_sltu_w32_w32_a;
                    hread(line_in, v_w32_sltu_w32_w32_b, rOK);
                    w32_sltu_w32_w32_b <= v_w32_sltu_w32_w32_b;
                    hread(line_in, v_w32_sltu_w32_w32_result, rOK);
                    wait for 0 ns;
                      w32_sltu_w32_w32(w32_sltu_w32_w32_result, w32_sltu_w32_w32_a, w32_sltu_w32_w32_b);
                      wait for 1 ns;
                        if not (w32_sltu_w32_w32_result = v_w32_sltu_w32_w32_result) then
                          write(line_out, string'(" ; found w32_sltu_w32_w32_result: "));
                          hwrite(line_out, w32_sltu_w32_w32_result);
                          writeline(failures, line_out);
                        end if;
                        assert (w32_sltu_w32_w32_result = v_w32_sltu_w32_w32_result) report "output of result wrong" severity error;
                      end if;
                      if (primitive_name(1 to 13) = "w32_seq0_w32 ") then
                        hread(line_in, v_w32_seq0_w32_a, rOK);
                        w32_seq0_w32_a <= v_w32_seq0_w32_a;
                        hread(line_in, v_w32_seq0_w32_result, rOK);
                        wait for 0 ns;
                          w32_seq0_w32(w32_seq0_w32_result, w32_seq0_w32_a);
                          wait for 1 ns;
                            if not (w32_seq0_w32_result = v_w32_seq0_w32_result) then
                              write(line_out, string'(" ; found w32_seq0_w32_result: "));
                              hwrite(line_out, w32_seq0_w32_result);
                              writeline(failures, line_out);
                            end if;
                            assert (w32_seq0_w32_result = v_w32_seq0_w32_result) report "output of result wrong" severity error;
                          end if;
                          if (primitive_name(1 to 13) = "w32_sne0_w32 ") then
                            hread(line_in, v_w32_sne0_w32_a, rOK);
                            w32_sne0_w32_a <= v_w32_sne0_w32_a;
                            hread(line_in, v_w32_sne0_w32_result, rOK);
                            wait for 0 ns;
                              w32_sne0_w32(w32_sne0_w32_result, w32_sne0_w32_a);
                              wait for 1 ns;
                                if not (w32_sne0_w32_result = v_w32_sne0_w32_result) then
                                  write(line_out, string'(" ; found w32_sne0_w32_result: "));
                                  hwrite(line_out, w32_sne0_w32_result);
                                  writeline(failures, line_out);
                                end if;
                                assert (w32_sne0_w32_result = v_w32_sne0_w32_result) report "output of result wrong" severity error;
                              end if;
                              if (primitive_name(1 to 16) = "w32_mul_w32_w32 ") then
                                hread(line_in, v_w32_mul_w32_w32_a, rOK);
                                w32_mul_w32_w32_a <= v_w32_mul_w32_w32_a;
                                hread(line_in, v_w32_mul_w32_w32_b, rOK);
                                w32_mul_w32_w32_b <= v_w32_mul_w32_w32_b;
                                hread(line_in, v_w32_mul_w32_w32_result, rOK);
                                wait for 0 ns;
                                  w32_mul_w32_w32(w32_mul_w32_w32_result, w32_mul_w32_w32_a, w32_mul_w32_w32_b);
                                  wait for 1 ns;
                                    if not (w32_mul_w32_w32_result = v_w32_mul_w32_w32_result) then
                                      write(line_out, string'(" ; found w32_mul_w32_w32_result: "));
                                      hwrite(line_out, w32_mul_w32_w32_result);
                                      writeline(failures, line_out);
                                    end if;
                                    assert (w32_mul_w32_w32_result = v_w32_mul_w32_w32_result) report "output of result wrong" severity error;
                                  end if;
                                  if (primitive_name(1 to 17) = "w32_mulh_w32_w32 ") then
                                    hread(line_in, v_w32_mulh_w32_w32_a, rOK);
                                    w32_mulh_w32_w32_a <= v_w32_mulh_w32_w32_a;
                                    hread(line_in, v_w32_mulh_w32_w32_b, rOK);
                                    w32_mulh_w32_w32_b <= v_w32_mulh_w32_w32_b;
                                    hread(line_in, v_w32_mulh_w32_w32_result, rOK);
                                    wait for 0 ns;
                                      w32_mulh_w32_w32(w32_mulh_w32_w32_result, w32_mulh_w32_w32_a, w32_mulh_w32_w32_b);
                                      wait for 1 ns;
                                        if not (w32_mulh_w32_w32_result = v_w32_mulh_w32_w32_result) then
                                          write(line_out, string'(" ; found w32_mulh_w32_w32_result: "));
                                          hwrite(line_out, w32_mulh_w32_w32_result);
                                          writeline(failures, line_out);
                                        end if;
                                        assert (w32_mulh_w32_w32_result = v_w32_mulh_w32_w32_result) report "output of result wrong" severity error;
                                      end if;
                                      if (primitive_name(1 to 19) = "w32_mulhsu_w32_w32 ") then
                                        hread(line_in, v_w32_mulhsu_w32_w32_a, rOK);
                                        w32_mulhsu_w32_w32_a <= v_w32_mulhsu_w32_w32_a;
                                        hread(line_in, v_w32_mulhsu_w32_w32_b, rOK);
                                        w32_mulhsu_w32_w32_b <= v_w32_mulhsu_w32_w32_b;
                                        hread(line_in, v_w32_mulhsu_w32_w32_result, rOK);
                                        wait for 0 ns;
                                          w32_mulhsu_w32_w32(w32_mulhsu_w32_w32_result, w32_mulhsu_w32_w32_a, w32_mulhsu_w32_w32_b);
                                          wait for 1 ns;
                                            if not (w32_mulhsu_w32_w32_result = v_w32_mulhsu_w32_w32_result) then
                                              write(line_out, string'(" ; found w32_mulhsu_w32_w32_result: "));
                                              hwrite(line_out, w32_mulhsu_w32_w32_result);
                                              writeline(failures, line_out);
                                            end if;
                                            assert (w32_mulhsu_w32_w32_result = v_w32_mulhsu_w32_w32_result) report "output of result wrong" severity error;
                                          end if;
                                          if (primitive_name(1 to 18) = "w32_mulhu_w32_w32 ") then
                                            hread(line_in, v_w32_mulhu_w32_w32_a, rOK);
                                            w32_mulhu_w32_w32_a <= v_w32_mulhu_w32_w32_a;
                                            hread(line_in, v_w32_mulhu_w32_w32_b, rOK);
                                            w32_mulhu_w32_w32_b <= v_w32_mulhu_w32_w32_b;
                                            hread(line_in, v_w32_mulhu_w32_w32_result, rOK);
                                            wait for 0 ns;
                                              w32_mulhu_w32_w32(w32_mulhu_w32_w32_result, w32_mulhu_w32_w32_a, w32_mulhu_w32_w32_b);
                                              wait for 1 ns;
                                                if not (w32_mulhu_w32_w32_result = v_w32_mulhu_w32_w32_result) then
                                                  write(line_out, string'(" ; found w32_mulhu_w32_w32_result: "));
                                                  hwrite(line_out, w32_mulhu_w32_w32_result);
                                                  writeline(failures, line_out);
                                                end if;
                                                assert (w32_mulhu_w32_w32_result = v_w32_mulhu_w32_w32_result) report "output of result wrong" severity error;
                                              end if;
                                              if (primitive_name(1 to 17) = "w32_band_w32_w32 ") then
                                                hread(line_in, v_w32_band_w32_w32_a, rOK);
                                                w32_band_w32_w32_a <= v_w32_band_w32_w32_a;
                                                hread(line_in, v_w32_band_w32_w32_b, rOK);
                                                w32_band_w32_w32_b <= v_w32_band_w32_w32_b;
                                                hread(line_in, v_w32_band_w32_w32_result, rOK);
                                                wait for 0 ns;
                                                  w32_band_w32_w32(w32_band_w32_w32_result, w32_band_w32_w32_a, w32_band_w32_w32_b);
                                                  wait for 1 ns;
                                                    if not (w32_band_w32_w32_result = v_w32_band_w32_w32_result) then
                                                      write(line_out, string'(" ; found w32_band_w32_w32_result: "));
                                                      hwrite(line_out, w32_band_w32_w32_result);
                                                      writeline(failures, line_out);
                                                    end if;
                                                    assert (w32_band_w32_w32_result = v_w32_band_w32_w32_result) report "output of result wrong" severity error;
                                                  end if;
                                                  if (primitive_name(1 to 16) = "w32_bor_w32_w32 ") then
                                                    hread(line_in, v_w32_bor_w32_w32_a, rOK);
                                                    w32_bor_w32_w32_a <= v_w32_bor_w32_w32_a;
                                                    hread(line_in, v_w32_bor_w32_w32_b, rOK);
                                                    w32_bor_w32_w32_b <= v_w32_bor_w32_w32_b;
                                                    hread(line_in, v_w32_bor_w32_w32_result, rOK);
                                                    wait for 0 ns;
                                                      w32_bor_w32_w32(w32_bor_w32_w32_result, w32_bor_w32_w32_a, w32_bor_w32_w32_b);
                                                      wait for 1 ns;
                                                        if not (w32_bor_w32_w32_result = v_w32_bor_w32_w32_result) then
                                                          write(line_out, string'(" ; found w32_bor_w32_w32_result: "));
                                                          hwrite(line_out, w32_bor_w32_w32_result);
                                                          writeline(failures, line_out);
                                                        end if;
                                                        assert (w32_bor_w32_w32_result = v_w32_bor_w32_w32_result) report "output of result wrong" severity error;
                                                      end if;
                                                      if (primitive_name(1 to 17) = "w32_bxor_w32_w32 ") then
                                                        hread(line_in, v_w32_bxor_w32_w32_a, rOK);
                                                        w32_bxor_w32_w32_a <= v_w32_bxor_w32_w32_a;
                                                        hread(line_in, v_w32_bxor_w32_w32_b, rOK);
                                                        w32_bxor_w32_w32_b <= v_w32_bxor_w32_w32_b;
                                                        hread(line_in, v_w32_bxor_w32_w32_result, rOK);
                                                        wait for 0 ns;
                                                          w32_bxor_w32_w32(w32_bxor_w32_w32_result, w32_bxor_w32_w32_a, w32_bxor_w32_w32_b);
                                                          wait for 1 ns;
                                                            if not (w32_bxor_w32_w32_result = v_w32_bxor_w32_w32_result) then
                                                              write(line_out, string'(" ; found w32_bxor_w32_w32_result: "));
                                                              hwrite(line_out, w32_bxor_w32_w32_result);
                                                              writeline(failures, line_out);
                                                            end if;
                                                            assert (w32_bxor_w32_w32_result = v_w32_bxor_w32_w32_result) report "output of result wrong" severity error;
                                                          end if;
                                                          if (primitive_name(1 to 16) = "bool_eq_w32_w32 ") then
                                                            hread(line_in, v_bool_eq_w32_w32_a, rOK);
                                                            bool_eq_w32_w32_a <= v_bool_eq_w32_w32_a;
                                                            hread(line_in, v_bool_eq_w32_w32_b, rOK);
                                                            bool_eq_w32_w32_b <= v_bool_eq_w32_w32_b;
                                                            read(line_in, int, rOK);
                                                            v_bool_eq_w32_w32_result := int /= 0;
                                                            wait for 0 ns;
                                                              bool_eq_w32_w32(bool_eq_w32_w32_result, bool_eq_w32_w32_a, bool_eq_w32_w32_b);
                                                              wait for 1 ns;
                                                                if not (bool_eq_w32_w32_result = v_bool_eq_w32_w32_result) then
                                                                  write(line_out, string'(" ; found bool_eq_w32_w32_result: "));
                                                                  write(line_out, bool_eq_w32_w32_result);
                                                                  writeline(failures, line_out);
                                                                end if;
                                                                assert (bool_eq_w32_w32_result = v_bool_eq_w32_w32_result) report "output of result wrong" severity error;
                                                              end if;
                                                              if (primitive_name(1 to 16) = "bool_ne_w32_w32 ") then
                                                                hread(line_in, v_bool_ne_w32_w32_a, rOK);
                                                                bool_ne_w32_w32_a <= v_bool_ne_w32_w32_a;
                                                                hread(line_in, v_bool_ne_w32_w32_b, rOK);
                                                                bool_ne_w32_w32_b <= v_bool_ne_w32_w32_b;
                                                                read(line_in, int, rOK);
                                                                v_bool_ne_w32_w32_result := int /= 0;
                                                                wait for 0 ns;
                                                                  bool_ne_w32_w32(bool_ne_w32_w32_result, bool_ne_w32_w32_a, bool_ne_w32_w32_b);
                                                                  wait for 1 ns;
                                                                    if not (bool_ne_w32_w32_result = v_bool_ne_w32_w32_result) then
                                                                      write(line_out, string'(" ; found bool_ne_w32_w32_result: "));
                                                                      write(line_out, bool_ne_w32_w32_result);
                                                                      writeline(failures, line_out);
                                                                    end if;
                                                                    assert (bool_ne_w32_w32_result = v_bool_ne_w32_w32_result) report "output of result wrong" severity error;
                                                                  end if;
                                                                  if (primitive_name(1 to 16) = "bool_lt_w32_w32 ") then
                                                                    hread(line_in, v_bool_lt_w32_w32_a, rOK);
                                                                    bool_lt_w32_w32_a <= v_bool_lt_w32_w32_a;
                                                                    hread(line_in, v_bool_lt_w32_w32_b, rOK);
                                                                    bool_lt_w32_w32_b <= v_bool_lt_w32_w32_b;
                                                                    read(line_in, int, rOK);
                                                                    v_bool_lt_w32_w32_result := int /= 0;
                                                                    wait for 0 ns;
                                                                      bool_lt_w32_w32(bool_lt_w32_w32_result, bool_lt_w32_w32_a, bool_lt_w32_w32_b);
                                                                      wait for 1 ns;
                                                                        if not (bool_lt_w32_w32_result = v_bool_lt_w32_w32_result) then
                                                                          write(line_out, string'(" ; found bool_lt_w32_w32_result: "));
                                                                          write(line_out, bool_lt_w32_w32_result);
                                                                          writeline(failures, line_out);
                                                                        end if;
                                                                        assert (bool_lt_w32_w32_result = v_bool_lt_w32_w32_result) report "output of result wrong" severity error;
                                                                      end if;
                                                                      if (primitive_name(1 to 16) = "bool_ge_w32_w32 ") then
                                                                        hread(line_in, v_bool_ge_w32_w32_a, rOK);
                                                                        bool_ge_w32_w32_a <= v_bool_ge_w32_w32_a;
                                                                        hread(line_in, v_bool_ge_w32_w32_b, rOK);
                                                                        bool_ge_w32_w32_b <= v_bool_ge_w32_w32_b;
                                                                        read(line_in, int, rOK);
                                                                        v_bool_ge_w32_w32_result := int /= 0;
                                                                        wait for 0 ns;
                                                                          bool_ge_w32_w32(bool_ge_w32_w32_result, bool_ge_w32_w32_a, bool_ge_w32_w32_b);
                                                                          wait for 1 ns;
                                                                            if not (bool_ge_w32_w32_result = v_bool_ge_w32_w32_result) then
                                                                              write(line_out, string'(" ; found bool_ge_w32_w32_result: "));
                                                                              write(line_out, bool_ge_w32_w32_result);
                                                                              writeline(failures, line_out);
                                                                            end if;
                                                                            assert (bool_ge_w32_w32_result = v_bool_ge_w32_w32_result) report "output of result wrong" severity error;
                                                                          end if;
                                                                          if (primitive_name(1 to 17) = "bool_ltu_w32_w32 ") then
                                                                            hread(line_in, v_bool_ltu_w32_w32_a, rOK);
                                                                            bool_ltu_w32_w32_a <= v_bool_ltu_w32_w32_a;
                                                                            hread(line_in, v_bool_ltu_w32_w32_b, rOK);
                                                                            bool_ltu_w32_w32_b <= v_bool_ltu_w32_w32_b;
                                                                            read(line_in, int, rOK);
                                                                            v_bool_ltu_w32_w32_result := int /= 0;
                                                                            wait for 0 ns;
                                                                              bool_ltu_w32_w32(bool_ltu_w32_w32_result, bool_ltu_w32_w32_a, bool_ltu_w32_w32_b);
                                                                              wait for 1 ns;
                                                                                if not (bool_ltu_w32_w32_result = v_bool_ltu_w32_w32_result) then
                                                                                write(line_out, string'(" ; found bool_ltu_w32_w32_result: "));
                                                                                write(line_out, bool_ltu_w32_w32_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (bool_ltu_w32_w32_result = v_bool_ltu_w32_w32_result) report "output of result wrong" severity error;
                                                                              end if;
                                                                              if (primitive_name(1 to 17) = "bool_geu_w32_w32 ") then
                                                                                hread(line_in, v_bool_geu_w32_w32_a, rOK);
                                                                                bool_geu_w32_w32_a <= v_bool_geu_w32_w32_a;
                                                                                hread(line_in, v_bool_geu_w32_w32_b, rOK);
                                                                                bool_geu_w32_w32_b <= v_bool_geu_w32_w32_b;
                                                                                read(line_in, int, rOK);
                                                                                v_bool_geu_w32_w32_result := int /= 0;
                                                                                wait for 0 ns;
                                                                                bool_geu_w32_w32(bool_geu_w32_w32_result, bool_geu_w32_w32_a, bool_geu_w32_w32_b);
                                                                                wait for 1 ns;
                                                                                if not (bool_geu_w32_w32_result = v_bool_geu_w32_w32_result) then
                                                                                write(line_out, string'(" ; found bool_geu_w32_w32_result: "));
                                                                                write(line_out, bool_geu_w32_w32_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (bool_geu_w32_w32_result = v_bool_geu_w32_w32_result) report "output of result wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 16) = "w32_sra_w32_w32 ") then
                                                                                hread(line_in, v_w32_sra_w32_w32_a, rOK);
                                                                                w32_sra_w32_w32_a <= v_w32_sra_w32_w32_a;
                                                                                hread(line_in, v_w32_sra_w32_w32_b, rOK);
                                                                                w32_sra_w32_w32_b <= v_w32_sra_w32_w32_b;
                                                                                hread(line_in, v_w32_sra_w32_w32_result, rOK);
                                                                                wait for 0 ns;
                                                                                w32_sra_w32_w32(w32_sra_w32_w32_result, w32_sra_w32_w32_a, w32_sra_w32_w32_b);
                                                                                wait for 1 ns;
                                                                                if not (w32_sra_w32_w32_result = v_w32_sra_w32_w32_result) then
                                                                                write(line_out, string'(" ; found w32_sra_w32_w32_result: "));
                                                                                hwrite(line_out, w32_sra_w32_w32_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (w32_sra_w32_w32_result = v_w32_sra_w32_w32_result) report "output of result wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 16) = "w32_sll_w32_w32 ") then
                                                                                hread(line_in, v_w32_sll_w32_w32_a, rOK);
                                                                                w32_sll_w32_w32_a <= v_w32_sll_w32_w32_a;
                                                                                hread(line_in, v_w32_sll_w32_w32_b, rOK);
                                                                                w32_sll_w32_w32_b <= v_w32_sll_w32_w32_b;
                                                                                hread(line_in, v_w32_sll_w32_w32_result, rOK);
                                                                                wait for 0 ns;
                                                                                w32_sll_w32_w32(w32_sll_w32_w32_result, w32_sll_w32_w32_a, w32_sll_w32_w32_b);
                                                                                wait for 1 ns;
                                                                                if not (w32_sll_w32_w32_result = v_w32_sll_w32_w32_result) then
                                                                                write(line_out, string'(" ; found w32_sll_w32_w32_result: "));
                                                                                hwrite(line_out, w32_sll_w32_w32_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (w32_sll_w32_w32_result = v_w32_sll_w32_w32_result) report "output of result wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 16) = "w32_srl_w32_w32 ") then
                                                                                hread(line_in, v_w32_srl_w32_w32_a, rOK);
                                                                                w32_srl_w32_w32_a <= v_w32_srl_w32_w32_a;
                                                                                hread(line_in, v_w32_srl_w32_w32_b, rOK);
                                                                                w32_srl_w32_w32_b <= v_w32_srl_w32_w32_b;
                                                                                hread(line_in, v_w32_srl_w32_w32_result, rOK);
                                                                                wait for 0 ns;
                                                                                w32_srl_w32_w32(w32_srl_w32_w32_result, w32_srl_w32_w32_a, w32_srl_w32_w32_b);
                                                                                wait for 1 ns;
                                                                                if not (w32_srl_w32_w32_result = v_w32_srl_w32_w32_result) then
                                                                                write(line_out, string'(" ; found w32_srl_w32_w32_result: "));
                                                                                hwrite(line_out, w32_srl_w32_w32_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (w32_srl_w32_w32_result = v_w32_srl_w32_w32_result) report "output of result wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 13) = "w32_sext_w08 ") then
                                                                                hread(line_in, v_w32_sext_w08_a, rOK);
                                                                                w32_sext_w08_a <= v_w32_sext_w08_a;
                                                                                hread(line_in, v_w32_sext_w08_result, rOK);
                                                                                wait for 0 ns;
                                                                                w32_sext_w08(w32_sext_w08_result, w32_sext_w08_a);
                                                                                wait for 1 ns;
                                                                                if not (w32_sext_w08_result = v_w32_sext_w08_result) then
                                                                                write(line_out, string'(" ; found w32_sext_w08_result: "));
                                                                                hwrite(line_out, w32_sext_w08_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (w32_sext_w08_result = v_w32_sext_w08_result) report "output of result wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 13) = "w32_zext_w08 ") then
                                                                                hread(line_in, v_w32_zext_w08_a, rOK);
                                                                                w32_zext_w08_a <= v_w32_zext_w08_a;
                                                                                hread(line_in, v_w32_zext_w08_result, rOK);
                                                                                wait for 0 ns;
                                                                                w32_zext_w08(w32_zext_w08_result, w32_zext_w08_a);
                                                                                wait for 1 ns;
                                                                                if not (w32_zext_w08_result = v_w32_zext_w08_result) then
                                                                                write(line_out, string'(" ; found w32_zext_w08_result: "));
                                                                                hwrite(line_out, w32_zext_w08_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (w32_zext_w08_result = v_w32_zext_w08_result) report "output of result wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 13) = "w32_sext_w16 ") then
                                                                                hread(line_in, v_w32_sext_w16_a, rOK);
                                                                                w32_sext_w16_a <= v_w32_sext_w16_a;
                                                                                hread(line_in, v_w32_sext_w16_result, rOK);
                                                                                wait for 0 ns;
                                                                                w32_sext_w16(w32_sext_w16_result, w32_sext_w16_a);
                                                                                wait for 1 ns;
                                                                                if not (w32_sext_w16_result = v_w32_sext_w16_result) then
                                                                                write(line_out, string'(" ; found w32_sext_w16_result: "));
                                                                                hwrite(line_out, w32_sext_w16_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (w32_sext_w16_result = v_w32_sext_w16_result) report "output of result wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 13) = "w32_zext_w16 ") then
                                                                                hread(line_in, v_w32_zext_w16_a, rOK);
                                                                                w32_zext_w16_a <= v_w32_zext_w16_a;
                                                                                hread(line_in, v_w32_zext_w16_result, rOK);
                                                                                wait for 0 ns;
                                                                                w32_zext_w16(w32_zext_w16_result, w32_zext_w16_a);
                                                                                wait for 1 ns;
                                                                                if not (w32_zext_w16_result = v_w32_zext_w16_result) then
                                                                                write(line_out, string'(" ; found w32_zext_w16_result: "));
                                                                                hwrite(line_out, w32_zext_w16_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (w32_zext_w16_result = v_w32_zext_w16_result) report "output of result wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 9) = "void_nop ") then
                                                                                wait for 0 ns;
                                                                                void_nop;
                                                                                wait for 1 ns;
                                                                                end if;
                                                                                if (primitive_name(1 to 16) = "addr_incr1_addr ") then
                                                                                hread(line_in, v_addr_incr1_addr_a, rOK);
                                                                                addr_incr1_addr_a <= v_addr_incr1_addr_a;
                                                                                hread(line_in, v_addr_incr1_addr_result, rOK);
                                                                                wait for 0 ns;
                                                                                addr_incr1_addr(addr_incr1_addr_result, addr_incr1_addr_a);
                                                                                wait for 1 ns;
                                                                                if not (addr_incr1_addr_result = v_addr_incr1_addr_result) then
                                                                                write(line_out, string'(" ; found addr_incr1_addr_result: "));
                                                                                hwrite(line_out, addr_incr1_addr_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (addr_incr1_addr_result = v_addr_incr1_addr_result) report "output of result wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 16) = "addr_incr4_addr ") then
                                                                                hread(line_in, v_addr_incr4_addr_a, rOK);
                                                                                addr_incr4_addr_a <= v_addr_incr4_addr_a;
                                                                                hread(line_in, v_addr_incr4_addr_result, rOK);
                                                                                wait for 0 ns;
                                                                                addr_incr4_addr(addr_incr4_addr_result, addr_incr4_addr_a);
                                                                                wait for 1 ns;
                                                                                if not (addr_incr4_addr_result = v_addr_incr4_addr_result) then
                                                                                write(line_out, string'(" ; found addr_incr4_addr_result: "));
                                                                                hwrite(line_out, addr_incr4_addr_result);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (addr_incr4_addr_result = v_addr_incr4_addr_result) report "output of result wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 32) = "void_mul_hw_w32_w32_t2u_w32_w32 ") then
                                                                                hread(line_in, v_void_mul_hw_w32_w32_t2u_w32_w32_opa, rOK);
                                                                                void_mul_hw_w32_w32_t2u_w32_w32_opa <= v_void_mul_hw_w32_w32_t2u_w32_w32_opa;
                                                                                hread(line_in, v_void_mul_hw_w32_w32_t2u_w32_w32_opb, rOK);
                                                                                void_mul_hw_w32_w32_t2u_w32_w32_opb <= v_void_mul_hw_w32_w32_t2u_w32_w32_opb;
                                                                                hread(line_in, v_void_mul_hw_w32_w32_t2u_w32_w32_mode, rOK);
                                                                                void_mul_hw_w32_w32_t2u_w32_w32_mode <= v_void_mul_hw_w32_w32_t2u_w32_w32_mode;
                                                                                hread(line_in, v_void_mul_hw_w32_w32_t2u_w32_w32_pl, rOK);
                                                                                hread(line_in, v_void_mul_hw_w32_w32_t2u_w32_w32_ph, rOK);
                                                                                wait for 0 ns;
                                                                                void_mul_hw_w32_w32_t2u_w32_w32(void_mul_hw_w32_w32_t2u_w32_w32_opa, void_mul_hw_w32_w32_t2u_w32_w32_opb, void_mul_hw_w32_w32_t2u_w32_w32_mode, void_mul_hw_w32_w32_t2u_w32_w32_pl, void_mul_hw_w32_w32_t2u_w32_w32_ph);
                                                                                wait for 1 ns;
                                                                                if not (void_mul_hw_w32_w32_t2u_w32_w32_pl = v_void_mul_hw_w32_w32_t2u_w32_w32_pl) then
                                                                                write(line_out, string'(" ; found void_mul_hw_w32_w32_t2u_w32_w32_pl: "));
                                                                                hwrite(line_out, void_mul_hw_w32_w32_t2u_w32_w32_pl);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (void_mul_hw_w32_w32_t2u_w32_w32_pl = v_void_mul_hw_w32_w32_t2u_w32_w32_pl) report "output of pl wrong" severity error;
                                                                                if not (void_mul_hw_w32_w32_t2u_w32_w32_ph = v_void_mul_hw_w32_w32_t2u_w32_w32_ph) then
                                                                                write(line_out, string'(" ; found void_mul_hw_w32_w32_t2u_w32_w32_ph: "));
                                                                                hwrite(line_out, void_mul_hw_w32_w32_t2u_w32_w32_ph);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (void_mul_hw_w32_w32_t2u_w32_w32_ph = v_void_mul_hw_w32_w32_t2u_w32_w32_ph) report "output of ph wrong" severity error;
                                                                                end if;
                                                                                if (primitive_name(1 to 20) = "w32_mac_w32_w32_w32 ") then
                                                                                hread(line_in, v_w32_mac_w32_w32_w32_c, rOK);
                                                                                w32_mac_w32_w32_w32_c <= v_w32_mac_w32_w32_w32_c;
                                                                                hread(line_in, v_w32_mac_w32_w32_w32_a, rOK);
                                                                                w32_mac_w32_w32_w32_a <= v_w32_mac_w32_w32_w32_a;
                                                                                hread(line_in, v_w32_mac_w32_w32_w32_b, rOK);
                                                                                w32_mac_w32_w32_w32_b <= v_w32_mac_w32_w32_w32_b;
                                                                                hread(line_in, v_w32_mac_w32_w32_w32_result_0, rOK);
                                                                                wait for 0 ns;
                                                                                w32_mac_w32_w32_w32(w32_mac_w32_w32_w32_result_0, w32_mac_w32_w32_w32_c, w32_mac_w32_w32_w32_a, w32_mac_w32_w32_w32_b);
                                                                                wait for 1 ns;
                                                                                if not (w32_mac_w32_w32_w32_result_0 = v_w32_mac_w32_w32_w32_result_0) then
                                                                                write(line_out, string'(" ; found w32_mac_w32_w32_w32_result_0: "));
                                                                                hwrite(line_out, w32_mac_w32_w32_w32_result_0);
                                                                                writeline(failures, line_out);
                                                                                end if;
                                                                                assert (w32_mac_w32_w32_w32_result_0 = v_w32_mac_w32_w32_w32_result_0) report "output of result_0 wrong" severity error;
                                                                                end if;
                                                                                end loop;
                                                                                wait;
                                                                                end process main;

                                                                                -- no local registers

                                                                                end rtl;

