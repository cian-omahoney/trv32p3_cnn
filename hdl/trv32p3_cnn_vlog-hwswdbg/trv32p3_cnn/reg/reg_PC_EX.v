
// File generated by Go version U-2022.12#33f3808fcb#221128, Wed Feb 21 17:37:22 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// go -I../lib -F -DSYNTHESIS_NO_UNGROUP -D__tct_patch__=0 -Verilog -otrv32p3_cnn_vlog-hwswdbg -cgo_options-hwswdbg.cfg -Itrv32p3_cnn_vlog-hwswdbg/tmp_pdg -updg -updg_controller trv32p3_cnn



`timescale 1ns/1ps

// module reg_PC_EX : reg_PC_EX
module reg_PC_EX
  // synopsys translate_off
  #(parameter reg_log = 1'b1)
  // synopsys translate_on
  ( input             clock,
    input             ohe_selector_ID,
    input      [31:0] PC_EX_w_in, // addr
    input             hzd_stall_in,
    input             kill_ID_in,
    output reg [31:0] PC_EX_r_out // addr
  );


  reg [31:0] reg_val;

  reg [31:0] reg_val_next;

  reg  reg_write_enab;


  // synopsys translate_off

  reg reg_write_log;

  always @ (negedge clock)
  begin : p_reg_PC_EX_log


    if (reg_log)
    begin
      if (reg_write_log === 1'b1)
      begin
        $fdisplay(trv32p3_cnn.inst_reg_PC.log_file, "PC_EX = %h", reg_val);
      end
    end
  end
  // synopsys translate_on

`ifdef HWSW_LOG
  //-----------------------------------------------
  // HWSW log 
  //-----------------------------------------------
  // synopsys translate_off
  reg hwsw_reg_write_enab_ID;
  reg hwsw_reg_write_enab_EX;
  reg hwsw_reg_written_ID;
  reg hwsw_reg_written_EX;
  reg [31:0] hwsw_reg_val_ID;
  reg [31:0] hwsw_reg_val_EX;

  always @ (posedge clock or posedge trv32p3_cnn.reset)
  begin : p_hwsw_reg_PC_EX_pipe
    if (trv32p3_cnn.reset)
    begin
      hwsw_reg_written_ID <= 1'h0;
      hwsw_reg_written_EX <= 1'h0;
      hwsw_reg_val_ID <= 32'h0;
      hwsw_reg_val_EX <= 32'h0;
    end
    else
    begin
      hwsw_reg_written_ID <= 1'h0;
      hwsw_reg_written_EX <= 1'h0;
      // propagate values and flags if written
      if (hwsw_reg_written_ID)
      begin
        hwsw_reg_val_EX     <= hwsw_reg_val_ID;
        hwsw_reg_written_EX <= hwsw_reg_written_ID;
      end
      // check for new writes. If there is a write,
      // clear all other written flags of prev. stages
      if (hwsw_reg_write_enab_ID)
      begin
        hwsw_reg_val_ID     <= reg_val_next;
        hwsw_reg_written_ID <= hwsw_reg_write_enab_ID;
      end
    end
  end

  always @ (negedge clock)
  begin : p_hwsw_reg_PC_EX_log
    if (hwsw_reg_written_EX)
    begin
      $fdisplay(trv32p3_cnn.inst_reg_PC.hwsw_log_file, "%0t Reg PC_EX %h", $time, hwsw_reg_val_EX);
    end
  end
  // synopsys translate_on
  //-----------------------------------------------
`endif

  always @ (*)
  begin : p_read_reg_PC_EX

    // PC_EX_r_out = 32'h0;

    // (PC_EX_r_rd_PC_EX_EX)
    // [alu.n:210]
    PC_EX_r_out = reg_val;

  end

  always @ (*)
  begin : p_write_combin_reg_PC_EX

    reg_write_enab = 1'h0;
`ifdef HWSW_LOG
    // synopsys translate_off
    hwsw_reg_write_enab_ID = 1'h0;
    // synopsys translate_on
`endif
    reg_val_next = 32'h0;


    if (!hzd_stall_in && !kill_ID_in)
    begin

      if (ohe_selector_ID) // (PC_EX_wr_PC_EX_w_ID)
      begin
        // [alu.n:209]
        reg_write_enab = 1'b1;
`ifdef HWSW_LOG
        // synopsys translate_off
        hwsw_reg_write_enab_ID = 1'b1;
        // synopsys translate_on
`endif
        reg_val_next = PC_EX_w_in;
      end

    end

  end

  always @ (posedge clock)
  begin : p_write_reg_PC_EX

    // synopsys translate_off
    reg_write_log <= 1'b0;
    // synopsys translate_on
    if (reg_write_enab)
    begin
      reg_val <= reg_val_next;
      // synopsys translate_off
      if (reg_write_enab === 1'b1)
      begin
        reg_write_log <= 1'b1;
      end
      // synopsys translate_on
    end
  end

endmodule
