
// File generated by Go version U-2022.12#33f3808fcb#221128, Wed Feb 21 17:37:22 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// go -I../lib -F -DSYNTHESIS_NO_UNGROUP -D__tct_patch__=0 -Verilog -otrv32p3_cnn_vlog-hwswdbg -cgo_options-hwswdbg.cfg -Itrv32p3_cnn_vlog-hwswdbg/tmp_pdg -updg -updg_controller trv32p3_cnn



`timescale 1ns/1ps

// module reg_PC_ID : reg_PC_ID
module reg_PC_ID
  // synopsys translate_off
  #(parameter reg_log = 1'b1)
  // synopsys translate_on
  ( input             clock,
    input             PC_ID_PC_ID_w_cntrl_issue_pdg_en_in, // std_logic
    input      [31:0] PC_ID_w_in, // addr
    output reg [31:0] PC_ID_r_out // addr
  );


  reg [31:0] reg_val;

  reg [31:0] reg_val_next;

  reg  reg_write_enab;


  // synopsys translate_off

  reg reg_write_log;

  always @ (negedge clock)
  begin : p_reg_PC_ID_log


    if (reg_log)
    begin
      if (reg_write_log === 1'b1)
      begin
        $fdisplay(trv32p3_cnn.inst_reg_PC.log_file, "PC_ID = %h", reg_val);
      end
    end
  end
  // synopsys translate_on

`ifdef HWSW_LOG
  //-----------------------------------------------
  // HWSW log 
  //-----------------------------------------------
  // synopsys translate_off
  reg hwsw_reg_write_enab_EX;
  reg hwsw_reg_written_EX;
  reg [31:0] hwsw_reg_val_EX;

  always @ (posedge clock or posedge trv32p3_cnn.reset)
  begin : p_hwsw_reg_PC_ID_pipe
    if (trv32p3_cnn.reset)
    begin
      hwsw_reg_written_EX <= 1'h0;
      hwsw_reg_val_EX <= 32'h0;
    end
    else
    begin
      hwsw_reg_written_EX <= 1'h0;
      // check for new writes. If there is a write,
      // clear all other written flags of prev. stages
      if (hwsw_reg_write_enab_EX)
      begin
        hwsw_reg_val_EX     <= reg_val_next;
        hwsw_reg_written_EX <= hwsw_reg_write_enab_EX;
      end
    end
  end

  always @ (negedge clock)
  begin : p_hwsw_reg_PC_ID_log
    if (hwsw_reg_written_EX)
    begin
      $fdisplay(trv32p3_cnn.inst_reg_PC.hwsw_log_file, "%0t Reg PC_ID %h", $time, hwsw_reg_val_EX);
    end
  end
  // synopsys translate_on
  //-----------------------------------------------
`endif

  always @ (*)
  begin : p_read_reg_PC_ID

    // PC_ID_r_out = 32'h0;

    // (PC_ID_r_rd_PC_ID_ID)
    // [alu.n:209][ctrl.n:109][ctrl.n:160]
    PC_ID_r_out = reg_val;

  end

  always @ (*)
  begin : p_write_combin_reg_PC_ID

    reg_write_enab = 1'h0;
`ifdef HWSW_LOG
    // synopsys translate_off
    hwsw_reg_write_enab_EX = 1'h0;
    // synopsys translate_on
`endif
    reg_val_next = 32'h0;


    // (PC_ID_wr_PC_ID_w_PC_ID_PC_ID_w_cntrl_issue_pdg_en)
    if (PC_ID_PC_ID_w_cntrl_issue_pdg_en_in)
    begin
      reg_write_enab = 1'b1;
`ifdef HWSW_LOG
      // synopsys translate_off
      hwsw_reg_write_enab_EX = 1'b1;
      // synopsys translate_on
`endif
      reg_val_next = PC_ID_w_in;
    end

  end

  always @ (posedge clock)
  begin : p_write_reg_PC_ID

    // synopsys translate_off
    reg_write_log <= 1'b0;
    // synopsys translate_on
    if (reg_write_enab)
    begin
      reg_val <= reg_val_next;
      // synopsys translate_off
      if (reg_write_enab === 1'b1)
      begin
        reg_write_log <= 1'b1;
      end
      // synopsys translate_on
    end
  end

endmodule
