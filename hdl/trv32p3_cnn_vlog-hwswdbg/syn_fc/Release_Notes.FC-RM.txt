###############################################################################
# Synopsys(R) Fusion Compiler(TM) Route Reference Methodology
# Version: T-2022.06
# Copyright (C) 2014-2022 Synopsys, Inc. All rights reserved.
###############################################################################

S-2021.06 Updates
=================
* Renamed TCL_USER_MAPPED_CONSTRAINTS_SCRIPT variable to TCL_USER_COMPILE_PRE_INITIAL_PLACE_SCRIPT
* Updated set_ideal_network remove register pins from collection
* Reporting of NDRs and clock settings moved after sourcing TCL_LIB_CELL_PURPOSE_FILE 
* New recommended power analysis settings
* Removed nested source from init_design.from_dp_rm_ndm.tcl
* Added incremental mark_clock_trees -routing_rules 
* Write scandef version updated to 5.8
* Added new commands check_clock_transition and restore_clock_transition
* Added application fix to registers in clock_opt_cts script
* Enhanced report_qor.tcl script with additional reporting commands
* Added new optional user plugin variables to design_setup.tcl
* Enhancments in directories, setup files, and file sourcing
* Updated redundant via insertion (RVI) flow to improve QoR
* Enhanced timing_eco.tcl to improve EoU
* Enhanced redhawk_in_design.tcl and redhawk_in_design.tcl to improve EoU
* Added an endpoint_opt step for final design closure
* Enhancements related to read_def and read_saif
* Added HPC support

###############################################################################
# Renamed TCL_USER_MAPPED_CONSTRAINTS_SCRIPT variable to TCL_USER_COMPILE_PRE_INITIAL_PLACE_SCRIPT
###############################################################################
* TCL_USER_MAPPED_CONSTRAINTS_SCRIPT variable has been remamed to TCL_USER_COMPILE_PRE_INITIAL_PLACE_SCRIPT.  This name is more intuitive
  and more clearly describes where in the compile flow the user plugin script will be used.  

###############################################################################
# Updated set_ideal_network remove register pins from collection
###############################################################################
* Registers clock pins have been removed from the collection for the set_ideal_network command in order to prevent some optimization 
  steps from deriving a size_only constraint on the register thereby restricting the optimization step.   

###############################################################################
# Reporting of NDRs and clock settings moved after sourcing TCL_LIB_CELL_PURPOSE_FILE
###############################################################################
* In order to properly report cts lib cell purpose settings, reporting of NDRs and clock settings moved after sourcing of TCL_LIB_CELL_PURPOSE_FILE

###############################################################################
# New recommended power analysis settings
###############################################################################
* set_app_options -name hdlin.naming.upf_compatible -value true
  Enabled when reading an RTL SAIF in order to help improve the annotation rate

* saif_map -type ptpx -essential -write_map ${OUTPUTS_DIR}/${COMPILE_BLOCK_NAME}.saif.ptpx.map
  -essential option is recommended when writing mapping file for power analysis tools i.e. PrimePower 

###############################################################################
# Removed nested source from init_design.from_dp_rm_ndm.tcl
###############################################################################
* The init_design.import_from_dp.tcl script is no longer sourced inside the init_design.from_dp_rm_ndm.tcl.
  The content of the init_design.import_from_dp.tcl can now be found directly in the init_design.from_dp_rm_ndm.tcl script.

###############################################################################
# Added incremental mark_clock_trees -routing_rules
###############################################################################
* In compile.tcl incremental mark_clock_trees -routing_rules has been added after compile_fusion -to logic opto.
  Ensures that routing rules are properly updated for new clock nets 

###############################################################################
# Write scandef version updated to 5.8
###############################################################################
* In compile.tcl the scandef is now written out with version 5.8.  This aligns with the default write_def version.

###############################################################################
# Added new commands check_clock_transition and restore_clock_transition
###############################################################################
* The check_clock_transition command detects and applies a clock max transition constraint on the fastest clock(s) per active scenario to improve OOTB CTS QoR
  The max transition constraint is based on a percentage of the period of the fastest clock.  That percentage is specified with the -threshod option.  
  A default threshold of 15% will be used with check_clock_transition in clock_opt_cts.tcl    

* If the incoming clock max transition constraint is greater than the threshold max transition, the command will issue an informative message. 
  When -apply_max_transition is specified, the derived max transition constraint will be applied to the clock if the constraint is tighter 
  than the incoming clock max transition constraint.
  If incoming clock max transition constraint is tighter than the threshold, clock max transition is maintained.  

* If the clock transition was updated by the check_clock_transition command, it will only be applied for clock_opt build_clock.  The command restore_clock_transition will 
  restore the clock max transition back to the incoming clock max_transition constraint after the clocks have been synthesized.

###############################################################################
# Added application fix to registers in clock_opt_cts script
###############################################################################
* In clock_opt_cts.tcl the registers are marked as application_fixed before clock_opt build_clock.   
  This ensures that the registers will not be intentionally displaced during clock_opt_cts or clock_opt_opto.

###############################################################################
# Enhanced report_qor.tcl script with additional reporting commands
###############################################################################
* A number of new reporting commands have been added to the report_qor.tcl script to provide users with additional detailed reports.

  report_activity -rtl, report_activity -driver, report_activity -verbose, report_clock_power -nosplit -type per_segment
  report_clock_timing -type summary -clock_synthesis_view -scenarios [all_scenarios] -nosplit
  report_clock_timing -type skew -clock_synthesis_view -scenarios [all_scenarios] -nosplit
  report_clock_timing -type latency -clock_synthesis_view -scenarios [all_scenarios] -nosplit 
  report_corners [all_corners], report_dont_touch -all, report_extraction_options -corners [all_corners]
  report_ignored_layers, report_reference -hier -nosplit, report_size_only -all
  (Per active scenario) report_timing -delay_type max -path_type full_clock_expanded  -max_paths 300 -trans - cap -fanout -net -input_pins -derate -crosstalk -physical -attributes 
  (Per active scenario) report_timing -delay_type min -path_type full_clock_expanded  -max_paths 300 -trans - cap -fanout -net -input_pins -derate -crosstalk -physical -attributes
  (Per active scenario) report_timing -path end -nosplit -max_paths 5000
  report_tracks -nosplit, report_user_units -nosplit, report_power_scopes -nosplit, report_pst -nosplit, report_supply_set -nosplit, proc_qor report
  report_ideal_network, check_legality, check_variants -dont_use -included_purposes
  report_power suports user provided REPORT_POWER_SAIF_FILE and REPORT_POWER_SAIF_MAP. report_power only executes if power scenarios are detected
  report_drc is a new proc which generates DRC summary in a tabular format

* When POCV is enabled report_timing will generate reports with and without -variation

* Added check_variants -dont_use -included_purposes
  This command will check if variant cells that belong to the same group have consistent dont_use attribute and will return a list of problematic variant cells.  
  It can also report the lib cell purpose information for the variant cells.

* The app option route.global.timing_driven is set to true before report_congestion for pre-route stages. 

###############################################################################
# Added new optional user plugin variables to design_setup.tcl
###############################################################################
* TCL_USER_INIT_DESIGN_PRE_SCRIPT can be specified and will be sourced at the start of init_design.tcl
* TCL_USER_CREATE_DFT_PORTS_POST_SCRIPT can be specified and will be sourced in init_design.from_rtl.tcl after TCL_DFT_PORTS_FILE is sourced
* TCL_USER_ROUTE_OPT_2_POST_SCRIPT can be specified and will be sourced after second route_opt

###############################################################################
# Enhancments in directories, setup files, and file sourcing
###############################################################################
* Reorganized the contents in the setup files under rm_setup/
  - For all the non-variable contents such as set_host_options, mkdir, search_path, etc, they are now moved to a new script header_*.tcl (for example, header_icc2_pnr.tcl)
  - All the setup files and procedure scripts are now directly sourced in each main script.
    design_setup.tcl is no longer sourced inside fc_setup.tcl.

* A new proc rm_source is created for file sourcing to improve ease of use.
  rm_soruce will check if the variable is specified, if the file exists, and prints out information at beginning and end of sourcing.
  All scripts have been updated to use rm_source.  

* Added a new directory rm_utilities/ which contains Tcl procedure files used by the RM scripts 

* Added a new directory rm_user_plugin_scripts/ with placeholder plugin scripts

  There is a new directory called rm_user_plugin_scripts which contains placeholder (empty) pre/post plugin scripts. 
  In the design_setup.tcl, the pre/post plugin variables are populated with a path to the corresponding placeholder script in the rm_user_plugin_scripts directory.
  Use of the placeholder scripts is not required. The path to the plugin scripts can be updated as needed. rm_user_plugin_scripts is added to search_path

* Added rm_tech_scripts to search_path. 

  When you download the separate sidefile tar balls for advanced node RM versions, in th download, 
  the sidefiles will be contained in the rm_tech_scripts directory. You can then copy and combine it with your existing RM main scripts.
  Since rm_tech_scripts is part of the search_path, all the sidefiles will be sourced using the search_path.
  rm_tech_scripts dir is expected to be at the same level as where the rm_setup, rm_*_scripts are located at.

* Added a new variable LOGS_DIR to design_setup.tcl which controls the value of LOGS_DIR in the makefile

###############################################################################
# Updated redundant via insertion (RVI) flow to improve QoR
###############################################################################
* RVI flow is updated. There are now 3 places where RVI will be performed when ENABLE_REDUNDANT_VIA_INSERTION is set to true in design_setup.tcl
  - At the end of clock_opt_cts.tcl : soucing of TCL_USER_REDUNDANT_VIA_MAPPING_FILE, report_redundant_vias, and add_redundant_vias 
  - At the end of route_auto.tcl : add_redundant_vias
  - In the route_opt.tcl after second route_opt : add_redundant_vias -timing_preserve_setup_slack_threshold 0

###############################################################################
# Enhanced timing_eco.tcl to improve EoU
###############################################################################
* Supports ICV_IN_DESIGN_METAL_FILL_SELECT_LAYERS in metal refill.
* Automatically performs full metal refill when ECO percent change is higher than ICV_IN_DESIGN_METAL_FILL_ECO_THRESHOLD.

###############################################################################
# Enhanced redhawk_in_design.tcl and redhawk_in_design.tcl to improve EoU
###############################################################################
* Added a new block label REDHAWK_IN_DESIGN_BLOCK_NAME for redhawk_in_design.tcl and rhsc_in_design_pnr.tcl so each will save block using its own block label,
  instead overwriting the input block label
* Set default value of REDHAWK_ANALYSIS to static 
* Enhanced script to locate redhawk binary from search path if REDHAWK_DIR or REDHAWK_SC_DIR is not specified by the user

###############################################################################
# Added an endpoint_opt step for final design closure
###############################################################################
* Added support for route_opt targeted endpoint PBA CCD optimization
* Added a new step endpoint_opt to Makefiles and a new script endpoint_opt.tcl to rm_icc2_pnr_scripts
* Added a new command targeted_ep_ropt_pba_ccd in endpoint_opt.tcl 
* Added new variables to facilitate the endpoint_opt step required operations and to allow customizations
  - ENDPOINT_OPT_BLOCK_NAME, ENDPOINT_OPT_ACTIVE_SCENARIO_LIST : specifies block label for the step and scenarios to be activated
  - TCL_USER_ENDPOINT_OPT_PRE_SCRIPT, TCL_USER_ENDPOINT_OPT_SCRIPT, TCL_USER_ENDPOINT_OPT_POST_SCRIPT : specifies user provided plugin files
  - ENDPOINT_OPT_MAX_PATHS, ENDPOINT_OPT_SLACK_THRESHOLD, ENDPOINT_OPT_TARGET_SCENARIOS, ENDPOINT_OPT_LOOP, ENDPOINT_OPT_PATH_GROUP_FILTER
    Controls the behavior of targeted_ep_ropt_pba_ccd regarding max violated paths to collect, slack threshold to gather the violated paths,
    target scenarios to collect the violated paths, number of iterations, and path group filter if you want to excldue certain path groups

###############################################################################
# Enhancements related to read_def and read_saif
###############################################################################
* Added a new variable DEF_READ_OPTIONS to allow user specified read_def options. Default is "-add_def_only_objects all"
* Renamd SAIF_FILE to SAIF_FILE_LIST to support the usage or reading single SAIF, a list of SAIF files, or a list consisting of SAIF file and optionally the 
  corresponding weight, scaling ratio, strip path, and the path for each SAIF, as read_saif command natively supports. 
  For example : set SAIF_FILE_LIST “{1.saif -scaling_ratio 5 -weight 2} {2.saif -scaling_ratio 5} {3.saif -path xyz}"

###############################################################################
# Added HPC support
###############################################################################
* A new variable HPC_CORE is added to fc_setup.tcl to enable support for arm core designs
  - If a correct core name is specified, the corresponding set_hpc_options command will be enabled accordingly in 
    compile.tcl, clock_opt_cts.tcl, clock_opt_opto.tcl, route_auto.tcl, and route_opt.tcl along with necessary plugins.


R-2020.09-SP6 Updates
=====================
* FC RM will only support the in-compile DFT synthesis flow

###############################################################################
# FC RM will only support the in-compile DFT synthesis flow
###############################################################################
* Starting from R-2020.09-SP6 release, Fusion Compiler FE will only support the “in-compile” DFT synthesis flow.
  As a result, previous RM configuration settings to enable “pre-compile” DFT flow will no longer be available.
  The DFT_FLOW variable found in th design_setup.tcl, compile.tcl, and report_qor.tcl script is no longer used to select the DFT flow.
  If your script is configured to utilize the “in-compile” DFT flow, there is no additional action needed and the script should work without modification.
  Please refer to Fusion Compiler release notes on any action you may need to take, if your script is configured to utilize the “pre-compile” DFT flow.

R-2020.09-SP3 Updates
=====================
* New reporting command check_stage_settings
* Ideal clock network applied for pre-CTS stages
* Added support for new step compile_place in set_stage
* A new hook TCL_USER_COMPILE_PRE_INITIAL_OPTO_SCRIPT before initial_opto 
* Redhawk and Redhawk-SC
* Removes check_routes from clock_opt_opto.tcl
* "set_starrc_in_design -config $ROUTE_OPT_STARRC_CONFIG_FILE" at the end of route_auto.tcl before reporting
* ECO fusion
* write_qor_data
* A new examples/ directory

###############################################################################
# New reporting command check_stage_settings
###############################################################################
* A new command check_stage_settings is available in the RM scripts.  The check_stage_settings command will 
  be run just before the the major stage command is executed.  The command compares current app option settings 
  against set_technology, set_qor_strategy, set_stage, and select tool default settings which can impact runtime or ppa.
  check_stage_settings will output only app options that have current settings that are different from the recommended setting.
  The command also has the ability to reapply set_technology, set_qor_strategy, and set_stage if a difference is detected.  This
  can be enabled with the variable RESET_CHECK_STAGE_SETTINGS.  The variable is defined in fc_setup.tcl.

###############################################################################
# Ideal clock network applied for pre-CTS stages
###############################################################################
* In pre-cts scripts (compile.tcl and place_opt.tcl), the clocks are marked as ideal with the commands set_ideal_network and 
  remove_propagated_clock.  Marking the clocks as ideal will prevent unrealistic clock switching power from dominating pre-cts power estimation.  

###############################################################################
# Added support for new step compile_place in set_stage
###############################################################################
* set_stage supports a new step called compile_place.  In this new step set_stage, will set the appropriate tie cell max_fanout 
  based on the number of scan chains detected.  If no scan chains are found, the place.coarse.continue_on_missing_scandef application 
  option will be enabled.

###############################################################################
# A new hook TCL_USER_COMPILE_PRE_INITIAL_OPTO_SCRIPT before initial_opto
###############################################################################
* Added a new hook TCL_USER_COMPILE_PRE_INITIAL_OPTO_SCRIPT to design_setup.tcl.
  It allows user customizations after initial_drc and before initial_opto
* Previously compile.tcl runs compile_fusion from initial_place to initial_opto in one step. 
  It now stops after initial_drc to allow sourceing of the new hook, and then continue with initial_opto.

###############################################################################
# Redhawk and Redhawk-SC
###############################################################################
* Supports RHSC
  - Added an optional rhsc_in_design_pnr step to Makefiles, which runs a new sccript rhsc_in_design_pnr.tcl for RHSC
  - In design_setup.tcl
    - REDHAWK_IN_DESIGN_PNR_FROM_BLOCK_NAME specifies the starting block for RHSC
    - REDHAWK_SC_GRID_FARM (new variable) specifies submit commands for the distribution jobs
    - REDHAWK_SC_DIR (new variable) specifies Redhawk-SC path
    - RHSC_PYTHON_SCRIPT_FILE (new variable) specifies your customized python script. 
    - Specify RHSC_GENERATE_COLLATERAL (new variable) for running analyze_rail -script_only -generate_file for RHSC_PYTHON_SCRIPT_FILE
* Supports customized PGA settings for RHSC
  - REDHAWK_PGA_CUSTOMIZED_SCRIPT in design_setup.tcl specifies a customized PGA settings.
  - Added ./examples/REDHAWK_PGA_CUSTOMIZED_SCRIPT.txt as an example
* Supports a plugin script to call create_taps commands with different options for both RH and RHSC
  - REDHAWK_PAD_CUSTOMIZED_SCRIPT (new variable) specifies such a script
  - Aded ./examples/REDHAWK_PAD_CUSTOMIZED_SCRIPT.txt as an example
* Updated redhawk_in_design_pnr.tcl script.
  Removed redhawk_in_design_irap.tcl, redhawk_in_design_full.tcl, and redhawk_in_design_analysis_only.tcl which are no longer needed.
* Updates IR driven placement (IRDP) usage and scripts
  - ENABLE_IRAP is renamed to ENABLE_IRDP, which enables the feature. Default is false.
    - When ENABLE_IRDP is set to true, set_stage -step post_cts_opto command in clock_opt_opto.tcl will check for
      a valid TCL_IRDP_CONFIG_FILE, and enable the feature if all conditions are met.  
  - Added examples (new) for 4 different use cases :
	examples/TCL_IRDP_CONFIG_FILE.manual.rh.tcl	 	- manual run with Redhawk
	examples/TCL_IRDP_CONFIG_FILE.manual.rhsc.tcl	 	- manual run with Redhawk-SC
	examples/TCL_IRDP_CONFIG_FILE.streamlined.rh.tcl	- streamlined run with Redhawk
	examples/TCL_IRDP_CONFIG_FILE.streamlined.rhsc.tcl	- streamlined run with Redhawk-SC
* Supports IR driven route_opt CCD (IRDCCD) feature
  - The feature is enabled at second route_opt.
  - ENABLE_IRDCCD (new variable) enables the feature. Default is false.
    - sources TCL_IRDCCD_CONFIG_FILE
    - Added examples for TCL_IRDCCD_CONFIG_FILE (new)
	examples/TCL_IRDCCD_CONFIG_FILE.rh.tcl			- Redhawk
	examples/TCL_IRDCCD_CONFIG_FILE.rhsc.tcl		- Redhawk-SC

###############################################################################
# Removed check_routes from clock_opt_opto.tcl
###############################################################################
* Removed the command from clock_opt_opto.tcl. Not recommended after clock_opt final_opto.

###############################################################################
# set_starrc_in_design -config $ROUTE_OPT_STARRC_CONFIG_FILE
###############################################################################
* The command is already available before route_opt commands in route_opt.tcl.
* In this release, it is added at the end of route_auto.tcl after design is routed and before reporting, 
  so that same configuration can be used for reporting at the end of route_auto. 

###############################################################################
# ECO fusion updates
###############################################################################
* ROUTE_OPT_ECO_OPT_EXTRACTION_MODE is no longer used and is removed
* Comments for eco_opt are updated to give clear message about the prerequisites for running the feature
  - ECO Fusion doesn’t support Fusion Extraction nor In-design StarRC.
    If the app option extract.starrc_mode is set to fusion_adv or in_design, ECO fusion runs with standalone StarRC extraction which requires
    a valid ROUTE_OPT_ECO_OPT_STARRC_CONFIG_FILE.
  - route_opt.tcl will check for ROUTE_OPT_ECO_OPT_STARRC_CONFIG_FILE if the app option extract.starrc_mode is set to fusion_adv or in_design

###############################################################################
# write_qor_data
###############################################################################
* In the previous release, report_qor.tcl runs light weight write_qor_data with 
  -report_list "host_machine report_app_options report_utilization report_design wirelength" if REPORT_PARALLEL_SUBMIT_COMMAND is not specified,
  while it runs write_qor_data -report_group depending on the stage if REPORT_PARALLEL_SUBMIT_COMMAND is specified.
* In this release, report_qor.tcl always runs write_qor_data -report_group depending on the stage, regardless of REPORT_PARALLEL_SUBMIT_COMMAND.

###############################################################################
# A new examples/ directory
###############################################################################
* In the previous release, all the example scripts are located in the same scripts directory as the other scripts (rm_*_scripts/)
* In this release, a dedicated directory examples/ is created to contain all the example scripts.
  - If the example script is associated with a variable, the example file is named with the variable as prefix.
    - For ex, the example file for the ECO fusion config file variable ROUTE_OPT_STARRC_CONFIG_FILE is examples/ROUTE_OPT_STARRC_CONFIG_FILE.txt
  - When a script or a variable in the setup file is referring to an example file, the example file can be found in examples/ directory


R-2020.09 Updates
=====================
* Added new special feature for multibit banking
* Added new special feature data check manager
* Added new design_setup.tcl TCL_USER_NON_PERSISTENT_SCRIPT variable
* Removed new special feature variable ENABLE_ROUTE_OPT_PBA
* GRE related updates
* New parallel reporting utility
* New QoRsum utility  
* New technology support for 22nm Global Foundry Synopsys Logic Library version
* Scenario power analysis configuration for set_qor_strategy metrics
* Formality support updates
* Updates to set_qor_strategy support

###############################################################################
# Added new special feature for multibit banking
###############################################################################

* In the fc_setup.tcl the ENABLE_MULTIBIT variable is added as a special feature.
  This allows the user to independently turn on multibit banking separately from the 
  metric target total_power in set_qor_strategy. The default is false, but you can change
  the value to true to have set_stage -step synthesis enable the multibit banking 
  app_options.

###############################################################################
# Added new special feature data check manager
###############################################################################

* A new special feature for early data checking is available in the RM scripts. At the 
  start of each primary script the RM enables the early data check policy as 
  defined by the EARLY_DATA_CHECK_POLICY variable in fc_setup.tcl. You can set 
  EARLY_DATA_CHECK_POLICY to either lenient or strict to apply the early data check 
  policy. By default the policy is none. 

  if {$EARLY_DATA_CHECK_POLICY != "none"} {
        ## Design check manager
        set_early_data_check_policy -policy $EARLY_DATA_CHECK_POLICY -if_not_exist
  }

###############################################################################
# Added new design_setup.tcl TCL_USER_NON_PERSISTENT_SCRIPT variable
###############################################################################

* After loading the block, each script now has a space to source a file defined by
  the RM tcl variable TCL_USER_NON_PERSISTENT_SCRIPT. This is a new plugin file space
  to source a file to define any non-persistent settings for a design such as the 
  setup for set_threshold_voltage_groups. The variable is defined in design_setup.tcl.

###############################################################################
# Removed new special feature variable ENABLE_ROUTE_OPT_PBA
###############################################################################

* The ENABLE_ROUTE_OPT_PBA variable is removed from the fc_setup.tcl file. The 
  postroute optimization with PBA is automatically enabled in the RM scripts when 
  set_qor_strategy is metric target is leakage_power or total_power. 

###############################################################################
# GRE related updates
###############################################################################

* The clock_opt final_opto GRE is now on-by-default in Fusion Compiler. This is
  related to the following updates in the RM:

  - The ENABLE_GRE variable is removed from fc_setup.tcl as the feature is now 
    on-by-default.
  - For GRE it is recommend to use the same list of scenarios for the clock_opt_opto,
    route_auto, and route_opt steps. 
  - The ROUTE_FOCUSED_SCENARIO RM tcl variable is added to the fc_setup.tcl. This 
    specifies a dominant scenario for timing driven routing. By default it is an
    empty string and allows the tool to pick the dominant scenario based on timing.
  - For this new feature it is recommended to run the create_shields command before
    clock_opt final_opto, so the command in the RM is moved to the start of the 
    clock_opt_opto.tcl script. It can be enabled by the special feature RM tcl
    variable ENABLE_CREATE_SHIELDS. This also controls reshielding after detail
    routing and after route_opt. 

###############################################################################
# New parallel reporting utility 
###############################################################################

* The reporting in the RM now supports parallel reporting to speed up runtime of 
  your design by submitting a new job for running the report_qor.tcl script with the
  report_parallel command. Two new RM tcl variables are defined in fc_setup.tcl.

  - The REPORT_PARALLEL_SUBMIT_COMMAND variable can be specified with a string to 
  submit a job to the user's compute farm. The report_parallel command uses the
  variable's definition to submit a new session to open the saved database and do
  the report_qor.tcl script.
  - The REPORT_PARALLEL_MAX_CORES variable configures the number of cores used for 
  parallel reporting when submitting a job.

###############################################################################
# New QoRsum utility  
###############################################################################

* The RM now supports the use of two new commands for reporting, write_qor_data and
  compare_qor_data. These two commands are run in the report_qor.tcl script and
  automatically generate the reports to be then be compared and visualized in an
  HTML format. Two new variables are defined in the design_setup.tcl file to specify
  the output locaton for the QoRsum utility.

  - WRITE_QOR_DATA_DIR defines the directory location for the output files of
  the write_qor_data command for each step. By default this is defined as "./qor_data"
  and directory for each RM step.
  - The COMPARE_QOR_DATA_DIR variable defines the directory location for the file
  output of the compare_qor_data command. By default this is defined as 
  "./compare_qor_data" and the index.html can be viewed in a browser to see the 
  QoRsum data visualization of your run data.

###############################################################################
# New technology support for 22nm Global Foundry Synopsys Logic Library version
###############################################################################

* The RM now supports the technology configuration for 22nm Global Foundry  
  Synopsys Logic Library version in R-2020.09. The Synopsys Logic Library (SG) 
  version is the only one supported in this release, the non-SG version is not
  available at this time. This configuration has side files under NDA protection 
  for foundry specific settings. To get the side files contact your Synopsys
  support team. 

###############################################################################
# Scenario power analysis configuration for set_qor_strategy metrics 
###############################################################################

* When setting the SET_QOR_STRATEGY_METRIC variable to timing or leakage_power in
  fc_setup.tcl the clock_opt_cts.tcl, clock_opt_opto.tcl, and route_opt.tcl scripts
  manages the power analysis of active scenarios to direct optimization towards
  the specified metric. 

  - When set to timing, no power optimization is directed to the tool in preroute. 
  If there is an active scenario with the leakage_power and dynamic_power analysis
  set to true, the RM scripts set the analysis to false during the clock_opt 
  command. The scenario status is set back after optimization for reporting.
  This directs the commands to not take leakage or dynamic power into consideration
  and not do any power optimization.
  - When set to leakage_power, only leakage power optimization is directed to the
  tool. If there is an active scenario with dynamic_power analysis enabled then the 
  RM scripts turn the dynamic_power analysis false for the clock_opt and route_opt 
  commands. The analysis will be turned back to true after optimization for reporting.
  This directs optimization to only do leakage power optimization and not take
  dynamic power into consideration and cause the tool to go into total power 
  optimization. 

###############################################################################
# Formality support updates
###############################################################################

* The scripts to run Formality have been renamed in the RM to be clearer about their
  intended use. The contents of the scripts have not changed.

  - The fm.fc.tcl script is renamed to fm_r2g.tcl for RTL to Gate
  verification. 
  - The fm.tcl script is renamed to fm_g2g.tcl for Gate to Gate
  verification. 
  - The Makefile is updated with the new script names and the targets have 
    similarly been changed to match the new names.

* The set_svf command has moved further up in primary scripts to before the block
  is opened. This helps reducing the extraneous default*.svf files created by 
  opening the block before set_svf is defined.

###############################################################################
# Updates to set_qor_strategy support
###############################################################################

* The ENABLE_HIGH_EFFORT_TIMING variable in fc_setup.tcl now controls the -high_effort_timing
  option flag on the set_qor_strategy command. The default is true and will enable the
  compile.flow.high_effort_timing application option for -stage synthesis. 

* The ENABLE_REDUCED_EFFORT variable has been added to fc_setup.tcl to enable the 
  set_qor_strategy metric target but with lower efforts. This variable is false by 
  default and is intended for users that want to have faster runtime with a tradeoff
  for less QoR. 
  - When this is set to true the RM scripts ignore ENABLE_HIGH_EFFORT_TIMING
    as the user has indicated a tradeoff of performance for better runtime. 


Q-2019.12-SP4 Updates
=====================

* Added high effort timing compile as default 
* Added set_qor_strategy -stage synthesis  
* Added in_compile DFT flow and additional DFT support
* Added special features handling through mega switches
* Changed init_design step to optional in Makefile
* Changed shared_setup.tcl name to design_setup.tcl
* Changed Setup file RM variables organization
* Removed settings.<step>.tcl scripts

###############################################################################
# Added high effort timing compile as default 
###############################################################################

* In compile.tcl the set_stage command has added the -high_effort_timing option to enable the
  compile.flow.high_effort_timing app_option by default in the RM flow. You can disable this by
  changing the ENABLE_HIGH_EFFORT variable to false in the fc_setup.tcl file.

  - set_stage -step synthesis -high_effort_timing

###############################################################################
# Added set_qor_strategy -stage synthesis  
###############################################################################

* The set_qor_strategy command has added synthesis support for -stage and is now added to 
  the compile.tcl script. The set_qor_strategy command is now run before compile_fusion
  and by default is set to the timing metric. You can change the metric to timing, leakage_power,
  or total_power with the SET_QOR_STRATEGY_METRIC variable in the fc_setup.tcl file.

  - set_qor_strategy -stage synthesis -metric $SET_QOR_STRATEGY_METRIC  

###############################################################################
# Added in_compile DFT flow and additional DFT support
###############################################################################

* The in_compile DFT flow is now supported to load DFT setup after compile_fusion logic_opto.
  You can enable this by the DFT_FLOW variable by setting it to in_compile. This will load 
  the TCL_DFT_SETUP_FILE after logic_opto and enable the dft.insertion_post_logic_opto 
  app_option 

  There is also a new plugin file for the in_compile flow with the variable
  TCL_DFT_PRE_IN_COMPILE_SETUP_FILE in fc_setup.tcl file. This plugin file is available to load
  setup commands like set_scan_element and set_wrapper_configuration -reuse_threshold that
  are necessary to be setup before compile_fusion.

  Additionally, there is a new DFT_MODES_LIST variable in the fc_seutp.tcl for you to
  define the test modes for dft_drc and write_test_protocol to work on after initial_opto and
  final_opto in compile.tcl 

###############################################################################
# Added special features handling through mega switches
###############################################################################

* Special features that are different than the default RM flow are available through the 
  fc_setup.tcl file. When enabled, the features are setup in the RM scripts or through the 
  set_stage mega switch. For more information, see these features in the fc_setup.tcl file 
  under the header "Special features".

###############################################################################
# Changed init_design step to optional in Makefile
###############################################################################

* The init_design step, still default in the flow, is now optional through the Makefile.
  In the Makefile set the INIT_DESIGN variable to false to start the flow from compile.
  This is for users that have their own data preparation scripts to create a compile
  ready database. 

###############################################################################
# Changed shared_setup.tcl name to design_setup.tcl
###############################################################################

* The shared_setup.tcl file has been renamed to design_setup.tcl file. The file has been 
  reorganized to make it more consistent for design input collaterals,
  design plugin files, and system setup. 

###############################################################################
# Changed Setup file RM variables Organization
###############################################################################

* The RM variables in design_setup.tcl and fc_setup.tcl have been reorgnized to 
  focus the two files under the following guidance.

  - design_setup.tcl 
    A file for design specific setup variables. This includes design input files
    such as RTL, Floorplan, UPF, and reference libraries. It is also a file for design 
    specific plugin file definitions for user defined to be sourced before or after 
    major command steps. System related variables for block names, reporting, and 
    the search_path are also defined in this file.

  - fc_setup.tcl
    A file for special features and control of the RM flow. This file defines variables
    to control features and flows in the RM for different steps. For instance, defining the
    Multisource Clock Tree Synthesis flow or the Path Based Analysis Optimization for 
    post-route. Variables defined here enables these features through a combination of 
    RM script flow changes and/or the set_stage mega switch.

###############################################################################
# Removed settings.<step>.tcl scripts
###############################################################################

* The settings.<step>.tcl files have been removed and consolidated into the main command
  scripts and mega switches. The contents of the settings.<step>.tcl files typically applied
  different app_option settings based on fc_setup.tcl variable definitions or sourced plugin
  files to define things like non-default routing rules. The sourcing of plugin files moved
  to the main scripts and the settings applications have been put into the set_stage mega
  switch. Based on the feature variables defined in the fc_setup.tcl set_stage performs 
  different app_option setup for the specified step.

