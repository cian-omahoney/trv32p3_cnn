##########################################################################################
# Tool: RTL Architect
# Script: README_RTLA
# Version: S-2021.06
# Copyright (C) 2019-2021 Synopsys, Inc. All rights reserved.
##########################################################################################

Overview 
========
This RM script package contains scripts to run a full flow of mega commands from RTL to physical aware FAST synthesis with integrated auto-floorplanning capability for both flat and hierarchical designs. This RM script also supports design exploration.


Instructions for Using the RTL Architect Reference Methodology
=================================================================
The Makefile is the mechanism to run the RTLA-RM scripts for all the flows. There are 3 Makefiles: Makefile_rtla_flat, Makefile_rtla_hier, and Makefile_rtla_explore. Choose the one you want and use the Makefile to run the entire flow or to a certain stage. Use the following Makefile command:
   % make -f rm_setup/Makefile_rtla_<flat | hier | explore> all

You can replace "all" with any other step, such as conditioning, floorplanning, or estimation in the Makefile. When a stage is completed in an earlier run, the Makefile starts from the next stage in the sequence.


Flow Steps (see the makefile: rm_setup/Makefile_rtla_flat):
=================================================================
The RTL Architect Reference Methodology flow includes the following steps with brief descriptions:

1. init_design 
   Prepares data, reads design input, creates the design, applies physical and timing constraints and power intent. 

2. rtl_opt
   Runs conditioning and estimation to perform physical aware FAST synthesis.

3. metrics
   Computes congestion, timing, and power metrics for all logical hierarchies in the design after performing physical aware FAST synthesis.


Flow Steps (see the makefile: rm_setup/Makefile_rtla_hier):
==================================================================
The RTL Architect Reference Methodology flow includes the following steps with brief descriptions:

1. init_design 
   Prepares data, reads design input, creates the design, applies physical and timing constraints and power intent. 

2. splits
   Runs split_constraints and commit. 
   Splits the full-chip SDC and UPF, then partitions them into top-level and block-level files. Partitions the design from a logical hierarchy cell to a physical hierarchy block.

3. conditioning
   Runs block_conditioning and top_conditioning.
   block_conditioning : Runs distributed sub-blocks to map the designs to technology cells and performs area-based optimization and logic-based delay optimization. 
   top_conditioning   : Maps the top design (using either design or abstract views for sub-blocks) to technology cells and performs area-based optimization and logic-based delay optimization. 

4. floorplanning
   Performs auto-floorplanning and all design planning steps, including block and voltage shaping and placement, hard macro placement, pin assignment, timing estimation, and budgeting.

5. estimation
   Runs block_estimation and top_estimation.
   block_estimation: Runs distributed blocks to perform pre-route physical optimization, which includes multiple iterations of placement, buffer-tree building, and multiple iterations of optimization for costs such as timing, power, and area. Percentage or logic-depth based initial budgets used during conditioning are discarded and timing-estimation based budgets are used.
   top_estimation  : Performs pre-route physical optimization for top design (using either design or abstract views for sub-blocks) which includes multiple iterations of placement, buffer-tree building, and multiple iterations of optimization for costs such as timing, power, area.

6. metrics
   Computes congestion, timing, and power metrics for all logical hierarchies in the design after performing physical aware FAST synthesis.


Flow Steps (see the makefile: rm_setup/Makefile_rtla_explore:
===================================================================
The RTL Architect Reference Methodology flow includes the following steps with brief descriptions:

1. init_design 
   Prepares data, reads design input, creates the design, applies physical and timing constraints and power intent. 

2. explore
   Performs design exploration based on utilization, aspect ratio, max routing layers, variables and library.


Files Included With the RTL Architect Reference Methodology
===================================================================
The rm_setup and rm_rtl_<flat | hier | explore>_scripts directories contains the following scripts:

* rm_setup/Makefile_rtla_flat
 Makefile for running the flat flow. MEGA commands from init_design to metrics.

* rm_setup/Makefile_rtla_hier
 Makefile for running the hier flow. MEGA commands from init_design to metrics.

* rm_setup/Makefile_rtla_explore
 Makefile for running the design exploration from init_design to exploration.

* rm_setup/design_setup.tcl
 Defines variables specific to the design input. Defines the design name, RTL inputs, timing constraints, UPF, etc. These variables are shared by all IC Compiler II and Fusion Compiler Reference Methodology scripts, such as TECH_FILE, REFERENCE_LIBRARY, and VERILOG_NETLIST_FILE.

* rm_setup/rtl_setup.tcl
 Defines the plugin files, flow variables, and RTL design specific information for the RTL flow. 

* rm_rtl_flat_scripts/init_design.tcl
 Creates the NDM design library, and reads in the RTL or gated netlist files, floorplan files, multivoltage power intent, timing, and physical constraints for the design.

* rm_rtl_flat_scripts/rtl_opt.tcl
 Runs the conditioning and estimation steps to perform physical aware FAST synthesis.

* rm_rtl_flat_scripts/metrics.tcl
 Computes and reports congestion, timing, and power metrics. The metrics reports are saved in "rpts_rtl/".

* rm_rtl_hier_scripts/splits.tcl
  Runs split_constraints and commit. 
  Saves the split_constraints stage seperately.

* rm_rtl_hier_scripts/conditioning.tcl
  Runs block_conditioning and top_conditioning.
  Saves the block_conditioning stage seperately.

* rm_rtl_hier_scripts/floorplanning.tcl
  Runs floorplanning.

* rm_rtl_hier_scripts/estimation.tcl
  Runs block_estimation and top_estimation.
  Saves the block_estimation stage seperately.

* rm_rtl_explore_scripts/explore_design.tcl
  Runs design exploration. You can preset the exploration variables in rm_setup/rtl_setup.tcl. 

 Supporting scripts
 In each of rm_rtl_<flat | hier | explore>_scripts/:
===================================================================
* init_design.tech_setup.tcl
  This script includes technology-related settings, such as routing direction, 
  offset, site default, and the site symmetry list.

  If you use a technology file (TECH_FILE is defined), the init_design.tcl
  script sources the technology setup script before the read_def or
  initialize_floorplan command.

  If you use a technology library (TECH_LIB is defined), by default, the
  init_design.tcl script assumes that the technology information is already 
  loaded and does not source the technology setup script. To source the 
  technology setup script, set the TECH_LIB_INCLUDES_TECH_SETUP_INFO variable 
  to false.

* init_design.read_parasitic_tech_example.tcl
  This script is a sample to read two TLU+ files.
  You can expand to accomodate your design.

* init_design.mcmm_example.explicit.tcl 
  init_design.mcmm_example.auto_expanded.tcl

     - init_design.mcmm_example.explicit.tcl: 
       Creates a shared mode, two corners, and two scenarios 
       with mode, corner, and scenario constraints all explicitly provided.

     - init_design.mcmm_example.auto_expanded.tcl:
       Creates two scenarios with scenario constraints and
       automatically expands the constraints to the associated modes and
       scenarios. 

  This script is sourced in init_design.tcl

* expert.floorplan.settings.tcl
  This script is for expert floorplan settings. A set of options to control the floorplan related settings.

* expert.split.constraints.settings.tcl
  This script is for expert split_constraints settings. A set of options to control the budgeting settings.

* explore_design_example.tcl
  This sample script contains variable sweep examples for frequency sweep, floorplan sweep, and application options for macro-placement sweeping using explore design.

* user_conditioning_pre_script.tcl
  This script contains application options to control concurrent clock and data optimization, multibit, DTDP and Congestion effort.

* view_in_place.tcl (Optional)
  This script is used in the optional view_in_place RM step. 
  The view_in_place RM step allows you to view the design data for the specified flow stage.

* view_copy.tcl (Optional)
  This script is used in the optional view_copy RM step. 
  The view_copy RM step allows you to view the design data in a copied mode. 
  Select the flow stage that you wish to copy the design data from.
  The library from that stage is copied with "_copy" appended to it to form the copied library name. Then, the block is opened for viewing.



