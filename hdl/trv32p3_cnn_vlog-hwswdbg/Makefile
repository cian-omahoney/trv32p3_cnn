
# File generated by Go version U-2022.12#33f3808fcb#221128, Wed Feb 21 17:37:22 2024
# Copyright 2014-2022 Synopsys, Inc. All rights reserved.
# go -I../lib -F -DSYNTHESIS_NO_UNGROUP -D__tct_patch__=0 -Verilog -otrv32p3_cnn_vlog-hwswdbg -cgo_options-hwswdbg.cfg -Itrv32p3_cnn_vlog-hwswdbg/tmp_pdg -updg -updg_controller trv32p3_cnn




# THISDIR specifies path to the directory of this Makefile
THISDIR = $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
MAKEDIR = $(THISDIR)

LIBDIR    = $(THISDIR)/trv32p3_cnn/go_bin
LIBDIR_TB = $(THISDIR)/test_bench/go_tb_bin

SOURCES_RTL =  \
	trv32p3_cnn/controller/controller.v \
	trv32p3_cnn/controller/hazards.v \
	trv32p3_cnn/controller/jtag_scan_register.v \
	trv32p3_cnn/controller/debug_controller.v \
	trv32p3_cnn/controller/jtag_interface.v \
	trv32p3_cnn/controller/jtag_tap_controller.v \
	trv32p3_cnn/controller/decoder.v \
	trv32p3_cnn/mux/mux_pm_addr.v \
	trv32p3_cnn/mux/mux_pm_wr.v \
	trv32p3_cnn/mux/mux_dm_addr.v \
	trv32p3_cnn/mux/mux_dmb_wr.v \
	trv32p3_cnn/mux/mux_x_w1.v \
	trv32p3_cnn/mux/mux_x_w1_dead.v \
	trv32p3_cnn/mux/mux_ocd_data_w.v \
	trv32p3_cnn/mux/mux_ocd_instr_w.v \
	trv32p3_cnn/mux/mux_aluA.v \
	trv32p3_cnn/mux/mux_aluB.v \
	trv32p3_cnn/mux/mux_pcaA.v \
	trv32p3_cnn/mux/mux_pcaB.v \
	trv32p3_cnn/mux/mux_jmp_tgt_ID.v \
	trv32p3_cnn/mux/mux_aguB.v \
	trv32p3_cnn/mux/mux_mpyM.v \
	trv32p3_cnn/mux/mux_ocd_swbreak.v \
	trv32p3_cnn/mux/mux___pidTGT_w.v \
	trv32p3_cnn/mux/mux___X_x_w1_wad.v \
	trv32p3_cnn/pipe/pipe___pidTGT.v \
	trv32p3_cnn/pipe/pipe___ocd_ld_DMbEX.v \
	trv32p3_cnn/pipe/pipe___ocd_ld_DMbS3.v \
	trv32p3_cnn/pipe/pipe___ocd_st_DMbEX.v \
	trv32p3_cnn/pipe/pipe___ocd_st_DMbS3.v \
	trv32p3_cnn/pipe/pipe___ocd_ld_PMbEX.v \
	trv32p3_cnn/pipe/pipe___ocd_ld_PMbS3.v \
	trv32p3_cnn/pipe/pipe___ocd_st_PMbEX.v \
	trv32p3_cnn/reg/reg_PC.v \
	trv32p3_cnn/reg/reg_PC_ID.v \
	trv32p3_cnn/reg/reg_PC_EX.v \
	trv32p3_cnn/reg/reg_X.v \
	trv32p3_cnn/reg/reg_ocd_addr.v \
	trv32p3_cnn/reg/reg_ocd_data.v \
	trv32p3_cnn/reg/reg_ocd_instr.v \
	trv32p3_cnn/mem/dm_merge.v \
	trv32p3_cnn/mem/dm_wbb.v \
	trv32p3_cnn/mem/mem_PMb.v \
	trv32p3_cnn/mem/mem_DMb.v \
	trv32p3_cnn/prim/alu.v \
	trv32p3_cnn/prim/pca.v \
	trv32p3_cnn/prim/cmp.v \
	trv32p3_cnn/prim/div.v \
	trv32p3_cnn/prim/lx.v \
	trv32p3_cnn/prim/agu.v \
	trv32p3_cnn/prim/mpy.v \
	trv32p3_cnn/prim/ocd_addr_incr.v \
	trv32p3_cnn/prim/cnn.v \
	trv32p3_cnn/trv32p3_cnn.v
SOURCES_TB =  \
	test_bench/clock_gen.v \
	test_bench/jtag_emulator.v \
	test_bench/tb_mem_PMb.v \
	test_bench/tb_mem_eDM.v \
	test_bench/test_bench.v

# Note: If 'which <tool>' does not point to the real installation,
# you may overwrite the makefile variables by specifying them as
# command line option, e.g. 'make <target> SIM_INSTALL=<real dir>'
# or 'make <target> CHESSDE_INSTALL=<real dir>
# or 'make <target> GCCLIB_PATH=<path to libstdc++>'
SIM_INSTALL = $(dir $(shell which vcs))
CHESSDE_INSTALL  = $(dir $(shell which chessde))
GO_INCLUDE  = $(CHESSDE_INSTALL)/../../chessdir/godir/include
CHESSDIR_INCLUDE  = $(CHESSDE_INSTALL)/../../chessdir
CHECKERS_INCLUDE  = $(CHESSDE_INSTALL)/../../chessdir/checkersdir/include
VPI_INCLUDE = $(SIM_INSTALL)/../include
JTAG_EMU = jtag_emulator_vpi.so
HWSW_DEFINES ?= +define+HWSW_LOG +define+FSDB_DUMP
HWSW_FLAGS ?= -lca
SO_CC = g++
SO_LD = g++
SO_CCFLAGS = -m64 -c -fPIC -std=c++11 -g -DVCS -DOLD_VCS_VHPI
SO_LDFLAGS = -m64 -shared -fPIC
GCCLIB_PATH = $(dir $(realpath $(shell which g++)))/../lib64
ifdef LD_LIBRARY_PATH
    export LD_LIBRARY_PATH := $(GCCLIB_PATH):$(LD_LIBRARY_PATH)
else
    export LD_LIBRARY_PATH := $(GCCLIB_PATH)
endif
MODEL_NAME = trv32p3_cnn
HWSW_APP ?= sort
CONFIG ?= Release
HWSW_APPDIR ?= ../../$(HWSW_APP)/$(CONFIG)
HWSW_APP_DISASSEMBLY ?= $(HWSW_APP).lst
HWSW_ISS ?= ../../iss/trv32p3_cnn_ca
HWSW_EXIT ?=cycle
export ASIP_SPY_GOAL=lint/lint_rtl
export ASIP_SPY_PRJ=spyglass

default: all

all: appname elab
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) -gui

appname:
ifdef APP
ifdef APPDIR
	@echo $(APPDIR)/$(APP) > appname.cfg
else
	@echo $(APP) > appname.cfg
endif
else
ifdef APPDIR
	@echo $(APPDIR)/data > appname.cfg
else
	@echo ./data > appname.cfg
endif
endif

$(LIBDIR):
	@mkdir -p $@

$(LIBDIR_TB):
	@mkdir -p $@

$(THISDIR)/$(JTAG_EMU): $(GO_INCLUDE)/jtag_emulator_vpi.cpp
	cd $(THISDIR) && $(SO_CC) $(SO_CCFLAGS) -I $(VPI_INCLUDE) -I $(GO_INCLUDE) -I $(CHESSDIR_INCLUDE) -I $(CHECKERS_INCLUDE) $(GO_INCLUDE)/jtag_emulator_vpi.cpp; \
	cd $(THISDIR) && $(SO_CC) $(SO_CCFLAGS) -I $(VPI_INCLUDE) -I $(CHESSDIR_INCLUDE) -I $(CHECKERS_INCLUDE) $(CHECKERS_INCLUDE)/jtag_socket.cpp; \
	cd $(THISDIR) && $(SO_LD) $(SO_LDFLAGS) -o $(JTAG_EMU) jtag_emulator_vpi.o jtag_socket.o -Wl,-rpath $(GCCLIB_PATH);

$(THISDIR)/.analyze.ok : $(LIBDIR) $(LIBDIR_TB) $(SOURCES_RTL:%=$(THISDIR)/%) $(SOURCES_TB:%=$(THISDIR)/%)
	cd $(THISDIR) && vlogan  -nc -kdb -work trv32p3_cnn_lib +v2k -sverilog -assert svaext -full64 +incdir+trv32p3_cnn/prim  $(SOURCES_RTL) && touch .analyze.ok
	cd $(THISDIR) && vlogan  -nc -kdb -work trv32p3_cnn_tb_lib +v2k -sverilog -assert svaext -full64 +incdir+trv32p3_cnn/prim  $(SOURCES_TB) && touch .analyze.ok || rm -f .analyze.ok

analyze: $(THISDIR)/.analyze.ok

$(THISDIR)/.elab.ok : $(THISDIR)/.analyze.ok $(THISDIR)/$(JTAG_EMU)
	cd $(THISDIR) && vcs -kdb -debug_access+all -full64 -xprop  -o simv trv32p3_cnn_tb_lib.test_bench -load $(THISDIR)/$(JTAG_EMU):jtag_vpi_register_tfs -cm line+cond+branch -cm_cond basic+allops && touch .elab.ok

elab: $(THISDIR)/.elab.ok

dve: appname elab
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) -gui=dve

dve_dumpall: appname elab
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) -do $(THISDIR)/gen_dump.tcl -gui=dve

verdi: appname elab
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) -gui=verdi

verdi_dumpall: appname elab
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) -do $(THISDIR)/gen_dump.tcl -gui=verdi

sim: appname
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) -ucli -do $(THISDIR)/gen_sim_exit.tcl -licqueue


CLI_SCRIPT?=
cli: appname elab
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) -ucli $(CLI_SCRIPT)

run: appname
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log)

rcd: appname
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) -ucli -do $(THISDIR)/gen_rcd.tcl -licqueue

ext_stop: appname
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) -ucli -do $(THISDIR)/gen_ext_stop.tcl -licqueue

#------ hwsw_debug targets --------

$(THISDIR)/.analyze_hwsw.ok : $(LIBDIR) $(LIBDIR_TB) $(SOURCES_RTL:%=$(THISDIR)/%) $(SOURCES_TB:%=$(THISDIR)/%)
	cd $(THISDIR) && vlogan  -nc -kdb -work trv32p3_cnn_lib +v2k -sverilog -assert svaext -full64 +incdir+trv32p3_cnn/prim $(HWSW_DEFINES) $(HWSW_FLAGS)  $(SOURCES_RTL) && touch .analyze_hwsw.ok
	cd $(THISDIR) && vlogan  -nc -kdb -work trv32p3_cnn_tb_lib +v2k -sverilog -assert svaext -full64 +incdir+trv32p3_cnn/prim $(HWSW_DEFINES) $(HWSW_FLAGS)  $(SOURCES_TB) && touch .analyze_hwsw.ok || rm -f .analyze_hwsw.ok

analyze_hwsw: $(THISDIR)/.analyze_hwsw.ok

$(THISDIR)/.elab_hwsw.ok : $(THISDIR)/.analyze_hwsw.ok $(THISDIR)/$(JTAG_EMU)
	cd $(THISDIR) && vcs -kdb -debug_access+all -full64 -xprop  -o simv trv32p3_cnn_tb_lib.test_bench -load $(THISDIR)/$(JTAG_EMU):jtag_vpi_register_tfs -cm line+cond+branch -cm_cond basic+allops $(HWSW_FLAGS) && touch .elab_hwsw.ok

elab_hwsw: $(THISDIR)/.elab_hwsw.ok

data.exit: $(HWSW_ISS)  $(HWSW_APPDIR)/$(HWSW_APP)
	$(HWSW_ISS) -b $(HWSW_APPDIR)/$(HWSW_APP) -f hath

data.cycle_count: $(HWSW_APPDIR)/$(HWSW_APP)
	cp $(HWSW_APPDIR)/$(HWSW_APP).cycle_count ./data.cycle_count

ifeq ($(HWSW_EXIT),cycle)
trv32p3_cnn_hwsw.log: data.exit data.cycle_count
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) +fsdb+time_precision=1ps -ucli -do $(THISDIR)/gen_rcd.tcl -licqueue
else
trv32p3_cnn_hwsw.log: data.exit
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) +fsdb+time_precision=1ps -ucli -do $(THISDIR)/gen_sim_exit.tcl -licqueue
endif

trv32p3_cnn.xml: $(HWSW_ISS) $(HWSW_APPDIR)/$(HWSW_APP)
	asip2gdb -l $(HWSW_ISS) -r $(HWSW_APPDIR)/$(HWSW_APP)

hwsw.fsdb gmon.out: trv32p3_cnn.xml trv32p3_cnn_hwsw.log $(THISDIR)/trv32p3_cnn_hwsw.pat
	hwsw_debug_convert fsdbScaleUnit=1ps patternFile=$(THISDIR)/trv32p3_cnn_hwsw.pat cpuType=trv32p3_cnn configName=trv32p3_cnn configPath=. exeFile=$(HWSW_APPDIR)/$(HWSW_APP) clockPeriod=10ns clockOffset=0ns -i trv32p3_cnn_hwsw.log -o hwsw.fsdb gprof

hwsw.covdb: $(HWSW_APPDIR)/$(HWSW_APP) $(HWSW_APPDIR)/$(HWSW_APP_DISASSEMBLY) gmon.out
	hwsw_debug_coverage -elf_file $(HWSW_APPDIR)/$(HWSW_APP) -gmon_file gmon.out -report coverage_report.txt -covdb -annotate_sources -disassembly $(HWSW_APPDIR)/$(HWSW_APP_DISASSEMBLY)

asm_profile.txt: gmon.out
	hwsw_debug_prof -disassembly $(HWSW_APPDIR)/$(HWSW_APP_DISASSEMBLY) -gmon_file gmon.out -o asm_profile.txt

VirtualFsdb.vf: hwsw.fsdb trv32p3_cnn_design.fsdb
	@echo "@FSDB rc file Version 1.0" > VirtualFsdb.vf
	@echo "[VRTL_FILE_HEADER]" >> VirtualFsdb.vf
	@echo "Version = 1" >> VirtualFsdb.vf
	@echo "[VRTL_FILE_SOURCE]" >> VirtualFsdb.vf
	@echo "FileType = stitch" >> VirtualFsdb.vf
	@echo "File1 = hwsw.fsdb" >> VirtualFsdb.vf
	@echo "File2 = trv32p3_cnn_design.fsdb" >> VirtualFsdb.vf

hwsw_debug: VirtualFsdb.vf
	hwsw_debug -ssf VirtualFsdb.vf -verdi_args "-dbdir simv.daidir"

hwsw_verdi: VirtualFsdb.vf
	verdi -ssf VirtualFsdb.vf -dbdir simv.daidir
#----------------------------------

#------ spyglass targets --------
spyglass_run:
	spyglass -goal $(ASIP_SPY_GOAL) -project $(THISDIR)/$(ASIP_SPY_PRJ).prj -batch

spyglass_grep_results:
	@chmod u+x $(THISDIR)/spyglass_grep_results.sh
	@$(THISDIR)/spyglass_grep_results.sh $(THISDIR) $(ASIP_SPY_PRJ) $(ASIP_SPY_GOAL)
#----------------------------------

saif:
	$(THISDIR)/simv +warn=noSTASKW_CO -cm_name $(shell mktemp -u test.XXXXXXXXXXXXXXX)$(CM_SUFFIX) -cm line+cond+branch -cm_log $(patsubst %.log,%,cm$(CM_SUFFIX).log) -ucli -do $(THISDIR)/gen_saif.tcl -licqueue

clean:
	@cd $(THISDIR) && rm -rf appname.cfg
	@cd $(THISDIR) && rm -rf trv32p3_cnn/go_bin
	@cd $(THISDIR) && rm -rf test_bench/go_tb_bin
	@cd $(THISDIR) && rm -rf .analyze*.ok .elab*.ok
	@cd $(THISDIR) && rm -rf csrc simv*
	@cd $(THISDIR) && rm -rf DVEfiles inter.vpd*
	@cd $(THISDIR) && rm -rf .restartSimSession.tcl*
	@cd $(THISDIR) && rm -rf .synopsys_dve_rebuild.tcl
	@cd $(THISDIR) && rm -rf .vlogansetup.args
	@cd $(THISDIR) && rm -rf novas.* novas_dump.*
	@cd $(THISDIR) && rm -rf inter.fsdb
	@cd $(THISDIR) && rm -rf verdiLog
	@cd $(THISDIR) && rm -rf ucli.key
	@cd $(THISDIR) && rm -rf jtag_socket*.o
	@cd $(THISDIR) && rm -rf jtag_emulator*.o
	@cd $(THISDIR) && rm -rf jtag_emulator*.so
	@cd $(THISDIR) && rm -rf libjtag_emulator*.so
	@cd $(THISDIR) && rm -rf trv32p3_cnn_hwsw.log hwsw.fsdb trv32p3_cnn_design.fsdb
	@cd $(THISDIR) && rm -rf novas.* novas_dump.*
	@cd $(THISDIR) && rm -rf eSWdebugLog verdiLog 64
	@cd $(THISDIR) && rm -rf hwswDebugLog hwsw_debug_profLog
	@cd $(THISDIR) && rm -rf .verdi_onesearch_elabdir .diagnose.oneSearch
	@cd $(THISDIR) && rm -rf hwsw_debug_coverageLog hwsw.covdb *.cov
	@cd $(THISDIR) && rm -rf src_coverage hwsw.covdb coverage_report.txt
	@cd $(THISDIR) && rm -rf asm_profile.txt gmon.out *.xml VirtualFsdb.vf

test:
	@echo This model has I/O-Interfaces, use "\'iss -b <application>\'" to generate the memory content files.
