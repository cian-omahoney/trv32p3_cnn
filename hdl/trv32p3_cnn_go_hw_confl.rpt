
// File generated by Go version U-2022.12#33f3808fcb#221128, Sat Mar 16 14:40:42 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.

HW conflicts on transitories of trv32p3_cnn


<<<< Enable option -s or -b <nr> to see instruction patterns (-s may be slow). >>>>


<<<< Enable debug mode (option -d1) to see HW conflicts between
     operations with different 'strength'. >>>>


<<<< Enable option -n to obtain an nML rule derivation for each source reference (may be slow). >>>>


<<<< Enable option -v to obtain all source references for each conflict (may be slow). >>>>



dm_addr stage 2 : conflict for
		<option -s or -b <nr> print instruction bit patterns here (-s may be slow)>
  dm_addr_copy0_ocd_addr_r___ocd_ld_DMbEX_r_EX_alw  : IN( ocd_addr_r `EX` ) GRD( __ocd_ld_DMbEX_r `EX` ) OUT( dm_addr `EX` )
  <--->
  dm_addr_copy0_ocd_addr_r___ocd_st_DMbEX_r_EX_alw  : IN( ocd_addr_r `EX` ) GRD( __ocd_st_DMbEX_r `EX` ) OUT( dm_addr `EX` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd.n:73] ocd_data `3` = ocd_data_w = dmb_rd = DMb[dm_addr `EX` = ocd_addr_r `EX`] `3`;
        <>
      [ocd.n:80] DMb[dm_addr `EX` = ocd_addr_r `EX`] `3` = dmb_wr `3` = ocd_data_r `3`;


      (refined) source code reference for conflict
      [ocd.n:73] dm_addr `EX` = ocd_addr_r `EX`
        <>
      [ocd.n:80] dm_addr `EX` = ocd_addr_r `EX`


pm_addr stage 2 : conflict for
		<option -s or -b <nr> print instruction bit patterns here (-s may be slow)>
  pm_addr_copy0_ocd_addr_r___ocd_ld_PMbEX_r_EX_alw  : IN( ocd_addr_r `EX` ) GRD( __ocd_ld_PMbEX_r `EX` ) OUT( pm_addr `EX` )
  <--->
  pm_addr_copy0_ocd_addr_r___ocd_st_PMbEX_r_EX_alw  : IN( ocd_addr_r `EX` ) GRD( __ocd_st_PMbEX_r `EX` ) OUT( pm_addr `EX` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd.n:89] ocd_instr `3` = ocd_instr_w `3` = pm_rd `3` = PM[pm_addr `EX` = ocd_addr_r `EX`] `3`;
        <>
      [ocd.n:95] PM[pm_addr = ocd_addr_r] `EX` = pm_wr `EX` = ocd_instr_r `EX`;


      (refined) source code reference for conflict
      [ocd.n:89] pm_addr `EX` = ocd_addr_r `EX`
        <>
      [ocd.n:95] pm_addr = ocd_addr_r


ocd_addr_w stage 2 : conflict for
		<option -s or -b <nr> print instruction bit patterns here (-s may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr___ocd_ld_DMbEX_r_EX_alw  incr1: IN( ocd_addr_r `EX` ) GRD( __ocd_ld_DMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr
  <--->
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr___ocd_st_DMbEX_r_EX_alw  incr1: IN( ocd_addr_r `EX` ) GRD( __ocd_st_DMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd.n:71] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX`)  @ocd_addr_incr;
        <>
      [ocd.n:78] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd.n:71] ocd_addr `EX` = ocd_addr_w `EX`
        <>
      [ocd.n:78] ocd_addr `EX` = ocd_addr_w `EX`


ocd_addr_w stage 2 : conflict for
		<option -s or -b <nr> print instruction bit patterns here (-s may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr___ocd_ld_DMbEX_r_EX_alw  incr1: IN( ocd_addr_r `EX` ) GRD( __ocd_ld_DMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr
  <--->
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr___ocd_ld_PMbEX_r_EX_alw  incr4: IN( ocd_addr_r `EX` ) GRD( __ocd_ld_PMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd.n:71] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX`)  @ocd_addr_incr;
        <>
      [ocd.n:87] ocd_addr `EX` = ocd_addr_w `EX` = incr4 (ocd_addr_r `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd.n:71] ocd_addr `EX` = ocd_addr_w `EX`
        <>
      [ocd.n:87] ocd_addr `EX` = ocd_addr_w `EX`


ocd_addr_w stage 2 : conflict for
		<option -s or -b <nr> print instruction bit patterns here (-s may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr___ocd_ld_DMbEX_r_EX_alw  incr1: IN( ocd_addr_r `EX` ) GRD( __ocd_ld_DMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr
  <--->
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr___ocd_st_PMbEX_r_EX_alw  incr4: IN( ocd_addr_r `EX` ) GRD( __ocd_st_PMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd.n:71] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX`)  @ocd_addr_incr;
        <>
      [ocd.n:94] ocd_addr `EX` = ocd_addr_w `EX` = incr4 (ocd_addr_r `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd.n:71] ocd_addr `EX` = ocd_addr_w `EX`
        <>
      [ocd.n:94] ocd_addr `EX` = ocd_addr_w `EX`


ocd_addr_w stage 2 : conflict for
		<option -s or -b <nr> print instruction bit patterns here (-s may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr___ocd_st_DMbEX_r_EX_alw  incr1: IN( ocd_addr_r `EX` ) GRD( __ocd_st_DMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr
  <--->
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr___ocd_ld_PMbEX_r_EX_alw  incr4: IN( ocd_addr_r `EX` ) GRD( __ocd_ld_PMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd.n:78] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX`)  @ocd_addr_incr;
        <>
      [ocd.n:87] ocd_addr `EX` = ocd_addr_w `EX` = incr4 (ocd_addr_r `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd.n:78] ocd_addr `EX` = ocd_addr_w `EX`
        <>
      [ocd.n:87] ocd_addr `EX` = ocd_addr_w `EX`


ocd_addr_w stage 2 : conflict for
		<option -s or -b <nr> print instruction bit patterns here (-s may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr___ocd_st_DMbEX_r_EX_alw  incr1: IN( ocd_addr_r `EX` ) GRD( __ocd_st_DMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr
  <--->
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr___ocd_st_PMbEX_r_EX_alw  incr4: IN( ocd_addr_r `EX` ) GRD( __ocd_st_PMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd.n:78] ocd_addr `EX` = ocd_addr_w `EX` = incr1 (ocd_addr_r `EX`)  @ocd_addr_incr;
        <>
      [ocd.n:94] ocd_addr `EX` = ocd_addr_w `EX` = incr4 (ocd_addr_r `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd.n:78] ocd_addr `EX` = ocd_addr_w `EX`
        <>
      [ocd.n:94] ocd_addr `EX` = ocd_addr_w `EX`


ocd_addr_w stage 2 : conflict for
		<option -s or -b <nr> print instruction bit patterns here (-s may be slow)>
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr___ocd_ld_PMbEX_r_EX_alw  incr4: IN( ocd_addr_r `EX` ) GRD( __ocd_ld_PMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr
  <--->
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr___ocd_st_PMbEX_r_EX_alw  incr4: IN( ocd_addr_r `EX` ) GRD( __ocd_st_PMbEX_r `EX` ) OUT( ocd_addr_w `EX` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd.n:87] ocd_addr `EX` = ocd_addr_w `EX` = incr4 (ocd_addr_r `EX`)  @ocd_addr_incr;
        <>
      [ocd.n:94] ocd_addr `EX` = ocd_addr_w `EX` = incr4 (ocd_addr_r `EX`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd.n:87] ocd_addr `EX` = ocd_addr_w `EX`
        <>
      [ocd.n:94] ocd_addr `EX` = ocd_addr_w `EX`

