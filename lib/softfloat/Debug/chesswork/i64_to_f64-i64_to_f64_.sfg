
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:14:01 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/i64_to_f64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t i64_to_f64(int64_t)
Fi64_to_f64 : user_defined, called {
    fnm : "i64_to_f64" 'float64_t i64_to_f64(long long)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=28 );
    llv : 0 0 0 0 0 ;
}
****
!!  float64_t softfloat_normRoundPackToF64(bool, int_fast16_t, uint_fast64_t)
Fsoftfloat_normRoundPackToF64 : user_defined, called {
    fnm : "softfloat_normRoundPackToF64" 'float64_t softfloat_normRoundPackToF64(bool, int_fast16_t, uint_fast64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : i64_to_f64 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=int64_t_DMb
   20 : sign typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   21 : uZ typ=w08 val=12t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   22 : absA typ=w08 val=20t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   23 : a_low typ=w08 bnd=B stl=DMb
   24 : a_high typ=w08 bnd=B stl=DMb
   25 : absA_low typ=w08 bnd=B stl=DMb
   26 : absA_high typ=w08 bnd=B stl=DMb
   27 : __rd___sp typ=w32 bnd=m
   28 : __la typ=w32 bnd=p tref=w32__
   30 : __rt_low typ=w32 bnd=m tref=__uint__
   31 : __rt_high typ=w32 bnd=m tref=__uint__
   33 : __arg_a_low typ=w32 bnd=m tref=__uint__
   34 : __arg_a_high typ=w32 bnd=m tref=__uint__
   35 : __ct_m28S0 typ=w32 val=-28S0 bnd=m
   37 : __tmp typ=w32 bnd=m
   39 : __ct_0t0 typ=w32 val=0t0 bnd=m
   41 : __adr_a typ=w32 bnd=m adro=19
   43 : __ct_8t0 typ=w32 val=8t0 bnd=m
   45 : __adr_sign typ=w32 bnd=m adro=20
   47 : __ct_12t0 typ=w32 val=12t0 bnd=m
   49 : __adr_uZ typ=w32 bnd=m adro=21
   51 : __ct_20t0 typ=w32 val=20t0 bnd=m
   53 : __adr_absA typ=w32 bnd=m adro=22
   60 : __fch_a_high typ=w32 bnd=m
   64 : __tmp typ=w32 bnd=m
   66 : __fch_a_low typ=w32 bnd=m
   69 : __fch_a_high typ=w32 bnd=m
   78 : __fch_sign typ=w32 bnd=m
   79 : __fch_sign typ=bool bnd=m
   85 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   96 : __fch_uZ typ=w32 bnd=m
   99 : __fch_uZ typ=w32 bnd=m
  100 : __fch_sign typ=w32 bnd=m
  101 : __fch_sign typ=bool bnd=m
  105 : __fch_a_low typ=w32 bnd=m
  108 : __fch_a_high typ=w32 bnd=m
  112 : __fch_a_low typ=w32 bnd=m
  115 : __fch_a_high typ=w32 bnd=m
  118 : __tmp_low typ=w32 bnd=m tref=__uint__
  119 : __tmp_high typ=w32 bnd=m tref=__uint__
  122 : __fch_sign typ=w32 bnd=m
  124 : __tmp typ=w32 bnd=m
  125 : __ct_1084 typ=w32 val=1084f bnd=m
  126 : __ct typ=w32 bnd=m
  128 : __fch_absA_low typ=w32 bnd=m
  131 : __fch_absA_high typ=w32 bnd=m
  132 : __record_low typ=w32 bnd=m tref=__uint__
  133 : __record_high typ=w32 bnd=m tref=__uint__
  136 : softfloat_normRoundPackToF64 typ=t21s_s2 val=0r bnd=m
  137 : __link typ=w32 bnd=m
  139 : __tmp typ=w32 bnd=m
  140 : __tmp typ=w32 bnd=m
  141 : __ct_28s0 typ=w32 val=28s0 bnd=m
  143 : __tmp typ=w32 bnd=m
  159 : __ct_3286237184 typ=t20s_rp12 val=-246272f bnd=m
  170 : __ct_16t0 typ=w32 val=16t0 bnd=m
  171 : __adr_uZ typ=w32 bnd=m adro=21
  172 : __adr_uZ typ=w32 bnd=m adro=21
  173 : __ct_4t0 typ=w32 val=4t0 bnd=m
  174 : __adr_a typ=w32 bnd=m adro=19
  175 : __adr_a typ=w32 bnd=m adro=19
  176 : __ct_24t0 typ=w32 val=24t0 bnd=m
  177 : __adr_absA typ=w32 bnd=m adro=22
  178 : __adr_absA typ=w32 bnd=m adro=22
  179 : __adr_a typ=w32 bnd=m adro=19
  180 : __adr_a typ=w32 bnd=m adro=19
  181 : __adr_a typ=w32 bnd=m adro=19
  206 : __tmp_high typ=w32 bnd=m
  221 : __apl_r_low typ=w32 bnd=m tref=__uint__
  222 : __apl_r_high typ=w32 bnd=m tref=__uint__
  249 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  252 : __tmpd typ=w32 bnd=m
  253 : __tmp typ=bool bnd=m
  278 : __tmp typ=w32 bnd=m
  298 : __tmp_high typ=t20s_rp12 bnd=m
  301 : __either typ=bool bnd=m
  302 : __trgt typ=t13s_s2 val=0j bnd=m
  303 : __trgt typ=t21s_s2 val=0j bnd=m
  304 : __trgt typ=t13s_s2 val=0j bnd=m
  305 : __trgt typ=t21s_s2 val=0j bnd=m
  306 : __trgt typ=t13s_s2 val=0j bnd=m
  307 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fi64_to_f64 {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (sign.19 var=20) source ()  <30>;
    (uZ.20 var=21) source ()  <31>;
    (a_low.22 var=23) source ()  <33>;
    (a_high.23 var=24) source ()  <34>;
    (absA_low.24 var=25) source ()  <35>;
    (absA_high.25 var=26) source ()  <36>;
    (__la.27 var=28 stl=X off=1) inp ()  <38>;
    (__la.28 var=28) deassign (__la.27)  <39>;
    (__arg_a_low.36 var=33 stl=X off=12) inp ()  <47>;
    (__arg_a_low.37 var=33) deassign (__arg_a_low.36)  <48>;
    (__arg_a_high.40 var=34 stl=X off=13) inp ()  <51>;
    (__arg_a_high.41 var=34) deassign (__arg_a_high.40)  <52>;
    (__rd___sp.44 var=27) rd_res_reg (__R_SP.11 __sp.17)  <55>;
    (__ct_m28S0.45 var=35) const ()  <56>;
    (__tmp.47 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_m28S0.45)  <58>;
    (__R_SP.48 var=12 __sp.49 var=18) wr_res_reg (__tmp.47 __sp.17)  <59>;
    (__rd___sp.50 var=27) rd_res_reg (__R_SP.11 __sp.49)  <61>;
    (__ct_0t0.51 var=39) const ()  <62>;
    (__adr_a.53 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_0t0.51)  <64>;
    (__rd___sp.55 var=27) rd_res_reg (__R_SP.11 __sp.49)  <66>;
    (__rd___sp.60 var=27) rd_res_reg (__R_SP.11 __sp.49)  <71>;
    (__rd___sp.65 var=27) rd_res_reg (__R_SP.11 __sp.49)  <76>;
    (__M_DMw.71 var=5 a_low.72 var=23) store (__arg_a_low.37 __adr_a.53 a_low.22)  <82>;
    (__M_DMw.77 var=5 a_high.78 var=24) store (__arg_a_high.41 __adr_a.361 a_high.23)  <87>;
    (__ct_4t0.355 var=173) const ()  <429>;
    (__adr_a.361 var=179) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.355)  <437>;
    call {
        () chess_separator_scheduler ()  <88>;
    } #4 off=1
    #277 off=2
    (__ct_8t0.56 var=43) const ()  <67>;
    (__adr_sign.58 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.56)  <69>;
    (__fch_a_high.85 var=60) load (__M_DMw.4 __adr_a.362 a_high.78)  <95>;
    (__M_DMw.91 var=5 sign.92 var=20) store (__tmp.449 __adr_sign.58 sign.19)  <101>;
    (__ct_0.158 var=85) const ()  <170>;
    (__adr_a.362 var=180) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.355)  <438>;
    (__tmp.449 var=64) __sint_slt___sint___sint (__fch_a_high.85 __ct_0.158)  <605>;
    call {
        () chess_separator_scheduler ()  <102>;
    } #6 off=3
    #128 off=4
    (__fch_a_low.94 var=66) load (__M_DMw.4 __adr_a.53 a_low.72)  <104>;
    (__fch_a_high.99 var=69) load (__M_DMw.4 __adr_a.363 a_high.78)  <109>;
    (__adr_a.363 var=181) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.355)  <439>;
    (__tmp_high.387 var=206) __uint__ad___uint___uint (__fch_a_high.99 __ct_2147483647.441)  <489>;
    (__ct_2147483647.441 var=249) const ()  <576>;
    (__tmpd.444 var=252) __uint__or___uint___uint (__tmp_high.387 __fch_a_low.94)  <599>;
    (__tmp.445 var=253) bool__eq___uint___uint (__tmpd.444 __ct_0.158)  <600>;
    (__trgt.554 var=306) const ()  <809>;
    () void_br_bool_t13s_s2 (__tmp.445 __trgt.554)  <810>;
    (__either.555 var=301) undefined ()  <811>;
    if {
        {
            () if_expr (__either.555)  <140>;
        } #9
        {
            #58 off=13
            (__fch_sign.130 var=78) load (__M_DMw.4 __adr_sign.58 sign.92)  <141>;
            (__fch_sign.314 var=79) bool__ne___sint___sint (__fch_sign.130 __ct_0.158)  <363>;
            (__ct_3286237184.330 var=159) const ()  <402>;
            (__trgt.548 var=302) const ()  <799>;
            () void_br_bool_t13s_s2 (__fch_sign.314 __trgt.548)  <800>;
            (__either.549 var=301) undefined ()  <801>;
            if {
                {
                    () if_expr (__either.549)  <164>;
                } #13
                {
                } #14 off=15
                {
                    (__trgt.550 var=303) const ()  <802>;
                    () void_j_t21s_s2 (__trgt.550)  <803>;
                } #15 off=14
                {
                    (__tmp_high.329 var=298) merge (__ct_3286237184.330 __ct_0.158)  <401>;
                } #16
            } #12
            #17 off=16
            (__ct_12t0.61 var=47) const ()  <72>;
            (__adr_uZ.63 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_12t0.61)  <74>;
            (__M_DMw.162 var=5 uZ.163 var=21) store (__ct_0.158 __adr_uZ.63 uZ.20)  <174>;
            (__M_DMw.168 var=5 uZ.169 var=21) store (__tmp_high.329 __adr_uZ.353 uZ.163)  <179>;
            (__ct_16t0.352 var=170) const ()  <425>;
            (__adr_uZ.353 var=171) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_16t0.352)  <427>;
            call {
                () chess_separator_scheduler ()  <180>;
            } #18 off=17
            #19 off=18
            (__fch_uZ.174 var=96) load (__M_DMw.4 __adr_uZ.63 uZ.169)  <185>;
            (__fch_uZ.179 var=99) load (__M_DMw.4 __adr_uZ.354 uZ.169)  <190>;
            (__adr_uZ.354 var=172) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_16t0.352)  <428>;
        } #10
        {
            #63 off=5
            (__fch_sign.181 var=100) load (__M_DMw.4 __adr_sign.58 sign.92)  <193>;
            (__fch_sign.318 var=101) bool__ne___sint___sint (__fch_sign.181 __ct_0.158)  <370>;
            (__trgt.551 var=304) const ()  <804>;
            () void_br_bool_t13s_s2 (__fch_sign.318 __trgt.551)  <805>;
            (__either.552 var=301) undefined ()  <806>;
            if {
                {
                    () if_expr (__either.552)  <216>;
                } #24
                {
                    (__fch_a_low.207 var=105) load (__M_DMw.4 __adr_a.53 a_low.72)  <220>;
                    (__fch_a_high.212 var=108) load (__M_DMw.4 __adr_a.356 a_high.78)  <225>;
                    (__adr_a.356 var=174) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.355)  <431>;
                    (__apl_r_low.407 var=221) __uint_sub___uint___uint (__ct_0.158 __fch_a_low.207)  <514>;
                    (__apl_r_high.408 var=222) __uint_sub___uint___uint (__ct_0.158 __fch_a_high.212)  <515>;
                    (__apl_r_high.411 var=222) __uint__mi___uint___uint (__apl_r_high.408 __tmp.494)  <518>;
                    (__tmp.494 var=278) __sint_sne0___sint (__fch_a_low.207)  <689>;
                } #173 off=7
                {
                    (__fch_a_low.217 var=112) load (__M_DMw.4 __adr_a.53 a_low.72)  <230>;
                    (__fch_a_high.222 var=115) load (__M_DMw.4 __adr_a.357 a_high.78)  <235>;
                    (__adr_a.357 var=175) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.355)  <432>;
                    (__trgt.553 var=305) const ()  <807>;
                    () void_j_t21s_s2 (__trgt.553)  <808>;
                } #26 off=6
                {
                    (__tmp_low.333 var=118) merge (__apl_r_low.407 __fch_a_low.217)  <406>;
                    (__tmp_high.336 var=119) merge (__apl_r_high.411 __fch_a_high.222)  <409>;
                } #27
            } #23
            #28 off=8
            (__ct_20t0.66 var=51) const ()  <77>;
            (__adr_absA.68 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_20t0.66)  <79>;
            (__M_DMw.227 var=5 absA_low.228 var=25) store (__tmp_low.333 __adr_absA.68 absA_low.24)  <240>;
            (__M_DMw.233 var=5 absA_high.234 var=26) store (__tmp_high.336 __adr_absA.359 absA_high.25)  <245>;
            (__ct_24t0.358 var=176) const ()  <433>;
            (__adr_absA.359 var=177) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_24t0.358)  <435>;
            call {
                () chess_separator_scheduler ()  <246>;
            } #29 off=9
            #30 off=10
            (__fch_sign.235 var=122) load (__M_DMw.4 __adr_sign.58 sign.92)  <247>;
            (__ct_1084.239 var=125) const ()  <251>;
            (__fch_absA_low.243 var=128) load (__M_DMw.4 __adr_absA.68 absA_low.228)  <255>;
            (__fch_absA_high.248 var=131) load (__M_DMw.4 __adr_absA.360 absA_high.234)  <260>;
            (softfloat_normRoundPackToF64.256 var=136) const ()  <268>;
            (__link.257 var=137) w32_jal_t21s_s2 (softfloat_normRoundPackToF64.256)  <269>;
            (__adr_absA.360 var=178) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_24t0.358)  <436>;
            call {
                (__tmp.238 var=124 stl=X off=12) assign (__fch_sign.235)  <250>;
                (__ct.241 var=126 stl=X off=13) assign (__ct_1084.239)  <253>;
                (__record_low.251 var=132 stl=X off=14) assign (__fch_absA_low.243)  <263>;
                (__record_high.253 var=133 stl=X off=15) assign (__fch_absA_high.248)  <265>;
                (__link.258 var=137 stl=X off=1) assign (__link.257)  <270>;
                (__tmp.260 var=139 stl=X off=10 __tmp.264 var=140 stl=X off=11) Fsoftfloat_normRoundPackToF64 (__link.258 __tmp.238 __ct.241 __record_low.251 __record_high.253)  <271>;
                (__tmp.261 var=139) deassign (__tmp.260)  <273>;
                (__tmp.265 var=140) deassign (__tmp.264)  <276>;
            } #31 off=11
            #298 off=12
            (__trgt.556 var=307) const ()  <812>;
            () void_j_t21s_s2 (__trgt.556)  <813>;
        } #21
        {
            (uZ.268 var=21) merge (uZ.169 uZ.20)  <280>;
            (absA_low.269 var=25) merge (absA_low.24 absA_low.228)  <281>;
            (absA_high.270 var=26) merge (absA_high.25 absA_high.234)  <282>;
            (__rt_low.339 var=30) merge (__fch_uZ.174 __tmp.261)  <412>;
            (__rt_high.342 var=31) merge (__fch_uZ.179 __tmp.265)  <415>;
        } #33
    } #8
    #35 off=19 nxt=-2
    (__rd___sp.272 var=27) rd_res_reg (__R_SP.11 __sp.49)  <284>;
    (__ct_28s0.273 var=141) const ()  <285>;
    (__tmp.275 var=143) __Pvoid__pl___Pvoid___sint (__rd___sp.272 __ct_28s0.273)  <287>;
    (__R_SP.276 var=12 __sp.277 var=18) wr_res_reg (__tmp.275 __sp.49)  <288>;
    () void___rts_jr_w32 (__la.28)  <289>;
    (__rt_low.279 var=30 stl=X off=10) assign (__rt_low.339)  <291>;
    () out (__rt_low.279)  <292>;
    (__rt_high.281 var=31 stl=X off=11) assign (__rt_high.342)  <294>;
    () out (__rt_high.281)  <295>;
    () sink (__sp.277)  <303>;
    () sink (sign.92)  <305>;
    () sink (uZ.268)  <306>;
    () sink (a_low.72)  <308>;
    () sink (a_high.78)  <309>;
    () sink (absA_low.269)  <310>;
    () sink (absA_high.270)  <311>;
} #0
0 : 'SoftFloat-3e/source/i64_to_f64.c';
----------
0 : (0,43:0,0);
3 : (0,43:22,0);
4 : (0,43:22,0);
6 : (0,49:9,6);
8 : (0,50:4,6);
10 : (0,50:41,7);
12 : (0,51:21,7);
14 : (0,51:24,8);
15 : (0,51:21,9);
17 : (0,51:14,12);
18 : (0,51:14,12);
19 : (0,52:8,13);
21 : (0,52:8,15);
23 : (0,54:16,16);
26 : (0,54:39,18);
28 : (0,54:9,21);
29 : (0,54:9,21);
30 : (0,55:54,21);
31 : (0,55:11,21);
35 : (0,55:4,25);
58 : (0,51:16,7);
63 : (0,54:11,16);
128 : (0,50:9,6);
173 : (0,54:18,17);
277 : (0,49:4,5);
----------
55 : (0,43:10,0);
56 : (0,43:10,0);
58 : (0,43:10,0);
59 : (0,43:10,0);
61 : (0,43:30,0);
62 : (0,43:30,0);
64 : (0,43:30,0);
66 : (0,45:9,0);
67 : (0,45:9,0);
69 : (0,45:9,0);
71 : (0,46:19,0);
72 : (0,46:19,0);
74 : (0,46:19,0);
76 : (0,47:18,0);
77 : (0,47:18,0);
79 : (0,47:18,0);
82 : (0,43:22,0);
87 : (0,43:22,0);
88 : (0,43:22,0);
95 : (0,49:12,5);
101 : (0,49:4,5);
102 : (0,49:9,6);
104 : (0,50:12,6);
109 : (0,50:12,6);
140 : (0,50:4,6);
141 : (0,51:16,7);
164 : (0,51:21,7);
170 : (0,51:10,0);
174 : (0,51:10,11);
179 : (0,51:10,11);
180 : (0,51:14,12);
185 : (0,52:17,12);
190 : (0,52:17,12);
193 : (0,54:11,16);
216 : (0,54:16,16);
220 : (0,54:35,17);
225 : (0,54:35,17);
230 : (0,54:55,18);
235 : (0,54:55,18);
240 : (0,54:4,20);
245 : (0,54:4,20);
246 : (0,54:9,21);
247 : (0,55:41,21);
250 : (0,55:41,0);
251 : (0,55:45,0);
253 : (0,55:45,0);
255 : (0,55:54,21);
260 : (0,55:54,21);
263 : (0,55:54,0);
265 : (0,55:54,0);
269 : (0,55:11,21);
270 : (0,55:11,0);
271 : (0,55:11,21);
280 : (0,50:4,24);
281 : (0,50:4,24);
282 : (0,50:4,24);
284 : (0,55:4,0);
285 : (0,55:4,0);
287 : (0,55:4,0);
288 : (0,55:4,25);
289 : (0,55:4,25);
291 : (0,55:4,0);
294 : (0,55:4,0);
363 : (0,51:16,7);
370 : (0,54:11,16);
402 : (0,51:24,0);
425 : (0,46:19,0);
429 : (0,43:30,0);
433 : (0,47:18,0);
489 : (0,50:14,6);
514 : (0,54:18,17);
515 : (0,54:18,17);
518 : (0,54:18,17);
576 : (0,50:14,0);
599 : (0,50:9,6);
600 : (0,50:9,6);
605 : (0,49:4,5);
689 : (0,54:18,17);
800 : (0,51:21,7);
805 : (0,54:16,16);
810 : (0,50:4,6);

