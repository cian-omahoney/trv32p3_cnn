
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:59:05 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f32_to_ui64_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint_fast64_t f32_to_ui64_r_minMag(float32_t, bool)
Ff32_to_ui64_r_minMag : user_defined, called {
    fnm : "f32_to_ui64_r_minMag" 'unsigned long long f32_to_ui64_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=48 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_to_ui64_r_minMag typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : exact typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   20 : a typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=float32_t_DMb
   21 : uA typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   22 : uiA typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   23 : exp typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   24 : sig typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   25 : shiftDist typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   26 : sign typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   27 : sig64 typ=w08 val=32t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   28 : z typ=w08 val=40t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   29 : sig64_low typ=w08 bnd=B stl=DMb
   30 : sig64_high typ=w08 bnd=B stl=DMb
   31 : z_low typ=w08 bnd=B stl=DMb
   32 : z_high typ=w08 bnd=B stl=DMb
   33 : __rd___sp typ=w32 bnd=m
   34 : __la typ=w32 bnd=p tref=w32__
   36 : __rt_low typ=w32 bnd=m tref=__uint__
   37 : __rt_high typ=w32 bnd=m tref=__uint__
   38 : __arg_a typ=w32 bnd=p tref=float32_t___1
   39 : __arg_exact typ=w32 bnd=p tref=bool__
   41 : __ct_m48S0 typ=w32 val=-48S0 bnd=m
   43 : __tmp typ=w32 bnd=m
   46 : __ct_0t0 typ=w32 val=0t0 bnd=m
   48 : __adr_exact typ=w32 bnd=m adro=19
   50 : __ct_4t0 typ=w32 val=4t0 bnd=m
   52 : __adr_a typ=w32 bnd=m adro=20
   54 : __ct_8t0 typ=w32 val=8t0 bnd=m
   56 : __adr_uA typ=w32 bnd=m adro=21
   58 : __ct_12t0 typ=w32 val=12t0 bnd=m
   60 : __adr_uiA typ=w32 bnd=m adro=22
   62 : __ct_16t0 typ=w32 val=16t0 bnd=m
   64 : __adr_exp typ=w32 bnd=m adro=23
   66 : __ct_20t0 typ=w32 val=20t0 bnd=m
   68 : __adr_sig typ=w32 bnd=m adro=24
   70 : __ct_24t0 typ=w32 val=24t0 bnd=m
   72 : __adr_shiftDist typ=w32 bnd=m adro=25
   74 : __ct_28t0 typ=w32 val=28t0 bnd=m
   76 : __adr_sign typ=w32 bnd=m adro=26
   78 : __ct_32t0 typ=w32 val=32t0 bnd=m
   80 : __adr_sig64 typ=w32 bnd=m adro=27
   82 : __ct_40t0 typ=w32 val=40t0 bnd=m
   84 : __adr_z typ=w32 bnd=m adro=28
   89 : __fch_a typ=w32 bnd=m
   90 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   96 : __fch_uA typ=w32 bnd=m
   97 : __fch_uiA typ=w32 bnd=m
   98 : __ct_23 typ=w32 val=23f bnd=m
  100 : __tmp typ=w32 bnd=m
  102 : __ct_255 typ=w32 val=255f bnd=m
  104 : __tmp typ=w32 bnd=m
  105 : __fch_uiA typ=w32 bnd=m
  106 : __ct_8388607 typ=w32 val=8388607f bnd=m
  108 : __tmp typ=w32 bnd=m
  109 : __ct_190 typ=w32 val=190f bnd=m
  111 : __fch_exp typ=w32 bnd=m
  112 : __tmp typ=w32 bnd=m
  113 : __ct_64 typ=w32 val=64f bnd=m
  115 : __fch_shiftDist typ=w32 bnd=m
  116 : __tmp typ=bool bnd=m
  119 : __fch_uiA typ=w32 bnd=m
  120 : __ct_31 typ=w32 val=31f bnd=m
  122 : __tmp typ=w32 bnd=m
  126 : __tmp typ=w32 bnd=m
  127 : __fch_sign typ=w32 bnd=m
  128 : __fch_sign typ=bool bnd=m
  131 : __fch_shiftDist typ=w32 bnd=m
  134 : __tmp typ=bool bnd=m
  135 : __tmp typ=bool bnd=m
  136 : __fch_exp typ=w32 bnd=m
  139 : __tmp typ=bool bnd=m
  140 : __fch_sig typ=w32 bnd=m
  143 : __tmp typ=bool bnd=m
  146 : __tmp typ=bool bnd=m
  149 : __fch_sign typ=w32 bnd=m
  150 : __fch_sign typ=bool bnd=m
  157 : __fch_sig typ=w32 bnd=m
  158 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
  160 : __tmp typ=w32 bnd=m
  161 : __fch_sig typ=w32 bnd=m
  174 : __fch_sig64_high typ=w32 bnd=m
  175 : __fch_shiftDist typ=w32 bnd=m
  182 : __fch_z_low typ=w32 bnd=m
  185 : __fch_z_high typ=w32 bnd=m
  187 : __ct_48s0 typ=w32 val=48s0 bnd=m
  189 : __tmp typ=w32 bnd=m
  204 : __ct_4294967295 typ=w32 val=-1f bnd=m
  209 : __ct_36t0 typ=w32 val=36t0 bnd=m
  210 : __adr_sig64 typ=w32 bnd=m adro=27
  211 : __adr_sig64 typ=w32 bnd=m adro=27
  212 : __ct_44t0 typ=w32 val=44t0 bnd=m
  213 : __adr_z typ=w32 bnd=m adro=28
  214 : __adr_z typ=w32 bnd=m adro=28
  235 : __apl_r_high typ=w32 bnd=m tref=__uint__
  237 : __ct_m32 typ=w32 val=-32f bnd=m
  244 : __rt_low typ=w32 bnd=m tref=__uint__
  245 : __rt_high typ=w32 bnd=m tref=__uint__
  249 : __apl_ff typ=w32 bnd=m tref=__sint__
  250 : __apl_carries typ=w32 bnd=m tref=__uint__
  252 : __tmp typ=bool bnd=m
  253 : __tmp typ=bool bnd=m
  254 : __tmp typ=w32 bnd=m
  255 : __tmp typ=w32 bnd=m
  256 : __apl_r_low typ=w32 bnd=m tref=__uint__
  257 : __apl_r_high typ=w32 bnd=m tref=__uint__
  260 : __tmp_low typ=w32 bnd=m
  262 : __tmp_high typ=w32 bnd=m
  268 : __ct_8 typ=w32 val=8f bnd=m
  286 : __true typ=bool val=1f bnd=m
  287 : __false typ=bool val=0f bnd=m
  288 : __either typ=bool bnd=m
  289 : __trgt typ=t13s_s2 val=0j bnd=m
  290 : __trgt typ=t13s_s2 val=0j bnd=m
  291 : __trgt typ=t13s_s2 val=0j bnd=m
  292 : __trgt typ=t21s_s2 val=0j bnd=m
  293 : __trgt typ=t13s_s2 val=0j bnd=m
  294 : __trgt typ=t21s_s2 val=0j bnd=m
  295 : __trgt typ=t13s_s2 val=0j bnd=m
  296 : __trgt typ=t21s_s2 val=0j bnd=m
  297 : __trgt typ=t13s_s2 val=0j bnd=m
  298 : __trgt typ=t21s_s2 val=0j bnd=m
  299 : __trgt typ=t13s_s2 val=0j bnd=m
  300 : __trgt typ=t21s_s2 val=0j bnd=m
  301 : __trgt typ=t13s_s2 val=0j bnd=m
  302 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_to_ui64_r_minMag {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (exact.18 var=19) source ()  <29>;
    (a.19 var=20) source ()  <30>;
    (uA.20 var=21) source ()  <31>;
    (uiA.21 var=22) source ()  <32>;
    (exp.22 var=23) source ()  <33>;
    (sig.23 var=24) source ()  <34>;
    (shiftDist.24 var=25) source ()  <35>;
    (sign.25 var=26) source ()  <36>;
    (sig64_low.28 var=29) source ()  <39>;
    (sig64_high.29 var=30) source ()  <40>;
    (z_low.30 var=31) source ()  <41>;
    (z_high.31 var=32) source ()  <42>;
    (__la.33 var=34 stl=X off=1) inp ()  <44>;
    (__la.34 var=34) deassign (__la.33)  <45>;
    (__arg_a.41 var=38 stl=X off=12) inp ()  <52>;
    (__arg_a.42 var=38) deassign (__arg_a.41)  <53>;
    (__arg_exact.44 var=39 stl=X off=13) inp ()  <55>;
    (__arg_exact.45 var=39) deassign (__arg_exact.44)  <56>;
    (__rd___sp.47 var=33) rd_res_reg (__R_SP.11 __sp.17)  <58>;
    (__ct_m48S0.48 var=41) const ()  <59>;
    (__tmp.50 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.47 __ct_m48S0.48)  <61>;
    (__R_SP.51 var=12 __sp.52 var=18) wr_res_reg (__tmp.50 __sp.17)  <62>;
    (__rd___sp.54 var=33) rd_res_reg (__R_SP.11 __sp.52)  <65>;
    (__ct_0t0.55 var=46) const ()  <66>;
    (__adr_exact.57 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.54 __ct_0t0.55)  <68>;
    (__rd___sp.59 var=33) rd_res_reg (__R_SP.11 __sp.52)  <70>;
    (__rd___sp.64 var=33) rd_res_reg (__R_SP.11 __sp.52)  <75>;
    (__rd___sp.69 var=33) rd_res_reg (__R_SP.11 __sp.52)  <80>;
    (__rd___sp.74 var=33) rd_res_reg (__R_SP.11 __sp.52)  <85>;
    (__rd___sp.79 var=33) rd_res_reg (__R_SP.11 __sp.52)  <90>;
    (__rd___sp.84 var=33) rd_res_reg (__R_SP.11 __sp.52)  <95>;
    (__rd___sp.89 var=33) rd_res_reg (__R_SP.11 __sp.52)  <100>;
    (__rd___sp.94 var=33) rd_res_reg (__R_SP.11 __sp.52)  <105>;
    (__rd___sp.99 var=33) rd_res_reg (__R_SP.11 __sp.52)  <110>;
    (__M_DMw.105 var=5 exact.106 var=19) store (__arg_exact.45 __adr_exact.57 exact.18)  <116>;
    call {
        () chess_separator_scheduler ()  <117>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.60 var=50) const ()  <71>;
    (__adr_a.62 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.59 __ct_4t0.60)  <73>;
    (__M_DMw.107 var=5 a.108 var=20) store (__arg_a.42 __adr_a.62 a.19)  <118>;
    call {
        () chess_separator_scheduler ()  <123>;
    } #8 off=3
    #9 off=4
    (__ct_8t0.65 var=54) const ()  <76>;
    (__adr_uA.67 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.64 __ct_8t0.65)  <78>;
    (__fch_a.112 var=89) load (__M_DMw.4 __adr_a.62 a.108)  <124>;
    (__M_DMw.116 var=5 uA.117 var=21) store (__fch_a.112 __adr_uA.67 uA.20)  <128>;
    call {
        () chess_separator_scheduler ()  <129>;
    } #10 off=5
    #11 off=6
    (__ct_12t0.70 var=58) const ()  <81>;
    (__adr_uiA.72 var=60) __Pvoid__pl___Pvoid___sint (__rd___sp.69 __ct_12t0.70)  <83>;
    (__fch_uA.121 var=96) load (__M_DMw.4 __adr_uA.67 uA.117)  <133>;
    (__M_DMw.122 var=5 uiA.123 var=22) store (__fch_uA.121 __adr_uiA.72 uiA.21)  <134>;
    call {
        () chess_separator_scheduler ()  <135>;
    } #12 off=7
    #13 off=8
    (__ct_16t0.75 var=62) const ()  <86>;
    (__adr_exp.77 var=64) __Pvoid__pl___Pvoid___sint (__rd___sp.74 __ct_16t0.75)  <88>;
    (__fch_uiA.124 var=97) load (__M_DMw.4 __adr_uiA.72 uiA.123)  <136>;
    (__ct_23.125 var=98) const ()  <137>;
    (__tmp.127 var=100) __uint__rs___uint___sint (__fch_uiA.124 __ct_23.125)  <139>;
    (__ct_255.129 var=102) const ()  <141>;
    (__tmp.131 var=104) __sint__ad___sint___sint (__tmp.127 __ct_255.129)  <143>;
    (__M_DMw.132 var=5 exp.133 var=23) store (__tmp.131 __adr_exp.77 exp.22)  <144>;
    call {
        () chess_separator_scheduler ()  <145>;
    } #14 off=9
    #15 off=10
    (__ct_20t0.80 var=66) const ()  <91>;
    (__adr_sig.82 var=68) __Pvoid__pl___Pvoid___sint (__rd___sp.79 __ct_20t0.80)  <93>;
    (__fch_uiA.134 var=105) load (__M_DMw.4 __adr_uiA.72 uiA.123)  <146>;
    (__ct_8388607.135 var=106) const ()  <147>;
    (__tmp.137 var=108) __uint__ad___uint___uint (__fch_uiA.134 __ct_8388607.135)  <149>;
    (__M_DMw.138 var=5 sig.139 var=24) store (__tmp.137 __adr_sig.82 sig.23)  <150>;
    call {
        () chess_separator_scheduler ()  <151>;
    } #16 off=11
    #17 off=12
    (__ct_24t0.85 var=70) const ()  <96>;
    (__adr_shiftDist.87 var=72) __Pvoid__pl___Pvoid___sint (__rd___sp.84 __ct_24t0.85)  <98>;
    (__ct_190.140 var=109) const ()  <152>;
    (__fch_exp.142 var=111) load (__M_DMw.4 __adr_exp.77 exp.133)  <154>;
    (__tmp.143 var=112) __sint__mi___sint___sint (__ct_190.140 __fch_exp.142)  <155>;
    (__M_DMw.144 var=5 shiftDist.145 var=25) store (__tmp.143 __adr_shiftDist.87 shiftDist.24)  <156>;
    call {
        () chess_separator_scheduler ()  <157>;
    } #18 off=13
    #19 off=14
    (__ct_0.113 var=90) const ()  <125>;
    (__ct_64.146 var=113) const ()  <158>;
    (__fch_shiftDist.148 var=115) load (__M_DMw.4 __adr_shiftDist.87 shiftDist.145)  <160>;
    (__tmp.149 var=116) bool__ge___sint___sint (__fch_shiftDist.148 __ct_64.146)  <161>;
    (__trgt.662 var=301) const ()  <998>;
    () void_br_bool_t13s_s2 (__tmp.149 __trgt.662)  <999>;
    (__either.663 var=288) undefined ()  <1000>;
    if {
        {
            () if_expr (__either.663)  <196>;
        } #21
        {
        } #24 off=41
        {
            #75 off=15
            (__ct_28t0.90 var=74) const ()  <101>;
            (__adr_sign.92 var=76) __Pvoid__pl___Pvoid___sint (__rd___sp.89 __ct_28t0.90)  <103>;
            (__fch_uiA.186 var=119) load (__M_DMw.4 __adr_uiA.72 uiA.123)  <200>;
            (__ct_31.187 var=120) const ()  <201>;
            (__tmp.189 var=122) __uint__rs___uint___sint (__fch_uiA.186 __ct_31.187)  <203>;
            (__M_DMw.194 var=5 sign.195 var=26) store (__tmp.557 __adr_sign.92 sign.25)  <208>;
            (__tmp.557 var=126) __sint_sne0___sint (__tmp.189)  <667>;
            call {
                () chess_separator_scheduler ()  <209>;
            } #27 off=16
            #89 off=17
            (__fch_sign.196 var=127) load (__M_DMw.4 __adr_sign.92 sign.195)  <210>;
            (__fch_sign.510 var=128) bool__ne___sint___sint (__fch_sign.196 __ct_0.113)  <583>;
            (__trgt.641 var=289) const ()  <965>;
            () void_br_bool_t13s_s2 (__fch_sign.510 __trgt.641)  <966>;
            (__either.642 var=288) undefined ()  <967>;
            if {
                {
                    () if_expr (__either.642)  <246>;
                } #30
                {
                    (__true.658 var=286) const ()  <992>;
                } #31
                {
                    (__fch_shiftDist.234 var=131) load (__M_DMw.4 __adr_shiftDist.87 shiftDist.145)  <249>;
                    (__tmp.237 var=134) bool__lt___sint___sint (__fch_shiftDist.234 __ct_0.113)  <252>;
                    (__trgt.659 var=299) const ()  <993>;
                    () void_br_bool_t13s_s2 (__tmp.237 __trgt.659)  <994>;
                    (__either.660 var=288) undefined ()  <995>;
                } #32 off=18
                {
                    (__tmp.238 var=135) merge (__true.658 __either.660)  <253>;
                } #33
            } #29
            if {
                {
                    () if_expr (__tmp.238)  <288>;
                } #36
                {
                    #38 off=32
                    (__fch_exp.273 var=136) load (__M_DMw.4 __adr_exp.77 exp.133)  <289>;
                    (__ct_4294967295.527 var=204) const ()  <633>;
                    (__tmp.638 var=139) bool__ne___sint___sint (__fch_exp.273 __ct_255.129)  <935>;
                    (__trgt.643 var=290) const ()  <968>;
                    () void_br_bool_t13s_s2 (__tmp.638 __trgt.643)  <969>;
                    (__either.644 var=288) undefined ()  <970>;
                    if {
                        {
                            () if_expr (__either.644)  <327>;
                        } #40
                        {
                            (__false.648 var=287) const ()  <976>;
                        } #42
                        {
                            (__fch_sig.311 var=140) load (__M_DMw.4 __adr_sig.82 sig.139)  <328>;
                            (__tmp.314 var=143) bool__ne___uint___uint (__fch_sig.311 __ct_0.113)  <331>;
                            (__trgt.649 var=293) const ()  <977>;
                            () void_br_bool_t13s_s2 (__tmp.314 __trgt.649)  <978>;
                            (__either.650 var=288) undefined ()  <979>;
                        } #41 off=33
                        {
                            (__tmp.317 var=146) merge (__false.648 __either.650)  <334>;
                        } #43
                    } #39
                    if {
                        {
                            () if_expr (__tmp.317)  <369>;
                        } #46
                        {
                        } #47 off=38
                        {
                            #94 off=34
                            (__fch_sign.354 var=149) load (__M_DMw.4 __adr_sign.92 sign.195)  <372>;
                            (__fch_sign.514 var=150) bool__ne___sint___sint (__fch_sign.354 __ct_0.113)  <590>;
                            (__trgt.645 var=291) const ()  <971>;
                            () void_br_bool_t13s_s2 (__fch_sign.514 __trgt.645)  <972>;
                            (__either.646 var=288) undefined ()  <973>;
                            if {
                                {
                                    () if_expr (__either.646)  <408>;
                                } #51
                                {
                                } #52 off=36
                                {
                                    (__trgt.647 var=292) const ()  <974>;
                                    () void_j_t21s_s2 (__trgt.647)  <975>;
                                } #53 off=35
                                {
                                    (__rt_low.530 var=36) merge (__ct_0.113 __ct_4294967295.527)  <637>;
                                } #54
                            } #50
                            #176 off=37
                            (__trgt.651 var=294) const ()  <980>;
                            () void_j_t21s_s2 (__trgt.651)  <981>;
                        } #48
                        {
                            (__rt_low.526 var=36) merge (__ct_4294967295.527 __rt_low.530)  <632>;
                        } #55
                    } #45
                } #37
                {
                    #58 off=19
                    (__fch_sig.396 var=157) load (__M_DMw.4 __adr_sig.82 sig.139)  <416>;
                    (__ct_8388608.397 var=158) const ()  <417>;
                    (__tmp.399 var=160) __uint__or___uint___uint (__fch_sig.396 __ct_8388608.397)  <419>;
                    (__M_DMw.400 var=5 sig.401 var=24) store (__tmp.399 __adr_sig.82 sig.139)  <420>;
                    call {
                        () chess_separator_scheduler ()  <421>;
                    } #59 off=20
                    #168 off=21
                    (__ct_32t0.95 var=78) const ()  <106>;
                    (__adr_sig64.97 var=80) __Pvoid__pl___Pvoid___sint (__rd___sp.94 __ct_32t0.95)  <108>;
                    (__fch_sig.402 var=161) load (__M_DMw.4 __adr_sig.82 sig.401)  <422>;
                    (__M_DMw.408 var=5 sig64_low.409 var=29) store (__ct_0.113 __adr_sig64.97 sig64_low.28)  <428>;
                    (__M_DMw.414 var=5 sig64_high.415 var=30) store (__apl_r_high.575 __adr_sig64.548 sig64_high.29)  <433>;
                    (__ct_36t0.547 var=209) const ()  <654>;
                    (__adr_sig64.548 var=210) __Pvoid__pl___Pvoid___sint (__rd___sp.94 __ct_36t0.547)  <656>;
                    (__apl_r_high.575 var=235) __uint__ls___uint___sint (__fch_sig.402 __ct_8.619)  <717>;
                    (__ct_8.619 var=268) const ()  <798>;
                    call {
                        () chess_separator_scheduler ()  <434>;
                    } #61 off=22
                    #148 off=23
                    (__fch_sig64_high.422 var=174) load (__M_DMw.4 __adr_sig64.549 sig64_high.415)  <441>;
                    (__fch_shiftDist.424 var=175) load (__M_DMw.4 __adr_shiftDist.87 shiftDist.145)  <443>;
                    (__adr_sig64.549 var=211) __Pvoid__pl___Pvoid___sint (__rd___sp.94 __ct_36t0.547)  <657>;
                    (__tmp.593 var=252) bool__eq___sint___sint (__fch_shiftDist.424 __ct_0.113)  <739>;
                    (__trgt.655 var=297) const ()  <987>;
                    () void_br_bool_t13s_s2 (__tmp.593 __trgt.655)  <988>;
                    (__either.656 var=288) undefined ()  <989>;
                    if {
                        {
                            () if_expr (__either.656)  <742>;
                        } #150
                        {
                        } #151 off=28
                        {
                            #153 off=24
                            (__ct_m32.566 var=237) const ()  <706>;
                            (__apl_ff.596 var=249) __sint__pl___sint___sint (__fch_shiftDist.424 __ct_m32.566)  <743>;
                            (__tmp.597 var=253) bool__lt___sint___sint (__apl_ff.596 __ct_0.113)  <744>;
                            (__trgt.652 var=295) const ()  <982>;
                            () void_br_bool_t13s_s2 (__tmp.597 __trgt.652)  <983>;
                            (__either.653 var=288) undefined ()  <984>;
                            if {
                                {
                                    () if_expr (__either.653)  <745>;
                                } #155
                                {
                                    (__tmp.598 var=254) __sint__mi___sint___sint (__ct_0.113 __apl_ff.596)  <746>;
                                    (__apl_carries.599 var=250) __uint__ls___uint___sint (__fch_sig64_high.422 __tmp.598)  <747>;
                                    (__tmp.600 var=255) __uint__rs___uint___sint (__ct_0.113 __fch_shiftDist.424)  <748>;
                                    (__apl_r_low.601 var=256) __uint__or___uint___uint (__tmp.600 __apl_carries.599)  <749>;
                                    (__apl_r_high.602 var=257) __uint__rs___uint___sint (__fch_sig64_high.422 __fch_shiftDist.424)  <750>;
                                } #156 off=26
                                {
                                    (__apl_r_low.603 var=256) __uint__rs___uint___sint (__fch_sig64_high.422 __apl_ff.596)  <751>;
                                    (__trgt.654 var=296) const ()  <985>;
                                    () void_j_t21s_s2 (__trgt.654)  <986>;
                                } #157 off=25
                                {
                                    (__rt_low.604 var=244) merge (__apl_r_low.601 __apl_r_low.603)  <752>;
                                    (__rt_high.605 var=245) merge (__apl_r_high.602 __ct_0.113)  <753>;
                                } #158
                            } #154
                            #178 off=27
                            (__trgt.657 var=298) const ()  <990>;
                            () void_j_t21s_s2 (__trgt.657)  <991>;
                        } #152
                        {
                            (__tmp_low.606 var=260) merge (__ct_0.113 __rt_low.604)  <754>;
                            (__tmp_high.607 var=262) merge (__fch_sig64_high.422 __rt_high.605)  <755>;
                        } #159
                    } #149
                    #145 off=29
                    (__ct_40t0.100 var=82) const ()  <111>;
                    (__adr_z.102 var=84) __Pvoid__pl___Pvoid___sint (__rd___sp.99 __ct_40t0.100)  <113>;
                    (__M_DMw.427 var=5 z_low.428 var=31) store (__tmp_low.606 __adr_z.102 z_low.30)  <446>;
                    (__M_DMw.433 var=5 z_high.434 var=32) store (__tmp_high.607 __adr_z.551 z_high.31)  <451>;
                    (__ct_44t0.550 var=212) const ()  <658>;
                    (__adr_z.551 var=213) __Pvoid__pl___Pvoid___sint (__rd___sp.99 __ct_44t0.550)  <660>;
                    call {
                        () chess_separator_scheduler ()  <452>;
                    } #63 off=30
                    #64 off=31
                    (__fch_z_low.436 var=182) load (__M_DMw.4 __adr_z.102 z_low.428)  <454>;
                    (__fch_z_high.441 var=185) load (__M_DMw.4 __adr_z.552 z_high.434)  <459>;
                    (__adr_z.552 var=214) __Pvoid__pl___Pvoid___sint (__rd___sp.99 __ct_44t0.550)  <661>;
                    (__trgt.661 var=300) const ()  <996>;
                    () void_j_t21s_s2 (__trgt.661)  <997>;
                } #57
                {
                    (sig.443 var=24) merge (sig.139 sig.401)  <462>;
                    (sig64_low.444 var=29) merge (sig64_low.28 sig64_low.409)  <463>;
                    (sig64_high.445 var=30) merge (sig64_high.29 sig64_high.415)  <464>;
                    (z_low.446 var=31) merge (z_low.30 z_low.428)  <465>;
                    (z_high.447 var=32) merge (z_high.31 z_high.434)  <466>;
                    (__rt_low.523 var=36) merge (__rt_low.526 __fch_z_low.436)  <629>;
                    (__rt_high.536 var=37) merge (__rt_low.526 __fch_z_high.441)  <643>;
                } #66
            } #35
            #179 off=40
            (__trgt.664 var=302) const ()  <1001>;
            () void_j_t21s_s2 (__trgt.664)  <1002>;
        } #25
        {
            (sig.449 var=24) merge (sig.139 sig.443)  <468>;
            (sign.450 var=26) merge (sign.25 sign.195)  <469>;
            (sig64_low.451 var=29) merge (sig64_low.28 sig64_low.444)  <470>;
            (sig64_high.452 var=30) merge (sig64_high.29 sig64_high.445)  <471>;
            (z_low.453 var=31) merge (z_low.30 z_low.446)  <472>;
            (z_high.454 var=32) merge (z_high.31 z_high.447)  <473>;
            (__rt_low.520 var=36) merge (__ct_0.113 __rt_low.523)  <626>;
            (__rt_high.533 var=37) merge (__ct_0.113 __rt_high.536)  <640>;
        } #67
    } #20
    #70 off=42 nxt=-2
    (__rd___sp.457 var=33) rd_res_reg (__R_SP.11 __sp.52)  <476>;
    (__ct_48s0.458 var=187) const ()  <477>;
    (__tmp.460 var=189) __Pvoid__pl___Pvoid___sint (__rd___sp.457 __ct_48s0.458)  <479>;
    (__R_SP.461 var=12 __sp.462 var=18) wr_res_reg (__tmp.460 __sp.52)  <480>;
    () void___rts_jr_w32 (__la.34)  <481>;
    (__rt_low.464 var=36 stl=X off=10) assign (__rt_low.520)  <483>;
    () out (__rt_low.464)  <484>;
    (__rt_high.466 var=37 stl=X off=11) assign (__rt_high.533)  <486>;
    () out (__rt_high.466)  <487>;
    () sink (__sp.462)  <493>;
    () sink (exact.106)  <494>;
    () sink (a.108)  <495>;
    () sink (uA.117)  <496>;
    () sink (uiA.123)  <497>;
    () sink (exp.133)  <498>;
    () sink (sig.449)  <499>;
    () sink (shiftDist.145)  <500>;
    () sink (sign.450)  <501>;
    () sink (sig64_low.451)  <504>;
    () sink (sig64_high.452)  <505>;
    () sink (z_low.453)  <506>;
    () sink (z_high.454)  <507>;
} #0
0 : 'SoftFloat-3e/source/f32_to_ui64_r_minMag.c';
----------
0 : (0,44:0,0);
3 : (0,44:49,0);
4 : (0,44:49,0);
5 : (0,44:36,0);
8 : (0,47:4,4);
9 : (0,59:9,12);
10 : (0,59:9,12);
11 : (0,60:8,13);
12 : (0,60:8,13);
13 : (0,61:8,14);
14 : (0,61:8,14);
15 : (0,62:8,15);
16 : (0,62:8,15);
17 : (0,65:14,16);
18 : (0,65:14,16);
19 : (0,66:12,16);
20 : (0,66:4,16);
24 : (0,72:8,18);
25 : (0,72:8,20);
27 : (0,76:9,22);
29 : (0,77:14,22);
31 : (0,77:14,23);
32 : (0,77:28,24);
35 : (0,77:4,26);
37 : (0,77:35,27);
38 : (0,82:17,27);
39 : (0,82:26,27);
41 : (0,82:26,28);
42 : (0,82:26,29);
45 : (0,82:33,31);
47 : (0,82:35,32);
48 : (0,83:8,33);
50 : (0,83:8,33);
52 : (0,83:8,34);
53 : (0,83:14,35);
57 : (0,81:8,42);
58 : (0,87:8,44);
59 : (0,87:8,44);
61 : (0,88:10,45);
63 : (0,89:6,46);
64 : (0,96:4,47);
70 : (0,96:4,53);
75 : (0,76:4,21);
89 : (0,77:9,22);
94 : (0,83:3,33);
145 : (0,89:4,45);
148 : (0,89:13,45);
149 : (0,89:13,45);
150 : (0,89:13,45);
151 : (0,89:13,45);
152 : (0,89:13,45);
153 : (0,89:13,45);
154 : (0,89:13,45);
155 : (0,89:13,45);
156 : (0,89:13,45);
157 : (0,89:13,45);
158 : (0,89:13,45);
159 : (0,89:13,45);
168 : (0,88:4,44);
----------
58 : (0,44:14,0);
59 : (0,44:14,0);
61 : (0,44:14,0);
62 : (0,44:14,0);
65 : (0,44:54,0);
66 : (0,44:54,0);
68 : (0,44:54,0);
70 : (0,44:46,0);
71 : (0,44:46,0);
73 : (0,44:46,0);
75 : (0,49:19,0);
76 : (0,49:19,0);
78 : (0,49:19,0);
80 : (0,50:18,0);
81 : (0,50:18,0);
83 : (0,50:18,0);
85 : (0,51:17,0);
86 : (0,51:17,0);
88 : (0,51:17,0);
90 : (0,52:18,0);
91 : (0,52:18,0);
93 : (0,52:18,0);
95 : (0,53:17,0);
96 : (0,53:17,0);
98 : (0,53:17,0);
100 : (0,54:9,0);
101 : (0,54:9,0);
103 : (0,54:9,0);
105 : (0,55:18,0);
106 : (0,55:18,0);
108 : (0,55:18,0);
110 : (0,55:25,0);
111 : (0,55:25,0);
113 : (0,55:25,0);
116 : (0,44:49,0);
117 : (0,44:49,0);
118 : (0,44:36,0);
123 : (0,47:4,4);
124 : (0,59:11,11);
125 : (0,59:6,0);
128 : (0,59:6,11);
129 : (0,59:9,12);
133 : (0,60:12,12);
134 : (0,60:4,12);
135 : (0,60:8,13);
136 : (0,61:28,13);
137 : (0,61:34,0);
139 : (0,61:32,13);
141 : (0,61:38,0);
143 : (0,61:38,13);
144 : (0,61:4,13);
145 : (0,61:8,14);
146 : (0,62:12,14);
147 : (0,62:17,0);
149 : (0,62:17,14);
150 : (0,62:4,14);
151 : (0,62:8,15);
152 : (0,65:21,0);
154 : (0,65:23,15);
155 : (0,65:21,15);
156 : (0,65:4,15);
157 : (0,65:14,16);
158 : (0,66:12,0);
160 : (0,66:15,16);
161 : (0,66:12,16);
196 : (0,66:4,16);
200 : (0,76:32,21);
201 : (0,76:38,0);
203 : (0,76:36,21);
208 : (0,76:4,21);
209 : (0,76:9,22);
210 : (0,77:9,22);
246 : (0,77:14,22);
249 : (0,77:18,24);
252 : (0,77:28,24);
253 : (0,77:14,25);
288 : (0,77:4,26);
289 : (0,82:13,27);
327 : (0,82:26,27);
328 : (0,82:29,28);
331 : (0,82:26,28);
334 : (0,82:26,30);
369 : (0,82:33,31);
372 : (0,83:3,33);
408 : (0,83:8,33);
416 : (0,87:4,43);
417 : (0,87:8,0);
419 : (0,87:8,43);
420 : (0,87:4,43);
421 : (0,87:8,44);
422 : (0,88:28,44);
428 : (0,88:4,44);
433 : (0,88:4,44);
434 : (0,88:10,45);
441 : (0,89:8,45);
443 : (0,89:15,45);
446 : (0,89:4,45);
451 : (0,89:4,45);
452 : (0,89:6,46);
454 : (0,96:11,46);
459 : (0,96:11,46);
462 : (0,77:4,49);
463 : (0,77:4,49);
464 : (0,77:4,49);
465 : (0,77:4,49);
466 : (0,77:4,49);
468 : (0,66:4,52);
469 : (0,66:4,52);
470 : (0,66:4,52);
471 : (0,66:4,52);
472 : (0,66:4,52);
473 : (0,66:4,52);
476 : (0,96:4,0);
477 : (0,96:4,0);
479 : (0,96:4,0);
480 : (0,96:4,53);
481 : (0,96:4,53);
483 : (0,96:4,0);
486 : (0,96:4,0);
583 : (0,77:9,22);
590 : (0,83:3,33);
633 : (0,82:35,0);
654 : (0,55:18,0);
658 : (0,55:25,0);
667 : (0,76:4,21);
706 : (0,88:31,0);
717 : (0,88:31,44);
739 : (0,89:13,45);
742 : (0,89:13,45);
743 : (0,89:13,45);
744 : (0,89:13,45);
745 : (0,89:13,45);
746 : (0,89:13,45);
747 : (0,89:13,45);
748 : (0,89:13,45);
749 : (0,89:13,45);
750 : (0,89:13,45);
751 : (0,89:13,45);
752 : (0,89:13,45);
753 : (0,89:13,45);
754 : (0,89:13,45);
755 : (0,89:13,45);
798 : (0,88:31,0);
935 : (0,82:17,27);
966 : (0,77:14,22);
969 : (0,82:26,27);
972 : (0,83:8,33);
978 : (0,82:33,31);
983 : (0,89:13,45);
988 : (0,89:13,45);
994 : (0,77:4,26);
999 : (0,66:4,16);

