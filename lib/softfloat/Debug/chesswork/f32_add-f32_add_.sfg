
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:34:16 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f32_add.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=24 );
    llv : 0 0 0 0 0 ;
}
****
!!  float32_t softfloat_subMagsF32(uint_fast32_t, uint_fast32_t)
Fsoftfloat_subMagsF32 : user_defined, called {
    fnm : "softfloat_subMagsF32" 'float32_t softfloat_subMagsF32(uint_fast32_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
!!  float32_t softfloat_addMagsF32(uint_fast32_t, uint_fast32_t)
Fsoftfloat_addMagsF32 : user_defined, called {
    fnm : "softfloat_addMagsF32" 'float32_t softfloat_addMagsF32(uint_fast32_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : f32_add typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : b typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=float32_t_DMb
   20 : a typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=float32_t_DMb
   21 : uA typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   22 : uiA typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   23 : uB typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   24 : uiB typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   25 : __rd___sp typ=w32 bnd=m
   26 : __la typ=w32 bnd=p tref=w32__
   27 : __rt typ=w32 bnd=p tref=float32_t___1
   28 : __arg_a typ=w32 bnd=p tref=float32_t___1
   29 : __arg_b typ=w32 bnd=p tref=float32_t___1
   30 : __ct_m24S0 typ=w32 val=-24S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   34 : __ct_0t0 typ=w32 val=0t0 bnd=m
   36 : __adr_b typ=w32 bnd=m adro=19
   38 : __ct_4t0 typ=w32 val=4t0 bnd=m
   40 : __adr_a typ=w32 bnd=m adro=20
   42 : __ct_8t0 typ=w32 val=8t0 bnd=m
   44 : __adr_uA typ=w32 bnd=m adro=21
   46 : __ct_12t0 typ=w32 val=12t0 bnd=m
   48 : __adr_uiA typ=w32 bnd=m adro=22
   50 : __ct_16t0 typ=w32 val=16t0 bnd=m
   52 : __adr_uB typ=w32 bnd=m adro=23
   54 : __ct_20t0 typ=w32 val=20t0 bnd=m
   56 : __adr_uiB typ=w32 bnd=m adro=24
   57 : __fch_a typ=w32 bnd=m
   64 : __fch_uA typ=w32 bnd=m
   65 : __fch_b typ=w32 bnd=m
   72 : __fch_uB typ=w32 bnd=m
   73 : __fch_uiA typ=w32 bnd=m
   74 : __fch_uiB typ=w32 bnd=m
   75 : __tmp typ=w32 bnd=m
   76 : __ct_31 typ=w32 val=31f bnd=m
   78 : __tmp typ=w32 bnd=m
   79 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   81 : __tmp typ=bool bnd=m
   82 : __fch_uiA typ=w32 bnd=m
   83 : __fch_uiB typ=w32 bnd=m
   86 : softfloat_subMagsF32 typ=t21s_s2 val=0r bnd=m
   87 : __link typ=w32 bnd=m
   88 : __tmp typ=w32 bnd=m
   89 : __fch_uiA typ=w32 bnd=m
   90 : __fch_uiB typ=w32 bnd=m
   93 : softfloat_addMagsF32 typ=t21s_s2 val=0r bnd=m
   94 : __link typ=w32 bnd=m
   95 : __tmp typ=w32 bnd=m
   96 : __ct_24s0 typ=w32 val=24s0 bnd=m
   98 : __tmp typ=w32 bnd=m
  111 : __either typ=bool bnd=m
  112 : __trgt typ=t13s_s2 val=0j bnd=m
  113 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_add {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (b.18 var=19) source ()  <29>;
    (a.19 var=20) source ()  <30>;
    (uA.20 var=21) source ()  <31>;
    (uiA.21 var=22) source ()  <32>;
    (uB.22 var=23) source ()  <33>;
    (uiB.23 var=24) source ()  <34>;
    (__la.25 var=26 stl=X off=1) inp ()  <36>;
    (__la.26 var=26) deassign (__la.25)  <37>;
    (__arg_a.29 var=28 stl=X off=11) inp ()  <40>;
    (__arg_a.30 var=28) deassign (__arg_a.29)  <41>;
    (__arg_b.32 var=29 stl=X off=12) inp ()  <43>;
    (__arg_b.33 var=29) deassign (__arg_b.32)  <44>;
    (__rd___sp.35 var=25) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_m24S0.36 var=30) const ()  <47>;
    (__tmp.38 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_m24S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (__rd___sp.41 var=25) rd_res_reg (__R_SP.11 __sp.40)  <52>;
    (__ct_0t0.42 var=34) const ()  <53>;
    (__adr_b.44 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_0t0.42)  <55>;
    (__rd___sp.46 var=25) rd_res_reg (__R_SP.11 __sp.40)  <57>;
    (__rd___sp.51 var=25) rd_res_reg (__R_SP.11 __sp.40)  <62>;
    (__rd___sp.56 var=25) rd_res_reg (__R_SP.11 __sp.40)  <67>;
    (__rd___sp.61 var=25) rd_res_reg (__R_SP.11 __sp.40)  <72>;
    (__rd___sp.66 var=25) rd_res_reg (__R_SP.11 __sp.40)  <77>;
    (__M_DMw.71 var=5 b.72 var=19) store (__arg_b.33 __adr_b.44 b.18)  <82>;
    call {
        () chess_separator_scheduler ()  <83>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.47 var=38) const ()  <58>;
    (__adr_a.49 var=40) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_4t0.47)  <60>;
    (__M_DMw.73 var=5 a.74 var=20) store (__arg_a.30 __adr_a.49 a.19)  <84>;
    call {
        () chess_separator_scheduler ()  <85>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.52 var=42) const ()  <63>;
    (__adr_uA.54 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_8t0.52)  <65>;
    (__fch_a.75 var=57) load (__M_DMw.4 __adr_a.49 a.74)  <86>;
    (__M_DMw.79 var=5 uA.80 var=21) store (__fch_a.75 __adr_uA.54 uA.20)  <90>;
    call {
        () chess_separator_scheduler ()  <91>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.57 var=46) const ()  <68>;
    (__adr_uiA.59 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_12t0.57)  <70>;
    (__fch_uA.84 var=64) load (__M_DMw.4 __adr_uA.54 uA.80)  <95>;
    (__M_DMw.85 var=5 uiA.86 var=22) store (__fch_uA.84 __adr_uiA.59 uiA.21)  <96>;
    call {
        () chess_separator_scheduler ()  <97>;
    } #10 off=7
    #11 off=8
    (__ct_16t0.62 var=50) const ()  <73>;
    (__adr_uB.64 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_16t0.62)  <75>;
    (__fch_b.87 var=65) load (__M_DMw.4 __adr_b.44 b.72)  <98>;
    (__M_DMw.91 var=5 uB.92 var=23) store (__fch_b.87 __adr_uB.64 uB.22)  <102>;
    call {
        () chess_separator_scheduler ()  <103>;
    } #12 off=9
    #13 off=10
    (__ct_20t0.67 var=54) const ()  <78>;
    (__adr_uiB.69 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_20t0.67)  <80>;
    (__fch_uB.96 var=72) load (__M_DMw.4 __adr_uB.64 uB.92)  <107>;
    (__M_DMw.97 var=5 uiB.98 var=24) store (__fch_uB.96 __adr_uiB.69 uiB.23)  <108>;
    call {
        () chess_separator_scheduler ()  <109>;
    } #14 off=11
    #15 off=12
    (__fch_uiA.99 var=73) load (__M_DMw.4 __adr_uiA.59 uiA.86)  <110>;
    (__fch_uiB.100 var=74) load (__M_DMw.4 __adr_uiB.69 uiB.98)  <111>;
    (__tmp.101 var=75) __uint__er___uint___uint (__fch_uiA.99 __fch_uiB.100)  <112>;
    (__ct_31.102 var=76) const ()  <113>;
    (__tmp.104 var=78) __uint__rs___uint___sint (__tmp.101 __ct_31.102)  <115>;
    (__ct_0.105 var=79) const ()  <116>;
    (__tmp.107 var=81) bool__ne___uint___uint (__tmp.104 __ct_0.105)  <118>;
    (__trgt.194 var=112) const ()  <293>;
    () void_br_bool_t13s_s2 (__tmp.107 __trgt.194)  <294>;
    (__either.195 var=111) undefined ()  <295>;
    if {
        {
            () if_expr (__either.195)  <141>;
        } #17
        {
            #19 off=16
            (__fch_uiA.130 var=82) load (__M_DMw.4 __adr_uiA.59 uiA.86)  <142>;
            (__fch_uiB.132 var=83) load (__M_DMw.4 __adr_uiB.69 uiB.98)  <144>;
            (softfloat_subMagsF32.136 var=86) const ()  <148>;
            (__link.137 var=87) w32_jal_t21s_s2 (softfloat_subMagsF32.136)  <149>;
            call {
                (__fch_uiA.131 var=82 stl=X off=11) assign (__fch_uiA.130)  <143>;
                (__fch_uiB.133 var=83 stl=X off=12) assign (__fch_uiB.132)  <145>;
                (__link.138 var=87 stl=X off=1) assign (__link.137)  <150>;
                (__tmp.139 var=88 stl=X off=10) Fsoftfloat_subMagsF32 (__link.138 __fch_uiA.131 __fch_uiB.133)  <151>;
                (__tmp.140 var=88) deassign (__tmp.139)  <152>;
            } #20 off=17
        } #18
        {
            #23 off=13
            (__fch_uiA.142 var=89) load (__M_DMw.4 __adr_uiA.59 uiA.86)  <155>;
            (__fch_uiB.144 var=90) load (__M_DMw.4 __adr_uiB.69 uiB.98)  <157>;
            (softfloat_addMagsF32.148 var=93) const ()  <161>;
            (__link.149 var=94) w32_jal_t21s_s2 (softfloat_addMagsF32.148)  <162>;
            call {
                (__fch_uiA.143 var=89 stl=X off=11) assign (__fch_uiA.142)  <156>;
                (__fch_uiB.145 var=90 stl=X off=12) assign (__fch_uiB.144)  <158>;
                (__link.150 var=94 stl=X off=1) assign (__link.149)  <163>;
                (__tmp.151 var=95 stl=X off=10) Fsoftfloat_addMagsF32 (__link.150 __fch_uiA.143 __fch_uiB.145)  <164>;
                (__tmp.152 var=95) deassign (__tmp.151)  <165>;
            } #24 off=14
            #30 off=15
            (__trgt.196 var=113) const ()  <296>;
            () void_j_t21s_s2 (__trgt.196)  <297>;
        } #22
        {
            (__rt.154 var=27) merge (__tmp.140 __tmp.152)  <168>;
        } #26
    } #16
    #28 off=18 nxt=-2
    (__rd___sp.155 var=25) rd_res_reg (__R_SP.11 __sp.40)  <169>;
    (__ct_24s0.156 var=96) const ()  <170>;
    (__tmp.158 var=98) __Pvoid__pl___Pvoid___sint (__rd___sp.155 __ct_24s0.156)  <172>;
    (__R_SP.159 var=12 __sp.160 var=18) wr_res_reg (__tmp.158 __sp.40)  <173>;
    () void___rts_jr_w32 (__la.26)  <174>;
    (__rt.161 var=27 stl=X off=10) assign (__rt.154)  <175>;
    () out (__rt.161)  <176>;
    () sink (__sp.160)  <182>;
    () sink (b.72)  <183>;
    () sink (a.74)  <184>;
    () sink (uA.80)  <185>;
    () sink (uiA.86)  <186>;
    () sink (uB.92)  <187>;
    () sink (uiB.98)  <188>;
} #0
0 : 'SoftFloat-3e/source/f32_add.c';
----------
0 : (0,43:0,0);
3 : (0,43:32,0);
4 : (0,43:32,0);
5 : (0,43:19,0);
6 : (0,43:19,0);
7 : (0,53:9,8);
8 : (0,53:9,8);
9 : (0,54:8,9);
10 : (0,54:8,9);
11 : (0,55:9,10);
12 : (0,55:9,10);
13 : (0,56:8,11);
14 : (0,56:8,11);
15 : (0,58:10,11);
16 : (0,58:4,11);
18 : (0,61:8,12);
19 : (0,59:42,12);
20 : (0,59:15,12);
22 : (0,59:8,16);
23 : (0,61:42,16);
24 : (0,61:15,16);
28 : (0,58:4,21);
----------
46 : (0,43:10,0);
47 : (0,43:10,0);
49 : (0,43:10,0);
50 : (0,43:10,0);
52 : (0,43:42,0);
53 : (0,43:42,0);
55 : (0,43:42,0);
57 : (0,43:29,0);
58 : (0,43:29,0);
60 : (0,43:29,0);
62 : (0,45:19,0);
63 : (0,45:19,0);
65 : (0,45:19,0);
67 : (0,46:18,0);
68 : (0,46:18,0);
70 : (0,46:18,0);
72 : (0,47:19,0);
73 : (0,47:19,0);
75 : (0,47:19,0);
77 : (0,48:18,0);
78 : (0,48:18,0);
80 : (0,48:18,0);
82 : (0,43:32,0);
83 : (0,43:32,0);
84 : (0,43:19,0);
85 : (0,43:19,0);
86 : (0,53:11,7);
90 : (0,53:6,7);
91 : (0,53:9,8);
95 : (0,54:12,8);
96 : (0,54:4,8);
97 : (0,54:8,9);
98 : (0,55:11,9);
102 : (0,55:6,9);
103 : (0,55:9,10);
107 : (0,56:12,10);
108 : (0,56:4,10);
109 : (0,56:8,11);
110 : (0,58:30,11);
111 : (0,58:36,11);
112 : (0,58:34,11);
113 : (0,58:42,0);
115 : (0,58:40,11);
116 : (0,58:10,0);
118 : (0,58:10,11);
141 : (0,58:4,11);
142 : (0,59:37,12);
143 : (0,59:37,0);
144 : (0,59:42,12);
145 : (0,59:42,0);
149 : (0,59:15,12);
150 : (0,59:15,0);
151 : (0,59:15,12);
155 : (0,61:37,16);
156 : (0,61:37,0);
157 : (0,61:42,16);
158 : (0,61:42,0);
162 : (0,61:15,16);
163 : (0,61:15,0);
164 : (0,61:15,16);
168 : (0,58:4,20);
169 : (0,58:4,0);
170 : (0,58:4,0);
172 : (0,58:4,0);
173 : (0,58:4,21);
174 : (0,58:4,21);
175 : (0,58:4,0);
294 : (0,58:4,11);

