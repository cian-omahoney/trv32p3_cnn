
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:59:10 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/i32_to_f64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t i32_to_f64(int32_t)
Fi32_to_f64 : user_defined, called {
    fnm : "i32_to_f64" 'float64_t i32_to_f64(int)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=32 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : i32_to_f64 typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   20 : uiZ typ=w08 val=4t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   21 : sign typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   22 : absA typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   23 : softfloat_countLeadingZeros8 typ=w08 bnd=e sz=256 algn=1 stl=DMb tref=__A256__uchar_DMb
   25 : shiftDist typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast8_t_DMb
   26 : uZ typ=w08 val=24t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   27 : uiZ_low typ=w08 bnd=B stl=DMb
   28 : uiZ_high typ=w08 bnd=B stl=DMb
   29 : __rd___sp typ=w32 bnd=m
   31 : __ptr_softfloat_countLeadingZeros8 typ=w32 val=0a bnd=m adro=23
   32 : __la typ=w32 bnd=p tref=w32__
   34 : __rt_low typ=w32 bnd=m tref=__uint__
   35 : __rt_high typ=w32 bnd=m tref=__uint__
   36 : __arg_a typ=w32 bnd=p tref=int32_t__
   37 : __ct_m32S0 typ=w32 val=-32S0 bnd=m
   39 : __tmp typ=w32 bnd=m
   41 : __ct_0t0 typ=w32 val=0t0 bnd=m
   43 : __adr_a typ=w32 bnd=m adro=19
   45 : __ct_4t0 typ=w32 val=4t0 bnd=m
   47 : __adr_uiZ typ=w32 bnd=m adro=20
   49 : __ct_12t0 typ=w32 val=12t0 bnd=m
   51 : __adr_sign typ=w32 bnd=m adro=21
   53 : __ct_16t0 typ=w32 val=16t0 bnd=m
   55 : __adr_absA typ=w32 bnd=m adro=22
   57 : __ct_20t0 typ=w32 val=20t0 bnd=m
   59 : __adr_shiftDist typ=w32 bnd=m adro=25
   61 : __ct_24t0 typ=w32 val=24t0 bnd=m
   63 : __adr_uZ typ=w32 bnd=m adro=26
   66 : __inl_a typ=w32 bnd=m lscp=11 tref=uint32_t__
   67 : __inl_count typ=w32 bnd=m lscp=11 tref=uint_fast8_t__
   68 : __fch_a typ=w32 bnd=m
   69 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   71 : __tmp typ=bool bnd=m
   79 : __fch_a typ=w32 bnd=m
   83 : __tmp typ=w32 bnd=m
   84 : __fch_sign typ=w32 bnd=m
   85 : __fch_sign typ=bool bnd=m
   88 : __fch_a typ=w32 bnd=m
   90 : __tmp typ=w32 bnd=m
   91 : __fch_a typ=w32 bnd=m
   93 : __tmp typ=w32 bnd=m
   94 : __fch_absA typ=w32 bnd=m
   97 : __ct_65536 typ=t20s_rp12 val=16f bnd=m
   99 : __tmp typ=bool bnd=m
  100 : __ct_16 typ=w32 val=16f bnd=m
  105 : __ct_16777216 typ=t20s_rp12 val=4096f bnd=m
  107 : __tmp typ=bool bnd=m
  108 : __ct_8 typ=w32 val=8f bnd=m
  114 : __ct_24 typ=w32 val=24f bnd=m
  116 : __tmp typ=w32 bnd=m
  118 : __tmp typ=w32 bnd=m
  119 : __fch_softfloat_countLeadingZeros8 typ=__uchar bnd=m
  123 : __ct_21 typ=w32 val=21f bnd=m
  125 : __tmp typ=w32 bnd=m
  127 : __fch_sign typ=w32 bnd=m
  133 : __ct_1074 typ=w32 val=1074f bnd=m
  135 : __fch_shiftDist typ=w32 bnd=m
  136 : __tmp typ=w32 bnd=m
  142 : __fch_absA typ=w32 bnd=m
  144 : __fch_shiftDist typ=w32 bnd=m
  152 : __fch_uiZ_low typ=w32 bnd=m
  155 : __fch_uiZ_high typ=w32 bnd=m
  167 : __fch_uZ typ=w32 bnd=m
  170 : __fch_uZ typ=w32 bnd=m
  171 : __ct_32s0 typ=w32 val=32s0 bnd=m
  173 : __tmp typ=w32 bnd=m
  196 : __ct_8t0 typ=w32 val=8t0 bnd=m
  197 : __adr_uiZ typ=w32 bnd=m adro=20
  198 : __adr_uiZ typ=w32 bnd=m adro=20
  199 : __adr_uiZ typ=w32 bnd=m adro=20
  200 : __ct_28t0 typ=w32 val=28t0 bnd=m
  201 : __adr_uZ typ=w32 bnd=m adro=26
  202 : __adr_uZ typ=w32 bnd=m adro=26
  227 : __rt_low typ=w32 bnd=m tref=__uint__
  228 : __rt_high typ=w32 bnd=m tref=__uint__
  232 : __apl_ff typ=w32 bnd=m tref=__sint__
  233 : __apl_carries typ=w32 bnd=m tref=__uint__
  235 : __tmp typ=bool bnd=m
  236 : __tmp typ=bool bnd=m
  237 : __tmp typ=w32 bnd=m
  238 : __apl_r_low typ=w32 bnd=m tref=__uint__
  240 : __apl_r_high typ=w32 bnd=m tref=__uint__
  242 : __ct_m32 typ=w32 val=-32f bnd=m
  265 : __apl_r_high typ=w32 bnd=m tref=__uint__
  278 : __tmp_low typ=w32 bnd=m
  280 : __tmp_high typ=w32 bnd=m
  294 : __ct_31 typ=w32 val=31f bnd=m
  296 : __ct_20 typ=w32 val=20f bnd=m
  347 : __either typ=bool bnd=m
  348 : __trgt typ=t13s_s2 val=0j bnd=m
  349 : __trgt typ=t21s_s2 val=0j bnd=m
  350 : __trgt typ=t13s_s2 val=0j bnd=m
  351 : __trgt typ=t21s_s2 val=0j bnd=m
  352 : __trgt typ=t13s_s2 val=0j bnd=m
  353 : __trgt typ=t21s_s2 val=0j bnd=m
  354 : __trgt typ=t13s_s2 val=0j bnd=m
  355 : __trgt typ=t21s_s2 val=0j bnd=m
  356 : __trgt typ=t13s_s2 val=0j bnd=m
  357 : __trgt typ=t21s_s2 val=0j bnd=m
  358 : __trgt typ=t13s_s2 val=0j bnd=m
  359 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fi32_to_f64 {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (a.18 var=19) source ()  <29>;
    (sign.20 var=21) source ()  <31>;
    (absA.21 var=22) source ()  <32>;
    (softfloat_countLeadingZeros8.22 var=23) source ()  <33>;
    (shiftDist.24 var=25) source ()  <35>;
    (uZ.25 var=26) source ()  <36>;
    (uiZ_low.26 var=27) source ()  <37>;
    (uiZ_high.27 var=28) source ()  <38>;
    (__la.31 var=32 stl=X off=1) inp ()  <42>;
    (__la.32 var=32) deassign (__la.31)  <43>;
    (__arg_a.39 var=36 stl=X off=12) inp ()  <50>;
    (__arg_a.40 var=36) deassign (__arg_a.39)  <51>;
    (__rd___sp.42 var=29) rd_res_reg (__R_SP.11 __sp.17)  <53>;
    (__ct_m32S0.43 var=37) const ()  <54>;
    (__tmp.45 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.42 __ct_m32S0.43)  <56>;
    (__R_SP.46 var=12 __sp.47 var=18) wr_res_reg (__tmp.45 __sp.17)  <57>;
    (__rd___sp.48 var=29) rd_res_reg (__R_SP.11 __sp.47)  <59>;
    (__ct_0t0.49 var=41) const ()  <60>;
    (__adr_a.51 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_0t0.49)  <62>;
    (__rd___sp.53 var=29) rd_res_reg (__R_SP.11 __sp.47)  <64>;
    (__rd___sp.58 var=29) rd_res_reg (__R_SP.11 __sp.47)  <69>;
    (__rd___sp.63 var=29) rd_res_reg (__R_SP.11 __sp.47)  <74>;
    (__rd___sp.68 var=29) rd_res_reg (__R_SP.11 __sp.47)  <79>;
    (__rd___sp.73 var=29) rd_res_reg (__R_SP.11 __sp.47)  <84>;
    (__M_DMw.82 var=5 a.83 var=19) store (__arg_a.40 __adr_a.51 a.18)  <93>;
    call {
        () chess_separator_scheduler ()  <94>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.54 var=45) const ()  <65>;
    (__adr_uiZ.56 var=47) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_4t0.54)  <67>;
    (__fch_a.84 var=68) load (__M_DMw.4 __adr_a.51 a.83)  <95>;
    (__ct_0.85 var=69) const ()  <96>;
    (__tmp.406 var=71) bool__eq___sint___sint (__fch_a.84 __ct_0.85)  <508>;
    (__ct_8t0.412 var=196) const ()  <514>;
    (__trgt.798 var=358) const ()  <1270>;
    () void_br_bool_t13s_s2 (__tmp.406 __trgt.798)  <1271>;
    (__either.799 var=347) undefined ()  <1272>;
    if {
        {
            () if_expr (__either.799)  <130>;
        } #7
        {
            (__M_DMw.122 var=5 uiZ_low.123 var=27) store (__ct_0.85 __adr_uiZ.56 uiZ_low.26)  <134>;
            (__M_DMw.128 var=5 uiZ_high.129 var=28) store (__ct_0.85 __adr_uiZ.413 uiZ_high.27)  <139>;
            (__adr_uiZ.413 var=197) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_8t0.412)  <516>;
        } #9 off=31
        {
            #471 off=3
            (__ct_12t0.59 var=49) const ()  <70>;
            (__adr_sign.61 var=51) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_12t0.59)  <72>;
            (__fch_a.130 var=79) load (__M_DMw.4 __adr_a.51 a.83)  <141>;
            (__M_DMw.135 var=5 sign.136 var=21) store (__tmp.422 __adr_sign.61 sign.20)  <146>;
            (__tmp.422 var=83) __sint_slt___sint___sint (__fch_a.130 __ct_0.85)  <527>;
            call {
                () chess_separator_scheduler ()  <147>;
            } #13 off=4
            #80 off=5
            (__fch_sign.137 var=84) load (__M_DMw.4 __adr_sign.61 sign.136)  <148>;
            (__fch_sign.402 var=85) bool__ne___sint___sint (__fch_sign.137 __ct_0.85)  <474>;
            (__trgt.783 var=348) const ()  <1245>;
            () void_br_bool_t13s_s2 (__fch_sign.402 __trgt.783)  <1246>;
            (__either.784 var=347) undefined ()  <1247>;
            if {
                {
                    () if_expr (__either.784)  <180>;
                } #16
                {
                    (__fch_a.171 var=88) load (__M_DMw.4 __adr_a.51 a.83)  <183>;
                    (__tmp.173 var=90) __uint__mi___uint___uint (__ct_0.85 __fch_a.171)  <185>;
                } #17 off=7
                {
                    (__fch_a.174 var=91) load (__M_DMw.4 __adr_a.51 a.83)  <186>;
                    (__trgt.785 var=349) const ()  <1248>;
                    () void_j_t21s_s2 (__trgt.785)  <1249>;
                } #18 off=6
                {
                    (__tmp.176 var=93) merge (__tmp.173 __fch_a.174)  <188>;
                } #19
            } #15
            #20 off=8
            (__ct_16t0.64 var=53) const ()  <75>;
            (__adr_absA.66 var=55) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_16t0.64)  <77>;
            (__M_DMw.177 var=5 absA.178 var=22) store (__tmp.176 __adr_absA.66 absA.21)  <189>;
            call {
                () chess_separator_scheduler ()  <192>;
            } #23 off=9
            #24 off=10
            (__fch_absA.181 var=94) load (__M_DMw.4 __adr_absA.66 absA.178)  <194>;
            call {
                () chess_separator_scheduler ()  <201>;
            } #29 off=11
            #30 off=12
            (__ct_65536.186 var=97) const ()  <202>;
            (__tmp.763 var=99) bool__ge___uint___uint (__fch_absA.181 __ct_65536.186)  <1194>;
            (__trgt.786 var=350) const ()  <1250>;
            () void_br_bool_t13s_s2 (__tmp.763 __trgt.786)  <1251>;
            (__either.787 var=347) undefined ()  <1252>;
            if {
                {
                    () if_expr (__either.787)  <235>;
                } #32
                {
                } #38 off=14
                {
                    (__ct_16.219 var=100) const ()  <236>;
                    (__inl_a.223 var=66) __uint__ls___uint___sint (__fch_absA.181 __ct_16.219)  <241>;
                    (__trgt.788 var=351) const ()  <1253>;
                    () void_j_t21s_s2 (__trgt.788)  <1254>;
                } #36 off=13
                {
                    (__inl_a.224 var=66) merge (__fch_absA.181 __inl_a.223)  <243>;
                    (__inl_count.225 var=67) merge (__ct_0.85 __ct_16.219)  <244>;
                } #39
            } #31
            #40 off=15
            (__ct_16777216.226 var=105) const ()  <245>;
            (__tmp.764 var=107) bool__ge___uint___uint (__inl_a.224 __ct_16777216.226)  <1195>;
            (__trgt.789 var=352) const ()  <1255>;
            () void_br_bool_t13s_s2 (__tmp.764 __trgt.789)  <1256>;
            (__either.790 var=347) undefined ()  <1257>;
            if {
                {
                    () if_expr (__either.790)  <278>;
                } #42
                {
                } #48 off=19
                {
                    #44 off=16
                    (__ct_8.259 var=108) const ()  <279>;
                    (__inl_count.261 var=67) __uint__pl___uint___uint (__inl_count.225 __ct_8.259)  <281>;
                    call {
                        () chess_separator_scheduler ()  <282>;
                    } #45 off=17
                    #46 off=18
                    (__inl_a.264 var=66) __uint__ls___uint___sint (__inl_a.224 __ct_8.259)  <285>;
                    (__trgt.791 var=353) const ()  <1258>;
                    () void_j_t21s_s2 (__trgt.791)  <1259>;
                } #43
                {
                    (__inl_a.265 var=66) merge (__inl_a.224 __inl_a.264)  <287>;
                    (__inl_count.266 var=67) merge (__inl_count.225 __inl_count.261)  <288>;
                } #49
            } #41
            #50 off=20
            (__ptr_softfloat_countLeadingZeros8.29 var=31) const ()  <40>;
            (__ct_24.267 var=114) const ()  <289>;
            (__tmp.269 var=116) __uint__rs___uint___sint (__inl_a.265 __ct_24.267)  <291>;
            (__tmp.271 var=118) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_countLeadingZeros8.29 __tmp.269)  <293>;
            (__fch_softfloat_countLeadingZeros8.272 var=119) load (__M_DMb.2 __tmp.271 softfloat_countLeadingZeros8.22)  <294>;
            (__inl_count.275 var=67) __uint__pl___uint___uint (__inl_count.266 __fch_softfloat_countLeadingZeros8.272)  <297>;
            call {
                () chess_separator_scheduler ()  <299>;
            } #52 off=21
            #53 off=22
            (__ct_20t0.69 var=57) const ()  <80>;
            (__adr_shiftDist.71 var=59) __Pvoid__pl___Pvoid___sint (__rd___sp.68 __ct_20t0.69)  <82>;
            (__ct_21.276 var=123) const ()  <300>;
            (__tmp.278 var=125) __uint__pl___uint___uint (__inl_count.275 __ct_21.276)  <302>;
            (__M_DMw.280 var=5 shiftDist.281 var=25) store (__tmp.278 __adr_shiftDist.71 shiftDist.24)  <304>;
            call {
                () chess_separator_scheduler ()  <305>;
            } #54 off=23
            #385 off=24
            (__fch_sign.282 var=127) load (__M_DMw.4 __adr_sign.61 sign.136)  <306>;
            (__ct_1074.288 var=133) const ()  <312>;
            (__fch_shiftDist.290 var=135) load (__M_DMw.4 __adr_shiftDist.71 shiftDist.281)  <314>;
            (__tmp.291 var=136) __sint__mi___sint___sint (__ct_1074.288 __fch_shiftDist.290)  <315>;
            (__fch_absA.297 var=142) load (__M_DMw.4 __adr_absA.66 absA.178)  <321>;
            (__fch_shiftDist.299 var=144) load (__M_DMw.4 __adr_shiftDist.71 shiftDist.281)  <323>;
            (__apl_r_high.472 var=240) __uint__ls___uint___sint (__fch_sign.282 __ct_31.606)  <622>;
            (__apl_r_high.500 var=240) __uint__ls___uint___sint (__tmp.291 __ct_20.608)  <656>;
            (__apl_r_high.521 var=265) __uint__pl___uint___uint (__apl_r_high.472 __apl_r_high.500)  <682>;
            (__tmp.549 var=235) bool__eq___sint___sint (__fch_shiftDist.299 __ct_0.85)  <715>;
            (__ct_31.606 var=294) const ()  <810>;
            (__ct_20.608 var=296) const ()  <814>;
            (__trgt.795 var=356) const ()  <1265>;
            () void_br_bool_t13s_s2 (__tmp.549 __trgt.795)  <1266>;
            (__either.796 var=347) undefined ()  <1267>;
            if {
                {
                    () if_expr (__either.796)  <718>;
                } #217
                {
                } #218 off=29
                {
                    #220 off=25
                    (__ct_m32.463 var=242) const ()  <611>;
                    (__apl_ff.552 var=232) __sint__pl___sint___sint (__fch_shiftDist.299 __ct_m32.463)  <719>;
                    (__tmp.553 var=236) bool__lt___sint___sint (__apl_ff.552 __ct_0.85)  <720>;
                    (__trgt.792 var=354) const ()  <1260>;
                    () void_br_bool_t13s_s2 (__tmp.553 __trgt.792)  <1261>;
                    (__either.793 var=347) undefined ()  <1262>;
                    if {
                        {
                            () if_expr (__either.793)  <721>;
                        } #222
                        {
                            (__tmp.554 var=237) __sint__mi___sint___sint (__ct_0.85 __apl_ff.552)  <722>;
                            (__apl_carries.555 var=233) __uint__rs___uint___sint (__fch_absA.297 __tmp.554)  <723>;
                            (__apl_r_low.556 var=238) __uint__ls___uint___sint (__fch_absA.297 __fch_shiftDist.299)  <724>;
                        } #223 off=27
                        {
                            (__apl_r_high.559 var=240) __uint__ls___uint___sint (__fch_absA.297 __apl_ff.552)  <727>;
                            (__trgt.794 var=355) const ()  <1263>;
                            () void_j_t21s_s2 (__trgt.794)  <1264>;
                        } #224 off=26
                        {
                            (__rt_low.560 var=227) merge (__apl_r_low.556 __ct_0.85)  <728>;
                            (__rt_high.561 var=228) merge (__apl_carries.555 __apl_r_high.559)  <729>;
                        } #225
                    } #221
                    #493 off=28
                    (__trgt.797 var=357) const ()  <1268>;
                    () void_j_t21s_s2 (__trgt.797)  <1269>;
                } #219
                {
                    (__tmp_low.562 var=278) merge (__fch_absA.297 __rt_low.560)  <730>;
                    (__tmp_high.563 var=280) merge (__ct_0.85 __rt_high.561)  <731>;
                } #226
            } #216
            #157 off=30
            (__M_DMw.303 var=5 uiZ_low.304 var=27) store (__tmp_low.562 __adr_uiZ.56 uiZ_low.26)  <327>;
            (__M_DMw.309 var=5 uiZ_high.310 var=28) store (__apl_r_high.580 __adr_uiZ.414 uiZ_high.27)  <332>;
            (__adr_uiZ.414 var=198) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_8t0.412)  <517>;
            (__apl_r_high.580 var=265) __uint__pl___uint___uint (__apl_r_high.521 __tmp_high.563)  <753>;
            (__trgt.800 var=359) const ()  <1273>;
            () void_j_t21s_s2 (__trgt.800)  <1274>;
        } #11
        {
            (sign.311 var=21) merge (sign.20 sign.136)  <334>;
            (absA.312 var=22) merge (absA.21 absA.178)  <335>;
            (shiftDist.313 var=25) merge (shiftDist.24 shiftDist.281)  <336>;
            (uiZ_low.314 var=27) merge (uiZ_low.123 uiZ_low.304)  <337>;
            (uiZ_high.315 var=28) merge (uiZ_high.129 uiZ_high.310)  <338>;
        } #57
    } #6
    #58 off=32
    (__ct_24t0.74 var=61) const ()  <85>;
    (__adr_uZ.76 var=63) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_24t0.74)  <87>;
    (__fch_uiZ_low.321 var=152) load (__M_DMw.4 __adr_uiZ.56 uiZ_low.314)  <344>;
    (__fch_uiZ_high.326 var=155) load (__M_DMw.4 __adr_uiZ.415 uiZ_high.315)  <349>;
    (__M_DMw.332 var=5 uZ.333 var=26) store (__fch_uiZ_low.321 __adr_uZ.76 uZ.25)  <355>;
    (__M_DMw.338 var=5 uZ.339 var=26) store (__fch_uiZ_high.326 __adr_uZ.417 uZ.333)  <360>;
    (__adr_uiZ.415 var=199) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_8t0.412)  <518>;
    (__ct_28t0.416 var=200) const ()  <519>;
    (__adr_uZ.417 var=201) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_28t0.416)  <521>;
    call {
        () chess_separator_scheduler ()  <361>;
    } #59 off=33
    #62 off=34 nxt=-2
    (__fch_uZ.344 var=167) load (__M_DMw.4 __adr_uZ.76 uZ.339)  <366>;
    (__fch_uZ.349 var=170) load (__M_DMw.4 __adr_uZ.418 uZ.339)  <371>;
    (__rd___sp.351 var=29) rd_res_reg (__R_SP.11 __sp.47)  <373>;
    (__ct_32s0.352 var=171) const ()  <374>;
    (__tmp.354 var=173) __Pvoid__pl___Pvoid___sint (__rd___sp.351 __ct_32s0.352)  <376>;
    (__R_SP.355 var=12 __sp.356 var=18) wr_res_reg (__tmp.354 __sp.47)  <377>;
    () void___rts_jr_w32 (__la.32)  <378>;
    (__rt_low.358 var=34 stl=X off=10) assign (__fch_uZ.344)  <380>;
    () out (__rt_low.358)  <381>;
    (__rt_high.360 var=35 stl=X off=11) assign (__fch_uZ.349)  <383>;
    () out (__rt_high.360)  <384>;
    () sink (__sp.356)  <390>;
    () sink (a.83)  <391>;
    () sink (sign.311)  <393>;
    () sink (absA.312)  <394>;
    () sink (shiftDist.313)  <397>;
    () sink (uZ.339)  <398>;
    () sink (uiZ_low.314)  <399>;
    () sink (uiZ_high.315)  <400>;
    (__adr_uZ.418 var=202) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_28t0.416)  <522>;
} #0
0 : 'SoftFloat-3e/source/i32_to_f64.c';
----------
0 : (0,43:0,0);
3 : (0,43:22,0);
4 : (0,43:22,0);
5 : (0,51:9,7);
6 : (0,51:4,7);
9 : (0,52:12,9);
11 : (0,53:11,11);
13 : (0,54:13,12);
15 : (0,55:20,12);
17 : (0,55:22,13);
18 : (0,55:43,14);
20 : (0,55:13,17);
23 : (0,56:20,18);
24 : (0,56:56,19);
29 : (0,56:20,21);
30 : (0,56:20,22);
31 : (0,56:20,22);
36 : (0,56:20,25);
38 : (0,56:20,27);
40 : (0,56:20,30);
41 : (0,56:20,30);
43 : (0,56:20,31);
44 : (0,56:20,32);
45 : (0,56:20,32);
46 : (0,56:20,33);
48 : (0,56:20,35);
50 : (0,56:20,39);
52 : (0,56:20,40);
53 : (0,56:18,43);
54 : (0,56:18,43);
58 : (0,61:10,48);
59 : (0,61:10,48);
62 : (0,62:4,48);
80 : (0,55:15,12);
157 : (0,57:8,43);
216 : (0,58:110,43);
217 : (0,58:110,43);
218 : (0,58:110,43);
219 : (0,58:110,43);
220 : (0,58:110,43);
221 : (0,58:110,43);
222 : (0,58:110,43);
223 : (0,58:110,43);
224 : (0,58:110,43);
225 : (0,58:110,43);
226 : (0,58:110,43);
385 : (0,58:110,43);
471 : (0,54:8,11);
----------
53 : (0,43:10,0);
54 : (0,43:10,0);
56 : (0,43:10,0);
57 : (0,43:10,0);
59 : (0,43:30,0);
60 : (0,43:30,0);
62 : (0,43:30,0);
64 : (0,45:18,0);
65 : (0,45:18,0);
67 : (0,45:18,0);
69 : (0,46:9,0);
70 : (0,46:9,0);
72 : (0,46:9,0);
74 : (0,47:18,0);
75 : (0,47:18,0);
77 : (0,47:18,0);
79 : (0,48:16,0);
80 : (0,48:16,0);
82 : (0,48:16,0);
84 : (0,49:19,0);
85 : (0,49:19,0);
87 : (0,49:19,0);
93 : (0,43:22,0);
94 : (0,43:22,0);
95 : (0,51:11,7);
96 : (0,51:9,0);
130 : (0,51:4,7);
134 : (0,52:8,8);
139 : (0,52:8,8);
141 : (0,54:16,11);
146 : (0,54:8,11);
147 : (0,54:13,12);
148 : (0,55:15,12);
180 : (0,55:20,12);
183 : (0,55:39,13);
185 : (0,55:22,13);
186 : (0,55:59,14);
188 : (0,55:20,15);
189 : (0,55:8,16);
192 : (0,56:20,18);
194 : (0,56:51,19);
201 : (0,56:20,21);
202 : (0,56:20,0);
235 : (0,56:20,22);
236 : (0,56:20,0);
241 : (0,56:20,24);
243 : (0,56:20,29);
244 : (0,56:20,29);
245 : (0,56:20,0);
278 : (0,56:20,30);
279 : (0,56:20,0);
281 : (0,56:20,31);
282 : (0,56:20,32);
285 : (0,56:20,32);
287 : (0,56:20,37);
288 : (0,56:20,37);
289 : (0,56:20,0);
291 : (0,56:20,38);
293 : (0,56:20,38);
294 : (0,56:20,38);
297 : (0,56:20,38);
299 : (0,56:20,40);
300 : (0,56:58,0);
302 : (0,56:58,42);
304 : (0,56:8,42);
305 : (0,56:18,43);
306 : (0,58:32,43);
312 : (0,58:69,0);
314 : (0,58:71,43);
315 : (0,58:69,43);
321 : (0,58:106,43);
323 : (0,58:112,43);
327 : (0,57:8,43);
332 : (0,57:8,43);
334 : (0,51:4,46);
335 : (0,51:4,46);
336 : (0,51:4,46);
337 : (0,51:4,46);
338 : (0,51:4,46);
344 : (0,61:12,47);
349 : (0,61:12,47);
355 : (0,61:6,47);
360 : (0,61:6,47);
361 : (0,61:10,48);
366 : (0,62:13,48);
371 : (0,62:13,48);
373 : (0,62:4,0);
374 : (0,62:4,0);
376 : (0,62:4,0);
377 : (0,62:4,48);
378 : (0,62:4,48);
380 : (0,62:13,0);
383 : (0,62:13,0);
474 : (0,55:15,12);
508 : (0,51:9,7);
514 : (0,45:18,0);
519 : (0,49:19,0);
527 : (0,54:8,11);
611 : (0,58:37,0);
622 : (0,58:37,43);
656 : (0,58:81,43);
682 : (0,58:43,43);
715 : (0,58:110,43);
718 : (0,58:110,43);
719 : (0,58:110,43);
720 : (0,58:110,43);
721 : (0,58:110,43);
722 : (0,58:110,43);
723 : (0,58:110,43);
724 : (0,58:110,43);
727 : (0,58:110,43);
728 : (0,58:110,43);
729 : (0,58:110,43);
730 : (0,58:110,43);
731 : (0,58:110,43);
753 : (0,58:87,43);
810 : (0,58:37,0);
814 : (0,58:81,0);
1194 : (0,56:20,22);
1195 : (0,56:20,30);
1246 : (0,55:20,12);
1251 : (0,56:20,22);
1256 : (0,56:20,30);
1261 : (0,58:110,43);
1266 : (0,58:110,43);
1271 : (0,51:4,7);

