
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:34:09 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/s_normRoundPackToF64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t softfloat_normRoundPackToF64(bool, int_fast16_t, uint_fast64_t)
Fsoftfloat_normRoundPackToF64 : user_defined, called {
    fnm : "softfloat_normRoundPackToF64" 'float64_t softfloat_normRoundPackToF64(bool, int_fast16_t, uint_fast64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    frm : ( l=28 );
    llv : 0 0 0 0 0 ;
}
****
!!  uint_fast8_t softfloat_countLeadingZeros64(uint64_t)
Fsoftfloat_countLeadingZeros64 : user_defined, called {
    fnm : "softfloat_countLeadingZeros64" 'uint_fast8_t softfloat_countLeadingZeros64(uint64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
!!  float64_t softfloat_roundPackToF64(bool, int_fast16_t, uint_fast64_t)
Fsoftfloat_roundPackToF64 : user_defined, called {
    fnm : "softfloat_roundPackToF64" 'float64_t softfloat_roundPackToF64(bool, int_fast16_t, uint_fast64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : softfloat_normRoundPackToF64 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : sig typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   20 : exp typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   21 : sign typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   22 : shiftDist typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast8_t_DMb
   23 : uZ typ=w08 val=20t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   24 : sig_low typ=w08 bnd=B stl=DMb
   25 : sig_high typ=w08 bnd=B stl=DMb
   26 : __rd___sp typ=w32 bnd=m
   27 : __la typ=w32 bnd=p tref=w32__
   29 : __rt_low typ=w32 bnd=m tref=__uint__
   30 : __rt_high typ=w32 bnd=m tref=__uint__
   31 : __arg_sign typ=w32 bnd=p tref=bool__
   33 : __arg_exp typ=w32 bnd=p tref=int_fast16_t__
   35 : __arg_sig_low typ=w32 bnd=m tref=__uint__
   36 : __arg_sig_high typ=w32 bnd=m tref=__uint__
   37 : __ct_m28S0 typ=w32 val=-28S0 bnd=m
   39 : __tmp typ=w32 bnd=m
   42 : __ct_0t0 typ=w32 val=0t0 bnd=m
   44 : __adr_sig typ=w32 bnd=m adro=19
   46 : __ct_8t0 typ=w32 val=8t0 bnd=m
   48 : __adr_exp typ=w32 bnd=m adro=20
   50 : __ct_12t0 typ=w32 val=12t0 bnd=m
   52 : __adr_sign typ=w32 bnd=m adro=21
   54 : __ct_16t0 typ=w32 val=16t0 bnd=m
   56 : __adr_shiftDist typ=w32 bnd=m adro=22
   58 : __ct_20t0 typ=w32 val=20t0 bnd=m
   60 : __adr_uZ typ=w32 bnd=m adro=23
   65 : __fch_sig_low typ=w32 bnd=m
   68 : __fch_sig_high typ=w32 bnd=m
   69 : __record_low typ=w32 bnd=m tref=__uint__
   70 : __record_high typ=w32 bnd=m tref=__uint__
   73 : softfloat_countLeadingZeros64 typ=t21s_s2 val=0r bnd=m
   74 : __link typ=w32 bnd=m
   75 : __tmp typ=w32 bnd=m
   78 : __tmp typ=w32 bnd=m
   80 : __fch_exp typ=w32 bnd=m
   81 : __fch_shiftDist typ=w32 bnd=m
   82 : __tmp typ=w32 bnd=m
   83 : __ct_10 typ=w32 val=10f bnd=m
   85 : __fch_shiftDist typ=w32 bnd=m
   86 : __tmp typ=bool bnd=m
   87 : __fch_exp typ=w32 bnd=m
   89 : __ct_2045 typ=w32 val=2045f bnd=m
   91 : __tmp typ=bool bnd=m
   94 : __tmp typ=bool bnd=m
   95 : __fch_sign typ=w32 bnd=m
  102 : __fch_sig_low typ=w32 bnd=m
  105 : __fch_sig_high typ=w32 bnd=m
  109 : __fch_exp typ=w32 bnd=m
  110 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  112 : __tmp typ=w32 bnd=m
  119 : __fch_sig_low typ=w32 bnd=m
  122 : __fch_sig_high typ=w32 bnd=m
  123 : __fch_shiftDist typ=w32 bnd=m
  126 : __tmp typ=w32 bnd=m
  140 : __fch_uZ typ=w32 bnd=m
  143 : __fch_uZ typ=w32 bnd=m
  144 : __fch_sign typ=w32 bnd=m
  146 : __tmp typ=w32 bnd=m
  147 : __fch_exp typ=w32 bnd=m
  149 : __fch_sig_low typ=w32 bnd=m
  152 : __fch_sig_high typ=w32 bnd=m
  153 : __fch_shiftDist typ=w32 bnd=m
  155 : __tmp_low typ=w32 bnd=m tref=__uint__
  156 : __tmp_high typ=w32 bnd=m tref=__uint__
  159 : softfloat_roundPackToF64 typ=t21s_s2 val=0r bnd=m
  160 : __link typ=w32 bnd=m
  162 : __tmp typ=w32 bnd=m
  163 : __tmp typ=w32 bnd=m
  165 : __ct_28s0 typ=w32 val=28s0 bnd=m
  167 : __tmp typ=w32 bnd=m
  176 : __ct_4294967295 typ=w32 val=-1f bnd=m
  177 : __ct_m10 typ=w32 val=-10f bnd=m
  182 : __ct_4t0 typ=w32 val=4t0 bnd=m
  183 : __adr_sig typ=w32 bnd=m adro=19
  184 : __adr_sig typ=w32 bnd=m adro=19
  185 : __ct_24t0 typ=w32 val=24t0 bnd=m
  186 : __adr_uZ typ=w32 bnd=m adro=23
  187 : __adr_uZ typ=w32 bnd=m adro=23
  188 : __adr_sig typ=w32 bnd=m adro=19
  189 : __adr_sig typ=w32 bnd=m adro=19
  190 : __adr_sig typ=w32 bnd=m adro=19
  193 : __rt_low typ=w32 bnd=m tref=__uint__
  194 : __rt_high typ=w32 bnd=m tref=__uint__
  198 : __apl_ff typ=w32 bnd=m tref=__sint__
  199 : __apl_carries typ=w32 bnd=m tref=__uint__
  201 : __tmp typ=bool bnd=m
  202 : __tmp typ=bool bnd=m
  203 : __tmp typ=w32 bnd=m
  204 : __apl_r_low typ=w32 bnd=m tref=__uint__
  205 : __tmp typ=w32 bnd=m
  206 : __apl_r_high typ=w32 bnd=m tref=__uint__
  208 : __ct_m32 typ=w32 val=-32f bnd=m
  244 : __apl_r_high typ=w32 bnd=m tref=__uint__
  257 : __tmp_low typ=w32 bnd=m
  259 : __tmp_high typ=w32 bnd=m
  271 : __tmp_low typ=w32 bnd=m
  273 : __tmp_high typ=w32 bnd=m
  279 : __ct_31 typ=w32 val=31f bnd=m
  281 : __ct_20 typ=w32 val=20f bnd=m
  285 : __tmpd typ=w32 bnd=m
  286 : __tmp typ=bool bnd=m
  307 : __false typ=bool val=0f bnd=m
  308 : __either typ=bool bnd=m
  309 : __trgt typ=t13s_s2 val=0j bnd=m
  310 : __trgt typ=t13s_s2 val=0j bnd=m
  311 : __trgt typ=t21s_s2 val=0j bnd=m
  312 : __trgt typ=t13s_s2 val=0j bnd=m
  313 : __trgt typ=t21s_s2 val=0j bnd=m
  314 : __trgt typ=t13s_s2 val=0j bnd=m
  315 : __trgt typ=t21s_s2 val=0j bnd=m
  316 : __trgt typ=t13s_s2 val=0j bnd=m
  317 : __trgt typ=t21s_s2 val=0j bnd=m
  318 : __trgt typ=t13s_s2 val=0j bnd=m
  319 : __trgt typ=t21s_s2 val=0j bnd=m
  320 : __trgt typ=t13s_s2 val=0j bnd=m
  321 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_normRoundPackToF64 {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (exp.19 var=20) source ()  <30>;
    (sign.20 var=21) source ()  <31>;
    (shiftDist.21 var=22) source ()  <32>;
    (uZ.22 var=23) source ()  <33>;
    (sig_low.23 var=24) source ()  <34>;
    (sig_high.24 var=25) source ()  <35>;
    (__la.26 var=27 stl=X off=1) inp ()  <37>;
    (__la.27 var=27) deassign (__la.26)  <38>;
    (__arg_sign.34 var=31 stl=X off=12) inp ()  <45>;
    (__arg_sign.35 var=31) deassign (__arg_sign.34)  <46>;
    (__arg_exp.37 var=33 stl=X off=13) inp ()  <48>;
    (__arg_exp.38 var=33) deassign (__arg_exp.37)  <49>;
    (__arg_sig_low.41 var=35 stl=X off=14) inp ()  <52>;
    (__arg_sig_low.42 var=35) deassign (__arg_sig_low.41)  <53>;
    (__arg_sig_high.45 var=36 stl=X off=15) inp ()  <56>;
    (__arg_sig_high.46 var=36) deassign (__arg_sig_high.45)  <57>;
    (__rd___sp.49 var=26) rd_res_reg (__R_SP.11 __sp.17)  <60>;
    (__ct_m28S0.50 var=37) const ()  <61>;
    (__tmp.52 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.49 __ct_m28S0.50)  <63>;
    (__R_SP.53 var=12 __sp.54 var=18) wr_res_reg (__tmp.52 __sp.17)  <64>;
    (__rd___sp.56 var=26) rd_res_reg (__R_SP.11 __sp.54)  <67>;
    (__ct_0t0.57 var=42) const ()  <68>;
    (__adr_sig.59 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_0t0.57)  <70>;
    (__rd___sp.61 var=26) rd_res_reg (__R_SP.11 __sp.54)  <72>;
    (__rd___sp.66 var=26) rd_res_reg (__R_SP.11 __sp.54)  <77>;
    (__rd___sp.71 var=26) rd_res_reg (__R_SP.11 __sp.54)  <82>;
    (__rd___sp.76 var=26) rd_res_reg (__R_SP.11 __sp.54)  <87>;
    (__M_DMw.82 var=5 sig_low.83 var=24) store (__arg_sig_low.42 __adr_sig.59 sig_low.23)  <93>;
    (__M_DMw.88 var=5 sig_high.89 var=25) store (__arg_sig_high.46 __adr_sig.369 sig_high.24)  <98>;
    (__ct_4t0.362 var=182) const ()  <430>;
    (__adr_sig.369 var=189) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_4t0.362)  <439>;
    call {
        () chess_separator_scheduler ()  <99>;
    } #4 off=1
    #5 off=2
    (__ct_8t0.62 var=46) const ()  <73>;
    (__adr_exp.64 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_8t0.62)  <75>;
    (__M_DMw.90 var=5 exp.91 var=20) store (__arg_exp.38 __adr_exp.64 exp.19)  <100>;
    call {
        () chess_separator_scheduler ()  <101>;
    } #6 off=3
    #7 off=4
    (__ct_12t0.67 var=50) const ()  <78>;
    (__adr_sign.69 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_12t0.67)  <80>;
    (__M_DMw.93 var=5 sign.94 var=21) store (__arg_sign.35 __adr_sign.69 sign.20)  <103>;
    call {
        () chess_separator_scheduler ()  <104>;
    } #8 off=5
    #9 off=6
    (__fch_sig_low.96 var=65) load (__M_DMw.4 __adr_sig.59 sig_low.83)  <106>;
    (__fch_sig_high.101 var=68) load (__M_DMw.4 __adr_sig.370 sig_high.89)  <111>;
    (softfloat_countLeadingZeros64.109 var=73) const ()  <119>;
    (__link.110 var=74) w32_jal_t21s_s2 (softfloat_countLeadingZeros64.109)  <120>;
    (__adr_sig.370 var=190) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_4t0.362)  <440>;
    call {
        (__record_low.104 var=69 stl=X off=11) assign (__fch_sig_low.96)  <114>;
        (__record_high.106 var=70 stl=X off=12) assign (__fch_sig_high.101)  <116>;
        (__link.111 var=74 stl=X off=1) assign (__link.110)  <121>;
        (__tmp.112 var=75 stl=X off=10) Fsoftfloat_countLeadingZeros64 (__link.111 __record_low.104 __record_high.106)  <122>;
        (__tmp.113 var=75) deassign (__tmp.112)  <123>;
    } #10 off=7
    #11 off=8
    (__ct_16t0.72 var=54) const ()  <83>;
    (__adr_shiftDist.74 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.71 __ct_16t0.72)  <85>;
    (__tmp.117 var=78) __uint__pl___uint___uint (__tmp.113 __ct_4294967295.353)  <127>;
    (__M_DMw.119 var=5 shiftDist.120 var=22) store (__tmp.117 __adr_shiftDist.74 shiftDist.21)  <129>;
    (__ct_4294967295.353 var=176) const ()  <419>;
    call {
        () chess_separator_scheduler ()  <130>;
    } #12 off=9
    #13 off=10
    (__fch_exp.121 var=80) load (__M_DMw.4 __adr_exp.64 exp.91)  <131>;
    (__fch_shiftDist.122 var=81) load (__M_DMw.4 __adr_shiftDist.74 shiftDist.120)  <132>;
    (__tmp.123 var=82) __sint__mi___sint___sint (__fch_exp.121 __fch_shiftDist.122)  <133>;
    (__M_DMw.124 var=5 exp.125 var=20) store (__tmp.123 __adr_exp.64 exp.91)  <134>;
    call {
        () chess_separator_scheduler ()  <135>;
    } #14 off=11
    #15 off=12
    (__ct_10.126 var=83) const ()  <136>;
    (__fch_shiftDist.128 var=85) load (__M_DMw.4 __adr_shiftDist.74 shiftDist.120)  <138>;
    (__ct_0.225 var=110) const ()  <238>;
    (__ct_m32.378 var=208) const ()  <470>;
    (__tmp.596 var=86) bool__lt___sint___sint (__fch_shiftDist.128 __ct_10.126)  <850>;
    (__trgt.600 var=309) const ()  <875>;
    () void_br_bool_t13s_s2 (__tmp.596 __trgt.600)  <876>;
    (__either.601 var=308) undefined ()  <877>;
    if {
        {
            () if_expr (__either.601)  <163>;
        } #17
        {
            (__false.617 var=307) const ()  <903>;
        } #19
        {
            (__fch_exp.153 var=87) load (__M_DMw.4 __adr_exp.64 exp.125)  <164>;
            (__ct_2045.155 var=89) const ()  <166>;
            (__tmp.157 var=91) bool__lt___uint___uint (__fch_exp.153 __ct_2045.155)  <168>;
            (__trgt.618 var=320) const ()  <904>;
            () void_br_bool_t13s_s2 (__tmp.157 __trgt.618)  <905>;
            (__either.619 var=308) undefined ()  <906>;
        } #18 off=13
        {
            (__tmp.160 var=94) merge (__false.617 __either.619)  <171>;
        } #20
    } #16
    if {
        {
            () if_expr (__tmp.160)  <195>;
        } #23
        {
            #227 off=23
            (__fch_sign.184 var=95) load (__M_DMw.4 __adr_sign.69 sign.94)  <196>;
            (__fch_sig_low.191 var=102) load (__M_DMw.4 __adr_sig.59 sig_low.83)  <203>;
            (__fch_sig_high.196 var=105) load (__M_DMw.4 __adr_sig.363 sig_high.89)  <208>;
            (__adr_sig.363 var=183) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_4t0.362)  <432>;
            (__apl_r_high.387 var=206) __uint__ls___uint___sint (__fch_sign.184 __ct_31.562)  <481>;
            (__ct_31.562 var=279) const ()  <716>;
            (__tmpd.568 var=285) __uint__or___uint___uint (__fch_sig_high.196 __fch_sig_low.191)  <748>;
            (__tmp.597 var=286) bool__eq___uint___uint (__tmpd.568 __ct_0.225)  <851>;
            (__trgt.602 var=310) const ()  <878>;
            () void_br_bool_t13s_s2 (__tmp.597 __trgt.602)  <879>;
            (__either.603 var=308) undefined ()  <880>;
            if {
                {
                    () if_expr (__either.603)  <236>;
                } #27
                {
                } #29 off=25
                {
                    (__fch_exp.224 var=109) load (__M_DMw.4 __adr_exp.64 exp.125)  <237>;
                    (__trgt.604 var=311) const ()  <881>;
                    () void_j_t21s_s2 (__trgt.604)  <882>;
                } #28 off=24
                {
                    (__tmp.227 var=112) merge (__ct_0.225 __fch_exp.224)  <240>;
                } #30
            } #26
            #215 off=26
            (__fch_sig_low.234 var=119) load (__M_DMw.4 __adr_sig.59 sig_low.83)  <247>;
            (__fch_sig_high.239 var=122) load (__M_DMw.4 __adr_sig.364 sig_high.89)  <252>;
            (__fch_shiftDist.241 var=123) load (__M_DMw.4 __adr_shiftDist.74 shiftDist.120)  <254>;
            (__tmp.244 var=126) __sint__pl___sint___sint (__fch_shiftDist.241 __ct_m10.354)  <257>;
            (__ct_m10.354 var=177) const ()  <421>;
            (__adr_sig.364 var=184) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_4t0.362)  <433>;
            (__apl_r_high.428 var=206) __uint__ls___uint___sint (__tmp.227 __ct_20.564)  <532>;
            (__apl_r_high.449 var=244) __uint__pl___uint___uint (__apl_r_high.387 __apl_r_high.428)  <558>;
            (__tmp.477 var=201) bool__eq___sint___sint (__tmp.244 __ct_0.225)  <591>;
            (__ct_20.564 var=281) const ()  <720>;
            (__trgt.608 var=314) const ()  <888>;
            () void_br_bool_t13s_s2 (__tmp.477 __trgt.608)  <889>;
            (__either.609 var=308) undefined ()  <890>;
            if {
                {
                    () if_expr (__either.609)  <594>;
                } #142
                {
                } #143 off=31
                {
                    #145 off=27
                    (__apl_ff.480 var=198) __sint__pl___sint___sint (__tmp.244 __ct_m32.378)  <595>;
                    (__tmp.481 var=202) bool__lt___sint___sint (__apl_ff.480 __ct_0.225)  <596>;
                    (__trgt.605 var=312) const ()  <883>;
                    () void_br_bool_t13s_s2 (__tmp.481 __trgt.605)  <884>;
                    (__either.606 var=308) undefined ()  <885>;
                    if {
                        {
                            () if_expr (__either.606)  <597>;
                        } #147
                        {
                            (__tmp.482 var=203) __sint__mi___sint___sint (__ct_0.225 __apl_ff.480)  <598>;
                            (__apl_carries.483 var=199) __uint__rs___uint___sint (__fch_sig_low.234 __tmp.482)  <599>;
                            (__apl_r_low.484 var=204) __uint__ls___uint___sint (__fch_sig_low.234 __tmp.244)  <600>;
                            (__tmp.485 var=205) __uint__ls___uint___sint (__fch_sig_high.239 __tmp.244)  <601>;
                            (__apl_r_high.486 var=206) __uint__or___uint___uint (__tmp.485 __apl_carries.483)  <602>;
                        } #148 off=29
                        {
                            (__apl_r_high.487 var=206) __uint__ls___uint___sint (__fch_sig_low.234 __apl_ff.480)  <603>;
                            (__trgt.607 var=313) const ()  <886>;
                            () void_j_t21s_s2 (__trgt.607)  <887>;
                        } #149 off=28
                        {
                            (__rt_low.488 var=193) merge (__apl_r_low.484 __ct_0.225)  <604>;
                            (__rt_high.489 var=194) merge (__apl_r_high.486 __apl_r_high.487)  <605>;
                        } #150
                    } #146
                    #236 off=30
                    (__trgt.610 var=315) const ()  <891>;
                    () void_j_t21s_s2 (__trgt.610)  <892>;
                } #144
                {
                    (__tmp_low.490 var=257) merge (__fch_sig_low.234 __rt_low.488)  <606>;
                    (__tmp_high.491 var=259) merge (__fch_sig_high.239 __rt_high.489)  <607>;
                } #151
            } #141
            #98 off=32
            (__ct_20t0.77 var=58) const ()  <88>;
            (__adr_uZ.79 var=60) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_20t0.77)  <90>;
            (__M_DMw.251 var=5 uZ.252 var=23) store (__tmp_low.490 __adr_uZ.79 uZ.22)  <264>;
            (__M_DMw.257 var=5 uZ.258 var=23) store (__apl_r_high.508 __adr_uZ.366 uZ.252)  <269>;
            (__ct_24t0.365 var=185) const ()  <434>;
            (__adr_uZ.366 var=186) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_24t0.365)  <436>;
            (__apl_r_high.508 var=244) __uint__pl___uint___uint (__apl_r_high.449 __tmp_high.491)  <629>;
            call {
                () chess_separator_scheduler ()  <270>;
            } #32 off=33
            #33 off=34
            (__fch_uZ.263 var=140) load (__M_DMw.4 __adr_uZ.79 uZ.258)  <275>;
            (__fch_uZ.268 var=143) load (__M_DMw.4 __adr_uZ.367 uZ.258)  <280>;
            (__adr_uZ.367 var=187) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_24t0.365)  <437>;
        } #24
        {
            #192 off=14
            (__fch_sign.270 var=144) load (__M_DMw.4 __adr_sign.69 sign.94)  <283>;
            (__fch_exp.274 var=147) load (__M_DMw.4 __adr_exp.64 exp.125)  <287>;
            (__fch_sig_low.277 var=149) load (__M_DMw.4 __adr_sig.59 sig_low.83)  <290>;
            (__fch_sig_high.282 var=152) load (__M_DMw.4 __adr_sig.368 sig_high.89)  <295>;
            (__fch_shiftDist.284 var=153) load (__M_DMw.4 __adr_shiftDist.74 shiftDist.120)  <297>;
            (__adr_sig.368 var=188) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_4t0.362)  <438>;
            (__tmp.536 var=201) bool__eq___sint___sint (__fch_shiftDist.284 __ct_0.225)  <662>;
            (__trgt.614 var=318) const ()  <898>;
            () void_br_bool_t13s_s2 (__tmp.536 __trgt.614)  <899>;
            (__either.615 var=308) undefined ()  <900>;
            if {
                {
                    () if_expr (__either.615)  <665>;
                } #194
                {
                } #195 off=19
                {
                    #197 off=15
                    (__apl_ff.539 var=198) __sint__pl___sint___sint (__fch_shiftDist.284 __ct_m32.378)  <666>;
                    (__tmp.540 var=202) bool__lt___sint___sint (__apl_ff.539 __ct_0.225)  <667>;
                    (__trgt.611 var=316) const ()  <893>;
                    () void_br_bool_t13s_s2 (__tmp.540 __trgt.611)  <894>;
                    (__either.612 var=308) undefined ()  <895>;
                    if {
                        {
                            () if_expr (__either.612)  <668>;
                        } #199
                        {
                            (__tmp.541 var=203) __sint__mi___sint___sint (__ct_0.225 __apl_ff.539)  <669>;
                            (__apl_carries.542 var=199) __uint__rs___uint___sint (__fch_sig_low.277 __tmp.541)  <670>;
                            (__apl_r_low.543 var=204) __uint__ls___uint___sint (__fch_sig_low.277 __fch_shiftDist.284)  <671>;
                            (__tmp.544 var=205) __uint__ls___uint___sint (__fch_sig_high.282 __fch_shiftDist.284)  <672>;
                            (__apl_r_high.545 var=206) __uint__or___uint___uint (__tmp.544 __apl_carries.542)  <673>;
                        } #200 off=17
                        {
                            (__apl_r_high.546 var=206) __uint__ls___uint___sint (__fch_sig_low.277 __apl_ff.539)  <674>;
                            (__trgt.613 var=317) const ()  <896>;
                            () void_j_t21s_s2 (__trgt.613)  <897>;
                        } #201 off=16
                        {
                            (__rt_low.547 var=193) merge (__apl_r_low.543 __ct_0.225)  <675>;
                            (__rt_high.548 var=194) merge (__apl_r_high.545 __apl_r_high.546)  <676>;
                        } #202
                    } #198
                    #237 off=18
                    (__trgt.616 var=319) const ()  <901>;
                    () void_j_t21s_s2 (__trgt.616)  <902>;
                } #196
                {
                    (__tmp_low.549 var=271) merge (__fch_sig_low.277 __rt_low.547)  <677>;
                    (__tmp_high.550 var=273) merge (__fch_sig_high.282 __rt_high.548)  <678>;
                } #203
            } #193
            #189 off=20
            (softfloat_roundPackToF64.292 var=159) const ()  <305>;
            (__link.293 var=160) w32_jal_t21s_s2 (softfloat_roundPackToF64.292)  <306>;
            call {
                (__tmp.273 var=146 stl=X off=12) assign (__fch_sign.270)  <286>;
                (__fch_exp.275 var=147 stl=X off=13) assign (__fch_exp.274)  <288>;
                (__tmp_low.287 var=155 stl=X off=14) assign (__tmp_low.549)  <300>;
                (__tmp_high.289 var=156 stl=X off=15) assign (__tmp_high.550)  <302>;
                (__link.294 var=160 stl=X off=1) assign (__link.293)  <307>;
                (__tmp.296 var=162 stl=X off=10 __tmp.300 var=163 stl=X off=11) Fsoftfloat_roundPackToF64 (__link.294 __tmp.273 __fch_exp.275 __tmp_low.287 __tmp_high.289)  <308>;
                (__tmp.297 var=162) deassign (__tmp.296)  <310>;
                (__tmp.301 var=163) deassign (__tmp.300)  <313>;
            } #37 off=21
            #238 off=22
            (__trgt.620 var=321) const ()  <907>;
            () void_j_t21s_s2 (__trgt.620)  <908>;
        } #35
        {
            (uZ.304 var=23) merge (uZ.258 uZ.22)  <317>;
            (__rt_low.349 var=29) merge (__fch_uZ.263 __tmp.297)  <415>;
            (__rt_high.352 var=30) merge (__fch_uZ.268 __tmp.301)  <418>;
        } #39
    } #22
    #42 off=35 nxt=-2
    (__rd___sp.307 var=26) rd_res_reg (__R_SP.11 __sp.54)  <320>;
    (__ct_28s0.308 var=165) const ()  <321>;
    (__tmp.310 var=167) __Pvoid__pl___Pvoid___sint (__rd___sp.307 __ct_28s0.308)  <323>;
    (__R_SP.311 var=12 __sp.312 var=18) wr_res_reg (__tmp.310 __sp.54)  <324>;
    () void___rts_jr_w32 (__la.27)  <325>;
    (__rt_low.314 var=29 stl=X off=10) assign (__rt_low.349)  <327>;
    () out (__rt_low.314)  <328>;
    (__rt_high.316 var=30 stl=X off=11) assign (__rt_high.352)  <330>;
    () out (__rt_high.316)  <331>;
    () sink (__sp.312)  <339>;
    () sink (exp.125)  <341>;
    () sink (sign.94)  <342>;
    () sink (shiftDist.120)  <343>;
    () sink (uZ.304)  <344>;
    () sink (sig_low.83)  <345>;
    () sink (sig_high.89)  <346>;
} #0
0 : 'SoftFloat-3e/source/s_normRoundPackToF64.c';
----------
0 : (0,42:0,0);
3 : (0,43:60,0);
4 : (0,43:60,0);
5 : (0,43:42,0);
6 : (0,43:42,0);
7 : (0,43:31,0);
8 : (0,43:31,0);
9 : (0,48:47,6);
10 : (0,48:16,6);
11 : (0,48:14,7);
12 : (0,48:14,7);
13 : (0,49:8,8);
14 : (0,49:8,8);
15 : (0,50:13,8);
16 : (0,50:27,8);
18 : (0,50:50,9);
19 : (0,50:27,10);
22 : (0,50:4,12);
24 : (0,54:8,13);
26 : (0,51:82,13);
28 : (0,51:84,14);
29 : (0,51:82,15);
32 : (0,51:14,18);
33 : (0,52:8,19);
35 : (0,52:8,22);
37 : (0,54:15,22);
42 : (0,50:4,27);
98 : (0,51:10,17);
141 : (0,51:104,17);
142 : (0,51:104,17);
143 : (0,51:104,17);
144 : (0,51:104,17);
145 : (0,51:104,17);
146 : (0,51:104,17);
147 : (0,51:104,17);
148 : (0,51:104,17);
149 : (0,51:104,17);
150 : (0,51:104,17);
151 : (0,51:104,17);
189 : (0,54:15,22);
192 : (0,54:55,22);
193 : (0,54:55,22);
194 : (0,54:55,22);
195 : (0,54:55,22);
196 : (0,54:55,22);
197 : (0,54:55,22);
198 : (0,54:55,22);
199 : (0,54:55,22);
200 : (0,54:55,22);
201 : (0,54:55,22);
202 : (0,54:55,22);
203 : (0,54:55,22);
215 : (0,51:104,17);
227 : (0,51:82,13);
----------
60 : (0,43:1,0);
61 : (0,43:1,0);
63 : (0,43:1,0);
64 : (0,43:1,0);
67 : (0,43:74,0);
68 : (0,43:74,0);
70 : (0,43:74,0);
72 : (0,43:55,0);
73 : (0,43:55,0);
75 : (0,43:55,0);
77 : (0,43:36,0);
78 : (0,43:36,0);
80 : (0,43:36,0);
82 : (0,45:16,0);
83 : (0,45:16,0);
85 : (0,45:16,0);
87 : (0,46:19,0);
88 : (0,46:19,0);
90 : (0,46:19,0);
93 : (0,43:60,0);
98 : (0,43:60,0);
99 : (0,43:60,0);
100 : (0,43:42,0);
101 : (0,43:42,0);
103 : (0,43:31,0);
104 : (0,43:31,0);
106 : (0,48:47,6);
111 : (0,48:47,6);
114 : (0,48:47,0);
116 : (0,48:47,0);
120 : (0,48:16,6);
121 : (0,48:16,0);
122 : (0,48:16,6);
127 : (0,48:53,6);
129 : (0,48:4,6);
130 : (0,48:14,7);
131 : (0,49:4,7);
132 : (0,49:11,7);
133 : (0,49:8,7);
134 : (0,49:4,7);
135 : (0,49:8,8);
136 : (0,50:13,0);
138 : (0,50:16,8);
163 : (0,50:27,8);
164 : (0,50:46,9);
166 : (0,50:50,0);
168 : (0,50:50,9);
171 : (0,50:27,11);
195 : (0,50:4,12);
196 : (0,51:47,13);
203 : (0,51:78,13);
208 : (0,51:78,13);
236 : (0,51:82,13);
237 : (0,51:84,14);
238 : (0,51:82,0);
240 : (0,51:82,16);
247 : (0,51:101,17);
252 : (0,51:101,17);
254 : (0,51:107,17);
257 : (0,51:117,17);
264 : (0,51:10,17);
269 : (0,51:10,17);
270 : (0,51:14,18);
275 : (0,52:17,18);
280 : (0,52:17,18);
283 : (0,54:41,22);
286 : (0,54:41,0);
287 : (0,54:47,22);
288 : (0,54:47,0);
290 : (0,54:52,22);
295 : (0,54:52,22);
297 : (0,54:57,22);
300 : (0,54:55,0);
302 : (0,54:55,0);
306 : (0,54:15,22);
307 : (0,54:15,0);
308 : (0,54:15,22);
317 : (0,50:4,26);
320 : (0,50:4,0);
321 : (0,50:4,0);
323 : (0,50:4,0);
324 : (0,50:4,27);
325 : (0,50:4,27);
327 : (0,50:4,0);
330 : (0,50:4,0);
419 : (0,48:53,0);
421 : (0,51:117,0);
430 : (0,43:74,0);
434 : (0,46:19,0);
470 : (0,51:52,0);
481 : (0,51:52,13);
532 : (0,51:92,17);
558 : (0,51:58,17);
591 : (0,51:104,17);
594 : (0,51:104,17);
595 : (0,51:104,17);
596 : (0,51:104,17);
597 : (0,51:104,17);
598 : (0,51:104,17);
599 : (0,51:104,17);
600 : (0,51:104,17);
601 : (0,51:104,17);
602 : (0,51:104,17);
603 : (0,51:104,17);
604 : (0,51:104,17);
605 : (0,51:104,17);
606 : (0,51:104,17);
607 : (0,51:104,17);
629 : (0,51:98,17);
662 : (0,54:55,22);
665 : (0,54:55,22);
666 : (0,54:55,22);
667 : (0,54:55,22);
668 : (0,54:55,22);
669 : (0,54:55,22);
670 : (0,54:55,22);
671 : (0,54:55,22);
672 : (0,54:55,22);
673 : (0,54:55,22);
674 : (0,54:55,22);
675 : (0,54:55,22);
676 : (0,54:55,22);
677 : (0,54:55,22);
678 : (0,54:55,22);
716 : (0,51:52,0);
720 : (0,51:92,0);
748 : (0,51:82,13);
850 : (0,50:13,8);
851 : (0,51:82,13);
876 : (0,50:27,8);
879 : (0,51:82,13);
884 : (0,51:104,17);
889 : (0,51:104,17);
894 : (0,54:55,22);
899 : (0,54:55,22);
905 : (0,50:4,12);

