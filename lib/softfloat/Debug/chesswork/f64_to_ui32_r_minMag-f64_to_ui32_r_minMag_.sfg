
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:14:00 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f64_to_ui32_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint_fast32_t f64_to_ui32_r_minMag(float64_t, bool)
Ff64_to_ui32_r_minMag : user_defined, called {
    fnm : "f64_to_ui32_r_minMag" 'unsigned long f64_to_ui32_r_minMag(float64_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=52 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f64_to_ui32_r_minMag typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : exact typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   20 : a typ=w08 val=4t0 bnd=a sz=8 algn=4 stl=DMb tref=float64_t_DMb
   21 : uA typ=w08 val=12t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   22 : uiA typ=w08 val=20t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   23 : exp typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   24 : sig typ=w08 val=32t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   25 : shiftDist typ=w08 val=40t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   26 : sign typ=w08 val=44t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   27 : z typ=w08 val=48t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   28 : a_low typ=w08 bnd=B stl=DMb
   29 : a_high typ=w08 bnd=B stl=DMb
   30 : uiA_low typ=w08 bnd=B stl=DMb
   31 : uiA_high typ=w08 bnd=B stl=DMb
   32 : sig_low typ=w08 bnd=B stl=DMb
   33 : sig_high typ=w08 bnd=B stl=DMb
   34 : __rd___sp typ=w32 bnd=m
   35 : __la typ=w32 bnd=p tref=w32__
   36 : __rt typ=w32 bnd=p tref=uint_fast32_t__
   38 : __arg_a_low typ=w32 bnd=m tref=__uint__
   39 : __arg_a_high typ=w32 bnd=m tref=__uint__
   40 : __arg_exact typ=w32 bnd=p tref=bool__
   42 : __ct_m52S0 typ=w32 val=-52S0 bnd=m
   44 : __tmp typ=w32 bnd=m
   47 : __ct_0t0 typ=w32 val=0t0 bnd=m
   49 : __adr_exact typ=w32 bnd=m adro=19
   51 : __ct_4t0 typ=w32 val=4t0 bnd=m
   53 : __adr_a typ=w32 bnd=m adro=20
   55 : __ct_12t0 typ=w32 val=12t0 bnd=m
   57 : __adr_uA typ=w32 bnd=m adro=21
   59 : __ct_20t0 typ=w32 val=20t0 bnd=m
   61 : __adr_uiA typ=w32 bnd=m adro=22
   63 : __ct_28t0 typ=w32 val=28t0 bnd=m
   65 : __adr_exp typ=w32 bnd=m adro=23
   67 : __ct_32t0 typ=w32 val=32t0 bnd=m
   69 : __adr_sig typ=w32 bnd=m adro=24
   71 : __ct_40t0 typ=w32 val=40t0 bnd=m
   73 : __adr_shiftDist typ=w32 bnd=m adro=25
   75 : __ct_44t0 typ=w32 val=44t0 bnd=m
   77 : __adr_sign typ=w32 bnd=m adro=26
   79 : __ct_48t0 typ=w32 val=48t0 bnd=m
   81 : __adr_z typ=w32 bnd=m adro=27
   89 : __fch_a_low typ=w32 bnd=m
   92 : __fch_a_high typ=w32 bnd=m
   93 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  104 : __fch_uA typ=w32 bnd=m
  107 : __fch_uA typ=w32 bnd=m
  116 : __fch_uiA_high typ=w32 bnd=m
  121 : __ct_2047 typ=w32 val=2047f bnd=m
  123 : __tmp typ=w32 bnd=m
  125 : __fch_uiA_low typ=w32 bnd=m
  128 : __fch_uiA_high typ=w32 bnd=m
  136 : __ct_1075 typ=w32 val=1075f bnd=m
  138 : __fch_exp typ=w32 bnd=m
  139 : __tmp typ=w32 bnd=m
  140 : __ct_53 typ=w32 val=53f bnd=m
  142 : __fch_shiftDist typ=w32 bnd=m
  143 : __tmp typ=bool bnd=m
  150 : __fch_uiA_high typ=w32 bnd=m
  157 : __tmp typ=w32 bnd=m
  158 : __fch_sign typ=w32 bnd=m
  159 : __fch_sign typ=bool bnd=m
  162 : __fch_shiftDist typ=w32 bnd=m
  163 : __ct_21 typ=w32 val=21f bnd=m
  165 : __tmp typ=bool bnd=m
  166 : __tmp typ=bool bnd=m
  167 : __fch_exp typ=w32 bnd=m
  170 : __tmp typ=bool bnd=m
  172 : __fch_sig_low typ=w32 bnd=m
  175 : __fch_sig_high typ=w32 bnd=m
  181 : __tmp typ=bool bnd=m
  182 : __ct_4294967295 typ=w32 val=-1f bnd=m
  184 : __fch_sign typ=w32 bnd=m
  185 : __fch_sign typ=bool bnd=m
  190 : __tmp typ=w32 bnd=m
  191 : __tmp typ=w32 bnd=m
  193 : __fch_sig_low typ=w32 bnd=m
  196 : __fch_sig_high typ=w32 bnd=m
  205 : __fch_sig_low typ=w32 bnd=m
  208 : __fch_sig_high typ=w32 bnd=m
  209 : __fch_shiftDist typ=w32 bnd=m
  214 : __ct_52s0 typ=w32 val=52s0 bnd=m
  216 : __tmp typ=w32 bnd=m
  245 : __ct_36t0 typ=w32 val=36t0 bnd=m
  246 : __adr_sig typ=w32 bnd=m adro=24
  247 : __adr_sig typ=w32 bnd=m adro=24
  248 : __adr_sig typ=w32 bnd=m adro=24
  249 : __adr_sig typ=w32 bnd=m adro=24
  250 : __ct_24t0 typ=w32 val=24t0 bnd=m
  251 : __adr_uiA typ=w32 bnd=m adro=22
  252 : __ct_8t0 typ=w32 val=8t0 bnd=m
  253 : __adr_a typ=w32 bnd=m adro=20
  254 : __adr_a typ=w32 bnd=m adro=20
  255 : __ct_16t0 typ=w32 val=16t0 bnd=m
  256 : __adr_uA typ=w32 bnd=m adro=21
  257 : __adr_uA typ=w32 bnd=m adro=21
  258 : __adr_uiA typ=w32 bnd=m adro=22
  259 : __adr_uiA typ=w32 bnd=m adro=22
  260 : __adr_uiA typ=w32 bnd=m adro=22
  261 : __adr_sig typ=w32 bnd=m adro=24
  264 : __rt_low typ=w32 bnd=m tref=__uint__
  269 : __apl_ff typ=w32 bnd=m tref=__sint__
  270 : __apl_carries typ=w32 bnd=m tref=__uint__
  272 : __tmp typ=bool bnd=m
  273 : __tmp typ=bool bnd=m
  274 : __tmp typ=w32 bnd=m
  275 : __tmp typ=w32 bnd=m
  276 : __apl_r_low typ=w32 bnd=m tref=__uint__
  279 : __ct_m32 typ=w32 val=-32f bnd=m
  294 : __tmp_high typ=w32 bnd=m
  332 : __tmp_high typ=w32 bnd=m
  338 : __tmp_low typ=w32 bnd=m
  346 : __ct_20 typ=w32 val=20f bnd=m
  348 : __ct_31 typ=w32 val=31f bnd=m
  350 : __ct_1048575 typ=w32 val=1048575f bnd=m
  351 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  354 : __tmpd typ=w32 bnd=m
  355 : __tmp typ=bool bnd=m
  377 : __true typ=bool val=1f bnd=m
  378 : __false typ=bool val=0f bnd=m
  379 : __either typ=bool bnd=m
  380 : __trgt typ=t13s_s2 val=0j bnd=m
  381 : __trgt typ=t13s_s2 val=0j bnd=m
  382 : __trgt typ=t13s_s2 val=0j bnd=m
  383 : __trgt typ=t21s_s2 val=0j bnd=m
  384 : __trgt typ=t13s_s2 val=0j bnd=m
  385 : __trgt typ=t21s_s2 val=0j bnd=m
  386 : __trgt typ=t13s_s2 val=0j bnd=m
  387 : __trgt typ=t21s_s2 val=0j bnd=m
  388 : __trgt typ=t13s_s2 val=0j bnd=m
  389 : __trgt typ=t21s_s2 val=0j bnd=m
  390 : __trgt typ=t13s_s2 val=0j bnd=m
  391 : __trgt typ=t21s_s2 val=0j bnd=m
  392 : __trgt typ=t13s_s2 val=0j bnd=m
  393 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_to_ui32_r_minMag {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (exact.18 var=19) source ()  <29>;
    (uA.20 var=21) source ()  <31>;
    (exp.22 var=23) source ()  <33>;
    (shiftDist.24 var=25) source ()  <35>;
    (sign.25 var=26) source ()  <36>;
    (z.26 var=27) source ()  <37>;
    (a_low.27 var=28) source ()  <38>;
    (a_high.28 var=29) source ()  <39>;
    (uiA_low.29 var=30) source ()  <40>;
    (uiA_high.30 var=31) source ()  <41>;
    (sig_low.31 var=32) source ()  <42>;
    (sig_high.32 var=33) source ()  <43>;
    (__la.34 var=35 stl=X off=1) inp ()  <45>;
    (__la.35 var=35) deassign (__la.34)  <46>;
    (__arg_a_low.39 var=38 stl=X off=11) inp ()  <50>;
    (__arg_a_low.40 var=38) deassign (__arg_a_low.39)  <51>;
    (__arg_a_high.43 var=39 stl=X off=12) inp ()  <54>;
    (__arg_a_high.44 var=39) deassign (__arg_a_high.43)  <55>;
    (__arg_exact.47 var=40 stl=X off=13) inp ()  <58>;
    (__arg_exact.48 var=40) deassign (__arg_exact.47)  <59>;
    (__rd___sp.50 var=34) rd_res_reg (__R_SP.11 __sp.17)  <61>;
    (__ct_m52S0.51 var=42) const ()  <62>;
    (__tmp.53 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_m52S0.51)  <64>;
    (__R_SP.54 var=12 __sp.55 var=18) wr_res_reg (__tmp.53 __sp.17)  <65>;
    (__rd___sp.57 var=34) rd_res_reg (__R_SP.11 __sp.55)  <68>;
    (__ct_0t0.58 var=47) const ()  <69>;
    (__adr_exact.60 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.57 __ct_0t0.58)  <71>;
    (__rd___sp.62 var=34) rd_res_reg (__R_SP.11 __sp.55)  <73>;
    (__rd___sp.67 var=34) rd_res_reg (__R_SP.11 __sp.55)  <78>;
    (__rd___sp.72 var=34) rd_res_reg (__R_SP.11 __sp.55)  <83>;
    (__rd___sp.77 var=34) rd_res_reg (__R_SP.11 __sp.55)  <88>;
    (__rd___sp.82 var=34) rd_res_reg (__R_SP.11 __sp.55)  <93>;
    (__rd___sp.87 var=34) rd_res_reg (__R_SP.11 __sp.55)  <98>;
    (__rd___sp.92 var=34) rd_res_reg (__R_SP.11 __sp.55)  <103>;
    (__rd___sp.97 var=34) rd_res_reg (__R_SP.11 __sp.55)  <108>;
    (__M_DMw.103 var=5 exact.104 var=19) store (__arg_exact.48 __adr_exact.60 exact.18)  <114>;
    call {
        () chess_separator_scheduler ()  <115>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.63 var=51) const ()  <74>;
    (__adr_a.65 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_4t0.63)  <76>;
    (__M_DMw.106 var=5 a_low.107 var=28) store (__arg_a_low.40 __adr_a.65 a_low.27)  <117>;
    (__M_DMw.112 var=5 a_high.113 var=29) store (__arg_a_high.44 __adr_a.589 a_high.28)  <122>;
    (__ct_8t0.588 var=252) const ()  <691>;
    (__adr_a.589 var=253) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_8t0.588)  <693>;
    call {
        () chess_separator_scheduler ()  <127>;
    } #8 off=3
    #9 off=4
    (__ct_12t0.68 var=55) const ()  <79>;
    (__adr_uA.70 var=57) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_12t0.68)  <81>;
    (__fch_a_low.118 var=89) load (__M_DMw.4 __adr_a.65 a_low.107)  <129>;
    (__fch_a_high.123 var=92) load (__M_DMw.4 __adr_a.590 a_high.113)  <134>;
    (__M_DMw.129 var=5 uA.130 var=21) store (__fch_a_low.118 __adr_uA.70 uA.20)  <140>;
    (__M_DMw.135 var=5 uA.136 var=21) store (__fch_a_high.123 __adr_uA.592 uA.130)  <145>;
    (__adr_a.590 var=254) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_8t0.588)  <694>;
    (__ct_16t0.591 var=255) const ()  <695>;
    (__adr_uA.592 var=256) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_16t0.591)  <697>;
    call {
        () chess_separator_scheduler ()  <146>;
    } #10 off=5
    #11 off=6
    (__ct_20t0.73 var=59) const ()  <84>;
    (__adr_uiA.75 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_20t0.73)  <86>;
    (__fch_uA.141 var=104) load (__M_DMw.4 __adr_uA.70 uA.136)  <151>;
    (__fch_uA.146 var=107) load (__M_DMw.4 __adr_uA.593 uA.136)  <156>;
    (__M_DMw.149 var=5 uiA_low.150 var=30) store (__fch_uA.141 __adr_uiA.75 uiA_low.29)  <159>;
    (__M_DMw.155 var=5 uiA_high.156 var=31) store (__fch_uA.146 __adr_uiA.594 uiA_high.30)  <164>;
    (__ct_24t0.586 var=250) const ()  <688>;
    (__adr_uA.593 var=257) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_16t0.591)  <698>;
    (__adr_uiA.594 var=258) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_24t0.586)  <699>;
    call {
        () chess_separator_scheduler ()  <165>;
    } #12 off=7
    #254 off=8
    (__ct_28t0.78 var=63) const ()  <89>;
    (__adr_exp.80 var=65) __Pvoid__pl___Pvoid___sint (__rd___sp.77 __ct_28t0.78)  <91>;
    (__fch_uiA_high.163 var=116) load (__M_DMw.4 __adr_uiA.595 uiA_high.156)  <172>;
    (__ct_2047.169 var=121) const ()  <178>;
    (__tmp.171 var=123) __sint__ad___sint___sint (__apl_r_low.614 __ct_2047.169)  <180>;
    (__M_DMw.172 var=5 exp.173 var=23) store (__tmp.171 __adr_exp.80 exp.22)  <181>;
    (__adr_uiA.595 var=259) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_24t0.586)  <700>;
    (__apl_r_low.614 var=276) __uint__rs___uint___sint (__fch_uiA_high.163 __ct_20.746)  <752>;
    (__ct_20.746 var=346) const ()  <946>;
    call {
        () chess_separator_scheduler ()  <182>;
    } #14 off=9
    #136 off=10
    (__ct_32t0.83 var=67) const ()  <94>;
    (__adr_sig.85 var=69) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_32t0.83)  <96>;
    (__fch_uiA_low.175 var=125) load (__M_DMw.4 __adr_uiA.75 uiA_low.150)  <184>;
    (__fch_uiA_high.180 var=128) load (__M_DMw.4 __adr_uiA.596 uiA_high.156)  <189>;
    (__M_DMw.186 var=5 sig_low.187 var=32) store (__fch_uiA_low.175 __adr_sig.85 sig_low.31)  <195>;
    (__M_DMw.192 var=5 sig_high.193 var=33) store (__tmp_high.633 __adr_sig.597 sig_high.32)  <200>;
    (__ct_36t0.581 var=245) const ()  <682>;
    (__adr_uiA.596 var=260) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_24t0.586)  <701>;
    (__adr_sig.597 var=261) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.581)  <702>;
    (__tmp_high.633 var=294) __uint__ad___uint___uint (__fch_uiA_high.180 __ct_1048575.750)  <775>;
    (__ct_1048575.750 var=350) const ()  <954>;
    call {
        () chess_separator_scheduler ()  <201>;
    } #16 off=11
    #17 off=12
    (__ct_40t0.88 var=71) const ()  <99>;
    (__adr_shiftDist.90 var=73) __Pvoid__pl___Pvoid___sint (__rd___sp.87 __ct_40t0.88)  <101>;
    (__ct_1075.194 var=136) const ()  <202>;
    (__fch_exp.196 var=138) load (__M_DMw.4 __adr_exp.80 exp.173)  <204>;
    (__tmp.197 var=139) __sint__mi___sint___sint (__ct_1075.194 __fch_exp.196)  <205>;
    (__M_DMw.198 var=5 shiftDist.199 var=25) store (__tmp.197 __adr_shiftDist.90 shiftDist.24)  <206>;
    call {
        () chess_separator_scheduler ()  <207>;
    } #18 off=13
    #19 off=14
    (__ct_0.125 var=93) const ()  <136>;
    (__ct_53.200 var=140) const ()  <208>;
    (__fch_shiftDist.202 var=142) load (__M_DMw.4 __adr_shiftDist.90 shiftDist.199)  <210>;
    (__tmp.203 var=143) bool__ge___sint___sint (__fch_shiftDist.202 __ct_53.200)  <211>;
    (__trgt.802 var=392) const ()  <1174>;
    () void_br_bool_t13s_s2 (__tmp.203 __trgt.802)  <1175>;
    (__either.803 var=379) undefined ()  <1176>;
    if {
        {
            () if_expr (__either.803)  <246>;
        } #21
        {
        } #24 off=39
        {
            #78 off=15
            (__ct_44t0.93 var=75) const ()  <104>;
            (__adr_sign.95 var=77) __Pvoid__pl___Pvoid___sint (__rd___sp.92 __ct_44t0.93)  <106>;
            (__fch_uiA_high.246 var=150) load (__M_DMw.4 __adr_uiA.587 uiA_high.156)  <256>;
            (__M_DMw.255 var=5 sign.256 var=26) store (__tmp.760 __adr_sign.95 sign.25)  <265>;
            (__adr_uiA.587 var=251) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_24t0.586)  <690>;
            (__apl_r_low.659 var=276) __uint__rs___uint___sint (__fch_uiA_high.246 __ct_31.748)  <807>;
            (__ct_31.748 var=348) const ()  <950>;
            (__tmp.760 var=157) __sint_sne0___sint (__apl_r_low.659)  <997>;
            call {
                () chess_separator_scheduler ()  <266>;
            } #27 off=16
            #92 off=17
            (__fch_sign.257 var=158) load (__M_DMw.4 __adr_sign.95 sign.256)  <267>;
            (__fch_sign.560 var=159) bool__ne___sint___sint (__fch_sign.257 __ct_0.125)  <629>;
            (__trgt.781 var=380) const ()  <1141>;
            () void_br_bool_t13s_s2 (__fch_sign.560 __trgt.781)  <1142>;
            (__either.782 var=379) undefined ()  <1143>;
            if {
                {
                    () if_expr (__either.782)  <303>;
                } #30
                {
                    (__true.798 var=377) const ()  <1168>;
                } #31
                {
                    (__fch_shiftDist.295 var=162) load (__M_DMw.4 __adr_shiftDist.90 shiftDist.199)  <306>;
                    (__ct_21.296 var=163) const ()  <307>;
                    (__tmp.298 var=165) bool__lt___sint___sint (__fch_shiftDist.295 __ct_21.296)  <309>;
                    (__trgt.799 var=390) const ()  <1169>;
                    () void_br_bool_t13s_s2 (__tmp.298 __trgt.799)  <1170>;
                    (__either.800 var=379) undefined ()  <1171>;
                } #32 off=18
                {
                    (__tmp.299 var=166) merge (__true.798 __either.800)  <310>;
                } #33
            } #29
            if {
                {
                    () if_expr (__tmp.299)  <345>;
                } #36
                {
                    #38 off=30
                    (__fch_exp.334 var=167) load (__M_DMw.4 __adr_exp.80 exp.173)  <346>;
                    (__ct_4294967295.420 var=182) const ()  <434>;
                    (__tmp.778 var=170) bool__ne___sint___sint (__fch_exp.334 __ct_2047.169)  <1110>;
                    (__trgt.783 var=381) const ()  <1144>;
                    () void_br_bool_t13s_s2 (__tmp.778 __trgt.783)  <1145>;
                    (__either.784 var=379) undefined ()  <1146>;
                    if {
                        {
                            () if_expr (__either.784)  <384>;
                        } #40
                        {
                            (__false.788 var=378) const ()  <1152>;
                        } #42
                        {
                            (__fch_sig_low.373 var=172) load (__M_DMw.4 __adr_sig.85 sig_low.187)  <386>;
                            (__fch_sig_high.378 var=175) load (__M_DMw.4 __adr_sig.582 sig_high.193)  <391>;
                            (__adr_sig.582 var=246) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.581)  <684>;
                            (__tmpd.754 var=354) __uint__or___uint___uint (__fch_sig_high.378 __fch_sig_low.373)  <990>;
                            (__tmp.755 var=355) bool__ne___uint___uint (__tmpd.754 __ct_0.125)  <991>;
                            (__trgt.789 var=384) const ()  <1153>;
                            () void_br_bool_t13s_s2 (__tmp.755 __trgt.789)  <1154>;
                            (__either.790 var=379) undefined ()  <1155>;
                        } #189 off=31
                        {
                            (__tmp.385 var=181) merge (__false.788 __either.790)  <398>;
                        } #43
                    } #39
                    if {
                        {
                            () if_expr (__tmp.385)  <433>;
                        } #46
                        {
                        } #47 off=36
                        {
                            #97 off=32
                            (__fch_sign.422 var=184) load (__M_DMw.4 __adr_sign.95 sign.256)  <436>;
                            (__fch_sign.564 var=185) bool__ne___sint___sint (__fch_sign.422 __ct_0.125)  <636>;
                            (__trgt.785 var=382) const ()  <1147>;
                            () void_br_bool_t13s_s2 (__fch_sign.564 __trgt.785)  <1148>;
                            (__either.786 var=379) undefined ()  <1149>;
                            if {
                                {
                                    () if_expr (__either.786)  <472>;
                                } #51
                                {
                                } #52 off=34
                                {
                                    (__trgt.787 var=383) const ()  <1150>;
                                    () void_j_t21s_s2 (__trgt.787)  <1151>;
                                } #53 off=33
                                {
                                    (__tmp.462 var=190) merge (__ct_0.125 __ct_4294967295.420)  <477>;
                                } #54
                            } #50
                            #270 off=35
                            (__trgt.791 var=385) const ()  <1156>;
                            () void_j_t21s_s2 (__trgt.791)  <1157>;
                        } #48
                        {
                            (__tmp.463 var=191) merge (__ct_4294967295.420 __tmp.462)  <478>;
                        } #55
                    } #45
                } #37
                {
                    #208 off=19
                    (__fch_sig_low.465 var=193) load (__M_DMw.4 __adr_sig.85 sig_low.187)  <481>;
                    (__fch_sig_high.470 var=196) load (__M_DMw.4 __adr_sig.583 sig_high.193)  <486>;
                    (__M_DMw.476 var=5 sig_low.477 var=32) store (__fch_sig_low.465 __adr_sig.85 sig_low.187)  <492>;
                    (__M_DMw.482 var=5 sig_high.483 var=33) store (__tmp_high.704 __adr_sig.584 sig_high.193)  <497>;
                    (__adr_sig.583 var=247) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.581)  <685>;
                    (__adr_sig.584 var=248) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.581)  <686>;
                    (__tmp_high.704 var=332) __uint__or___uint___uint (__fch_sig_high.470 __ct_1048576.751)  <864>;
                    (__ct_1048576.751 var=351) const ()  <956>;
                    call {
                        () chess_separator_scheduler ()  <498>;
                    } #59 off=20
                    #224 off=21
                    (__fch_sig_low.485 var=205) load (__M_DMw.4 __adr_sig.85 sig_low.477)  <500>;
                    (__fch_sig_high.490 var=208) load (__M_DMw.4 __adr_sig.585 sig_high.483)  <505>;
                    (__fch_shiftDist.492 var=209) load (__M_DMw.4 __adr_shiftDist.90 shiftDist.199)  <507>;
                    (__adr_sig.585 var=249) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.581)  <687>;
                    (__tmp.720 var=272) bool__eq___sint___sint (__fch_shiftDist.492 __ct_0.125)  <884>;
                    (__trgt.795 var=388) const ()  <1163>;
                    () void_br_bool_t13s_s2 (__tmp.720 __trgt.795)  <1164>;
                    (__either.796 var=379) undefined ()  <1165>;
                    if {
                        {
                            () if_expr (__either.796)  <887>;
                        } #226
                        {
                        } #227 off=26
                        {
                            #229 off=22
                            (__ct_m32.605 var=279) const ()  <741>;
                            (__apl_ff.723 var=269) __sint__pl___sint___sint (__fch_shiftDist.492 __ct_m32.605)  <888>;
                            (__tmp.724 var=273) bool__lt___sint___sint (__apl_ff.723 __ct_0.125)  <889>;
                            (__trgt.792 var=386) const ()  <1158>;
                            () void_br_bool_t13s_s2 (__tmp.724 __trgt.792)  <1159>;
                            (__either.793 var=379) undefined ()  <1160>;
                            if {
                                {
                                    () if_expr (__either.793)  <890>;
                                } #231
                                {
                                    (__tmp.725 var=274) __sint__mi___sint___sint (__ct_0.125 __apl_ff.723)  <891>;
                                    (__apl_carries.726 var=270) __uint__ls___uint___sint (__fch_sig_high.490 __tmp.725)  <892>;
                                    (__tmp.727 var=275) __uint__rs___uint___sint (__fch_sig_low.485 __fch_shiftDist.492)  <893>;
                                    (__apl_r_low.728 var=276) __uint__or___uint___uint (__tmp.727 __apl_carries.726)  <894>;
                                } #232 off=24
                                {
                                    (__apl_r_low.730 var=276) __uint__rs___uint___sint (__fch_sig_high.490 __apl_ff.723)  <896>;
                                    (__trgt.794 var=387) const ()  <1161>;
                                    () void_j_t21s_s2 (__trgt.794)  <1162>;
                                } #233 off=23
                                {
                                    (__rt_low.731 var=264) merge (__apl_r_low.728 __apl_r_low.730)  <897>;
                                } #234
                            } #230
                            #272 off=25
                            (__trgt.797 var=389) const ()  <1166>;
                            () void_j_t21s_s2 (__trgt.797)  <1167>;
                        } #228
                        {
                            (__tmp_low.733 var=338) merge (__fch_sig_low.485 __rt_low.731)  <899>;
                        } #235
                    } #225
                    #262 off=27
                    (__ct_48t0.98 var=79) const ()  <109>;
                    (__adr_z.100 var=81) __Pvoid__pl___Pvoid___sint (__rd___sp.97 __ct_48t0.98)  <111>;
                    (__M_DMw.495 var=5 z.496 var=27) store (__tmp_low.733 __adr_z.100 z.26)  <510>;
                    call {
                        () chess_separator_scheduler ()  <511>;
                    } #61 off=28
                    #62 off=29
                    (__rt.497 var=36) load (__M_DMw.4 __adr_z.100 z.496)  <512>;
                    (__trgt.801 var=391) const ()  <1172>;
                    () void_j_t21s_s2 (__trgt.801)  <1173>;
                } #57
                {
                    (z.498 var=27) merge (z.26 z.496)  <514>;
                    (sig_low.499 var=32) merge (sig_low.187 sig_low.477)  <515>;
                    (sig_high.500 var=33) merge (sig_high.193 sig_high.483)  <516>;
                    (__rt.501 var=36) merge (__tmp.463 __rt.497)  <517>;
                } #64
            } #35
            #273 off=38
            (__trgt.804 var=393) const ()  <1177>;
            () void_j_t21s_s2 (__trgt.804)  <1178>;
        } #25
        {
            (sign.502 var=26) merge (sign.25 sign.256)  <518>;
            (z.503 var=27) merge (z.26 z.498)  <519>;
            (sig_low.504 var=32) merge (sig_low.187 sig_low.499)  <520>;
            (sig_high.505 var=33) merge (sig_high.193 sig_high.500)  <521>;
            (__rt.506 var=36) merge (__ct_0.125 __rt.501)  <522>;
        } #65
    } #20
    #68 off=40 nxt=-2
    (__rd___sp.508 var=34) rd_res_reg (__R_SP.11 __sp.55)  <524>;
    (__ct_52s0.509 var=214) const ()  <525>;
    (__tmp.511 var=216) __Pvoid__pl___Pvoid___sint (__rd___sp.508 __ct_52s0.509)  <527>;
    (__R_SP.512 var=12 __sp.513 var=18) wr_res_reg (__tmp.511 __sp.55)  <528>;
    () void___rts_jr_w32 (__la.35)  <529>;
    (__rt.514 var=36 stl=X off=10) assign (__rt.506)  <530>;
    () out (__rt.514)  <531>;
    () sink (__sp.513)  <539>;
    () sink (exact.104)  <540>;
    () sink (uA.136)  <542>;
    () sink (exp.173)  <544>;
    () sink (shiftDist.199)  <546>;
    () sink (sign.502)  <547>;
    () sink (z.503)  <548>;
    () sink (a_low.107)  <549>;
    () sink (a_high.113)  <550>;
    () sink (uiA_low.150)  <551>;
    () sink (uiA_high.156)  <552>;
    () sink (sig_low.504)  <553>;
    () sink (sig_high.505)  <554>;
} #0
0 : 'SoftFloat-3e/source/f64_to_ui32_r_minMag.c';
----------
0 : (0,44:0,0);
3 : (0,44:49,0);
4 : (0,44:49,0);
5 : (0,44:36,0);
8 : (0,47:4,4);
9 : (0,59:9,12);
10 : (0,59:9,12);
11 : (0,60:8,13);
12 : (0,60:8,13);
14 : (0,61:8,14);
16 : (0,62:8,15);
17 : (0,65:14,16);
18 : (0,65:14,16);
19 : (0,66:12,16);
20 : (0,66:4,16);
24 : (0,72:8,18);
25 : (0,72:8,20);
27 : (0,76:9,22);
29 : (0,77:14,22);
31 : (0,77:14,23);
32 : (0,77:28,24);
35 : (0,77:4,26);
37 : (0,77:36,27);
38 : (0,82:17,27);
39 : (0,82:27,27);
42 : (0,82:27,29);
45 : (0,82:34,31);
47 : (0,82:36,32);
48 : (0,83:8,33);
50 : (0,83:8,33);
52 : (0,83:8,34);
53 : (0,83:14,35);
57 : (0,81:8,42);
59 : (0,87:8,44);
61 : (0,88:6,45);
62 : (0,94:4,46);
68 : (0,94:4,52);
78 : (0,76:4,21);
92 : (0,77:9,22);
97 : (0,83:3,33);
136 : (0,62:4,14);
189 : (0,82:27,28);
208 : (0,87:4,43);
224 : (0,88:11,44);
225 : (0,88:11,44);
226 : (0,88:11,44);
227 : (0,88:11,44);
228 : (0,88:11,44);
229 : (0,88:11,44);
230 : (0,88:11,44);
231 : (0,88:11,44);
232 : (0,88:11,44);
233 : (0,88:11,44);
234 : (0,88:11,44);
235 : (0,88:11,44);
254 : (0,61:4,13);
262 : (0,88:4,44);
----------
61 : (0,44:14,0);
62 : (0,44:14,0);
64 : (0,44:14,0);
65 : (0,44:14,0);
68 : (0,44:54,0);
69 : (0,44:54,0);
71 : (0,44:54,0);
73 : (0,44:46,0);
74 : (0,44:46,0);
76 : (0,44:46,0);
78 : (0,49:19,0);
79 : (0,49:19,0);
81 : (0,49:19,0);
83 : (0,50:18,0);
84 : (0,50:18,0);
86 : (0,50:18,0);
88 : (0,51:17,0);
89 : (0,51:17,0);
91 : (0,51:17,0);
93 : (0,52:18,0);
94 : (0,52:18,0);
96 : (0,52:18,0);
98 : (0,53:17,0);
99 : (0,53:17,0);
101 : (0,53:17,0);
103 : (0,54:9,0);
104 : (0,54:9,0);
106 : (0,54:9,0);
108 : (0,55:18,0);
109 : (0,55:18,0);
111 : (0,55:18,0);
114 : (0,44:49,0);
115 : (0,44:49,0);
117 : (0,44:36,0);
122 : (0,44:36,0);
127 : (0,47:4,4);
129 : (0,59:11,11);
134 : (0,59:11,11);
136 : (0,59:6,0);
140 : (0,59:6,11);
145 : (0,59:6,11);
146 : (0,59:9,12);
151 : (0,60:12,12);
156 : (0,60:12,12);
159 : (0,60:4,12);
164 : (0,60:4,12);
165 : (0,60:8,13);
172 : (0,61:28,13);
178 : (0,61:38,0);
180 : (0,61:38,13);
181 : (0,61:4,13);
182 : (0,61:8,14);
184 : (0,62:12,14);
189 : (0,62:12,14);
195 : (0,62:4,14);
200 : (0,62:4,14);
201 : (0,62:8,15);
202 : (0,65:22,0);
204 : (0,65:24,15);
205 : (0,65:22,15);
206 : (0,65:4,15);
207 : (0,65:14,16);
208 : (0,66:12,0);
210 : (0,66:15,16);
211 : (0,66:12,16);
246 : (0,66:4,16);
256 : (0,76:32,21);
265 : (0,76:4,21);
266 : (0,76:9,22);
267 : (0,77:9,22);
303 : (0,77:14,22);
306 : (0,77:18,24);
307 : (0,77:28,0);
309 : (0,77:28,24);
310 : (0,77:14,25);
345 : (0,77:4,26);
346 : (0,82:13,27);
384 : (0,82:27,27);
386 : (0,82:30,28);
391 : (0,82:30,28);
398 : (0,82:27,30);
433 : (0,82:34,31);
434 : (0,82:36,0);
436 : (0,83:3,33);
472 : (0,83:8,33);
477 : (0,83:8,36);
478 : (0,82:34,38);
481 : (0,87:4,43);
486 : (0,87:4,43);
492 : (0,87:4,43);
497 : (0,87:4,43);
498 : (0,87:8,44);
500 : (0,88:8,44);
505 : (0,88:8,44);
507 : (0,88:13,44);
510 : (0,88:4,44);
511 : (0,88:6,45);
512 : (0,94:11,45);
514 : (0,77:4,48);
515 : (0,77:4,48);
516 : (0,77:4,48);
517 : (0,77:4,48);
518 : (0,66:4,51);
519 : (0,66:4,51);
520 : (0,66:4,51);
521 : (0,66:4,51);
522 : (0,66:4,51);
524 : (0,94:4,0);
525 : (0,94:4,0);
527 : (0,94:4,0);
528 : (0,94:4,52);
529 : (0,94:4,52);
530 : (0,94:4,0);
629 : (0,77:9,22);
636 : (0,83:3,33);
682 : (0,52:18,0);
688 : (0,50:18,0);
691 : (0,44:46,0);
695 : (0,49:19,0);
741 : (0,61:32,0);
752 : (0,61:32,13);
775 : (0,62:17,14);
807 : (0,76:36,21);
864 : (0,87:8,43);
884 : (0,88:11,44);
887 : (0,88:11,44);
888 : (0,88:11,44);
889 : (0,88:11,44);
890 : (0,88:11,44);
891 : (0,88:11,44);
892 : (0,88:11,44);
893 : (0,88:11,44);
894 : (0,88:11,44);
896 : (0,88:11,44);
897 : (0,88:11,44);
899 : (0,88:11,44);
946 : (0,61:32,0);
950 : (0,76:36,0);
954 : (0,62:19,0);
956 : (0,87:11,0);
990 : (0,82:27,28);
991 : (0,82:27,28);
997 : (0,76:4,21);
1110 : (0,82:17,27);
1142 : (0,77:14,22);
1145 : (0,82:27,27);
1148 : (0,83:8,33);
1154 : (0,82:34,31);
1159 : (0,88:11,44);
1164 : (0,88:11,44);
1170 : (0,77:4,26);
1175 : (0,66:4,16);

