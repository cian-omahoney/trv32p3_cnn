
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 17:53:48 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f64_to_ui64_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint_fast64_t f64_to_ui64_r_minMag(float64_t, bool)
Ff64_to_ui64_r_minMag : user_defined, called {
    fnm : "f64_to_ui64_r_minMag" 'unsigned long long f64_to_ui64_r_minMag(float64_t, bool)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
    frm : ( l=56 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f64_to_ui64_r_minMag typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : exact typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   20 : a typ=w08 val=4t0 bnd=a sz=8 algn=4 stl=DMb tref=float64_t_DMb
   21 : uA typ=w08 val=12t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   22 : uiA typ=w08 val=20t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   23 : exp typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   24 : sig typ=w08 val=32t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   25 : shiftDist typ=w08 val=40t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   26 : sign typ=w08 val=44t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   27 : z typ=w08 val=48t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   28 : a_low typ=w08 bnd=B stl=DMb
   29 : a_high typ=w08 bnd=B stl=DMb
   30 : uiA_low typ=w08 bnd=B stl=DMb
   31 : uiA_high typ=w08 bnd=B stl=DMb
   32 : sig_low typ=w08 bnd=B stl=DMb
   33 : sig_high typ=w08 bnd=B stl=DMb
   34 : z_low typ=w08 bnd=B stl=DMb
   35 : z_high typ=w08 bnd=B stl=DMb
   36 : __rd___sp typ=w32 bnd=m
   37 : __la typ=w32 bnd=p tref=w32__
   39 : __rt_low typ=w32 bnd=m tref=__uint__
   40 : __rt_high typ=w32 bnd=m tref=__uint__
   42 : __arg_a_low typ=w32 bnd=m tref=__uint__
   43 : __arg_a_high typ=w32 bnd=m tref=__uint__
   44 : __arg_exact typ=w32 bnd=p tref=bool__
   46 : __ct_m56S0 typ=w32 val=-56S0 bnd=m
   48 : __tmp typ=w32 bnd=m
   51 : __ct_0t0 typ=w32 val=0t0 bnd=m
   53 : __adr_exact typ=w32 bnd=m adro=19
   55 : __ct_4t0 typ=w32 val=4t0 bnd=m
   57 : __adr_a typ=w32 bnd=m adro=20
   59 : __ct_12t0 typ=w32 val=12t0 bnd=m
   61 : __adr_uA typ=w32 bnd=m adro=21
   63 : __ct_20t0 typ=w32 val=20t0 bnd=m
   65 : __adr_uiA typ=w32 bnd=m adro=22
   67 : __ct_28t0 typ=w32 val=28t0 bnd=m
   69 : __adr_exp typ=w32 bnd=m adro=23
   71 : __ct_32t0 typ=w32 val=32t0 bnd=m
   73 : __adr_sig typ=w32 bnd=m adro=24
   75 : __ct_40t0 typ=w32 val=40t0 bnd=m
   77 : __adr_shiftDist typ=w32 bnd=m adro=25
   79 : __ct_44t0 typ=w32 val=44t0 bnd=m
   81 : __adr_sign typ=w32 bnd=m adro=26
   83 : __ct_48t0 typ=w32 val=48t0 bnd=m
   85 : __adr_z typ=w32 bnd=m adro=27
   93 : __fch_a_low typ=w32 bnd=m
   96 : __fch_a_high typ=w32 bnd=m
   97 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  108 : __fch_uA typ=w32 bnd=m
  111 : __fch_uA typ=w32 bnd=m
  120 : __fch_uiA_high typ=w32 bnd=m
  125 : __ct_2047 typ=w32 val=2047f bnd=m
  127 : __tmp typ=w32 bnd=m
  129 : __fch_uiA_low typ=w32 bnd=m
  132 : __fch_uiA_high typ=w32 bnd=m
  140 : __ct_1075 typ=w32 val=1075f bnd=m
  142 : __fch_exp typ=w32 bnd=m
  143 : __tmp typ=w32 bnd=m
  144 : __ct_53 typ=w32 val=53f bnd=m
  146 : __fch_shiftDist typ=w32 bnd=m
  147 : __tmp typ=bool bnd=m
  154 : __fch_uiA_high typ=w32 bnd=m
  161 : __tmp typ=w32 bnd=m
  162 : __fch_sign typ=w32 bnd=m
  163 : __fch_sign typ=bool bnd=m
  164 : __fch_exp typ=w32 bnd=m
  167 : __tmp typ=bool bnd=m
  169 : __fch_sig_low typ=w32 bnd=m
  172 : __fch_sig_high typ=w32 bnd=m
  178 : __tmp typ=bool bnd=m
  181 : __fch_sign typ=w32 bnd=m
  182 : __fch_sign typ=bool bnd=m
  189 : __fch_shiftDist typ=w32 bnd=m
  192 : __tmp typ=bool bnd=m
  193 : __fch_shiftDist typ=w32 bnd=m
  194 : __ct_m11 typ=w32 val=-11f bnd=m
  196 : __tmp typ=bool bnd=m
  198 : __fch_sig_low typ=w32 bnd=m
  201 : __fch_sig_high typ=w32 bnd=m
  207 : __fch_shiftDist typ=w32 bnd=m
  208 : __tmp typ=w32 bnd=m
  215 : __fch_sig_low typ=w32 bnd=m
  218 : __fch_sig_high typ=w32 bnd=m
  227 : __fch_sig_low typ=w32 bnd=m
  230 : __fch_sig_high typ=w32 bnd=m
  231 : __fch_shiftDist typ=w32 bnd=m
  238 : __fch_z_low typ=w32 bnd=m
  241 : __fch_z_high typ=w32 bnd=m
  243 : __ct_56s0 typ=w32 val=56s0 bnd=m
  245 : __tmp typ=w32 bnd=m
  261 : __ct_4294967295 typ=w32 val=-1f bnd=m
  284 : __ct_36t0 typ=w32 val=36t0 bnd=m
  285 : __adr_sig typ=w32 bnd=m adro=24
  286 : __adr_sig typ=w32 bnd=m adro=24
  287 : __ct_52t0 typ=w32 val=52t0 bnd=m
  288 : __adr_z typ=w32 bnd=m adro=27
  289 : __adr_sig typ=w32 bnd=m adro=24
  290 : __adr_sig typ=w32 bnd=m adro=24
  291 : __adr_sig typ=w32 bnd=m adro=24
  292 : __adr_z typ=w32 bnd=m adro=27
  293 : __adr_z typ=w32 bnd=m adro=27
  294 : __ct_24t0 typ=w32 val=24t0 bnd=m
  295 : __adr_uiA typ=w32 bnd=m adro=22
  296 : __ct_8t0 typ=w32 val=8t0 bnd=m
  297 : __adr_a typ=w32 bnd=m adro=20
  298 : __adr_a typ=w32 bnd=m adro=20
  299 : __ct_16t0 typ=w32 val=16t0 bnd=m
  300 : __adr_uA typ=w32 bnd=m adro=21
  301 : __adr_uA typ=w32 bnd=m adro=21
  302 : __adr_uiA typ=w32 bnd=m adro=22
  303 : __adr_uiA typ=w32 bnd=m adro=22
  304 : __adr_uiA typ=w32 bnd=m adro=22
  305 : __adr_sig typ=w32 bnd=m adro=24
  308 : __rt_low typ=w32 bnd=m tref=__uint__
  309 : __rt_high typ=w32 bnd=m tref=__uint__
  313 : __apl_ff typ=w32 bnd=m tref=__sint__
  314 : __apl_carries typ=w32 bnd=m tref=__uint__
  316 : __tmp typ=bool bnd=m
  317 : __tmp typ=bool bnd=m
  318 : __tmp typ=w32 bnd=m
  319 : __tmp typ=w32 bnd=m
  320 : __apl_r_low typ=w32 bnd=m tref=__uint__
  321 : __apl_r_high typ=w32 bnd=m tref=__uint__
  323 : __ct_m32 typ=w32 val=-32f bnd=m
  338 : __tmp_high typ=w32 bnd=m
  380 : __tmp_high typ=w32 bnd=m
  386 : __rt_low typ=w32 bnd=m tref=__uint__
  387 : __rt_high typ=w32 bnd=m tref=__uint__
  391 : __apl_ff typ=w32 bnd=m tref=__sint__
  392 : __apl_carries typ=w32 bnd=m tref=__uint__
  394 : __tmp typ=bool bnd=m
  395 : __tmp typ=bool bnd=m
  396 : __tmp typ=w32 bnd=m
  397 : __apl_r_low typ=w32 bnd=m tref=__uint__
  398 : __tmp typ=w32 bnd=m
  399 : __apl_r_high typ=w32 bnd=m tref=__uint__
  402 : __tmp_low typ=w32 bnd=m
  404 : __tmp_high typ=w32 bnd=m
  410 : __tmp_high typ=w32 bnd=m
  416 : __tmp_low typ=w32 bnd=m
  418 : __tmp_high typ=w32 bnd=m
  424 : __ct_20 typ=w32 val=20f bnd=m
  426 : __ct_31 typ=w32 val=31f bnd=m
  428 : __ct_1048575 typ=w32 val=1048575f bnd=m
  429 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  432 : __tmpd typ=w32 bnd=m
  433 : __tmp typ=bool bnd=m
  453 : __false typ=bool val=0f bnd=m
  454 : __either typ=bool bnd=m
  455 : __trgt typ=t13s_s2 val=0j bnd=m
  456 : __trgt typ=t13s_s2 val=0j bnd=m
  457 : __trgt typ=t21s_s2 val=0j bnd=m
  458 : __trgt typ=t13s_s2 val=0j bnd=m
  459 : __trgt typ=t21s_s2 val=0j bnd=m
  460 : __trgt typ=t13s_s2 val=0j bnd=m
  461 : __trgt typ=t13s_s2 val=0j bnd=m
  462 : __trgt typ=t21s_s2 val=0j bnd=m
  463 : __trgt typ=t13s_s2 val=0j bnd=m
  464 : __trgt typ=t21s_s2 val=0j bnd=m
  465 : __trgt typ=t13s_s2 val=0j bnd=m
  466 : __trgt typ=t21s_s2 val=0j bnd=m
  467 : __trgt typ=t13s_s2 val=0j bnd=m
  468 : __trgt typ=t21s_s2 val=0j bnd=m
  469 : __trgt typ=t13s_s2 val=0j bnd=m
  470 : __trgt typ=t21s_s2 val=0j bnd=m
  471 : __trgt typ=t13s_s2 val=0j bnd=m
  472 : __trgt typ=t21s_s2 val=0j bnd=m
  473 : __trgt typ=t13s_s2 val=0j bnd=m
  474 : __trgt typ=t21s_s2 val=0j bnd=m
  475 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_to_ui64_r_minMag {
    #4 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (exact.18 var=19) source ()  <29>;
    (uA.20 var=21) source ()  <31>;
    (exp.22 var=23) source ()  <33>;
    (shiftDist.24 var=25) source ()  <35>;
    (sign.25 var=26) source ()  <36>;
    (a_low.27 var=28) source ()  <38>;
    (a_high.28 var=29) source ()  <39>;
    (uiA_low.29 var=30) source ()  <40>;
    (uiA_high.30 var=31) source ()  <41>;
    (sig_low.31 var=32) source ()  <42>;
    (sig_high.32 var=33) source ()  <43>;
    (z_low.33 var=34) source ()  <44>;
    (z_high.34 var=35) source ()  <45>;
    (__la.36 var=37 stl=X off=1) inp ()  <47>;
    (__la.37 var=37) deassign (__la.36)  <48>;
    (__arg_a_low.45 var=42 stl=X off=12) inp ()  <56>;
    (__arg_a_low.46 var=42) deassign (__arg_a_low.45)  <57>;
    (__arg_a_high.49 var=43 stl=X off=13) inp ()  <60>;
    (__arg_a_high.50 var=43) deassign (__arg_a_high.49)  <61>;
    (__arg_exact.53 var=44 stl=X off=14) inp ()  <64>;
    (__arg_exact.54 var=44) deassign (__arg_exact.53)  <65>;
    (__rd___sp.56 var=36) rd_res_reg (__R_SP.11 __sp.17)  <67>;
    (__ct_m56S0.57 var=46) const ()  <68>;
    (__tmp.59 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_m56S0.57)  <70>;
    (__R_SP.60 var=12 __sp.61 var=18) wr_res_reg (__tmp.59 __sp.17)  <71>;
    (__rd___sp.63 var=36) rd_res_reg (__R_SP.11 __sp.61)  <74>;
    (__ct_0t0.64 var=51) const ()  <75>;
    (__adr_exact.66 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_0t0.64)  <77>;
    (__rd___sp.68 var=36) rd_res_reg (__R_SP.11 __sp.61)  <79>;
    (__rd___sp.73 var=36) rd_res_reg (__R_SP.11 __sp.61)  <84>;
    (__rd___sp.78 var=36) rd_res_reg (__R_SP.11 __sp.61)  <89>;
    (__rd___sp.83 var=36) rd_res_reg (__R_SP.11 __sp.61)  <94>;
    (__rd___sp.88 var=36) rd_res_reg (__R_SP.11 __sp.61)  <99>;
    (__rd___sp.93 var=36) rd_res_reg (__R_SP.11 __sp.61)  <104>;
    (__rd___sp.98 var=36) rd_res_reg (__R_SP.11 __sp.61)  <109>;
    (__rd___sp.103 var=36) rd_res_reg (__R_SP.11 __sp.61)  <114>;
    (__M_DMw.109 var=5 exact.110 var=19) store (__arg_exact.54 __adr_exact.66 exact.18)  <120>;
    call {
        () chess_separator_scheduler ()  <121>;
    } #5 off=1
    #6 off=2
    (__ct_4t0.69 var=55) const ()  <80>;
    (__adr_a.71 var=57) __Pvoid__pl___Pvoid___sint (__rd___sp.68 __ct_4t0.69)  <82>;
    (__M_DMw.112 var=5 a_low.113 var=28) store (__arg_a_low.46 __adr_a.71 a_low.27)  <123>;
    (__M_DMw.118 var=5 a_high.119 var=29) store (__arg_a_high.50 __adr_a.929 a_high.28)  <128>;
    (__ct_8t0.928 var=296) const ()  <1093>;
    (__adr_a.929 var=297) __Pvoid__pl___Pvoid___sint (__rd___sp.68 __ct_8t0.928)  <1095>;
    call {
        () chess_separator_scheduler ()  <133>;
    } #9 off=3
    #10 off=4
    (__ct_12t0.74 var=59) const ()  <85>;
    (__adr_uA.76 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_12t0.74)  <87>;
    (__fch_a_low.124 var=93) load (__M_DMw.4 __adr_a.71 a_low.113)  <135>;
    (__fch_a_high.129 var=96) load (__M_DMw.4 __adr_a.930 a_high.119)  <140>;
    (__M_DMw.135 var=5 uA.136 var=21) store (__fch_a_low.124 __adr_uA.76 uA.20)  <146>;
    (__M_DMw.141 var=5 uA.142 var=21) store (__fch_a_high.129 __adr_uA.932 uA.136)  <151>;
    (__adr_a.930 var=298) __Pvoid__pl___Pvoid___sint (__rd___sp.68 __ct_8t0.928)  <1096>;
    (__ct_16t0.931 var=299) const ()  <1097>;
    (__adr_uA.932 var=300) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_16t0.931)  <1099>;
    call {
        () chess_separator_scheduler ()  <152>;
    } #11 off=5
    #12 off=6
    (__ct_20t0.79 var=63) const ()  <90>;
    (__adr_uiA.81 var=65) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_20t0.79)  <92>;
    (__fch_uA.147 var=108) load (__M_DMw.4 __adr_uA.76 uA.142)  <157>;
    (__fch_uA.152 var=111) load (__M_DMw.4 __adr_uA.933 uA.142)  <162>;
    (__M_DMw.155 var=5 uiA_low.156 var=30) store (__fch_uA.147 __adr_uiA.81 uiA_low.29)  <165>;
    (__M_DMw.161 var=5 uiA_high.162 var=31) store (__fch_uA.152 __adr_uiA.934 uiA_high.30)  <170>;
    (__ct_24t0.926 var=294) const ()  <1090>;
    (__adr_uA.933 var=301) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_16t0.931)  <1100>;
    (__adr_uiA.934 var=302) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_24t0.926)  <1101>;
    call {
        () chess_separator_scheduler ()  <171>;
    } #13 off=7
    #314 off=8
    (__ct_28t0.84 var=67) const ()  <95>;
    (__adr_exp.86 var=69) __Pvoid__pl___Pvoid___sint (__rd___sp.83 __ct_28t0.84)  <97>;
    (__fch_uiA_high.169 var=120) load (__M_DMw.4 __adr_uiA.935 uiA_high.162)  <178>;
    (__ct_2047.175 var=125) const ()  <184>;
    (__tmp.177 var=127) __sint__ad___sint___sint (__apl_r_low.954 __ct_2047.175)  <186>;
    (__M_DMw.178 var=5 exp.179 var=23) store (__tmp.177 __adr_exp.86 exp.22)  <187>;
    (__adr_uiA.935 var=303) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_24t0.926)  <1102>;
    (__apl_r_low.954 var=320) __uint__rs___uint___sint (__fch_uiA_high.169 __ct_20.1135)  <1155>;
    (__ct_20.1135 var=424) const ()  <1412>;
    call {
        () chess_separator_scheduler ()  <188>;
    } #15 off=9
    #154 off=10
    (__ct_32t0.89 var=71) const ()  <100>;
    (__adr_sig.91 var=73) __Pvoid__pl___Pvoid___sint (__rd___sp.88 __ct_32t0.89)  <102>;
    (__fch_uiA_low.181 var=129) load (__M_DMw.4 __adr_uiA.81 uiA_low.156)  <190>;
    (__fch_uiA_high.186 var=132) load (__M_DMw.4 __adr_uiA.936 uiA_high.162)  <195>;
    (__M_DMw.192 var=5 sig_low.193 var=32) store (__fch_uiA_low.181 __adr_sig.91 sig_low.31)  <201>;
    (__M_DMw.198 var=5 sig_high.199 var=33) store (__tmp_high.973 __adr_sig.937 sig_high.32)  <206>;
    (__ct_36t0.916 var=284) const ()  <1078>;
    (__adr_uiA.936 var=304) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_24t0.926)  <1103>;
    (__adr_sig.937 var=305) __Pvoid__pl___Pvoid___sint (__rd___sp.88 __ct_36t0.916)  <1104>;
    (__tmp_high.973 var=338) __uint__ad___uint___uint (__fch_uiA_high.186 __ct_1048575.1139)  <1178>;
    (__ct_1048575.1139 var=428) const ()  <1420>;
    call {
        () chess_separator_scheduler ()  <207>;
    } #17 off=11
    #18 off=12
    (__ct_40t0.94 var=75) const ()  <105>;
    (__adr_shiftDist.96 var=77) __Pvoid__pl___Pvoid___sint (__rd___sp.93 __ct_40t0.94)  <107>;
    (__ct_1075.200 var=140) const ()  <208>;
    (__fch_exp.202 var=142) load (__M_DMw.4 __adr_exp.86 exp.179)  <210>;
    (__tmp.203 var=143) __sint__mi___sint___sint (__ct_1075.200 __fch_exp.202)  <211>;
    (__M_DMw.204 var=5 shiftDist.205 var=25) store (__tmp.203 __adr_shiftDist.96 shiftDist.24)  <212>;
    call {
        () chess_separator_scheduler ()  <213>;
    } #19 off=13
    #20 off=14
    (__ct_0.131 var=97) const ()  <142>;
    (__ct_53.206 var=144) const ()  <214>;
    (__fch_shiftDist.208 var=146) load (__M_DMw.4 __adr_shiftDist.96 shiftDist.205)  <216>;
    (__tmp.209 var=147) bool__ge___sint___sint (__fch_shiftDist.208 __ct_53.206)  <217>;
    (__trgt.1194 var=473) const ()  <1652>;
    () void_br_bool_t13s_s2 (__tmp.209 __trgt.1194)  <1653>;
    (__either.1195 var=454) undefined ()  <1654>;
    if {
        {
            () if_expr (__either.1195)  <254>;
        } #22
        {
        } #25 off=50
        {
            #88 off=15
            (__ct_44t0.99 var=79) const ()  <110>;
            (__adr_sign.101 var=81) __Pvoid__pl___Pvoid___sint (__rd___sp.98 __ct_44t0.99)  <112>;
            (__fch_uiA_high.254 var=154) load (__M_DMw.4 __adr_uiA.927 uiA_high.162)  <264>;
            (__M_DMw.263 var=5 sign.264 var=26) store (__tmp.1149 __adr_sign.101 sign.25)  <273>;
            (__adr_uiA.927 var=295) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_24t0.926)  <1092>;
            (__apl_r_low.999 var=320) __uint__rs___uint___sint (__fch_uiA_high.254 __ct_31.1137)  <1210>;
            (__ct_31.1137 var=426) const ()  <1416>;
            (__tmp.1149 var=161) __sint_sne0___sint (__apl_r_low.999)  <1464>;
            call {
                () chess_separator_scheduler ()  <274>;
            } #28 off=16
            #102 off=17
            (__fch_sign.265 var=162) load (__M_DMw.4 __adr_sign.101 sign.264)  <275>;
            (__fch_sign.865 var=163) bool__ne___sint___sint (__fch_sign.265 __ct_0.131)  <994>;
            (__trgt.1191 var=471) const ()  <1647>;
            () void_br_bool_t13s_s2 (__fch_sign.865 __trgt.1191)  <1648>;
            (__either.1192 var=454) undefined ()  <1649>;
            if {
                {
                    () if_expr (__either.1192)  <313>;
                } #31
                {
                    sync {
                    } #1 off=40
                    #33 off=41
                    (__fch_exp.339 var=164) load (__M_DMw.4 __adr_exp.86 exp.179)  <350>;
                    (__ct_4294967295.883 var=261) const ()  <1044>;
                    (__tmp.1162 var=167) bool__ne___sint___sint (__fch_exp.339 __ct_2047.175)  <1572>;
                    (__trgt.1165 var=455) const ()  <1604>;
                    () void_br_bool_t13s_s2 (__tmp.1162 __trgt.1165)  <1605>;
                    (__either.1166 var=454) undefined ()  <1606>;
                    if {
                        {
                            () if_expr (__either.1166)  <390>;
                        } #35
                        {
                            (__false.1170 var=453) const ()  <1612>;
                        } #37
                        {
                            (__fch_sig_low.380 var=169) load (__M_DMw.4 __adr_sig.91 sig_low.193)  <392>;
                            (__fch_sig_high.385 var=172) load (__M_DMw.4 __adr_sig.917 sig_high.199)  <397>;
                            (__adr_sig.917 var=285) __Pvoid__pl___Pvoid___sint (__rd___sp.88 __ct_36t0.916)  <1080>;
                            (__tmpd.1143 var=432) __uint__or___uint___uint (__fch_sig_high.385 __fch_sig_low.380)  <1457>;
                            (__tmp.1144 var=433) bool__ne___uint___uint (__tmpd.1143 __ct_0.131)  <1458>;
                            (__trgt.1171 var=458) const ()  <1613>;
                            () void_br_bool_t13s_s2 (__tmp.1144 __trgt.1171)  <1614>;
                            (__either.1172 var=454) undefined ()  <1615>;
                        } #207 off=42
                        {
                            (__tmp.392 var=178) merge (__false.1170 __either.1172)  <404>;
                        } #38
                    } #34
                    if {
                        {
                            () if_expr (__tmp.392)  <441>;
                        } #41
                        {
                        } #42 off=47
                        {
                            #107 off=43
                            (__fch_sign.431 var=181) load (__M_DMw.4 __adr_sign.101 sign.264)  <444>;
                            (__fch_sign.869 var=182) bool__ne___sint___sint (__fch_sign.431 __ct_0.131)  <1001>;
                            (__trgt.1167 var=456) const ()  <1607>;
                            () void_br_bool_t13s_s2 (__fch_sign.869 __trgt.1167)  <1608>;
                            (__either.1168 var=454) undefined ()  <1609>;
                            if {
                                {
                                    () if_expr (__either.1168)  <482>;
                                } #46
                                {
                                } #47 off=45
                                {
                                    (__trgt.1169 var=457) const ()  <1610>;
                                    () void_j_t21s_s2 (__trgt.1169)  <1611>;
                                } #48 off=44
                                {
                                    (__rt_low.886 var=39) merge (__ct_0.131 __ct_4294967295.883)  <1048>;
                                } #49
                            } #45
                            #323 off=46
                            (__trgt.1173 var=459) const ()  <1616>;
                            () void_j_t21s_s2 (__trgt.1173)  <1617>;
                        } #43
                        {
                            (__rt_low.882 var=39) merge (__ct_4294967295.883 __rt_low.886)  <1043>;
                        } #50
                    } #40
                } #32
                {
                    #218 off=18
                    (__ct_48t0.104 var=83) const ()  <115>;
                    (__adr_z.106 var=85) __Pvoid__pl___Pvoid___sint (__rd___sp.103 __ct_48t0.104)  <117>;
                    (__fch_shiftDist.475 var=189) load (__M_DMw.4 __adr_shiftDist.96 shiftDist.205)  <490>;
                    (__ct_52t0.919 var=287) const ()  <1082>;
                    (__ct_m32.945 var=323) const ()  <1144>;
                    (__tmp.1041 var=192) bool__ge___sint___sint (__ct_0.131 __fch_shiftDist.475)  <1264>;
                    (__ct_1048576.1140 var=429) const ()  <1422>;
                    (__trgt.1188 var=469) const ()  <1642>;
                    () void_br_bool_t13s_s2 (__tmp.1041 __trgt.1188)  <1643>;
                    (__either.1189 var=454) undefined ()  <1644>;
                    if {
                        {
                            () if_expr (__either.1189)  <530>;
                        } #55
                        {
                            #57 off=28
                            (__fch_shiftDist.515 var=193) load (__M_DMw.4 __adr_shiftDist.96 shiftDist.205)  <531>;
                            (__ct_m11.516 var=194) const ()  <532>;
                            (__tmp.518 var=196) bool__lt___sint___sint (__fch_shiftDist.515 __ct_m11.516)  <534>;
                            (__trgt.1174 var=460) const ()  <1618>;
                            () void_br_bool_t13s_s2 (__tmp.518 __trgt.1174)  <1619>;
                            (__either.1175 var=454) undefined ()  <1620>;
                            if {
                                {
                                    () if_expr (__either.1175)  <571>;
                                    () chess_rear_then ()  <1621>;
                                } #59
                                {
                                    () sink (__sp.61)  <577>;
                                    () sink (exact.110)  <578>;
                                    () sink (uA.142)  <580>;
                                    () sink (exp.179)  <582>;
                                    () sink (shiftDist.205)  <584>;
                                    () sink (sign.264)  <585>;
                                    () sink (a_low.113)  <587>;
                                    () sink (a_high.119)  <588>;
                                    () sink (uiA_low.156)  <589>;
                                    () sink (uiA_high.162)  <590>;
                                    () sink (sig_low.193)  <591>;
                                    () sink (sig_high.199)  <592>;
                                    (__trgt.1197 var=475) const ()  <1657>;
                                    () void_j_t21s_s2 (__trgt.1197)  <1658>;
                                } #61 off=30 nxt=-3 tgt=1
                                {
                                } #62 off=29
                                {
                                } #63
                            } #58
                            #240 off=31
                            (__fch_sig_low.628 var=198) load (__M_DMw.4 __adr_sig.91 sig_low.193)  <704>;
                            (__fch_sig_high.633 var=201) load (__M_DMw.4 __adr_sig.918 sig_high.199)  <709>;
                            (__fch_shiftDist.640 var=207) load (__M_DMw.4 __adr_shiftDist.96 shiftDist.205)  <716>;
                            (__tmp.641 var=208) __sint__mi___sint___sint (__ct_0.131 __fch_shiftDist.640)  <717>;
                            (__adr_sig.918 var=286) __Pvoid__pl___Pvoid___sint (__rd___sp.88 __ct_36t0.916)  <1081>;
                            (__tmp_high.1048 var=380) __uint__or___uint___uint (__fch_sig_high.633 __ct_1048576.1140)  <1274>;
                            (__tmp.1064 var=394) bool__eq___sint___sint (__tmp.641 __ct_0.131)  <1294>;
                            (__trgt.1179 var=463) const ()  <1627>;
                            () void_br_bool_t13s_s2 (__tmp.1064 __trgt.1179)  <1628>;
                            (__either.1180 var=454) undefined ()  <1629>;
                            if {
                                {
                                    () if_expr (__either.1180)  <1297>;
                                } #242
                                {
                                } #243 off=36
                                {
                                    #245 off=32
                                    (__apl_ff.1067 var=391) __sint__pl___sint___sint (__tmp.641 __ct_m32.945)  <1298>;
                                    (__tmp.1068 var=395) bool__lt___sint___sint (__apl_ff.1067 __ct_0.131)  <1299>;
                                    (__trgt.1176 var=461) const ()  <1622>;
                                    () void_br_bool_t13s_s2 (__tmp.1068 __trgt.1176)  <1623>;
                                    (__either.1177 var=454) undefined ()  <1624>;
                                    if {
                                        {
                                            () if_expr (__either.1177)  <1300>;
                                        } #247
                                        {
                                            (__tmp.1069 var=396) __sint__mi___sint___sint (__ct_0.131 __apl_ff.1067)  <1301>;
                                            (__apl_carries.1070 var=392) __uint__rs___uint___sint (__fch_sig_low.628 __tmp.1069)  <1302>;
                                            (__apl_r_low.1071 var=397) __uint__ls___uint___sint (__fch_sig_low.628 __tmp.641)  <1303>;
                                            (__tmp.1072 var=398) __uint__ls___uint___sint (__tmp_high.1048 __tmp.641)  <1304>;
                                            (__apl_r_high.1073 var=399) __uint__or___uint___uint (__tmp.1072 __apl_carries.1070)  <1305>;
                                        } #248 off=34
                                        {
                                            (__apl_r_high.1074 var=399) __uint__ls___uint___sint (__fch_sig_low.628 __apl_ff.1067)  <1306>;
                                            (__trgt.1178 var=462) const ()  <1625>;
                                            () void_j_t21s_s2 (__trgt.1178)  <1626>;
                                        } #249 off=33
                                        {
                                            (__rt_low.1075 var=386) merge (__apl_r_low.1071 __ct_0.131)  <1307>;
                                            (__rt_high.1076 var=387) merge (__apl_r_high.1073 __apl_r_high.1074)  <1308>;
                                        } #250
                                    } #246
                                    #325 off=35
                                    (__trgt.1181 var=464) const ()  <1630>;
                                    () void_j_t21s_s2 (__trgt.1181)  <1631>;
                                } #244
                                {
                                    (__tmp_low.1077 var=402) merge (__fch_sig_low.628 __rt_low.1075)  <1309>;
                                    (__tmp_high.1078 var=404) merge (__tmp_high.1048 __rt_high.1076)  <1310>;
                                } #251
                            } #241
                            #234 off=37
                            (__M_DMw.644 var=5 z_low.645 var=34) store (__tmp_low.1077 __adr_z.106 z_low.33)  <720>;
                            (__M_DMw.650 var=5 z_high.651 var=35) store (__tmp_high.1078 __adr_z.920 z_high.34)  <725>;
                            (__adr_z.920 var=288) __Pvoid__pl___Pvoid___sint (__rd___sp.103 __ct_52t0.919)  <1084>;
                        } #56
                        {
                            #265 off=19
                            (__fch_sig_low.653 var=215) load (__M_DMw.4 __adr_sig.91 sig_low.193)  <728>;
                            (__fch_sig_high.658 var=218) load (__M_DMw.4 __adr_sig.921 sig_high.199)  <733>;
                            (__M_DMw.664 var=5 sig_low.665 var=32) store (__fch_sig_low.653 __adr_sig.91 sig_low.193)  <739>;
                            (__M_DMw.670 var=5 sig_high.671 var=33) store (__tmp_high.1093 __adr_sig.922 sig_high.199)  <744>;
                            (__adr_sig.921 var=289) __Pvoid__pl___Pvoid___sint (__rd___sp.88 __ct_36t0.916)  <1085>;
                            (__adr_sig.922 var=290) __Pvoid__pl___Pvoid___sint (__rd___sp.88 __ct_36t0.916)  <1086>;
                            (__tmp_high.1093 var=410) __uint__or___uint___uint (__fch_sig_high.658 __ct_1048576.1140)  <1329>;
                            call {
                                () chess_separator_scheduler ()  <745>;
                            } #68 off=20
                            #284 off=21
                            (__fch_sig_low.673 var=227) load (__M_DMw.4 __adr_sig.91 sig_low.665)  <747>;
                            (__fch_sig_high.678 var=230) load (__M_DMw.4 __adr_sig.923 sig_high.671)  <752>;
                            (__fch_shiftDist.680 var=231) load (__M_DMw.4 __adr_shiftDist.96 shiftDist.205)  <754>;
                            (__adr_sig.923 var=291) __Pvoid__pl___Pvoid___sint (__rd___sp.88 __ct_36t0.916)  <1087>;
                            (__tmp.1109 var=316) bool__eq___sint___sint (__fch_shiftDist.680 __ct_0.131)  <1349>;
                            (__trgt.1185 var=467) const ()  <1637>;
                            () void_br_bool_t13s_s2 (__tmp.1109 __trgt.1185)  <1638>;
                            (__either.1186 var=454) undefined ()  <1639>;
                            if {
                                {
                                    () if_expr (__either.1186)  <1352>;
                                } #286
                                {
                                } #287 off=26
                                {
                                    #289 off=22
                                    (__apl_ff.1112 var=313) __sint__pl___sint___sint (__fch_shiftDist.680 __ct_m32.945)  <1353>;
                                    (__tmp.1113 var=317) bool__lt___sint___sint (__apl_ff.1112 __ct_0.131)  <1354>;
                                    (__trgt.1182 var=465) const ()  <1632>;
                                    () void_br_bool_t13s_s2 (__tmp.1113 __trgt.1182)  <1633>;
                                    (__either.1183 var=454) undefined ()  <1634>;
                                    if {
                                        {
                                            () if_expr (__either.1183)  <1355>;
                                        } #291
                                        {
                                            (__tmp.1114 var=318) __sint__mi___sint___sint (__ct_0.131 __apl_ff.1112)  <1356>;
                                            (__apl_carries.1115 var=314) __uint__ls___uint___sint (__fch_sig_high.678 __tmp.1114)  <1357>;
                                            (__tmp.1116 var=319) __uint__rs___uint___sint (__fch_sig_low.673 __fch_shiftDist.680)  <1358>;
                                            (__apl_r_low.1117 var=320) __uint__or___uint___uint (__tmp.1116 __apl_carries.1115)  <1359>;
                                            (__apl_r_high.1118 var=321) __uint__rs___uint___sint (__fch_sig_high.678 __fch_shiftDist.680)  <1360>;
                                        } #292 off=24
                                        {
                                            (__apl_r_low.1119 var=320) __uint__rs___uint___sint (__fch_sig_high.678 __apl_ff.1112)  <1361>;
                                            (__trgt.1184 var=466) const ()  <1635>;
                                            () void_j_t21s_s2 (__trgt.1184)  <1636>;
                                        } #293 off=23
                                        {
                                            (__rt_low.1120 var=308) merge (__apl_r_low.1117 __apl_r_low.1119)  <1362>;
                                            (__rt_high.1121 var=309) merge (__apl_r_high.1118 __ct_0.131)  <1363>;
                                        } #294
                                    } #290
                                    #326 off=25
                                    (__trgt.1187 var=468) const ()  <1640>;
                                    () void_j_t21s_s2 (__trgt.1187)  <1641>;
                                } #288
                                {
                                    (__tmp_low.1122 var=416) merge (__fch_sig_low.673 __rt_low.1120)  <1364>;
                                    (__tmp_high.1123 var=418) merge (__fch_sig_high.678 __rt_high.1121)  <1365>;
                                } #295
                            } #285
                            #281 off=27
                            (__M_DMw.683 var=5 z_low.684 var=34) store (__tmp_low.1122 __adr_z.106 z_low.33)  <757>;
                            (__M_DMw.689 var=5 z_high.690 var=35) store (__tmp_high.1123 __adr_z.924 z_high.34)  <762>;
                            (__adr_z.924 var=292) __Pvoid__pl___Pvoid___sint (__rd___sp.103 __ct_52t0.919)  <1088>;
                            (__trgt.1190 var=470) const ()  <1645>;
                            () void_j_t21s_s2 (__trgt.1190)  <1646>;
                        } #66
                        {
                            (sig_low.710 var=32) merge (sig_low.193 sig_low.665)  <783>;
                            (sig_high.711 var=33) merge (sig_high.199 sig_high.671)  <784>;
                            (z_low.712 var=34) merge (z_low.645 z_low.684)  <785>;
                            (z_high.713 var=35) merge (z_high.651 z_high.690)  <786>;
                        } #71
                    } #54
                    #72 off=38
                    (__fch_z_low.728 var=238) load (__M_DMw.4 __adr_z.106 z_low.712)  <801>;
                    (__fch_z_high.733 var=241) load (__M_DMw.4 __adr_z.925 z_high.713)  <806>;
                    (__adr_z.925 var=293) __Pvoid__pl___Pvoid___sint (__rd___sp.103 __ct_52t0.919)  <1089>;
                    (__trgt.1193 var=472) const ()  <1650>;
                    () void_j_t21s_s2 (__trgt.1193)  <1651>;
                } #52
                {
                    (sig_low.754 var=32) merge (sig_low.193 sig_low.710)  <828>;
                    (sig_high.755 var=33) merge (sig_high.199 sig_high.711)  <829>;
                    (z_low.756 var=34) merge (z_low.33 z_low.712)  <830>;
                    (z_high.757 var=35) merge (z_high.34 z_high.713)  <831>;
                    (__rt_low.879 var=39) merge (__rt_low.882 __fch_z_low.728)  <1040>;
                    (__rt_high.892 var=40) merge (__rt_low.882 __fch_z_high.733)  <1054>;
                } #74
            } #30
            #327 off=49
            (__trgt.1196 var=474) const ()  <1655>;
            () void_j_t21s_s2 (__trgt.1196)  <1656>;
        } #26
        {
            (sign.784 var=26) merge (sign.25 sign.264)  <858>;
            (sig_low.790 var=32) merge (sig_low.193 sig_low.754)  <864>;
            (sig_high.791 var=33) merge (sig_high.199 sig_high.755)  <865>;
            (z_low.792 var=34) merge (z_low.33 z_low.756)  <866>;
            (z_high.793 var=35) merge (z_high.34 z_high.757)  <867>;
            (__rt_low.875 var=39) merge (__ct_0.131 __rt_low.879)  <1035>;
            (__rt_high.889 var=40) merge (__ct_0.131 __rt_high.892)  <1051>;
        } #75
    } #21
    #78 off=51 nxt=-2
    (__rd___sp.808 var=36) rd_res_reg (__R_SP.11 __sp.61)  <882>;
    (__ct_56s0.809 var=243) const ()  <883>;
    (__tmp.811 var=245) __Pvoid__pl___Pvoid___sint (__rd___sp.808 __ct_56s0.809)  <885>;
    (__R_SP.812 var=12 __sp.813 var=18) wr_res_reg (__tmp.811 __sp.61)  <886>;
    () void___rts_jr_w32 (__la.37)  <887>;
    (__rt_low.815 var=39 stl=X off=10) assign (__rt_low.875)  <889>;
    () out (__rt_low.815)  <890>;
    (__rt_high.817 var=40 stl=X off=11) assign (__rt_high.889)  <892>;
    () out (__rt_high.817)  <893>;
    () sink (__sp.813)  <901>;
    () sink (exact.110)  <902>;
    () sink (uA.142)  <904>;
    () sink (exp.179)  <906>;
    () sink (shiftDist.205)  <908>;
    () sink (sign.784)  <909>;
    () sink (a_low.113)  <911>;
    () sink (a_high.119)  <912>;
    () sink (uiA_low.156)  <913>;
    () sink (uiA_high.162)  <914>;
    () sink (sig_low.790)  <915>;
    () sink (sig_high.791)  <916>;
    () sink (z_low.792)  <917>;
    () sink (z_high.793)  <918>;
} #0
0 : 'SoftFloat-3e/source/f64_to_ui64_r_minMag.c';
----------
0 : (0,44:0,0);
1 : (0,93:1,24);
4 : (0,44:49,0);
5 : (0,44:49,0);
6 : (0,44:36,0);
9 : (0,47:4,4);
10 : (0,59:9,12);
11 : (0,59:9,12);
12 : (0,60:8,13);
13 : (0,60:8,13);
15 : (0,61:8,14);
17 : (0,62:8,15);
18 : (0,65:14,16);
19 : (0,65:14,16);
20 : (0,66:12,16);
21 : (0,66:4,16);
25 : (0,72:8,18);
26 : (0,72:8,20);
28 : (0,76:9,22);
30 : (0,77:4,22);
32 : (0,90:4,23);
33 : (0,98:13,25);
34 : (0,98:23,25);
37 : (0,98:23,27);
40 : (0,98:30,29);
42 : (0,98:32,30);
43 : (0,99:8,31);
45 : (0,99:8,31);
47 : (0,99:8,32);
48 : (0,99:14,33);
52 : (0,93:1,40);
54 : (0,78:4,41);
56 : (0,78:26,42);
57 : (0,79:23,42);
58 : (0,79:8,42);
61 : (0,79:31,43);
62 : (0,79:8,45);
66 : (0,81:11,51);
68 : (0,82:12,52);
72 : (0,90:4,57);
78 : (0,97:4,63);
88 : (0,76:4,21);
102 : (0,77:9,22);
107 : (0,99:3,31);
154 : (0,62:4,14);
207 : (0,98:23,26);
218 : (0,78:19,41);
234 : (0,80:8,48);
240 : (0,80:41,48);
241 : (0,80:41,48);
242 : (0,80:41,48);
243 : (0,80:41,48);
244 : (0,80:41,48);
245 : (0,80:41,48);
246 : (0,80:41,48);
247 : (0,80:41,48);
248 : (0,80:41,48);
249 : (0,80:41,48);
250 : (0,80:41,48);
251 : (0,80:41,48);
265 : (0,82:8,51);
281 : (0,83:8,52);
284 : (0,83:15,52);
285 : (0,83:15,52);
286 : (0,83:15,52);
287 : (0,83:15,52);
288 : (0,83:15,52);
289 : (0,83:15,52);
290 : (0,83:15,52);
291 : (0,83:15,52);
292 : (0,83:15,52);
293 : (0,83:15,52);
294 : (0,83:15,52);
295 : (0,83:15,52);
314 : (0,61:4,13);
----------
67 : (0,44:14,0);
68 : (0,44:14,0);
70 : (0,44:14,0);
71 : (0,44:14,0);
74 : (0,44:54,0);
75 : (0,44:54,0);
77 : (0,44:54,0);
79 : (0,44:46,0);
80 : (0,44:46,0);
82 : (0,44:46,0);
84 : (0,49:19,0);
85 : (0,49:19,0);
87 : (0,49:19,0);
89 : (0,50:18,0);
90 : (0,50:18,0);
92 : (0,50:18,0);
94 : (0,51:17,0);
95 : (0,51:17,0);
97 : (0,51:17,0);
99 : (0,52:18,0);
100 : (0,52:18,0);
102 : (0,52:18,0);
104 : (0,53:17,0);
105 : (0,53:17,0);
107 : (0,53:17,0);
109 : (0,54:9,0);
110 : (0,54:9,0);
112 : (0,54:9,0);
114 : (0,55:18,0);
115 : (0,55:18,0);
117 : (0,55:18,0);
120 : (0,44:49,0);
121 : (0,44:49,0);
123 : (0,44:36,0);
128 : (0,44:36,0);
133 : (0,47:4,4);
135 : (0,59:11,11);
140 : (0,59:11,11);
142 : (0,59:6,0);
146 : (0,59:6,11);
151 : (0,59:6,11);
152 : (0,59:9,12);
157 : (0,60:12,12);
162 : (0,60:12,12);
165 : (0,60:4,12);
170 : (0,60:4,12);
171 : (0,60:8,13);
178 : (0,61:28,13);
184 : (0,61:38,0);
186 : (0,61:38,13);
187 : (0,61:4,13);
188 : (0,61:8,14);
190 : (0,62:12,14);
195 : (0,62:12,14);
201 : (0,62:4,14);
206 : (0,62:4,14);
207 : (0,62:8,15);
208 : (0,65:22,0);
210 : (0,65:24,15);
211 : (0,65:22,15);
212 : (0,65:4,15);
213 : (0,65:14,16);
214 : (0,66:12,0);
216 : (0,66:15,16);
217 : (0,66:12,16);
254 : (0,66:4,16);
264 : (0,76:32,21);
273 : (0,76:4,21);
274 : (0,76:9,22);
275 : (0,77:9,22);
313 : (0,77:4,22);
350 : (0,98:9,25);
390 : (0,98:23,25);
392 : (0,98:26,26);
397 : (0,98:26,26);
404 : (0,98:23,28);
441 : (0,98:30,29);
444 : (0,99:3,31);
482 : (0,99:8,31);
490 : (0,78:9,41);
530 : (0,78:4,41);
531 : (0,79:13,42);
532 : (0,79:23,0);
534 : (0,79:23,42);
571 : (0,79:8,42);
704 : (0,80:13,48);
709 : (0,80:13,48);
716 : (0,80:44,48);
717 : (0,80:43,48);
720 : (0,80:8,48);
725 : (0,80:8,48);
728 : (0,82:8,51);
733 : (0,82:8,51);
739 : (0,82:8,51);
744 : (0,82:8,51);
745 : (0,82:12,52);
747 : (0,83:12,52);
752 : (0,83:12,52);
754 : (0,83:17,52);
757 : (0,83:8,52);
762 : (0,83:8,52);
783 : (0,78:4,55);
784 : (0,78:4,55);
785 : (0,78:4,55);
786 : (0,78:4,55);
801 : (0,90:11,56);
806 : (0,90:11,56);
828 : (0,77:4,59);
829 : (0,77:4,59);
830 : (0,77:4,59);
831 : (0,77:4,59);
858 : (0,66:4,62);
864 : (0,66:4,62);
865 : (0,66:4,62);
866 : (0,66:4,62);
867 : (0,66:4,62);
882 : (0,97:4,0);
883 : (0,97:4,0);
885 : (0,97:4,0);
886 : (0,97:4,63);
887 : (0,97:4,63);
889 : (0,97:4,0);
892 : (0,97:4,0);
994 : (0,77:9,22);
1001 : (0,99:3,31);
1044 : (0,98:32,0);
1078 : (0,52:18,0);
1082 : (0,55:18,0);
1090 : (0,50:18,0);
1093 : (0,44:46,0);
1097 : (0,49:19,0);
1144 : (0,61:32,0);
1155 : (0,61:32,13);
1178 : (0,62:17,14);
1210 : (0,76:36,21);
1264 : (0,78:19,41);
1274 : (0,80:17,48);
1294 : (0,80:41,48);
1297 : (0,80:41,48);
1298 : (0,80:41,48);
1299 : (0,80:41,48);
1300 : (0,80:41,48);
1301 : (0,80:41,48);
1302 : (0,80:41,48);
1303 : (0,80:41,48);
1304 : (0,80:41,48);
1305 : (0,80:41,48);
1306 : (0,80:41,48);
1307 : (0,80:41,48);
1308 : (0,80:41,48);
1309 : (0,80:41,48);
1310 : (0,80:41,48);
1329 : (0,82:12,51);
1349 : (0,83:15,52);
1352 : (0,83:15,52);
1353 : (0,83:15,52);
1354 : (0,83:15,52);
1355 : (0,83:15,52);
1356 : (0,83:15,52);
1357 : (0,83:15,52);
1358 : (0,83:15,52);
1359 : (0,83:15,52);
1360 : (0,83:15,52);
1361 : (0,83:15,52);
1362 : (0,83:15,52);
1363 : (0,83:15,52);
1364 : (0,83:15,52);
1365 : (0,83:15,52);
1412 : (0,61:32,0);
1416 : (0,76:36,0);
1420 : (0,62:19,0);
1422 : (0,80:19,0);
1457 : (0,98:23,26);
1458 : (0,98:23,26);
1464 : (0,76:4,21);
1572 : (0,98:13,25);
1605 : (0,98:23,25);
1608 : (0,99:8,31);
1614 : (0,98:30,29);
1619 : (0,79:8,42);
1623 : (0,80:41,48);
1628 : (0,80:41,48);
1633 : (0,83:15,52);
1638 : (0,83:15,52);
1643 : (0,78:4,41);
1648 : (0,77:4,22);
1653 : (0,66:4,16);

