
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:34:19 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f32_to_i64_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  int_fast64_t f32_to_i64_r_minMag(float32_t, bool)
Ff32_to_i64_r_minMag : user_defined, called {
    fnm : "f32_to_i64_r_minMag" 'long long f32_to_i64_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=48 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_to_i64_r_minMag typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : exact typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   20 : a typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=float32_t_DMb
   21 : uA typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   22 : uiA typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   23 : exp typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   24 : sig typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   25 : shiftDist typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   26 : sign typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   27 : sig64 typ=w08 val=32t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   28 : absZ typ=w08 val=40t0 bnd=a sz=8 algn=4 stl=DMb tref=int_fast64_t_DMb
   29 : sig64_low typ=w08 bnd=B stl=DMb
   30 : sig64_high typ=w08 bnd=B stl=DMb
   31 : absZ_low typ=w08 bnd=B stl=DMb
   32 : absZ_high typ=w08 bnd=B stl=DMb
   33 : __rd___sp typ=w32 bnd=m
   34 : __la typ=w32 bnd=p tref=w32__
   36 : __rt_low typ=w32 bnd=m tref=__uint__
   37 : __rt_high typ=w32 bnd=m tref=__uint__
   38 : __arg_a typ=w32 bnd=p tref=float32_t___1
   39 : __arg_exact typ=w32 bnd=p tref=bool__
   41 : __ct_m48S0 typ=w32 val=-48S0 bnd=m
   43 : __tmp typ=w32 bnd=m
   46 : __ct_0t0 typ=w32 val=0t0 bnd=m
   48 : __adr_exact typ=w32 bnd=m adro=19
   50 : __ct_4t0 typ=w32 val=4t0 bnd=m
   52 : __adr_a typ=w32 bnd=m adro=20
   54 : __ct_8t0 typ=w32 val=8t0 bnd=m
   56 : __adr_uA typ=w32 bnd=m adro=21
   58 : __ct_12t0 typ=w32 val=12t0 bnd=m
   60 : __adr_uiA typ=w32 bnd=m adro=22
   62 : __ct_16t0 typ=w32 val=16t0 bnd=m
   64 : __adr_exp typ=w32 bnd=m adro=23
   66 : __ct_20t0 typ=w32 val=20t0 bnd=m
   68 : __adr_sig typ=w32 bnd=m adro=24
   70 : __ct_24t0 typ=w32 val=24t0 bnd=m
   72 : __adr_shiftDist typ=w32 bnd=m adro=25
   74 : __ct_28t0 typ=w32 val=28t0 bnd=m
   76 : __adr_sign typ=w32 bnd=m adro=26
   78 : __ct_32t0 typ=w32 val=32t0 bnd=m
   80 : __adr_sig64 typ=w32 bnd=m adro=27
   82 : __ct_40t0 typ=w32 val=40t0 bnd=m
   84 : __adr_absZ typ=w32 bnd=m adro=28
   89 : __fch_a typ=w32 bnd=m
   90 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   96 : __fch_uA typ=w32 bnd=m
   97 : __fch_uiA typ=w32 bnd=m
   98 : __ct_23 typ=w32 val=23f bnd=m
  100 : __tmp typ=w32 bnd=m
  102 : __ct_255 typ=w32 val=255f bnd=m
  104 : __tmp typ=w32 bnd=m
  105 : __fch_uiA typ=w32 bnd=m
  106 : __ct_8388607 typ=w32 val=8388607f bnd=m
  108 : __tmp typ=w32 bnd=m
  109 : __ct_190 typ=w32 val=190f bnd=m
  111 : __fch_exp typ=w32 bnd=m
  112 : __tmp typ=w32 bnd=m
  113 : __ct_64 typ=w32 val=64f bnd=m
  115 : __fch_shiftDist typ=w32 bnd=m
  116 : __tmp typ=bool bnd=m
  119 : __fch_uiA typ=w32 bnd=m
  120 : __ct_31 typ=w32 val=31f bnd=m
  122 : __tmp typ=w32 bnd=m
  126 : __tmp typ=w32 bnd=m
  127 : __fch_shiftDist typ=w32 bnd=m
  130 : __tmp typ=bool bnd=m
  131 : __fch_uiA typ=w32 bnd=m
  132 : __ct_3741319168 typ=t20s_rp12 val=-135168f bnd=m
  134 : __tmp typ=bool bnd=m
  137 : __fch_exp typ=w32 bnd=m
  140 : __tmp typ=bool bnd=m
  141 : __fch_sig typ=w32 bnd=m
  144 : __tmp typ=bool bnd=m
  147 : __tmp typ=bool bnd=m
  150 : __fch_sign typ=w32 bnd=m
  151 : __fch_sign typ=bool bnd=m
  158 : __fch_sig typ=w32 bnd=m
  159 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
  161 : __tmp typ=w32 bnd=m
  162 : __fch_sig typ=w32 bnd=m
  175 : __fch_sig64_high typ=w32 bnd=m
  176 : __fch_shiftDist typ=w32 bnd=m
  183 : __fch_sign typ=w32 bnd=m
  184 : __fch_sign typ=bool bnd=m
  188 : __fch_absZ_low typ=w32 bnd=m
  191 : __fch_absZ_high typ=w32 bnd=m
  194 : __fch_absZ_low typ=w32 bnd=m
  197 : __fch_absZ_high typ=w32 bnd=m
  200 : __ct_48s0 typ=w32 val=48s0 bnd=m
  202 : __tmp typ=w32 bnd=m
  217 : __ct_4294967295 typ=w32 val=-1f bnd=m
  218 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  219 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  228 : __ct_44t0 typ=w32 val=44t0 bnd=m
  229 : __adr_absZ typ=w32 bnd=m adro=28
  230 : __adr_absZ typ=w32 bnd=m adro=28
  231 : __ct_36t0 typ=w32 val=36t0 bnd=m
  232 : __adr_sig64 typ=w32 bnd=m adro=27
  233 : __adr_sig64 typ=w32 bnd=m adro=27
  234 : __adr_absZ typ=w32 bnd=m adro=28
  259 : __apl_r_high typ=w32 bnd=m tref=__uint__
  261 : __ct_m32 typ=w32 val=-32f bnd=m
  268 : __rt_low typ=w32 bnd=m tref=__uint__
  269 : __rt_high typ=w32 bnd=m tref=__uint__
  273 : __apl_ff typ=w32 bnd=m tref=__sint__
  274 : __apl_carries typ=w32 bnd=m tref=__uint__
  276 : __tmp typ=bool bnd=m
  277 : __tmp typ=bool bnd=m
  278 : __tmp typ=w32 bnd=m
  279 : __tmp typ=w32 bnd=m
  280 : __apl_r_low typ=w32 bnd=m tref=__uint__
  281 : __apl_r_high typ=w32 bnd=m tref=__uint__
  284 : __tmp_low typ=w32 bnd=m
  286 : __tmp_high typ=w32 bnd=m
  299 : __apl_r_low typ=w32 bnd=m tref=__uint__
  300 : __apl_r_high typ=w32 bnd=m tref=__uint__
  313 : __ct_8 typ=w32 val=8f bnd=m
  327 : __tmp typ=w32 bnd=m
  338 : __false typ=bool val=0f bnd=m
  339 : __either typ=bool bnd=m
  340 : __trgt typ=t13s_s2 val=0j bnd=m
  341 : __trgt typ=t13s_s2 val=0j bnd=m
  342 : __trgt typ=t21s_s2 val=0j bnd=m
  343 : __trgt typ=t13s_s2 val=0j bnd=m
  344 : __trgt typ=t21s_s2 val=0j bnd=m
  345 : __trgt typ=t13s_s2 val=0j bnd=m
  346 : __trgt typ=t21s_s2 val=0j bnd=m
  347 : __trgt typ=t13s_s2 val=0j bnd=m
  348 : __trgt typ=t21s_s2 val=0j bnd=m
  349 : __trgt typ=t13s_s2 val=0j bnd=m
  350 : __trgt typ=t21s_s2 val=0j bnd=m
  351 : __trgt typ=t13s_s2 val=0j bnd=m
  352 : __trgt typ=t21s_s2 val=0j bnd=m
  353 : __trgt typ=t13s_s2 val=0j bnd=m
  354 : __trgt typ=t21s_s2 val=0j bnd=m
  355 : __trgt typ=t13s_s2 val=0j bnd=m
  356 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_to_i64_r_minMag {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (exact.18 var=19) source ()  <29>;
    (a.19 var=20) source ()  <30>;
    (uA.20 var=21) source ()  <31>;
    (uiA.21 var=22) source ()  <32>;
    (exp.22 var=23) source ()  <33>;
    (sig.23 var=24) source ()  <34>;
    (shiftDist.24 var=25) source ()  <35>;
    (sign.25 var=26) source ()  <36>;
    (sig64_low.28 var=29) source ()  <39>;
    (sig64_high.29 var=30) source ()  <40>;
    (absZ_low.30 var=31) source ()  <41>;
    (absZ_high.31 var=32) source ()  <42>;
    (__la.33 var=34 stl=X off=1) inp ()  <44>;
    (__la.34 var=34) deassign (__la.33)  <45>;
    (__arg_a.41 var=38 stl=X off=12) inp ()  <52>;
    (__arg_a.42 var=38) deassign (__arg_a.41)  <53>;
    (__arg_exact.44 var=39 stl=X off=13) inp ()  <55>;
    (__arg_exact.45 var=39) deassign (__arg_exact.44)  <56>;
    (__rd___sp.47 var=33) rd_res_reg (__R_SP.11 __sp.17)  <58>;
    (__ct_m48S0.48 var=41) const ()  <59>;
    (__tmp.50 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.47 __ct_m48S0.48)  <61>;
    (__R_SP.51 var=12 __sp.52 var=18) wr_res_reg (__tmp.50 __sp.17)  <62>;
    (__rd___sp.54 var=33) rd_res_reg (__R_SP.11 __sp.52)  <65>;
    (__ct_0t0.55 var=46) const ()  <66>;
    (__adr_exact.57 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.54 __ct_0t0.55)  <68>;
    (__rd___sp.59 var=33) rd_res_reg (__R_SP.11 __sp.52)  <70>;
    (__rd___sp.64 var=33) rd_res_reg (__R_SP.11 __sp.52)  <75>;
    (__rd___sp.69 var=33) rd_res_reg (__R_SP.11 __sp.52)  <80>;
    (__rd___sp.74 var=33) rd_res_reg (__R_SP.11 __sp.52)  <85>;
    (__rd___sp.79 var=33) rd_res_reg (__R_SP.11 __sp.52)  <90>;
    (__rd___sp.84 var=33) rd_res_reg (__R_SP.11 __sp.52)  <95>;
    (__rd___sp.89 var=33) rd_res_reg (__R_SP.11 __sp.52)  <100>;
    (__rd___sp.94 var=33) rd_res_reg (__R_SP.11 __sp.52)  <105>;
    (__rd___sp.99 var=33) rd_res_reg (__R_SP.11 __sp.52)  <110>;
    (__M_DMw.105 var=5 exact.106 var=19) store (__arg_exact.45 __adr_exact.57 exact.18)  <116>;
    call {
        () chess_separator_scheduler ()  <117>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.60 var=50) const ()  <71>;
    (__adr_a.62 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.59 __ct_4t0.60)  <73>;
    (__M_DMw.107 var=5 a.108 var=20) store (__arg_a.42 __adr_a.62 a.19)  <118>;
    call {
        () chess_separator_scheduler ()  <123>;
    } #8 off=3
    #9 off=4
    (__ct_8t0.65 var=54) const ()  <76>;
    (__adr_uA.67 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.64 __ct_8t0.65)  <78>;
    (__fch_a.112 var=89) load (__M_DMw.4 __adr_a.62 a.108)  <124>;
    (__M_DMw.116 var=5 uA.117 var=21) store (__fch_a.112 __adr_uA.67 uA.20)  <128>;
    call {
        () chess_separator_scheduler ()  <129>;
    } #10 off=5
    #11 off=6
    (__ct_12t0.70 var=58) const ()  <81>;
    (__adr_uiA.72 var=60) __Pvoid__pl___Pvoid___sint (__rd___sp.69 __ct_12t0.70)  <83>;
    (__fch_uA.121 var=96) load (__M_DMw.4 __adr_uA.67 uA.117)  <133>;
    (__M_DMw.122 var=5 uiA.123 var=22) store (__fch_uA.121 __adr_uiA.72 uiA.21)  <134>;
    call {
        () chess_separator_scheduler ()  <135>;
    } #12 off=7
    #13 off=8
    (__ct_16t0.75 var=62) const ()  <86>;
    (__adr_exp.77 var=64) __Pvoid__pl___Pvoid___sint (__rd___sp.74 __ct_16t0.75)  <88>;
    (__fch_uiA.124 var=97) load (__M_DMw.4 __adr_uiA.72 uiA.123)  <136>;
    (__ct_23.125 var=98) const ()  <137>;
    (__tmp.127 var=100) __uint__rs___uint___sint (__fch_uiA.124 __ct_23.125)  <139>;
    (__ct_255.129 var=102) const ()  <141>;
    (__tmp.131 var=104) __sint__ad___sint___sint (__tmp.127 __ct_255.129)  <143>;
    (__M_DMw.132 var=5 exp.133 var=23) store (__tmp.131 __adr_exp.77 exp.22)  <144>;
    call {
        () chess_separator_scheduler ()  <145>;
    } #14 off=9
    #15 off=10
    (__ct_20t0.80 var=66) const ()  <91>;
    (__adr_sig.82 var=68) __Pvoid__pl___Pvoid___sint (__rd___sp.79 __ct_20t0.80)  <93>;
    (__fch_uiA.134 var=105) load (__M_DMw.4 __adr_uiA.72 uiA.123)  <146>;
    (__ct_8388607.135 var=106) const ()  <147>;
    (__tmp.137 var=108) __uint__ad___uint___uint (__fch_uiA.134 __ct_8388607.135)  <149>;
    (__M_DMw.138 var=5 sig.139 var=24) store (__tmp.137 __adr_sig.82 sig.23)  <150>;
    call {
        () chess_separator_scheduler ()  <151>;
    } #16 off=11
    #17 off=12
    (__ct_24t0.85 var=70) const ()  <96>;
    (__adr_shiftDist.87 var=72) __Pvoid__pl___Pvoid___sint (__rd___sp.84 __ct_24t0.85)  <98>;
    (__ct_190.140 var=109) const ()  <152>;
    (__fch_exp.142 var=111) load (__M_DMw.4 __adr_exp.77 exp.133)  <154>;
    (__tmp.143 var=112) __sint__mi___sint___sint (__ct_190.140 __fch_exp.142)  <155>;
    (__M_DMw.144 var=5 shiftDist.145 var=25) store (__tmp.143 __adr_shiftDist.87 shiftDist.24)  <156>;
    call {
        () chess_separator_scheduler ()  <157>;
    } #18 off=13
    #19 off=14
    (__ct_0.113 var=90) const ()  <125>;
    (__ct_64.146 var=113) const ()  <158>;
    (__fch_shiftDist.148 var=115) load (__M_DMw.4 __adr_shiftDist.87 shiftDist.145)  <160>;
    (__tmp.149 var=116) bool__ge___sint___sint (__fch_shiftDist.148 __ct_64.146)  <161>;
    (__trgt.773 var=355) const ()  <1160>;
    () void_br_bool_t13s_s2 (__tmp.149 __trgt.773)  <1161>;
    (__either.774 var=339) undefined ()  <1162>;
    if {
        {
            () if_expr (__either.774)  <196>;
        } #21
        {
        } #24 off=46
        {
            #83 off=15
            (__ct_28t0.90 var=74) const ()  <101>;
            (__adr_sign.92 var=76) __Pvoid__pl___Pvoid___sint (__rd___sp.89 __ct_28t0.90)  <103>;
            (__fch_uiA.186 var=119) load (__M_DMw.4 __adr_uiA.72 uiA.123)  <200>;
            (__ct_31.187 var=120) const ()  <201>;
            (__tmp.189 var=122) __uint__rs___uint___sint (__fch_uiA.186 __ct_31.187)  <203>;
            (__M_DMw.194 var=5 sign.195 var=26) store (__tmp.624 __adr_sign.92 sign.25)  <208>;
            (__tmp.624 var=126) __sint_sne0___sint (__tmp.189)  <743>;
            call {
                () chess_separator_scheduler ()  <209>;
            } #27 off=16
            #123 off=17
            (__fch_shiftDist.196 var=127) load (__M_DMw.4 __adr_shiftDist.87 shiftDist.145)  <210>;
            (__tmp.630 var=130) bool__ge___sint___sint (__ct_0.113 __fch_shiftDist.196)  <783>;
            (__trgt.770 var=353) const ()  <1155>;
            () void_br_bool_t13s_s2 (__tmp.630 __trgt.770)  <1156>;
            (__either.771 var=339) undefined ()  <1157>;
            if {
                {
                    () if_expr (__either.771)  <248>;
                } #30
                {
                    #32 off=34
                    (__fch_uiA.234 var=131) load (__M_DMw.4 __adr_uiA.72 uiA.123)  <249>;
                    (__ct_3741319168.235 var=132) const ()  <250>;
                    (__tmp.237 var=134) bool__eq___uint___uint (__fch_uiA.234 __ct_3741319168.235)  <252>;
                    (__ct_2147483648.597 var=218) const ()  <711>;
                    (__trgt.758 var=345) const ()  <1135>;
                    () void_br_bool_t13s_s2 (__tmp.237 __trgt.758)  <1136>;
                    (__either.759 var=339) undefined ()  <1137>;
                    if {
                        {
                            () if_expr (__either.759)  <287>;
                        } #34
                        {
                        } #37 off=43
                        {
                            #39 off=35
                            (__fch_exp.274 var=137) load (__M_DMw.4 __adr_exp.77 exp.133)  <291>;
                            (__ct_4294967295.581 var=217) const ()  <694>;
                            (__ct_2147483647.601 var=219) const ()  <716>;
                            (__tmp.746 var=140) bool__ne___sint___sint (__fch_exp.274 __ct_255.129)  <1088>;
                            (__trgt.749 var=340) const ()  <1121>;
                            () void_br_bool_t13s_s2 (__tmp.746 __trgt.749)  <1122>;
                            (__either.750 var=339) undefined ()  <1123>;
                            if {
                                {
                                    () if_expr (__either.750)  <329>;
                                } #41
                                {
                                    (__false.754 var=338) const ()  <1129>;
                                } #43
                                {
                                    (__fch_sig.312 var=141) load (__M_DMw.4 __adr_sig.82 sig.139)  <330>;
                                    (__tmp.315 var=144) bool__ne___uint___uint (__fch_sig.312 __ct_0.113)  <333>;
                                    (__trgt.755 var=343) const ()  <1130>;
                                    () void_br_bool_t13s_s2 (__tmp.315 __trgt.755)  <1131>;
                                    (__either.756 var=339) undefined ()  <1132>;
                                } #42 off=36
                                {
                                    (__tmp.318 var=147) merge (__false.754 __either.756)  <336>;
                                } #44
                            } #40
                            if {
                                {
                                    () if_expr (__tmp.318)  <371>;
                                } #47
                                {
                                } #48 off=41
                                {
                                    #97 off=37
                                    (__fch_sign.355 var=150) load (__M_DMw.4 __adr_sign.92 sign.195)  <374>;
                                    (__fch_sign.561 var=151) bool__ne___sint___sint (__fch_sign.355 __ct_0.113)  <639>;
                                    (__trgt.751 var=341) const ()  <1124>;
                                    () void_br_bool_t13s_s2 (__fch_sign.561 __trgt.751)  <1125>;
                                    (__either.752 var=339) undefined ()  <1126>;
                                    if {
                                        {
                                            () if_expr (__either.752)  <410>;
                                        } #52
                                        {
                                        } #53 off=39
                                        {
                                            (__trgt.753 var=342) const ()  <1127>;
                                            () void_j_t21s_s2 (__trgt.753)  <1128>;
                                        } #54 off=38
                                        {
                                            (__rt_low.584 var=36) merge (__ct_0.113 __ct_4294967295.581)  <698>;
                                            (__rt_high.604 var=37) merge (__ct_2147483648.597 __ct_2147483647.601)  <720>;
                                        } #55
                                    } #51
                                    #236 off=40
                                    (__trgt.757 var=344) const ()  <1133>;
                                    () void_j_t21s_s2 (__trgt.757)  <1134>;
                                } #49
                                {
                                    (__rt_low.580 var=36) merge (__ct_4294967295.581 __rt_low.584)  <693>;
                                    (__rt_high.600 var=37) merge (__ct_2147483647.601 __rt_high.604)  <715>;
                                } #56
                            } #46
                            #237 off=42
                            (__trgt.760 var=346) const ()  <1138>;
                            () void_j_t21s_s2 (__trgt.760)  <1139>;
                        } #38
                        {
                            (__rt_low.577 var=36) merge (__ct_0.113 __rt_low.580)  <690>;
                            (__rt_high.596 var=37) merge (__ct_2147483648.597 __rt_high.600)  <710>;
                        } #58
                    } #33
                } #31
                {
                    #61 off=18
                    (__fch_sig.398 var=158) load (__M_DMw.4 __adr_sig.82 sig.139)  <420>;
                    (__ct_8388608.399 var=159) const ()  <421>;
                    (__tmp.401 var=161) __uint__or___uint___uint (__fch_sig.398 __ct_8388608.399)  <423>;
                    (__M_DMw.402 var=5 sig.403 var=24) store (__tmp.401 __adr_sig.82 sig.139)  <424>;
                    call {
                        () chess_separator_scheduler ()  <425>;
                    } #62 off=19
                    #203 off=20
                    (__ct_32t0.95 var=78) const ()  <106>;
                    (__adr_sig64.97 var=80) __Pvoid__pl___Pvoid___sint (__rd___sp.94 __ct_32t0.95)  <108>;
                    (__fch_sig.404 var=162) load (__M_DMw.4 __adr_sig.82 sig.403)  <426>;
                    (__M_DMw.410 var=5 sig64_low.411 var=29) store (__ct_0.113 __adr_sig64.97 sig64_low.28)  <432>;
                    (__M_DMw.416 var=5 sig64_high.417 var=30) store (__apl_r_high.646 __adr_sig64.617 sig64_high.29)  <437>;
                    (__ct_36t0.616 var=231) const ()  <733>;
                    (__adr_sig64.617 var=232) __Pvoid__pl___Pvoid___sint (__rd___sp.94 __ct_36t0.616)  <735>;
                    (__apl_r_high.646 var=259) __uint__ls___uint___sint (__fch_sig.404 __ct_8.716)  <804>;
                    (__ct_8.716 var=313) const ()  <920>;
                    call {
                        () chess_separator_scheduler ()  <438>;
                    } #64 off=21
                    #164 off=22
                    (__fch_sig64_high.424 var=175) load (__M_DMw.4 __adr_sig64.618 sig64_high.417)  <445>;
                    (__fch_shiftDist.426 var=176) load (__M_DMw.4 __adr_shiftDist.87 shiftDist.145)  <447>;
                    (__adr_sig64.618 var=233) __Pvoid__pl___Pvoid___sint (__rd___sp.94 __ct_36t0.616)  <736>;
                    (__tmp.664 var=276) bool__eq___sint___sint (__fch_shiftDist.426 __ct_0.113)  <826>;
                    (__trgt.764 var=349) const ()  <1145>;
                    () void_br_bool_t13s_s2 (__tmp.664 __trgt.764)  <1146>;
                    (__either.765 var=339) undefined ()  <1147>;
                    if {
                        {
                            () if_expr (__either.765)  <829>;
                        } #166
                        {
                        } #167 off=27
                        {
                            #169 off=23
                            (__ct_m32.637 var=261) const ()  <793>;
                            (__apl_ff.667 var=273) __sint__pl___sint___sint (__fch_shiftDist.426 __ct_m32.637)  <830>;
                            (__tmp.668 var=277) bool__lt___sint___sint (__apl_ff.667 __ct_0.113)  <831>;
                            (__trgt.761 var=347) const ()  <1140>;
                            () void_br_bool_t13s_s2 (__tmp.668 __trgt.761)  <1141>;
                            (__either.762 var=339) undefined ()  <1142>;
                            if {
                                {
                                    () if_expr (__either.762)  <832>;
                                } #171
                                {
                                    (__tmp.669 var=278) __sint__mi___sint___sint (__ct_0.113 __apl_ff.667)  <833>;
                                    (__apl_carries.670 var=274) __uint__ls___uint___sint (__fch_sig64_high.424 __tmp.669)  <834>;
                                    (__tmp.671 var=279) __uint__rs___uint___sint (__ct_0.113 __fch_shiftDist.426)  <835>;
                                    (__apl_r_low.672 var=280) __uint__or___uint___uint (__tmp.671 __apl_carries.670)  <836>;
                                    (__apl_r_high.673 var=281) __uint__rs___uint___sint (__fch_sig64_high.424 __fch_shiftDist.426)  <837>;
                                } #172 off=25
                                {
                                    (__apl_r_low.674 var=280) __uint__rs___uint___sint (__fch_sig64_high.424 __apl_ff.667)  <838>;
                                    (__trgt.763 var=348) const ()  <1143>;
                                    () void_j_t21s_s2 (__trgt.763)  <1144>;
                                } #173 off=24
                                {
                                    (__rt_low.675 var=268) merge (__apl_r_low.672 __apl_r_low.674)  <839>;
                                    (__rt_high.676 var=269) merge (__apl_r_high.673 __ct_0.113)  <840>;
                                } #174
                            } #170
                            #239 off=26
                            (__trgt.766 var=350) const ()  <1148>;
                            () void_j_t21s_s2 (__trgt.766)  <1149>;
                        } #168
                        {
                            (__tmp_low.677 var=284) merge (__ct_0.113 __rt_low.675)  <841>;
                            (__tmp_high.678 var=286) merge (__fch_sig64_high.424 __rt_high.676)  <842>;
                        } #175
                    } #165
                    #161 off=28
                    (__ct_40t0.100 var=82) const ()  <111>;
                    (__adr_absZ.102 var=84) __Pvoid__pl___Pvoid___sint (__rd___sp.99 __ct_40t0.100)  <113>;
                    (__M_DMw.430 var=5 absZ_low.431 var=31) store (__tmp_low.677 __adr_absZ.102 absZ_low.30)  <451>;
                    (__M_DMw.436 var=5 absZ_high.437 var=32) store (__tmp_high.678 __adr_absZ.619 absZ_high.31)  <456>;
                    (__ct_44t0.613 var=228) const ()  <729>;
                    (__adr_absZ.619 var=234) __Pvoid__pl___Pvoid___sint (__rd___sp.99 __ct_44t0.613)  <737>;
                    call {
                        () chess_separator_scheduler ()  <457>;
                    } #66 off=29
                    #102 off=30
                    (__fch_sign.438 var=183) load (__M_DMw.4 __adr_sign.92 sign.195)  <458>;
                    (__fch_sign.565 var=184) bool__ne___sint___sint (__fch_sign.438 __ct_0.113)  <646>;
                    (__trgt.767 var=351) const ()  <1150>;
                    () void_br_bool_t13s_s2 (__fch_sign.565 __trgt.767)  <1151>;
                    (__either.768 var=339) undefined ()  <1152>;
                    if {
                        {
                            () if_expr (__either.768)  <494>;
                        } #69
                        {
                            (__fch_absZ_low.477 var=188) load (__M_DMw.4 __adr_absZ.102 absZ_low.431)  <498>;
                            (__fch_absZ_high.482 var=191) load (__M_DMw.4 __adr_absZ.614 absZ_high.437)  <503>;
                            (__adr_absZ.614 var=229) __Pvoid__pl___Pvoid___sint (__rd___sp.99 __ct_44t0.613)  <731>;
                            (__apl_r_low.696 var=299) __uint_sub___uint___uint (__ct_0.113 __fch_absZ_low.477)  <865>;
                            (__apl_r_high.697 var=300) __uint_sub___uint___uint (__ct_0.113 __fch_absZ_high.482)  <866>;
                            (__apl_r_high.700 var=300) __uint__mi___uint___uint (__apl_r_high.697 __tmp.740)  <869>;
                            (__tmp.740 var=327) __sint_sne0___sint (__fch_absZ_low.477)  <1018>;
                        } #211 off=32
                        {
                            (__fch_absZ_low.486 var=194) load (__M_DMw.4 __adr_absZ.102 absZ_low.431)  <507>;
                            (__fch_absZ_high.491 var=197) load (__M_DMw.4 __adr_absZ.615 absZ_high.437)  <512>;
                            (__adr_absZ.615 var=230) __Pvoid__pl___Pvoid___sint (__rd___sp.99 __ct_44t0.613)  <732>;
                            (__trgt.769 var=352) const ()  <1153>;
                            () void_j_t21s_s2 (__trgt.769)  <1154>;
                        } #71 off=31
                        {
                            (__rt_low.587 var=36) merge (__apl_r_low.696 __fch_absZ_low.486)  <701>;
                            (__rt_high.607 var=37) merge (__apl_r_high.700 __fch_absZ_high.491)  <723>;
                        } #72
                    } #68
                    #240 off=33
                    (__trgt.772 var=354) const ()  <1158>;
                    () void_j_t21s_s2 (__trgt.772)  <1159>;
                } #60
                {
                    (sig.494 var=24) merge (sig.139 sig.403)  <516>;
                    (sig64_low.495 var=29) merge (sig64_low.28 sig64_low.411)  <517>;
                    (sig64_high.496 var=30) merge (sig64_high.29 sig64_high.417)  <518>;
                    (absZ_low.497 var=31) merge (absZ_low.30 absZ_low.431)  <519>;
                    (absZ_high.498 var=32) merge (absZ_high.31 absZ_high.437)  <520>;
                    (__rt_low.574 var=36) merge (__rt_low.577 __rt_low.587)  <687>;
                    (__rt_high.593 var=37) merge (__rt_high.596 __rt_high.607)  <707>;
                } #74
            } #29
            #241 off=45
            (__trgt.775 var=356) const ()  <1163>;
            () void_j_t21s_s2 (__trgt.775)  <1164>;
        } #25
        {
            (sig.500 var=24) merge (sig.139 sig.494)  <522>;
            (sign.501 var=26) merge (sign.25 sign.195)  <523>;
            (sig64_low.502 var=29) merge (sig64_low.28 sig64_low.495)  <524>;
            (sig64_high.503 var=30) merge (sig64_high.29 sig64_high.496)  <525>;
            (absZ_low.504 var=31) merge (absZ_low.30 absZ_low.497)  <526>;
            (absZ_high.505 var=32) merge (absZ_high.31 absZ_high.498)  <527>;
            (__rt_low.571 var=36) merge (__ct_0.113 __rt_low.574)  <684>;
            (__rt_high.590 var=37) merge (__ct_0.113 __rt_high.593)  <704>;
        } #75
    } #20
    #78 off=47 nxt=-2
    (__rd___sp.508 var=33) rd_res_reg (__R_SP.11 __sp.52)  <530>;
    (__ct_48s0.509 var=200) const ()  <531>;
    (__tmp.511 var=202) __Pvoid__pl___Pvoid___sint (__rd___sp.508 __ct_48s0.509)  <533>;
    (__R_SP.512 var=12 __sp.513 var=18) wr_res_reg (__tmp.511 __sp.52)  <534>;
    () void___rts_jr_w32 (__la.34)  <535>;
    (__rt_low.515 var=36 stl=X off=10) assign (__rt_low.571)  <537>;
    () out (__rt_low.515)  <538>;
    (__rt_high.517 var=37 stl=X off=11) assign (__rt_high.590)  <540>;
    () out (__rt_high.517)  <541>;
    () sink (__sp.513)  <547>;
    () sink (exact.106)  <548>;
    () sink (a.108)  <549>;
    () sink (uA.117)  <550>;
    () sink (uiA.123)  <551>;
    () sink (exp.133)  <552>;
    () sink (sig.500)  <553>;
    () sink (shiftDist.145)  <554>;
    () sink (sign.501)  <555>;
    () sink (sig64_low.502)  <558>;
    () sink (sig64_high.503)  <559>;
    () sink (absZ_low.504)  <560>;
    () sink (absZ_high.505)  <561>;
} #0
0 : 'SoftFloat-3e/source/f32_to_i64_r_minMag.c';
----------
0 : (0,44:0,0);
3 : (0,44:47,0);
4 : (0,44:47,0);
5 : (0,44:34,0);
8 : (0,47:4,4);
9 : (0,60:9,13);
10 : (0,60:9,13);
11 : (0,61:8,14);
12 : (0,61:8,14);
13 : (0,62:8,15);
14 : (0,62:8,15);
15 : (0,63:8,16);
16 : (0,63:8,16);
17 : (0,66:14,17);
18 : (0,66:14,17);
19 : (0,67:12,17);
20 : (0,67:4,17);
24 : (0,73:8,19);
25 : (0,73:8,21);
27 : (0,77:9,23);
29 : (0,78:4,23);
31 : (0,78:26,24);
32 : (0,79:17,24);
33 : (0,79:8,24);
37 : (0,80:12,26);
38 : (0,80:12,28);
39 : (0,86:17,29);
40 : (0,86:26,29);
42 : (0,86:26,30);
43 : (0,86:26,31);
46 : (0,86:33,33);
48 : (0,86:35,34);
49 : (0,87:8,35);
51 : (0,87:8,35);
53 : (0,87:33,36);
54 : (0,87:40,37);
60 : (0,85:8,48);
61 : (0,91:8,50);
62 : (0,91:8,50);
64 : (0,92:10,51);
66 : (0,93:9,52);
68 : (0,100:16,52);
71 : (0,100:26,54);
78 : (0,100:4,63);
83 : (0,77:4,22);
97 : (0,87:3,35);
102 : (0,100:11,52);
123 : (0,78:19,23);
161 : (0,93:4,51);
164 : (0,93:16,51);
165 : (0,93:16,51);
166 : (0,93:16,51);
167 : (0,93:16,51);
168 : (0,93:16,51);
169 : (0,93:16,51);
170 : (0,93:16,51);
171 : (0,93:16,51);
172 : (0,93:16,51);
173 : (0,93:16,51);
174 : (0,93:16,51);
175 : (0,93:16,51);
203 : (0,92:4,50);
211 : (0,100:18,53);
----------
58 : (0,44:13,0);
59 : (0,44:13,0);
61 : (0,44:13,0);
62 : (0,44:13,0);
65 : (0,44:52,0);
66 : (0,44:52,0);
68 : (0,44:52,0);
70 : (0,44:44,0);
71 : (0,44:44,0);
73 : (0,44:44,0);
75 : (0,49:19,0);
76 : (0,49:19,0);
78 : (0,49:19,0);
80 : (0,50:18,0);
81 : (0,50:18,0);
83 : (0,50:18,0);
85 : (0,51:17,0);
86 : (0,51:17,0);
88 : (0,51:17,0);
90 : (0,52:18,0);
91 : (0,52:18,0);
93 : (0,52:18,0);
95 : (0,53:17,0);
96 : (0,53:17,0);
98 : (0,53:17,0);
100 : (0,54:9,0);
101 : (0,54:9,0);
103 : (0,54:9,0);
105 : (0,55:18,0);
106 : (0,55:18,0);
108 : (0,55:18,0);
110 : (0,56:17,0);
111 : (0,56:17,0);
113 : (0,56:17,0);
116 : (0,44:47,0);
117 : (0,44:47,0);
118 : (0,44:34,0);
123 : (0,47:4,4);
124 : (0,60:11,12);
125 : (0,60:6,0);
128 : (0,60:6,12);
129 : (0,60:9,13);
133 : (0,61:12,13);
134 : (0,61:4,13);
135 : (0,61:8,14);
136 : (0,62:28,14);
137 : (0,62:34,0);
139 : (0,62:32,14);
141 : (0,62:38,0);
143 : (0,62:38,14);
144 : (0,62:4,14);
145 : (0,62:8,15);
146 : (0,63:12,15);
147 : (0,63:17,0);
149 : (0,63:17,15);
150 : (0,63:4,15);
151 : (0,63:8,16);
152 : (0,66:21,0);
154 : (0,66:23,16);
155 : (0,66:21,16);
156 : (0,66:4,16);
157 : (0,66:14,17);
158 : (0,67:12,0);
160 : (0,67:15,17);
161 : (0,67:12,17);
196 : (0,67:4,17);
200 : (0,77:32,22);
201 : (0,77:38,0);
203 : (0,77:36,22);
208 : (0,77:4,22);
209 : (0,77:9,23);
210 : (0,78:9,23);
248 : (0,78:4,23);
249 : (0,79:13,24);
250 : (0,79:17,0);
252 : (0,79:17,24);
287 : (0,79:8,24);
291 : (0,86:13,29);
329 : (0,86:26,29);
330 : (0,86:29,30);
333 : (0,86:26,30);
336 : (0,86:26,32);
371 : (0,86:33,33);
374 : (0,87:3,35);
410 : (0,87:8,35);
420 : (0,91:4,49);
421 : (0,91:8,0);
423 : (0,91:8,49);
424 : (0,91:4,49);
425 : (0,91:8,50);
426 : (0,92:28,50);
432 : (0,92:4,50);
437 : (0,92:4,50);
438 : (0,92:10,51);
445 : (0,93:11,51);
447 : (0,93:18,51);
451 : (0,93:4,51);
456 : (0,93:4,51);
457 : (0,93:9,52);
458 : (0,100:11,52);
494 : (0,100:16,52);
498 : (0,100:19,53);
503 : (0,100:19,53);
507 : (0,100:26,54);
512 : (0,100:26,54);
516 : (0,78:4,59);
517 : (0,78:4,59);
518 : (0,78:4,59);
519 : (0,78:4,59);
520 : (0,78:4,59);
522 : (0,67:4,62);
523 : (0,67:4,62);
524 : (0,67:4,62);
525 : (0,67:4,62);
526 : (0,67:4,62);
527 : (0,67:4,62);
530 : (0,100:4,0);
531 : (0,100:4,0);
533 : (0,100:4,0);
534 : (0,100:4,63);
535 : (0,100:4,63);
537 : (0,100:4,0);
540 : (0,100:4,0);
639 : (0,87:3,35);
646 : (0,100:11,52);
694 : (0,86:35,0);
711 : (0,80:41,0);
716 : (0,86:35,0);
729 : (0,56:17,0);
733 : (0,55:18,0);
743 : (0,77:4,22);
783 : (0,78:19,23);
793 : (0,92:31,0);
804 : (0,92:31,50);
826 : (0,93:16,51);
829 : (0,93:16,51);
830 : (0,93:16,51);
831 : (0,93:16,51);
832 : (0,93:16,51);
833 : (0,93:16,51);
834 : (0,93:16,51);
835 : (0,93:16,51);
836 : (0,93:16,51);
837 : (0,93:16,51);
838 : (0,93:16,51);
839 : (0,93:16,51);
840 : (0,93:16,51);
841 : (0,93:16,51);
842 : (0,93:16,51);
865 : (0,100:18,53);
866 : (0,100:18,53);
869 : (0,100:18,53);
920 : (0,92:31,0);
1018 : (0,100:18,53);
1088 : (0,86:17,29);
1122 : (0,86:26,29);
1125 : (0,87:8,35);
1131 : (0,86:33,33);
1136 : (0,79:8,24);
1141 : (0,93:16,51);
1146 : (0,93:16,51);
1151 : (0,100:16,52);
1156 : (0,78:4,23);
1161 : (0,67:4,17);

