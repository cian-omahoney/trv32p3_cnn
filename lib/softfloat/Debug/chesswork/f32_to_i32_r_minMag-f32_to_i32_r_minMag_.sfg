
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Feb 16 13:34:10 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f32_to_i32_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  int_fast32_t f32_to_i32_r_minMag(float32_t, bool)
Ff32_to_i32_r_minMag : user_defined, called {
    fnm : "f32_to_i32_r_minMag" 'long f32_to_i32_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=36 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_to_i32_r_minMag typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : exact typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   20 : a typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=float32_t_DMb
   21 : uA typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   22 : uiA typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   23 : exp typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   24 : sig typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   25 : shiftDist typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   26 : sign typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   27 : absZ typ=w08 val=32t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast32_t_DMb
   28 : __rd___sp typ=w32 bnd=m
   29 : __la typ=w32 bnd=p tref=w32__
   30 : __rt typ=w32 bnd=p tref=int_fast32_t__
   31 : __arg_a typ=w32 bnd=p tref=float32_t___1
   32 : __arg_exact typ=w32 bnd=p tref=bool__
   34 : __ct_m36S0 typ=w32 val=-36S0 bnd=m
   36 : __tmp typ=w32 bnd=m
   39 : __ct_0t0 typ=w32 val=0t0 bnd=m
   41 : __adr_exact typ=w32 bnd=m adro=19
   43 : __ct_4t0 typ=w32 val=4t0 bnd=m
   45 : __adr_a typ=w32 bnd=m adro=20
   47 : __ct_8t0 typ=w32 val=8t0 bnd=m
   49 : __adr_uA typ=w32 bnd=m adro=21
   51 : __ct_12t0 typ=w32 val=12t0 bnd=m
   53 : __adr_uiA typ=w32 bnd=m adro=22
   55 : __ct_16t0 typ=w32 val=16t0 bnd=m
   57 : __adr_exp typ=w32 bnd=m adro=23
   59 : __ct_20t0 typ=w32 val=20t0 bnd=m
   61 : __adr_sig typ=w32 bnd=m adro=24
   63 : __ct_24t0 typ=w32 val=24t0 bnd=m
   65 : __adr_shiftDist typ=w32 bnd=m adro=25
   67 : __ct_28t0 typ=w32 val=28t0 bnd=m
   69 : __adr_sign typ=w32 bnd=m adro=26
   71 : __ct_32t0 typ=w32 val=32t0 bnd=m
   73 : __adr_absZ typ=w32 bnd=m adro=27
   78 : __fch_a typ=w32 bnd=m
   79 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   85 : __fch_uA typ=w32 bnd=m
   86 : __fch_uiA typ=w32 bnd=m
   87 : __ct_23 typ=w32 val=23f bnd=m
   89 : __tmp typ=w32 bnd=m
   91 : __ct_255 typ=w32 val=255f bnd=m
   93 : __tmp typ=w32 bnd=m
   94 : __fch_uiA typ=w32 bnd=m
   95 : __ct_8388607 typ=w32 val=8388607f bnd=m
   97 : __tmp typ=w32 bnd=m
   98 : __ct_158 typ=w32 val=158f bnd=m
  100 : __fch_exp typ=w32 bnd=m
  101 : __tmp typ=w32 bnd=m
  102 : __ct_32 typ=w32 val=32f bnd=m
  104 : __fch_shiftDist typ=w32 bnd=m
  105 : __tmp typ=bool bnd=m
  108 : __fch_uiA typ=w32 bnd=m
  109 : __ct_31 typ=w32 val=31f bnd=m
  111 : __tmp typ=w32 bnd=m
  115 : __tmp typ=w32 bnd=m
  116 : __fch_shiftDist typ=w32 bnd=m
  119 : __tmp typ=bool bnd=m
  120 : __fch_uiA typ=w32 bnd=m
  121 : __ct_3472883712 typ=t20s_rp12 val=-200704f bnd=m
  123 : __tmp typ=bool bnd=m
  124 : __ct_m2147483648 typ=t20s_rp12 val=-524288f bnd=m
  126 : __fch_exp typ=w32 bnd=m
  129 : __tmp typ=bool bnd=m
  130 : __fch_sig typ=w32 bnd=m
  133 : __tmp typ=bool bnd=m
  136 : __tmp typ=bool bnd=m
  137 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  139 : __fch_sign typ=w32 bnd=m
  140 : __fch_sign typ=bool bnd=m
  145 : __tmp typ=w32 bnd=m
  146 : __tmp typ=w32 bnd=m
  147 : __fch_sig typ=w32 bnd=m
  148 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
  150 : __tmp typ=w32 bnd=m
  151 : __ct_8 typ=w32 val=8f bnd=m
  153 : __tmp typ=w32 bnd=m
  154 : __fch_sig typ=w32 bnd=m
  155 : __fch_shiftDist typ=w32 bnd=m
  156 : __tmp typ=w32 bnd=m
  158 : __fch_sign typ=w32 bnd=m
  159 : __fch_sign typ=bool bnd=m
  162 : __fch_absZ typ=w32 bnd=m
  163 : __tmp typ=w32 bnd=m
  164 : __fch_absZ typ=w32 bnd=m
  165 : __tmp typ=w32 bnd=m
  167 : __ct_36s0 typ=w32 val=36s0 bnd=m
  169 : __tmp typ=w32 bnd=m
  202 : __false typ=bool val=0f bnd=m
  203 : __either typ=bool bnd=m
  204 : __trgt typ=t13s_s2 val=0j bnd=m
  205 : __trgt typ=t13s_s2 val=0j bnd=m
  206 : __trgt typ=t21s_s2 val=0j bnd=m
  207 : __trgt typ=t13s_s2 val=0j bnd=m
  208 : __trgt typ=t21s_s2 val=0j bnd=m
  209 : __trgt typ=t13s_s2 val=0j bnd=m
  210 : __trgt typ=t21s_s2 val=0j bnd=m
  211 : __trgt typ=t13s_s2 val=0j bnd=m
  212 : __trgt typ=t21s_s2 val=0j bnd=m
  213 : __trgt typ=t13s_s2 val=0j bnd=m
  214 : __trgt typ=t21s_s2 val=0j bnd=m
  215 : __trgt typ=t13s_s2 val=0j bnd=m
  216 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_to_i32_r_minMag {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (exact.18 var=19) source ()  <29>;
    (a.19 var=20) source ()  <30>;
    (uA.20 var=21) source ()  <31>;
    (uiA.21 var=22) source ()  <32>;
    (exp.22 var=23) source ()  <33>;
    (sig.23 var=24) source ()  <34>;
    (shiftDist.24 var=25) source ()  <35>;
    (sign.25 var=26) source ()  <36>;
    (absZ.26 var=27) source ()  <37>;
    (__la.28 var=29 stl=X off=1) inp ()  <39>;
    (__la.29 var=29) deassign (__la.28)  <40>;
    (__arg_a.32 var=31 stl=X off=11) inp ()  <43>;
    (__arg_a.33 var=31) deassign (__arg_a.32)  <44>;
    (__arg_exact.35 var=32 stl=X off=12) inp ()  <46>;
    (__arg_exact.36 var=32) deassign (__arg_exact.35)  <47>;
    (__rd___sp.38 var=28) rd_res_reg (__R_SP.11 __sp.17)  <49>;
    (__ct_m36S0.39 var=34) const ()  <50>;
    (__tmp.41 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.38 __ct_m36S0.39)  <52>;
    (__R_SP.42 var=12 __sp.43 var=18) wr_res_reg (__tmp.41 __sp.17)  <53>;
    (__rd___sp.45 var=28) rd_res_reg (__R_SP.11 __sp.43)  <56>;
    (__ct_0t0.46 var=39) const ()  <57>;
    (__adr_exact.48 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_0t0.46)  <59>;
    (__rd___sp.50 var=28) rd_res_reg (__R_SP.11 __sp.43)  <61>;
    (__rd___sp.55 var=28) rd_res_reg (__R_SP.11 __sp.43)  <66>;
    (__rd___sp.60 var=28) rd_res_reg (__R_SP.11 __sp.43)  <71>;
    (__rd___sp.65 var=28) rd_res_reg (__R_SP.11 __sp.43)  <76>;
    (__rd___sp.70 var=28) rd_res_reg (__R_SP.11 __sp.43)  <81>;
    (__rd___sp.75 var=28) rd_res_reg (__R_SP.11 __sp.43)  <86>;
    (__rd___sp.80 var=28) rd_res_reg (__R_SP.11 __sp.43)  <91>;
    (__rd___sp.85 var=28) rd_res_reg (__R_SP.11 __sp.43)  <96>;
    (__M_DMw.91 var=5 exact.92 var=19) store (__arg_exact.36 __adr_exact.48 exact.18)  <102>;
    call {
        () chess_separator_scheduler ()  <103>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.51 var=43) const ()  <62>;
    (__adr_a.53 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.51)  <64>;
    (__M_DMw.93 var=5 a.94 var=20) store (__arg_a.33 __adr_a.53 a.19)  <104>;
    call {
        () chess_separator_scheduler ()  <109>;
    } #8 off=3
    #9 off=4
    (__ct_8t0.56 var=47) const ()  <67>;
    (__adr_uA.58 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.56)  <69>;
    (__fch_a.98 var=78) load (__M_DMw.4 __adr_a.53 a.94)  <110>;
    (__M_DMw.102 var=5 uA.103 var=21) store (__fch_a.98 __adr_uA.58 uA.20)  <114>;
    call {
        () chess_separator_scheduler ()  <115>;
    } #10 off=5
    #11 off=6
    (__ct_12t0.61 var=51) const ()  <72>;
    (__adr_uiA.63 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_12t0.61)  <74>;
    (__fch_uA.107 var=85) load (__M_DMw.4 __adr_uA.58 uA.103)  <119>;
    (__M_DMw.108 var=5 uiA.109 var=22) store (__fch_uA.107 __adr_uiA.63 uiA.21)  <120>;
    call {
        () chess_separator_scheduler ()  <121>;
    } #12 off=7
    #13 off=8
    (__ct_16t0.66 var=55) const ()  <77>;
    (__adr_exp.68 var=57) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_16t0.66)  <79>;
    (__fch_uiA.110 var=86) load (__M_DMw.4 __adr_uiA.63 uiA.109)  <122>;
    (__ct_23.111 var=87) const ()  <123>;
    (__tmp.113 var=89) __uint__rs___uint___sint (__fch_uiA.110 __ct_23.111)  <125>;
    (__ct_255.115 var=91) const ()  <127>;
    (__tmp.117 var=93) __sint__ad___sint___sint (__tmp.113 __ct_255.115)  <129>;
    (__M_DMw.118 var=5 exp.119 var=23) store (__tmp.117 __adr_exp.68 exp.22)  <130>;
    call {
        () chess_separator_scheduler ()  <131>;
    } #14 off=9
    #15 off=10
    (__ct_20t0.71 var=59) const ()  <82>;
    (__adr_sig.73 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.70 __ct_20t0.71)  <84>;
    (__fch_uiA.120 var=94) load (__M_DMw.4 __adr_uiA.63 uiA.109)  <132>;
    (__ct_8388607.121 var=95) const ()  <133>;
    (__tmp.123 var=97) __uint__ad___uint___uint (__fch_uiA.120 __ct_8388607.121)  <135>;
    (__M_DMw.124 var=5 sig.125 var=24) store (__tmp.123 __adr_sig.73 sig.23)  <136>;
    call {
        () chess_separator_scheduler ()  <137>;
    } #16 off=11
    #17 off=12
    (__ct_24t0.76 var=63) const ()  <87>;
    (__adr_shiftDist.78 var=65) __Pvoid__pl___Pvoid___sint (__rd___sp.75 __ct_24t0.76)  <89>;
    (__ct_158.126 var=98) const ()  <138>;
    (__fch_exp.128 var=100) load (__M_DMw.4 __adr_exp.68 exp.119)  <140>;
    (__tmp.129 var=101) __sint__mi___sint___sint (__ct_158.126 __fch_exp.128)  <141>;
    (__M_DMw.130 var=5 shiftDist.131 var=25) store (__tmp.129 __adr_shiftDist.78 shiftDist.24)  <142>;
    call {
        () chess_separator_scheduler ()  <143>;
    } #18 off=13
    #19 off=14
    (__ct_0.99 var=79) const ()  <111>;
    (__ct_32.132 var=102) const ()  <144>;
    (__fch_shiftDist.134 var=104) load (__M_DMw.4 __adr_shiftDist.78 shiftDist.131)  <146>;
    (__tmp.135 var=105) bool__ge___sint___sint (__fch_shiftDist.134 __ct_32.132)  <147>;
    (__trgt.496 var=215) const ()  <719>;
    () void_br_bool_t13s_s2 (__tmp.135 __trgt.496)  <720>;
    (__either.497 var=203) undefined ()  <721>;
    if {
        {
            () if_expr (__either.497)  <176>;
        } #21
        {
        } #24 off=38
        {
            #81 off=15
            (__ct_28t0.81 var=67) const ()  <92>;
            (__adr_sign.83 var=69) __Pvoid__pl___Pvoid___sint (__rd___sp.80 __ct_28t0.81)  <94>;
            (__fch_uiA.166 var=108) load (__M_DMw.4 __adr_uiA.63 uiA.109)  <180>;
            (__ct_31.167 var=109) const ()  <181>;
            (__tmp.169 var=111) __uint__rs___uint___sint (__fch_uiA.166 __ct_31.167)  <183>;
            (__M_DMw.174 var=5 sign.175 var=26) store (__tmp.463 __adr_sign.83 sign.25)  <188>;
            (__tmp.463 var=115) __sint_sne0___sint (__tmp.169)  <567>;
            call {
                () chess_separator_scheduler ()  <189>;
            } #27 off=16
            #112 off=17
            (__fch_shiftDist.176 var=116) load (__M_DMw.4 __adr_shiftDist.78 shiftDist.131)  <190>;
            (__tmp.469 var=119) bool__ge___sint___sint (__ct_0.99 __fch_shiftDist.176)  <602>;
            (__trgt.493 var=213) const ()  <714>;
            () void_br_bool_t13s_s2 (__tmp.469 __trgt.493)  <715>;
            (__either.494 var=203) undefined ()  <716>;
            if {
                {
                    () if_expr (__either.494)  <222>;
                } #30
                {
                    #32 off=26
                    (__fch_uiA.208 var=120) load (__M_DMw.4 __adr_uiA.63 uiA.109)  <223>;
                    (__ct_3472883712.209 var=121) const ()  <224>;
                    (__tmp.211 var=123) bool__eq___uint___uint (__fch_uiA.208 __ct_3472883712.209)  <226>;
                    (__ct_m2147483648.240 var=124) const ()  <256>;
                    (__trgt.487 var=209) const ()  <704>;
                    () void_br_bool_t13s_s2 (__tmp.211 __trgt.487)  <705>;
                    (__either.488 var=203) undefined ()  <706>;
                    if {
                        {
                            () if_expr (__either.488)  <255>;
                        } #34
                        {
                        } #37 off=35
                        {
                            #39 off=27
                            (__fch_exp.242 var=126) load (__M_DMw.4 __adr_exp.68 exp.119)  <259>;
                            (__ct_2147483647.309 var=137) const ()  <328>;
                            (__tmp.475 var=129) bool__ne___sint___sint (__fch_exp.242 __ct_255.115)  <662>;
                            (__trgt.478 var=204) const ()  <690>;
                            () void_br_bool_t13s_s2 (__tmp.475 __trgt.478)  <691>;
                            (__either.479 var=203) undefined ()  <692>;
                            if {
                                {
                                    () if_expr (__either.479)  <291>;
                                } #41
                                {
                                    (__false.483 var=202) const ()  <698>;
                                } #43
                                {
                                    (__fch_sig.274 var=130) load (__M_DMw.4 __adr_sig.73 sig.125)  <292>;
                                    (__tmp.277 var=133) bool__ne___uint___uint (__fch_sig.274 __ct_0.99)  <295>;
                                    (__trgt.484 var=207) const ()  <699>;
                                    () void_br_bool_t13s_s2 (__tmp.277 __trgt.484)  <700>;
                                    (__either.485 var=203) undefined ()  <701>;
                                } #42 off=28
                                {
                                    (__tmp.280 var=136) merge (__false.483 __either.485)  <298>;
                                } #44
                            } #40
                            if {
                                {
                                    () if_expr (__tmp.280)  <327>;
                                } #47
                                {
                                } #48 off=33
                                {
                                    #95 off=29
                                    (__fch_sign.311 var=139) load (__M_DMw.4 __adr_sign.83 sign.175)  <330>;
                                    (__fch_sign.451 var=140) bool__ne___sint___sint (__fch_sign.311 __ct_0.99)  <522>;
                                    (__trgt.480 var=205) const ()  <693>;
                                    () void_br_bool_t13s_s2 (__fch_sign.451 __trgt.480)  <694>;
                                    (__either.481 var=203) undefined ()  <695>;
                                    if {
                                        {
                                            () if_expr (__either.481)  <360>;
                                        } #52
                                        {
                                        } #53 off=31
                                        {
                                            (__trgt.482 var=206) const ()  <696>;
                                            () void_j_t21s_s2 (__trgt.482)  <697>;
                                        } #54 off=30
                                        {
                                            (__tmp.345 var=145) merge (__ct_m2147483648.240 __ct_2147483647.309)  <365>;
                                        } #55
                                    } #51
                                    #122 off=32
                                    (__trgt.486 var=208) const ()  <702>;
                                    () void_j_t21s_s2 (__trgt.486)  <703>;
                                } #49
                                {
                                    (__tmp.346 var=146) merge (__ct_2147483647.309 __tmp.345)  <366>;
                                } #56
                            } #46
                            #123 off=34
                            (__trgt.489 var=210) const ()  <707>;
                            () void_j_t21s_s2 (__trgt.489)  <708>;
                        } #38
                        {
                            (__rt.347 var=30) merge (__ct_m2147483648.240 __tmp.346)  <368>;
                        } #58
                    } #33
                } #31
                {
                    #61 off=18
                    (__fch_sig.348 var=147) load (__M_DMw.4 __adr_sig.73 sig.125)  <370>;
                    (__ct_8388608.349 var=148) const ()  <371>;
                    (__tmp.351 var=150) __uint__or___uint___uint (__fch_sig.348 __ct_8388608.349)  <373>;
                    (__ct_8.352 var=151) const ()  <374>;
                    (__tmp.354 var=153) __uint__ls___uint___sint (__tmp.351 __ct_8.352)  <376>;
                    (__M_DMw.355 var=5 sig.356 var=24) store (__tmp.354 __adr_sig.73 sig.125)  <377>;
                    call {
                        () chess_separator_scheduler ()  <378>;
                    } #62 off=19
                    #63 off=20
                    (__ct_32t0.86 var=71) const ()  <97>;
                    (__adr_absZ.88 var=73) __Pvoid__pl___Pvoid___sint (__rd___sp.85 __ct_32t0.86)  <99>;
                    (__fch_sig.357 var=154) load (__M_DMw.4 __adr_sig.73 sig.356)  <379>;
                    (__fch_shiftDist.358 var=155) load (__M_DMw.4 __adr_shiftDist.78 shiftDist.131)  <380>;
                    (__tmp.359 var=156) __uint__rs___uint___sint (__fch_sig.357 __fch_shiftDist.358)  <381>;
                    (__M_DMw.361 var=5 absZ.362 var=27) store (__tmp.359 __adr_absZ.88 absZ.26)  <383>;
                    call {
                        () chess_separator_scheduler ()  <384>;
                    } #64 off=21
                    #100 off=22
                    (__fch_sign.363 var=158) load (__M_DMw.4 __adr_sign.83 sign.175)  <385>;
                    (__fch_sign.455 var=159) bool__ne___sint___sint (__fch_sign.363 __ct_0.99)  <529>;
                    (__trgt.490 var=211) const ()  <709>;
                    () void_br_bool_t13s_s2 (__fch_sign.455 __trgt.490)  <710>;
                    (__either.491 var=203) undefined ()  <711>;
                    if {
                        {
                            () if_expr (__either.491)  <415>;
                        } #67
                        {
                            (__fch_absZ.395 var=162) load (__M_DMw.4 __adr_absZ.88 absZ.362)  <418>;
                            (__tmp.396 var=163) __sint__mi___sint___sint (__ct_0.99 __fch_absZ.395)  <419>;
                        } #68 off=24
                        {
                            (__fch_absZ.397 var=164) load (__M_DMw.4 __adr_absZ.88 absZ.362)  <420>;
                            (__trgt.492 var=212) const ()  <712>;
                            () void_j_t21s_s2 (__trgt.492)  <713>;
                        } #69 off=23
                        {
                            (__tmp.398 var=165) merge (__tmp.396 __fch_absZ.397)  <421>;
                        } #70
                    } #66
                    #125 off=25
                    (__trgt.495 var=214) const ()  <717>;
                    () void_j_t21s_s2 (__trgt.495)  <718>;
                } #60
                {
                    (sig.399 var=24) merge (sig.125 sig.356)  <423>;
                    (absZ.400 var=27) merge (absZ.26 absZ.362)  <424>;
                    (__rt.401 var=30) merge (__rt.347 __tmp.398)  <425>;
                } #72
            } #29
            #126 off=37
            (__trgt.498 var=216) const ()  <722>;
            () void_j_t21s_s2 (__trgt.498)  <723>;
        } #25
        {
            (sig.402 var=24) merge (sig.125 sig.399)  <426>;
            (sign.403 var=26) merge (sign.25 sign.175)  <427>;
            (absZ.404 var=27) merge (absZ.26 absZ.400)  <428>;
            (__rt.405 var=30) merge (__ct_0.99 __rt.401)  <429>;
        } #73
    } #20
    #76 off=39 nxt=-2
    (__rd___sp.407 var=28) rd_res_reg (__R_SP.11 __sp.43)  <431>;
    (__ct_36s0.408 var=167) const ()  <432>;
    (__tmp.410 var=169) __Pvoid__pl___Pvoid___sint (__rd___sp.407 __ct_36s0.408)  <434>;
    (__R_SP.411 var=12 __sp.412 var=18) wr_res_reg (__tmp.410 __sp.43)  <435>;
    () void___rts_jr_w32 (__la.29)  <436>;
    (__rt.413 var=30 stl=X off=10) assign (__rt.405)  <437>;
    () out (__rt.413)  <438>;
    () sink (__sp.412)  <444>;
    () sink (exact.92)  <445>;
    () sink (a.94)  <446>;
    () sink (uA.103)  <447>;
    () sink (uiA.109)  <448>;
    () sink (exp.119)  <449>;
    () sink (sig.402)  <450>;
    () sink (shiftDist.131)  <451>;
    () sink (sign.403)  <452>;
    () sink (absZ.404)  <453>;
} #0
0 : 'SoftFloat-3e/source/f32_to_i32_r_minMag.c';
----------
0 : (0,44:0,0);
3 : (0,44:47,0);
4 : (0,44:47,0);
5 : (0,44:34,0);
8 : (0,47:4,4);
9 : (0,59:9,12);
10 : (0,59:9,12);
11 : (0,60:8,13);
12 : (0,60:8,13);
13 : (0,61:8,14);
14 : (0,61:8,14);
15 : (0,62:8,15);
16 : (0,62:8,15);
17 : (0,65:14,16);
18 : (0,65:14,16);
19 : (0,66:12,16);
20 : (0,66:4,16);
24 : (0,72:8,18);
25 : (0,72:8,20);
27 : (0,76:9,22);
29 : (0,77:4,22);
31 : (0,77:26,23);
32 : (0,78:17,23);
33 : (0,78:8,23);
37 : (0,78:77,25);
38 : (0,78:77,26);
39 : (0,83:17,27);
40 : (0,83:26,27);
42 : (0,83:26,28);
43 : (0,83:26,29);
46 : (0,83:33,31);
48 : (0,83:35,32);
49 : (0,84:8,33);
51 : (0,84:8,33);
53 : (0,84:23,34);
54 : (0,84:30,35);
60 : (0,82:8,46);
61 : (0,88:8,48);
62 : (0,88:8,48);
63 : (0,89:9,49);
64 : (0,89:9,49);
66 : (0,95:16,49);
68 : (0,95:18,50);
69 : (0,95:26,51);
76 : (0,95:4,60);
81 : (0,76:4,21);
95 : (0,84:3,33);
100 : (0,95:11,49);
112 : (0,77:19,22);
----------
49 : (0,44:13,0);
50 : (0,44:13,0);
52 : (0,44:13,0);
53 : (0,44:13,0);
56 : (0,44:52,0);
57 : (0,44:52,0);
59 : (0,44:52,0);
61 : (0,44:44,0);
62 : (0,44:44,0);
64 : (0,44:44,0);
66 : (0,49:19,0);
67 : (0,49:19,0);
69 : (0,49:19,0);
71 : (0,50:18,0);
72 : (0,50:18,0);
74 : (0,50:18,0);
76 : (0,51:17,0);
77 : (0,51:17,0);
79 : (0,51:17,0);
81 : (0,52:18,0);
82 : (0,52:18,0);
84 : (0,52:18,0);
86 : (0,53:17,0);
87 : (0,53:17,0);
89 : (0,53:17,0);
91 : (0,54:9,0);
92 : (0,54:9,0);
94 : (0,54:9,0);
96 : (0,55:17,0);
97 : (0,55:17,0);
99 : (0,55:17,0);
102 : (0,44:47,0);
103 : (0,44:47,0);
104 : (0,44:34,0);
109 : (0,47:4,4);
110 : (0,59:11,11);
111 : (0,59:6,0);
114 : (0,59:6,11);
115 : (0,59:9,12);
119 : (0,60:12,12);
120 : (0,60:4,12);
121 : (0,60:8,13);
122 : (0,61:28,13);
123 : (0,61:34,0);
125 : (0,61:32,13);
127 : (0,61:38,0);
129 : (0,61:38,13);
130 : (0,61:4,13);
131 : (0,61:8,14);
132 : (0,62:12,14);
133 : (0,62:17,0);
135 : (0,62:17,14);
136 : (0,62:4,14);
137 : (0,62:8,15);
138 : (0,65:21,0);
140 : (0,65:23,15);
141 : (0,65:21,15);
142 : (0,65:4,15);
143 : (0,65:14,16);
144 : (0,66:12,0);
146 : (0,66:15,16);
147 : (0,66:12,16);
176 : (0,66:4,16);
180 : (0,76:32,21);
181 : (0,76:38,0);
183 : (0,76:36,21);
188 : (0,76:4,21);
189 : (0,76:9,22);
190 : (0,77:9,22);
222 : (0,77:4,22);
223 : (0,78:13,23);
224 : (0,78:17,0);
226 : (0,78:17,23);
255 : (0,78:8,23);
256 : (0,78:96,0);
259 : (0,83:13,27);
291 : (0,83:26,27);
292 : (0,83:29,28);
295 : (0,83:26,28);
298 : (0,83:26,30);
327 : (0,83:33,31);
328 : (0,83:35,0);
330 : (0,84:3,33);
360 : (0,84:8,33);
365 : (0,84:8,36);
366 : (0,83:33,38);
368 : (0,78:8,42);
370 : (0,88:11,47);
371 : (0,88:15,0);
373 : (0,88:15,47);
374 : (0,88:30,0);
376 : (0,88:28,47);
377 : (0,88:4,47);
378 : (0,88:8,48);
379 : (0,89:11,48);
380 : (0,89:16,48);
381 : (0,89:14,48);
383 : (0,89:4,48);
384 : (0,89:9,49);
385 : (0,95:11,49);
415 : (0,95:16,49);
418 : (0,95:19,50);
419 : (0,95:18,50);
420 : (0,95:26,51);
421 : (0,95:16,52);
423 : (0,77:4,56);
424 : (0,77:4,56);
425 : (0,77:4,56);
426 : (0,66:4,59);
427 : (0,66:4,59);
428 : (0,66:4,59);
429 : (0,66:4,59);
431 : (0,95:4,0);
432 : (0,95:4,0);
434 : (0,95:4,0);
435 : (0,95:4,60);
436 : (0,95:4,60);
437 : (0,95:4,0);
522 : (0,84:3,33);
529 : (0,95:11,49);
567 : (0,76:4,21);
602 : (0,77:19,22);
662 : (0,83:17,27);
691 : (0,83:26,27);
694 : (0,84:8,33);
700 : (0,83:33,31);
705 : (0,78:8,23);
710 : (0,95:16,49);
715 : (0,77:4,22);
720 : (0,66:4,16);

