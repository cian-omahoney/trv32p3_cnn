
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:31:02 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/i32_to_f32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t i32_to_f32(int32_t)
Fi32_to_f32 : user_defined, called {
    fnm : "i32_to_f32" 'float32_t i32_to_f32(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=16 );
    llv : 0 0 0 0 0 ;
}
****
!!  float32_t softfloat_normRoundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_normRoundPackToF32 : user_defined, called {
    fnm : "softfloat_normRoundPackToF32" 'float32_t softfloat_normRoundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : i32_to_f32 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   20 : sign typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   21 : uZ typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   22 : absA typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   23 : __rd___sp typ=w32 bnd=m
   24 : __la typ=w32 bnd=p tref=w32__
   25 : __rt typ=w32 bnd=p tref=float32_t___1
   26 : __arg_a typ=w32 bnd=p tref=int32_t__
   27 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   31 : __ct_0t0 typ=w32 val=0t0 bnd=m
   33 : __adr_a typ=w32 bnd=m adro=19
   35 : __ct_4t0 typ=w32 val=4t0 bnd=m
   37 : __adr_sign typ=w32 bnd=m adro=20
   39 : __ct_8t0 typ=w32 val=8t0 bnd=m
   41 : __adr_uZ typ=w32 bnd=m adro=21
   43 : __ct_12t0 typ=w32 val=12t0 bnd=m
   45 : __adr_absA typ=w32 bnd=m adro=22
   46 : __fch_a typ=w32 bnd=m
   47 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   50 : __tmp typ=w32 bnd=m
   51 : __fch_a typ=w32 bnd=m
   52 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   54 : __tmp typ=w32 bnd=m
   57 : __tmp typ=bool bnd=m
   59 : __fch_sign typ=w32 bnd=m
   60 : __fch_sign typ=bool bnd=m
   61 : __ct_3472883712 typ=t20s_rp12 val=-200704f bnd=m
   73 : __fch_sign typ=w32 bnd=m
   74 : __fch_sign typ=bool bnd=m
   77 : __fch_a typ=w32 bnd=m
   79 : __tmp typ=w32 bnd=m
   80 : __fch_a typ=w32 bnd=m
   82 : __tmp typ=w32 bnd=m
   83 : __fch_sign typ=w32 bnd=m
   85 : __tmp typ=w32 bnd=m
   86 : __ct_156 typ=w32 val=156f bnd=m
   87 : __ct typ=w32 bnd=m
   88 : __fch_absA typ=w32 bnd=m
   91 : softfloat_normRoundPackToF32 typ=t21s_s2 val=0r bnd=m
   92 : __link typ=w32 bnd=m
   93 : __tmp typ=w32 bnd=m
   94 : __ct_16s0 typ=w32 val=16s0 bnd=m
   96 : __tmp typ=w32 bnd=m
  143 : __tmp typ=t20s_rp12 bnd=m
  146 : __either typ=bool bnd=m
  147 : __trgt typ=t13s_s2 val=0j bnd=m
  148 : __trgt typ=t21s_s2 val=0j bnd=m
  149 : __trgt typ=t13s_s2 val=0j bnd=m
  150 : __trgt typ=t21s_s2 val=0j bnd=m
  151 : __trgt typ=t13s_s2 val=0j bnd=m
  152 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fi32_to_f32 {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (a.18 var=19) source ()  <29>;
    (sign.19 var=20) source ()  <30>;
    (uZ.20 var=21) source ()  <31>;
    (absA.21 var=22) source ()  <32>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (__arg_a.27 var=26 stl=X off=11) inp ()  <38>;
    (__arg_a.28 var=26) deassign (__arg_a.27)  <39>;
    (__rd___sp.30 var=23) rd_res_reg (__R_SP.11 __sp.17)  <41>;
    (__ct_m16S0.31 var=27) const ()  <42>;
    (__tmp.33 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.30 __ct_m16S0.31)  <44>;
    (__R_SP.34 var=12 __sp.35 var=18) wr_res_reg (__tmp.33 __sp.17)  <45>;
    (__rd___sp.36 var=23) rd_res_reg (__R_SP.11 __sp.35)  <47>;
    (__ct_0t0.37 var=31) const ()  <48>;
    (__adr_a.39 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0t0.37)  <50>;
    (__rd___sp.41 var=23) rd_res_reg (__R_SP.11 __sp.35)  <52>;
    (__rd___sp.46 var=23) rd_res_reg (__R_SP.11 __sp.35)  <57>;
    (__rd___sp.51 var=23) rd_res_reg (__R_SP.11 __sp.35)  <62>;
    (__M_DMw.56 var=5 a.57 var=19) store (__arg_a.28 __adr_a.39 a.18)  <67>;
    call {
        () chess_separator_scheduler ()  <68>;
    } #4 off=1
    #148 off=2
    (__ct_4t0.42 var=35) const ()  <53>;
    (__adr_sign.44 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_4t0.42)  <55>;
    (__fch_a.58 var=46) load (__M_DMw.4 __adr_a.39 a.57)  <69>;
    (__ct_0.59 var=47) const ()  <70>;
    (__M_DMw.63 var=5 sign.64 var=20) store (__tmp.217 __adr_sign.44 sign.19)  <74>;
    (__tmp.217 var=50) __sint_slt___sint___sint (__fch_a.58 __ct_0.59)  <284>;
    call {
        () chess_separator_scheduler ()  <75>;
    } #6 off=3
    #7 off=4
    (__fch_a.65 var=51) load (__M_DMw.4 __adr_a.39 a.57)  <76>;
    (__ct_2147483647.66 var=52) const ()  <77>;
    (__tmp.68 var=54) __sint__ad___sint___sint (__fch_a.65 __ct_2147483647.66)  <79>;
    (__tmp.213 var=57) bool__eq___sint___sint (__tmp.68 __ct_0.59)  <279>;
    (__trgt.295 var=151) const ()  <437>;
    () void_br_bool_t13s_s2 (__tmp.213 __trgt.295)  <438>;
    (__either.296 var=146) undefined ()  <439>;
    if {
        {
            () if_expr (__either.296)  <101>;
        } #9
        {
            #53 off=13
            (__fch_sign.90 var=59) load (__M_DMw.4 __adr_sign.44 sign.64)  <102>;
            (__ct_3472883712.109 var=61) const ()  <122>;
            (__fch_sign.205 var=60) bool__ne___sint___sint (__fch_sign.90 __ct_0.59)  <251>;
            (__trgt.289 var=147) const ()  <427>;
            () void_br_bool_t13s_s2 (__fch_sign.205 __trgt.289)  <428>;
            (__either.290 var=146) undefined ()  <429>;
            if {
                {
                    () if_expr (__either.290)  <121>;
                } #13
                {
                } #14 off=15
                {
                    (__trgt.291 var=148) const ()  <430>;
                    () void_j_t21s_s2 (__trgt.291)  <431>;
                } #15 off=14
                {
                    (__tmp.113 var=143) merge (__ct_3472883712.109 __ct_0.59)  <126>;
                } #16
            } #12
            #17 off=16
            (__ct_8t0.47 var=39) const ()  <58>;
            (__adr_uZ.49 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_8t0.47)  <60>;
            (__M_DMw.117 var=5 uZ.118 var=21) store (__tmp.113 __adr_uZ.49 uZ.20)  <130>;
            call {
                () chess_separator_scheduler ()  <131>;
            } #18 off=17
            #19 off=18
            (__rt.122 var=25) load (__M_DMw.4 __adr_uZ.49 uZ.118)  <135>;
        } #10
        {
            #58 off=5
            (__fch_sign.123 var=73) load (__M_DMw.4 __adr_sign.44 sign.64)  <137>;
            (__fch_sign.209 var=74) bool__ne___sint___sint (__fch_sign.123 __ct_0.59)  <258>;
            (__trgt.292 var=149) const ()  <432>;
            () void_br_bool_t13s_s2 (__fch_sign.209 __trgt.292)  <433>;
            (__either.293 var=146) undefined ()  <434>;
            if {
                {
                    () if_expr (__either.293)  <156>;
                } #24
                {
                    (__fch_a.144 var=77) load (__M_DMw.4 __adr_a.39 a.57)  <159>;
                    (__tmp.146 var=79) __uint__mi___uint___uint (__ct_0.59 __fch_a.144)  <161>;
                } #25 off=7
                {
                    (__fch_a.147 var=80) load (__M_DMw.4 __adr_a.39 a.57)  <162>;
                    (__trgt.294 var=150) const ()  <435>;
                    () void_j_t21s_s2 (__trgt.294)  <436>;
                } #26 off=6
                {
                    (__tmp.149 var=82) merge (__tmp.146 __fch_a.147)  <164>;
                } #27
            } #23
            #28 off=8
            (__ct_12t0.52 var=43) const ()  <63>;
            (__adr_absA.54 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_12t0.52)  <65>;
            (__M_DMw.150 var=5 absA.151 var=22) store (__tmp.149 __adr_absA.54 absA.21)  <165>;
            call {
                () chess_separator_scheduler ()  <166>;
            } #29 off=9
            #30 off=10
            (__fch_sign.152 var=83) load (__M_DMw.4 __adr_sign.44 sign.64)  <167>;
            (__ct_156.156 var=86) const ()  <171>;
            (__fch_absA.159 var=88) load (__M_DMw.4 __adr_absA.54 absA.151)  <174>;
            (softfloat_normRoundPackToF32.163 var=91) const ()  <178>;
            (__link.164 var=92) w32_jal_t21s_s2 (softfloat_normRoundPackToF32.163)  <179>;
            call {
                (__tmp.155 var=85 stl=X off=11) assign (__fch_sign.152)  <170>;
                (__ct.158 var=87 stl=X off=12) assign (__ct_156.156)  <173>;
                (__fch_absA.160 var=88 stl=X off=13) assign (__fch_absA.159)  <175>;
                (__link.165 var=92 stl=X off=1) assign (__link.164)  <180>;
                (__tmp.166 var=93 stl=X off=10) Fsoftfloat_normRoundPackToF32 (__link.165 __tmp.155 __ct.158 __fch_absA.160)  <181>;
                (__tmp.167 var=93) deassign (__tmp.166)  <182>;
            } #31 off=11
            #169 off=12
            (__trgt.297 var=152) const ()  <440>;
            () void_j_t21s_s2 (__trgt.297)  <441>;
        } #21
        {
            (uZ.169 var=21) merge (uZ.118 uZ.20)  <185>;
            (absA.170 var=22) merge (absA.21 absA.151)  <186>;
            (__rt.171 var=25) merge (__rt.122 __tmp.167)  <187>;
        } #33
    } #8
    #35 off=19 nxt=-2
    (__rd___sp.172 var=23) rd_res_reg (__R_SP.11 __sp.35)  <188>;
    (__ct_16s0.173 var=94) const ()  <189>;
    (__tmp.175 var=96) __Pvoid__pl___Pvoid___sint (__rd___sp.172 __ct_16s0.173)  <191>;
    (__R_SP.176 var=12 __sp.177 var=18) wr_res_reg (__tmp.175 __sp.35)  <192>;
    () void___rts_jr_w32 (__la.24)  <193>;
    (__rt.178 var=25 stl=X off=10) assign (__rt.171)  <194>;
    () out (__rt.178)  <195>;
    () sink (__sp.177)  <201>;
    () sink (a.57)  <202>;
    () sink (sign.64)  <203>;
    () sink (uZ.169)  <204>;
    () sink (absA.170)  <205>;
} #0
0 : 'SoftFloat-3e/source/i32_to_f32.c';
----------
0 : (0,43:0,0);
3 : (0,43:22,0);
4 : (0,43:22,0);
6 : (0,49:9,6);
7 : (0,50:9,6);
8 : (0,50:4,6);
10 : (0,50:30,7);
12 : (0,51:21,7);
14 : (0,51:71,8);
15 : (0,51:21,9);
17 : (0,51:14,12);
18 : (0,51:14,12);
19 : (0,52:8,13);
21 : (0,52:8,15);
23 : (0,54:16,16);
25 : (0,54:18,17);
26 : (0,54:39,18);
28 : (0,54:9,21);
29 : (0,54:9,21);
30 : (0,55:53,21);
31 : (0,55:11,21);
35 : (0,55:4,25);
53 : (0,51:16,7);
58 : (0,54:11,16);
148 : (0,49:4,5);
----------
41 : (0,43:10,0);
42 : (0,43:10,0);
44 : (0,43:10,0);
45 : (0,43:10,0);
47 : (0,43:30,0);
48 : (0,43:30,0);
50 : (0,43:30,0);
52 : (0,45:9,0);
53 : (0,45:9,0);
55 : (0,45:9,0);
57 : (0,46:19,0);
58 : (0,46:19,0);
60 : (0,46:19,0);
62 : (0,47:18,0);
63 : (0,47:18,0);
65 : (0,47:18,0);
67 : (0,43:22,0);
68 : (0,43:22,0);
69 : (0,49:12,5);
70 : (0,49:16,0);
74 : (0,49:4,5);
75 : (0,49:9,6);
76 : (0,50:12,6);
77 : (0,50:16,0);
79 : (0,50:14,6);
101 : (0,50:4,6);
102 : (0,51:16,7);
121 : (0,51:21,7);
122 : (0,51:71,0);
126 : (0,51:21,10);
130 : (0,51:10,11);
131 : (0,51:14,12);
135 : (0,52:17,12);
137 : (0,54:11,16);
156 : (0,54:16,16);
159 : (0,54:35,17);
161 : (0,54:18,17);
162 : (0,54:55,18);
164 : (0,54:16,19);
165 : (0,54:4,20);
166 : (0,54:9,21);
167 : (0,55:41,21);
170 : (0,55:41,0);
171 : (0,55:45,0);
173 : (0,55:45,0);
174 : (0,55:53,21);
175 : (0,55:53,0);
179 : (0,55:11,21);
180 : (0,55:11,0);
181 : (0,55:11,21);
185 : (0,50:4,24);
186 : (0,50:4,24);
187 : (0,50:4,24);
188 : (0,55:4,0);
189 : (0,55:4,0);
191 : (0,55:4,0);
192 : (0,55:4,25);
193 : (0,55:4,25);
194 : (0,55:4,0);
251 : (0,51:16,7);
258 : (0,54:11,16);
279 : (0,50:9,6);
284 : (0,49:4,5);
428 : (0,51:21,7);
433 : (0,54:16,16);
438 : (0,50:4,6);

