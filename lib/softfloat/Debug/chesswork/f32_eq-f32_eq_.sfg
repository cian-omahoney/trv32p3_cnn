
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:34:17 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f32_eq.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  bool f32_eq(float32_t, float32_t)
Ff32_eq : user_defined, called {
    fnm : "f32_eq" 'bool f32_eq(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=24 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_eq typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : b typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=float32_t_DMb
   20 : a typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=float32_t_DMb
   21 : uA typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   22 : uiA typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   23 : uB typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   24 : uiB typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   25 : __rd___sp typ=w32 bnd=m
   26 : __la typ=w32 bnd=p tref=w32__
   28 : __rt typ=bool bnd=m
   29 : __arg_a typ=w32 bnd=p tref=float32_t___1
   30 : __arg_b typ=w32 bnd=p tref=float32_t___1
   31 : __ct_m24S0 typ=w32 val=-24S0 bnd=m
   33 : __tmp typ=w32 bnd=m
   35 : __ct_0t0 typ=w32 val=0t0 bnd=m
   37 : __adr_b typ=w32 bnd=m adro=19
   39 : __ct_4t0 typ=w32 val=4t0 bnd=m
   41 : __adr_a typ=w32 bnd=m adro=20
   43 : __ct_8t0 typ=w32 val=8t0 bnd=m
   45 : __adr_uA typ=w32 bnd=m adro=21
   47 : __ct_12t0 typ=w32 val=12t0 bnd=m
   49 : __adr_uiA typ=w32 bnd=m adro=22
   51 : __ct_16t0 typ=w32 val=16t0 bnd=m
   53 : __adr_uB typ=w32 bnd=m adro=23
   55 : __ct_20t0 typ=w32 val=20t0 bnd=m
   57 : __adr_uiB typ=w32 bnd=m adro=24
   58 : __fch_a typ=w32 bnd=m
   59 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   65 : __fch_uA typ=w32 bnd=m
   66 : __fch_b typ=w32 bnd=m
   73 : __fch_uB typ=w32 bnd=m
   74 : __fch_uiA typ=w32 bnd=m
   75 : __tmp typ=w32 bnd=m
   76 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   78 : __tmp typ=w32 bnd=m
   81 : __tmp typ=bool bnd=m
   82 : __fch_uiA typ=w32 bnd=m
   83 : __ct_8388607 typ=w32 val=8388607f bnd=m
   85 : __tmp typ=w32 bnd=m
   88 : __tmp typ=bool bnd=m
   91 : __tmp typ=bool bnd=m
   94 : __fch_uiB typ=w32 bnd=m
   95 : __tmp typ=w32 bnd=m
   98 : __tmp typ=w32 bnd=m
  101 : __tmp typ=bool bnd=m
  102 : __fch_uiB typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  108 : __tmp typ=bool bnd=m
  111 : __tmp typ=bool bnd=m
  112 : __tmp typ=bool bnd=m
  115 : __fch_uiA typ=w32 bnd=m
  116 : __fch_uiB typ=w32 bnd=m
  117 : __tmp typ=bool bnd=m
  120 : __fch_uiA typ=w32 bnd=m
  121 : __fch_uiB typ=w32 bnd=m
  122 : __tmp typ=w32 bnd=m
  123 : __ct_1 typ=w32 val=1f bnd=m
  125 : __tmp typ=w32 bnd=m
  128 : __tmp typ=bool bnd=m
  130 : __tmp typ=bool bnd=m
  131 : __tmp typ=w32 bnd=m
  132 : __ct_24s0 typ=w32 val=24s0 bnd=m
  134 : __tmp typ=w32 bnd=m
  148 : __ct_4294967295 typ=w32 val=-1f bnd=m
  155 : __mskbool typ=w32 bnd=m
  164 : __true typ=bool val=1f bnd=m
  165 : __false typ=bool val=0f bnd=m
  166 : __either typ=bool bnd=m
  167 : __trgt typ=t13s_s2 val=0j bnd=m
  168 : __trgt typ=t13s_s2 val=0j bnd=m
  169 : __trgt typ=t13s_s2 val=0j bnd=m
  170 : __trgt typ=t13s_s2 val=0j bnd=m
  171 : __trgt typ=t21s_s2 val=0j bnd=m
  172 : __trgt typ=t13s_s2 val=0j bnd=m
  173 : __trgt typ=t21s_s2 val=0j bnd=m
  174 : __trgt typ=t13s_s2 val=0j bnd=m
  175 : __trgt typ=t13s_s2 val=0j bnd=m
  176 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_eq {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (b.18 var=19) source ()  <29>;
    (a.19 var=20) source ()  <30>;
    (uA.20 var=21) source ()  <31>;
    (uiA.21 var=22) source ()  <32>;
    (uB.22 var=23) source ()  <33>;
    (uiB.23 var=24) source ()  <34>;
    (__la.25 var=26 stl=X off=1) inp ()  <36>;
    (__la.26 var=26) deassign (__la.25)  <37>;
    (__arg_a.29 var=29 stl=X off=11) inp ()  <40>;
    (__arg_a.30 var=29) deassign (__arg_a.29)  <41>;
    (__arg_b.32 var=30 stl=X off=12) inp ()  <43>;
    (__arg_b.33 var=30) deassign (__arg_b.32)  <44>;
    (__rd___sp.35 var=25) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_m24S0.36 var=31) const ()  <47>;
    (__tmp.38 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_m24S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (__rd___sp.41 var=25) rd_res_reg (__R_SP.11 __sp.40)  <52>;
    (__ct_0t0.42 var=35) const ()  <53>;
    (__adr_b.44 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_0t0.42)  <55>;
    (__rd___sp.46 var=25) rd_res_reg (__R_SP.11 __sp.40)  <57>;
    (__rd___sp.51 var=25) rd_res_reg (__R_SP.11 __sp.40)  <62>;
    (__rd___sp.56 var=25) rd_res_reg (__R_SP.11 __sp.40)  <67>;
    (__rd___sp.61 var=25) rd_res_reg (__R_SP.11 __sp.40)  <72>;
    (__rd___sp.66 var=25) rd_res_reg (__R_SP.11 __sp.40)  <77>;
    (__M_DMw.71 var=5 b.72 var=19) store (__arg_b.33 __adr_b.44 b.18)  <82>;
    call {
        () chess_separator_scheduler ()  <83>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.47 var=39) const ()  <58>;
    (__adr_a.49 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_4t0.47)  <60>;
    (__M_DMw.73 var=5 a.74 var=20) store (__arg_a.30 __adr_a.49 a.19)  <84>;
    call {
        () chess_separator_scheduler ()  <85>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.52 var=43) const ()  <63>;
    (__adr_uA.54 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_8t0.52)  <65>;
    (__fch_a.75 var=58) load (__M_DMw.4 __adr_a.49 a.74)  <86>;
    (__M_DMw.79 var=5 uA.80 var=21) store (__fch_a.75 __adr_uA.54 uA.20)  <90>;
    call {
        () chess_separator_scheduler ()  <91>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.57 var=47) const ()  <68>;
    (__adr_uiA.59 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_12t0.57)  <70>;
    (__fch_uA.84 var=65) load (__M_DMw.4 __adr_uA.54 uA.80)  <95>;
    (__M_DMw.85 var=5 uiA.86 var=22) store (__fch_uA.84 __adr_uiA.59 uiA.21)  <96>;
    call {
        () chess_separator_scheduler ()  <97>;
    } #10 off=7
    #11 off=8
    (__ct_16t0.62 var=51) const ()  <73>;
    (__adr_uB.64 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_16t0.62)  <75>;
    (__fch_b.87 var=66) load (__M_DMw.4 __adr_b.44 b.72)  <98>;
    (__M_DMw.91 var=5 uB.92 var=23) store (__fch_b.87 __adr_uB.64 uB.22)  <102>;
    call {
        () chess_separator_scheduler ()  <103>;
    } #12 off=9
    #13 off=10
    (__ct_20t0.67 var=55) const ()  <78>;
    (__adr_uiB.69 var=57) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_20t0.67)  <80>;
    (__fch_uB.96 var=73) load (__M_DMw.4 __adr_uB.64 uB.92)  <107>;
    (__M_DMw.97 var=5 uiB.98 var=24) store (__fch_uB.96 __adr_uiB.69 uiB.23)  <108>;
    call {
        () chess_separator_scheduler ()  <109>;
    } #14 off=11
    #64 off=12
    (__ct_0.76 var=59) const ()  <87>;
    (__fch_uiA.99 var=74) load (__M_DMw.4 __adr_uiA.59 uiA.86)  <110>;
    (__ct_2139095040.101 var=76) const ()  <112>;
    (__tmp.103 var=78) __uint__ad___uint___uint (__tmp.311 __ct_2139095040.101)  <114>;
    (__ct_8388607.130 var=83) const ()  <142>;
    (__ct_1.258 var=123) const ()  <275>;
    (__ct_4294967295.310 var=148) const ()  <391>;
    (__tmp.311 var=75) __uint__er___uint___uint (__fch_uiA.99 __ct_4294967295.310)  <392>;
    (__tmp.321 var=81) bool__ne___uint___uint (__tmp.103 __ct_0.76)  <439>;
    (__trgt.343 var=167) const ()  <487>;
    () void_br_bool_t13s_s2 (__tmp.321 __trgt.343)  <488>;
    (__either.344 var=166) undefined ()  <489>;
    if {
        {
            () if_expr (__either.344)  <140>;
        } #17
        {
            (__false.347 var=165) const ()  <493>;
        } #19
        {
            (__fch_uiA.129 var=82) load (__M_DMw.4 __adr_uiA.59 uiA.86)  <141>;
            (__tmp.132 var=85) __uint__ad___uint___uint (__fch_uiA.129 __ct_8388607.130)  <144>;
            (__tmp.135 var=88) bool__ne___uint___uint (__tmp.132 __ct_0.76)  <147>;
            (__trgt.348 var=169) const ()  <494>;
            () void_br_bool_t13s_s2 (__tmp.135 __trgt.348)  <495>;
            (__either.349 var=166) undefined ()  <496>;
        } #18 off=13
        {
            (__tmp.138 var=91) merge (__false.347 __either.349)  <150>;
        } #20
    } #16
    if {
        {
            () if_expr (__tmp.138)  <173>;
        } #23
        {
            (__true.356 var=164) const ()  <507>;
        } #24
        {
            #71 off=14
            (__fch_uiB.163 var=94) load (__M_DMw.4 __adr_uiB.69 uiB.98)  <176>;
            (__tmp.167 var=98) __uint__ad___uint___uint (__tmp.315 __ct_2139095040.101)  <180>;
            (__tmp.315 var=95) __uint__er___uint___uint (__fch_uiB.163 __ct_4294967295.310)  <399>;
            (__tmp.322 var=101) bool__ne___uint___uint (__tmp.167 __ct_0.76)  <440>;
            (__trgt.345 var=168) const ()  <490>;
            () void_br_bool_t13s_s2 (__tmp.322 __trgt.345)  <491>;
            (__either.346 var=166) undefined ()  <492>;
            if {
                {
                    () if_expr (__either.346)  <206>;
                } #28
                {
                    (__false.357 var=165) const ()  <508>;
                } #30
                {
                    (__fch_uiB.193 var=102) load (__M_DMw.4 __adr_uiB.69 uiB.98)  <207>;
                    (__tmp.196 var=105) __uint__ad___uint___uint (__fch_uiB.193 __ct_8388607.130)  <210>;
                    (__tmp.199 var=108) bool__ne___uint___uint (__tmp.196 __ct_0.76)  <213>;
                    (__trgt.358 var=174) const ()  <509>;
                    () void_br_bool_t13s_s2 (__tmp.199 __trgt.358)  <510>;
                    (__either.359 var=166) undefined ()  <511>;
                } #29 off=15
                {
                    (__tmp.202 var=111) merge (__false.357 __either.359)  <216>;
                } #31
            } #27
        } #25
        {
            (__tmp.203 var=112) merge (__true.356 __tmp.202)  <217>;
        } #32
    } #22
    if {
        {
            () if_expr (__tmp.203)  <240>;
        } #35
        {
            (__false.360 var=165) const ()  <512>;
        } #38
        {
            #40 off=16
            (__fch_uiA.228 var=115) load (__M_DMw.4 __adr_uiA.59 uiA.86)  <244>;
            (__fch_uiB.229 var=116) load (__M_DMw.4 __adr_uiB.69 uiB.98)  <245>;
            (__tmp.230 var=117) bool__eq___uint___uint (__fch_uiA.228 __fch_uiB.229)  <246>;
            (__trgt.353 var=172) const ()  <502>;
            () void_br_bool_t13s_s2 (__tmp.230 __trgt.353)  <503>;
            (__either.354 var=166) undefined ()  <504>;
            if {
                {
                    () if_expr (__either.354)  <269>;
                } #42
                {
                } #81 off=21
                {
                    #90 off=17
                    (__fch_uiA.255 var=120) load (__M_DMw.4 __adr_uiA.59 uiA.86)  <272>;
                    (__fch_uiB.256 var=121) load (__M_DMw.4 __adr_uiB.69 uiB.98)  <273>;
                    (__tmp.257 var=122) __uint__or___uint___uint (__fch_uiA.255 __fch_uiB.256)  <274>;
                    (__tmp.260 var=125) __uint__ls___uint___sint (__tmp.257 __ct_1.258)  <277>;
                    (__tmp.306 var=128) bool__eq___uint___uint (__tmp.260 __ct_0.76)  <371>;
                    (__trgt.350 var=170) const ()  <497>;
                    () void_br_bool_t13s_s2 (__tmp.306 __trgt.350)  <498>;
                    (__either.351 var=166) undefined ()  <499>;
                    if {
                        {
                            () if_expr (__either.351)  <456>;
                        } #96
                        {
                        } #97 off=19
                        {
                            (__trgt.352 var=171) const ()  <500>;
                            () void_j_t21s_s2 (__trgt.352)  <501>;
                        } #98 off=18
                        {
                            (__mskbool.335 var=155) merge (__ct_1.258 __ct_0.76)  <459>;
                        } #99
                    } #95
                    #110 off=20
                    (__trgt.355 var=173) const ()  <505>;
                    () void_j_t21s_s2 (__trgt.355)  <506>;
                } #44
                {
                    (__mskbool.323 var=155) merge (__ct_1.258 __mskbool.335)  <443>;
                } #45
            } #41
            #103 off=22
            (__tmp.339 var=130) bool__ne___sint___sint (__mskbool.323 __ct_0.76)  <466>;
            (__trgt.361 var=175) const ()  <513>;
            () void_br_bool_t13s_s2 (__tmp.339 __trgt.361)  <514>;
            (__either.362 var=166) undefined ()  <515>;
        } #39
        {
            (__rt.266 var=28) merge (__false.360 __either.362)  <284>;
        } #47
    } #34
    if {
        {
            () if_expr (__rt.266)  <347>;
        } #55
        {
        } #56 off=24
        {
            (__trgt.363 var=176) const ()  <516>;
            () void_j_t21s_s2 (__trgt.363)  <517>;
        } #57 off=23
        {
            (__tmp.302 var=131) merge (__ct_1.258 __ct_0.76)  <350>;
        } #58
    } #54
    #50 off=25 nxt=-2
    (__rd___sp.268 var=25) rd_res_reg (__R_SP.11 __sp.40)  <286>;
    (__ct_24s0.269 var=132) const ()  <287>;
    (__tmp.271 var=134) __Pvoid__pl___Pvoid___sint (__rd___sp.268 __ct_24s0.269)  <289>;
    (__R_SP.272 var=12 __sp.273 var=18) wr_res_reg (__tmp.271 __sp.40)  <290>;
    () void___rts_jr_w32 (__la.26)  <291>;
    (__tmp.274 var=131 stl=X off=10) assign (__tmp.302)  <292>;
    () out (__tmp.274)  <293>;
    () sink (__sp.273)  <299>;
    () sink (b.72)  <300>;
    () sink (a.74)  <301>;
    () sink (uA.80)  <302>;
    () sink (uiA.86)  <303>;
    () sink (uB.92)  <304>;
    () sink (uiB.98)  <305>;
} #0
0 : 'SoftFloat-3e/source/f32_eq.c';
----------
0 : (0,44:0,0);
3 : (0,44:26,0);
4 : (0,44:26,0);
5 : (0,44:13,0);
6 : (0,44:13,0);
7 : (0,51:9,8);
8 : (0,51:9,8);
9 : (0,52:8,9);
10 : (0,52:8,9);
11 : (0,53:9,10);
12 : (0,53:9,10);
13 : (0,54:8,11);
14 : (0,54:8,11);
16 : (0,55:39,11);
18 : (0,55:39,12);
19 : (0,55:39,13);
22 : (0,55:64,15);
24 : (0,55:64,16);
25 : (0,55:97,17);
27 : (0,55:97,17);
29 : (0,55:97,18);
30 : (0,55:97,19);
34 : (0,55:4,23);
38 : (0,63:8,25);
39 : (0,63:8,27);
40 : (0,65:16,28);
41 : (0,65:24,28);
44 : (0,65:27,30);
50 : (0,65:4,36);
54 : (0,65:4,36);
55 : (0,65:4,36);
56 : (0,65:4,36);
57 : (0,65:4,36);
58 : (0,65:4,36);
64 : (0,55:33,11);
71 : (0,55:91,17);
81 : (0,65:24,29);
90 : (0,65:27,30);
95 : (0,65:27,30);
96 : (0,65:27,30);
97 : (0,65:27,30);
98 : (0,65:27,30);
99 : (0,65:27,30);
103 : (0,63:8,27);
----------
46 : (0,44:5,0);
47 : (0,44:5,0);
49 : (0,44:5,0);
50 : (0,44:5,0);
52 : (0,44:36,0);
53 : (0,44:36,0);
55 : (0,44:36,0);
57 : (0,44:23,0);
58 : (0,44:23,0);
60 : (0,44:23,0);
62 : (0,46:19,0);
63 : (0,46:19,0);
65 : (0,46:19,0);
67 : (0,47:18,0);
68 : (0,47:18,0);
70 : (0,47:18,0);
72 : (0,48:19,0);
73 : (0,48:19,0);
75 : (0,48:19,0);
77 : (0,49:18,0);
78 : (0,49:18,0);
80 : (0,49:18,0);
82 : (0,44:26,0);
83 : (0,44:26,0);
84 : (0,44:13,0);
85 : (0,44:13,0);
86 : (0,51:11,7);
87 : (0,51:6,0);
90 : (0,51:6,7);
91 : (0,51:9,8);
95 : (0,52:12,8);
96 : (0,52:4,8);
97 : (0,52:8,9);
98 : (0,53:11,9);
102 : (0,53:6,9);
103 : (0,53:9,10);
107 : (0,54:12,10);
108 : (0,54:4,10);
109 : (0,54:8,11);
110 : (0,55:14,11);
112 : (0,55:19,0);
114 : (0,55:19,11);
140 : (0,55:39,11);
141 : (0,55:44,12);
142 : (0,55:49,0);
144 : (0,55:49,12);
147 : (0,55:39,12);
150 : (0,55:39,14);
173 : (0,55:64,15);
176 : (0,55:72,17);
180 : (0,55:77,17);
206 : (0,55:97,17);
207 : (0,55:102,18);
210 : (0,55:107,18);
213 : (0,55:97,18);
216 : (0,55:97,20);
217 : (0,55:64,22);
240 : (0,55:4,23);
244 : (0,65:12,28);
245 : (0,65:19,28);
246 : (0,65:16,28);
269 : (0,65:24,28);
272 : (0,65:42,30);
273 : (0,65:48,30);
274 : (0,65:46,30);
275 : (0,65:54,0);
277 : (0,65:52,30);
284 : (0,55:4,35);
286 : (0,65:4,0);
287 : (0,65:4,0);
289 : (0,65:4,0);
290 : (0,65:4,36);
291 : (0,65:4,36);
292 : (0,65:4,0);
371 : (0,65:27,30);
391 : (0,55:12,0);
392 : (0,55:12,11);
399 : (0,55:70,17);
439 : (0,55:33,11);
440 : (0,55:91,17);
488 : (0,55:39,11);
491 : (0,55:97,17);
495 : (0,55:64,15);
503 : (0,65:24,28);
510 : (0,55:4,23);

