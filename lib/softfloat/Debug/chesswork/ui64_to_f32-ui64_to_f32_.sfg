
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 16:37:41 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/ui64_to_f32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t ui64_to_f32(uint64_t)
Fui64_to_f32 : user_defined, called {
    fnm : "ui64_to_f32" 'float32_t ui64_to_f32(unsigned long long)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=20 );
    llv : 0 0 0 0 0 ;
}
****
!!  uint_fast8_t softfloat_countLeadingZeros64(uint64_t)
Fsoftfloat_countLeadingZeros64 : user_defined, called {
    fnm : "softfloat_countLeadingZeros64" 'uint_fast8_t softfloat_countLeadingZeros64(uint64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : ui64_to_f32 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=uint64_t_DMb
   20 : shiftDist typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast8_t_DMb
   21 : u typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   22 : sig typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   23 : a_low typ=w08 bnd=B stl=DMb
   24 : a_high typ=w08 bnd=B stl=DMb
   25 : __rd___sp typ=w32 bnd=m
   26 : __la typ=w32 bnd=p tref=w32__
   27 : __rt typ=w32 bnd=p tref=float32_t___1
   29 : __arg_a_low typ=w32 bnd=m tref=__uint__
   30 : __arg_a_high typ=w32 bnd=m tref=__uint__
   31 : __ct_m20S0 typ=w32 val=-20S0 bnd=m
   33 : __tmp typ=w32 bnd=m
   35 : __ct_0t0 typ=w32 val=0t0 bnd=m
   37 : __adr_a typ=w32 bnd=m adro=19
   39 : __ct_8t0 typ=w32 val=8t0 bnd=m
   41 : __adr_shiftDist typ=w32 bnd=m adro=20
   43 : __ct_12t0 typ=w32 val=12t0 bnd=m
   45 : __adr_u typ=w32 bnd=m adro=21
   47 : __ct_16t0 typ=w32 val=16t0 bnd=m
   49 : __adr_sig typ=w32 bnd=m adro=22
   53 : __fch_a_low typ=w32 bnd=m
   56 : __fch_a_high typ=w32 bnd=m
   57 : __record_low typ=w32 bnd=m tref=__uint__
   58 : __record_high typ=w32 bnd=m tref=__uint__
   61 : softfloat_countLeadingZeros64 typ=t21s_s2 val=0r bnd=m
   62 : __link typ=w32 bnd=m
   63 : __tmp typ=w32 bnd=m
   66 : __tmp typ=w32 bnd=m
   68 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   70 : __fch_shiftDist typ=w32 bnd=m
   71 : __tmp typ=bool bnd=m
   73 : __fch_a_low typ=w32 bnd=m
   76 : __fch_a_high typ=w32 bnd=m
   82 : __ct_149 typ=w32 val=149f bnd=m
   84 : __fch_shiftDist typ=w32 bnd=m
   85 : __tmp typ=w32 bnd=m
   87 : __ct_23 typ=w32 val=23f bnd=m
   89 : __tmp typ=w32 bnd=m
   92 : __fch_a_low typ=w32 bnd=m
   97 : __fch_shiftDist typ=w32 bnd=m
   98 : __tmp typ=w32 bnd=m
   99 : __tmp typ=w32 bnd=m
  102 : __tmp typ=w32 bnd=m
  110 : __fch_shiftDist typ=w32 bnd=m
  111 : __ct_7 typ=w32 val=7f bnd=m
  113 : __tmp typ=w32 bnd=m
  114 : __fch_shiftDist typ=w32 bnd=m
  117 : __tmp typ=bool bnd=m
  119 : __fch_a_low typ=w32 bnd=m
  122 : __fch_a_high typ=w32 bnd=m
  125 : __fch_shiftDist typ=w32 bnd=m
  126 : __tmp typ=w32 bnd=m
  130 : __fch_a_low typ=w32 bnd=m
  135 : __fch_shiftDist typ=w32 bnd=m
  136 : __tmp typ=w32 bnd=m
  142 : __tmp typ=w32 bnd=m
  143 : __ct_156 typ=w32 val=156f bnd=m
  145 : __fch_shiftDist typ=w32 bnd=m
  146 : __tmp typ=w32 bnd=m
  147 : __fch_sig typ=w32 bnd=m
  150 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
  151 : __link typ=w32 bnd=m
  152 : __tmp typ=w32 bnd=m
  153 : __ct_20s0 typ=w32 val=20s0 bnd=m
  155 : __tmp typ=w32 bnd=m
  170 : __ct_4294967256 typ=w32 val=-40f bnd=m
  176 : __ct_4t0 typ=w32 val=4t0 bnd=m
  178 : __adr_a typ=w32 bnd=m adro=19
  179 : __adr_a typ=w32 bnd=m adro=19
  181 : __adr_a typ=w32 bnd=m adro=19
  182 : __adr_a typ=w32 bnd=m adro=19
  215 : __tmpd typ=w32 bnd=m
  216 : __tmp typ=bool bnd=m
  217 : __rt_low typ=w32 bnd=m tref=__uint__
  222 : __apl_ff typ=w32 bnd=m tref=__sint__
  223 : __apl_carries typ=w32 bnd=m tref=__uint__
  225 : __tmp typ=bool bnd=m
  226 : __tmp typ=bool bnd=m
  227 : __tmp typ=w32 bnd=m
  228 : __tmp typ=w32 bnd=m
  229 : __apl_r_low typ=w32 bnd=m tref=__uint__
  232 : __ct_m32 typ=w32 val=-32f bnd=m
  233 : __tmp_low typ=w32 bnd=m
  239 : __rt_low typ=w32 bnd=m tref=__uint__
  240 : __rt_high typ=w32 bnd=m tref=__uint__
  244 : __apl_ff typ=w32 bnd=m tref=__sint__
  245 : __apl_carries typ=w32 bnd=m tref=__uint__
  247 : __tmp typ=bool bnd=m
  248 : __tmp typ=bool bnd=m
  249 : __tmp typ=w32 bnd=m
  250 : __apl_r_low typ=w32 bnd=m tref=__uint__
  252 : __apl_r_high typ=w32 bnd=m tref=__uint__
  255 : __tmp_low typ=w32 bnd=m
  257 : __tmp_high typ=w32 bnd=m
  270 : __apl_r_low typ=w32 bnd=m tref=__uint__
  271 : __apl_r_high typ=w32 bnd=m tref=__uint__
  290 : __tmp_low typ=w32 bnd=m
  292 : __tmp_high typ=w32 bnd=m
  309 : __tmp_low typ=w32 bnd=m
  319 : __ct_1 typ=w32 val=1f bnd=m
  320 : __ct_4294967295 typ=w32 val=-1f bnd=m
  323 : __tmpd typ=w32 bnd=m
  329 : __tmp typ=w32 bnd=m
  364 : __tmp_low typ=w32 bnd=m
  370 : __tmp typ=w32 bnd=m
  404 : __either typ=bool bnd=m
  405 : __trgt typ=t13s_s2 val=0j bnd=m
  406 : __trgt typ=t21s_s2 val=0j bnd=m
  407 : __trgt typ=t13s_s2 val=0j bnd=m
  408 : __trgt typ=t21s_s2 val=0j bnd=m
  409 : __trgt typ=t13s_s2 val=0j bnd=m
  410 : __trgt typ=t21s_s2 val=0j bnd=m
  411 : __trgt typ=t13s_s2 val=0j bnd=m
  412 : __trgt typ=t21s_s2 val=0j bnd=m
  413 : __trgt typ=t13s_s2 val=0j bnd=m
  414 : __trgt typ=t21s_s2 val=0j bnd=m
  415 : __trgt typ=t13s_s2 val=0j bnd=m
  416 : __trgt typ=t21s_s2 val=0j bnd=m
  417 : __trgt typ=t13s_s2 val=0j bnd=m
  418 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fui64_to_f32 {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (shiftDist.19 var=20) source ()  <30>;
    (u.20 var=21) source ()  <31>;
    (sig.21 var=22) source ()  <32>;
    (a_low.22 var=23) source ()  <33>;
    (a_high.23 var=24) source ()  <34>;
    (__la.25 var=26 stl=X off=1) inp ()  <36>;
    (__la.26 var=26) deassign (__la.25)  <37>;
    (__arg_a_low.30 var=29 stl=X off=11) inp ()  <41>;
    (__arg_a_low.31 var=29) deassign (__arg_a_low.30)  <42>;
    (__arg_a_high.34 var=30 stl=X off=12) inp ()  <45>;
    (__arg_a_high.35 var=30) deassign (__arg_a_high.34)  <46>;
    (__rd___sp.38 var=25) rd_res_reg (__R_SP.11 __sp.17)  <49>;
    (__ct_m20S0.39 var=31) const ()  <50>;
    (__tmp.41 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.38 __ct_m20S0.39)  <52>;
    (__R_SP.42 var=12 __sp.43 var=18) wr_res_reg (__tmp.41 __sp.17)  <53>;
    (__rd___sp.44 var=25) rd_res_reg (__R_SP.11 __sp.43)  <55>;
    (__ct_0t0.45 var=35) const ()  <56>;
    (__adr_a.47 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_0t0.45)  <58>;
    (__rd___sp.49 var=25) rd_res_reg (__R_SP.11 __sp.43)  <60>;
    (__rd___sp.54 var=25) rd_res_reg (__R_SP.11 __sp.43)  <65>;
    (__rd___sp.59 var=25) rd_res_reg (__R_SP.11 __sp.43)  <70>;
    (__M_DMw.65 var=5 a_low.66 var=23) store (__arg_a_low.31 __adr_a.47 a_low.22)  <76>;
    (__M_DMw.71 var=5 a_high.72 var=24) store (__arg_a_high.35 __adr_a.318 a_high.23)  <81>;
    (__ct_4t0.313 var=176) const ()  <385>;
    (__adr_a.318 var=181) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_4t0.313)  <391>;
    call {
        () chess_separator_scheduler ()  <82>;
    } #4 off=1
    #5 off=2
    (__fch_a_low.74 var=53) load (__M_DMw.4 __adr_a.47 a_low.66)  <84>;
    (__fch_a_high.79 var=56) load (__M_DMw.4 __adr_a.319 a_high.72)  <89>;
    (softfloat_countLeadingZeros64.87 var=61) const ()  <97>;
    (__link.88 var=62) w32_jal_t21s_s2 (softfloat_countLeadingZeros64.87)  <98>;
    (__adr_a.319 var=182) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_4t0.313)  <392>;
    call {
        (__record_low.82 var=57 stl=X off=11) assign (__fch_a_low.74)  <92>;
        (__record_high.84 var=58 stl=X off=12) assign (__fch_a_high.79)  <94>;
        (__link.89 var=62 stl=X off=1) assign (__link.88)  <99>;
        (__tmp.90 var=63 stl=X off=10) Fsoftfloat_countLeadingZeros64 (__link.89 __record_low.82 __record_high.84)  <100>;
        (__tmp.91 var=63) deassign (__tmp.90)  <101>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.50 var=39) const ()  <61>;
    (__adr_shiftDist.52 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.49 __ct_8t0.50)  <63>;
    (__tmp.95 var=66) __uint__pl___uint___uint (__tmp.91 __ct_4294967256.306)  <105>;
    (__M_DMw.97 var=5 shiftDist.98 var=20) store (__tmp.95 __adr_shiftDist.52 shiftDist.19)  <107>;
    (__ct_4294967256.306 var=170) const ()  <377>;
    call {
        () chess_separator_scheduler ()  <108>;
    } #8 off=5
    #9 off=6
    (__ct_0.99 var=68) const ()  <109>;
    (__fch_shiftDist.101 var=70) load (__M_DMw.4 __adr_shiftDist.52 shiftDist.98)  <111>;
    (__tmp.102 var=71) bool__ge___sint___sint (__fch_shiftDist.101 __ct_0.99)  <112>;
    (__trgt.640 var=417) const ()  <1074>;
    () void_br_bool_t13s_s2 (__tmp.102 __trgt.640)  <1075>;
    (__either.641 var=404) undefined ()  <1076>;
    if {
        {
            () if_expr (__either.641)  <132>;
        } #11
        {
            #64 off=29
            (__fch_a_low.123 var=73) load (__M_DMw.4 __adr_a.47 a_low.66)  <134>;
            (__fch_a_high.128 var=76) load (__M_DMw.4 __adr_a.315 a_high.72)  <139>;
            (__adr_a.315 var=178) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_4t0.313)  <388>;
            (__tmpd.352 var=215) __uint__or___uint___uint (__fch_a_high.128 __fch_a_low.123)  <493>;
            (__tmp.606 var=216) bool__eq___uint___uint (__tmpd.352 __ct_0.99)  <1002>;
            (__trgt.622 var=405) const ()  <1044>;
            () void_br_bool_t13s_s2 (__tmp.606 __trgt.622)  <1045>;
            (__either.623 var=404) undefined ()  <1046>;
            if {
                {
                    () if_expr (__either.623)  <163>;
                } #15
                {
                } #17 off=31
                {
                    (__ct_149.154 var=82) const ()  <166>;
                    (__fch_shiftDist.156 var=84) load (__M_DMw.4 __adr_shiftDist.52 shiftDist.98)  <168>;
                    (__tmp.157 var=85) __sint__mi___sint___sint (__ct_149.154 __fch_shiftDist.156)  <169>;
                    (__ct_23.159 var=87) const ()  <171>;
                    (__tmp.161 var=89) __uint__ls___uint___sint (__tmp.157 __ct_23.159)  <173>;
                    (__fch_a_low.164 var=92) load (__M_DMw.4 __adr_a.47 a_low.66)  <176>;
                    (__fch_shiftDist.172 var=97) load (__M_DMw.4 __adr_shiftDist.52 shiftDist.98)  <184>;
                    (__tmp.173 var=98) __uint__ls___uint___sint (__fch_a_low.164 __fch_shiftDist.172)  <185>;
                    (__tmp.174 var=99) __uint__pl___uint___uint (__tmp.161 __tmp.173)  <186>;
                    (__trgt.624 var=406) const ()  <1047>;
                    () void_j_t21s_s2 (__trgt.624)  <1048>;
                } #234 off=30
                {
                    (__tmp.177 var=102) merge (__ct_0.99 __tmp.174)  <189>;
                } #18
            } #14
            #19 off=32
            (__ct_12t0.55 var=43) const ()  <66>;
            (__adr_u.57 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.54 __ct_12t0.55)  <68>;
            (__M_DMw.181 var=5 u.182 var=21) store (__tmp.177 __adr_u.57 u.20)  <193>;
            call {
                () chess_separator_scheduler ()  <194>;
            } #20 off=33
            #21 off=34
            (__rt.186 var=27) load (__M_DMw.4 __adr_u.57 u.182)  <198>;
        } #12
        {
            #24 off=7
            (__fch_shiftDist.187 var=110) load (__M_DMw.4 __adr_shiftDist.52 shiftDist.98)  <200>;
            (__ct_7.188 var=111) const ()  <201>;
            (__tmp.190 var=113) __sint__pl___sint___sint (__fch_shiftDist.187 __ct_7.188)  <203>;
            (__M_DMw.191 var=5 shiftDist.192 var=20) store (__tmp.190 __adr_shiftDist.52 shiftDist.98)  <204>;
            call {
                () chess_separator_scheduler ()  <205>;
            } #25 off=8
            #26 off=9
            (__fch_shiftDist.193 var=114) load (__M_DMw.4 __adr_shiftDist.52 shiftDist.192)  <206>;
            (__tmp.196 var=117) bool__lt___sint___sint (__fch_shiftDist.193 __ct_0.99)  <209>;
            (__trgt.637 var=415) const ()  <1069>;
            () void_br_bool_t13s_s2 (__tmp.196 __trgt.637)  <1070>;
            (__either.638 var=404) undefined ()  <1071>;
            if {
                {
                    () if_expr (__either.638)  <229>;
                } #28
                {
                    #101 off=11
                    (__fch_a_low.217 var=119) load (__M_DMw.4 __adr_a.47 a_low.66)  <231>;
                    (__fch_a_high.222 var=122) load (__M_DMw.4 __adr_a.316 a_high.72)  <236>;
                    (__fch_shiftDist.226 var=125) load (__M_DMw.4 __adr_shiftDist.52 shiftDist.192)  <240>;
                    (__tmp.227 var=126) __sint__mi___sint___sint (__ct_0.99 __fch_shiftDist.226)  <241>;
                    (__adr_a.316 var=179) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_4t0.313)  <389>;
                    (__tmp.358 var=225) bool__eq___sint___sint (__tmp.227 __ct_0.99)  <500>;
                    (__ct_m32.359 var=232) const ()  <501>;
                    (__trgt.628 var=409) const ()  <1054>;
                    () void_br_bool_t13s_s2 (__tmp.358 __trgt.628)  <1055>;
                    (__either.629 var=404) undefined ()  <1056>;
                    if {
                        {
                            () if_expr (__either.629)  <503>;
                        } #103
                        {
                        } #104 off=16
                        {
                            #106 off=12
                            (__apl_ff.361 var=222) __sint__pl___sint___sint (__tmp.227 __ct_m32.359)  <504>;
                            (__tmp.362 var=226) bool__lt___sint___sint (__apl_ff.361 __ct_0.99)  <505>;
                            (__trgt.625 var=407) const ()  <1049>;
                            () void_br_bool_t13s_s2 (__tmp.362 __trgt.625)  <1050>;
                            (__either.626 var=404) undefined ()  <1051>;
                            if {
                                {
                                    () if_expr (__either.626)  <506>;
                                } #108
                                {
                                    (__tmp.363 var=227) __sint__mi___sint___sint (__ct_0.99 __apl_ff.361)  <507>;
                                    (__apl_carries.364 var=223) __uint__ls___uint___sint (__fch_a_high.222 __tmp.363)  <508>;
                                    (__tmp.365 var=228) __uint__rs___uint___sint (__fch_a_low.217 __tmp.227)  <509>;
                                    (__apl_r_low.366 var=229) __uint__or___uint___uint (__tmp.365 __apl_carries.364)  <510>;
                                } #109 off=14
                                {
                                    (__apl_r_low.368 var=229) __uint__rs___uint___sint (__fch_a_high.222 __apl_ff.361)  <512>;
                                    (__trgt.627 var=408) const ()  <1052>;
                                    () void_j_t21s_s2 (__trgt.627)  <1053>;
                                } #110 off=13
                                {
                                    (__rt_low.369 var=217) merge (__apl_r_low.366 __apl_r_low.368)  <513>;
                                } #111
                            } #107
                            #378 off=15
                            (__trgt.630 var=410) const ()  <1057>;
                            () void_j_t21s_s2 (__trgt.630)  <1058>;
                        } #105
                        {
                            (__tmp_low.371 var=233) merge (__fch_a_low.217 __rt_low.369)  <515>;
                        } #112
                    } #102
                    #123 off=17
                    (__tmp.386 var=247) bool__eq___sint___sint (__tmp.227 __ct_0.99)  <534>;
                    (__ct_1.490 var=319) const ()  <683>;
                    (__trgt.634 var=413) const ()  <1064>;
                    () void_br_bool_t13s_s2 (__tmp.386 __trgt.634)  <1065>;
                    (__either.635 var=404) undefined ()  <1066>;
                    if {
                        {
                            () if_expr (__either.635)  <537>;
                        } #125
                        {
                        } #126 off=22
                        {
                            #128 off=18
                            (__apl_ff.389 var=244) __sint__pl___sint___sint (__tmp.227 __ct_m32.359)  <538>;
                            (__tmp.390 var=248) bool__lt___sint___sint (__apl_ff.389 __ct_0.99)  <539>;
                            (__trgt.631 var=411) const ()  <1059>;
                            () void_br_bool_t13s_s2 (__tmp.390 __trgt.631)  <1060>;
                            (__either.632 var=404) undefined ()  <1061>;
                            if {
                                {
                                    () if_expr (__either.632)  <540>;
                                } #130
                                {
                                    (__tmp.391 var=249) __sint__mi___sint___sint (__ct_0.99 __apl_ff.389)  <541>;
                                    (__apl_carries.392 var=245) __uint__rs___uint___sint (__ct_1.490 __tmp.391)  <542>;
                                    (__apl_r_low.393 var=250) __uint__ls___uint___sint (__ct_1.490 __tmp.227)  <543>;
                                } #131 off=20
                                {
                                    (__apl_r_high.396 var=252) __uint__ls___uint___sint (__ct_1.490 __apl_ff.389)  <546>;
                                    (__trgt.633 var=412) const ()  <1062>;
                                    () void_j_t21s_s2 (__trgt.633)  <1063>;
                                } #132 off=19
                                {
                                    (__rt_low.397 var=239) merge (__apl_r_low.393 __ct_0.99)  <547>;
                                    (__rt_high.398 var=240) merge (__apl_carries.392 __apl_r_high.396)  <548>;
                                } #133
                            } #129
                            #379 off=21
                            (__trgt.636 var=414) const ()  <1067>;
                            () void_j_t21s_s2 (__trgt.636)  <1068>;
                        } #127
                        {
                            (__tmp_low.399 var=255) merge (__ct_1.490 __rt_low.397)  <549>;
                            (__tmp_high.400 var=257) merge (__ct_0.99 __rt_high.398)  <550>;
                        } #134
                    } #124
                    #359 off=23
                    (__apl_r_low.421 var=270) __uint_add___uint___uint (__tmp_low.399 __ct_4294967295.491)  <577>;
                    (__apl_r_high.422 var=271) __uint_add___uint___uint (__tmp_high.400 __ct_4294967295.491)  <578>;
                    (__apl_r_high.425 var=271) __uint__pl___uint___uint (__apl_r_high.422 __tmp.558)  <581>;
                    (__tmp_low.445 var=290) __uint__ad___uint___uint (__fch_a_low.217 __apl_r_low.421)  <605>;
                    (__tmp_high.446 var=292) __uint__ad___uint___uint (__fch_a_high.222 __apl_r_high.425)  <606>;
                    (__tmp_low.475 var=309) __uint__or___uint___uint (__tmp_low.371 __tmp.508)  <643>;
                    (__ct_4294967295.491 var=320) const ()  <685>;
                    (__tmpd.494 var=323) __uint__or___uint___uint (__tmp_high.446 __tmp_low.445)  <710>;
                    (__tmp.508 var=329) __sint_sne0___sint (__tmpd.494)  <751>;
                    (__tmp.558 var=370) __sint_slt___uint___uint (__apl_r_low.421 __tmp_low.399)  <892>;
                } #82
                {
                    (__fch_a_low.231 var=130) load (__M_DMw.4 __adr_a.47 a_low.66)  <245>;
                    (__fch_shiftDist.239 var=135) load (__M_DMw.4 __adr_shiftDist.52 shiftDist.192)  <253>;
                    (__tmp.240 var=136) __uint__ls___uint___sint (__fch_a_low.231 __fch_shiftDist.239)  <254>;
                    (__trgt.639 var=416) const ()  <1072>;
                    () void_j_t21s_s2 (__trgt.639)  <1073>;
                } #254 off=10
                {
                    (__tmp_low.575 var=364) merge (__tmp_low.475 __tmp.240)  <917>;
                } #31
            } #27
            #256 off=24
            (__ct_16t0.60 var=47) const ()  <71>;
            (__adr_sig.62 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.59 __ct_16t0.60)  <73>;
            (__M_DMw.244 var=5 sig.245 var=22) store (__tmp_low.575 __adr_sig.62 sig.21)  <258>;
            call {
                () chess_separator_scheduler ()  <259>;
            } #33 off=25
            #44 off=26
            (__ct_156.250 var=143) const ()  <264>;
            (__fch_shiftDist.252 var=145) load (__M_DMw.4 __adr_shiftDist.52 shiftDist.192)  <266>;
            (__tmp.253 var=146) __sint__mi___sint___sint (__ct_156.250 __fch_shiftDist.252)  <267>;
            (__fch_sig.255 var=147) load (__M_DMw.4 __adr_sig.62 sig.245)  <269>;
            (softfloat_roundPackToF32.259 var=150) const ()  <273>;
            (__link.260 var=151) w32_jal_t21s_s2 (softfloat_roundPackToF32.259)  <274>;
            call {
                (__tmp.249 var=142 stl=X off=11) assign (__ct_0.99)  <263>;
                (__tmp.254 var=146 stl=X off=12) assign (__tmp.253)  <268>;
                (__fch_sig.256 var=147 stl=X off=13) assign (__fch_sig.255)  <270>;
                (__link.261 var=151 stl=X off=1) assign (__link.260)  <275>;
                (__tmp.262 var=152 stl=X off=10) Fsoftfloat_roundPackToF32 (__link.261 __tmp.249 __tmp.254 __fch_sig.256)  <276>;
                (__tmp.263 var=152) deassign (__tmp.262)  <277>;
            } #35 off=27
            #380 off=28
            (__trgt.642 var=418) const ()  <1077>;
            () void_j_t21s_s2 (__trgt.642)  <1078>;
        } #23
        {
            (shiftDist.265 var=20) merge (shiftDist.98 shiftDist.192)  <280>;
            (u.266 var=21) merge (u.182 u.20)  <281>;
            (sig.267 var=22) merge (sig.21 sig.245)  <282>;
            (__rt.268 var=27) merge (__rt.186 __tmp.263)  <283>;
        } #37
    } #10
    #39 off=35 nxt=-2
    (__rd___sp.269 var=25) rd_res_reg (__R_SP.11 __sp.43)  <284>;
    (__ct_20s0.270 var=153) const ()  <285>;
    (__tmp.272 var=155) __Pvoid__pl___Pvoid___sint (__rd___sp.269 __ct_20s0.270)  <287>;
    (__R_SP.273 var=12 __sp.274 var=18) wr_res_reg (__tmp.272 __sp.43)  <288>;
    () void___rts_jr_w32 (__la.26)  <289>;
    (__rt.275 var=27 stl=X off=10) assign (__rt.268)  <290>;
    () out (__rt.275)  <291>;
    () sink (__sp.274)  <299>;
    () sink (shiftDist.265)  <301>;
    () sink (u.266)  <302>;
    () sink (sig.267)  <303>;
    () sink (a_low.66)  <304>;
    () sink (a_high.72)  <305>;
} #0
0 : 'SoftFloat-3e/source/ui64_to_f32.c';
----------
0 : (0,42:0,0);
3 : (0,42:23,0);
4 : (0,42:23,0);
5 : (0,48:47,5);
6 : (0,48:16,5);
7 : (0,48:14,6);
8 : (0,48:14,6);
9 : (0,49:11,6);
10 : (0,49:4,6);
12 : (0,60:8,7);
14 : (0,51:14,7);
17 : (0,51:14,9);
19 : (0,50:13,12);
20 : (0,50:13,12);
21 : (0,54:8,13);
23 : (0,54:8,16);
24 : (0,56:18,17);
25 : (0,56:18,17);
26 : (0,58:23,17);
27 : (0,58:28,17);
33 : (0,57:12,22);
35 : (0,60:15,22);
39 : (0,49:4,27);
44 : (0,60:15,22);
64 : (0,51:14,7);
82 : (0,58:30,18);
101 : (0,58:30,18);
102 : (0,58:30,18);
103 : (0,58:30,18);
104 : (0,58:30,18);
105 : (0,58:30,18);
106 : (0,58:30,18);
107 : (0,58:30,18);
108 : (0,58:30,18);
109 : (0,58:30,18);
110 : (0,58:30,18);
111 : (0,58:30,18);
112 : (0,58:30,18);
123 : (0,58:30,18);
124 : (0,58:30,18);
125 : (0,58:30,18);
126 : (0,58:30,18);
127 : (0,58:30,18);
128 : (0,58:30,18);
129 : (0,58:30,18);
130 : (0,58:30,18);
131 : (0,58:30,18);
132 : (0,58:30,18);
133 : (0,58:30,18);
134 : (0,58:30,18);
234 : (0,51:76,8);
256 : (0,57:8,21);
359 : (0,58:30,18);
----------
49 : (0,42:10,0);
50 : (0,42:10,0);
52 : (0,42:10,0);
53 : (0,42:10,0);
55 : (0,42:32,0);
56 : (0,42:32,0);
58 : (0,42:32,0);
60 : (0,44:16,0);
61 : (0,44:16,0);
63 : (0,44:16,0);
65 : (0,45:19,0);
66 : (0,45:19,0);
68 : (0,45:19,0);
70 : (0,46:18,0);
71 : (0,46:18,0);
73 : (0,46:18,0);
76 : (0,42:23,0);
81 : (0,42:23,0);
82 : (0,42:23,0);
84 : (0,48:47,5);
89 : (0,48:47,5);
92 : (0,48:47,0);
94 : (0,48:47,0);
98 : (0,48:16,5);
99 : (0,48:16,0);
100 : (0,48:16,5);
105 : (0,48:51,5);
107 : (0,48:4,5);
108 : (0,48:14,6);
109 : (0,49:11,0);
111 : (0,49:14,6);
112 : (0,49:11,6);
132 : (0,49:4,6);
134 : (0,51:12,7);
139 : (0,51:12,7);
163 : (0,51:14,7);
166 : (0,51:58,0);
168 : (0,51:60,8);
169 : (0,51:58,8);
171 : (0,51:72,0);
173 : (0,51:70,8);
176 : (0,51:95,8);
184 : (0,51:98,8);
185 : (0,51:96,8);
186 : (0,51:76,8);
189 : (0,51:14,10);
193 : (0,50:9,11);
194 : (0,50:13,12);
198 : (0,54:16,12);
200 : (0,56:8,16);
201 : (0,56:18,0);
203 : (0,56:18,16);
204 : (0,56:8,16);
205 : (0,56:18,17);
206 : (0,58:13,17);
209 : (0,58:23,17);
229 : (0,58:28,17);
231 : (0,58:62,18);
236 : (0,58:62,18);
240 : (0,58:66,18);
241 : (0,58:65,18);
245 : (0,59:34,19);
253 : (0,59:37,19);
254 : (0,59:35,19);
258 : (0,57:8,21);
259 : (0,57:12,22);
263 : (0,60:42,0);
264 : (0,60:49,0);
266 : (0,60:51,22);
267 : (0,60:49,22);
268 : (0,60:49,0);
269 : (0,60:62,22);
270 : (0,60:62,0);
274 : (0,60:15,22);
275 : (0,60:15,0);
276 : (0,60:15,22);
280 : (0,49:4,26);
281 : (0,49:4,26);
282 : (0,49:4,26);
283 : (0,49:4,26);
284 : (0,49:4,0);
285 : (0,49:4,0);
287 : (0,49:4,0);
288 : (0,49:4,27);
289 : (0,49:4,27);
290 : (0,49:4,0);
377 : (0,48:51,0);
385 : (0,42:32,0);
493 : (0,51:14,7);
500 : (0,58:30,18);
501 : (0,58:30,0);
503 : (0,58:30,18);
504 : (0,58:30,18);
505 : (0,58:30,18);
506 : (0,58:30,18);
507 : (0,58:30,18);
508 : (0,58:30,18);
509 : (0,58:30,18);
510 : (0,58:30,18);
512 : (0,58:30,18);
513 : (0,58:30,18);
515 : (0,58:30,18);
534 : (0,58:30,18);
537 : (0,58:30,18);
538 : (0,58:30,18);
539 : (0,58:30,18);
540 : (0,58:30,18);
541 : (0,58:30,18);
542 : (0,58:30,18);
543 : (0,58:30,18);
546 : (0,58:30,18);
547 : (0,58:30,18);
548 : (0,58:30,18);
549 : (0,58:30,18);
550 : (0,58:30,18);
577 : (0,58:30,18);
578 : (0,58:30,18);
581 : (0,58:30,18);
605 : (0,58:30,18);
606 : (0,58:30,18);
643 : (0,58:30,18);
683 : (0,58:30,0);
685 : (0,58:30,0);
710 : (0,58:30,18);
751 : (0,58:30,18);
892 : (0,58:30,18);
1002 : (0,51:14,7);
1045 : (0,51:14,7);
1050 : (0,58:30,18);
1055 : (0,58:30,18);
1060 : (0,58:30,18);
1065 : (0,58:30,18);
1070 : (0,58:28,17);
1075 : (0,49:4,6);

