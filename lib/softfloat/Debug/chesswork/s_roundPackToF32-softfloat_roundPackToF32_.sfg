
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:34:28 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/s_roundPackToF32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=36 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : softfloat_roundPackToF32 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : sig typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   20 : exp typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   21 : sign typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   22 : roundingMode typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast8_t_DMb
   23 : roundNearEven typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   24 : roundIncrement typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast8_t_DMb
   25 : roundBits typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast8_t_DMb
   26 : uiZ typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   27 : uZ typ=w08 val=32t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   28 : __rd___sp typ=w32 bnd=m
   29 : __la typ=w32 bnd=p tref=w32__
   30 : __rt typ=w32 bnd=p tref=float32_t___1
   31 : __arg_sign typ=w32 bnd=p tref=bool__
   33 : __arg_exp typ=w32 bnd=p tref=int_fast16_t__
   34 : __arg_sig typ=w32 bnd=p tref=uint_fast32_t__
   35 : __ct_m36S0 typ=w32 val=-36S0 bnd=m
   37 : __tmp typ=w32 bnd=m
   40 : __ct_0t0 typ=w32 val=0t0 bnd=m
   42 : __adr_sig typ=w32 bnd=m adro=19
   44 : __ct_4t0 typ=w32 val=4t0 bnd=m
   46 : __adr_exp typ=w32 bnd=m adro=20
   48 : __ct_8t0 typ=w32 val=8t0 bnd=m
   50 : __adr_sign typ=w32 bnd=m adro=21
   52 : __ct_12t0 typ=w32 val=12t0 bnd=m
   54 : __adr_roundingMode typ=w32 bnd=m adro=22
   56 : __ct_16t0 typ=w32 val=16t0 bnd=m
   58 : __adr_roundNearEven typ=w32 bnd=m adro=23
   60 : __ct_20t0 typ=w32 val=20t0 bnd=m
   62 : __adr_roundIncrement typ=w32 bnd=m adro=24
   64 : __ct_24t0 typ=w32 val=24t0 bnd=m
   66 : __adr_roundBits typ=w32 bnd=m adro=25
   68 : __ct_28t0 typ=w32 val=28t0 bnd=m
   70 : __adr_uiZ typ=w32 bnd=m adro=26
   72 : __ct_32t0 typ=w32 val=32t0 bnd=m
   74 : __adr_uZ typ=w32 bnd=m adro=27
   76 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   83 : __ct_64 typ=w32 val=64f bnd=m
  111 : __fch_sig typ=w32 bnd=m
  112 : __ct_127 typ=w32 val=127f bnd=m
  114 : __tmp typ=w32 bnd=m
  115 : __ct_253 typ=w32 val=253f bnd=m
  117 : __fch_exp typ=w32 bnd=m
  119 : __tmp typ=bool bnd=m
  120 : __fch_exp typ=w32 bnd=m
  123 : __tmp typ=bool bnd=m
  124 : __fch_sig typ=w32 bnd=m
  127 : __fch_exp typ=w32 bnd=m
  128 : __tmp typ=w32 bnd=m
  130 : __tmp typ=w32 bnd=m
  133 : __fch_sig typ=w32 bnd=m
  136 : __tmp typ=w32 bnd=m
  139 : __fch_exp typ=w32 bnd=m
  140 : __tmp typ=bool bnd=m
  143 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  145 : __fch_sig typ=w32 bnd=m
  147 : __tmp typ=w32 bnd=m
  148 : __tmp typ=bool bnd=m
  149 : __tmp typ=bool bnd=m
  150 : __fch_sign typ=w32 bnd=m
  153 : __ct_31 typ=w32 val=31f bnd=m
  155 : __tmp typ=w32 bnd=m
  156 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
  158 : __tmp typ=w32 bnd=m
  169 : __fch_sig typ=w32 bnd=m
  171 : __tmp typ=w32 bnd=m
  172 : __ct_7 typ=w32 val=7f bnd=m
  174 : __tmp typ=w32 bnd=m
  179 : __fch_sig typ=w32 bnd=m
  180 : __fch_roundBits typ=w32 bnd=m
  183 : __tmp typ=w32 bnd=m
  186 : __tmp typ=bool bnd=m
  194 : __tmp typ=w32 bnd=m
  195 : __tmp typ=w32 bnd=m
  196 : __fch_sig typ=w32 bnd=m
  199 : __tmp typ=bool bnd=m
  203 : __fch_sign typ=w32 bnd=m
  208 : __tmp typ=w32 bnd=m
  209 : __fch_exp typ=w32 bnd=m
  211 : __ct_23 typ=w32 val=23f bnd=m
  213 : __tmp typ=w32 bnd=m
  214 : __tmp typ=w32 bnd=m
  215 : __fch_sig typ=w32 bnd=m
  216 : __tmp typ=w32 bnd=m
  217 : __fch_uiZ typ=w32 bnd=m
  226 : __ct_36s0 typ=w32 val=36s0 bnd=m
  228 : __tmp typ=w32 bnd=m
  232 : __ct_1 typ=w32 val=1f bnd=m
  248 : __tmp typ=bool bnd=m
  249 : __tmp typ=w32 bnd=m
  251 : __tmp typ=w32 bnd=m
  252 : __tmp typ=w32 bnd=m
  253 : __tmp typ=w32 bnd=m
  256 : __tmp typ=w32 bnd=m
  263 : __ct_4294967295 typ=w32 val=-1f bnd=m
  276 : __tmp typ=w32 bnd=m
  277 : __tmp typ=w32 bnd=m
  280 : __ct_4294967294 typ=w32 val=-2f bnd=m
  291 : __true typ=bool val=1f bnd=m
  293 : __either typ=bool bnd=m
  294 : __trgt typ=t13s_s2 val=0j bnd=m
  295 : __trgt typ=t21s_s2 val=0j bnd=m
  296 : __trgt typ=t13s_s2 val=0j bnd=m
  297 : __trgt typ=t13s_s2 val=0j bnd=m
  298 : __trgt typ=t13s_s2 val=0j bnd=m
  299 : __trgt typ=t21s_s2 val=0j bnd=m
  300 : __trgt typ=t13s_s2 val=0j bnd=m
  301 : __trgt typ=t21s_s2 val=0j bnd=m
  302 : __trgt typ=t13s_s2 val=0j bnd=m
  303 : __trgt typ=t21s_s2 val=0j bnd=m
  304 : __trgt typ=t13s_s2 val=0j bnd=m
  305 : __trgt typ=t21s_s2 val=0j bnd=m
  306 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_roundPackToF32 {
    #4 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (sig.18 var=19) source ()  <29>;
    (exp.19 var=20) source ()  <30>;
    (sign.20 var=21) source ()  <31>;
    (roundingMode.21 var=22) source ()  <32>;
    (roundNearEven.22 var=23) source ()  <33>;
    (roundIncrement.23 var=24) source ()  <34>;
    (roundBits.24 var=25) source ()  <35>;
    (uiZ.25 var=26) source ()  <36>;
    (uZ.26 var=27) source ()  <37>;
    (__la.28 var=29 stl=X off=1) inp ()  <39>;
    (__la.29 var=29) deassign (__la.28)  <40>;
    (__arg_sign.32 var=31 stl=X off=11) inp ()  <43>;
    (__arg_sign.33 var=31) deassign (__arg_sign.32)  <44>;
    (__arg_exp.35 var=33 stl=X off=12) inp ()  <46>;
    (__arg_exp.36 var=33) deassign (__arg_exp.35)  <47>;
    (__arg_sig.38 var=34 stl=X off=13) inp ()  <49>;
    (__arg_sig.39 var=34) deassign (__arg_sig.38)  <50>;
    (__rd___sp.41 var=28) rd_res_reg (__R_SP.11 __sp.17)  <52>;
    (__ct_m36S0.42 var=35) const ()  <53>;
    (__tmp.44 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_m36S0.42)  <55>;
    (__R_SP.45 var=12 __sp.46 var=18) wr_res_reg (__tmp.44 __sp.17)  <56>;
    (__rd___sp.48 var=28) rd_res_reg (__R_SP.11 __sp.46)  <59>;
    (__ct_0t0.49 var=40) const ()  <60>;
    (__adr_sig.51 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_0t0.49)  <62>;
    (__rd___sp.53 var=28) rd_res_reg (__R_SP.11 __sp.46)  <64>;
    (__rd___sp.58 var=28) rd_res_reg (__R_SP.11 __sp.46)  <69>;
    (__rd___sp.63 var=28) rd_res_reg (__R_SP.11 __sp.46)  <74>;
    (__rd___sp.68 var=28) rd_res_reg (__R_SP.11 __sp.46)  <79>;
    (__rd___sp.73 var=28) rd_res_reg (__R_SP.11 __sp.46)  <84>;
    (__rd___sp.78 var=28) rd_res_reg (__R_SP.11 __sp.46)  <89>;
    (__rd___sp.83 var=28) rd_res_reg (__R_SP.11 __sp.46)  <94>;
    (__rd___sp.88 var=28) rd_res_reg (__R_SP.11 __sp.46)  <99>;
    (__M_DMw.93 var=5 sig.94 var=19) store (__arg_sig.39 __adr_sig.51 sig.18)  <104>;
    call {
        () chess_separator_scheduler ()  <105>;
    } #5 off=1
    #6 off=2
    (__ct_4t0.54 var=44) const ()  <65>;
    (__adr_exp.56 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_4t0.54)  <67>;
    (__M_DMw.95 var=5 exp.96 var=20) store (__arg_exp.36 __adr_exp.56 exp.19)  <106>;
    call {
        () chess_separator_scheduler ()  <107>;
    } #7 off=3
    #8 off=4
    (__ct_8t0.59 var=48) const ()  <70>;
    (__adr_sign.61 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_8t0.59)  <72>;
    (__M_DMw.98 var=5 sign.99 var=21) store (__arg_sign.33 __adr_sign.61 sign.20)  <109>;
    call {
        () chess_separator_scheduler ()  <110>;
    } #9 off=5
    #10 off=6
    (__ct_12t0.64 var=52) const ()  <75>;
    (__adr_roundingMode.66 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_12t0.64)  <77>;
    (__ct_0.100 var=76) const ()  <111>;
    (__M_DMw.102 var=5 roundingMode.103 var=22) store (__ct_0.100 __adr_roundingMode.66 roundingMode.21)  <113>;
    call {
        () chess_separator_scheduler ()  <114>;
    } #11 off=7
    #105 off=8
    (__ct_16t0.69 var=56) const ()  <80>;
    (__adr_roundNearEven.71 var=58) __Pvoid__pl___Pvoid___sint (__rd___sp.68 __ct_16t0.69)  <82>;
    (__M_DMw.109 var=5 roundNearEven.110 var=23) store (__ct_1.754 __adr_roundNearEven.71 roundNearEven.22)  <120>;
    (__ct_1.754 var=232) const ()  <865>;
    call {
        () chess_separator_scheduler ()  <121>;
    } #13 off=9
    #14 off=10
    (__ct_20t0.74 var=60) const ()  <85>;
    (__adr_roundIncrement.76 var=62) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_20t0.74)  <87>;
    (__ct_64.111 var=83) const ()  <122>;
    (__M_DMw.113 var=5 roundIncrement.114 var=24) store (__ct_64.111 __adr_roundIncrement.76 roundIncrement.23)  <124>;
    call {
        () chess_separator_scheduler ()  <125>;
    } #15 off=11
    #42 off=12
    (__ct_24t0.79 var=64) const ()  <90>;
    (__adr_roundBits.81 var=66) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_24t0.79)  <92>;
    (__fch_sig.260 var=111) load (__M_DMw.4 __adr_sig.51 sig.94)  <275>;
    (__ct_127.261 var=112) const ()  <276>;
    (__tmp.263 var=114) __uint__ad___uint___uint (__fch_sig.260 __ct_127.261)  <278>;
    (__M_DMw.264 var=5 roundBits.265 var=25) store (__tmp.263 __adr_roundBits.81 roundBits.24)  <279>;
    call {
        () chess_separator_scheduler ()  <280>;
    } #43 off=13
    #44 off=14
    (__ct_28t0.84 var=68) const ()  <95>;
    (__adr_uiZ.86 var=70) __Pvoid__pl___Pvoid___sint (__rd___sp.83 __ct_28t0.84)  <97>;
    (__ct_253.266 var=115) const ()  <281>;
    (__fch_exp.268 var=117) load (__M_DMw.4 __adr_exp.56 exp.96)  <283>;
    (__ct_31.426 var=153) const ()  <445>;
    (__tmp.834 var=119) bool__lt___uint___uint (__fch_exp.268 __ct_253.266)  <1115>;
    (__trgt.849 var=300) const ()  <1162>;
    () void_br_bool_t13s_s2 (__tmp.834 __trgt.849)  <1163>;
    (__either.850 var=293) undefined ()  <1164>;
    if {
        {
            () if_expr (__either.850)  <315>;
        } #46
        {
        } #75 off=30
        {
            #48 off=15
            (__fch_exp.300 var=120) load (__M_DMw.4 __adr_exp.56 exp.96)  <316>;
            (__tmp.303 var=123) bool__lt___sint___sint (__fch_exp.300 __ct_0.100)  <319>;
            (__trgt.846 var=298) const ()  <1157>;
            () void_br_bool_t13s_s2 (__tmp.303 __trgt.846)  <1158>;
            (__either.847 var=293) undefined ()  <1159>;
            if {
                {
                    () if_expr (__either.847)  <349>;
                } #50
                {
                    #137 off=21
                    (__fch_sig.333 var=124) load (__M_DMw.4 __adr_sig.51 sig.94)  <350>;
                    (__fch_exp.336 var=127) load (__M_DMw.4 __adr_exp.56 exp.96)  <353>;
                    (__tmp.337 var=128) __sint__mi___sint___sint (__ct_0.100 __fch_exp.336)  <354>;
                    (__tmp.777 var=248) bool__lt___uint___uint (__tmp.337 __ct_31.426)  <951>;
                    (__trgt.838 var=294) const ()  <1144>;
                    () void_br_bool_t13s_s2 (__tmp.777 __trgt.838)  <1145>;
                    (__either.839 var=293) undefined ()  <1146>;
                    if {
                        {
                            () if_expr (__either.839)  <953>;
                        } #139
                        {
                            (__tmp.779 var=249) __uint__rs___uint___sint (__fch_sig.333 __tmp.337)  <954>;
                            (__tmp.780 var=251) __uint__mi___uint___uint (__ct_0.100 __tmp.337)  <955>;
                            (__tmp.781 var=252) __uint__ad___uint___uint (__tmp.780 __ct_31.426)  <956>;
                            (__tmp.782 var=253) __uint__ls___uint___sint (__fch_sig.333 __tmp.781)  <957>;
                            (__tmp.785 var=256) __uint__or___uint___uint (__tmp.779 __tmp.824)  <960>;
                            (__tmp.824 var=276) __sint_sne0___sint (__tmp.782)  <1072>;
                        } #182 off=23
                        {
                            (__tmp.830 var=277) __sint_sne0___sint (__fch_sig.333)  <1081>;
                            (__trgt.840 var=295) const ()  <1147>;
                            () void_j_t21s_s2 (__trgt.840)  <1148>;
                        } #215 off=22
                        {
                            (__tmp.788 var=130) merge (__tmp.785 __tmp.830)  <963>;
                        } #142
                    } #138
                    #134 off=24
                    (__M_DMw.340 var=5 sig.341 var=19) store (__tmp.788 __adr_sig.51 sig.94)  <357>;
                    call {
                        () chess_separator_scheduler ()  <358>;
                    } #53 off=25
                    #54 off=26
                    (__M_DMw.344 var=5 exp.345 var=20) store (__ct_0.100 __adr_exp.56 exp.96)  <361>;
                    call {
                        () chess_separator_scheduler ()  <362>;
                    } #55 off=27
                    #56 off=28
                    (__fch_sig.346 var=133) load (__M_DMw.4 __adr_sig.51 sig.341)  <363>;
                    (__tmp.349 var=136) __uint__ad___uint___uint (__fch_sig.346 __ct_127.261)  <366>;
                    (__M_DMw.350 var=5 roundBits.351 var=25) store (__tmp.349 __adr_roundBits.81 roundBits.265)  <367>;
                } #51
                {
                    #59 off=16
                    (__fch_exp.354 var=139) load (__M_DMw.4 __adr_exp.56 exp.96)  <371>;
                    (__tmp.355 var=140) bool__lt___sint___sint (__ct_253.266 __fch_exp.354)  <372>;
                    (__trgt.841 var=296) const ()  <1149>;
                    () void_br_bool_t13s_s2 (__tmp.355 __trgt.841)  <1150>;
                    (__either.842 var=293) undefined ()  <1151>;
                    if {
                        {
                            () if_expr (__either.842)  <402>;
                        } #61
                        {
                            (__true.843 var=291) const ()  <1152>;
                        } #62
                        {
                            (__ct_2147483648.387 var=143) const ()  <405>;
                            (__fch_sig.389 var=145) load (__M_DMw.4 __adr_sig.51 sig.94)  <407>;
                            (__tmp.391 var=147) __uint__pl___uint___uint (__fch_sig.389 __ct_64.111)  <409>;
                            (__tmp.392 var=148) bool__ge___uint___uint (__tmp.391 __ct_2147483648.387)  <410>;
                            (__trgt.844 var=297) const ()  <1153>;
                            () void_br_bool_t13s_s2 (__tmp.392 __trgt.844)  <1154>;
                            (__either.845 var=293) undefined ()  <1155>;
                        } #63 off=17
                        {
                            (__tmp.393 var=149) merge (__true.843 __either.845)  <411>;
                        } #64
                    } #60
                    if {
                        {
                            () if_expr (__tmp.393)  <441>;
                            () chess_rear_then ()  <1156>;
                        } #67
                        {
                            (__fch_sign.423 var=150) load (__M_DMw.4 __adr_sign.61 sign.99)  <442>;
                            (__tmp.428 var=155) __uint__ls___uint___sint (__fch_sign.423 __ct_31.426)  <447>;
                            (__ct_2139095040.429 var=156) const ()  <448>;
                            (__tmp.431 var=158) __uint__pl___uint___uint (__tmp.428 __ct_2139095040.429)  <450>;
                            (__M_DMw.442 var=5 uiZ.443 var=26) store (__tmp.431 __adr_uiZ.86 uiZ.25)  <461>;
                            () sink (__sp.46)  <468>;
                            () sink (sig.94)  <469>;
                            () sink (exp.96)  <470>;
                            () sink (sign.99)  <471>;
                            () sink (roundingMode.103)  <472>;
                            () sink (roundNearEven.110)  <473>;
                            () sink (roundIncrement.114)  <474>;
                            () sink (roundBits.265)  <475>;
                            () sink (uiZ.443)  <476>;
                            () sync_sink (sig.94) sid=7  <484>;
                            () sync_sink (exp.96) sid=8  <485>;
                            () sync_sink (roundBits.265) sid=13  <490>;
                            () sync_sink (uiZ.443) sid=14  <491>;
                            (__trgt.858 var=306) const ()  <1177>;
                            () void_j_t21s_s2 (__trgt.858)  <1178>;
                        } #71 off=19 nxt=-3 tgt=1
                        {
                        } #72 off=18
                        {
                        } #73
                    } #66
                    #221 off=20
                    (__trgt.848 var=299) const ()  <1160>;
                    () void_j_t21s_s2 (__trgt.848)  <1161>;
                } #58
                {
                    (sig.508 var=19) merge (sig.341 sig.94)  <571>;
                    (exp.509 var=20) merge (exp.345 exp.96)  <572>;
                    (roundBits.514 var=25) merge (roundBits.351 roundBits.265)  <577>;
                } #74
            } #49
            #222 off=29
            (__trgt.851 var=301) const ()  <1165>;
            () void_j_t21s_s2 (__trgt.851)  <1166>;
        } #47
        {
            (sig.537 var=19) merge (sig.94 sig.508)  <600>;
            (exp.538 var=20) merge (exp.96 exp.509)  <601>;
            (roundBits.543 var=25) merge (roundBits.265 roundBits.514)  <606>;
        } #76
    } #45
    #77 off=31
    (__fch_sig.560 var=169) load (__M_DMw.4 __adr_sig.51 sig.537)  <623>;
    (__tmp.562 var=171) __uint__pl___uint___uint (__fch_sig.560 __ct_64.111)  <625>;
    (__ct_7.563 var=172) const ()  <626>;
    (__tmp.565 var=174) __uint__rs___uint___sint (__tmp.562 __ct_7.563)  <628>;
    (__M_DMw.566 var=5 sig.567 var=19) store (__tmp.565 __adr_sig.51 sig.537)  <629>;
    call {
        () chess_separator_scheduler ()  <630>;
    } #78 off=32
    #168 off=33
    (__fch_sig.601 var=179) load (__M_DMw.4 __adr_sig.51 sig.567)  <665>;
    (__fch_roundBits.602 var=180) load (__M_DMw.4 __adr_roundBits.81 roundBits.543)  <666>;
    (__tmp.605 var=183) __uint__er___uint___uint (__fch_roundBits.602 __ct_64.111)  <669>;
    (__tmp.770 var=186) bool__eq___uint___uint (__tmp.605 __ct_0.100)  <918>;
    (__ct_4294967294.818 var=280) const ()  <1064>;
    (__trgt.852 var=302) const ()  <1167>;
    () void_br_bool_t13s_s2 (__tmp.770 __trgt.852)  <1168>;
    (__either.853 var=293) undefined ()  <1169>;
    if {
        {
            () if_expr (__either.853)  <1007>;
        } #170
        {
        } #171 off=35
        {
            (__ct_4294967295.791 var=263) const ()  <969>;
            (__trgt.854 var=303) const ()  <1170>;
            () void_j_t21s_s2 (__trgt.854)  <1171>;
        } #172 off=34
        {
            (__tmp.819 var=194) merge (__ct_4294967294.818 __ct_4294967295.791)  <1066>;
        } #173
    } #169
    #165 off=36
    (__tmp.617 var=195) __uint__ad___uint___uint (__fch_sig.601 __tmp.819)  <681>;
    (__M_DMw.618 var=5 sig.619 var=19) store (__tmp.617 __adr_sig.51 sig.567)  <682>;
    call {
        () chess_separator_scheduler ()  <683>;
    } #86 off=37
    #87 off=38
    (__fch_sig.620 var=196) load (__M_DMw.4 __adr_sig.51 sig.619)  <684>;
    (__tmp.835 var=199) bool__ne___uint___uint (__fch_sig.620 __ct_0.100)  <1116>;
    (__trgt.855 var=304) const ()  <1172>;
    () void_br_bool_t13s_s2 (__tmp.835 __trgt.855)  <1173>;
    (__either.856 var=293) undefined ()  <1174>;
    if {
        {
            () if_expr (__either.856)  <718>;
        } #89
        {
        } #93 off=40
        {
            (__M_DMw.656 var=5 exp.657 var=20) store (__ct_0.100 __adr_exp.56 exp.538)  <721>;
            (__trgt.857 var=305) const ()  <1175>;
            () void_j_t21s_s2 (__trgt.857)  <1176>;
        } #91 off=39
        {
            (exp.658 var=20) merge (exp.538 exp.657)  <723>;
        } #94
    } #88
    #95 off=41
    (__fch_sign.659 var=203) load (__M_DMw.4 __adr_sign.61 sign.99)  <724>;
    (__tmp.664 var=208) __uint__ls___uint___sint (__fch_sign.659 __ct_31.426)  <729>;
    (__fch_exp.665 var=209) load (__M_DMw.4 __adr_exp.56 exp.658)  <730>;
    (__ct_23.667 var=211) const ()  <732>;
    (__tmp.669 var=213) __uint__ls___uint___sint (__fch_exp.665 __ct_23.667)  <734>;
    (__tmp.670 var=214) __uint__pl___uint___uint (__tmp.664 __tmp.669)  <735>;
    (__fch_sig.671 var=215) load (__M_DMw.4 __adr_sig.51 sig.619)  <736>;
    (__tmp.672 var=216) __uint__pl___uint___uint (__tmp.670 __fch_sig.671)  <737>;
    (__M_DMw.673 var=5 uiZ.674 var=26) store (__tmp.672 __adr_uiZ.86 uiZ.25)  <738>;
    sync {
        (sig.681 var=19) sync_link (sig.619) sid=7  <746>;
        (exp.682 var=20) sync_link (exp.658) sid=8  <747>;
        (roundBits.687 var=25) sync_link (roundBits.543) sid=13  <752>;
        (uiZ.688 var=26) sync_link (uiZ.674) sid=14  <753>;
    } #1 off=42
    #97 off=43
    (__ct_32t0.89 var=72) const ()  <100>;
    (__adr_uZ.91 var=74) __Pvoid__pl___Pvoid___sint (__rd___sp.88 __ct_32t0.89)  <102>;
    (__fch_uiZ.704 var=217) load (__M_DMw.4 __adr_uiZ.86 uiZ.688)  <769>;
    (__M_DMw.708 var=5 uZ.709 var=27) store (__fch_uiZ.704 __adr_uZ.91 uZ.26)  <773>;
    call {
        () chess_separator_scheduler ()  <774>;
    } #98 off=44
    #101 off=45 nxt=-2
    (__rt.713 var=30) load (__M_DMw.4 __adr_uZ.91 uZ.709)  <778>;
    (__rd___sp.715 var=28) rd_res_reg (__R_SP.11 __sp.46)  <780>;
    (__ct_36s0.716 var=226) const ()  <781>;
    (__tmp.718 var=228) __Pvoid__pl___Pvoid___sint (__rd___sp.715 __ct_36s0.716)  <783>;
    (__R_SP.719 var=12 __sp.720 var=18) wr_res_reg (__tmp.718 __sp.46)  <784>;
    () void___rts_jr_w32 (__la.29)  <785>;
    (__rt.721 var=30 stl=X off=10) assign (__rt.713)  <786>;
    () out (__rt.721)  <787>;
    () sink (__sp.720)  <793>;
    () sink (sig.681)  <794>;
    () sink (exp.682)  <795>;
    () sink (sign.99)  <796>;
    () sink (roundingMode.103)  <797>;
    () sink (roundNearEven.110)  <798>;
    () sink (roundIncrement.114)  <799>;
    () sink (roundBits.687)  <800>;
    () sink (uiZ.688)  <801>;
    () sink (uZ.709)  <802>;
} #0
0 : 'SoftFloat-3e/source/s_roundPackToF32.c';
----------
0 : (0,43:0,0);
1 : (0,118:1,74);
4 : (0,44:56,0);
5 : (0,44:56,0);
6 : (0,44:38,0);
7 : (0,44:38,0);
8 : (0,44:27,0);
9 : (0,44:27,0);
10 : (0,57:17,10);
11 : (0,57:17,10);
13 : (0,58:18,11);
14 : (0,59:19,12);
15 : (0,59:19,12);
42 : (0,67:14,32);
43 : (0,67:14,32);
44 : (0,70:14,32);
45 : (0,70:4,32);
47 : (0,70:38,33);
48 : (0,71:17,33);
49 : (0,71:8,33);
51 : (0,71:23,34);
53 : (0,79:16,35);
54 : (0,80:16,36);
55 : (0,80:16,36);
56 : (0,81:22,37);
58 : (0,87:15,39);
59 : (0,87:26,39);
60 : (0,87:33,39);
62 : (0,87:33,40);
63 : (0,87:48,41);
66 : (0,87:15,43);
71 : (0,95:12,45);
72 : (0,87:15,48);
75 : (0,70:4,55);
77 : (0,100:8,59);
78 : (0,100:8,59);
86 : (0,112:8,66);
87 : (0,113:9,66);
88 : (0,113:4,66);
91 : (0,113:21,68);
93 : (0,113:4,69);
95 : (0,117:8,74);
97 : (0,119:10,76);
98 : (0,119:10,76);
101 : (0,120:4,76);
105 : (0,58:4,10);
134 : (0,79:12,34);
137 : (0,79:18,34);
138 : (0,79:18,34);
139 : (0,79:18,34);
142 : (0,79:18,34);
165 : (0,112:4,65);
168 : (0,112:50,65);
169 : (0,112:50,65);
170 : (0,112:50,65);
171 : (0,112:50,65);
172 : (0,112:50,65);
173 : (0,112:50,65);
182 : (0,79:18,34);
215 : (0,79:18,34);
----------
52 : (0,44:1,0);
53 : (0,44:1,0);
55 : (0,44:1,0);
56 : (0,44:1,0);
59 : (0,44:70,0);
60 : (0,44:70,0);
62 : (0,44:70,0);
64 : (0,44:51,0);
65 : (0,44:51,0);
67 : (0,44:51,0);
69 : (0,44:32,0);
70 : (0,44:32,0);
72 : (0,44:32,0);
74 : (0,46:17,0);
75 : (0,46:17,0);
77 : (0,46:17,0);
79 : (0,47:9,0);
80 : (0,47:9,0);
82 : (0,47:9,0);
84 : (0,48:17,0);
85 : (0,48:17,0);
87 : (0,48:17,0);
89 : (0,48:33,0);
90 : (0,48:33,0);
92 : (0,48:33,0);
94 : (0,52:18,0);
95 : (0,52:18,0);
97 : (0,52:18,0);
99 : (0,53:19,0);
100 : (0,53:19,0);
102 : (0,53:19,0);
104 : (0,44:56,0);
105 : (0,44:56,0);
106 : (0,44:38,0);
107 : (0,44:38,0);
109 : (0,44:27,0);
110 : (0,44:27,0);
111 : (0,57:17,0);
113 : (0,57:4,9);
114 : (0,57:17,10);
120 : (0,58:4,10);
121 : (0,58:18,11);
122 : (0,59:19,0);
124 : (0,59:4,11);
125 : (0,59:19,12);
275 : (0,67:16,31);
276 : (0,67:20,0);
278 : (0,67:20,31);
279 : (0,67:4,31);
280 : (0,67:14,32);
281 : (0,70:14,0);
283 : (0,70:32,32);
315 : (0,70:4,32);
316 : (0,71:13,33);
319 : (0,71:17,33);
349 : (0,71:8,33);
350 : (0,79:45,34);
353 : (0,79:51,34);
354 : (0,79:50,34);
357 : (0,79:12,34);
358 : (0,79:16,35);
361 : (0,80:12,35);
362 : (0,80:16,36);
363 : (0,81:24,36);
366 : (0,81:28,36);
367 : (0,81:12,36);
371 : (0,87:28,39);
372 : (0,87:26,39);
402 : (0,87:33,39);
405 : (0,87:48,0);
407 : (0,87:51,41);
409 : (0,87:55,41);
410 : (0,87:48,41);
411 : (0,87:33,42);
441 : (0,87:15,43);
442 : (0,94:32,44);
445 : (0,94:39,0);
447 : (0,94:37,44);
448 : (0,94:63,0);
450 : (0,94:43,44);
461 : (0,94:12,44);
571 : (0,71:8,52);
572 : (0,71:8,52);
577 : (0,71:8,52);
600 : (0,70:4,57);
601 : (0,70:4,57);
606 : (0,70:4,57);
623 : (0,100:11,58);
625 : (0,100:15,58);
626 : (0,100:34,0);
628 : (0,100:32,58);
629 : (0,100:4,58);
630 : (0,100:8,59);
665 : (0,112:4,65);
666 : (0,112:32,65);
669 : (0,112:42,65);
681 : (0,112:8,65);
682 : (0,112:4,65);
683 : (0,112:8,66);
684 : (0,113:11,66);
718 : (0,113:4,66);
721 : (0,113:17,67);
723 : (0,113:4,71);
724 : (0,117:24,73);
729 : (0,117:29,73);
730 : (0,117:50,73);
732 : (0,117:56,0);
734 : (0,117:54,73);
735 : (0,117:35,73);
736 : (0,117:63,73);
737 : (0,117:60,73);
738 : (0,117:4,73);
769 : (0,119:12,75);
773 : (0,119:6,75);
774 : (0,119:10,76);
778 : (0,120:13,76);
780 : (0,120:4,0);
781 : (0,120:4,0);
783 : (0,120:4,0);
784 : (0,120:4,76);
785 : (0,120:4,76);
786 : (0,120:13,0);
865 : (0,58:4,0);
918 : (0,112:29,65);
951 : (0,79:18,34);
953 : (0,79:18,34);
954 : (0,79:18,34);
955 : (0,79:18,34);
956 : (0,79:18,34);
957 : (0,79:18,34);
960 : (0,79:18,34);
963 : (0,79:18,34);
969 : (0,112:11,0);
1007 : (0,112:50,65);
1064 : (0,112:11,0);
1066 : (0,112:50,65);
1072 : (0,79:18,34);
1081 : (0,79:18,34);
1115 : (0,70:14,32);
1116 : (0,113:9,66);
1145 : (0,79:18,34);
1150 : (0,87:33,39);
1154 : (0,87:15,43);
1158 : (0,71:8,33);
1163 : (0,70:4,32);
1168 : (0,112:50,65);
1173 : (0,113:4,66);

