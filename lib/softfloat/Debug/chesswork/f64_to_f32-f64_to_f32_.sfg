
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 16:47:19 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f64_to_f32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t f64_to_f32(float64_t)
Ff64_to_f32 : user_defined, called {
    fnm : "f64_to_f32" 'float32_t f64_to_f32(float64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=56 );
    llv : 0 0 0 0 0 ;
}
****
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : f64_to_f32 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=float64_t_DMb
   20 : uA typ=w08 val=8t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   21 : uiA typ=w08 val=16t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   22 : sign typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   23 : exp typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   24 : frac typ=w08 val=32t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   25 : uiZ typ=w08 val=44t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   26 : frac32 typ=w08 val=48t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   27 : uZ typ=w08 val=52t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   28 : a_low typ=w08 bnd=B stl=DMb
   29 : a_high typ=w08 bnd=B stl=DMb
   30 : uiA_low typ=w08 bnd=B stl=DMb
   31 : uiA_high typ=w08 bnd=B stl=DMb
   32 : frac_low typ=w08 bnd=B stl=DMb
   33 : frac_high typ=w08 bnd=B stl=DMb
   34 : __rd___sp typ=w32 bnd=m
   35 : __la typ=w32 bnd=p tref=w32__
   36 : __rt typ=w32 bnd=p tref=float32_t___1
   38 : __arg_a_low typ=w32 bnd=m tref=__uint__
   39 : __arg_a_high typ=w32 bnd=m tref=__uint__
   40 : __ct_m56S0 typ=w32 val=-56S0 bnd=m
   42 : __tmp typ=w32 bnd=m
   44 : __ct_0t0 typ=w32 val=0t0 bnd=m
   46 : __adr_a typ=w32 bnd=m adro=19
   48 : __ct_8t0 typ=w32 val=8t0 bnd=m
   50 : __adr_uA typ=w32 bnd=m adro=20
   52 : __ct_16t0 typ=w32 val=16t0 bnd=m
   54 : __adr_uiA typ=w32 bnd=m adro=21
   56 : __ct_24t0 typ=w32 val=24t0 bnd=m
   58 : __adr_sign typ=w32 bnd=m adro=22
   60 : __ct_28t0 typ=w32 val=28t0 bnd=m
   62 : __adr_exp typ=w32 bnd=m adro=23
   64 : __ct_32t0 typ=w32 val=32t0 bnd=m
   66 : __adr_frac typ=w32 bnd=m adro=24
   68 : __ct_44t0 typ=w32 val=44t0 bnd=m
   70 : __adr_uiZ typ=w32 bnd=m adro=25
   72 : __ct_48t0 typ=w32 val=48t0 bnd=m
   74 : __adr_frac32 typ=w32 bnd=m adro=26
   76 : __ct_52t0 typ=w32 val=52t0 bnd=m
   78 : __adr_uZ typ=w32 bnd=m adro=27
   83 : __fch_a_low typ=w32 bnd=m
   86 : __fch_a_high typ=w32 bnd=m
   98 : __fch_uA typ=w32 bnd=m
  101 : __fch_uA typ=w32 bnd=m
  110 : __fch_uiA_high typ=w32 bnd=m
  117 : __tmp typ=w32 bnd=m
  122 : __fch_uiA_high typ=w32 bnd=m
  127 : __ct_2047 typ=w32 val=2047f bnd=m
  129 : __tmp typ=w32 bnd=m
  131 : __fch_uiA_low typ=w32 bnd=m
  134 : __fch_uiA_high typ=w32 bnd=m
  142 : __fch_exp typ=w32 bnd=m
  145 : __tmp typ=bool bnd=m
  147 : __fch_frac_low typ=w32 bnd=m
  150 : __fch_frac_high typ=w32 bnd=m
  154 : __ct_2143289344 typ=t20s_rp12 val=523264f bnd=m
  156 : __fch_sign typ=w32 bnd=m
  159 : __ct_31 typ=w32 val=31f bnd=m
  161 : __tmp typ=w32 bnd=m
  162 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
  164 : __tmp typ=w32 bnd=m
  165 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  169 : __fch_frac_low typ=w32 bnd=m
  172 : __fch_frac_high typ=w32 bnd=m
  173 : __ct_22 typ=w32 val=22f bnd=m
  177 : __fch_exp typ=w32 bnd=m
  179 : __fch_frac32 typ=w32 bnd=m
  180 : __tmp typ=w32 bnd=m
  183 : __tmp typ=bool bnd=m
  185 : __fch_sign typ=w32 bnd=m
  190 : __tmp typ=w32 bnd=m
  197 : __fch_sign typ=w32 bnd=m
  199 : __tmp typ=w32 bnd=m
  200 : __fch_exp typ=w32 bnd=m
  203 : __tmp typ=w32 bnd=m
  204 : __fch_frac32 typ=w32 bnd=m
  205 : __ct_1073741824 typ=t20s_rp12 val=262144f bnd=m
  207 : __tmp typ=w32 bnd=m
  210 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
  211 : __link typ=w32 bnd=m
  212 : __tmp typ=w32 bnd=m
  213 : __ct_56s0 typ=w32 val=56s0 bnd=m
  215 : __tmp typ=w32 bnd=m
  216 : __fch_uiZ typ=w32 bnd=m
  226 : __tmp typ=w32 bnd=m
  242 : __ct_m897 typ=w32 val=-897f bnd=m
  249 : __ct_36t0 typ=w32 val=36t0 bnd=m
  250 : __adr_frac typ=w32 bnd=m adro=24
  251 : __adr_frac typ=w32 bnd=m adro=24
  252 : __ct_4t0 typ=w32 val=4t0 bnd=m
  253 : __adr_a typ=w32 bnd=m adro=19
  254 : __adr_a typ=w32 bnd=m adro=19
  255 : __ct_12t0 typ=w32 val=12t0 bnd=m
  256 : __adr_uA typ=w32 bnd=m adro=20
  257 : __adr_uA typ=w32 bnd=m adro=20
  258 : __ct_20t0 typ=w32 val=20t0 bnd=m
  259 : __adr_uiA typ=w32 bnd=m adro=21
  260 : __adr_uiA typ=w32 bnd=m adro=21
  261 : __adr_uiA typ=w32 bnd=m adro=21
  262 : __adr_uiA typ=w32 bnd=m adro=21
  263 : __adr_frac typ=w32 bnd=m adro=24
  272 : __apl_carries typ=w32 bnd=m tref=__uint__
  277 : __tmp typ=w32 bnd=m
  278 : __apl_r_low typ=w32 bnd=m tref=__uint__
  315 : __tmp_high typ=w32 bnd=m
  342 : __ct_20 typ=w32 val=20f bnd=m
  347 : __ct_1048575 typ=w32 val=1048575f bnd=m
  350 : __tmpd typ=w32 bnd=m
  351 : __tmp typ=bool bnd=m
  363 : __tmp_low typ=w32 bnd=m
  382 : __tmp_low typ=w32 bnd=m
  393 : __ct_10 typ=w32 val=10f bnd=m
  394 : __ct_4194303 typ=w32 val=4194303f bnd=m
  401 : __tmp typ=w32 bnd=m
  435 : __either typ=bool bnd=m
  436 : __trgt typ=t13s_s2 val=0j bnd=m
  437 : __trgt typ=t21s_s2 val=0j bnd=m
  438 : __trgt typ=t13s_s2 val=0j bnd=m
  439 : __trgt typ=t13s_s2 val=0j bnd=m
  440 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_to_f32 {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (uA.19 var=20) source ()  <30>;
    (sign.21 var=22) source ()  <32>;
    (exp.22 var=23) source ()  <33>;
    (uiZ.24 var=25) source ()  <35>;
    (frac32.25 var=26) source ()  <36>;
    (uZ.26 var=27) source ()  <37>;
    (a_low.27 var=28) source ()  <38>;
    (a_high.28 var=29) source ()  <39>;
    (uiA_low.29 var=30) source ()  <40>;
    (uiA_high.30 var=31) source ()  <41>;
    (frac_low.31 var=32) source ()  <42>;
    (frac_high.32 var=33) source ()  <43>;
    (__la.34 var=35 stl=X off=1) inp ()  <45>;
    (__la.35 var=35) deassign (__la.34)  <46>;
    (__arg_a_low.39 var=38 stl=X off=11) inp ()  <50>;
    (__arg_a_low.40 var=38) deassign (__arg_a_low.39)  <51>;
    (__arg_a_high.43 var=39 stl=X off=12) inp ()  <54>;
    (__arg_a_high.44 var=39) deassign (__arg_a_high.43)  <55>;
    (__rd___sp.47 var=34) rd_res_reg (__R_SP.11 __sp.17)  <58>;
    (__ct_m56S0.48 var=40) const ()  <59>;
    (__tmp.50 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.47 __ct_m56S0.48)  <61>;
    (__R_SP.51 var=12 __sp.52 var=18) wr_res_reg (__tmp.50 __sp.17)  <62>;
    (__rd___sp.53 var=34) rd_res_reg (__R_SP.11 __sp.52)  <64>;
    (__ct_0t0.54 var=44) const ()  <65>;
    (__adr_a.56 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_0t0.54)  <67>;
    (__rd___sp.58 var=34) rd_res_reg (__R_SP.11 __sp.52)  <69>;
    (__rd___sp.63 var=34) rd_res_reg (__R_SP.11 __sp.52)  <74>;
    (__rd___sp.68 var=34) rd_res_reg (__R_SP.11 __sp.52)  <79>;
    (__rd___sp.73 var=34) rd_res_reg (__R_SP.11 __sp.52)  <84>;
    (__rd___sp.78 var=34) rd_res_reg (__R_SP.11 __sp.52)  <89>;
    (__rd___sp.83 var=34) rd_res_reg (__R_SP.11 __sp.52)  <94>;
    (__rd___sp.88 var=34) rd_res_reg (__R_SP.11 __sp.52)  <99>;
    (__rd___sp.93 var=34) rd_res_reg (__R_SP.11 __sp.52)  <104>;
    (__M_DMw.99 var=5 a_low.100 var=28) store (__arg_a_low.40 __adr_a.56 a_low.27)  <110>;
    (__M_DMw.105 var=5 a_high.106 var=29) store (__arg_a_high.44 __adr_a.579 a_high.28)  <115>;
    (__ct_4t0.578 var=252) const ()  <695>;
    (__adr_a.579 var=253) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_4t0.578)  <697>;
    call {
        () chess_separator_scheduler ()  <116>;
    } #4 off=1
    #5 off=2
    (__ct_8t0.59 var=48) const ()  <70>;
    (__adr_uA.61 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_8t0.59)  <72>;
    (__fch_a_low.109 var=83) load (__M_DMw.4 __adr_a.56 a_low.100)  <119>;
    (__fch_a_high.114 var=86) load (__M_DMw.4 __adr_a.580 a_high.106)  <124>;
    (__M_DMw.120 var=5 uA.121 var=20) store (__fch_a_low.109 __adr_uA.61 uA.19)  <130>;
    (__M_DMw.126 var=5 uA.127 var=20) store (__fch_a_high.114 __adr_uA.582 uA.121)  <135>;
    (__adr_a.580 var=254) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_4t0.578)  <698>;
    (__ct_12t0.581 var=255) const ()  <699>;
    (__adr_uA.582 var=256) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_12t0.581)  <701>;
    call {
        () chess_separator_scheduler ()  <136>;
    } #6 off=3
    #7 off=4
    (__ct_16t0.64 var=52) const ()  <75>;
    (__adr_uiA.66 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_16t0.64)  <77>;
    (__fch_uA.132 var=98) load (__M_DMw.4 __adr_uA.61 uA.127)  <141>;
    (__fch_uA.137 var=101) load (__M_DMw.4 __adr_uA.583 uA.127)  <146>;
    (__M_DMw.140 var=5 uiA_low.141 var=30) store (__fch_uA.132 __adr_uiA.66 uiA_low.29)  <149>;
    (__M_DMw.146 var=5 uiA_high.147 var=31) store (__fch_uA.137 __adr_uiA.585 uiA_high.30)  <154>;
    (__adr_uA.583 var=257) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_12t0.581)  <702>;
    (__ct_20t0.584 var=258) const ()  <703>;
    (__adr_uiA.585 var=259) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_20t0.584)  <705>;
    call {
        () chess_separator_scheduler ()  <155>;
    } #8 off=5
    #59 off=6
    (__ct_24t0.69 var=56) const ()  <80>;
    (__adr_sign.71 var=58) __Pvoid__pl___Pvoid___sint (__rd___sp.68 __ct_24t0.69)  <82>;
    (__fch_uiA_high.154 var=110) load (__M_DMw.4 __adr_uiA.586 uiA_high.147)  <162>;
    (__M_DMw.163 var=5 sign.164 var=22) store (__tmp.721 __adr_sign.71 sign.21)  <171>;
    (__ct_31.290 var=159) const ()  <299>;
    (__adr_uiA.586 var=260) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_20t0.584)  <706>;
    (__apl_r_low.606 var=278) __uint__rs___uint___sint (__fch_uiA_high.154 __ct_31.290)  <761>;
    (__tmp.721 var=117) __sint_sne0___sint (__apl_r_low.606)  <976>;
    call {
        () chess_separator_scheduler ()  <172>;
    } #10 off=7
    #311 off=8
    (__ct_28t0.74 var=60) const ()  <85>;
    (__adr_exp.76 var=62) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_28t0.74)  <87>;
    (__fch_uiA_high.171 var=122) load (__M_DMw.4 __adr_uiA.587 uiA_high.147)  <179>;
    (__ct_2047.177 var=127) const ()  <185>;
    (__tmp.179 var=129) __sint__ad___sint___sint (__apl_r_low.647 __ct_2047.177)  <187>;
    (__M_DMw.180 var=5 exp.181 var=23) store (__tmp.179 __adr_exp.76 exp.22)  <188>;
    (__adr_uiA.587 var=261) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_20t0.584)  <707>;
    (__apl_r_low.647 var=278) __uint__rs___uint___sint (__fch_uiA_high.171 __ct_20.707)  <812>;
    (__ct_20.707 var=342) const ()  <922>;
    call {
        () chess_separator_scheduler ()  <189>;
    } #12 off=9
    #147 off=10
    (__ct_32t0.79 var=64) const ()  <90>;
    (__adr_frac.81 var=66) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_32t0.79)  <92>;
    (__fch_uiA_low.183 var=131) load (__M_DMw.4 __adr_uiA.66 uiA_low.141)  <191>;
    (__fch_uiA_high.188 var=134) load (__M_DMw.4 __adr_uiA.588 uiA_high.147)  <196>;
    (__M_DMw.194 var=5 frac_low.195 var=32) store (__fch_uiA_low.183 __adr_frac.81 frac_low.31)  <202>;
    (__M_DMw.200 var=5 frac_high.201 var=33) store (__tmp_high.666 __adr_frac.589 frac_high.32)  <207>;
    (__ct_36t0.575 var=249) const ()  <691>;
    (__adr_uiA.588 var=262) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_20t0.584)  <708>;
    (__adr_frac.589 var=263) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_36t0.575)  <709>;
    (__tmp_high.666 var=315) __uint__ad___uint___uint (__fch_uiA_high.188 __ct_1048575.712)  <835>;
    (__ct_1048575.712 var=347) const ()  <932>;
    call {
        () chess_separator_scheduler ()  <208>;
    } #14 off=11
    #15 off=12
    (__ct_44t0.84 var=68) const ()  <95>;
    (__adr_uiZ.86 var=70) __Pvoid__pl___Pvoid___sint (__rd___sp.83 __ct_44t0.84)  <97>;
    (__fch_exp.202 var=142) load (__M_DMw.4 __adr_exp.76 exp.181)  <209>;
    (__tmp.205 var=145) bool__eq___sint___sint (__fch_exp.202 __ct_2047.177)  <212>;
    (__ct_0.296 var=165) const ()  <305>;
    (__ct_56s0.394 var=213) const ()  <404>;
    (__trgt.858 var=439) const ()  <1431>;
    () void_br_bool_t13s_s2 (__tmp.205 __trgt.858)  <1432>;
    (__either.859 var=435) undefined ()  <1433>;
    if {
        {
            () if_expr (__either.859)  <246>;
        } #17
        {
            #160 off=21
            (__fch_frac_low.240 var=147) load (__M_DMw.4 __adr_frac.81 frac_low.195)  <248>;
            (__fch_frac_high.245 var=150) load (__M_DMw.4 __adr_frac.576 frac_high.201)  <253>;
            (__adr_frac.576 var=250) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_36t0.575)  <693>;
            (__tmpd.715 var=350) __uint__or___uint___uint (__fch_frac_high.245 __fch_frac_low.240)  <969>;
            (__tmp.716 var=351) bool__ne___uint___uint (__tmpd.715 __ct_0.296)  <970>;
            (__trgt.853 var=436) const ()  <1422>;
            () void_br_bool_t13s_s2 (__tmp.716 __trgt.853)  <1423>;
            (__either.854 var=435) undefined ()  <1424>;
            if {
                {
                    () if_expr (__either.854)  <291>;
                } #21
                {
                    (__ct_2143289344.283 var=154) const ()  <292>;
                    (__M_DMw.285 var=5 uiZ.286 var=25) store (__ct_2143289344.283 __adr_uiZ.86 uiZ.24)  <294>;
                } #23 off=23
                {
                    (__fch_sign.287 var=156) load (__M_DMw.4 __adr_sign.71 sign.164)  <296>;
                    (__tmp.292 var=161) __uint__ls___uint___sint (__fch_sign.287 __ct_31.290)  <301>;
                    (__ct_2139095040.293 var=162) const ()  <302>;
                    (__tmp.295 var=164) __uint__pl___uint___uint (__tmp.292 __ct_2139095040.293)  <304>;
                    (__M_DMw.299 var=5 uiZ.300 var=25) store (__tmp.295 __adr_uiZ.86 uiZ.24)  <308>;
                    (__trgt.855 var=437) const ()  <1425>;
                    () void_j_t21s_s2 (__trgt.855)  <1426>;
                } #26 off=22
                {
                    (uiZ.301 var=25) merge (uiZ.286 uiZ.300)  <310>;
                } #28
            } #20
        } #18
        {
            #331 off=13
            (__ct_48t0.89 var=72) const ()  <100>;
            (__adr_frac32.91 var=74) __Pvoid__pl___Pvoid___sint (__rd___sp.88 __ct_48t0.89)  <102>;
            (__fch_frac_low.303 var=169) load (__M_DMw.4 __adr_frac.81 frac_low.195)  <312>;
            (__fch_frac_high.308 var=172) load (__M_DMw.4 __adr_frac.577 frac_high.201)  <317>;
            (__ct_22.310 var=173) const ()  <319>;
            (__M_DMw.314 var=5 frac32.315 var=26) store (__tmp_low.785 __adr_frac32.91 frac32.25)  <323>;
            (__adr_frac.577 var=251) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_36t0.575)  <694>;
            (__apl_carries.733 var=272) __uint__ls___uint___sint (__fch_frac_high.308 __ct_10.801)  <993>;
            (__tmp.734 var=277) __uint__rs___uint___sint (__fch_frac_low.303 __ct_22.310)  <994>;
            (__apl_r_low.735 var=278) __uint__or___uint___uint (__tmp.734 __apl_carries.733)  <995>;
            (__tmp_low.755 var=363) __uint__ad___uint___uint (__fch_frac_low.303 __ct_4194303.802)  <1019>;
            (__tmp_low.785 var=382) __uint__or___uint___uint (__apl_r_low.735 __tmp.817)  <1057>;
            (__ct_10.801 var=393) const ()  <1109>;
            (__ct_4194303.802 var=394) const ()  <1111>;
            (__tmp.817 var=401) __sint_sne0___sint (__tmp_low.755)  <1194>;
            call {
                () chess_separator_scheduler ()  <324>;
            } #31 off=14
            #32 off=15
            (__fch_exp.316 var=177) load (__M_DMw.4 __adr_exp.76 exp.181)  <325>;
            (__fch_frac32.318 var=179) load (__M_DMw.4 __adr_frac32.91 frac32.315)  <327>;
            (__tmp.319 var=180) __uint__or___uint___uint (__fch_exp.316 __fch_frac32.318)  <328>;
            (__tmp.850 var=183) bool__ne___uint___uint (__tmp.319 __ct_0.296)  <1389>;
            (__trgt.856 var=438) const ()  <1427>;
            () void_br_bool_t13s_s2 (__tmp.850 __trgt.856)  <1428>;
            (__either.857 var=435) undefined ()  <1429>;
            if {
                {
                    () if_expr (__either.857)  <366>;
                    () chess_rear_then ()  <1430>;
                } #34
                {
                    #39 off=17
                    (__fch_sign.371 var=197) load (__M_DMw.4 __adr_sign.71 sign.164)  <381>;
                    (__fch_exp.375 var=200) load (__M_DMw.4 __adr_exp.76 exp.181)  <385>;
                    (__tmp.378 var=203) __sint__pl___sint___sint (__fch_exp.375 __ct_m897.563)  <388>;
                    (__fch_frac32.380 var=204) load (__M_DMw.4 __adr_frac32.91 frac32.315)  <390>;
                    (__ct_1073741824.381 var=205) const ()  <391>;
                    (__tmp.383 var=207) __uint__or___uint___uint (__fch_frac32.380 __ct_1073741824.381)  <393>;
                    (softfloat_roundPackToF32.387 var=210) const ()  <397>;
                    (__link.388 var=211) w32_jal_t21s_s2 (softfloat_roundPackToF32.387)  <398>;
                    (__ct_m897.563 var=242) const ()  <678>;
                    call {
                        (__tmp.374 var=199 stl=X off=11) assign (__fch_sign.371)  <384>;
                        (__tmp.379 var=203 stl=X off=12) assign (__tmp.378)  <389>;
                        (__tmp.384 var=207 stl=X off=13) assign (__tmp.383)  <394>;
                        (__link.389 var=211 stl=X off=1) assign (__link.388)  <399>;
                        (__tmp.390 var=212 stl=X off=10) Fsoftfloat_roundPackToF32 (__link.389 __tmp.374 __tmp.379 __tmp.384)  <400>;
                        (__tmp.391 var=212) deassign (__tmp.390)  <401>;
                    } #40 off=18
                    #42 off=19 nxt=-2
                    (__rd___sp.393 var=34) rd_res_reg (__R_SP.11 __sp.52)  <403>;
                    (__tmp.396 var=215) __Pvoid__pl___Pvoid___sint (__rd___sp.393 __ct_56s0.394)  <406>;
                    (__R_SP.397 var=12 __sp.398 var=18) wr_res_reg (__tmp.396 __sp.52)  <407>;
                    () void___rts_jr_w32 (__la.35)  <408>;
                    (__rt.399 var=36 stl=X off=10) assign (__tmp.391)  <409>;
                    () out (__rt.399)  <410>;
                    () sink (__sp.398)  <418>;
                    () sink (uA.127)  <420>;
                    () sink (sign.164)  <422>;
                    () sink (exp.181)  <423>;
                    () sink (frac32.315)  <426>;
                    () sink (a_low.100)  <428>;
                    () sink (a_high.106)  <429>;
                    () sink (uiA_low.141)  <430>;
                    () sink (uiA_high.147)  <431>;
                    () sink (frac_low.195)  <432>;
                    () sink (frac_high.201)  <433>;
                    (uiZ.414 var=25) never ()  <446>;
                } #38
                {
                    (__fch_sign.357 var=185) load (__M_DMw.4 __adr_sign.71 sign.164)  <367>;
                    (__tmp.362 var=190) __uint__ls___uint___sint (__fch_sign.357 __ct_31.290)  <372>;
                    (__M_DMw.369 var=5 uiZ.370 var=25) store (__tmp.362 __adr_uiZ.86 uiZ.24)  <379>;
                } #36 off=16
                {
                    (uiZ.447 var=25) merge (uiZ.414 uiZ.370)  <479>;
                } #43
            } #33
            #337 off=20
            (__trgt.860 var=440) const ()  <1434>;
            () void_j_t21s_s2 (__trgt.860)  <1435>;
        } #29
        {
            (uiZ.480 var=25) merge (uiZ.301 uiZ.447)  <512>;
            (frac32.481 var=26) merge (frac32.25 frac32.315)  <513>;
        } #44
    } #16
    #45 off=25
    (__ct_52t0.94 var=76) const ()  <105>;
    (__adr_uZ.96 var=78) __Pvoid__pl___Pvoid___sint (__rd___sp.93 __ct_52t0.94)  <107>;
    (__fch_uiZ.501 var=216) load (__M_DMw.4 __adr_uiZ.86 uiZ.480)  <533>;
    (__M_DMw.505 var=5 uZ.506 var=27) store (__fch_uiZ.501 __adr_uZ.96 uZ.26)  <537>;
    call {
        () chess_separator_scheduler ()  <538>;
    } #46 off=26
    #49 off=27 nxt=-2
    (__rt.510 var=36) load (__M_DMw.4 __adr_uZ.96 uZ.506)  <542>;
    (__rd___sp.511 var=34) rd_res_reg (__R_SP.11 __sp.52)  <543>;
    (__tmp.514 var=226) __Pvoid__pl___Pvoid___sint (__rd___sp.511 __ct_56s0.394)  <546>;
    (__R_SP.515 var=12 __sp.516 var=18) wr_res_reg (__tmp.514 __sp.52)  <547>;
    () void___rts_jr_w32 (__la.35)  <548>;
    (__rt.517 var=36 stl=X off=10) assign (__rt.510)  <549>;
    () out (__rt.517)  <550>;
    () sink (__sp.516)  <558>;
    () sink (uA.127)  <560>;
    () sink (sign.164)  <562>;
    () sink (exp.181)  <563>;
    () sink (uiZ.480)  <565>;
    () sink (frac32.481)  <566>;
    () sink (uZ.506)  <567>;
    () sink (a_low.100)  <568>;
    () sink (a_high.106)  <569>;
    () sink (uiA_low.141)  <570>;
    () sink (uiA_high.147)  <571>;
    () sink (frac_low.195)  <572>;
    () sink (frac_high.201)  <573>;
} #0
0 : 'SoftFloat-3e/source/f64_to_f32.c';
----------
0 : (0,44:0,0);
3 : (0,44:22,0);
4 : (0,44:22,0);
5 : (0,57:9,11);
6 : (0,57:9,11);
7 : (0,58:8,12);
8 : (0,58:8,12);
10 : (0,59:9,13);
12 : (0,60:9,14);
14 : (0,61:9,15);
15 : (0,64:13,15);
16 : (0,64:4,15);
18 : (0,64:24,16);
20 : (0,65:8,16);
23 : (0,67:16,19);
26 : (0,69:16,22);
29 : (0,83:1,28);
31 : (0,75:11,30);
32 : (0,76:9,30);
33 : (0,76:4,30);
36 : (0,77:12,32);
38 : (0,83:1,35);
39 : (0,82:63,36);
40 : (0,82:11,36);
42 : (0,82:4,36);
45 : (0,84:10,46);
46 : (0,84:10,46);
49 : (0,85:4,46);
59 : (0,59:4,12);
147 : (0,61:4,14);
160 : (0,65:8,16);
311 : (0,60:4,13);
331 : (0,75:4,29);
----------
58 : (0,44:10,0);
59 : (0,44:10,0);
61 : (0,44:10,0);
62 : (0,44:10,0);
64 : (0,44:32,0);
65 : (0,44:32,0);
67 : (0,44:32,0);
69 : (0,46:19,0);
70 : (0,46:19,0);
72 : (0,46:19,0);
74 : (0,47:18,0);
75 : (0,47:18,0);
77 : (0,47:18,0);
79 : (0,48:9,0);
80 : (0,48:9,0);
82 : (0,48:9,0);
84 : (0,49:17,0);
85 : (0,49:17,0);
87 : (0,49:17,0);
89 : (0,50:18,0);
90 : (0,50:18,0);
92 : (0,50:18,0);
94 : (0,52:18,0);
95 : (0,52:18,0);
97 : (0,52:18,0);
99 : (0,52:23,0);
100 : (0,52:23,0);
102 : (0,52:23,0);
104 : (0,53:19,0);
105 : (0,53:19,0);
107 : (0,53:19,0);
110 : (0,44:22,0);
115 : (0,44:22,0);
116 : (0,44:22,0);
119 : (0,57:11,10);
124 : (0,57:11,10);
130 : (0,57:6,10);
135 : (0,57:6,10);
136 : (0,57:9,11);
141 : (0,58:12,11);
146 : (0,58:12,11);
149 : (0,58:4,11);
154 : (0,58:4,11);
155 : (0,58:8,12);
162 : (0,59:32,12);
171 : (0,59:4,12);
172 : (0,59:9,13);
179 : (0,60:29,13);
185 : (0,60:39,0);
187 : (0,60:39,13);
188 : (0,60:4,13);
189 : (0,60:9,14);
191 : (0,61:13,14);
196 : (0,61:13,14);
202 : (0,61:4,14);
207 : (0,61:4,14);
208 : (0,61:9,15);
209 : (0,64:9,15);
212 : (0,64:13,15);
246 : (0,64:4,15);
248 : (0,65:13,16);
253 : (0,65:13,16);
291 : (0,65:8,16);
292 : (0,67:19,0);
294 : (0,67:12,18);
296 : (0,69:32,21);
299 : (0,69:39,0);
301 : (0,69:37,21);
302 : (0,69:63,0);
304 : (0,69:43,21);
305 : (0,69:69,0);
308 : (0,69:12,21);
310 : (0,65:8,24);
312 : (0,75:45,29);
317 : (0,75:45,29);
319 : (0,75:49,0);
323 : (0,75:4,29);
324 : (0,75:11,30);
325 : (0,76:12,30);
327 : (0,76:18,30);
328 : (0,76:16,30);
366 : (0,76:4,30);
367 : (0,77:28,31);
372 : (0,77:33,31);
379 : (0,77:8,31);
381 : (0,82:37,36);
384 : (0,82:37,0);
385 : (0,82:43,36);
388 : (0,82:47,36);
389 : (0,82:47,0);
390 : (0,82:56,36);
391 : (0,82:63,0);
393 : (0,82:63,36);
394 : (0,82:63,0);
398 : (0,82:11,36);
399 : (0,82:11,0);
400 : (0,82:11,36);
403 : (0,82:4,0);
404 : (0,82:4,0);
406 : (0,82:4,0);
407 : (0,82:4,36);
408 : (0,82:4,36);
409 : (0,82:35,0);
479 : (0,76:4,40);
512 : (0,64:4,43);
513 : (0,64:4,43);
533 : (0,84:12,45);
537 : (0,84:6,45);
538 : (0,84:10,46);
542 : (0,85:13,46);
543 : (0,85:4,0);
546 : (0,85:4,0);
547 : (0,85:4,46);
548 : (0,85:4,46);
549 : (0,85:13,0);
678 : (0,82:47,0);
691 : (0,50:18,0);
695 : (0,44:32,0);
699 : (0,46:19,0);
703 : (0,47:18,0);
761 : (0,59:36,12);
812 : (0,60:33,13);
835 : (0,61:18,14);
922 : (0,60:33,0);
932 : (0,61:20,0);
969 : (0,65:8,16);
970 : (0,65:8,16);
976 : (0,59:4,12);
993 : (0,75:13,29);
994 : (0,75:13,29);
995 : (0,75:13,29);
1019 : (0,75:13,29);
1057 : (0,75:13,29);
1109 : (0,75:13,0);
1111 : (0,75:13,0);
1194 : (0,75:13,29);
1389 : (0,76:9,30);
1423 : (0,65:8,16);
1428 : (0,76:4,30);
1432 : (0,64:4,15);

