
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 12:20:34 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/i64_to_f32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t i64_to_f32(int64_t)
Fi64_to_f32 : user_defined, called {
    fnm : "i64_to_f32" 'float32_t i64_to_f32(long long)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=32 );
    llv : 0 0 0 0 0 ;
}
****
!!  uint_fast8_t softfloat_countLeadingZeros64(uint64_t)
Fsoftfloat_countLeadingZeros64 : user_defined, called {
    fnm : "softfloat_countLeadingZeros64" 'uint_fast8_t softfloat_countLeadingZeros64(uint64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : i64_to_f32 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=int64_t_DMb
   20 : sign typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   21 : absA typ=w08 val=12t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   22 : shiftDist typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast8_t_DMb
   23 : u typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   24 : sig typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   25 : a_low typ=w08 bnd=B stl=DMb
   26 : a_high typ=w08 bnd=B stl=DMb
   27 : absA_low typ=w08 bnd=B stl=DMb
   28 : absA_high typ=w08 bnd=B stl=DMb
   29 : __rd___sp typ=w32 bnd=m
   30 : __la typ=w32 bnd=p tref=w32__
   31 : __rt typ=w32 bnd=p tref=float32_t___1
   33 : __arg_a_low typ=w32 bnd=m tref=__uint__
   34 : __arg_a_high typ=w32 bnd=m tref=__uint__
   35 : __ct_m32S0 typ=w32 val=-32S0 bnd=m
   37 : __tmp typ=w32 bnd=m
   39 : __ct_0t0 typ=w32 val=0t0 bnd=m
   41 : __adr_a typ=w32 bnd=m adro=19
   43 : __ct_8t0 typ=w32 val=8t0 bnd=m
   45 : __adr_sign typ=w32 bnd=m adro=20
   47 : __ct_12t0 typ=w32 val=12t0 bnd=m
   49 : __adr_absA typ=w32 bnd=m adro=21
   51 : __ct_20t0 typ=w32 val=20t0 bnd=m
   53 : __adr_shiftDist typ=w32 bnd=m adro=22
   55 : __ct_24t0 typ=w32 val=24t0 bnd=m
   57 : __adr_u typ=w32 bnd=m adro=23
   59 : __ct_28t0 typ=w32 val=28t0 bnd=m
   61 : __adr_sig typ=w32 bnd=m adro=24
   68 : __fch_a_high typ=w32 bnd=m
   72 : __tmp typ=w32 bnd=m
   73 : __fch_sign typ=w32 bnd=m
   74 : __fch_sign typ=bool bnd=m
   78 : __fch_a_low typ=w32 bnd=m
   81 : __fch_a_high typ=w32 bnd=m
   85 : __fch_a_low typ=w32 bnd=m
   88 : __fch_a_high typ=w32 bnd=m
   91 : __tmp_low typ=w32 bnd=m tref=__uint__
   92 : __tmp_high typ=w32 bnd=m tref=__uint__
   96 : __fch_absA_low typ=w32 bnd=m
   99 : __fch_absA_high typ=w32 bnd=m
  100 : __record_low typ=w32 bnd=m tref=__uint__
  101 : __record_high typ=w32 bnd=m tref=__uint__
  104 : softfloat_countLeadingZeros64 typ=t21s_s2 val=0r bnd=m
  105 : __link typ=w32 bnd=m
  106 : __tmp typ=w32 bnd=m
  109 : __tmp typ=w32 bnd=m
  111 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  113 : __fch_shiftDist typ=w32 bnd=m
  114 : __tmp typ=bool bnd=m
  116 : __fch_a_low typ=w32 bnd=m
  119 : __fch_a_high typ=w32 bnd=m
  123 : __fch_sign typ=w32 bnd=m
  126 : __ct_31 typ=w32 val=31f bnd=m
  128 : __tmp typ=w32 bnd=m
  129 : __ct_149 typ=w32 val=149f bnd=m
  131 : __fch_shiftDist typ=w32 bnd=m
  132 : __tmp typ=w32 bnd=m
  134 : __ct_23 typ=w32 val=23f bnd=m
  136 : __tmp typ=w32 bnd=m
  137 : __tmp typ=w32 bnd=m
  139 : __fch_absA_low typ=w32 bnd=m
  144 : __fch_shiftDist typ=w32 bnd=m
  145 : __tmp typ=w32 bnd=m
  146 : __tmp typ=w32 bnd=m
  149 : __tmp typ=w32 bnd=m
  157 : __fch_shiftDist typ=w32 bnd=m
  158 : __ct_7 typ=w32 val=7f bnd=m
  160 : __tmp typ=w32 bnd=m
  161 : __fch_shiftDist typ=w32 bnd=m
  164 : __tmp typ=bool bnd=m
  166 : __fch_absA_low typ=w32 bnd=m
  169 : __fch_absA_high typ=w32 bnd=m
  172 : __fch_shiftDist typ=w32 bnd=m
  173 : __tmp typ=w32 bnd=m
  177 : __fch_absA_low typ=w32 bnd=m
  182 : __fch_shiftDist typ=w32 bnd=m
  183 : __tmp typ=w32 bnd=m
  187 : __fch_sign typ=w32 bnd=m
  189 : __tmp typ=w32 bnd=m
  190 : __ct_156 typ=w32 val=156f bnd=m
  192 : __fch_shiftDist typ=w32 bnd=m
  193 : __tmp typ=w32 bnd=m
  194 : __fch_sig typ=w32 bnd=m
  197 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
  198 : __link typ=w32 bnd=m
  199 : __tmp typ=w32 bnd=m
  200 : __ct_32s0 typ=w32 val=32s0 bnd=m
  202 : __tmp typ=w32 bnd=m
  224 : __ct_4294967256 typ=w32 val=-40f bnd=m
  233 : __ct_4t0 typ=w32 val=4t0 bnd=m
  234 : __adr_a typ=w32 bnd=m adro=19
  235 : __adr_a typ=w32 bnd=m adro=19
  236 : __ct_16t0 typ=w32 val=16t0 bnd=m
  238 : __adr_a typ=w32 bnd=m adro=19
  239 : __adr_absA typ=w32 bnd=m adro=21
  241 : __adr_a typ=w32 bnd=m adro=19
  242 : __adr_a typ=w32 bnd=m adro=19
  243 : __adr_absA typ=w32 bnd=m adro=21
  244 : __adr_absA typ=w32 bnd=m adro=21
  270 : __apl_r_low typ=w32 bnd=m tref=__uint__
  271 : __apl_r_high typ=w32 bnd=m tref=__uint__
  312 : __tmpd typ=w32 bnd=m
  313 : __tmp typ=bool bnd=m
  334 : __rt_low typ=w32 bnd=m tref=__uint__
  339 : __apl_ff typ=w32 bnd=m tref=__sint__
  340 : __apl_carries typ=w32 bnd=m tref=__uint__
  342 : __tmp typ=bool bnd=m
  343 : __tmp typ=bool bnd=m
  344 : __tmp typ=w32 bnd=m
  345 : __tmp typ=w32 bnd=m
  346 : __apl_r_low typ=w32 bnd=m tref=__uint__
  349 : __ct_m32 typ=w32 val=-32f bnd=m
  350 : __tmp_low typ=w32 bnd=m
  356 : __rt_low typ=w32 bnd=m tref=__uint__
  357 : __rt_high typ=w32 bnd=m tref=__uint__
  361 : __apl_ff typ=w32 bnd=m tref=__sint__
  362 : __apl_carries typ=w32 bnd=m tref=__uint__
  364 : __tmp typ=bool bnd=m
  365 : __tmp typ=bool bnd=m
  366 : __tmp typ=w32 bnd=m
  367 : __apl_r_low typ=w32 bnd=m tref=__uint__
  369 : __apl_r_high typ=w32 bnd=m tref=__uint__
  372 : __tmp_low typ=w32 bnd=m
  374 : __tmp_high typ=w32 bnd=m
  387 : __apl_r_low typ=w32 bnd=m tref=__uint__
  388 : __apl_r_high typ=w32 bnd=m tref=__uint__
  407 : __tmp_low typ=w32 bnd=m
  409 : __tmp_high typ=w32 bnd=m
  426 : __tmp_low typ=w32 bnd=m
  438 : __ct_1 typ=w32 val=1f bnd=m
  439 : __ct_4294967295 typ=w32 val=-1f bnd=m
  442 : __tmpd typ=w32 bnd=m
  450 : __tmp typ=w32 bnd=m
  493 : __tmp_low typ=w32 bnd=m
  499 : __tmp typ=w32 bnd=m
  500 : __tmp typ=w32 bnd=m
  545 : __either typ=bool bnd=m
  546 : __trgt typ=t13s_s2 val=0j bnd=m
  547 : __trgt typ=t21s_s2 val=0j bnd=m
  548 : __trgt typ=t13s_s2 val=0j bnd=m
  549 : __trgt typ=t21s_s2 val=0j bnd=m
  550 : __trgt typ=t13s_s2 val=0j bnd=m
  551 : __trgt typ=t21s_s2 val=0j bnd=m
  552 : __trgt typ=t13s_s2 val=0j bnd=m
  553 : __trgt typ=t21s_s2 val=0j bnd=m
  554 : __trgt typ=t13s_s2 val=0j bnd=m
  555 : __trgt typ=t21s_s2 val=0j bnd=m
  556 : __trgt typ=t13s_s2 val=0j bnd=m
  557 : __trgt typ=t21s_s2 val=0j bnd=m
  558 : __trgt typ=t13s_s2 val=0j bnd=m
  559 : __trgt typ=t21s_s2 val=0j bnd=m
  560 : __trgt typ=t13s_s2 val=0j bnd=m
  561 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fi64_to_f32 {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (sign.19 var=20) source ()  <30>;
    (shiftDist.21 var=22) source ()  <32>;
    (u.22 var=23) source ()  <33>;
    (sig.23 var=24) source ()  <34>;
    (a_low.24 var=25) source ()  <35>;
    (a_high.25 var=26) source ()  <36>;
    (absA_low.26 var=27) source ()  <37>;
    (absA_high.27 var=28) source ()  <38>;
    (__la.29 var=30 stl=X off=1) inp ()  <40>;
    (__la.30 var=30) deassign (__la.29)  <41>;
    (__arg_a_low.34 var=33 stl=X off=11) inp ()  <45>;
    (__arg_a_low.35 var=33) deassign (__arg_a_low.34)  <46>;
    (__arg_a_high.38 var=34 stl=X off=12) inp ()  <49>;
    (__arg_a_high.39 var=34) deassign (__arg_a_high.38)  <50>;
    (__rd___sp.42 var=29) rd_res_reg (__R_SP.11 __sp.17)  <53>;
    (__ct_m32S0.43 var=35) const ()  <54>;
    (__tmp.45 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.42 __ct_m32S0.43)  <56>;
    (__R_SP.46 var=12 __sp.47 var=18) wr_res_reg (__tmp.45 __sp.17)  <57>;
    (__rd___sp.48 var=29) rd_res_reg (__R_SP.11 __sp.47)  <59>;
    (__ct_0t0.49 var=39) const ()  <60>;
    (__adr_a.51 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_0t0.49)  <62>;
    (__rd___sp.53 var=29) rd_res_reg (__R_SP.11 __sp.47)  <64>;
    (__rd___sp.58 var=29) rd_res_reg (__R_SP.11 __sp.47)  <69>;
    (__rd___sp.63 var=29) rd_res_reg (__R_SP.11 __sp.47)  <74>;
    (__rd___sp.68 var=29) rd_res_reg (__R_SP.11 __sp.47)  <79>;
    (__rd___sp.73 var=29) rd_res_reg (__R_SP.11 __sp.47)  <84>;
    (__M_DMw.79 var=5 a_low.80 var=25) store (__arg_a_low.35 __adr_a.51 a_low.24)  <90>;
    (__M_DMw.85 var=5 a_high.86 var=26) store (__arg_a_high.39 __adr_a.449 a_high.25)  <95>;
    (__ct_4t0.441 var=233) const ()  <528>;
    (__adr_a.449 var=241) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_4t0.441)  <538>;
    call {
        () chess_separator_scheduler ()  <96>;
    } #4 off=1
    #733 off=2
    (__ct_8t0.54 var=43) const ()  <65>;
    (__adr_sign.56 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_8t0.54)  <67>;
    (__fch_a_high.93 var=68) load (__M_DMw.4 __adr_a.450 a_high.86)  <103>;
    (__M_DMw.99 var=5 sign.100 var=20) store (__tmp.532 __adr_sign.56 sign.19)  <109>;
    (__ct_0.185 var=111) const ()  <195>;
    (__adr_a.450 var=242) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_4t0.441)  <539>;
    (__tmp.532 var=72) __sint_slt___sint___sint (__fch_a_high.93 __ct_0.185)  <717>;
    call {
        () chess_separator_scheduler ()  <110>;
    } #6 off=3
    #72 off=4
    (__fch_sign.101 var=73) load (__M_DMw.4 __adr_sign.56 sign.100)  <111>;
    (__fch_sign.420 var=74) bool__ne___sint___sint (__fch_sign.101 __ct_0.185)  <480>;
    (__trgt.1005 var=546) const ()  <1597>;
    () void_br_bool_t13s_s2 (__fch_sign.420 __trgt.1005)  <1598>;
    (__either.1006 var=545) undefined ()  <1599>;
    if {
        {
            () if_expr (__either.1006)  <138>;
        } #9
        {
            (__fch_a_low.131 var=78) load (__M_DMw.4 __adr_a.51 a_low.80)  <142>;
            (__fch_a_high.136 var=81) load (__M_DMw.4 __adr_a.442 a_high.86)  <147>;
            (__adr_a.442 var=234) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_4t0.441)  <530>;
            (__apl_r_low.479 var=270) __uint_sub___uint___uint (__ct_0.185 __fch_a_low.131)  <600>;
            (__apl_r_high.480 var=271) __uint_sub___uint___uint (__ct_0.185 __fch_a_high.136)  <601>;
            (__apl_r_high.483 var=271) __uint__mi___uint___uint (__apl_r_high.480 __tmp.872)  <604>;
            (__tmp.872 var=499) __sint_sne0___sint (__fch_a_low.131)  <1333>;
        } #518 off=6
        {
            (__fch_a_low.141 var=85) load (__M_DMw.4 __adr_a.51 a_low.80)  <152>;
            (__fch_a_high.146 var=88) load (__M_DMw.4 __adr_a.443 a_high.86)  <157>;
            (__adr_a.443 var=235) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_4t0.441)  <531>;
            (__trgt.1007 var=547) const ()  <1600>;
            () void_j_t21s_s2 (__trgt.1007)  <1601>;
        } #11 off=5
        {
            (__tmp_low.426 var=91) merge (__apl_r_low.479 __fch_a_low.141)  <512>;
            (__tmp_high.429 var=92) merge (__apl_r_high.483 __fch_a_high.146)  <515>;
        } #12
    } #8
    #13 off=7
    (__ct_12t0.59 var=47) const ()  <70>;
    (__adr_absA.61 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_12t0.59)  <72>;
    (__M_DMw.151 var=5 absA_low.152 var=27) store (__tmp_low.426 __adr_absA.61 absA_low.26)  <162>;
    (__M_DMw.157 var=5 absA_high.158 var=28) store (__tmp_high.429 __adr_absA.451 absA_high.27)  <167>;
    (__ct_16t0.444 var=236) const ()  <532>;
    (__adr_absA.451 var=243) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_16t0.444)  <540>;
    call {
        () chess_separator_scheduler ()  <168>;
    } #14 off=8
    #15 off=9
    (__fch_absA_low.160 var=96) load (__M_DMw.4 __adr_absA.61 absA_low.152)  <170>;
    (__fch_absA_high.165 var=99) load (__M_DMw.4 __adr_absA.452 absA_high.158)  <175>;
    (softfloat_countLeadingZeros64.173 var=104) const ()  <183>;
    (__link.174 var=105) w32_jal_t21s_s2 (softfloat_countLeadingZeros64.173)  <184>;
    (__adr_absA.452 var=244) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_16t0.444)  <541>;
    call {
        (__record_low.168 var=100 stl=X off=11) assign (__fch_absA_low.160)  <178>;
        (__record_high.170 var=101 stl=X off=12) assign (__fch_absA_high.165)  <180>;
        (__link.175 var=105 stl=X off=1) assign (__link.174)  <185>;
        (__tmp.176 var=106 stl=X off=10) Fsoftfloat_countLeadingZeros64 (__link.175 __record_low.168 __record_high.170)  <186>;
        (__tmp.177 var=106) deassign (__tmp.176)  <187>;
    } #16 off=10
    #17 off=11
    (__ct_20t0.64 var=51) const ()  <75>;
    (__adr_shiftDist.66 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_20t0.64)  <77>;
    (__tmp.181 var=109) __uint__pl___uint___uint (__tmp.177 __ct_4294967256.430)  <191>;
    (__M_DMw.183 var=5 shiftDist.184 var=22) store (__tmp.181 __adr_shiftDist.66 shiftDist.21)  <193>;
    (__ct_4294967256.430 var=224) const ()  <516>;
    call {
        () chess_separator_scheduler ()  <194>;
    } #18 off=12
    #19 off=13
    (__fch_shiftDist.187 var=113) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.184)  <197>;
    (__tmp.188 var=114) bool__ge___sint___sint (__fch_shiftDist.187 __ct_0.185)  <198>;
    (__trgt.1026 var=560) const ()  <1632>;
    () void_br_bool_t13s_s2 (__tmp.188 __trgt.1026)  <1633>;
    (__either.1027 var=545) undefined ()  <1634>;
    if {
        {
            () if_expr (__either.1027)  <224>;
        } #21
        {
            #125 off=36
            (__fch_a_low.215 var=116) load (__M_DMw.4 __adr_a.51 a_low.80)  <226>;
            (__fch_a_high.220 var=119) load (__M_DMw.4 __adr_a.446 a_high.86)  <231>;
            (__adr_a.446 var=238) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_4t0.441)  <535>;
            (__tmpd.527 var=312) __uint__or___uint___uint (__fch_a_high.220 __fch_a_low.215)  <711>;
            (__tmp.973 var=313) bool__eq___uint___uint (__tmpd.527 __ct_0.185)  <1528>;
            (__trgt.1008 var=548) const ()  <1602>;
            () void_br_bool_t13s_s2 (__tmp.973 __trgt.1008)  <1603>;
            (__either.1009 var=545) undefined ()  <1604>;
            if {
                {
                    () if_expr (__either.1009)  <261>;
                } #25
                {
                } #27 off=38
                {
                    (__fch_sign.250 var=123) load (__M_DMw.4 __adr_sign.56 sign.100)  <262>;
                    (__ct_31.253 var=126) const ()  <265>;
                    (__tmp.255 var=128) __uint__ls___uint___sint (__fch_sign.250 __ct_31.253)  <267>;
                    (__ct_149.256 var=129) const ()  <268>;
                    (__fch_shiftDist.258 var=131) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.184)  <270>;
                    (__tmp.259 var=132) __sint__mi___sint___sint (__ct_149.256 __fch_shiftDist.258)  <271>;
                    (__ct_23.261 var=134) const ()  <273>;
                    (__tmp.263 var=136) __uint__ls___uint___sint (__tmp.259 __ct_23.261)  <275>;
                    (__tmp.264 var=137) __uint__pl___uint___uint (__tmp.255 __tmp.263)  <276>;
                    (__fch_absA_low.266 var=139) load (__M_DMw.4 __adr_absA.61 absA_low.152)  <278>;
                    (__fch_shiftDist.274 var=144) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.184)  <286>;
                    (__tmp.275 var=145) __uint__ls___uint___sint (__fch_absA_low.266 __fch_shiftDist.274)  <287>;
                    (__tmp.276 var=146) __uint__pl___uint___uint (__tmp.264 __tmp.275)  <288>;
                    (__trgt.1010 var=549) const ()  <1605>;
                    () void_j_t21s_s2 (__trgt.1010)  <1606>;
                } #487 off=37
                {
                    (__tmp.279 var=149) merge (__ct_0.185 __tmp.276)  <291>;
                } #28
            } #24
            #29 off=39
            (__ct_24t0.69 var=55) const ()  <80>;
            (__adr_u.71 var=57) __Pvoid__pl___Pvoid___sint (__rd___sp.68 __ct_24t0.69)  <82>;
            (__M_DMw.283 var=5 u.284 var=23) store (__tmp.279 __adr_u.71 u.22)  <295>;
            call {
                () chess_separator_scheduler ()  <296>;
            } #30 off=40
            #31 off=41
            (__rt.288 var=31) load (__M_DMw.4 __adr_u.71 u.284)  <300>;
        } #22
        {
            #34 off=14
            (__fch_shiftDist.289 var=157) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.184)  <302>;
            (__ct_7.290 var=158) const ()  <303>;
            (__tmp.292 var=160) __sint__pl___sint___sint (__fch_shiftDist.289 __ct_7.290)  <305>;
            (__M_DMw.293 var=5 shiftDist.294 var=22) store (__tmp.292 __adr_shiftDist.66 shiftDist.184)  <306>;
            call {
                () chess_separator_scheduler ()  <307>;
            } #35 off=15
            #36 off=16
            (__fch_shiftDist.295 var=161) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.294)  <308>;
            (__tmp.298 var=164) bool__lt___sint___sint (__fch_shiftDist.295 __ct_0.185)  <311>;
            (__trgt.1023 var=558) const ()  <1627>;
            () void_br_bool_t13s_s2 (__tmp.298 __trgt.1023)  <1628>;
            (__either.1024 var=545) undefined ()  <1629>;
            if {
                {
                    () if_expr (__either.1024)  <337>;
                } #38
                {
                    #195 off=18
                    (__fch_absA_low.325 var=166) load (__M_DMw.4 __adr_absA.61 absA_low.152)  <339>;
                    (__fch_absA_high.330 var=169) load (__M_DMw.4 __adr_absA.447 absA_high.158)  <344>;
                    (__fch_shiftDist.334 var=172) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.294)  <348>;
                    (__tmp.335 var=173) __sint__mi___sint___sint (__ct_0.185 __fch_shiftDist.334)  <349>;
                    (__adr_absA.447 var=239) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_16t0.444)  <536>;
                    (__tmp.554 var=342) bool__eq___sint___sint (__tmp.335 __ct_0.185)  <749>;
                    (__ct_m32.555 var=349) const ()  <750>;
                    (__trgt.1014 var=552) const ()  <1612>;
                    () void_br_bool_t13s_s2 (__tmp.554 __trgt.1014)  <1613>;
                    (__either.1015 var=545) undefined ()  <1614>;
                    if {
                        {
                            () if_expr (__either.1015)  <752>;
                        } #197
                        {
                        } #198 off=23
                        {
                            #200 off=19
                            (__apl_ff.557 var=339) __sint__pl___sint___sint (__tmp.335 __ct_m32.555)  <753>;
                            (__tmp.558 var=343) bool__lt___sint___sint (__apl_ff.557 __ct_0.185)  <754>;
                            (__trgt.1011 var=550) const ()  <1607>;
                            () void_br_bool_t13s_s2 (__tmp.558 __trgt.1011)  <1608>;
                            (__either.1012 var=545) undefined ()  <1609>;
                            if {
                                {
                                    () if_expr (__either.1012)  <755>;
                                } #202
                                {
                                    (__tmp.559 var=344) __sint__mi___sint___sint (__ct_0.185 __apl_ff.557)  <756>;
                                    (__apl_carries.560 var=340) __uint__ls___uint___sint (__fch_absA_high.330 __tmp.559)  <757>;
                                    (__tmp.561 var=345) __uint__rs___uint___sint (__fch_absA_low.325 __tmp.335)  <758>;
                                    (__apl_r_low.562 var=346) __uint__or___uint___uint (__tmp.561 __apl_carries.560)  <759>;
                                } #203 off=21
                                {
                                    (__apl_r_low.564 var=346) __uint__rs___uint___sint (__fch_absA_high.330 __apl_ff.557)  <761>;
                                    (__trgt.1013 var=551) const ()  <1610>;
                                    () void_j_t21s_s2 (__trgt.1013)  <1611>;
                                } #204 off=20
                                {
                                    (__rt_low.565 var=334) merge (__apl_r_low.562 __apl_r_low.564)  <762>;
                                } #205
                            } #201
                            #785 off=22
                            (__trgt.1016 var=553) const ()  <1615>;
                            () void_j_t21s_s2 (__trgt.1016)  <1616>;
                        } #199
                        {
                            (__tmp_low.567 var=350) merge (__fch_absA_low.325 __rt_low.565)  <764>;
                        } #206
                    } #196
                    #217 off=24
                    (__tmp.582 var=364) bool__eq___sint___sint (__tmp.335 __ct_0.185)  <783>;
                    (__ct_1.702 var=438) const ()  <959>;
                    (__trgt.1020 var=556) const ()  <1622>;
                    () void_br_bool_t13s_s2 (__tmp.582 __trgt.1020)  <1623>;
                    (__either.1021 var=545) undefined ()  <1624>;
                    if {
                        {
                            () if_expr (__either.1021)  <786>;
                        } #219
                        {
                        } #220 off=29
                        {
                            #222 off=25
                            (__apl_ff.585 var=361) __sint__pl___sint___sint (__tmp.335 __ct_m32.555)  <787>;
                            (__tmp.586 var=365) bool__lt___sint___sint (__apl_ff.585 __ct_0.185)  <788>;
                            (__trgt.1017 var=554) const ()  <1617>;
                            () void_br_bool_t13s_s2 (__tmp.586 __trgt.1017)  <1618>;
                            (__either.1018 var=545) undefined ()  <1619>;
                            if {
                                {
                                    () if_expr (__either.1018)  <789>;
                                } #224
                                {
                                    (__tmp.587 var=366) __sint__mi___sint___sint (__ct_0.185 __apl_ff.585)  <790>;
                                    (__apl_carries.588 var=362) __uint__rs___uint___sint (__ct_1.702 __tmp.587)  <791>;
                                    (__apl_r_low.589 var=367) __uint__ls___uint___sint (__ct_1.702 __tmp.335)  <792>;
                                } #225 off=27
                                {
                                    (__apl_r_high.592 var=369) __uint__ls___uint___sint (__ct_1.702 __apl_ff.585)  <795>;
                                    (__trgt.1019 var=555) const ()  <1620>;
                                    () void_j_t21s_s2 (__trgt.1019)  <1621>;
                                } #226 off=26
                                {
                                    (__rt_low.593 var=356) merge (__apl_r_low.589 __ct_0.185)  <796>;
                                    (__rt_high.594 var=357) merge (__apl_carries.588 __apl_r_high.592)  <797>;
                                } #227
                            } #223
                            #786 off=28
                            (__trgt.1022 var=557) const ()  <1625>;
                            () void_j_t21s_s2 (__trgt.1022)  <1626>;
                        } #221
                        {
                            (__tmp_low.595 var=372) merge (__ct_1.702 __rt_low.593)  <798>;
                            (__tmp_high.596 var=374) merge (__ct_0.185 __rt_high.594)  <799>;
                        } #228
                    } #218
                    #764 off=30
                    (__apl_r_low.617 var=387) __uint_add___uint___uint (__tmp_low.595 __ct_4294967295.703)  <826>;
                    (__apl_r_high.618 var=388) __uint_add___uint___uint (__tmp_high.596 __ct_4294967295.703)  <827>;
                    (__apl_r_high.621 var=388) __uint__pl___uint___uint (__apl_r_high.618 __tmp.877)  <830>;
                    (__tmp_low.641 var=407) __uint__ad___uint___uint (__fch_absA_low.325 __apl_r_low.617)  <854>;
                    (__tmp_high.642 var=409) __uint__ad___uint___uint (__fch_absA_high.330 __apl_r_high.621)  <855>;
                    (__tmp_low.671 var=426) __uint__or___uint___uint (__tmp_low.567 __tmp.752)  <892>;
                    (__ct_4294967295.703 var=439) const ()  <961>;
                    (__tmpd.706 var=442) __uint__or___uint___uint (__tmp_high.642 __tmp_low.641)  <990>;
                    (__tmp.752 var=450) __sint_sne0___sint (__tmpd.706)  <1081>;
                    (__tmp.877 var=500) __sint_slt___uint___uint (__apl_r_low.617 __tmp_low.595)  <1341>;
                } #143
                {
                    (__fch_absA_low.339 var=177) load (__M_DMw.4 __adr_absA.61 absA_low.152)  <353>;
                    (__fch_shiftDist.347 var=182) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.294)  <361>;
                    (__tmp.348 var=183) __uint__ls___uint___sint (__fch_absA_low.339 __fch_shiftDist.347)  <362>;
                    (__trgt.1025 var=559) const ()  <1630>;
                    () void_j_t21s_s2 (__trgt.1025)  <1631>;
                } #507 off=17
                {
                    (__tmp_low.910 var=493) merge (__tmp_low.671 __tmp.348)  <1389>;
                } #41
            } #37
            #509 off=31
            (__ct_28t0.74 var=59) const ()  <85>;
            (__adr_sig.76 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_28t0.74)  <87>;
            (__M_DMw.352 var=5 sig.353 var=24) store (__tmp_low.910 __adr_sig.76 sig.23)  <366>;
            call {
                () chess_separator_scheduler ()  <367>;
            } #43 off=32
            #44 off=33
            (__fch_sign.354 var=187) load (__M_DMw.4 __adr_sign.56 sign.100)  <368>;
            (__ct_156.358 var=190) const ()  <372>;
            (__fch_shiftDist.360 var=192) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.294)  <374>;
            (__tmp.361 var=193) __sint__mi___sint___sint (__ct_156.358 __fch_shiftDist.360)  <375>;
            (__fch_sig.363 var=194) load (__M_DMw.4 __adr_sig.76 sig.353)  <377>;
            (softfloat_roundPackToF32.367 var=197) const ()  <381>;
            (__link.368 var=198) w32_jal_t21s_s2 (softfloat_roundPackToF32.367)  <382>;
            call {
                (__tmp.357 var=189 stl=X off=11) assign (__fch_sign.354)  <371>;
                (__tmp.362 var=193 stl=X off=12) assign (__tmp.361)  <376>;
                (__fch_sig.364 var=194 stl=X off=13) assign (__fch_sig.363)  <378>;
                (__link.369 var=198 stl=X off=1) assign (__link.368)  <383>;
                (__tmp.370 var=199 stl=X off=10) Fsoftfloat_roundPackToF32 (__link.369 __tmp.357 __tmp.362 __fch_sig.364)  <384>;
                (__tmp.371 var=199) deassign (__tmp.370)  <385>;
            } #45 off=34
            #787 off=35
            (__trgt.1028 var=561) const ()  <1635>;
            () void_j_t21s_s2 (__trgt.1028)  <1636>;
        } #33
        {
            (shiftDist.373 var=22) merge (shiftDist.184 shiftDist.294)  <388>;
            (u.374 var=23) merge (u.284 u.22)  <389>;
            (sig.375 var=24) merge (sig.23 sig.353)  <390>;
            (__rt.376 var=31) merge (__rt.288 __tmp.371)  <391>;
        } #47
    } #20
    #49 off=42 nxt=-2
    (__rd___sp.377 var=29) rd_res_reg (__R_SP.11 __sp.47)  <392>;
    (__ct_32s0.378 var=200) const ()  <393>;
    (__tmp.380 var=202) __Pvoid__pl___Pvoid___sint (__rd___sp.377 __ct_32s0.378)  <395>;
    (__R_SP.381 var=12 __sp.382 var=18) wr_res_reg (__tmp.380 __sp.47)  <396>;
    () void___rts_jr_w32 (__la.30)  <397>;
    (__rt.383 var=31 stl=X off=10) assign (__rt.376)  <398>;
    () out (__rt.383)  <399>;
    () sink (__sp.382)  <407>;
    () sink (sign.100)  <409>;
    () sink (shiftDist.373)  <411>;
    () sink (u.374)  <412>;
    () sink (sig.375)  <413>;
    () sink (a_low.80)  <414>;
    () sink (a_high.86)  <415>;
    () sink (absA_low.152)  <416>;
    () sink (absA_high.158)  <417>;
} #0
0 : 'SoftFloat-3e/source/i64_to_f32.c';
----------
0 : (0,43:0,0);
3 : (0,43:22,0);
4 : (0,43:22,0);
6 : (0,51:9,8);
8 : (0,52:16,8);
11 : (0,52:39,10);
13 : (0,52:9,13);
14 : (0,52:9,13);
15 : (0,53:47,13);
16 : (0,53:16,13);
17 : (0,53:14,14);
18 : (0,53:14,14);
19 : (0,54:11,14);
20 : (0,54:4,14);
22 : (0,66:8,15);
24 : (0,56:14,15);
27 : (0,56:14,17);
29 : (0,55:13,20);
30 : (0,55:13,20);
31 : (0,59:8,21);
33 : (0,59:8,24);
34 : (0,61:18,25);
35 : (0,61:18,25);
36 : (0,63:23,25);
37 : (0,64:16,25);
43 : (0,62:12,30);
44 : (0,66:65,30);
45 : (0,66:15,30);
49 : (0,54:4,35);
72 : (0,52:11,8);
125 : (0,56:14,15);
143 : (0,64:18,26);
195 : (0,64:18,26);
196 : (0,64:18,26);
197 : (0,64:18,26);
198 : (0,64:18,26);
199 : (0,64:18,26);
200 : (0,64:18,26);
201 : (0,64:18,26);
202 : (0,64:18,26);
203 : (0,64:18,26);
204 : (0,64:18,26);
205 : (0,64:18,26);
206 : (0,64:18,26);
217 : (0,64:18,26);
218 : (0,64:18,26);
219 : (0,64:18,26);
220 : (0,64:18,26);
221 : (0,64:18,26);
222 : (0,64:18,26);
223 : (0,64:18,26);
224 : (0,64:18,26);
225 : (0,64:18,26);
226 : (0,64:18,26);
227 : (0,64:18,26);
228 : (0,64:18,26);
487 : (0,56:79,16);
509 : (0,62:8,29);
518 : (0,52:18,9);
733 : (0,51:4,7);
764 : (0,64:18,26);
----------
53 : (0,43:10,0);
54 : (0,43:10,0);
56 : (0,43:10,0);
57 : (0,43:10,0);
59 : (0,43:30,0);
60 : (0,43:30,0);
62 : (0,43:30,0);
64 : (0,45:9,0);
65 : (0,45:9,0);
67 : (0,45:9,0);
69 : (0,46:18,0);
70 : (0,46:18,0);
72 : (0,46:18,0);
74 : (0,47:16,0);
75 : (0,47:16,0);
77 : (0,47:16,0);
79 : (0,48:19,0);
80 : (0,48:19,0);
82 : (0,48:19,0);
84 : (0,49:18,0);
85 : (0,49:18,0);
87 : (0,49:18,0);
90 : (0,43:22,0);
95 : (0,43:22,0);
96 : (0,43:22,0);
103 : (0,51:12,7);
109 : (0,51:4,7);
110 : (0,51:9,8);
111 : (0,52:11,8);
138 : (0,52:16,8);
142 : (0,52:35,9);
147 : (0,52:35,9);
152 : (0,52:55,10);
157 : (0,52:55,10);
162 : (0,52:4,12);
167 : (0,52:4,12);
168 : (0,52:9,13);
170 : (0,53:47,13);
175 : (0,53:47,13);
178 : (0,53:47,0);
180 : (0,53:47,0);
184 : (0,53:16,13);
185 : (0,53:16,0);
186 : (0,53:16,13);
191 : (0,53:54,13);
193 : (0,53:4,13);
194 : (0,53:14,14);
195 : (0,54:11,0);
197 : (0,54:14,14);
198 : (0,54:11,14);
224 : (0,54:4,14);
226 : (0,56:12,15);
231 : (0,56:12,15);
261 : (0,56:14,15);
262 : (0,56:30,16);
265 : (0,56:37,0);
267 : (0,56:35,16);
268 : (0,56:61,0);
270 : (0,56:63,16);
271 : (0,56:61,16);
273 : (0,56:75,0);
275 : (0,56:73,16);
276 : (0,56:41,16);
278 : (0,56:98,16);
286 : (0,56:104,16);
287 : (0,56:102,16);
288 : (0,56:79,16);
291 : (0,56:14,18);
295 : (0,55:9,19);
296 : (0,55:13,20);
300 : (0,59:16,20);
302 : (0,61:8,24);
303 : (0,61:18,0);
305 : (0,61:18,24);
306 : (0,61:8,24);
307 : (0,61:18,25);
308 : (0,63:13,25);
311 : (0,63:23,25);
337 : (0,64:16,25);
339 : (0,64:50,26);
344 : (0,64:50,26);
348 : (0,64:57,26);
349 : (0,64:56,26);
353 : (0,65:34,27);
361 : (0,65:40,27);
362 : (0,65:38,27);
366 : (0,62:8,29);
367 : (0,62:12,30);
368 : (0,66:41,30);
371 : (0,66:41,0);
372 : (0,66:52,0);
374 : (0,66:54,30);
375 : (0,66:52,30);
376 : (0,66:52,0);
377 : (0,66:65,30);
378 : (0,66:65,0);
382 : (0,66:15,30);
383 : (0,66:15,0);
384 : (0,66:15,30);
388 : (0,54:4,34);
389 : (0,54:4,34);
390 : (0,54:4,34);
391 : (0,54:4,34);
392 : (0,54:4,0);
393 : (0,54:4,0);
395 : (0,54:4,0);
396 : (0,54:4,35);
397 : (0,54:4,35);
398 : (0,54:4,0);
480 : (0,52:11,8);
516 : (0,53:54,0);
528 : (0,43:30,0);
532 : (0,46:18,0);
600 : (0,52:18,9);
601 : (0,52:18,9);
604 : (0,52:18,9);
711 : (0,56:14,15);
717 : (0,51:4,7);
749 : (0,64:18,26);
750 : (0,64:18,0);
752 : (0,64:18,26);
753 : (0,64:18,26);
754 : (0,64:18,26);
755 : (0,64:18,26);
756 : (0,64:18,26);
757 : (0,64:18,26);
758 : (0,64:18,26);
759 : (0,64:18,26);
761 : (0,64:18,26);
762 : (0,64:18,26);
764 : (0,64:18,26);
783 : (0,64:18,26);
786 : (0,64:18,26);
787 : (0,64:18,26);
788 : (0,64:18,26);
789 : (0,64:18,26);
790 : (0,64:18,26);
791 : (0,64:18,26);
792 : (0,64:18,26);
795 : (0,64:18,26);
796 : (0,64:18,26);
797 : (0,64:18,26);
798 : (0,64:18,26);
799 : (0,64:18,26);
826 : (0,64:18,26);
827 : (0,64:18,26);
830 : (0,64:18,26);
854 : (0,64:18,26);
855 : (0,64:18,26);
892 : (0,64:18,26);
959 : (0,64:18,0);
961 : (0,64:18,0);
990 : (0,64:18,26);
1081 : (0,64:18,26);
1333 : (0,52:18,9);
1341 : (0,64:18,26);
1528 : (0,56:14,15);
1598 : (0,52:16,8);
1603 : (0,56:14,15);
1608 : (0,64:18,26);
1613 : (0,64:18,26);
1618 : (0,64:18,26);
1623 : (0,64:18,26);
1628 : (0,64:16,25);
1633 : (0,54:4,14);

