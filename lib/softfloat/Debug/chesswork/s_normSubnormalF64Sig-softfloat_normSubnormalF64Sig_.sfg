
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Apr 10 20:00:58 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/s_normSubnormalF64Sig.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  exp16_sig64 softfloat_normSubnormalF64Sig(uint_fast64_t)
Fsoftfloat_normSubnormalF64Sig : user_defined, called {
    fnm : "softfloat_normSubnormalF64Sig" 'exp16_sig64 softfloat_normSubnormalF64Sig(uint_fast64_t)';
    arg : ( w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=24 );
    llv : 0 0 0 0 0 ;
}
****
!!  uint_fast8_t softfloat_countLeadingZeros64(uint64_t)
Fsoftfloat_countLeadingZeros64 : user_defined, called {
    fnm : "softfloat_countLeadingZeros64" 'uint_fast8_t softfloat_countLeadingZeros64(uint64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : softfloat_normSubnormalF64Sig typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : sig typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   20 : shiftDist typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast8_t_DMb
   21 : z typ=w08 val=12t0 bnd=a sz=12 algn=4 stl=DMb tref=exp16_sig64_DMb
   22 : __extDMb_exp16_sig64 typ=w08 bnd=b stl=DMb
   23 : sig_low typ=w08 bnd=B stl=DMb
   24 : sig_high typ=w08 bnd=B stl=DMb
   25 : z_exp typ=w08 bnd=B stl=DMb
   26 : z_sig typ=w08 bnd=B stl=DMb
   27 : z_sig_low typ=w08 bnd=B stl=DMb
   28 : z_sig_high typ=w08 bnd=B stl=DMb
   29 : __extPMb_void typ=u08 bnd=b stl=PMb
   30 : __extDMb_w32 typ=w08 bnd=b stl=DMb
   31 : __rd___sp typ=w32 bnd=m
   32 : __la typ=w32 bnd=p tref=w32__
   33 : __aptr___rt typ=w32 bnd=p tref=__Pexp16_sig64__
   35 : __arg_sig_low typ=w32 bnd=m tref=__uint__
   36 : __arg_sig_high typ=w32 bnd=m tref=__uint__
   37 : __ct_m24S0 typ=w32 val=-24S0 bnd=m
   39 : __tmp typ=w32 bnd=m
   41 : __ct_0t0 typ=w32 val=0t0 bnd=m
   43 : __adr_sig typ=w32 bnd=m adro=19
   45 : __ct_8t0 typ=w32 val=8t0 bnd=m
   47 : __adr_shiftDist typ=w32 bnd=m adro=20
   49 : __ct_12t0 typ=w32 val=12t0 bnd=m
   51 : __adr_z typ=w32 bnd=m adro=21
   66 : __ct_4 typ=w32 val=4f bnd=m
   69 : __fch_sig_low typ=w32 bnd=m
   72 : __fch_sig_high typ=w32 bnd=m
   73 : __record_low typ=w32 bnd=m tref=__uint__
   74 : __record_high typ=w32 bnd=m tref=__uint__
   77 : softfloat_countLeadingZeros64 typ=t21s_s2 val=0r bnd=m
   78 : __link typ=w32 bnd=m
   79 : __tmp typ=w32 bnd=m
   82 : __tmp typ=w32 bnd=m
   84 : __ct_1 typ=w32 val=1f bnd=m
   86 : __fch_shiftDist typ=w32 bnd=m
   87 : __tmp typ=w32 bnd=m
   92 : __fch_sig_low typ=w32 bnd=m
   95 : __fch_sig_high typ=w32 bnd=m
   96 : __fch_shiftDist typ=w32 bnd=m
  120 : __fchtmp typ=w32 bnd=m
  133 : __ct_24s0 typ=w32 val=24s0 bnd=m
  135 : __tmp typ=w32 bnd=m
  148 : __ct_4294967285 typ=w32 val=-11f bnd=m
  150 : __shv___aptr___rt typ=w32 bnd=m
  151 : __ct_8 typ=w32 val=8f bnd=m
  154 : __ct_4t0 typ=w32 val=4t0 bnd=m
  155 : __adr_sig typ=w32 bnd=m adro=19
  156 : __adr_sig typ=w32 bnd=m adro=19
  157 : __adr_sig typ=w32 bnd=m adro=19
  158 : __ct_16t0 typ=w32 val=16t0 bnd=m
  159 : __adr_z typ=w32 bnd=m adro=21
  160 : __ct_20t0 typ=w32 val=20t0 bnd=m
  161 : __adr_z typ=w32 bnd=m adro=21
  162 : __adr_z typ=w32 bnd=m adro=21
  163 : __adr_z typ=w32 bnd=m adro=21
  166 : __rt_low typ=w32 bnd=m tref=__uint__
  167 : __rt_high typ=w32 bnd=m tref=__uint__
  171 : __apl_ff typ=w32 bnd=m tref=__sint__
  172 : __apl_carries typ=w32 bnd=m tref=__uint__
  173 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  174 : __tmp typ=bool bnd=m
  175 : __tmp typ=bool bnd=m
  176 : __tmp typ=w32 bnd=m
  177 : __apl_r_low typ=w32 bnd=m tref=__uint__
  178 : __tmp typ=w32 bnd=m
  179 : __apl_r_high typ=w32 bnd=m tref=__uint__
  181 : __ct_m32 typ=w32 val=-32f bnd=m
  182 : __tmp_low typ=w32 bnd=m
  184 : __tmp_high typ=w32 bnd=m
  198 : __either typ=bool bnd=m
  199 : __trgt typ=t13s_s2 val=0j bnd=m
  200 : __trgt typ=t21s_s2 val=0j bnd=m
  201 : __trgt typ=t13s_s2 val=0j bnd=m
  202 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_normSubnormalF64Sig {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (shiftDist.19 var=20) source ()  <30>;
    (z.20 var=21) source ()  <31>;
    (__extDMb_exp16_sig64.21 var=22) source ()  <32>;
    (sig_low.22 var=23) source ()  <33>;
    (sig_high.23 var=24) source ()  <34>;
    (z_exp.24 var=25) source ()  <35>;
    (z_sig.25 var=26) source ()  <36>;
    (z_sig_low.26 var=27) source ()  <37>;
    (z_sig_high.27 var=28) source ()  <38>;
    (__extPMb_void.28 var=29) source ()  <39>;
    (__extDMb_w32.29 var=30) source ()  <40>;
    (__la.31 var=32 stl=X off=1) inp ()  <42>;
    (__la.32 var=32) deassign (__la.31)  <43>;
    (__aptr___rt.34 var=33 stl=X off=10) inp ()  <45>;
    (__aptr___rt.35 var=33) deassign (__aptr___rt.34)  <46>;
    (__arg_sig_low.38 var=35 stl=X off=11) inp ()  <49>;
    (__arg_sig_low.39 var=35) deassign (__arg_sig_low.38)  <50>;
    (__arg_sig_high.42 var=36 stl=X off=12) inp ()  <53>;
    (__arg_sig_high.43 var=36) deassign (__arg_sig_high.42)  <54>;
    (__rd___sp.46 var=31) rd_res_reg (__R_SP.11 __sp.17)  <57>;
    (__ct_m24S0.47 var=37) const ()  <58>;
    (__tmp.49 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_m24S0.47)  <60>;
    (__R_SP.50 var=12 __sp.51 var=18) wr_res_reg (__tmp.49 __sp.17)  <61>;
    (__rd___sp.52 var=31) rd_res_reg (__R_SP.11 __sp.51)  <63>;
    (__ct_0t0.53 var=41) const ()  <64>;
    (__adr_sig.55 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.52 __ct_0t0.53)  <66>;
    (__rd___sp.57 var=31) rd_res_reg (__R_SP.11 __sp.51)  <68>;
    (__rd___sp.62 var=31) rd_res_reg (__R_SP.11 __sp.51)  <73>;
    (__M_DMw.82 var=5 sig_low.83 var=23) store (__arg_sig_low.39 __adr_sig.55 sig_low.22)  <93>;
    (__M_DMw.88 var=5 sig_high.89 var=24) store (__arg_sig_high.43 __adr_sig.538 sig_high.23)  <98>;
    (__ct_4t0.537 var=154) const ()  <579>;
    (__adr_sig.538 var=155) __Pvoid__pl___Pvoid___sint (__rd___sp.52 __ct_4t0.537)  <581>;
    call {
        () chess_separator_scheduler ()  <99>;
    } #4 off=1
    #5 off=2
    (__fch_sig_low.91 var=69) load (__M_DMw.4 __adr_sig.55 sig_low.83)  <101>;
    (__fch_sig_high.96 var=72) load (__M_DMw.4 __adr_sig.539 sig_high.89)  <106>;
    (softfloat_countLeadingZeros64.104 var=77) const ()  <114>;
    (__link.105 var=78) w32_jal_t21s_s2 (softfloat_countLeadingZeros64.104)  <115>;
    (__adr_sig.539 var=156) __Pvoid__pl___Pvoid___sint (__rd___sp.52 __ct_4t0.537)  <582>;
    call {
        (__record_low.99 var=73 stl=X off=11) assign (__fch_sig_low.91)  <109>;
        (__record_high.101 var=74 stl=X off=12) assign (__fch_sig_high.96)  <111>;
        (__link.106 var=78 stl=X off=1) assign (__link.105)  <116>;
        (__tmp.107 var=79 stl=X off=10) Fsoftfloat_countLeadingZeros64 (__link.106 __record_low.99 __record_high.101)  <117>;
        (__tmp.108 var=79) deassign (__tmp.107)  <118>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.58 var=45) const ()  <69>;
    (__adr_shiftDist.60 var=47) __Pvoid__pl___Pvoid___sint (__rd___sp.57 __ct_8t0.58)  <71>;
    (__tmp.112 var=82) __uint__pl___uint___uint (__tmp.108 __ct_4294967285.509)  <122>;
    (__M_DMw.114 var=5 shiftDist.115 var=20) store (__tmp.112 __adr_shiftDist.60 shiftDist.19)  <124>;
    (__ct_4294967285.509 var=148) const ()  <546>;
    call {
        () chess_separator_scheduler ()  <125>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.63 var=49) const ()  <74>;
    (__adr_z.65 var=51) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_12t0.63)  <76>;
    (__ct_1.116 var=84) const ()  <126>;
    (__fch_shiftDist.118 var=86) load (__M_DMw.4 __adr_shiftDist.60 shiftDist.115)  <128>;
    (__tmp.119 var=87) __sint__mi___sint___sint (__ct_1.116 __fch_shiftDist.118)  <129>;
    (__M_DMw.123 var=5 z_exp.124 var=25) store (__tmp.119 __adr_z.65 z_exp.24)  <133>;
    call {
        () chess_separator_scheduler ()  <134>;
    } #10 off=7
    #115 off=8
    (__fch_sig_low.126 var=92) load (__M_DMw.4 __adr_sig.55 sig_low.83)  <136>;
    (__fch_sig_high.131 var=95) load (__M_DMw.4 __adr_sig.540 sig_high.89)  <141>;
    (__fch_shiftDist.133 var=96) load (__M_DMw.4 __adr_shiftDist.60 shiftDist.115)  <143>;
    (__adr_sig.540 var=157) __Pvoid__pl___Pvoid___sint (__rd___sp.52 __ct_4t0.537)  <583>;
    (__ct_0.552 var=173) const ()  <613>;
    (__tmp.553 var=174) bool__eq___sint___sint (__fch_shiftDist.133 __ct_0.552)  <614>;
    (__trgt.588 var=201) const ()  <727>;
    () void_br_bool_t13s_s2 (__tmp.553 __trgt.588)  <728>;
    (__either.589 var=198) undefined ()  <729>;
    if {
        {
            () if_expr (__either.589)  <617>;
        } #117
        {
        } #118 off=13
        {
            #120 off=9
            (__ct_m32.554 var=181) const ()  <615>;
            (__apl_ff.556 var=171) __sint__pl___sint___sint (__fch_shiftDist.133 __ct_m32.554)  <618>;
            (__tmp.557 var=175) bool__lt___sint___sint (__apl_ff.556 __ct_0.552)  <619>;
            (__trgt.585 var=199) const ()  <722>;
            () void_br_bool_t13s_s2 (__tmp.557 __trgt.585)  <723>;
            (__either.586 var=198) undefined ()  <724>;
            if {
                {
                    () if_expr (__either.586)  <620>;
                } #122
                {
                    (__tmp.558 var=176) __sint__mi___sint___sint (__ct_0.552 __apl_ff.556)  <621>;
                    (__apl_carries.559 var=172) __uint__rs___uint___sint (__fch_sig_low.126 __tmp.558)  <622>;
                    (__apl_r_low.560 var=177) __uint__ls___uint___sint (__fch_sig_low.126 __fch_shiftDist.133)  <623>;
                    (__tmp.561 var=178) __uint__ls___uint___sint (__fch_sig_high.131 __fch_shiftDist.133)  <624>;
                    (__apl_r_high.562 var=179) __uint__or___uint___uint (__tmp.561 __apl_carries.559)  <625>;
                } #123 off=11
                {
                    (__apl_r_high.563 var=179) __uint__ls___uint___sint (__fch_sig_low.126 __apl_ff.556)  <626>;
                    (__trgt.587 var=200) const ()  <725>;
                    () void_j_t21s_s2 (__trgt.587)  <726>;
                } #124 off=10
                {
                    (__rt_low.564 var=166) merge (__apl_r_low.560 __ct_0.552)  <627>;
                    (__rt_high.565 var=167) merge (__apl_r_high.562 __apl_r_high.563)  <628>;
                } #125
            } #121
            #131 off=12
            (__trgt.590 var=202) const ()  <730>;
            () void_j_t21s_s2 (__trgt.590)  <731>;
        } #119
        {
            (__tmp_low.566 var=182) merge (__fch_sig_low.126 __rt_low.564)  <629>;
            (__tmp_high.567 var=184) merge (__fch_sig_high.131 __rt_high.565)  <630>;
        } #126
    } #116
    #112 off=14
    (__M_DMw.139 var=5 z_sig_low.140 var=27) store (__tmp_low.566 __adr_z.542 z_sig_low.26)  <149>;
    (__M_DMw.145 var=5 z_sig_high.146 var=28) store (__tmp_high.567 __adr_z.544 z_sig_high.27)  <154>;
    (__ct_16t0.541 var=158) const ()  <584>;
    (__adr_z.542 var=159) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_16t0.541)  <586>;
    (__ct_20t0.543 var=160) const ()  <587>;
    (__adr_z.544 var=161) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_20t0.543)  <589>;
    call {
        () chess_separator_scheduler ()  <264>;
    } #42 off=15
    #50 off=16
    (__ct_4.84 var=66) const ()  <94>;
    (__fchtmp.327 var=120) load (__M_DMw.4 __adr_z.65 __extDMb_w32.29 __extPMb_void.28 z.20 z_exp.124 z_sig.25 z_sig_high.146 z_sig_low.140)  <351>;
    (__M_DMw.333 var=5 __extDMb_exp16_sig64.334 var=22 __extDMb_w32.335 var=30 __extPMb_void.336 var=29) store (__fchtmp.327 __aptr___rt.35 __extDMb_exp16_sig64.21 __extDMb_w32.29 __extPMb_void.28)  <357>;
    (__shv___aptr___rt.527 var=150) __Pvoid__pl___Pvoid___sint (__aptr___rt.35 __ct_4.84)  <568>;
    call {
        () chess_separator_scheduler ()  <364>;
    } #55 off=17
    #86 off=18
    (__fchtmp.513 var=120) load (__M_DMw.4 __adr_z.545 __extDMb_w32.335 __extPMb_void.336 z.20 z_exp.124 z_sig.25 z_sig_high.146 z_sig_low.140)  <552>;
    (__M_DMw.514 var=5 __extDMb_exp16_sig64.515 var=22 __extDMb_w32.516 var=30 __extPMb_void.517 var=29) store (__fchtmp.513 __shv___aptr___rt.527 __extDMb_exp16_sig64.334 __extDMb_w32.335 __extPMb_void.336)  <553>;
    (__adr_z.545 var=162) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_16t0.541)  <590>;
    call {
        () chess_separator_scheduler ()  <557>;
    } #90 off=19
    #93 off=20
    (__fchtmp.520 var=120) load (__M_DMw.4 __adr_z.546 __extDMb_w32.516 __extPMb_void.517 z.20 z_exp.124 z_sig.25 z_sig_high.146 z_sig_low.140)  <560>;
    (__M_DMw.521 var=5 __extDMb_exp16_sig64.522 var=22 __extDMb_w32.523 var=30 __extPMb_void.524 var=29) store (__fchtmp.520 __shv___aptr___rt.529 __extDMb_exp16_sig64.515 __extDMb_w32.516 __extPMb_void.517)  <561>;
    (__ct_8.528 var=151) const ()  <569>;
    (__shv___aptr___rt.529 var=150) __Pvoid__pl___Pvoid___sint (__aptr___rt.35 __ct_8.528)  <571>;
    (__adr_z.546 var=163) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_20t0.543)  <591>;
    call {
        () chess_separator_scheduler ()  <430>;
    } #65 off=21
    #68 off=22 nxt=-2
    (__rd___sp.442 var=31) rd_res_reg (__R_SP.11 __sp.51)  <432>;
    (__ct_24s0.443 var=133) const ()  <433>;
    (__tmp.445 var=135) __Pvoid__pl___Pvoid___sint (__rd___sp.442 __ct_24s0.443)  <435>;
    (__R_SP.446 var=12 __sp.447 var=18) wr_res_reg (__tmp.445 __sp.51)  <436>;
    () void___rts_jr_w32 (__la.32)  <437>;
    () sink (__sp.447)  <445>;
    () sink (shiftDist.115)  <447>;
    () sink (__extDMb_exp16_sig64.522)  <449>;
    () sink (sig_low.83)  <450>;
    () sink (sig_high.89)  <451>;
    () sink (z_exp.124)  <452>;
    () sink (z_sig_low.140)  <454>;
    () sink (z_sig_high.146)  <455>;
    () sink (__extPMb_void.524)  <456>;
    () sink (__extDMb_w32.523)  <457>;
} #0
0 : 'SoftFloat-3e/source/s_normSubnormalF64Sig.c';
----------
0 : (0,41:0,0);
3 : (0,41:50,0);
4 : (0,41:50,0);
5 : (0,46:47,4);
6 : (0,46:16,4);
7 : (0,46:14,5);
8 : (0,46:14,5);
9 : (0,47:10,6);
10 : (0,47:10,6);
42 : (0,49:11,27);
50 : (0,49:11,30);
55 : (0,49:11,33);
65 : (0,49:11,57);
68 : (0,49:4,57);
86 : (0,49:11,30);
90 : (0,49:11,33);
93 : (0,49:11,30);
112 : (0,48:5,6);
115 : (0,48:15,6);
116 : (0,48:15,6);
117 : (0,48:15,6);
118 : (0,48:15,6);
119 : (0,48:15,6);
120 : (0,48:15,6);
121 : (0,48:15,6);
122 : (0,48:15,6);
123 : (0,48:15,6);
124 : (0,48:15,6);
125 : (0,48:15,6);
126 : (0,48:15,6);
----------
57 : (0,41:19,0);
58 : (0,41:19,0);
60 : (0,41:19,0);
61 : (0,41:19,0);
63 : (0,41:64,0);
64 : (0,41:64,0);
66 : (0,41:64,0);
68 : (0,43:16,0);
69 : (0,43:16,0);
71 : (0,43:16,0);
73 : (0,44:23,0);
74 : (0,44:23,0);
76 : (0,44:23,0);
93 : (0,41:50,0);
98 : (0,41:50,0);
99 : (0,41:50,0);
101 : (0,46:47,4);
106 : (0,46:47,4);
109 : (0,46:47,0);
111 : (0,46:47,0);
115 : (0,46:16,4);
116 : (0,46:16,0);
117 : (0,46:16,4);
122 : (0,46:53,4);
124 : (0,46:4,4);
125 : (0,46:14,5);
126 : (0,47:14,0);
128 : (0,47:16,5);
129 : (0,47:14,5);
133 : (0,47:5,5);
134 : (0,47:10,6);
136 : (0,48:12,6);
141 : (0,48:12,6);
143 : (0,48:17,6);
149 : (0,48:5,6);
154 : (0,48:5,6);
264 : (0,49:11,27);
351 : (0,49:11,29);
357 : (0,49:11,29);
364 : (0,49:11,33);
430 : (0,49:11,57);
432 : (0,49:4,0);
433 : (0,49:4,0);
435 : (0,49:4,0);
436 : (0,49:4,57);
437 : (0,49:4,57);
546 : (0,46:53,0);
552 : (0,49:11,29);
553 : (0,49:11,29);
557 : (0,49:11,33);
560 : (0,49:11,29);
561 : (0,49:11,29);
579 : (0,41:64,0);
584 : (0,44:23,0);
586 : (0,48:5,0);
587 : (0,44:23,0);
613 : (0,48:15,0);
614 : (0,48:15,6);
615 : (0,48:15,0);
617 : (0,48:15,6);
618 : (0,48:15,6);
619 : (0,48:15,6);
620 : (0,48:15,6);
621 : (0,48:15,6);
622 : (0,48:15,6);
623 : (0,48:15,6);
624 : (0,48:15,6);
625 : (0,48:15,6);
626 : (0,48:15,6);
627 : (0,48:15,6);
628 : (0,48:15,6);
629 : (0,48:15,6);
630 : (0,48:15,6);
723 : (0,48:15,6);
728 : (0,48:15,6);

