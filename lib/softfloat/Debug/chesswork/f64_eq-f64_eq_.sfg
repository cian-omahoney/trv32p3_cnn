
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:59:06 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f64_eq.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  bool f64_eq(float64_t, float64_t)
Ff64_eq : user_defined, called {
    fnm : "f64_eq" 'bool f64_eq(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
    frm : ( l=48 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f64_eq typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : b typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=float64_t_DMb
   20 : a typ=w08 val=8t0 bnd=a sz=8 algn=4 stl=DMb tref=float64_t_DMb
   21 : uA typ=w08 val=16t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   22 : uiA typ=w08 val=24t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   23 : uB typ=w08 val=32t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   24 : uiB typ=w08 val=40t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   25 : b_low typ=w08 bnd=B stl=DMb
   26 : b_high typ=w08 bnd=B stl=DMb
   27 : a_low typ=w08 bnd=B stl=DMb
   28 : a_high typ=w08 bnd=B stl=DMb
   29 : uiA_low typ=w08 bnd=B stl=DMb
   30 : uiA_high typ=w08 bnd=B stl=DMb
   31 : uiB_low typ=w08 bnd=B stl=DMb
   32 : uiB_high typ=w08 bnd=B stl=DMb
   33 : __rd___sp typ=w32 bnd=m
   34 : __la typ=w32 bnd=p tref=w32__
   36 : __rt typ=bool bnd=m
   38 : __arg_a_low typ=w32 bnd=m tref=__uint__
   39 : __arg_a_high typ=w32 bnd=m tref=__uint__
   41 : __arg_b_low typ=w32 bnd=m tref=__uint__
   42 : __arg_b_high typ=w32 bnd=m tref=__uint__
   43 : __ct_m48S0 typ=w32 val=-48S0 bnd=m
   45 : __tmp typ=w32 bnd=m
   47 : __ct_0t0 typ=w32 val=0t0 bnd=m
   49 : __adr_b typ=w32 bnd=m adro=19
   51 : __ct_8t0 typ=w32 val=8t0 bnd=m
   53 : __adr_a typ=w32 bnd=m adro=20
   55 : __ct_16t0 typ=w32 val=16t0 bnd=m
   57 : __adr_uA typ=w32 bnd=m adro=21
   59 : __ct_24t0 typ=w32 val=24t0 bnd=m
   61 : __adr_uiA typ=w32 bnd=m adro=22
   63 : __ct_32t0 typ=w32 val=32t0 bnd=m
   65 : __adr_uB typ=w32 bnd=m adro=23
   67 : __ct_40t0 typ=w32 val=40t0 bnd=m
   69 : __adr_uiB typ=w32 bnd=m adro=24
   75 : __fch_a_low typ=w32 bnd=m
   78 : __fch_a_high typ=w32 bnd=m
   79 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   90 : __fch_uA typ=w32 bnd=m
   93 : __fch_uA typ=w32 bnd=m
   99 : __fch_b_low typ=w32 bnd=m
  102 : __fch_b_high typ=w32 bnd=m
  114 : __fch_uB typ=w32 bnd=m
  117 : __fch_uB typ=w32 bnd=m
  126 : __fch_uiA_high typ=w32 bnd=m
  135 : __fch_uiA_low typ=w32 bnd=m
  138 : __fch_uiA_high typ=w32 bnd=m
  147 : __tmp typ=bool bnd=m
  154 : __fch_uiB_high typ=w32 bnd=m
  163 : __fch_uiB_low typ=w32 bnd=m
  166 : __fch_uiB_high typ=w32 bnd=m
  175 : __tmp typ=bool bnd=m
  176 : __tmp typ=bool bnd=m
  180 : __fch_uiA_low typ=w32 bnd=m
  183 : __fch_uiA_high typ=w32 bnd=m
  185 : __fch_uiB_low typ=w32 bnd=m
  188 : __fch_uiB_high typ=w32 bnd=m
  189 : __tmp typ=bool bnd=m
  193 : __fch_uiA_low typ=w32 bnd=m
  196 : __fch_uiA_high typ=w32 bnd=m
  198 : __fch_uiB_low typ=w32 bnd=m
  201 : __fch_uiB_high typ=w32 bnd=m
  210 : __tmp typ=bool bnd=m
  211 : __tmp typ=w32 bnd=m
  212 : __ct_48s0 typ=w32 val=48s0 bnd=m
  214 : __tmp typ=w32 bnd=m
  218 : __ct_1 typ=w32 val=1f bnd=m
  250 : __ct_28t0 typ=w32 val=28t0 bnd=m
  251 : __adr_uiA typ=w32 bnd=m adro=22
  252 : __ct_44t0 typ=w32 val=44t0 bnd=m
  253 : __adr_uiB typ=w32 bnd=m adro=24
  254 : __adr_uiB typ=w32 bnd=m adro=24
  255 : __adr_uiA typ=w32 bnd=m adro=22
  256 : __adr_uiB typ=w32 bnd=m adro=24
  257 : __adr_uiA typ=w32 bnd=m adro=22
  258 : __adr_uiB typ=w32 bnd=m adro=24
  259 : __ct_4t0 typ=w32 val=4t0 bnd=m
  260 : __adr_b typ=w32 bnd=m adro=19
  261 : __adr_b typ=w32 bnd=m adro=19
  262 : __ct_12t0 typ=w32 val=12t0 bnd=m
  263 : __adr_a typ=w32 bnd=m adro=20
  264 : __adr_a typ=w32 bnd=m adro=20
  265 : __ct_20t0 typ=w32 val=20t0 bnd=m
  266 : __adr_uA typ=w32 bnd=m adro=21
  267 : __adr_uA typ=w32 bnd=m adro=21
  268 : __adr_uiA typ=w32 bnd=m adro=22
  269 : __adr_uiA typ=w32 bnd=m adro=22
  270 : __ct_36t0 typ=w32 val=36t0 bnd=m
  271 : __adr_uB typ=w32 bnd=m adro=23
  272 : __adr_uB typ=w32 bnd=m adro=23
  273 : __adr_uiB typ=w32 bnd=m adro=24
  282 : __tmp_high typ=w32 bnd=m
  294 : __tmp_high typ=w32 bnd=m
  304 : __tmp typ=bool bnd=m
  305 : __tmp typ=bool bnd=m
  315 : __tmp_high typ=w32 bnd=m
  336 : __tmp_high typ=w32 bnd=m
  342 : __tmp_high typ=w32 bnd=m
  355 : __tmp_high typ=w32 bnd=m
  377 : __tmp_low typ=w32 bnd=m
  379 : __tmp_high typ=w32 bnd=m
  387 : __tmp_high typ=w32 bnd=m
  401 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
  403 : __ct_1048575 typ=w32 val=1048575f bnd=m
  404 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  407 : __tmpd typ=w32 bnd=m
  408 : __tmp typ=bool bnd=m
  409 : __tmpd typ=w32 bnd=m
  410 : __tmp typ=bool bnd=m
  411 : __tmpd typ=w32 bnd=m
  412 : __tmp typ=bool bnd=m
  415 : __ct_4294967295 typ=w32 val=-1f bnd=m
  422 : __mskbool typ=w32 bnd=m
  431 : __true typ=bool val=1f bnd=m
  432 : __false typ=bool val=0f bnd=m
  433 : __either typ=bool bnd=m
  434 : __trgt typ=t13s_s2 val=0j bnd=m
  435 : __trgt typ=t13s_s2 val=0j bnd=m
  436 : __trgt typ=t13s_s2 val=0j bnd=m
  437 : __trgt typ=t13s_s2 val=0j bnd=m
  438 : __trgt typ=t13s_s2 val=0j bnd=m
  439 : __trgt typ=t21s_s2 val=0j bnd=m
  440 : __trgt typ=t13s_s2 val=0j bnd=m
  441 : __trgt typ=t21s_s2 val=0j bnd=m
  442 : __trgt typ=t13s_s2 val=0j bnd=m
  443 : __trgt typ=t13s_s2 val=0j bnd=m
  444 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_eq {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (uA.20 var=21) source ()  <31>;
    (uB.22 var=23) source ()  <33>;
    (b_low.24 var=25) source ()  <35>;
    (b_high.25 var=26) source ()  <36>;
    (a_low.26 var=27) source ()  <37>;
    (a_high.27 var=28) source ()  <38>;
    (uiA_low.28 var=29) source ()  <39>;
    (uiA_high.29 var=30) source ()  <40>;
    (uiB_low.30 var=31) source ()  <41>;
    (uiB_high.31 var=32) source ()  <42>;
    (__la.33 var=34 stl=X off=1) inp ()  <44>;
    (__la.34 var=34) deassign (__la.33)  <45>;
    (__arg_a_low.38 var=38 stl=X off=11) inp ()  <49>;
    (__arg_a_low.39 var=38) deassign (__arg_a_low.38)  <50>;
    (__arg_a_high.42 var=39 stl=X off=12) inp ()  <53>;
    (__arg_a_high.43 var=39) deassign (__arg_a_high.42)  <54>;
    (__arg_b_low.47 var=41 stl=X off=13) inp ()  <58>;
    (__arg_b_low.48 var=41) deassign (__arg_b_low.47)  <59>;
    (__arg_b_high.51 var=42 stl=X off=14) inp ()  <62>;
    (__arg_b_high.52 var=42) deassign (__arg_b_high.51)  <63>;
    (__rd___sp.55 var=33) rd_res_reg (__R_SP.11 __sp.17)  <66>;
    (__ct_m48S0.56 var=43) const ()  <67>;
    (__tmp.58 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_m48S0.56)  <69>;
    (__R_SP.59 var=12 __sp.60 var=18) wr_res_reg (__tmp.58 __sp.17)  <70>;
    (__rd___sp.61 var=33) rd_res_reg (__R_SP.11 __sp.60)  <72>;
    (__ct_0t0.62 var=47) const ()  <73>;
    (__adr_b.64 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_0t0.62)  <75>;
    (__rd___sp.66 var=33) rd_res_reg (__R_SP.11 __sp.60)  <77>;
    (__rd___sp.71 var=33) rd_res_reg (__R_SP.11 __sp.60)  <82>;
    (__rd___sp.76 var=33) rd_res_reg (__R_SP.11 __sp.60)  <87>;
    (__rd___sp.81 var=33) rd_res_reg (__R_SP.11 __sp.60)  <92>;
    (__rd___sp.86 var=33) rd_res_reg (__R_SP.11 __sp.60)  <97>;
    (__M_DMw.92 var=5 b_low.93 var=25) store (__arg_b_low.48 __adr_b.64 b_low.24)  <103>;
    (__M_DMw.98 var=5 b_high.99 var=26) store (__arg_b_high.52 __adr_b.533 b_high.25)  <108>;
    (__ct_4t0.532 var=259) const ()  <604>;
    (__adr_b.533 var=260) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_4t0.532)  <606>;
    call {
        () chess_separator_scheduler ()  <109>;
    } #4 off=1
    #5 off=2
    (__ct_8t0.67 var=51) const ()  <78>;
    (__adr_a.69 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_8t0.67)  <80>;
    (__M_DMw.101 var=5 a_low.102 var=27) store (__arg_a_low.39 __adr_a.69 a_low.26)  <111>;
    (__M_DMw.107 var=5 a_high.108 var=28) store (__arg_a_high.43 __adr_a.536 a_high.27)  <116>;
    (__ct_12t0.535 var=262) const ()  <608>;
    (__adr_a.536 var=263) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_12t0.535)  <610>;
    call {
        () chess_separator_scheduler ()  <117>;
    } #6 off=3
    #7 off=4
    (__ct_16t0.72 var=55) const ()  <83>;
    (__adr_uA.74 var=57) __Pvoid__pl___Pvoid___sint (__rd___sp.71 __ct_16t0.72)  <85>;
    (__fch_a_low.110 var=75) load (__M_DMw.4 __adr_a.69 a_low.102)  <119>;
    (__fch_a_high.115 var=78) load (__M_DMw.4 __adr_a.537 a_high.108)  <124>;
    (__M_DMw.121 var=5 uA.122 var=21) store (__fch_a_low.110 __adr_uA.74 uA.20)  <130>;
    (__M_DMw.127 var=5 uA.128 var=21) store (__fch_a_high.115 __adr_uA.539 uA.122)  <135>;
    (__adr_a.537 var=264) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_12t0.535)  <611>;
    (__ct_20t0.538 var=265) const ()  <612>;
    (__adr_uA.539 var=266) __Pvoid__pl___Pvoid___sint (__rd___sp.71 __ct_20t0.538)  <614>;
    call {
        () chess_separator_scheduler ()  <136>;
    } #8 off=5
    #9 off=6
    (__ct_24t0.77 var=59) const ()  <88>;
    (__adr_uiA.79 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_24t0.77)  <90>;
    (__fch_uA.133 var=90) load (__M_DMw.4 __adr_uA.74 uA.128)  <141>;
    (__fch_uA.138 var=93) load (__M_DMw.4 __adr_uA.540 uA.128)  <146>;
    (__M_DMw.141 var=5 uiA_low.142 var=29) store (__fch_uA.133 __adr_uiA.79 uiA_low.28)  <149>;
    (__M_DMw.147 var=5 uiA_high.148 var=30) store (__fch_uA.138 __adr_uiA.541 uiA_high.29)  <154>;
    (__ct_28t0.523 var=250) const ()  <593>;
    (__adr_uA.540 var=267) __Pvoid__pl___Pvoid___sint (__rd___sp.71 __ct_20t0.538)  <615>;
    (__adr_uiA.541 var=268) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_28t0.523)  <616>;
    call {
        () chess_separator_scheduler ()  <155>;
    } #10 off=7
    #11 off=8
    (__ct_32t0.82 var=63) const ()  <93>;
    (__adr_uB.84 var=65) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_32t0.82)  <95>;
    (__fch_b_low.150 var=99) load (__M_DMw.4 __adr_b.64 b_low.93)  <157>;
    (__fch_b_high.155 var=102) load (__M_DMw.4 __adr_b.534 b_high.99)  <162>;
    (__M_DMw.161 var=5 uB.162 var=23) store (__fch_b_low.150 __adr_uB.84 uB.22)  <168>;
    (__M_DMw.167 var=5 uB.168 var=23) store (__fch_b_high.155 __adr_uB.544 uB.162)  <173>;
    (__adr_b.534 var=261) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_4t0.532)  <607>;
    (__ct_36t0.543 var=270) const ()  <618>;
    (__adr_uB.544 var=271) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_36t0.543)  <620>;
    call {
        () chess_separator_scheduler ()  <174>;
    } #12 off=9
    #13 off=10
    (__ct_40t0.87 var=67) const ()  <98>;
    (__adr_uiB.89 var=69) __Pvoid__pl___Pvoid___sint (__rd___sp.86 __ct_40t0.87)  <100>;
    (__fch_uB.173 var=114) load (__M_DMw.4 __adr_uB.84 uB.168)  <179>;
    (__fch_uB.178 var=117) load (__M_DMw.4 __adr_uB.545 uB.168)  <184>;
    (__M_DMw.181 var=5 uiB_low.182 var=31) store (__fch_uB.173 __adr_uiB.89 uiB_low.30)  <187>;
    (__M_DMw.187 var=5 uiB_high.188 var=32) store (__fch_uB.178 __adr_uiB.546 uiB_high.31)  <192>;
    (__ct_44t0.525 var=252) const ()  <596>;
    (__adr_uB.545 var=272) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_36t0.543)  <621>;
    (__adr_uiB.546 var=273) __Pvoid__pl___Pvoid___sint (__rd___sp.86 __ct_44t0.525)  <622>;
    call {
        () chess_separator_scheduler ()  <193>;
    } #14 off=11
    #244 off=12
    (__ct_0.117 var=79) const ()  <126>;
    (__fch_uiA_high.195 var=126) load (__M_DMw.4 __adr_uiA.542 uiA_high.148)  <200>;
    (__ct_1.498 var=218) const ()  <549>;
    (__adr_uiA.542 var=269) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_28t0.523)  <617>;
    (__tmp_high.567 var=294) __uint__ad___uint___uint (__tmp_high.772 __ct_2146435072.758)  <670>;
    (__ct_2146435072.758 var=401) const ()  <935>;
    (__ct_1048575.760 var=403) const ()  <939>;
    (__ct_4294967295.771 var=415) const ()  <976>;
    (__tmp_high.772 var=282) __uint__er___uint___uint (__fch_uiA_high.195 __ct_4294967295.771)  <977>;
    (__tmp.782 var=304) bool__ne___uint___uint (__tmp_high.567 __ct_0.117)  <1038>;
    (__trgt.805 var=434) const ()  <1094>;
    () void_br_bool_t13s_s2 (__tmp.782 __trgt.805)  <1095>;
    (__either.806 var=433) undefined ()  <1096>;
    if {
        {
            () if_expr (__either.806)  <239>;
        } #17
        {
            (__false.809 var=432) const ()  <1100>;
        } #19
        {
            (__fch_uiA_low.235 var=135) load (__M_DMw.4 __adr_uiA.79 uiA_low.142)  <241>;
            (__fch_uiA_high.240 var=138) load (__M_DMw.4 __adr_uiA.524 uiA_high.148)  <246>;
            (__adr_uiA.524 var=251) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_28t0.523)  <595>;
            (__tmp_high.597 var=315) __uint__ad___uint___uint (__fch_uiA_high.240 __ct_1048575.760)  <708>;
            (__tmpd.764 var=407) __uint__or___uint___uint (__tmp_high.597 __fch_uiA_low.235)  <968>;
            (__tmp.765 var=408) bool__ne___uint___uint (__tmpd.764 __ct_0.117)  <969>;
            (__trgt.810 var=436) const ()  <1101>;
            () void_br_bool_t13s_s2 (__tmp.765 __trgt.810)  <1102>;
            (__either.811 var=433) undefined ()  <1103>;
        } #112 off=13
        {
            (__tmp.250 var=147) merge (__false.809 __either.811)  <256>;
        } #20
    } #16
    if {
        {
            () if_expr (__tmp.250)  <287>;
        } #23
        {
            (__true.821 var=431) const ()  <1118>;
        } #24
        {
            #252 off=14
            (__fch_uiB_high.289 var=154) load (__M_DMw.4 __adr_uiB.527 uiB_high.188)  <296>;
            (__adr_uiB.527 var=254) __Pvoid__pl___Pvoid___sint (__rd___sp.86 __ct_44t0.525)  <599>;
            (__tmp_high.640 var=342) __uint__ad___uint___uint (__tmp_high.776 __ct_2146435072.758)  <763>;
            (__tmp_high.776 var=336) __uint__er___uint___uint (__fch_uiB_high.289 __ct_4294967295.771)  <984>;
            (__tmp.783 var=304) bool__ne___uint___uint (__tmp_high.640 __ct_0.117)  <1039>;
            (__trgt.807 var=435) const ()  <1097>;
            () void_br_bool_t13s_s2 (__tmp.783 __trgt.807)  <1098>;
            (__either.808 var=433) undefined ()  <1099>;
            if {
                {
                    () if_expr (__either.808)  <335>;
                } #28
                {
                    (__false.822 var=432) const ()  <1119>;
                } #30
                {
                    (__fch_uiB_low.329 var=163) load (__M_DMw.4 __adr_uiB.89 uiB_low.182)  <337>;
                    (__fch_uiB_high.334 var=166) load (__M_DMw.4 __adr_uiB.526 uiB_high.188)  <342>;
                    (__adr_uiB.526 var=253) __Pvoid__pl___Pvoid___sint (__rd___sp.86 __ct_44t0.525)  <598>;
                    (__tmp_high.670 var=355) __uint__ad___uint___uint (__fch_uiB_high.334 __ct_1048575.760)  <801>;
                    (__tmpd.766 var=409) __uint__or___uint___uint (__tmp_high.670 __fch_uiB_low.329)  <970>;
                    (__tmp.767 var=410) bool__ne___uint___uint (__tmpd.766 __ct_0.117)  <971>;
                    (__trgt.823 var=442) const ()  <1120>;
                    () void_br_bool_t13s_s2 (__tmp.767 __trgt.823)  <1121>;
                    (__either.824 var=433) undefined ()  <1122>;
                } #171 off=15
                {
                    (__tmp.344 var=175) merge (__false.822 __either.824)  <352>;
                } #31
            } #27
        } #25
        {
            (__tmp.345 var=176) merge (__true.821 __tmp.344)  <353>;
        } #32
    } #22
    if {
        {
            () if_expr (__tmp.345)  <384>;
        } #35
        {
            (__false.825 var=432) const ()  <1123>;
        } #38
        {
            #194 off=16
            (__fch_uiA_low.379 var=180) load (__M_DMw.4 __adr_uiA.79 uiA_low.142)  <389>;
            (__fch_uiA_high.384 var=183) load (__M_DMw.4 __adr_uiA.530 uiA_high.148)  <394>;
            (__fch_uiB_low.387 var=185) load (__M_DMw.4 __adr_uiB.89 uiB_low.182)  <397>;
            (__fch_uiB_high.392 var=188) load (__M_DMw.4 __adr_uiB.531 uiB_high.188)  <402>;
            (__adr_uiA.530 var=257) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_28t0.523)  <602>;
            (__adr_uiB.531 var=258) __Pvoid__pl___Pvoid___sint (__rd___sp.86 __ct_44t0.525)  <603>;
            (__tmp.784 var=304) bool__ne___uint___uint (__fch_uiA_high.384 __fch_uiB_high.392)  <1040>;
            (__trgt.812 var=437) const ()  <1104>;
            () void_br_bool_t13s_s2 (__tmp.784 __trgt.812)  <1105>;
            (__either.813 var=433) undefined ()  <1106>;
            if {
                {
                    () if_expr (__either.813)  <840>;
                } #196
                {
                    (__false.817 var=432) const ()  <1112>;
                } #198
                {
                    (__tmp.701 var=305) bool__eq___uint___uint (__fch_uiA_low.379 __fch_uiB_low.387)  <841>;
                    (__trgt.818 var=440) const ()  <1113>;
                    () void_br_bool_t13s_s2 (__tmp.701 __trgt.818)  <1114>;
                    (__either.819 var=433) undefined ()  <1115>;
                } #197 off=17
                {
                    (__tmp.702 var=189) merge (__false.817 __either.819)  <842>;
                } #199
            } #195
            if {
                {
                    () if_expr (__tmp.702)  <435>;
                } #42
                {
                } #262 off=22
                {
                    #277 off=18
                    (__fch_uiA_low.428 var=193) load (__M_DMw.4 __adr_uiA.79 uiA_low.142)  <439>;
                    (__fch_uiA_high.433 var=196) load (__M_DMw.4 __adr_uiA.528 uiA_high.148)  <444>;
                    (__fch_uiB_low.436 var=198) load (__M_DMw.4 __adr_uiB.89 uiB_low.182)  <447>;
                    (__fch_uiB_high.441 var=201) load (__M_DMw.4 __adr_uiB.529 uiB_high.188)  <452>;
                    (__adr_uiA.528 var=255) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_28t0.523)  <600>;
                    (__adr_uiB.529 var=256) __Pvoid__pl___Pvoid___sint (__rd___sp.86 __ct_44t0.525)  <601>;
                    (__tmp_low.712 var=377) __uint__or___uint___uint (__fch_uiA_low.428 __fch_uiB_low.436)  <855>;
                    (__tmp_high.713 var=379) __uint__or___uint___uint (__fch_uiA_high.433 __fch_uiB_high.441)  <856>;
                    (__tmp_high.730 var=387) __uint__ad___uint___uint (__tmp_high.713 __ct_2147483647.761)  <877>;
                    (__ct_2147483647.761 var=404) const ()  <941>;
                    (__tmpd.768 var=411) __uint__or___uint___uint (__tmp_high.730 __tmp_low.712)  <972>;
                    (__tmp.769 var=412) bool__eq___uint___uint (__tmpd.768 __ct_0.117)  <973>;
                    (__trgt.814 var=438) const ()  <1107>;
                    () void_br_bool_t13s_s2 (__tmp.769 __trgt.814)  <1108>;
                    (__either.815 var=433) undefined ()  <1109>;
                    if {
                        {
                            () if_expr (__either.815)  <1056>;
                        } #283
                        {
                        } #284 off=20
                        {
                            (__trgt.816 var=439) const ()  <1110>;
                            () void_j_t21s_s2 (__trgt.816)  <1111>;
                        } #285 off=19
                        {
                            (__mskbool.797 var=422) merge (__ct_1.498 __ct_0.117)  <1059>;
                        } #286
                    } #282
                    #297 off=21
                    (__trgt.820 var=441) const ()  <1116>;
                    () void_j_t21s_s2 (__trgt.820)  <1117>;
                } #232
                {
                    (__mskbool.785 var=422) merge (__ct_1.498 __mskbool.797)  <1043>;
                } #45
            } #41
            #290 off=23
            (__tmp.801 var=210) bool__ne___sint___sint (__mskbool.785 __ct_0.117)  <1066>;
            (__trgt.826 var=443) const ()  <1124>;
            () void_br_bool_t13s_s2 (__tmp.801 __trgt.826)  <1125>;
            (__either.827 var=433) undefined ()  <1126>;
        } #39
        {
            (__rt.452 var=36) merge (__false.825 __either.827)  <464>;
        } #47
    } #34
    if {
        {
            () if_expr (__rt.452)  <548>;
        } #55
        {
        } #56 off=25
        {
            (__trgt.828 var=444) const ()  <1127>;
            () void_j_t21s_s2 (__trgt.828)  <1128>;
        } #57 off=24
        {
            (__tmp.500 var=211) merge (__ct_1.498 __ct_0.117)  <551>;
        } #58
    } #54
    #50 off=26 nxt=-2
    (__rd___sp.454 var=33) rd_res_reg (__R_SP.11 __sp.60)  <466>;
    (__ct_48s0.455 var=212) const ()  <467>;
    (__tmp.457 var=214) __Pvoid__pl___Pvoid___sint (__rd___sp.454 __ct_48s0.455)  <469>;
    (__R_SP.458 var=12 __sp.459 var=18) wr_res_reg (__tmp.457 __sp.60)  <470>;
    () void___rts_jr_w32 (__la.34)  <471>;
    (__tmp.460 var=211 stl=X off=10) assign (__tmp.500)  <472>;
    () out (__tmp.460)  <473>;
    () sink (__sp.459)  <483>;
    () sink (uA.128)  <486>;
    () sink (uB.168)  <488>;
    () sink (b_low.93)  <490>;
    () sink (b_high.99)  <491>;
    () sink (a_low.102)  <492>;
    () sink (a_high.108)  <493>;
    () sink (uiA_low.142)  <494>;
    () sink (uiA_high.148)  <495>;
    () sink (uiB_low.182)  <496>;
    () sink (uiB_high.188)  <497>;
} #0
0 : 'SoftFloat-3e/source/f64_eq.c';
----------
0 : (0,44:0,0);
3 : (0,44:26,0);
4 : (0,44:26,0);
5 : (0,44:13,0);
6 : (0,44:13,0);
7 : (0,51:9,8);
8 : (0,51:9,8);
9 : (0,52:8,9);
10 : (0,52:8,9);
11 : (0,53:9,10);
12 : (0,53:9,10);
13 : (0,54:8,11);
14 : (0,54:8,11);
16 : (0,55:50,11);
19 : (0,55:50,13);
22 : (0,55:86,15);
24 : (0,55:86,16);
25 : (0,55:130,17);
27 : (0,55:130,17);
30 : (0,55:130,19);
34 : (0,55:4,23);
38 : (0,63:8,25);
39 : (0,63:8,27);
41 : (0,65:24,28);
50 : (0,65:4,36);
54 : (0,65:4,36);
55 : (0,65:4,36);
56 : (0,65:4,36);
57 : (0,65:4,36);
58 : (0,65:4,36);
112 : (0,55:50,12);
171 : (0,55:130,18);
194 : (0,65:16,28);
195 : (0,65:16,28);
196 : (0,65:16,28);
197 : (0,65:16,28);
198 : (0,65:16,28);
199 : (0,65:16,28);
232 : (0,65:27,30);
244 : (0,55:44,11);
252 : (0,55:124,17);
262 : (0,65:24,29);
277 : (0,65:27,30);
282 : (0,65:27,30);
283 : (0,65:27,30);
284 : (0,65:27,30);
285 : (0,65:27,30);
286 : (0,65:27,30);
290 : (0,63:8,27);
----------
66 : (0,44:5,0);
67 : (0,44:5,0);
69 : (0,44:5,0);
70 : (0,44:5,0);
72 : (0,44:36,0);
73 : (0,44:36,0);
75 : (0,44:36,0);
77 : (0,44:23,0);
78 : (0,44:23,0);
80 : (0,44:23,0);
82 : (0,46:19,0);
83 : (0,46:19,0);
85 : (0,46:19,0);
87 : (0,47:18,0);
88 : (0,47:18,0);
90 : (0,47:18,0);
92 : (0,48:19,0);
93 : (0,48:19,0);
95 : (0,48:19,0);
97 : (0,49:18,0);
98 : (0,49:18,0);
100 : (0,49:18,0);
103 : (0,44:26,0);
108 : (0,44:26,0);
109 : (0,44:26,0);
111 : (0,44:13,0);
116 : (0,44:13,0);
117 : (0,44:13,0);
119 : (0,51:11,7);
124 : (0,51:11,7);
126 : (0,51:6,0);
130 : (0,51:6,7);
135 : (0,51:6,7);
136 : (0,51:9,8);
141 : (0,52:12,8);
146 : (0,52:12,8);
149 : (0,52:4,8);
154 : (0,52:4,8);
155 : (0,52:8,9);
157 : (0,53:11,9);
162 : (0,53:11,9);
168 : (0,53:6,9);
173 : (0,53:6,9);
174 : (0,53:9,10);
179 : (0,54:12,10);
184 : (0,54:12,10);
187 : (0,54:4,10);
192 : (0,54:4,10);
193 : (0,54:8,11);
200 : (0,55:14,11);
239 : (0,55:50,11);
241 : (0,55:55,12);
246 : (0,55:55,12);
256 : (0,55:50,14);
287 : (0,55:86,15);
296 : (0,55:94,17);
335 : (0,55:130,17);
337 : (0,55:135,18);
342 : (0,55:135,18);
352 : (0,55:130,20);
353 : (0,55:86,22);
384 : (0,55:4,23);
389 : (0,65:12,28);
394 : (0,65:12,28);
397 : (0,65:19,28);
402 : (0,65:19,28);
435 : (0,65:24,28);
439 : (0,65:31,30);
444 : (0,65:31,30);
447 : (0,65:37,30);
452 : (0,65:37,30);
464 : (0,55:4,35);
466 : (0,65:4,0);
467 : (0,65:4,0);
469 : (0,65:4,0);
470 : (0,65:4,36);
471 : (0,65:4,36);
472 : (0,65:4,0);
593 : (0,47:18,0);
596 : (0,49:18,0);
604 : (0,44:36,0);
608 : (0,44:23,0);
612 : (0,46:19,0);
618 : (0,48:19,0);
670 : (0,55:19,11);
708 : (0,55:60,12);
763 : (0,55:99,17);
801 : (0,55:140,18);
840 : (0,65:16,28);
841 : (0,65:16,28);
842 : (0,65:16,28);
855 : (0,65:35,30);
856 : (0,65:35,30);
877 : (0,65:42,30);
935 : (0,55:21,0);
939 : (0,55:62,0);
941 : (0,65:44,0);
968 : (0,55:50,12);
969 : (0,55:50,12);
970 : (0,55:130,18);
971 : (0,55:130,18);
972 : (0,65:27,30);
973 : (0,65:27,30);
976 : (0,55:12,0);
977 : (0,55:12,11);
984 : (0,55:92,17);
1038 : (0,55:44,11);
1039 : (0,55:124,17);
1040 : (0,65:16,28);
1095 : (0,55:50,11);
1098 : (0,55:130,17);
1102 : (0,55:86,15);
1105 : (0,65:16,28);
1114 : (0,65:24,28);
1121 : (0,55:4,23);

