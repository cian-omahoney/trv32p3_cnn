
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:34:04 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f64_to_i32_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  int_fast32_t f64_to_i32_r_minMag(float64_t, bool)
Ff64_to_i32_r_minMag : user_defined, called {
    fnm : "f64_to_i32_r_minMag" 'long f64_to_i32_r_minMag(float64_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=52 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f64_to_i32_r_minMag typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : exact typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   20 : a typ=w08 val=4t0 bnd=a sz=8 algn=4 stl=DMb tref=float64_t_DMb
   21 : uA typ=w08 val=12t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   22 : uiA typ=w08 val=20t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   23 : exp typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   24 : sig typ=w08 val=32t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   25 : shiftDist typ=w08 val=40t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   26 : sign typ=w08 val=44t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   27 : absZ typ=w08 val=48t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast32_t_DMb
   28 : a_low typ=w08 bnd=B stl=DMb
   29 : a_high typ=w08 bnd=B stl=DMb
   30 : uiA_low typ=w08 bnd=B stl=DMb
   31 : uiA_high typ=w08 bnd=B stl=DMb
   32 : sig_low typ=w08 bnd=B stl=DMb
   33 : sig_high typ=w08 bnd=B stl=DMb
   34 : __rd___sp typ=w32 bnd=m
   35 : __la typ=w32 bnd=p tref=w32__
   36 : __rt typ=w32 bnd=p tref=int_fast32_t__
   38 : __arg_a_low typ=w32 bnd=m tref=__uint__
   39 : __arg_a_high typ=w32 bnd=m tref=__uint__
   40 : __arg_exact typ=w32 bnd=p tref=bool__
   42 : __ct_m52S0 typ=w32 val=-52S0 bnd=m
   44 : __tmp typ=w32 bnd=m
   47 : __ct_0t0 typ=w32 val=0t0 bnd=m
   49 : __adr_exact typ=w32 bnd=m adro=19
   51 : __ct_4t0 typ=w32 val=4t0 bnd=m
   53 : __adr_a typ=w32 bnd=m adro=20
   55 : __ct_12t0 typ=w32 val=12t0 bnd=m
   57 : __adr_uA typ=w32 bnd=m adro=21
   59 : __ct_20t0 typ=w32 val=20t0 bnd=m
   61 : __adr_uiA typ=w32 bnd=m adro=22
   63 : __ct_28t0 typ=w32 val=28t0 bnd=m
   65 : __adr_exp typ=w32 bnd=m adro=23
   67 : __ct_32t0 typ=w32 val=32t0 bnd=m
   69 : __adr_sig typ=w32 bnd=m adro=24
   71 : __ct_40t0 typ=w32 val=40t0 bnd=m
   73 : __adr_shiftDist typ=w32 bnd=m adro=25
   75 : __ct_44t0 typ=w32 val=44t0 bnd=m
   77 : __adr_sign typ=w32 bnd=m adro=26
   79 : __ct_48t0 typ=w32 val=48t0 bnd=m
   81 : __adr_absZ typ=w32 bnd=m adro=27
   89 : __fch_a_low typ=w32 bnd=m
   92 : __fch_a_high typ=w32 bnd=m
   93 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  104 : __fch_uA typ=w32 bnd=m
  107 : __fch_uA typ=w32 bnd=m
  116 : __fch_uiA_high typ=w32 bnd=m
  121 : __ct_2047 typ=w32 val=2047f bnd=m
  123 : __tmp typ=w32 bnd=m
  125 : __fch_uiA_low typ=w32 bnd=m
  128 : __fch_uiA_high typ=w32 bnd=m
  136 : __ct_1075 typ=w32 val=1075f bnd=m
  138 : __fch_exp typ=w32 bnd=m
  139 : __tmp typ=w32 bnd=m
  140 : __ct_53 typ=w32 val=53f bnd=m
  142 : __fch_shiftDist typ=w32 bnd=m
  143 : __tmp typ=bool bnd=m
  150 : __fch_uiA_high typ=w32 bnd=m
  157 : __tmp typ=w32 bnd=m
  158 : __fch_shiftDist typ=w32 bnd=m
  159 : __ct_22 typ=w32 val=22f bnd=m
  161 : __tmp typ=bool bnd=m
  162 : __fch_sign typ=w32 bnd=m
  163 : __fch_sign typ=bool bnd=m
  164 : __fch_exp typ=w32 bnd=m
  165 : __ct_1054 typ=w32 val=1054f bnd=m
  167 : __tmp typ=bool bnd=m
  170 : __tmp typ=bool bnd=m
  172 : __fch_sig_low typ=w32 bnd=m
  175 : __fch_sig_high typ=w32 bnd=m
  181 : __tmp typ=bool bnd=m
  182 : __ct_m2147483648 typ=t20s_rp12 val=-524288f bnd=m
  184 : __fch_exp typ=w32 bnd=m
  187 : __tmp typ=bool bnd=m
  189 : __fch_sig_low typ=w32 bnd=m
  192 : __fch_sig_high typ=w32 bnd=m
  198 : __tmp typ=bool bnd=m
  199 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  201 : __fch_sign typ=w32 bnd=m
  202 : __fch_sign typ=bool bnd=m
  207 : __tmp typ=w32 bnd=m
  208 : __tmp typ=w32 bnd=m
  210 : __fch_sig_low typ=w32 bnd=m
  213 : __fch_sig_high typ=w32 bnd=m
  222 : __fch_sig_low typ=w32 bnd=m
  225 : __fch_sig_high typ=w32 bnd=m
  226 : __fch_shiftDist typ=w32 bnd=m
  229 : __fch_sign typ=w32 bnd=m
  230 : __fch_sign typ=bool bnd=m
  233 : __fch_absZ typ=w32 bnd=m
  234 : __tmp typ=w32 bnd=m
  235 : __fch_absZ typ=w32 bnd=m
  236 : __tmp typ=w32 bnd=m
  238 : __ct_52s0 typ=w32 val=52s0 bnd=m
  240 : __tmp typ=w32 bnd=m
  272 : __ct_36t0 typ=w32 val=36t0 bnd=m
  273 : __adr_sig typ=w32 bnd=m adro=24
  274 : __adr_sig typ=w32 bnd=m adro=24
  275 : __adr_sig typ=w32 bnd=m adro=24
  276 : __adr_sig typ=w32 bnd=m adro=24
  277 : __adr_sig typ=w32 bnd=m adro=24
  278 : __ct_24t0 typ=w32 val=24t0 bnd=m
  279 : __adr_uiA typ=w32 bnd=m adro=22
  280 : __ct_8t0 typ=w32 val=8t0 bnd=m
  281 : __adr_a typ=w32 bnd=m adro=20
  282 : __adr_a typ=w32 bnd=m adro=20
  283 : __ct_16t0 typ=w32 val=16t0 bnd=m
  284 : __adr_uA typ=w32 bnd=m adro=21
  285 : __adr_uA typ=w32 bnd=m adro=21
  286 : __adr_uiA typ=w32 bnd=m adro=22
  287 : __adr_uiA typ=w32 bnd=m adro=22
  288 : __adr_uiA typ=w32 bnd=m adro=22
  289 : __adr_sig typ=w32 bnd=m adro=24
  292 : __rt_low typ=w32 bnd=m tref=__uint__
  297 : __apl_ff typ=w32 bnd=m tref=__sint__
  298 : __apl_carries typ=w32 bnd=m tref=__uint__
  300 : __tmp typ=bool bnd=m
  301 : __tmp typ=bool bnd=m
  302 : __tmp typ=w32 bnd=m
  303 : __tmp typ=w32 bnd=m
  304 : __apl_r_low typ=w32 bnd=m tref=__uint__
  307 : __ct_m32 typ=w32 val=-32f bnd=m
  322 : __tmp_high typ=w32 bnd=m
  347 : __rt typ=bool bnd=m tref=bool__
  353 : __tmp typ=bool bnd=m
  374 : __tmp_high typ=w32 bnd=m
  380 : __tmp_low typ=w32 bnd=m
  388 : __ct_20 typ=w32 val=20f bnd=m
  390 : __ct_31 typ=w32 val=31f bnd=m
  393 : __ct_1048575 typ=w32 val=1048575f bnd=m
  394 : __ct_2097152 typ=t20s_rp12 val=512f bnd=m
  395 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  398 : __tmpd typ=w32 bnd=m
  399 : __tmp typ=bool bnd=m
  421 : __true typ=bool val=1f bnd=m
  422 : __false typ=bool val=0f bnd=m
  423 : __either typ=bool bnd=m
  424 : __trgt typ=t13s_s2 val=0j bnd=m
  425 : __trgt typ=t13s_s2 val=0j bnd=m
  426 : __trgt typ=t13s_s2 val=0j bnd=m
  427 : __trgt typ=t13s_s2 val=0j bnd=m
  428 : __trgt typ=t13s_s2 val=0j bnd=m
  429 : __trgt typ=t21s_s2 val=0j bnd=m
  430 : __trgt typ=t13s_s2 val=0j bnd=m
  431 : __trgt typ=t21s_s2 val=0j bnd=m
  432 : __trgt typ=t13s_s2 val=0j bnd=m
  433 : __trgt typ=t21s_s2 val=0j bnd=m
  434 : __trgt typ=t13s_s2 val=0j bnd=m
  435 : __trgt typ=t21s_s2 val=0j bnd=m
  436 : __trgt typ=t13s_s2 val=0j bnd=m
  437 : __trgt typ=t21s_s2 val=0j bnd=m
  438 : __trgt typ=t13s_s2 val=0j bnd=m
  439 : __trgt typ=t21s_s2 val=0j bnd=m
  440 : __trgt typ=t13s_s2 val=0j bnd=m
  441 : __trgt typ=t21s_s2 val=0j bnd=m
  442 : __trgt typ=t13s_s2 val=0j bnd=m
  443 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_to_i32_r_minMag {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (exact.18 var=19) source ()  <29>;
    (uA.20 var=21) source ()  <31>;
    (exp.22 var=23) source ()  <33>;
    (shiftDist.24 var=25) source ()  <35>;
    (sign.25 var=26) source ()  <36>;
    (absZ.26 var=27) source ()  <37>;
    (a_low.27 var=28) source ()  <38>;
    (a_high.28 var=29) source ()  <39>;
    (uiA_low.29 var=30) source ()  <40>;
    (uiA_high.30 var=31) source ()  <41>;
    (sig_low.31 var=32) source ()  <42>;
    (sig_high.32 var=33) source ()  <43>;
    (__la.34 var=35 stl=X off=1) inp ()  <45>;
    (__la.35 var=35) deassign (__la.34)  <46>;
    (__arg_a_low.39 var=38 stl=X off=11) inp ()  <50>;
    (__arg_a_low.40 var=38) deassign (__arg_a_low.39)  <51>;
    (__arg_a_high.43 var=39 stl=X off=12) inp ()  <54>;
    (__arg_a_high.44 var=39) deassign (__arg_a_high.43)  <55>;
    (__arg_exact.47 var=40 stl=X off=13) inp ()  <58>;
    (__arg_exact.48 var=40) deassign (__arg_exact.47)  <59>;
    (__rd___sp.50 var=34) rd_res_reg (__R_SP.11 __sp.17)  <61>;
    (__ct_m52S0.51 var=42) const ()  <62>;
    (__tmp.53 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_m52S0.51)  <64>;
    (__R_SP.54 var=12 __sp.55 var=18) wr_res_reg (__tmp.53 __sp.17)  <65>;
    (__rd___sp.57 var=34) rd_res_reg (__R_SP.11 __sp.55)  <68>;
    (__ct_0t0.58 var=47) const ()  <69>;
    (__adr_exact.60 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.57 __ct_0t0.58)  <71>;
    (__rd___sp.62 var=34) rd_res_reg (__R_SP.11 __sp.55)  <73>;
    (__rd___sp.67 var=34) rd_res_reg (__R_SP.11 __sp.55)  <78>;
    (__rd___sp.72 var=34) rd_res_reg (__R_SP.11 __sp.55)  <83>;
    (__rd___sp.77 var=34) rd_res_reg (__R_SP.11 __sp.55)  <88>;
    (__rd___sp.82 var=34) rd_res_reg (__R_SP.11 __sp.55)  <93>;
    (__rd___sp.87 var=34) rd_res_reg (__R_SP.11 __sp.55)  <98>;
    (__rd___sp.92 var=34) rd_res_reg (__R_SP.11 __sp.55)  <103>;
    (__rd___sp.97 var=34) rd_res_reg (__R_SP.11 __sp.55)  <108>;
    (__M_DMw.103 var=5 exact.104 var=19) store (__arg_exact.48 __adr_exact.60 exact.18)  <114>;
    call {
        () chess_separator_scheduler ()  <115>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.63 var=51) const ()  <74>;
    (__adr_a.65 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_4t0.63)  <76>;
    (__M_DMw.106 var=5 a_low.107 var=28) store (__arg_a_low.40 __adr_a.65 a_low.27)  <117>;
    (__M_DMw.112 var=5 a_high.113 var=29) store (__arg_a_high.44 __adr_a.725 a_high.28)  <122>;
    (__ct_8t0.724 var=280) const ()  <839>;
    (__adr_a.725 var=281) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_8t0.724)  <841>;
    call {
        () chess_separator_scheduler ()  <127>;
    } #8 off=3
    #9 off=4
    (__ct_12t0.68 var=55) const ()  <79>;
    (__adr_uA.70 var=57) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_12t0.68)  <81>;
    (__fch_a_low.118 var=89) load (__M_DMw.4 __adr_a.65 a_low.107)  <129>;
    (__fch_a_high.123 var=92) load (__M_DMw.4 __adr_a.726 a_high.113)  <134>;
    (__M_DMw.129 var=5 uA.130 var=21) store (__fch_a_low.118 __adr_uA.70 uA.20)  <140>;
    (__M_DMw.135 var=5 uA.136 var=21) store (__fch_a_high.123 __adr_uA.728 uA.130)  <145>;
    (__adr_a.726 var=282) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_8t0.724)  <842>;
    (__ct_16t0.727 var=283) const ()  <843>;
    (__adr_uA.728 var=284) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_16t0.727)  <845>;
    call {
        () chess_separator_scheduler ()  <146>;
    } #10 off=5
    #11 off=6
    (__ct_20t0.73 var=59) const ()  <84>;
    (__adr_uiA.75 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_20t0.73)  <86>;
    (__fch_uA.141 var=104) load (__M_DMw.4 __adr_uA.70 uA.136)  <151>;
    (__fch_uA.146 var=107) load (__M_DMw.4 __adr_uA.729 uA.136)  <156>;
    (__M_DMw.149 var=5 uiA_low.150 var=30) store (__fch_uA.141 __adr_uiA.75 uiA_low.29)  <159>;
    (__M_DMw.155 var=5 uiA_high.156 var=31) store (__fch_uA.146 __adr_uiA.730 uiA_high.30)  <164>;
    (__ct_24t0.722 var=278) const ()  <836>;
    (__adr_uA.729 var=285) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_16t0.727)  <846>;
    (__adr_uiA.730 var=286) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_24t0.722)  <847>;
    call {
        () chess_separator_scheduler ()  <165>;
    } #12 off=7
    #302 off=8
    (__ct_28t0.78 var=63) const ()  <89>;
    (__adr_exp.80 var=65) __Pvoid__pl___Pvoid___sint (__rd___sp.77 __ct_28t0.78)  <91>;
    (__fch_uiA_high.163 var=116) load (__M_DMw.4 __adr_uiA.731 uiA_high.156)  <172>;
    (__ct_2047.169 var=121) const ()  <178>;
    (__tmp.171 var=123) __sint__ad___sint___sint (__apl_r_low.750 __ct_2047.169)  <180>;
    (__M_DMw.172 var=5 exp.173 var=23) store (__tmp.171 __adr_exp.80 exp.22)  <181>;
    (__adr_uiA.731 var=287) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_24t0.722)  <848>;
    (__apl_r_low.750 var=304) __uint__rs___uint___sint (__fch_uiA_high.163 __ct_20.898)  <902>;
    (__ct_20.898 var=388) const ()  <1120>;
    call {
        () chess_separator_scheduler ()  <182>;
    } #14 off=9
    #161 off=10
    (__ct_32t0.83 var=67) const ()  <94>;
    (__adr_sig.85 var=69) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_32t0.83)  <96>;
    (__fch_uiA_low.175 var=125) load (__M_DMw.4 __adr_uiA.75 uiA_low.150)  <184>;
    (__fch_uiA_high.180 var=128) load (__M_DMw.4 __adr_uiA.732 uiA_high.156)  <189>;
    (__M_DMw.186 var=5 sig_low.187 var=32) store (__fch_uiA_low.175 __adr_sig.85 sig_low.31)  <195>;
    (__M_DMw.192 var=5 sig_high.193 var=33) store (__tmp_high.769 __adr_sig.733 sig_high.32)  <200>;
    (__ct_36t0.716 var=272) const ()  <829>;
    (__adr_uiA.732 var=288) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_24t0.722)  <849>;
    (__adr_sig.733 var=289) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.716)  <850>;
    (__tmp_high.769 var=322) __uint__ad___uint___uint (__fch_uiA_high.180 __ct_1048575.903)  <925>;
    (__ct_1048575.903 var=393) const ()  <1130>;
    call {
        () chess_separator_scheduler ()  <201>;
    } #16 off=11
    #17 off=12
    (__ct_40t0.88 var=71) const ()  <99>;
    (__adr_shiftDist.90 var=73) __Pvoid__pl___Pvoid___sint (__rd___sp.87 __ct_40t0.88)  <101>;
    (__ct_1075.194 var=136) const ()  <202>;
    (__fch_exp.196 var=138) load (__M_DMw.4 __adr_exp.80 exp.173)  <204>;
    (__tmp.197 var=139) __sint__mi___sint___sint (__ct_1075.194 __fch_exp.196)  <205>;
    (__M_DMw.198 var=5 shiftDist.199 var=25) store (__tmp.197 __adr_shiftDist.90 shiftDist.24)  <206>;
    call {
        () chess_separator_scheduler ()  <207>;
    } #18 off=13
    #19 off=14
    (__ct_0.125 var=93) const ()  <136>;
    (__ct_53.200 var=140) const ()  <208>;
    (__fch_shiftDist.202 var=142) load (__M_DMw.4 __adr_shiftDist.90 shiftDist.199)  <210>;
    (__tmp.203 var=143) bool__ge___sint___sint (__fch_shiftDist.202 __ct_53.200)  <211>;
    (__trgt.972 var=442) const ()  <1390>;
    () void_br_bool_t13s_s2 (__tmp.203 __trgt.972)  <1391>;
    (__either.973 var=423) undefined ()  <1392>;
    if {
        {
            () if_expr (__either.973)  <246>;
        } #21
        {
        } #24 off=47
        {
            #98 off=15
            (__ct_44t0.93 var=75) const ()  <104>;
            (__adr_sign.95 var=77) __Pvoid__pl___Pvoid___sint (__rd___sp.92 __ct_44t0.93)  <106>;
            (__fch_uiA_high.246 var=150) load (__M_DMw.4 __adr_uiA.723 uiA_high.156)  <256>;
            (__M_DMw.255 var=5 sign.256 var=26) store (__tmp.914 __adr_sign.95 sign.25)  <265>;
            (__adr_uiA.723 var=279) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_24t0.722)  <838>;
            (__apl_r_low.795 var=304) __uint__rs___uint___sint (__fch_uiA_high.246 __ct_31.900)  <957>;
            (__ct_31.900 var=390) const ()  <1124>;
            (__tmp.914 var=157) __sint_sne0___sint (__apl_r_low.795)  <1179>;
            call {
                () chess_separator_scheduler ()  <266>;
            } #27 off=16
            #28 off=17
            (__fch_shiftDist.257 var=158) load (__M_DMw.4 __adr_shiftDist.90 shiftDist.199)  <267>;
            (__ct_22.258 var=159) const ()  <268>;
            (__tmp.260 var=161) bool__lt___sint___sint (__fch_shiftDist.257 __ct_22.258)  <270>;
            (__trgt.969 var=440) const ()  <1385>;
            () void_br_bool_t13s_s2 (__tmp.260 __trgt.969)  <1386>;
            (__either.970 var=423) undefined ()  <1387>;
            if {
                {
                    () if_expr (__either.970)  <305>;
                } #30
                {
                    #112 off=32
                    (__fch_sign.295 var=162) load (__M_DMw.4 __adr_sign.95 sign.256)  <306>;
                    (__ct_m2147483648.420 var=182) const ()  <434>;
                    (__fch_sign.932 var=163) bool__eq___sint___sint (__fch_sign.295 __ct_0.125)  <1301>;
                    (__trgt.939 var=424) const ()  <1339>;
                    () void_br_bool_t13s_s2 (__fch_sign.932 __trgt.939)  <1340>;
                    (__either.940 var=423) undefined ()  <1341>;
                    if {
                        {
                            () if_expr (__either.940)  <342>;
                        } #34
                        {
                            (__true.943 var=421) const ()  <1345>;
                        } #36
                        {
                            (__fch_exp.331 var=164) load (__M_DMw.4 __adr_exp.80 exp.173)  <343>;
                            (__ct_1054.332 var=165) const ()  <344>;
                            (__tmp.934 var=167) bool__ne___sint___sint (__fch_exp.331 __ct_1054.332)  <1303>;
                            (__trgt.944 var=426) const ()  <1346>;
                            () void_br_bool_t13s_s2 (__tmp.934 __trgt.944)  <1347>;
                            (__either.945 var=423) undefined ()  <1348>;
                        } #35 off=33
                        {
                            (__tmp.935 var=170) merge (__true.943 __either.945)  <1304>;
                        } #37
                    } #33
                    if {
                        {
                            () if_expr (__tmp.935)  <384>;
                        } #40
                        {
                            (__false.955 var=422) const ()  <1363>;
                        } #42
                        {
                            #219 off=34
                            (__fch_sig_low.373 var=172) load (__M_DMw.4 __adr_sig.85 sig_low.187)  <386>;
                            (__fch_sig_high.378 var=175) load (__M_DMw.4 __adr_sig.717 sig_high.193)  <391>;
                            (__adr_sig.717 var=273) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.716)  <831>;
                            (__tmp.933 var=353) bool__ne___uint___uint (__fch_sig_high.378 __ct_0.125)  <1302>;
                            (__trgt.941 var=425) const ()  <1342>;
                            () void_br_bool_t13s_s2 (__tmp.933 __trgt.941)  <1343>;
                            (__either.942 var=423) undefined ()  <1344>;
                            if {
                                {
                                    () if_expr (__either.942)  <1001>;
                                } #221
                                {
                                    (__false.956 var=422) const ()  <1364>;
                                } #223
                                {
                                    (__rt.830 var=347) bool__lt___uint___uint (__fch_sig_low.373 __ct_2097152.904)  <1002>;
                                    (__ct_2097152.904 var=394) const ()  <1132>;
                                    (__trgt.957 var=432) const ()  <1365>;
                                    () void_br_bool_t13s_s2 (__rt.830 __trgt.957)  <1366>;
                                    (__either.958 var=423) undefined ()  <1367>;
                                } #222 off=35
                                {
                                    (__rt.831 var=347) merge (__false.956 __either.958)  <1003>;
                                } #224
                            } #220
                        } #41
                        {
                            (__tmp.385 var=181) merge (__false.955 __rt.831)  <398>;
                        } #43
                    } #39
                    if {
                        {
                            () if_expr (__tmp.385)  <433>;
                        } #46
                        {
                        } #49 off=44
                        {
                            #51 off=36
                            (__fch_exp.422 var=184) load (__M_DMw.4 __adr_exp.80 exp.173)  <437>;
                            (__ct_2147483647.508 var=199) const ()  <525>;
                            (__tmp.936 var=187) bool__ne___sint___sint (__fch_exp.422 __ct_2047.169)  <1305>;
                            (__trgt.946 var=427) const ()  <1349>;
                            () void_br_bool_t13s_s2 (__tmp.936 __trgt.946)  <1350>;
                            (__either.947 var=423) undefined ()  <1351>;
                            if {
                                {
                                    () if_expr (__either.947)  <475>;
                                } #53
                                {
                                    (__false.951 var=422) const ()  <1357>;
                                } #55
                                {
                                    (__fch_sig_low.461 var=189) load (__M_DMw.4 __adr_sig.85 sig_low.187)  <477>;
                                    (__fch_sig_high.466 var=192) load (__M_DMw.4 __adr_sig.718 sig_high.193)  <482>;
                                    (__adr_sig.718 var=274) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.716)  <832>;
                                    (__tmpd.908 var=398) __uint__or___uint___uint (__fch_sig_high.466 __fch_sig_low.461)  <1172>;
                                    (__tmp.909 var=399) bool__ne___uint___uint (__tmpd.908 __ct_0.125)  <1173>;
                                    (__trgt.952 var=430) const ()  <1358>;
                                    () void_br_bool_t13s_s2 (__tmp.909 __trgt.952)  <1359>;
                                    (__either.953 var=423) undefined ()  <1360>;
                                } #237 off=37
                                {
                                    (__tmp.473 var=198) merge (__false.951 __either.953)  <489>;
                                } #56
                            } #52
                            if {
                                {
                                    () if_expr (__tmp.473)  <524>;
                                } #59
                                {
                                } #60 off=42
                                {
                                    #117 off=38
                                    (__fch_sign.510 var=201) load (__M_DMw.4 __adr_sign.95 sign.256)  <527>;
                                    (__fch_sign.694 var=202) bool__ne___sint___sint (__fch_sign.510 __ct_0.125)  <773>;
                                    (__trgt.948 var=428) const ()  <1352>;
                                    () void_br_bool_t13s_s2 (__fch_sign.694 __trgt.948)  <1353>;
                                    (__either.949 var=423) undefined ()  <1354>;
                                    if {
                                        {
                                            () if_expr (__either.949)  <563>;
                                        } #64
                                        {
                                        } #65 off=40
                                        {
                                            (__trgt.950 var=429) const ()  <1355>;
                                            () void_j_t21s_s2 (__trgt.950)  <1356>;
                                        } #66 off=39
                                        {
                                            (__tmp.550 var=207) merge (__ct_m2147483648.420 __ct_2147483647.508)  <568>;
                                        } #67
                                    } #63
                                    #324 off=41
                                    (__trgt.954 var=431) const ()  <1361>;
                                    () void_j_t21s_s2 (__trgt.954)  <1362>;
                                } #61
                                {
                                    (__tmp.551 var=208) merge (__ct_2147483647.508 __tmp.550)  <569>;
                                } #68
                            } #58
                            #325 off=43
                            (__trgt.959 var=433) const ()  <1368>;
                            () void_j_t21s_s2 (__trgt.959)  <1369>;
                        } #50
                        {
                            (__rt.552 var=36) merge (__ct_m2147483648.420 __tmp.551)  <571>;
                        } #70
                    } #45
                } #31
                {
                    #256 off=18
                    (__fch_sig_low.554 var=210) load (__M_DMw.4 __adr_sig.85 sig_low.187)  <574>;
                    (__fch_sig_high.559 var=213) load (__M_DMw.4 __adr_sig.719 sig_high.193)  <579>;
                    (__M_DMw.565 var=5 sig_low.566 var=32) store (__fch_sig_low.554 __adr_sig.85 sig_low.187)  <585>;
                    (__M_DMw.571 var=5 sig_high.572 var=33) store (__tmp_high.856 __adr_sig.720 sig_high.193)  <590>;
                    (__adr_sig.719 var=275) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.716)  <833>;
                    (__adr_sig.720 var=276) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.716)  <834>;
                    (__tmp_high.856 var=374) __uint__or___uint___uint (__fch_sig_high.559 __ct_1048576.905)  <1035>;
                    (__ct_1048576.905 var=395) const ()  <1134>;
                    call {
                        () chess_separator_scheduler ()  <591>;
                    } #74 off=19
                    #272 off=20
                    (__fch_sig_low.574 var=222) load (__M_DMw.4 __adr_sig.85 sig_low.566)  <593>;
                    (__fch_sig_high.579 var=225) load (__M_DMw.4 __adr_sig.721 sig_high.572)  <598>;
                    (__fch_shiftDist.581 var=226) load (__M_DMw.4 __adr_shiftDist.90 shiftDist.199)  <600>;
                    (__adr_sig.721 var=277) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_36t0.716)  <835>;
                    (__tmp.872 var=300) bool__eq___sint___sint (__fch_shiftDist.581 __ct_0.125)  <1055>;
                    (__trgt.963 var=436) const ()  <1375>;
                    () void_br_bool_t13s_s2 (__tmp.872 __trgt.963)  <1376>;
                    (__either.964 var=423) undefined ()  <1377>;
                    if {
                        {
                            () if_expr (__either.964)  <1058>;
                        } #274
                        {
                        } #275 off=25
                        {
                            #277 off=21
                            (__ct_m32.741 var=307) const ()  <891>;
                            (__apl_ff.875 var=297) __sint__pl___sint___sint (__fch_shiftDist.581 __ct_m32.741)  <1059>;
                            (__tmp.876 var=301) bool__lt___sint___sint (__apl_ff.875 __ct_0.125)  <1060>;
                            (__trgt.960 var=434) const ()  <1370>;
                            () void_br_bool_t13s_s2 (__tmp.876 __trgt.960)  <1371>;
                            (__either.961 var=423) undefined ()  <1372>;
                            if {
                                {
                                    () if_expr (__either.961)  <1061>;
                                } #279
                                {
                                    (__tmp.877 var=302) __sint__mi___sint___sint (__ct_0.125 __apl_ff.875)  <1062>;
                                    (__apl_carries.878 var=298) __uint__ls___uint___sint (__fch_sig_high.579 __tmp.877)  <1063>;
                                    (__tmp.879 var=303) __uint__rs___uint___sint (__fch_sig_low.574 __fch_shiftDist.581)  <1064>;
                                    (__apl_r_low.880 var=304) __uint__or___uint___uint (__tmp.879 __apl_carries.878)  <1065>;
                                } #280 off=23
                                {
                                    (__apl_r_low.882 var=304) __uint__rs___uint___sint (__fch_sig_high.579 __apl_ff.875)  <1067>;
                                    (__trgt.962 var=435) const ()  <1373>;
                                    () void_j_t21s_s2 (__trgt.962)  <1374>;
                                } #281 off=22
                                {
                                    (__rt_low.883 var=292) merge (__apl_r_low.880 __apl_r_low.882)  <1068>;
                                } #282
                            } #278
                            #327 off=24
                            (__trgt.965 var=437) const ()  <1378>;
                            () void_j_t21s_s2 (__trgt.965)  <1379>;
                        } #276
                        {
                            (__tmp_low.885 var=380) merge (__fch_sig_low.574 __rt_low.883)  <1070>;
                        } #283
                    } #273
                    #310 off=26
                    (__ct_48t0.98 var=79) const ()  <109>;
                    (__adr_absZ.100 var=81) __Pvoid__pl___Pvoid___sint (__rd___sp.97 __ct_48t0.98)  <111>;
                    (__M_DMw.584 var=5 absZ.585 var=27) store (__tmp_low.885 __adr_absZ.100 absZ.26)  <603>;
                    call {
                        () chess_separator_scheduler ()  <604>;
                    } #76 off=27
                    #122 off=28
                    (__fch_sign.586 var=229) load (__M_DMw.4 __adr_sign.95 sign.256)  <605>;
                    (__fch_sign.698 var=230) bool__ne___sint___sint (__fch_sign.586 __ct_0.125)  <780>;
                    (__trgt.966 var=438) const ()  <1380>;
                    () void_br_bool_t13s_s2 (__fch_sign.698 __trgt.966)  <1381>;
                    (__either.967 var=423) undefined ()  <1382>;
                    if {
                        {
                            () if_expr (__either.967)  <641>;
                        } #79
                        {
                            (__fch_absZ.624 var=233) load (__M_DMw.4 __adr_absZ.100 absZ.585)  <644>;
                            (__tmp.625 var=234) __sint__mi___sint___sint (__ct_0.125 __fch_absZ.624)  <645>;
                        } #80 off=30
                        {
                            (__fch_absZ.626 var=235) load (__M_DMw.4 __adr_absZ.100 absZ.585)  <646>;
                            (__trgt.968 var=439) const ()  <1383>;
                            () void_j_t21s_s2 (__trgt.968)  <1384>;
                        } #81 off=29
                        {
                            (__tmp.627 var=236) merge (__tmp.625 __fch_absZ.626)  <647>;
                        } #82
                    } #78
                    #328 off=31
                    (__trgt.971 var=441) const ()  <1388>;
                    () void_j_t21s_s2 (__trgt.971)  <1389>;
                } #72
                {
                    (absZ.628 var=27) merge (absZ.26 absZ.585)  <649>;
                    (sig_low.629 var=32) merge (sig_low.187 sig_low.566)  <650>;
                    (sig_high.630 var=33) merge (sig_high.193 sig_high.572)  <651>;
                    (__rt.631 var=36) merge (__rt.552 __tmp.627)  <652>;
                } #84
            } #29
            #329 off=46
            (__trgt.974 var=443) const ()  <1393>;
            () void_j_t21s_s2 (__trgt.974)  <1394>;
        } #25
        {
            (sign.632 var=26) merge (sign.25 sign.256)  <653>;
            (absZ.633 var=27) merge (absZ.26 absZ.628)  <654>;
            (sig_low.634 var=32) merge (sig_low.187 sig_low.629)  <655>;
            (sig_high.635 var=33) merge (sig_high.193 sig_high.630)  <656>;
            (__rt.636 var=36) merge (__ct_0.125 __rt.631)  <657>;
        } #85
    } #20
    #88 off=48 nxt=-2
    (__rd___sp.638 var=34) rd_res_reg (__R_SP.11 __sp.55)  <659>;
    (__ct_52s0.639 var=238) const ()  <660>;
    (__tmp.641 var=240) __Pvoid__pl___Pvoid___sint (__rd___sp.638 __ct_52s0.639)  <662>;
    (__R_SP.642 var=12 __sp.643 var=18) wr_res_reg (__tmp.641 __sp.55)  <663>;
    () void___rts_jr_w32 (__la.35)  <664>;
    (__rt.644 var=36 stl=X off=10) assign (__rt.636)  <665>;
    () out (__rt.644)  <666>;
    () sink (__sp.643)  <674>;
    () sink (exact.104)  <675>;
    () sink (uA.136)  <677>;
    () sink (exp.173)  <679>;
    () sink (shiftDist.199)  <681>;
    () sink (sign.632)  <682>;
    () sink (absZ.633)  <683>;
    () sink (a_low.107)  <684>;
    () sink (a_high.113)  <685>;
    () sink (uiA_low.150)  <686>;
    () sink (uiA_high.156)  <687>;
    () sink (sig_low.634)  <688>;
    () sink (sig_high.635)  <689>;
} #0
0 : 'SoftFloat-3e/source/f64_to_i32_r_minMag.c';
----------
0 : (0,44:0,0);
3 : (0,44:47,0);
4 : (0,44:47,0);
5 : (0,44:34,0);
8 : (0,47:4,4);
9 : (0,59:9,12);
10 : (0,59:9,12);
11 : (0,60:8,13);
12 : (0,60:8,13);
14 : (0,61:8,14);
16 : (0,62:8,15);
17 : (0,65:14,16);
18 : (0,65:14,16);
19 : (0,66:12,16);
20 : (0,66:4,16);
24 : (0,72:8,18);
25 : (0,72:8,20);
27 : (0,76:9,22);
28 : (0,77:19,22);
29 : (0,77:4,22);
31 : (0,77:26,23);
33 : (0,79:17,23);
35 : (0,79:25,24);
36 : (0,79:17,25);
39 : (0,79:35,27);
41 : (0,79:43,28);
42 : (0,79:35,29);
45 : (0,78:8,31);
49 : (0,86:12,33);
50 : (0,86:12,35);
51 : (0,92:17,36);
52 : (0,92:27,36);
55 : (0,92:27,38);
58 : (0,92:34,40);
60 : (0,92:36,41);
61 : (0,93:8,42);
63 : (0,93:8,42);
65 : (0,93:23,43);
66 : (0,93:30,44);
72 : (0,91:8,55);
74 : (0,97:8,57);
76 : (0,98:9,58);
78 : (0,104:16,58);
80 : (0,104:18,59);
81 : (0,104:26,60);
88 : (0,104:4,69);
98 : (0,76:4,21);
112 : (0,79:12,23);
117 : (0,93:3,42);
122 : (0,104:11,58);
161 : (0,62:4,14);
219 : (0,79:43,28);
220 : (0,79:43,28);
221 : (0,79:43,28);
222 : (0,79:43,28);
223 : (0,79:43,28);
224 : (0,79:43,28);
237 : (0,92:27,37);
256 : (0,97:4,56);
272 : (0,98:14,57);
273 : (0,98:14,57);
274 : (0,98:14,57);
275 : (0,98:14,57);
276 : (0,98:14,57);
277 : (0,98:14,57);
278 : (0,98:14,57);
279 : (0,98:14,57);
280 : (0,98:14,57);
281 : (0,98:14,57);
282 : (0,98:14,57);
283 : (0,98:14,57);
302 : (0,61:4,13);
310 : (0,98:4,57);
----------
61 : (0,44:13,0);
62 : (0,44:13,0);
64 : (0,44:13,0);
65 : (0,44:13,0);
68 : (0,44:52,0);
69 : (0,44:52,0);
71 : (0,44:52,0);
73 : (0,44:44,0);
74 : (0,44:44,0);
76 : (0,44:44,0);
78 : (0,49:19,0);
79 : (0,49:19,0);
81 : (0,49:19,0);
83 : (0,50:18,0);
84 : (0,50:18,0);
86 : (0,50:18,0);
88 : (0,51:17,0);
89 : (0,51:17,0);
91 : (0,51:17,0);
93 : (0,52:18,0);
94 : (0,52:18,0);
96 : (0,52:18,0);
98 : (0,53:17,0);
99 : (0,53:17,0);
101 : (0,53:17,0);
103 : (0,54:9,0);
104 : (0,54:9,0);
106 : (0,54:9,0);
108 : (0,55:17,0);
109 : (0,55:17,0);
111 : (0,55:17,0);
114 : (0,44:47,0);
115 : (0,44:47,0);
117 : (0,44:34,0);
122 : (0,44:34,0);
127 : (0,47:4,4);
129 : (0,59:11,11);
134 : (0,59:11,11);
136 : (0,59:6,0);
140 : (0,59:6,11);
145 : (0,59:6,11);
146 : (0,59:9,12);
151 : (0,60:12,12);
156 : (0,60:12,12);
159 : (0,60:4,12);
164 : (0,60:4,12);
165 : (0,60:8,13);
172 : (0,61:28,13);
178 : (0,61:38,0);
180 : (0,61:38,13);
181 : (0,61:4,13);
182 : (0,61:8,14);
184 : (0,62:12,14);
189 : (0,62:12,14);
195 : (0,62:4,14);
200 : (0,62:4,14);
201 : (0,62:8,15);
202 : (0,65:22,0);
204 : (0,65:24,15);
205 : (0,65:22,15);
206 : (0,65:4,15);
207 : (0,65:14,16);
208 : (0,66:12,0);
210 : (0,66:15,16);
211 : (0,66:12,16);
246 : (0,66:4,16);
256 : (0,76:32,21);
265 : (0,76:4,21);
266 : (0,76:9,22);
267 : (0,77:9,22);
268 : (0,77:19,0);
270 : (0,77:19,22);
305 : (0,77:4,22);
306 : (0,79:12,23);
342 : (0,79:17,23);
343 : (0,79:21,24);
344 : (0,79:25,0);
384 : (0,79:35,27);
386 : (0,79:39,28);
391 : (0,79:39,28);
398 : (0,79:35,30);
433 : (0,78:8,31);
434 : (0,86:31,0);
437 : (0,92:13,36);
475 : (0,92:27,36);
477 : (0,92:30,37);
482 : (0,92:30,37);
489 : (0,92:27,39);
524 : (0,92:34,40);
525 : (0,92:36,0);
527 : (0,93:3,42);
563 : (0,93:8,42);
568 : (0,93:8,45);
569 : (0,92:34,47);
571 : (0,78:8,51);
574 : (0,97:4,56);
579 : (0,97:4,56);
585 : (0,97:4,56);
590 : (0,97:4,56);
591 : (0,97:8,57);
593 : (0,98:11,57);
598 : (0,98:11,57);
600 : (0,98:16,57);
603 : (0,98:4,57);
604 : (0,98:9,58);
605 : (0,104:11,58);
641 : (0,104:16,58);
644 : (0,104:19,59);
645 : (0,104:18,59);
646 : (0,104:26,60);
647 : (0,104:16,61);
649 : (0,77:4,65);
650 : (0,77:4,65);
651 : (0,77:4,65);
652 : (0,77:4,65);
653 : (0,66:4,68);
654 : (0,66:4,68);
655 : (0,66:4,68);
656 : (0,66:4,68);
657 : (0,66:4,68);
659 : (0,104:4,0);
660 : (0,104:4,0);
662 : (0,104:4,0);
663 : (0,104:4,69);
664 : (0,104:4,69);
665 : (0,104:4,0);
773 : (0,93:3,42);
780 : (0,104:11,58);
829 : (0,52:18,0);
836 : (0,50:18,0);
839 : (0,44:44,0);
843 : (0,49:19,0);
891 : (0,61:32,0);
902 : (0,61:32,13);
925 : (0,62:17,14);
957 : (0,76:36,21);
1001 : (0,79:43,28);
1002 : (0,79:43,28);
1003 : (0,79:43,28);
1035 : (0,97:8,56);
1055 : (0,98:14,57);
1058 : (0,98:14,57);
1059 : (0,98:14,57);
1060 : (0,98:14,57);
1061 : (0,98:14,57);
1062 : (0,98:14,57);
1063 : (0,98:14,57);
1064 : (0,98:14,57);
1065 : (0,98:14,57);
1067 : (0,98:14,57);
1068 : (0,98:14,57);
1070 : (0,98:14,57);
1120 : (0,61:32,0);
1124 : (0,76:36,0);
1130 : (0,62:19,0);
1132 : (0,79:45,0);
1134 : (0,97:11,0);
1172 : (0,92:27,37);
1173 : (0,92:27,37);
1179 : (0,76:4,21);
1301 : (0,79:12,23);
1302 : (0,79:43,28);
1303 : (0,79:25,24);
1304 : (0,79:17,26);
1305 : (0,92:17,36);
1340 : (0,79:17,23);
1343 : (0,79:43,28);
1347 : (0,79:35,27);
1350 : (0,92:27,36);
1353 : (0,93:8,42);
1359 : (0,92:34,40);
1366 : (0,78:8,31);
1371 : (0,98:14,57);
1376 : (0,98:14,57);
1381 : (0,104:16,58);
1386 : (0,77:4,22);
1391 : (0,66:4,16);

