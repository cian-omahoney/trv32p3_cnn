
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 16:37:37 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/s_approxRecipSqrt32_1.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint32_t softfloat_approxRecipSqrt32_1(unsigned, uint32_t)
Fsoftfloat_approxRecipSqrt32_1 : user_defined, called {
    fnm : "softfloat_approxRecipSqrt32_1" 'uint32_t softfloat_approxRecipSqrt32_1(unsigned, uint32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=32 );
}
****
***/

[
    0 : softfloat_approxRecipSqrt32_1 typ=u08 bnd=e stl=PMb
    4 : __M_DMh typ=w16 bnd=d stl=DMh
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=uint32_t_DMb
   20 : oddExpA typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__uint_DMb
   21 : index typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   22 : eps typ=w08 val=12t0 bnd=a sz=2 algn=2 stl=DMb tref=uint16_t_DMb
   23 : r0 typ=w08 val=14t0 bnd=a sz=2 algn=2 stl=DMb tref=uint16_t_DMb
   24 : softfloat_approxRecipSqrt_1k0s typ=w08 bnd=e algn=2 stl=DMb
   26 : softfloat_approxRecipSqrt_1k1s typ=w08 bnd=e algn=2 stl=DMb
   27 : ESqrR0 typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   28 : sigma0 typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=uint32_t_DMb
   29 : r typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   30 : sqrSigma0 typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=uint32_t_DMb
   31 : __rd___sp typ=w32 bnd=m
   33 : __ptr_softfloat_approxRecipSqrt_1k0s typ=w32 val=0a bnd=m adro=24
   35 : __ptr_softfloat_approxRecipSqrt_1k1s typ=w32 val=0a bnd=m adro=26
   36 : __la typ=w32 bnd=p tref=w32__
   37 : __rt typ=w32 bnd=p tref=uint32_t__
   38 : __arg_oddExpA typ=w32 bnd=p tref=__uint__
   39 : __arg_a typ=w32 bnd=p tref=uint32_t__
   40 : __ct_m32S0 typ=w32 val=-32S0 bnd=m
   42 : __tmp typ=w32 bnd=m
   44 : __ct_0t0 typ=w32 val=0t0 bnd=m
   46 : __adr_a typ=w32 bnd=m adro=19
   48 : __ct_4t0 typ=w32 val=4t0 bnd=m
   50 : __adr_oddExpA typ=w32 bnd=m adro=20
   52 : __ct_8t0 typ=w32 val=8t0 bnd=m
   54 : __adr_index typ=w32 bnd=m adro=21
   56 : __ct_12t0 typ=w32 val=12t0 bnd=m
   58 : __adr_eps typ=w32 bnd=m adro=22
   60 : __ct_14t0 typ=w32 val=14t0 bnd=m
   62 : __adr_r0 typ=w32 bnd=m adro=23
   64 : __ct_16t0 typ=w32 val=16t0 bnd=m
   66 : __adr_ESqrR0 typ=w32 bnd=m adro=27
   68 : __ct_20t0 typ=w32 val=20t0 bnd=m
   70 : __adr_sigma0 typ=w32 bnd=m adro=28
   72 : __ct_24t0 typ=w32 val=24t0 bnd=m
   74 : __adr_r typ=w32 bnd=m adro=29
   76 : __ct_28t0 typ=w32 val=28t0 bnd=m
   78 : __adr_sqrSigma0 typ=w32 bnd=m adro=30
   79 : __fch_a typ=w32 bnd=m
   80 : __ct_27 typ=w32 val=27f bnd=m
   82 : __tmp typ=w32 bnd=m
   83 : __ct_14 typ=w32 val=14f bnd=m
   85 : __tmp typ=w32 bnd=m
   86 : __fch_oddExpA typ=w32 bnd=m
   87 : __tmp typ=w32 bnd=m
   89 : __fch_a typ=w32 bnd=m
   90 : __ct_12 typ=w32 val=12f bnd=m
   92 : __tmp typ=w32 bnd=m
   93 : __tmp typ=__ushort bnd=m
   94 : __fch_index typ=w32 bnd=m
   97 : __tmp typ=w32 bnd=m
   98 : __tmp typ=w32 bnd=m
   99 : __fch_softfloat_approxRecipSqrt_1k0s typ=__ushort bnd=m
  101 : __fch_index typ=w32 bnd=m
  104 : __tmp typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  106 : __fch_softfloat_approxRecipSqrt_1k1s typ=__ushort bnd=m
  108 : __fch_eps typ=__ushort bnd=m
  110 : __tmp typ=w32 bnd=m
  111 : __ct_20 typ=w32 val=20f bnd=m
  113 : __tmp typ=w32 bnd=m
  114 : __tmp typ=w32 bnd=m
  115 : __tmp typ=__ushort bnd=m
  116 : __fch_r0 typ=__ushort bnd=m
  118 : __fch_r0 typ=__ushort bnd=m
  120 : __tmp typ=w32 bnd=m
  121 : __fch_oddExpA typ=w32 bnd=m
  122 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  124 : __tmp typ=bool bnd=m
  126 : __fch_ESqrR0 typ=w32 bnd=m
  127 : __ct_1 typ=w32 val=1f bnd=m
  129 : __tmp typ=w32 bnd=m
  130 : __fch_ESqrR0 typ=w32 bnd=m
  132 : __fch_a typ=w32 bnd=m
  135 : __ct_23 typ=w32 val=23f bnd=m
  139 : __tmp typ=w32 bnd=m
  140 : __fch_r0 typ=__ushort bnd=m
  142 : __ct_16 typ=w32 val=16f bnd=m
  144 : __tmp typ=w32 bnd=m
  146 : __fch_r0 typ=__ushort bnd=m
  148 : __fch_sigma0 typ=w32 bnd=m
  151 : __ct_25 typ=w32 val=25f bnd=m
  156 : __fch_sigma0 typ=w32 bnd=m
  158 : __fch_sigma0 typ=w32 bnd=m
  165 : __fch_r typ=w32 bnd=m
  167 : __fch_r typ=w32 bnd=m
  170 : __tmp typ=w32 bnd=m
  171 : __fch_r typ=w32 bnd=m
  172 : __ct_3 typ=w32 val=3f bnd=m
  174 : __tmp typ=w32 bnd=m
  175 : __tmp typ=w32 bnd=m
  176 : __fch_r0 typ=__ushort bnd=m
  180 : __tmp typ=w32 bnd=m
  181 : __tmp typ=w32 bnd=m
  183 : __fch_sqrSigma0 typ=w32 bnd=m
  191 : __fch_r typ=w32 bnd=m
  192 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  194 : __tmp typ=w32 bnd=m
  197 : __tmp typ=bool bnd=m
  202 : __ct_32s0 typ=w32 val=32s0 bnd=m
  204 : __tmp typ=w32 bnd=m
  215 : __apl_p1lo typ=w32 bnd=m tref=__uint__
  216 : __apl_p1hi typ=w32 bnd=m tref=__uint__
  258 : __apl_carries typ=w32 bnd=m tref=__uint__
  263 : __tmp typ=w32 bnd=m
  264 : __apl_r_low typ=w32 bnd=m tref=__uint__
  276 : __ct_4294967295 typ=w32 val=-1f bnd=m
  301 : __apl_r_low typ=w32 bnd=m tref=__uint__
  354 : __ct_9 typ=w32 val=9f bnd=m
  356 : __ct_7 typ=w32 val=7f bnd=m
  457 : __either typ=bool bnd=m
  458 : __trgt typ=t13s_s2 val=0j bnd=m
  459 : __trgt typ=t21s_s2 val=0j bnd=m
  460 : __trgt typ=t13s_s2 val=0j bnd=m
  461 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_approxRecipSqrt32_1 {
    #3 off=0
    (__M_DMh.3 var=4) st_def ()  <6>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (a.18 var=19) source ()  <29>;
    (oddExpA.19 var=20) source ()  <30>;
    (index.20 var=21) source ()  <31>;
    (eps.21 var=22) source ()  <32>;
    (r0.22 var=23) source ()  <33>;
    (softfloat_approxRecipSqrt_1k0s.23 var=24) source ()  <34>;
    (softfloat_approxRecipSqrt_1k1s.25 var=26) source ()  <36>;
    (ESqrR0.26 var=27) source ()  <37>;
    (sigma0.27 var=28) source ()  <38>;
    (r.28 var=29) source ()  <39>;
    (sqrSigma0.29 var=30) source ()  <40>;
    (__la.35 var=36 stl=X off=1) inp ()  <46>;
    (__la.36 var=36) deassign (__la.35)  <47>;
    (__arg_oddExpA.39 var=38 stl=X off=11) inp ()  <50>;
    (__arg_oddExpA.40 var=38) deassign (__arg_oddExpA.39)  <51>;
    (__arg_a.42 var=39 stl=X off=12) inp ()  <53>;
    (__arg_a.43 var=39) deassign (__arg_a.42)  <54>;
    (__rd___sp.45 var=31) rd_res_reg (__R_SP.11 __sp.17)  <56>;
    (__ct_m32S0.46 var=40) const ()  <57>;
    (__tmp.48 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_m32S0.46)  <59>;
    (__R_SP.49 var=12 __sp.50 var=18) wr_res_reg (__tmp.48 __sp.17)  <60>;
    (__rd___sp.51 var=31) rd_res_reg (__R_SP.11 __sp.50)  <62>;
    (__ct_0t0.52 var=44) const ()  <63>;
    (__adr_a.54 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_0t0.52)  <65>;
    (__rd___sp.56 var=31) rd_res_reg (__R_SP.11 __sp.50)  <67>;
    (__rd___sp.61 var=31) rd_res_reg (__R_SP.11 __sp.50)  <72>;
    (__rd___sp.66 var=31) rd_res_reg (__R_SP.11 __sp.50)  <77>;
    (__rd___sp.71 var=31) rd_res_reg (__R_SP.11 __sp.50)  <82>;
    (__rd___sp.76 var=31) rd_res_reg (__R_SP.11 __sp.50)  <87>;
    (__rd___sp.81 var=31) rd_res_reg (__R_SP.11 __sp.50)  <92>;
    (__rd___sp.86 var=31) rd_res_reg (__R_SP.11 __sp.50)  <97>;
    (__rd___sp.91 var=31) rd_res_reg (__R_SP.11 __sp.50)  <102>;
    (__M_DMw.96 var=5 a.97 var=19) store (__arg_a.43 __adr_a.54 a.18)  <107>;
    call {
        () chess_separator_scheduler ()  <108>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.57 var=48) const ()  <68>;
    (__adr_oddExpA.59 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_4t0.57)  <70>;
    (__M_DMw.98 var=5 oddExpA.99 var=20) store (__arg_oddExpA.40 __adr_oddExpA.59 oddExpA.19)  <109>;
    call {
        () chess_separator_scheduler ()  <110>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.62 var=52) const ()  <73>;
    (__adr_index.64 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_8t0.62)  <75>;
    (__fch_a.100 var=79) load (__M_DMw.4 __adr_a.54 a.97)  <111>;
    (__ct_27.101 var=80) const ()  <112>;
    (__tmp.103 var=82) __uint__rs___uint___sint (__fch_a.100 __ct_27.101)  <114>;
    (__ct_14.104 var=83) const ()  <115>;
    (__tmp.106 var=85) __uint__ad___uint___uint (__tmp.103 __ct_14.104)  <117>;
    (__fch_oddExpA.107 var=86) load (__M_DMw.4 __adr_oddExpA.59 oddExpA.99)  <118>;
    (__tmp.108 var=87) __uint__pl___uint___uint (__tmp.106 __fch_oddExpA.107)  <119>;
    (__M_DMw.110 var=5 index.111 var=21) store (__tmp.108 __adr_index.64 index.20)  <121>;
    call {
        () chess_separator_scheduler ()  <122>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.67 var=56) const ()  <78>;
    (__adr_eps.69 var=58) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_12t0.67)  <80>;
    (__fch_a.112 var=89) load (__M_DMw.4 __adr_a.54 a.97)  <123>;
    (__ct_12.113 var=90) const ()  <124>;
    (__tmp.115 var=92) __uint__rs___uint___sint (__fch_a.112 __ct_12.113)  <126>;
    (__tmp.116 var=93) __ushort___ushort___uint (__tmp.115)  <127>;
    (__M_DMh.117 var=4 eps.118 var=22) store (__tmp.116 __adr_eps.69 eps.21)  <128>;
    call {
        () chess_separator_scheduler ()  <129>;
    } #10 off=7
    #11 off=8
    (__ptr_softfloat_approxRecipSqrt_1k0s.31 var=33) const ()  <42>;
    (__ptr_softfloat_approxRecipSqrt_1k1s.33 var=35) const ()  <44>;
    (__ct_14t0.72 var=60) const ()  <83>;
    (__adr_r0.74 var=62) __Pvoid__pl___Pvoid___sint (__rd___sp.71 __ct_14t0.72)  <85>;
    (__fch_index.119 var=94) load (__M_DMw.4 __adr_index.64 index.111)  <130>;
    (__tmp.122 var=97) __sint__ls___sint___sint (__fch_index.119 __ct_1.189)  <133>;
    (__tmp.123 var=98) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_approxRecipSqrt_1k0s.31 __tmp.122)  <134>;
    (__fch_softfloat_approxRecipSqrt_1k0s.124 var=99) load (__M_DMh.3 __tmp.123 softfloat_approxRecipSqrt_1k0s.23)  <135>;
    (__fch_index.126 var=101) load (__M_DMw.4 __adr_index.64 index.111)  <137>;
    (__tmp.129 var=104) __sint__ls___sint___sint (__fch_index.126 __ct_1.189)  <140>;
    (__tmp.130 var=105) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_approxRecipSqrt_1k1s.33 __tmp.129)  <141>;
    (__fch_softfloat_approxRecipSqrt_1k1s.131 var=106) load (__M_DMh.3 __tmp.130 softfloat_approxRecipSqrt_1k1s.25)  <142>;
    (__fch_eps.133 var=108) load (__M_DMh.3 __adr_eps.69 eps.118)  <144>;
    (__tmp.135 var=110) __uint__ml___uint___uint (__fch_softfloat_approxRecipSqrt_1k1s.131 __fch_eps.133)  <146>;
    (__ct_20.136 var=111) const ()  <147>;
    (__tmp.138 var=113) __uint__rs___uint___sint (__tmp.135 __ct_20.136)  <149>;
    (__tmp.139 var=114) __uint__mi___uint___uint (__fch_softfloat_approxRecipSqrt_1k0s.124 __tmp.138)  <150>;
    (__tmp.140 var=115) __ushort___ushort___uint (__tmp.139)  <151>;
    (__M_DMh.141 var=4 r0.142 var=23) store (__tmp.140 __adr_r0.74 r0.22)  <152>;
    (__ct_1.189 var=127) const ()  <201>;
    call {
        () chess_separator_scheduler ()  <153>;
    } #12 off=9
    #13 off=10
    (__ct_16t0.77 var=64) const ()  <88>;
    (__adr_ESqrR0.79 var=66) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_16t0.77)  <90>;
    (__fch_r0.143 var=116) load (__M_DMh.3 __adr_r0.74 r0.142)  <154>;
    (__fch_r0.145 var=118) load (__M_DMh.3 __adr_r0.74 r0.142)  <156>;
    (__tmp.147 var=120) __uint__ml___uint___uint (__fch_r0.143 __fch_r0.145)  <158>;
    (__M_DMw.148 var=5 ESqrR0.149 var=27) store (__tmp.147 __adr_ESqrR0.79 ESqrR0.26)  <159>;
    call {
        () chess_separator_scheduler ()  <160>;
    } #14 off=11
    #15 off=12
    (__fch_oddExpA.150 var=121) load (__M_DMw.4 __adr_oddExpA.59 oddExpA.99)  <161>;
    (__ct_0.151 var=122) const ()  <162>;
    (__tmp.901 var=124) bool__ne___uint___uint (__fch_oddExpA.150 __ct_0.151)  <1378>;
    (__trgt.905 var=458) const ()  <1411>;
    () void_br_bool_t13s_s2 (__tmp.901 __trgt.905)  <1412>;
    (__either.906 var=457) undefined ()  <1413>;
    if {
        {
            () if_expr (__either.906)  <199>;
        } #17
        {
        } #21 off=14
        {
            (__fch_ESqrR0.188 var=126) load (__M_DMw.4 __adr_ESqrR0.79 ESqrR0.149)  <200>;
            (__tmp.191 var=129) __uint__ls___uint___sint (__fch_ESqrR0.188 __ct_1.189)  <203>;
            (__M_DMw.192 var=5 ESqrR0.193 var=27) store (__tmp.191 __adr_ESqrR0.79 ESqrR0.149)  <204>;
            (__trgt.907 var=459) const ()  <1414>;
            () void_j_t21s_s2 (__trgt.907)  <1415>;
        } #19 off=13
        {
            (ESqrR0.194 var=27) merge (ESqrR0.149 ESqrR0.193)  <206>;
        } #22
    } #16
    #467 off=15
    (__ct_20t0.82 var=68) const ()  <93>;
    (__adr_sigma0.84 var=70) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_20t0.82)  <95>;
    (__fch_ESqrR0.195 var=130) load (__M_DMw.4 __adr_ESqrR0.79 ESqrR0.194)  <207>;
    (__fch_a.197 var=132) load (__M_DMw.4 __adr_a.54 a.97)  <209>;
    (__ct_23.200 var=135) const ()  <212>;
    (__M_DMw.205 var=5 sigma0.206 var=28) store (__tmp.436 __adr_sigma0.84 sigma0.27)  <217>;
    (__apl_p1lo.370 var=215) __uint_mul___uint___uint (__fch_ESqrR0.195 __fch_a.197)  <494>;
    (__apl_p1hi.377 var=216) __uint_mulhu___uint___uint (__fch_ESqrR0.195 __fch_a.197)  <503>;
    (__apl_carries.416 var=258) __uint__ls___uint___sint (__apl_p1hi.377 __ct_9.728)  <552>;
    (__tmp.417 var=263) __uint__rs___uint___sint (__apl_p1lo.370 __ct_23.200)  <553>;
    (__apl_r_low.418 var=264) __uint__or___uint___uint (__tmp.417 __apl_carries.416)  <554>;
    (__ct_4294967295.435 var=276) const ()  <575>;
    (__tmp.436 var=139) __uint__er___uint___uint (__apl_r_low.418 __ct_4294967295.435)  <576>;
    (__ct_9.728 var=354) const ()  <969>;
    call {
        () chess_separator_scheduler ()  <218>;
    } #24 off=16
    #495 off=17
    (__ct_24t0.87 var=72) const ()  <98>;
    (__adr_r.89 var=74) __Pvoid__pl___Pvoid___sint (__rd___sp.86 __ct_24t0.87)  <100>;
    (__fch_r0.207 var=140) load (__M_DMh.3 __adr_r0.74 r0.142)  <219>;
    (__ct_16.209 var=142) const ()  <221>;
    (__tmp.211 var=144) __uint__ls___uint___sint (__fch_r0.207 __ct_16.209)  <223>;
    (__fch_r0.213 var=146) load (__M_DMh.3 __adr_r0.74 r0.142)  <225>;
    (__fch_sigma0.215 var=148) load (__M_DMw.4 __adr_sigma0.84 sigma0.206)  <227>;
    (__ct_25.218 var=151) const ()  <230>;
    (__M_DMw.223 var=5 r.224 var=29) store (__apl_r_low.524 __adr_r.89 r.28)  <235>;
    (__apl_p1lo.449 var=215) __uint_mul___uint___uint (__fch_r0.213 __fch_sigma0.215)  <594>;
    (__apl_p1hi.456 var=216) __uint_mulhu___uint___uint (__fch_r0.213 __fch_sigma0.215)  <603>;
    (__apl_carries.495 var=258) __uint__ls___uint___sint (__apl_p1hi.456 __ct_7.730)  <652>;
    (__tmp.496 var=263) __uint__rs___uint___sint (__apl_p1lo.449 __ct_25.218)  <653>;
    (__apl_r_low.497 var=264) __uint__or___uint___uint (__tmp.496 __apl_carries.495)  <654>;
    (__apl_r_low.524 var=301) __uint_add___uint___uint (__tmp.211 __apl_r_low.497)  <687>;
    (__ct_7.730 var=356) const ()  <973>;
    call {
        () chess_separator_scheduler ()  <236>;
    } #26 off=18
    #520 off=19
    (__ct_28t0.92 var=76) const ()  <103>;
    (__adr_sqrSigma0.94 var=78) __Pvoid__pl___Pvoid___sint (__rd___sp.91 __ct_28t0.92)  <105>;
    (__fch_sigma0.225 var=156) load (__M_DMw.4 __adr_sigma0.84 sigma0.206)  <237>;
    (__fch_sigma0.227 var=158) load (__M_DMw.4 __adr_sigma0.84 sigma0.206)  <239>;
    (__M_DMw.234 var=5 sqrSigma0.235 var=30) store (__apl_p1hi.562 __adr_sqrSigma0.94 sqrSigma0.29)  <246>;
    (__apl_p1hi.562 var=216) __uint_mulhu___uint___uint (__fch_sigma0.225 __fch_sigma0.227)  <733>;
    call {
        () chess_separator_scheduler ()  <247>;
    } #28 off=20
    #557 off=21
    (__fch_r.236 var=165) load (__M_DMw.4 __adr_r.89 r.224)  <248>;
    (__fch_r.238 var=167) load (__M_DMw.4 __adr_r.89 r.224)  <250>;
    (__tmp.241 var=170) __uint__rs___uint___sint (__fch_r.238 __ct_1.189)  <253>;
    (__fch_r.242 var=171) load (__M_DMw.4 __adr_r.89 r.224)  <254>;
    (__ct_3.243 var=172) const ()  <255>;
    (__tmp.245 var=174) __uint__rs___uint___sint (__fch_r.242 __ct_3.243)  <257>;
    (__tmp.246 var=175) __uint__pl___uint___uint (__tmp.241 __tmp.245)  <258>;
    (__fch_r0.247 var=176) load (__M_DMh.3 __adr_r0.74 r0.142)  <259>;
    (__tmp.251 var=180) __uint__ls___uint___sint (__fch_r0.247 __ct_14.104)  <263>;
    (__tmp.252 var=181) __uint__mi___uint___uint (__tmp.246 __tmp.251)  <264>;
    (__fch_sqrSigma0.254 var=183) load (__M_DMw.4 __adr_sqrSigma0.94 sqrSigma0.235)  <266>;
    (__M_DMw.262 var=5 r.263 var=29) store (__apl_r_low.705 __adr_r.89 r.224)  <274>;
    (__apl_p1hi.637 var=216) __uint_mulhu___uint___uint (__tmp.252 __fch_sqrSigma0.254)  <826>;
    (__apl_r_low.680 var=264) __uint__rs___uint___sint (__apl_p1hi.637 __ct_16.209)  <879>;
    (__apl_r_low.705 var=301) __uint_add___uint___uint (__fch_r.236 __apl_r_low.680)  <910>;
    call {
        () chess_separator_scheduler ()  <275>;
    } #30 off=22
    #31 off=23
    (__fch_r.264 var=191) load (__M_DMw.4 __adr_r.89 r.263)  <276>;
    (__ct_2147483648.265 var=192) const ()  <277>;
    (__tmp.267 var=194) __uint__ad___uint___uint (__fch_r.264 __ct_2147483648.265)  <279>;
    (__tmp.902 var=197) bool__ne___uint___uint (__tmp.267 __ct_0.151)  <1379>;
    (__trgt.908 var=460) const ()  <1416>;
    () void_br_bool_t13s_s2 (__tmp.902 __trgt.908)  <1417>;
    (__either.909 var=457) undefined ()  <1418>;
    if {
        {
            () if_expr (__either.909)  <317>;
        } #33
        {
        } #37 off=25
        {
            (__M_DMw.307 var=5 r.308 var=29) store (__ct_2147483648.265 __adr_r.89 r.263)  <320>;
            (__trgt.910 var=461) const ()  <1419>;
            () void_j_t21s_s2 (__trgt.910)  <1420>;
        } #35 off=24
        {
            (r.309 var=29) merge (r.263 r.308)  <322>;
        } #38
    } #32
    #41 off=26 nxt=-2
    (__rt.310 var=37) load (__M_DMw.4 __adr_r.89 r.309)  <323>;
    (__rd___sp.311 var=31) rd_res_reg (__R_SP.11 __sp.50)  <324>;
    (__ct_32s0.312 var=202) const ()  <325>;
    (__tmp.314 var=204) __Pvoid__pl___Pvoid___sint (__rd___sp.311 __ct_32s0.312)  <327>;
    (__R_SP.315 var=12 __sp.316 var=18) wr_res_reg (__tmp.314 __sp.50)  <328>;
    () void___rts_jr_w32 (__la.36)  <329>;
    (__rt.317 var=37 stl=X off=10) assign (__rt.310)  <330>;
    () out (__rt.317)  <331>;
    () sink (__sp.316)  <337>;
    () sink (a.97)  <338>;
    () sink (oddExpA.99)  <339>;
    () sink (index.111)  <340>;
    () sink (eps.118)  <341>;
    () sink (r0.142)  <342>;
    () sink (ESqrR0.194)  <346>;
    () sink (sigma0.206)  <347>;
    () sink (r.309)  <348>;
    () sink (sqrSigma0.235)  <349>;
} #0
0 : 'SoftFloat-3e/source/s_approxRecipSqrt32_1.c';
----------
0 : (0,45:0,0);
3 : (0,45:62,0);
4 : (0,45:62,0);
5 : (0,45:40,0);
6 : (0,45:40,0);
7 : (0,54:10,10);
8 : (0,54:10,10);
9 : (0,55:8,11);
10 : (0,55:8,11);
11 : (0,56:7,12);
12 : (0,56:7,12);
13 : (0,59:11,13);
14 : (0,59:11,13);
15 : (0,60:9,13);
16 : (0,60:4,13);
19 : (0,60:28,15);
21 : (0,60:4,16);
24 : (0,61:11,20);
26 : (0,62:6,21);
28 : (0,63:14,22);
30 : (0,64:6,23);
31 : (0,67:9,23);
32 : (0,67:4,23);
35 : (0,67:32,25);
37 : (0,67:4,26);
41 : (0,68:4,29);
467 : (0,61:4,19);
495 : (0,62:4,20);
520 : (0,63:4,21);
557 : (0,64:4,22);
----------
42 : (0,56:9,0);
44 : (0,57:17,0);
56 : (0,45:9,0);
57 : (0,45:9,0);
59 : (0,45:9,0);
60 : (0,45:9,0);
62 : (0,45:71,0);
63 : (0,45:71,0);
65 : (0,45:71,0);
67 : (0,45:53,0);
68 : (0,45:53,0);
70 : (0,45:53,0);
72 : (0,47:8,0);
73 : (0,47:8,0);
75 : (0,47:8,0);
77 : (0,48:13,0);
78 : (0,48:13,0);
80 : (0,48:13,0);
82 : (0,48:18,0);
83 : (0,48:18,0);
85 : (0,48:18,0);
87 : (0,49:18,0);
88 : (0,49:18,0);
90 : (0,49:18,0);
92 : (0,50:13,0);
93 : (0,50:13,0);
95 : (0,50:13,0);
97 : (0,51:18,0);
98 : (0,51:18,0);
100 : (0,51:18,0);
102 : (0,52:13,0);
103 : (0,52:13,0);
105 : (0,52:13,0);
107 : (0,45:62,0);
108 : (0,45:62,0);
109 : (0,45:40,0);
110 : (0,45:40,0);
111 : (0,54:13,9);
112 : (0,54:16,0);
114 : (0,54:14,9);
115 : (0,54:19,0);
117 : (0,54:19,9);
118 : (0,54:28,9);
119 : (0,54:26,9);
121 : (0,54:4,9);
122 : (0,54:10,10);
123 : (0,55:22,10);
124 : (0,55:25,0);
126 : (0,55:23,10);
127 : (0,55:10,10);
128 : (0,55:4,10);
129 : (0,55:8,11);
130 : (0,56:40,11);
133 : (0,56:40,11);
134 : (0,56:39,11);
135 : (0,56:39,11);
137 : (0,57:48,11);
140 : (0,57:48,11);
141 : (0,57:47,11);
142 : (0,57:47,11);
144 : (0,57:73,11);
146 : (0,57:55,11);
147 : (0,58:22,0);
149 : (0,58:20,11);
150 : (0,57:13,11);
151 : (0,56:7,11);
152 : (0,56:4,11);
153 : (0,56:7,12);
154 : (0,59:29,12);
156 : (0,59:34,12);
158 : (0,59:32,12);
159 : (0,59:4,12);
160 : (0,59:11,13);
161 : (0,60:11,13);
162 : (0,60:9,0);
199 : (0,60:4,13);
200 : (0,60:21,14);
201 : (0,60:32,0);
203 : (0,60:28,14);
204 : (0,60:21,14);
206 : (0,60:4,18);
207 : (0,61:43,19);
209 : (0,61:68,19);
212 : (0,61:72,0);
217 : (0,61:4,19);
218 : (0,61:11,20);
219 : (0,62:25,20);
221 : (0,62:29,0);
223 : (0,62:27,20);
225 : (0,62:37,20);
227 : (0,62:58,20);
230 : (0,62:67,0);
235 : (0,62:4,20);
236 : (0,62:6,21);
237 : (0,63:33,21);
239 : (0,63:42,21);
246 : (0,63:4,21);
247 : (0,63:14,22);
248 : (0,64:4,22);
250 : (0,64:23,22);
253 : (0,64:24,22);
254 : (0,64:32,22);
255 : (0,64:35,0);
257 : (0,64:33,22);
258 : (0,64:29,22);
259 : (0,64:57,22);
263 : (0,64:59,22);
264 : (0,64:38,22);
266 : (0,65:32,22);
274 : (0,64:4,22);
275 : (0,64:6,23);
276 : (0,67:12,23);
277 : (0,67:14,0);
279 : (0,67:14,23);
317 : (0,67:4,23);
320 : (0,67:30,24);
322 : (0,67:4,28);
323 : (0,68:11,29);
324 : (0,68:4,0);
325 : (0,68:4,0);
327 : (0,68:4,0);
328 : (0,68:4,29);
329 : (0,68:4,29);
330 : (0,68:11,0);
494 : (0,61:50,19);
503 : (0,61:50,19);
552 : (0,61:70,19);
553 : (0,61:70,19);
554 : (0,61:70,19);
575 : (0,61:13,0);
576 : (0,61:13,19);
594 : (0,62:40,20);
603 : (0,62:40,20);
652 : (0,62:65,20);
653 : (0,62:65,20);
654 : (0,62:65,20);
687 : (0,62:33,20);
733 : (0,63:40,21);
826 : (0,65:14,22);
879 : (0,66:13,22);
910 : (0,64:6,22);
969 : (0,61:70,0);
973 : (0,62:65,0);
1378 : (0,60:9,13);
1379 : (0,67:9,23);
1412 : (0,60:4,13);
1417 : (0,67:4,23);

