
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 13:35:58 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/s_normSubnormalF32Sig.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)
Fsoftfloat_normSubnormalF32Sig : user_defined, called {
    fnm : "softfloat_normSubnormalF32Sig" 'exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)';
    arg : ( w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=16 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : softfloat_normSubnormalF32Sig typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : sig typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   20 : softfloat_countLeadingZeros8 typ=w08 bnd=e sz=256 algn=1 stl=DMb tref=__A256__uchar_DMb
   22 : shiftDist typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast8_t_DMb
   23 : z typ=w08 val=8t0 bnd=a sz=8 algn=4 stl=DMb tref=exp16_sig32_DMb
   24 : __extDMb_exp16_sig32 typ=w08 bnd=b stl=DMb
   25 : z_exp typ=w08 bnd=B stl=DMb
   26 : z_sig typ=w08 bnd=B stl=DMb
   27 : __extPMb_void typ=u08 bnd=b stl=PMb
   28 : __extDMb_w32 typ=w08 bnd=b stl=DMb
   29 : __rd___sp typ=w32 bnd=m
   31 : __ptr_softfloat_countLeadingZeros8 typ=w32 val=0a bnd=m adro=20
   32 : __la typ=w32 bnd=p tref=w32__
   33 : __aptr___rt typ=w32 bnd=p tref=__Pexp16_sig32__
   34 : __arg_sig typ=w32 bnd=p tref=uint_fast32_t__
   35 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   37 : __tmp typ=w32 bnd=m
   39 : __ct_0t0 typ=w32 val=0t0 bnd=m
   41 : __adr_sig typ=w32 bnd=m adro=19
   43 : __ct_4t0 typ=w32 val=4t0 bnd=m
   45 : __adr_shiftDist typ=w32 bnd=m adro=22
   47 : __ct_8t0 typ=w32 val=8t0 bnd=m
   49 : __adr_z typ=w32 bnd=m adro=23
   52 : __inl_a typ=w32 bnd=m tref=uint32_t__
   53 : __inl_count typ=w32 bnd=m tref=uint_fast8_t__
   68 : __fch_sig typ=w32 bnd=m
   69 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   71 : __ct_65536 typ=t20s_rp12 val=16f bnd=m
   73 : __tmp typ=bool bnd=m
   74 : __ct_16 typ=w32 val=16f bnd=m
   79 : __ct_16777216 typ=t20s_rp12 val=4096f bnd=m
   81 : __tmp typ=bool bnd=m
   82 : __ct_8 typ=w32 val=8f bnd=m
   88 : __ct_24 typ=w32 val=24f bnd=m
   90 : __tmp typ=w32 bnd=m
   92 : __tmp typ=w32 bnd=m
   93 : __fch_softfloat_countLeadingZeros8 typ=__uchar bnd=m
   99 : __tmp typ=w32 bnd=m
  101 : __ct_1 typ=w32 val=1f bnd=m
  103 : __fch_shiftDist typ=w32 bnd=m
  104 : __tmp typ=w32 bnd=m
  108 : __fch_sig typ=w32 bnd=m
  109 : __fch_shiftDist typ=w32 bnd=m
  110 : __tmp typ=w32 bnd=m
  111 : __ct_4 typ=w32 val=4f bnd=m
  129 : __fchtmp typ=w32 bnd=m
  142 : __ct_16s0 typ=w32 val=16s0 bnd=m
  144 : __tmp typ=w32 bnd=m
  156 : __ct_4294967288 typ=w32 val=-8f bnd=m
  158 : __shv___aptr___rt typ=w32 bnd=m
  160 : __ct_12t0 typ=w32 val=12t0 bnd=m
  161 : __adr_z typ=w32 bnd=m adro=23
  162 : __adr_z typ=w32 bnd=m adro=23
  171 : __either typ=bool bnd=m
  172 : __trgt typ=t13s_s2 val=0j bnd=m
  173 : __trgt typ=t21s_s2 val=0j bnd=m
  174 : __trgt typ=t13s_s2 val=0j bnd=m
  175 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_normSubnormalF32Sig {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (sig.18 var=19) source ()  <29>;
    (softfloat_countLeadingZeros8.19 var=20) source ()  <30>;
    (shiftDist.21 var=22) source ()  <32>;
    (z.22 var=23) source ()  <33>;
    (__extDMb_exp16_sig32.23 var=24) source ()  <34>;
    (z_exp.24 var=25) source ()  <35>;
    (z_sig.25 var=26) source ()  <36>;
    (__extPMb_void.26 var=27) source ()  <37>;
    (__extDMb_w32.27 var=28) source ()  <38>;
    (__la.31 var=32 stl=X off=1) inp ()  <42>;
    (__la.32 var=32) deassign (__la.31)  <43>;
    (__aptr___rt.34 var=33 stl=X off=10) inp ()  <45>;
    (__aptr___rt.35 var=33) deassign (__aptr___rt.34)  <46>;
    (__arg_sig.37 var=34 stl=X off=11) inp ()  <48>;
    (__arg_sig.38 var=34) deassign (__arg_sig.37)  <49>;
    (__rd___sp.40 var=29) rd_res_reg (__R_SP.11 __sp.17)  <51>;
    (__ct_m16S0.41 var=35) const ()  <52>;
    (__tmp.43 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_m16S0.41)  <54>;
    (__R_SP.44 var=12 __sp.45 var=18) wr_res_reg (__tmp.43 __sp.17)  <55>;
    (__rd___sp.46 var=29) rd_res_reg (__R_SP.11 __sp.45)  <57>;
    (__ct_0t0.47 var=39) const ()  <58>;
    (__adr_sig.49 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_0t0.47)  <60>;
    (__rd___sp.51 var=29) rd_res_reg (__R_SP.11 __sp.45)  <62>;
    (__rd___sp.56 var=29) rd_res_reg (__R_SP.11 __sp.45)  <67>;
    (__M_DMw.79 var=5 sig.80 var=19) store (__arg_sig.38 __adr_sig.49 sig.18)  <90>;
    call {
        () chess_separator_scheduler ()  <93>;
    } #6 off=1
    #7 off=2
    (__fch_sig.83 var=68) load (__M_DMw.4 __adr_sig.49 sig.80)  <95>;
    call {
        () chess_separator_scheduler ()  <102>;
    } #12 off=3
    #13 off=4
    (__ct_0.86 var=69) const ()  <100>;
    (__ct_65536.88 var=71) const ()  <103>;
    (__tmp.625 var=73) bool__ge___uint___uint (__fch_sig.83 __ct_65536.88)  <727>;
    (__trgt.629 var=172) const ()  <749>;
    () void_br_bool_t13s_s2 (__tmp.625 __trgt.629)  <750>;
    (__either.630 var=171) undefined ()  <751>;
    if {
        {
            () if_expr (__either.630)  <147>;
        } #15
        {
        } #21 off=6
        {
            (__ct_16.132 var=74) const ()  <148>;
            (__inl_a.136 var=52) __uint__ls___uint___sint (__fch_sig.83 __ct_16.132)  <153>;
            (__trgt.631 var=173) const ()  <752>;
            () void_j_t21s_s2 (__trgt.631)  <753>;
        } #19 off=5
        {
            (__inl_a.137 var=52) merge (__fch_sig.83 __inl_a.136)  <155>;
            (__inl_count.138 var=53) merge (__ct_0.86 __ct_16.132)  <156>;
        } #22
    } #14
    #23 off=7
    (__ct_16777216.139 var=79) const ()  <157>;
    (__tmp.626 var=81) bool__ge___uint___uint (__inl_a.137 __ct_16777216.139)  <728>;
    (__trgt.632 var=174) const ()  <754>;
    () void_br_bool_t13s_s2 (__tmp.626 __trgt.632)  <755>;
    (__either.633 var=171) undefined ()  <756>;
    if {
        {
            () if_expr (__either.633)  <201>;
        } #25
        {
        } #31 off=11
        {
            #27 off=8
            (__ct_8.183 var=82) const ()  <202>;
            (__inl_count.185 var=53) __uint__pl___uint___uint (__inl_count.138 __ct_8.183)  <204>;
            call {
                () chess_separator_scheduler ()  <205>;
            } #28 off=9
            #29 off=10
            (__inl_a.188 var=52) __uint__ls___uint___sint (__inl_a.137 __ct_8.183)  <208>;
            (__trgt.634 var=175) const ()  <757>;
            () void_j_t21s_s2 (__trgt.634)  <758>;
        } #26
        {
            (__inl_a.189 var=52) merge (__inl_a.137 __inl_a.188)  <210>;
            (__inl_count.190 var=53) merge (__inl_count.138 __inl_count.185)  <211>;
        } #32
    } #24
    #33 off=12
    (__ptr_softfloat_countLeadingZeros8.29 var=31) const ()  <40>;
    (__ct_24.191 var=88) const ()  <212>;
    (__tmp.193 var=90) __uint__rs___uint___sint (__inl_a.189 __ct_24.191)  <214>;
    (__tmp.195 var=92) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_countLeadingZeros8.29 __tmp.193)  <216>;
    (__fch_softfloat_countLeadingZeros8.196 var=93) load (__M_DMb.2 __tmp.195 softfloat_countLeadingZeros8.19)  <217>;
    (__inl_count.199 var=53) __uint__pl___uint___uint (__inl_count.190 __fch_softfloat_countLeadingZeros8.196)  <220>;
    call {
        () chess_separator_scheduler ()  <222>;
    } #35 off=13
    #36 off=14
    (__ct_4t0.52 var=43) const ()  <63>;
    (__adr_shiftDist.54 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.52)  <65>;
    (__tmp.202 var=99) __uint__pl___uint___uint (__inl_count.199 __ct_4294967288.604)  <225>;
    (__M_DMw.204 var=5 shiftDist.205 var=22) store (__tmp.202 __adr_shiftDist.54 shiftDist.21)  <227>;
    (__ct_4294967288.604 var=156) const ()  <662>;
    call {
        () chess_separator_scheduler ()  <228>;
    } #37 off=15
    #38 off=16
    (__ct_8t0.57 var=47) const ()  <68>;
    (__adr_z.59 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_8t0.57)  <70>;
    (__ct_1.206 var=101) const ()  <229>;
    (__fch_shiftDist.208 var=103) load (__M_DMw.4 __adr_shiftDist.54 shiftDist.205)  <231>;
    (__tmp.209 var=104) __sint__mi___sint___sint (__ct_1.206 __fch_shiftDist.208)  <232>;
    (__M_DMw.213 var=5 z_exp.214 var=25) store (__tmp.209 __adr_z.59 z_exp.24)  <236>;
    call {
        () chess_separator_scheduler ()  <237>;
    } #39 off=17
    #40 off=18
    (__fch_sig.215 var=108) load (__M_DMw.4 __adr_sig.49 sig.80)  <238>;
    (__fch_shiftDist.216 var=109) load (__M_DMw.4 __adr_shiftDist.54 shiftDist.205)  <239>;
    (__tmp.217 var=110) __uint__ls___uint___sint (__fch_sig.215 __fch_shiftDist.216)  <240>;
    (__M_DMw.221 var=5 z_sig.222 var=26) store (__tmp.217 __adr_z.619 z_sig.25)  <244>;
    (__ct_12t0.618 var=160) const ()  <679>;
    (__adr_z.619 var=161) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_12t0.618)  <681>;
    call {
        () chess_separator_scheduler ()  <360>;
    } #71 off=19
    #79 off=20
    (__ct_4.218 var=111) const ()  <241>;
    (__fchtmp.415 var=129) load (__M_DMw.4 __adr_z.59 __extDMb_w32.27 __extPMb_void.26 z.22 z_exp.214 z_sig.222)  <453>;
    (__M_DMw.421 var=5 __extDMb_exp16_sig32.422 var=24 __extDMb_w32.423 var=28 __extPMb_void.424 var=27) store (__fchtmp.415 __aptr___rt.35 __extDMb_exp16_sig32.23 __extDMb_w32.27 __extPMb_void.26)  <459>;
    (__shv___aptr___rt.615 var=158) __Pvoid__pl___Pvoid___sint (__aptr___rt.35 __ct_4.218)  <676>;
    call {
        () chess_separator_scheduler ()  <466>;
    } #84 off=21
    #116 off=22
    (__fchtmp.608 var=129) load (__M_DMw.4 __adr_z.620 __extDMb_w32.423 __extPMb_void.424 z.22 z_exp.214 z_sig.222)  <668>;
    (__M_DMw.609 var=5 __extDMb_exp16_sig32.610 var=24 __extDMb_w32.611 var=28 __extPMb_void.612 var=27) store (__fchtmp.608 __shv___aptr___rt.615 __extDMb_exp16_sig32.422 __extDMb_w32.423 __extPMb_void.424)  <669>;
    (__adr_z.620 var=162) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_12t0.618)  <682>;
    call {
        () chess_separator_scheduler ()  <535>;
    } #94 off=23
    #97 off=24 nxt=-2
    (__rd___sp.536 var=29) rd_res_reg (__R_SP.11 __sp.45)  <537>;
    (__ct_16s0.537 var=142) const ()  <538>;
    (__tmp.539 var=144) __Pvoid__pl___Pvoid___sint (__rd___sp.536 __ct_16s0.537)  <540>;
    (__R_SP.540 var=12 __sp.541 var=18) wr_res_reg (__tmp.539 __sp.45)  <541>;
    () void___rts_jr_w32 (__la.32)  <542>;
    () sink (__sp.541)  <548>;
    () sink (sig.80)  <549>;
    () sink (shiftDist.205)  <552>;
    () sink (__extDMb_exp16_sig32.610)  <554>;
    () sink (z_exp.214)  <555>;
    () sink (z_sig.222)  <556>;
    () sink (__extPMb_void.612)  <557>;
    () sink (__extDMb_w32.611)  <558>;
} #0
0 : 'SoftFloat-3e/source/s_normSubnormalF32Sig.c';
----------
0 : (0,41:0,0);
3 : (0,41:50,0);
6 : (0,46:16,5);
7 : (0,46:51,6);
12 : (0,46:16,8);
13 : (0,46:16,9);
14 : (0,46:16,9);
19 : (0,46:16,12);
21 : (0,46:16,14);
23 : (0,46:16,17);
24 : (0,46:16,17);
26 : (0,46:16,18);
27 : (0,46:16,19);
28 : (0,46:16,19);
29 : (0,46:16,20);
31 : (0,46:16,22);
33 : (0,46:16,26);
35 : (0,46:16,27);
36 : (0,46:14,30);
37 : (0,46:14,30);
38 : (0,47:10,31);
39 : (0,47:10,31);
40 : (0,48:10,32);
71 : (0,49:11,52);
79 : (0,49:11,55);
84 : (0,49:11,58);
94 : (0,49:11,82);
97 : (0,49:4,82);
116 : (0,49:11,55);
----------
40 : (0,46:16,0);
51 : (0,41:19,0);
52 : (0,41:19,0);
54 : (0,41:19,0);
55 : (0,41:19,0);
57 : (0,41:64,0);
58 : (0,41:64,0);
60 : (0,41:64,0);
62 : (0,43:16,0);
63 : (0,43:16,0);
65 : (0,43:16,0);
67 : (0,44:23,0);
68 : (0,44:23,0);
70 : (0,44:23,0);
90 : (0,41:50,0);
93 : (0,46:16,5);
95 : (0,46:47,6);
100 : (0,46:16,0);
102 : (0,46:16,8);
103 : (0,46:16,0);
147 : (0,46:16,9);
148 : (0,46:16,0);
153 : (0,46:16,11);
155 : (0,46:16,16);
156 : (0,46:16,16);
157 : (0,46:16,0);
201 : (0,46:16,17);
202 : (0,46:16,0);
204 : (0,46:16,18);
205 : (0,46:16,19);
208 : (0,46:16,19);
210 : (0,46:16,24);
211 : (0,46:16,24);
212 : (0,46:16,0);
214 : (0,46:16,25);
216 : (0,46:16,25);
217 : (0,46:16,25);
220 : (0,46:16,25);
222 : (0,46:16,27);
225 : (0,46:53,29);
227 : (0,46:4,29);
228 : (0,46:14,30);
229 : (0,47:14,0);
231 : (0,47:16,30);
232 : (0,47:14,30);
236 : (0,47:5,30);
237 : (0,47:10,31);
238 : (0,48:12,31);
239 : (0,48:17,31);
240 : (0,48:15,31);
241 : (0,48:5,0);
244 : (0,48:5,31);
360 : (0,49:11,52);
453 : (0,49:11,54);
459 : (0,49:11,54);
466 : (0,49:11,58);
535 : (0,49:11,82);
537 : (0,49:4,0);
538 : (0,49:4,0);
540 : (0,49:4,0);
541 : (0,49:4,82);
542 : (0,49:4,82);
662 : (0,46:53,0);
668 : (0,49:11,54);
669 : (0,49:11,54);
679 : (0,44:23,0);
681 : (0,48:5,0);
727 : (0,46:16,9);
728 : (0,46:16,17);
750 : (0,46:16,9);
755 : (0,46:16,17);

