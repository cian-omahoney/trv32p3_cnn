
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:13:56 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f32_to_ui32_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint_fast32_t f32_to_ui32_r_minMag(float32_t, bool)
Ff32_to_ui32_r_minMag : user_defined, called {
    fnm : "f32_to_ui32_r_minMag" 'unsigned long f32_to_ui32_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=36 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_to_ui32_r_minMag typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : exact typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   20 : a typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=float32_t_DMb
   21 : uA typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   22 : uiA typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   23 : exp typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   24 : sig typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   25 : shiftDist typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   26 : sign typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   27 : z typ=w08 val=32t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   28 : __rd___sp typ=w32 bnd=m
   29 : __la typ=w32 bnd=p tref=w32__
   30 : __rt typ=w32 bnd=p tref=uint_fast32_t__
   31 : __arg_a typ=w32 bnd=p tref=float32_t___1
   32 : __arg_exact typ=w32 bnd=p tref=bool__
   34 : __ct_m36S0 typ=w32 val=-36S0 bnd=m
   36 : __tmp typ=w32 bnd=m
   39 : __ct_0t0 typ=w32 val=0t0 bnd=m
   41 : __adr_exact typ=w32 bnd=m adro=19
   43 : __ct_4t0 typ=w32 val=4t0 bnd=m
   45 : __adr_a typ=w32 bnd=m adro=20
   47 : __ct_8t0 typ=w32 val=8t0 bnd=m
   49 : __adr_uA typ=w32 bnd=m adro=21
   51 : __ct_12t0 typ=w32 val=12t0 bnd=m
   53 : __adr_uiA typ=w32 bnd=m adro=22
   55 : __ct_16t0 typ=w32 val=16t0 bnd=m
   57 : __adr_exp typ=w32 bnd=m adro=23
   59 : __ct_20t0 typ=w32 val=20t0 bnd=m
   61 : __adr_sig typ=w32 bnd=m adro=24
   63 : __ct_24t0 typ=w32 val=24t0 bnd=m
   65 : __adr_shiftDist typ=w32 bnd=m adro=25
   67 : __ct_28t0 typ=w32 val=28t0 bnd=m
   69 : __adr_sign typ=w32 bnd=m adro=26
   71 : __ct_32t0 typ=w32 val=32t0 bnd=m
   73 : __adr_z typ=w32 bnd=m adro=27
   78 : __fch_a typ=w32 bnd=m
   79 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   85 : __fch_uA typ=w32 bnd=m
   86 : __fch_uiA typ=w32 bnd=m
   87 : __ct_23 typ=w32 val=23f bnd=m
   89 : __tmp typ=w32 bnd=m
   91 : __ct_255 typ=w32 val=255f bnd=m
   93 : __tmp typ=w32 bnd=m
   94 : __fch_uiA typ=w32 bnd=m
   95 : __ct_8388607 typ=w32 val=8388607f bnd=m
   97 : __tmp typ=w32 bnd=m
   98 : __ct_158 typ=w32 val=158f bnd=m
  100 : __fch_exp typ=w32 bnd=m
  101 : __tmp typ=w32 bnd=m
  102 : __ct_32 typ=w32 val=32f bnd=m
  104 : __fch_shiftDist typ=w32 bnd=m
  105 : __tmp typ=bool bnd=m
  108 : __fch_uiA typ=w32 bnd=m
  109 : __ct_31 typ=w32 val=31f bnd=m
  111 : __tmp typ=w32 bnd=m
  115 : __tmp typ=w32 bnd=m
  116 : __fch_sign typ=w32 bnd=m
  117 : __fch_sign typ=bool bnd=m
  120 : __fch_shiftDist typ=w32 bnd=m
  123 : __tmp typ=bool bnd=m
  124 : __tmp typ=bool bnd=m
  125 : __fch_exp typ=w32 bnd=m
  128 : __tmp typ=bool bnd=m
  129 : __fch_sig typ=w32 bnd=m
  132 : __tmp typ=bool bnd=m
  135 : __tmp typ=bool bnd=m
  136 : __ct_4294967295 typ=w32 val=-1f bnd=m
  138 : __fch_sign typ=w32 bnd=m
  139 : __fch_sign typ=bool bnd=m
  144 : __tmp typ=w32 bnd=m
  145 : __tmp typ=w32 bnd=m
  146 : __fch_sig typ=w32 bnd=m
  147 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
  149 : __tmp typ=w32 bnd=m
  150 : __ct_8 typ=w32 val=8f bnd=m
  152 : __tmp typ=w32 bnd=m
  153 : __fch_sig typ=w32 bnd=m
  154 : __fch_shiftDist typ=w32 bnd=m
  155 : __tmp typ=w32 bnd=m
  158 : __ct_36s0 typ=w32 val=36s0 bnd=m
  160 : __tmp typ=w32 bnd=m
  186 : __true typ=bool val=1f bnd=m
  187 : __false typ=bool val=0f bnd=m
  188 : __either typ=bool bnd=m
  189 : __trgt typ=t13s_s2 val=0j bnd=m
  190 : __trgt typ=t13s_s2 val=0j bnd=m
  191 : __trgt typ=t13s_s2 val=0j bnd=m
  192 : __trgt typ=t21s_s2 val=0j bnd=m
  193 : __trgt typ=t13s_s2 val=0j bnd=m
  194 : __trgt typ=t21s_s2 val=0j bnd=m
  195 : __trgt typ=t13s_s2 val=0j bnd=m
  196 : __trgt typ=t21s_s2 val=0j bnd=m
  197 : __trgt typ=t13s_s2 val=0j bnd=m
  198 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_to_ui32_r_minMag {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (exact.18 var=19) source ()  <29>;
    (a.19 var=20) source ()  <30>;
    (uA.20 var=21) source ()  <31>;
    (uiA.21 var=22) source ()  <32>;
    (exp.22 var=23) source ()  <33>;
    (sig.23 var=24) source ()  <34>;
    (shiftDist.24 var=25) source ()  <35>;
    (sign.25 var=26) source ()  <36>;
    (z.26 var=27) source ()  <37>;
    (__la.28 var=29 stl=X off=1) inp ()  <39>;
    (__la.29 var=29) deassign (__la.28)  <40>;
    (__arg_a.32 var=31 stl=X off=11) inp ()  <43>;
    (__arg_a.33 var=31) deassign (__arg_a.32)  <44>;
    (__arg_exact.35 var=32 stl=X off=12) inp ()  <46>;
    (__arg_exact.36 var=32) deassign (__arg_exact.35)  <47>;
    (__rd___sp.38 var=28) rd_res_reg (__R_SP.11 __sp.17)  <49>;
    (__ct_m36S0.39 var=34) const ()  <50>;
    (__tmp.41 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.38 __ct_m36S0.39)  <52>;
    (__R_SP.42 var=12 __sp.43 var=18) wr_res_reg (__tmp.41 __sp.17)  <53>;
    (__rd___sp.45 var=28) rd_res_reg (__R_SP.11 __sp.43)  <56>;
    (__ct_0t0.46 var=39) const ()  <57>;
    (__adr_exact.48 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_0t0.46)  <59>;
    (__rd___sp.50 var=28) rd_res_reg (__R_SP.11 __sp.43)  <61>;
    (__rd___sp.55 var=28) rd_res_reg (__R_SP.11 __sp.43)  <66>;
    (__rd___sp.60 var=28) rd_res_reg (__R_SP.11 __sp.43)  <71>;
    (__rd___sp.65 var=28) rd_res_reg (__R_SP.11 __sp.43)  <76>;
    (__rd___sp.70 var=28) rd_res_reg (__R_SP.11 __sp.43)  <81>;
    (__rd___sp.75 var=28) rd_res_reg (__R_SP.11 __sp.43)  <86>;
    (__rd___sp.80 var=28) rd_res_reg (__R_SP.11 __sp.43)  <91>;
    (__rd___sp.85 var=28) rd_res_reg (__R_SP.11 __sp.43)  <96>;
    (__M_DMw.91 var=5 exact.92 var=19) store (__arg_exact.36 __adr_exact.48 exact.18)  <102>;
    call {
        () chess_separator_scheduler ()  <103>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.51 var=43) const ()  <62>;
    (__adr_a.53 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.51)  <64>;
    (__M_DMw.93 var=5 a.94 var=20) store (__arg_a.33 __adr_a.53 a.19)  <104>;
    call {
        () chess_separator_scheduler ()  <109>;
    } #8 off=3
    #9 off=4
    (__ct_8t0.56 var=47) const ()  <67>;
    (__adr_uA.58 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.56)  <69>;
    (__fch_a.98 var=78) load (__M_DMw.4 __adr_a.53 a.94)  <110>;
    (__M_DMw.102 var=5 uA.103 var=21) store (__fch_a.98 __adr_uA.58 uA.20)  <114>;
    call {
        () chess_separator_scheduler ()  <115>;
    } #10 off=5
    #11 off=6
    (__ct_12t0.61 var=51) const ()  <72>;
    (__adr_uiA.63 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_12t0.61)  <74>;
    (__fch_uA.107 var=85) load (__M_DMw.4 __adr_uA.58 uA.103)  <119>;
    (__M_DMw.108 var=5 uiA.109 var=22) store (__fch_uA.107 __adr_uiA.63 uiA.21)  <120>;
    call {
        () chess_separator_scheduler ()  <121>;
    } #12 off=7
    #13 off=8
    (__ct_16t0.66 var=55) const ()  <77>;
    (__adr_exp.68 var=57) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_16t0.66)  <79>;
    (__fch_uiA.110 var=86) load (__M_DMw.4 __adr_uiA.63 uiA.109)  <122>;
    (__ct_23.111 var=87) const ()  <123>;
    (__tmp.113 var=89) __uint__rs___uint___sint (__fch_uiA.110 __ct_23.111)  <125>;
    (__ct_255.115 var=91) const ()  <127>;
    (__tmp.117 var=93) __sint__ad___sint___sint (__tmp.113 __ct_255.115)  <129>;
    (__M_DMw.118 var=5 exp.119 var=23) store (__tmp.117 __adr_exp.68 exp.22)  <130>;
    call {
        () chess_separator_scheduler ()  <131>;
    } #14 off=9
    #15 off=10
    (__ct_20t0.71 var=59) const ()  <82>;
    (__adr_sig.73 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.70 __ct_20t0.71)  <84>;
    (__fch_uiA.120 var=94) load (__M_DMw.4 __adr_uiA.63 uiA.109)  <132>;
    (__ct_8388607.121 var=95) const ()  <133>;
    (__tmp.123 var=97) __uint__ad___uint___uint (__fch_uiA.120 __ct_8388607.121)  <135>;
    (__M_DMw.124 var=5 sig.125 var=24) store (__tmp.123 __adr_sig.73 sig.23)  <136>;
    call {
        () chess_separator_scheduler ()  <137>;
    } #16 off=11
    #17 off=12
    (__ct_24t0.76 var=63) const ()  <87>;
    (__adr_shiftDist.78 var=65) __Pvoid__pl___Pvoid___sint (__rd___sp.75 __ct_24t0.76)  <89>;
    (__ct_158.126 var=98) const ()  <138>;
    (__fch_exp.128 var=100) load (__M_DMw.4 __adr_exp.68 exp.119)  <140>;
    (__tmp.129 var=101) __sint__mi___sint___sint (__ct_158.126 __fch_exp.128)  <141>;
    (__M_DMw.130 var=5 shiftDist.131 var=25) store (__tmp.129 __adr_shiftDist.78 shiftDist.24)  <142>;
    call {
        () chess_separator_scheduler ()  <143>;
    } #18 off=13
    #19 off=14
    (__ct_0.99 var=79) const ()  <111>;
    (__ct_32.132 var=102) const ()  <144>;
    (__fch_shiftDist.134 var=104) load (__M_DMw.4 __adr_shiftDist.78 shiftDist.131)  <146>;
    (__tmp.135 var=105) bool__ge___sint___sint (__fch_shiftDist.134 __ct_32.132)  <147>;
    (__trgt.449 var=197) const ()  <627>;
    () void_br_bool_t13s_s2 (__tmp.135 __trgt.449)  <628>;
    (__either.450 var=188) undefined ()  <629>;
    if {
        {
            () if_expr (__either.450)  <176>;
        } #21
        {
        } #24 off=33
        {
            #73 off=15
            (__ct_28t0.81 var=67) const ()  <92>;
            (__adr_sign.83 var=69) __Pvoid__pl___Pvoid___sint (__rd___sp.80 __ct_28t0.81)  <94>;
            (__fch_uiA.166 var=108) load (__M_DMw.4 __adr_uiA.63 uiA.109)  <180>;
            (__ct_31.167 var=109) const ()  <181>;
            (__tmp.169 var=111) __uint__rs___uint___sint (__fch_uiA.166 __ct_31.167)  <183>;
            (__M_DMw.174 var=5 sign.175 var=26) store (__tmp.425 __adr_sign.83 sign.25)  <188>;
            (__tmp.425 var=115) __sint_sne0___sint (__tmp.169)  <522>;
            call {
                () chess_separator_scheduler ()  <189>;
            } #27 off=16
            #87 off=17
            (__fch_sign.176 var=116) load (__M_DMw.4 __adr_sign.83 sign.175)  <190>;
            (__fch_sign.413 var=117) bool__ne___sint___sint (__fch_sign.176 __ct_0.99)  <479>;
            (__trgt.434 var=189) const ()  <604>;
            () void_br_bool_t13s_s2 (__fch_sign.413 __trgt.434)  <605>;
            (__either.435 var=188) undefined ()  <606>;
            if {
                {
                    () if_expr (__either.435)  <220>;
                } #30
                {
                    (__true.445 var=186) const ()  <621>;
                } #31
                {
                    (__fch_shiftDist.208 var=120) load (__M_DMw.4 __adr_shiftDist.78 shiftDist.131)  <223>;
                    (__tmp.211 var=123) bool__lt___sint___sint (__fch_shiftDist.208 __ct_0.99)  <226>;
                    (__trgt.446 var=195) const ()  <622>;
                    () void_br_bool_t13s_s2 (__tmp.211 __trgt.446)  <623>;
                    (__either.447 var=188) undefined ()  <624>;
                } #32 off=18
                {
                    (__tmp.212 var=124) merge (__true.445 __either.447)  <227>;
                } #33
            } #29
            if {
                {
                    () if_expr (__tmp.212)  <256>;
                } #36
                {
                    #38 off=24
                    (__fch_exp.241 var=125) load (__M_DMw.4 __adr_exp.68 exp.119)  <257>;
                    (__ct_4294967295.308 var=136) const ()  <326>;
                    (__tmp.431 var=128) bool__ne___sint___sint (__fch_exp.241 __ct_255.115)  <578>;
                    (__trgt.436 var=190) const ()  <607>;
                    () void_br_bool_t13s_s2 (__tmp.431 __trgt.436)  <608>;
                    (__either.437 var=188) undefined ()  <609>;
                    if {
                        {
                            () if_expr (__either.437)  <289>;
                        } #40
                        {
                            (__false.441 var=187) const ()  <615>;
                        } #42
                        {
                            (__fch_sig.273 var=129) load (__M_DMw.4 __adr_sig.73 sig.125)  <290>;
                            (__tmp.276 var=132) bool__ne___uint___uint (__fch_sig.273 __ct_0.99)  <293>;
                            (__trgt.442 var=193) const ()  <616>;
                            () void_br_bool_t13s_s2 (__tmp.276 __trgt.442)  <617>;
                            (__either.443 var=188) undefined ()  <618>;
                        } #41 off=25
                        {
                            (__tmp.279 var=135) merge (__false.441 __either.443)  <296>;
                        } #43
                    } #39
                    if {
                        {
                            () if_expr (__tmp.279)  <325>;
                        } #46
                        {
                        } #47 off=30
                        {
                            #92 off=26
                            (__fch_sign.310 var=138) load (__M_DMw.4 __adr_sign.83 sign.175)  <328>;
                            (__fch_sign.417 var=139) bool__ne___sint___sint (__fch_sign.310 __ct_0.99)  <486>;
                            (__trgt.438 var=191) const ()  <610>;
                            () void_br_bool_t13s_s2 (__fch_sign.417 __trgt.438)  <611>;
                            (__either.439 var=188) undefined ()  <612>;
                            if {
                                {
                                    () if_expr (__either.439)  <358>;
                                } #51
                                {
                                } #52 off=28
                                {
                                    (__trgt.440 var=192) const ()  <613>;
                                    () void_j_t21s_s2 (__trgt.440)  <614>;
                                } #53 off=27
                                {
                                    (__tmp.344 var=144) merge (__ct_0.99 __ct_4294967295.308)  <363>;
                                } #54
                            } #50
                            #104 off=29
                            (__trgt.444 var=194) const ()  <619>;
                            () void_j_t21s_s2 (__trgt.444)  <620>;
                        } #48
                        {
                            (__tmp.345 var=145) merge (__ct_4294967295.308 __tmp.344)  <364>;
                        } #55
                    } #45
                } #37
                {
                    #58 off=19
                    (__fch_sig.346 var=146) load (__M_DMw.4 __adr_sig.73 sig.125)  <366>;
                    (__ct_8388608.347 var=147) const ()  <367>;
                    (__tmp.349 var=149) __uint__or___uint___uint (__fch_sig.346 __ct_8388608.347)  <369>;
                    (__ct_8.350 var=150) const ()  <370>;
                    (__tmp.352 var=152) __uint__ls___uint___sint (__tmp.349 __ct_8.350)  <372>;
                    (__M_DMw.353 var=5 sig.354 var=24) store (__tmp.352 __adr_sig.73 sig.125)  <373>;
                    call {
                        () chess_separator_scheduler ()  <374>;
                    } #59 off=20
                    #60 off=21
                    (__ct_32t0.86 var=71) const ()  <97>;
                    (__adr_z.88 var=73) __Pvoid__pl___Pvoid___sint (__rd___sp.85 __ct_32t0.86)  <99>;
                    (__fch_sig.355 var=153) load (__M_DMw.4 __adr_sig.73 sig.354)  <375>;
                    (__fch_shiftDist.356 var=154) load (__M_DMw.4 __adr_shiftDist.78 shiftDist.131)  <376>;
                    (__tmp.357 var=155) __uint__rs___uint___sint (__fch_sig.355 __fch_shiftDist.356)  <377>;
                    (__M_DMw.358 var=5 z.359 var=27) store (__tmp.357 __adr_z.88 z.26)  <378>;
                    call {
                        () chess_separator_scheduler ()  <379>;
                    } #61 off=22
                    #62 off=23
                    (__rt.360 var=30) load (__M_DMw.4 __adr_z.88 z.359)  <380>;
                    (__trgt.448 var=196) const ()  <625>;
                    () void_j_t21s_s2 (__trgt.448)  <626>;
                } #57
                {
                    (sig.361 var=24) merge (sig.125 sig.354)  <382>;
                    (z.362 var=27) merge (z.26 z.359)  <383>;
                    (__rt.363 var=30) merge (__tmp.345 __rt.360)  <384>;
                } #64
            } #35
            #106 off=32
            (__trgt.451 var=198) const ()  <630>;
            () void_j_t21s_s2 (__trgt.451)  <631>;
        } #25
        {
            (sig.364 var=24) merge (sig.125 sig.361)  <385>;
            (sign.365 var=26) merge (sign.25 sign.175)  <386>;
            (z.366 var=27) merge (z.26 z.362)  <387>;
            (__rt.367 var=30) merge (__ct_0.99 __rt.363)  <388>;
        } #65
    } #20
    #68 off=34 nxt=-2
    (__rd___sp.369 var=28) rd_res_reg (__R_SP.11 __sp.43)  <390>;
    (__ct_36s0.370 var=158) const ()  <391>;
    (__tmp.372 var=160) __Pvoid__pl___Pvoid___sint (__rd___sp.369 __ct_36s0.370)  <393>;
    (__R_SP.373 var=12 __sp.374 var=18) wr_res_reg (__tmp.372 __sp.43)  <394>;
    () void___rts_jr_w32 (__la.29)  <395>;
    (__rt.375 var=30 stl=X off=10) assign (__rt.367)  <396>;
    () out (__rt.375)  <397>;
    () sink (__sp.374)  <403>;
    () sink (exact.92)  <404>;
    () sink (a.94)  <405>;
    () sink (uA.103)  <406>;
    () sink (uiA.109)  <407>;
    () sink (exp.119)  <408>;
    () sink (sig.364)  <409>;
    () sink (shiftDist.131)  <410>;
    () sink (sign.365)  <411>;
    () sink (z.366)  <412>;
} #0
0 : 'SoftFloat-3e/source/f32_to_ui32_r_minMag.c';
----------
0 : (0,44:0,0);
3 : (0,44:49,0);
4 : (0,44:49,0);
5 : (0,44:36,0);
8 : (0,47:4,4);
9 : (0,59:9,12);
10 : (0,59:9,12);
11 : (0,60:8,13);
12 : (0,60:8,13);
13 : (0,61:8,14);
14 : (0,61:8,14);
15 : (0,62:8,15);
16 : (0,62:8,15);
17 : (0,65:14,16);
18 : (0,65:14,16);
19 : (0,66:12,16);
20 : (0,66:4,16);
24 : (0,72:8,18);
25 : (0,72:8,20);
27 : (0,76:9,22);
29 : (0,77:14,22);
31 : (0,77:14,23);
32 : (0,77:28,24);
35 : (0,77:4,26);
37 : (0,77:35,27);
38 : (0,82:17,27);
39 : (0,82:26,27);
41 : (0,82:26,28);
42 : (0,82:26,29);
45 : (0,82:33,31);
47 : (0,82:35,32);
48 : (0,83:8,33);
50 : (0,83:8,33);
52 : (0,83:8,34);
53 : (0,83:14,35);
57 : (0,81:8,42);
58 : (0,87:8,44);
59 : (0,87:8,44);
60 : (0,88:6,45);
61 : (0,88:6,45);
62 : (0,94:4,46);
68 : (0,94:4,52);
73 : (0,76:4,21);
87 : (0,77:9,22);
92 : (0,83:3,33);
----------
49 : (0,44:14,0);
50 : (0,44:14,0);
52 : (0,44:14,0);
53 : (0,44:14,0);
56 : (0,44:54,0);
57 : (0,44:54,0);
59 : (0,44:54,0);
61 : (0,44:46,0);
62 : (0,44:46,0);
64 : (0,44:46,0);
66 : (0,49:19,0);
67 : (0,49:19,0);
69 : (0,49:19,0);
71 : (0,50:18,0);
72 : (0,50:18,0);
74 : (0,50:18,0);
76 : (0,51:17,0);
77 : (0,51:17,0);
79 : (0,51:17,0);
81 : (0,52:18,0);
82 : (0,52:18,0);
84 : (0,52:18,0);
86 : (0,53:17,0);
87 : (0,53:17,0);
89 : (0,53:17,0);
91 : (0,54:9,0);
92 : (0,54:9,0);
94 : (0,54:9,0);
96 : (0,55:18,0);
97 : (0,55:18,0);
99 : (0,55:18,0);
102 : (0,44:49,0);
103 : (0,44:49,0);
104 : (0,44:36,0);
109 : (0,47:4,4);
110 : (0,59:11,11);
111 : (0,59:6,0);
114 : (0,59:6,11);
115 : (0,59:9,12);
119 : (0,60:12,12);
120 : (0,60:4,12);
121 : (0,60:8,13);
122 : (0,61:28,13);
123 : (0,61:34,0);
125 : (0,61:32,13);
127 : (0,61:38,0);
129 : (0,61:38,13);
130 : (0,61:4,13);
131 : (0,61:8,14);
132 : (0,62:12,14);
133 : (0,62:17,0);
135 : (0,62:17,14);
136 : (0,62:4,14);
137 : (0,62:8,15);
138 : (0,65:21,0);
140 : (0,65:23,15);
141 : (0,65:21,15);
142 : (0,65:4,15);
143 : (0,65:14,16);
144 : (0,66:12,0);
146 : (0,66:15,16);
147 : (0,66:12,16);
176 : (0,66:4,16);
180 : (0,76:32,21);
181 : (0,76:38,0);
183 : (0,76:36,21);
188 : (0,76:4,21);
189 : (0,76:9,22);
190 : (0,77:9,22);
220 : (0,77:14,22);
223 : (0,77:18,24);
226 : (0,77:28,24);
227 : (0,77:14,25);
256 : (0,77:4,26);
257 : (0,82:13,27);
289 : (0,82:26,27);
290 : (0,82:29,28);
293 : (0,82:26,28);
296 : (0,82:26,30);
325 : (0,82:33,31);
326 : (0,82:35,0);
328 : (0,83:3,33);
358 : (0,83:8,33);
363 : (0,83:8,36);
364 : (0,82:33,38);
366 : (0,87:11,43);
367 : (0,87:15,0);
369 : (0,87:15,43);
370 : (0,87:30,0);
372 : (0,87:28,43);
373 : (0,87:4,43);
374 : (0,87:8,44);
375 : (0,88:8,44);
376 : (0,88:13,44);
377 : (0,88:11,44);
378 : (0,88:4,44);
379 : (0,88:6,45);
380 : (0,94:11,45);
382 : (0,77:4,48);
383 : (0,77:4,48);
384 : (0,77:4,48);
385 : (0,66:4,51);
386 : (0,66:4,51);
387 : (0,66:4,51);
388 : (0,66:4,51);
390 : (0,94:4,0);
391 : (0,94:4,0);
393 : (0,94:4,0);
394 : (0,94:4,52);
395 : (0,94:4,52);
396 : (0,94:4,0);
479 : (0,77:9,22);
486 : (0,83:3,33);
522 : (0,76:4,21);
578 : (0,82:17,27);
605 : (0,77:14,22);
608 : (0,82:26,27);
611 : (0,83:8,33);
617 : (0,82:33,31);
623 : (0,77:4,26);
628 : (0,66:4,16);

