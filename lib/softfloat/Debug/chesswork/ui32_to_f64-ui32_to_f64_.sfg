
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 13:36:00 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/ui32_to_f64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t ui32_to_f64(uint32_t)
Fui32_to_f64 : user_defined, called {
    fnm : "ui32_to_f64" 'float64_t ui32_to_f64(unsigned)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=24 );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : ui32_to_f64 typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=uint32_t_DMb
   20 : uiZ typ=w08 val=4t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   21 : softfloat_countLeadingZeros8 typ=w08 bnd=e sz=256 algn=1 stl=DMb tref=__A256__uchar_DMb
   23 : shiftDist typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast8_t_DMb
   24 : uZ typ=w08 val=16t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   25 : uiZ_low typ=w08 bnd=B stl=DMb
   26 : uiZ_high typ=w08 bnd=B stl=DMb
   27 : __rd___sp typ=w32 bnd=m
   29 : __ptr_softfloat_countLeadingZeros8 typ=w32 val=0a bnd=m adro=21
   30 : __la typ=w32 bnd=p tref=w32__
   32 : __rt_low typ=w32 bnd=m tref=__uint__
   33 : __rt_high typ=w32 bnd=m tref=__uint__
   34 : __arg_a typ=w32 bnd=p tref=uint32_t__
   35 : __ct_m24S0 typ=w32 val=-24S0 bnd=m
   37 : __tmp typ=w32 bnd=m
   39 : __ct_0t0 typ=w32 val=0t0 bnd=m
   41 : __adr_a typ=w32 bnd=m adro=19
   43 : __ct_4t0 typ=w32 val=4t0 bnd=m
   45 : __adr_uiZ typ=w32 bnd=m adro=20
   47 : __ct_12t0 typ=w32 val=12t0 bnd=m
   49 : __adr_shiftDist typ=w32 bnd=m adro=23
   51 : __ct_16t0 typ=w32 val=16t0 bnd=m
   53 : __adr_uZ typ=w32 bnd=m adro=24
   56 : __inl_a typ=w32 bnd=m lscp=11 tref=uint32_t__
   57 : __inl_count typ=w32 bnd=m lscp=11 tref=uint_fast8_t__
   58 : __fch_a typ=w32 bnd=m
   59 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   61 : __tmp typ=bool bnd=m
   69 : __fch_a typ=w32 bnd=m
   72 : __ct_65536 typ=t20s_rp12 val=16f bnd=m
   74 : __tmp typ=bool bnd=m
   75 : __ct_16 typ=w32 val=16f bnd=m
   80 : __ct_16777216 typ=t20s_rp12 val=4096f bnd=m
   82 : __tmp typ=bool bnd=m
   83 : __ct_8 typ=w32 val=8f bnd=m
   89 : __ct_24 typ=w32 val=24f bnd=m
   91 : __tmp typ=w32 bnd=m
   93 : __tmp typ=w32 bnd=m
   94 : __fch_softfloat_countLeadingZeros8 typ=__uchar bnd=m
   98 : __ct_21 typ=w32 val=21f bnd=m
  100 : __tmp typ=w32 bnd=m
  104 : __ct_1074 typ=w32 val=1074f bnd=m
  106 : __fch_shiftDist typ=w32 bnd=m
  107 : __tmp typ=w32 bnd=m
  113 : __fch_a typ=w32 bnd=m
  115 : __fch_shiftDist typ=w32 bnd=m
  123 : __fch_uiZ_low typ=w32 bnd=m
  126 : __fch_uiZ_high typ=w32 bnd=m
  138 : __fch_uZ typ=w32 bnd=m
  141 : __fch_uZ typ=w32 bnd=m
  142 : __ct_24s0 typ=w32 val=24s0 bnd=m
  144 : __tmp typ=w32 bnd=m
  158 : __ct_8t0 typ=w32 val=8t0 bnd=m
  159 : __adr_uiZ typ=w32 bnd=m adro=20
  160 : __adr_uiZ typ=w32 bnd=m adro=20
  161 : __adr_uiZ typ=w32 bnd=m adro=20
  162 : __ct_20t0 typ=w32 val=20t0 bnd=m
  163 : __adr_uZ typ=w32 bnd=m adro=24
  164 : __adr_uZ typ=w32 bnd=m adro=24
  167 : __rt_low typ=w32 bnd=m tref=__uint__
  168 : __rt_high typ=w32 bnd=m tref=__uint__
  172 : __apl_ff typ=w32 bnd=m tref=__sint__
  173 : __apl_carries typ=w32 bnd=m tref=__uint__
  175 : __tmp typ=bool bnd=m
  176 : __tmp typ=bool bnd=m
  177 : __tmp typ=w32 bnd=m
  178 : __apl_r_low typ=w32 bnd=m tref=__uint__
  180 : __apl_r_high typ=w32 bnd=m tref=__uint__
  182 : __ct_m32 typ=w32 val=-32f bnd=m
  189 : __tmp_low typ=w32 bnd=m
  191 : __tmp_high typ=w32 bnd=m
  205 : __apl_r_high typ=w32 bnd=m tref=__uint__
  220 : __ct_20 typ=w32 val=20f bnd=m
  251 : __either typ=bool bnd=m
  252 : __trgt typ=t13s_s2 val=0j bnd=m
  253 : __trgt typ=t21s_s2 val=0j bnd=m
  254 : __trgt typ=t13s_s2 val=0j bnd=m
  255 : __trgt typ=t21s_s2 val=0j bnd=m
  256 : __trgt typ=t13s_s2 val=0j bnd=m
  257 : __trgt typ=t21s_s2 val=0j bnd=m
  258 : __trgt typ=t13s_s2 val=0j bnd=m
  259 : __trgt typ=t21s_s2 val=0j bnd=m
  260 : __trgt typ=t13s_s2 val=0j bnd=m
  261 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fui32_to_f64 {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (a.18 var=19) source ()  <29>;
    (softfloat_countLeadingZeros8.20 var=21) source ()  <31>;
    (shiftDist.22 var=23) source ()  <33>;
    (uZ.23 var=24) source ()  <34>;
    (uiZ_low.24 var=25) source ()  <35>;
    (uiZ_high.25 var=26) source ()  <36>;
    (__la.29 var=30 stl=X off=1) inp ()  <40>;
    (__la.30 var=30) deassign (__la.29)  <41>;
    (__arg_a.37 var=34 stl=X off=12) inp ()  <48>;
    (__arg_a.38 var=34) deassign (__arg_a.37)  <49>;
    (__rd___sp.40 var=27) rd_res_reg (__R_SP.11 __sp.17)  <51>;
    (__ct_m24S0.41 var=35) const ()  <52>;
    (__tmp.43 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_m24S0.41)  <54>;
    (__R_SP.44 var=12 __sp.45 var=18) wr_res_reg (__tmp.43 __sp.17)  <55>;
    (__rd___sp.46 var=27) rd_res_reg (__R_SP.11 __sp.45)  <57>;
    (__ct_0t0.47 var=39) const ()  <58>;
    (__adr_a.49 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_0t0.47)  <60>;
    (__rd___sp.51 var=27) rd_res_reg (__R_SP.11 __sp.45)  <62>;
    (__rd___sp.56 var=27) rd_res_reg (__R_SP.11 __sp.45)  <67>;
    (__rd___sp.61 var=27) rd_res_reg (__R_SP.11 __sp.45)  <72>;
    (__M_DMw.70 var=5 a.71 var=19) store (__arg_a.38 __adr_a.49 a.18)  <81>;
    call {
        () chess_separator_scheduler ()  <82>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.52 var=43) const ()  <63>;
    (__adr_uiZ.54 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.52)  <65>;
    (__fch_a.72 var=58) load (__M_DMw.4 __adr_a.49 a.71)  <83>;
    (__ct_0.73 var=59) const ()  <84>;
    (__tmp.313 var=61) bool__eq___uint___uint (__fch_a.72 __ct_0.73)  <398>;
    (__ct_8t0.319 var=158) const ()  <404>;
    (__trgt.466 var=260) const ()  <801>;
    () void_br_bool_t13s_s2 (__tmp.313 __trgt.466)  <802>;
    (__either.467 var=251) undefined ()  <803>;
    if {
        {
            () if_expr (__either.467)  <114>;
        } #7
        {
            (__M_DMw.106 var=5 uiZ_low.107 var=25) store (__ct_0.73 __adr_uiZ.54 uiZ_low.24)  <118>;
            (__M_DMw.112 var=5 uiZ_high.113 var=26) store (__ct_0.73 __adr_uiZ.320 uiZ_high.25)  <123>;
            (__adr_uiZ.320 var=159) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_8t0.319)  <406>;
        } #9 off=24
        {
            #14 off=3
            (__fch_a.116 var=69) load (__M_DMw.4 __adr_a.49 a.71)  <128>;
            call {
                () chess_separator_scheduler ()  <135>;
            } #19 off=4
            #20 off=5
            (__ct_65536.121 var=72) const ()  <136>;
            (__tmp.450 var=74) bool__ge___uint___uint (__fch_a.116 __ct_65536.121)  <756>;
            (__trgt.454 var=252) const ()  <781>;
            () void_br_bool_t13s_s2 (__tmp.450 __trgt.454)  <782>;
            (__either.455 var=251) undefined ()  <783>;
            if {
                {
                    () if_expr (__either.455)  <165>;
                } #22
                {
                } #28 off=7
                {
                    (__ct_16.150 var=75) const ()  <166>;
                    (__inl_a.154 var=56) __uint__ls___uint___sint (__fch_a.116 __ct_16.150)  <171>;
                    (__trgt.456 var=253) const ()  <784>;
                    () void_j_t21s_s2 (__trgt.456)  <785>;
                } #26 off=6
                {
                    (__inl_a.155 var=56) merge (__fch_a.116 __inl_a.154)  <173>;
                    (__inl_count.156 var=57) merge (__ct_0.73 __ct_16.150)  <174>;
                } #29
            } #21
            #30 off=8
            (__ct_16777216.157 var=80) const ()  <175>;
            (__tmp.451 var=82) bool__ge___uint___uint (__inl_a.155 __ct_16777216.157)  <757>;
            (__trgt.457 var=254) const ()  <786>;
            () void_br_bool_t13s_s2 (__tmp.451 __trgt.457)  <787>;
            (__either.458 var=251) undefined ()  <788>;
            if {
                {
                    () if_expr (__either.458)  <204>;
                } #32
                {
                } #38 off=12
                {
                    #34 off=9
                    (__ct_8.186 var=83) const ()  <205>;
                    (__inl_count.188 var=57) __uint__pl___uint___uint (__inl_count.156 __ct_8.186)  <207>;
                    call {
                        () chess_separator_scheduler ()  <208>;
                    } #35 off=10
                    #36 off=11
                    (__inl_a.191 var=56) __uint__ls___uint___sint (__inl_a.155 __ct_8.186)  <211>;
                    (__trgt.459 var=255) const ()  <789>;
                    () void_j_t21s_s2 (__trgt.459)  <790>;
                } #33
                {
                    (__inl_a.192 var=56) merge (__inl_a.155 __inl_a.191)  <213>;
                    (__inl_count.193 var=57) merge (__inl_count.156 __inl_count.188)  <214>;
                } #39
            } #31
            #40 off=13
            (__ptr_softfloat_countLeadingZeros8.27 var=29) const ()  <38>;
            (__ct_24.194 var=89) const ()  <215>;
            (__tmp.196 var=91) __uint__rs___uint___sint (__inl_a.192 __ct_24.194)  <217>;
            (__tmp.198 var=93) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_countLeadingZeros8.27 __tmp.196)  <219>;
            (__fch_softfloat_countLeadingZeros8.199 var=94) load (__M_DMb.2 __tmp.198 softfloat_countLeadingZeros8.20)  <220>;
            (__inl_count.202 var=57) __uint__pl___uint___uint (__inl_count.193 __fch_softfloat_countLeadingZeros8.199)  <223>;
            call {
                () chess_separator_scheduler ()  <225>;
            } #42 off=14
            #43 off=15
            (__ct_12t0.57 var=47) const ()  <68>;
            (__adr_shiftDist.59 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_12t0.57)  <70>;
            (__ct_21.203 var=98) const ()  <226>;
            (__tmp.205 var=100) __uint__pl___uint___uint (__inl_count.202 __ct_21.203)  <228>;
            (__M_DMw.207 var=5 shiftDist.208 var=23) store (__tmp.205 __adr_shiftDist.59 shiftDist.22)  <230>;
            call {
                () chess_separator_scheduler ()  <231>;
            } #44 off=16
            #146 off=17
            (__ct_1074.211 var=104) const ()  <234>;
            (__fch_shiftDist.213 var=106) load (__M_DMw.4 __adr_shiftDist.59 shiftDist.208)  <236>;
            (__tmp.214 var=107) __sint__mi___sint___sint (__ct_1074.211 __fch_shiftDist.213)  <237>;
            (__fch_a.220 var=113) load (__M_DMw.4 __adr_a.49 a.71)  <243>;
            (__fch_shiftDist.222 var=115) load (__M_DMw.4 __adr_shiftDist.59 shiftDist.208)  <245>;
            (__apl_r_high.342 var=180) __uint__ls___uint___sint (__tmp.214 __ct_20.417)  <454>;
            (__tmp.360 var=175) bool__eq___sint___sint (__fch_shiftDist.222 __ct_0.73)  <476>;
            (__ct_20.417 var=220) const ()  <568>;
            (__trgt.463 var=258) const ()  <796>;
            () void_br_bool_t13s_s2 (__tmp.360 __trgt.463)  <797>;
            (__either.464 var=251) undefined ()  <798>;
            if {
                {
                    () if_expr (__either.464)  <479>;
                } #89
                {
                } #90 off=22
                {
                    #92 off=18
                    (__ct_m32.333 var=182) const ()  <443>;
                    (__apl_ff.363 var=172) __sint__pl___sint___sint (__fch_shiftDist.222 __ct_m32.333)  <480>;
                    (__tmp.364 var=176) bool__lt___sint___sint (__apl_ff.363 __ct_0.73)  <481>;
                    (__trgt.460 var=256) const ()  <791>;
                    () void_br_bool_t13s_s2 (__tmp.364 __trgt.460)  <792>;
                    (__either.461 var=251) undefined ()  <793>;
                    if {
                        {
                            () if_expr (__either.461)  <482>;
                        } #94
                        {
                            (__tmp.365 var=177) __sint__mi___sint___sint (__ct_0.73 __apl_ff.363)  <483>;
                            (__apl_carries.366 var=173) __uint__rs___uint___sint (__fch_a.220 __tmp.365)  <484>;
                            (__apl_r_low.367 var=178) __uint__ls___uint___sint (__fch_a.220 __fch_shiftDist.222)  <485>;
                        } #95 off=20
                        {
                            (__apl_r_high.370 var=180) __uint__ls___uint___sint (__fch_a.220 __apl_ff.363)  <488>;
                            (__trgt.462 var=257) const ()  <794>;
                            () void_j_t21s_s2 (__trgt.462)  <795>;
                        } #96 off=19
                        {
                            (__rt_low.371 var=167) merge (__apl_r_low.367 __ct_0.73)  <489>;
                            (__rt_high.372 var=168) merge (__apl_carries.366 __apl_r_high.370)  <490>;
                        } #97
                    } #93
                    #152 off=21
                    (__trgt.465 var=259) const ()  <799>;
                    () void_j_t21s_s2 (__trgt.465)  <800>;
                } #91
                {
                    (__tmp_low.373 var=189) merge (__fch_a.220 __rt_low.371)  <491>;
                    (__tmp_high.374 var=191) merge (__ct_0.73 __rt_high.372)  <492>;
                } #98
            } #88
            #68 off=23
            (__M_DMw.226 var=5 uiZ_low.227 var=25) store (__tmp_low.373 __adr_uiZ.54 uiZ_low.24)  <249>;
            (__M_DMw.232 var=5 uiZ_high.233 var=26) store (__apl_r_high.391 __adr_uiZ.321 uiZ_high.25)  <254>;
            (__adr_uiZ.321 var=160) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_8t0.319)  <407>;
            (__apl_r_high.391 var=205) __uint__pl___uint___uint (__apl_r_high.342 __tmp_high.374)  <514>;
            (__trgt.468 var=261) const ()  <804>;
            () void_j_t21s_s2 (__trgt.468)  <805>;
        } #11
        {
            (shiftDist.234 var=23) merge (shiftDist.22 shiftDist.208)  <256>;
            (uiZ_low.235 var=25) merge (uiZ_low.107 uiZ_low.227)  <257>;
            (uiZ_high.236 var=26) merge (uiZ_high.113 uiZ_high.233)  <258>;
        } #47
    } #6
    #48 off=25
    (__ct_16t0.62 var=51) const ()  <73>;
    (__adr_uZ.64 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_16t0.62)  <75>;
    (__fch_uiZ_low.242 var=123) load (__M_DMw.4 __adr_uiZ.54 uiZ_low.235)  <264>;
    (__fch_uiZ_high.247 var=126) load (__M_DMw.4 __adr_uiZ.322 uiZ_high.236)  <269>;
    (__M_DMw.253 var=5 uZ.254 var=24) store (__fch_uiZ_low.242 __adr_uZ.64 uZ.23)  <275>;
    (__M_DMw.259 var=5 uZ.260 var=24) store (__fch_uiZ_high.247 __adr_uZ.324 uZ.254)  <280>;
    (__adr_uiZ.322 var=161) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_8t0.319)  <408>;
    (__ct_20t0.323 var=162) const ()  <409>;
    (__adr_uZ.324 var=163) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_20t0.323)  <411>;
    call {
        () chess_separator_scheduler ()  <281>;
    } #49 off=26
    #52 off=27 nxt=-2
    (__fch_uZ.265 var=138) load (__M_DMw.4 __adr_uZ.64 uZ.260)  <286>;
    (__fch_uZ.270 var=141) load (__M_DMw.4 __adr_uZ.325 uZ.260)  <291>;
    (__rd___sp.272 var=27) rd_res_reg (__R_SP.11 __sp.45)  <293>;
    (__ct_24s0.273 var=142) const ()  <294>;
    (__tmp.275 var=144) __Pvoid__pl___Pvoid___sint (__rd___sp.272 __ct_24s0.273)  <296>;
    (__R_SP.276 var=12 __sp.277 var=18) wr_res_reg (__tmp.275 __sp.45)  <297>;
    () void___rts_jr_w32 (__la.30)  <298>;
    (__rt_low.279 var=32 stl=X off=10) assign (__fch_uZ.265)  <300>;
    () out (__rt_low.279)  <301>;
    (__rt_high.281 var=33 stl=X off=11) assign (__fch_uZ.270)  <303>;
    () out (__rt_high.281)  <304>;
    () sink (__sp.277)  <310>;
    () sink (a.71)  <311>;
    () sink (shiftDist.234)  <315>;
    () sink (uZ.260)  <316>;
    () sink (uiZ_low.235)  <317>;
    () sink (uiZ_high.236)  <318>;
    (__adr_uZ.325 var=164) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_20t0.323)  <412>;
} #0
0 : 'SoftFloat-3e/source/ui32_to_f64.c';
----------
0 : (0,42:0,0);
3 : (0,42:23,0);
4 : (0,42:23,0);
5 : (0,48:9,5);
6 : (0,48:4,5);
9 : (0,49:12,7);
11 : (0,50:11,9);
14 : (0,51:51,11);
19 : (0,51:20,13);
20 : (0,51:20,14);
21 : (0,51:20,14);
26 : (0,51:20,17);
28 : (0,51:20,19);
30 : (0,51:20,22);
31 : (0,51:20,22);
33 : (0,51:20,23);
34 : (0,51:20,24);
35 : (0,51:20,24);
36 : (0,51:20,25);
38 : (0,51:20,27);
40 : (0,51:20,31);
42 : (0,51:20,32);
43 : (0,51:18,35);
44 : (0,51:18,35);
48 : (0,55:10,40);
49 : (0,55:10,40);
52 : (0,56:4,40);
68 : (0,52:8,35);
88 : (0,53:104,35);
89 : (0,53:104,35);
90 : (0,53:104,35);
91 : (0,53:104,35);
92 : (0,53:104,35);
93 : (0,53:104,35);
94 : (0,53:104,35);
95 : (0,53:104,35);
96 : (0,53:104,35);
97 : (0,53:104,35);
98 : (0,53:104,35);
146 : (0,53:104,35);
----------
51 : (0,42:10,0);
52 : (0,42:10,0);
54 : (0,42:10,0);
55 : (0,42:10,0);
57 : (0,42:32,0);
58 : (0,42:32,0);
60 : (0,42:32,0);
62 : (0,44:18,0);
63 : (0,44:18,0);
65 : (0,44:18,0);
67 : (0,45:16,0);
68 : (0,45:16,0);
70 : (0,45:16,0);
72 : (0,46:19,0);
73 : (0,46:19,0);
75 : (0,46:19,0);
81 : (0,42:23,0);
82 : (0,42:23,0);
83 : (0,48:11,5);
84 : (0,48:9,0);
114 : (0,48:4,5);
118 : (0,49:8,6);
123 : (0,49:8,6);
128 : (0,51:51,11);
135 : (0,51:20,13);
136 : (0,51:20,0);
165 : (0,51:20,14);
166 : (0,51:20,0);
171 : (0,51:20,16);
173 : (0,51:20,21);
174 : (0,51:20,21);
175 : (0,51:20,0);
204 : (0,51:20,22);
205 : (0,51:20,0);
207 : (0,51:20,23);
208 : (0,51:20,24);
211 : (0,51:20,24);
213 : (0,51:20,29);
214 : (0,51:20,29);
215 : (0,51:20,0);
217 : (0,51:20,30);
219 : (0,51:20,30);
220 : (0,51:20,30);
223 : (0,51:20,30);
225 : (0,51:20,32);
226 : (0,51:55,0);
228 : (0,51:55,34);
230 : (0,51:8,34);
231 : (0,51:18,35);
234 : (0,53:66,0);
236 : (0,53:68,35);
237 : (0,53:66,35);
243 : (0,53:103,35);
245 : (0,53:106,35);
249 : (0,52:8,35);
254 : (0,52:8,35);
256 : (0,48:4,38);
257 : (0,48:4,38);
258 : (0,48:4,38);
264 : (0,55:12,39);
269 : (0,55:12,39);
275 : (0,55:6,39);
280 : (0,55:6,39);
281 : (0,55:10,40);
286 : (0,56:13,40);
291 : (0,56:13,40);
293 : (0,56:4,0);
294 : (0,56:4,0);
296 : (0,56:4,0);
297 : (0,56:4,40);
298 : (0,56:4,40);
300 : (0,56:13,0);
303 : (0,56:13,0);
398 : (0,48:9,5);
404 : (0,44:18,0);
409 : (0,46:19,0);
443 : (0,53:78,0);
454 : (0,53:78,35);
476 : (0,53:104,35);
479 : (0,53:104,35);
480 : (0,53:104,35);
481 : (0,53:104,35);
482 : (0,53:104,35);
483 : (0,53:104,35);
484 : (0,53:104,35);
485 : (0,53:104,35);
488 : (0,53:104,35);
489 : (0,53:104,35);
490 : (0,53:104,35);
491 : (0,53:104,35);
492 : (0,53:104,35);
514 : (0,53:84,35);
568 : (0,53:78,0);
756 : (0,51:20,14);
757 : (0,51:20,22);
782 : (0,51:20,14);
787 : (0,51:20,22);
792 : (0,53:104,35);
797 : (0,53:104,35);
802 : (0,48:4,5);

