
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:34:29 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/ui64_to_f64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t ui64_to_f64(uint64_t)
Fui64_to_f64 : user_defined, called {
    fnm : "ui64_to_f64" 'float64_t ui64_to_f64(unsigned long long)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=16 );
    llv : 0 0 0 0 0 ;
}
****
!!  float64_t softfloat_roundPackToF64(bool, int_fast16_t, uint_fast64_t)
Fsoftfloat_roundPackToF64 : user_defined, called {
    fnm : "softfloat_roundPackToF64" 'float64_t softfloat_roundPackToF64(bool, int_fast16_t, uint_fast64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    llv : 0 0 0 0 0 ;
}
!!  float64_t softfloat_normRoundPackToF64(bool, int_fast16_t, uint_fast64_t)
Fsoftfloat_normRoundPackToF64 : user_defined, called {
    fnm : "softfloat_normRoundPackToF64" 'float64_t softfloat_normRoundPackToF64(bool, int_fast16_t, uint_fast64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : ui64_to_f64 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=uint64_t_DMb
   20 : uZ typ=w08 val=8t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   21 : a_low typ=w08 bnd=B stl=DMb
   22 : a_high typ=w08 bnd=B stl=DMb
   23 : __rd___sp typ=w32 bnd=m
   24 : __la typ=w32 bnd=p tref=w32__
   26 : __rt_low typ=w32 bnd=m tref=__uint__
   27 : __rt_high typ=w32 bnd=m tref=__uint__
   29 : __arg_a_low typ=w32 bnd=m tref=__uint__
   30 : __arg_a_high typ=w32 bnd=m tref=__uint__
   31 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   33 : __tmp typ=w32 bnd=m
   35 : __ct_0t0 typ=w32 val=0t0 bnd=m
   37 : __adr_a typ=w32 bnd=m adro=19
   39 : __ct_8t0 typ=w32 val=8t0 bnd=m
   41 : __adr_uZ typ=w32 bnd=m adro=20
   45 : __fch_a_low typ=w32 bnd=m
   48 : __fch_a_high typ=w32 bnd=m
   55 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   66 : __fch_uZ typ=w32 bnd=m
   69 : __fch_uZ typ=w32 bnd=m
   74 : __fch_a_high typ=w32 bnd=m
   83 : __tmp typ=w32 bnd=m
   84 : __ct_1085 typ=w32 val=1085f bnd=m
   85 : __ct typ=w32 bnd=m
   87 : __fch_a_low typ=w32 bnd=m
   90 : __fch_a_high typ=w32 bnd=m
   91 : __ct_1 typ=w32 val=1f bnd=m
   94 : __tmp_low typ=w32 bnd=m tref=__uint__
   95 : __tmp_high typ=w32 bnd=m tref=__uint__
   98 : softfloat_roundPackToF64 typ=t21s_s2 val=0r bnd=m
   99 : __link typ=w32 bnd=m
  101 : __tmp typ=w32 bnd=m
  102 : __tmp typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  106 : __ct_1084 typ=w32 val=1084f bnd=m
  107 : __ct typ=w32 bnd=m
  109 : __fch_a_low typ=w32 bnd=m
  112 : __fch_a_high typ=w32 bnd=m
  113 : __record_low typ=w32 bnd=m tref=__uint__
  114 : __record_high typ=w32 bnd=m tref=__uint__
  117 : softfloat_normRoundPackToF64 typ=t21s_s2 val=0r bnd=m
  118 : __link typ=w32 bnd=m
  120 : __tmp typ=w32 bnd=m
  121 : __tmp typ=w32 bnd=m
  122 : __ct_16s0 typ=w32 val=16s0 bnd=m
  124 : __tmp typ=w32 bnd=m
  147 : __ct_12t0 typ=w32 val=12t0 bnd=m
  148 : __adr_uZ typ=w32 bnd=m adro=20
  149 : __adr_uZ typ=w32 bnd=m adro=20
  150 : __ct_4t0 typ=w32 val=4t0 bnd=m
  151 : __adr_a typ=w32 bnd=m adro=19
  152 : __adr_a typ=w32 bnd=m adro=19
  153 : __adr_a typ=w32 bnd=m adro=19
  154 : __adr_a typ=w32 bnd=m adro=19
  155 : __adr_a typ=w32 bnd=m adro=19
  166 : __tmp_high typ=w32 bnd=m
  176 : __tmp typ=bool bnd=m
  214 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  217 : __tmpd typ=w32 bnd=m
  218 : __tmp typ=bool bnd=m
  225 : __apl_carries typ=w32 bnd=m tref=__uint__
  230 : __tmp typ=w32 bnd=m
  231 : __apl_r_low typ=w32 bnd=m tref=__uint__
  232 : __apl_r_high typ=w32 bnd=m tref=__uint__
  241 : __tmp_low typ=w32 bnd=m
  260 : __tmp_low typ=w32 bnd=m
  262 : __tmp_high typ=w32 bnd=m
  271 : __ct_31 typ=w32 val=31f bnd=m
  278 : __tmp typ=w32 bnd=m
  293 : __tmp_high typ=w32 bnd=m
  304 : __either typ=bool bnd=m
  305 : __trgt typ=t13s_s2 val=0j bnd=m
  306 : __trgt typ=t21s_s2 val=0j bnd=m
  307 : __trgt typ=t13s_s2 val=0j bnd=m
  308 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fui64_to_f64 {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (uZ.19 var=20) source ()  <30>;
    (a_low.20 var=21) source ()  <31>;
    (a_high.21 var=22) source ()  <32>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (__arg_a_low.32 var=29 stl=X off=12) inp ()  <43>;
    (__arg_a_low.33 var=29) deassign (__arg_a_low.32)  <44>;
    (__arg_a_high.36 var=30 stl=X off=13) inp ()  <47>;
    (__arg_a_high.37 var=30) deassign (__arg_a_high.36)  <48>;
    (__rd___sp.40 var=23) rd_res_reg (__R_SP.11 __sp.17)  <51>;
    (__ct_m16S0.41 var=31) const ()  <52>;
    (__tmp.43 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_m16S0.41)  <54>;
    (__R_SP.44 var=12 __sp.45 var=18) wr_res_reg (__tmp.43 __sp.17)  <55>;
    (__rd___sp.46 var=23) rd_res_reg (__R_SP.11 __sp.45)  <57>;
    (__ct_0t0.47 var=35) const ()  <58>;
    (__adr_a.49 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_0t0.47)  <60>;
    (__rd___sp.51 var=23) rd_res_reg (__R_SP.11 __sp.45)  <62>;
    (__M_DMw.57 var=5 a_low.58 var=21) store (__arg_a_low.33 __adr_a.49 a_low.20)  <68>;
    (__M_DMw.63 var=5 a_high.64 var=22) store (__arg_a_high.37 __adr_a.288 a_high.21)  <73>;
    (__ct_4t0.284 var=150) const ()  <351>;
    (__adr_a.288 var=154) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_4t0.284)  <356>;
    call {
        () chess_separator_scheduler ()  <74>;
    } #4 off=1
    #123 off=2
    (__fch_a_low.66 var=45) load (__M_DMw.4 __adr_a.49 a_low.58)  <76>;
    (__fch_a_high.71 var=48) load (__M_DMw.4 __adr_a.289 a_high.64)  <81>;
    (__ct_0.94 var=55) const ()  <105>;
    (__adr_a.289 var=155) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_4t0.284)  <357>;
    (__tmpd.354 var=217) __uint__or___uint___uint (__fch_a_high.71 __fch_a_low.66)  <493>;
    (__tmp.355 var=218) bool__eq___uint___uint (__tmpd.354 __ct_0.94)  <494>;
    (__trgt.472 var=307) const ()  <765>;
    () void_br_bool_t13s_s2 (__tmp.355 __trgt.472)  <766>;
    (__either.473 var=304) undefined ()  <767>;
    if {
        {
            () if_expr (__either.473)  <102>;
        } #7
        {
            #9 off=10
            (__ct_8t0.52 var=39) const ()  <63>;
            (__adr_uZ.54 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_8t0.52)  <65>;
            (__M_DMw.98 var=5 uZ.99 var=20) store (__ct_0.94 __adr_uZ.54 uZ.19)  <109>;
            (__M_DMw.104 var=5 uZ.105 var=20) store (__ct_0.94 __adr_uZ.282 uZ.99)  <114>;
            (__ct_12t0.281 var=147) const ()  <347>;
            (__adr_uZ.282 var=148) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_12t0.281)  <349>;
            call {
                () chess_separator_scheduler ()  <115>;
            } #10 off=11
            #11 off=12
            (__fch_uZ.110 var=66) load (__M_DMw.4 __adr_uZ.54 uZ.105)  <120>;
            (__fch_uZ.115 var=69) load (__M_DMw.4 __adr_uZ.283 uZ.105)  <125>;
            (__adr_uZ.283 var=149) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_12t0.281)  <350>;
        } #8
        {
            #93 off=3
            (__fch_a_high.123 var=74) load (__M_DMw.4 __adr_a.287 a_high.64)  <134>;
            (__adr_a.287 var=153) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_4t0.284)  <355>;
            (__tmp_high.297 var=166) __uint__ad___uint___uint (__fch_a_high.123 __ct_2147483648.351)  <383>;
            (__tmp.313 var=176) bool__ne___uint___uint (__tmp_high.297 __ct_0.94)  <403>;
            (__ct_2147483648.351 var=214) const ()  <471>;
            (__trgt.469 var=305) const ()  <760>;
            () void_br_bool_t13s_s2 (__tmp.313 __trgt.469)  <761>;
            (__either.470 var=304) undefined ()  <762>;
            if {
                {
                    () if_expr (__either.470)  <157>;
                } #16
                {
                    #235 off=7
                    (__ct_1085.150 var=84) const ()  <162>;
                    (__fch_a_low.154 var=87) load (__M_DMw.4 __adr_a.49 a_low.58)  <166>;
                    (__fch_a_high.159 var=90) load (__M_DMw.4 __adr_a.285 a_high.64)  <171>;
                    (__ct_1.161 var=91) const ()  <173>;
                    (softfloat_roundPackToF64.170 var=98) const ()  <182>;
                    (__link.171 var=99) w32_jal_t21s_s2 (softfloat_roundPackToF64.170)  <183>;
                    (__adr_a.285 var=151) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_4t0.284)  <353>;
                    (__apl_carries.366 var=225) __uint__ls___uint___sint (__fch_a_high.159 __ct_31.434)  <508>;
                    (__tmp.367 var=230) __uint__rs___uint___sint (__fch_a_low.154 __ct_1.161)  <509>;
                    (__apl_r_low.368 var=231) __uint__or___uint___uint (__tmp.367 __apl_carries.366)  <510>;
                    (__apl_r_high.369 var=232) __uint__rs___uint___sint (__fch_a_high.159 __ct_1.161)  <511>;
                    (__tmp_low.388 var=241) __uint__ad___uint___uint (__fch_a_low.154 __ct_1.161)  <534>;
                    (__tmp_low.418 var=260) __uint__or___uint___uint (__apl_r_low.368 __tmp.449)  <572>;
                    (__tmp_high.419 var=262) __uint__or___uint___uint (__apl_r_high.369 __tmp_high.453)  <573>;
                    (__ct_31.434 var=271) const ()  <611>;
                    (__tmp.449 var=278) __sint_sne0___sint (__tmp_low.388)  <667>;
                    (__tmp_high.453 var=293) __sint__rs___sint___sint (__tmp.449 __ct_31.434)  <674>;
                    call {
                        (__tmp.149 var=83 stl=X off=12) assign (__ct_0.94)  <161>;
                        (__ct.152 var=85 stl=X off=13) assign (__ct_1085.150)  <164>;
                        (__tmp_low.165 var=94 stl=X off=14) assign (__tmp_low.418)  <177>;
                        (__tmp_high.167 var=95 stl=X off=15) assign (__tmp_high.419)  <179>;
                        (__link.172 var=99 stl=X off=1) assign (__link.171)  <184>;
                        (__tmp.174 var=101 stl=X off=10 __tmp.178 var=102 stl=X off=11) Fsoftfloat_roundPackToF64 (__link.172 __tmp.149 __ct.152 __tmp_low.165 __tmp_high.167)  <185>;
                        (__tmp.175 var=101) deassign (__tmp.174)  <187>;
                        (__tmp.179 var=102) deassign (__tmp.178)  <190>;
                    } #19 off=8
                } #17
                {
                    #59 off=4
                    (__ct_1084.186 var=106) const ()  <198>;
                    (__fch_a_low.190 var=109) load (__M_DMw.4 __adr_a.49 a_low.58)  <202>;
                    (__fch_a_high.195 var=112) load (__M_DMw.4 __adr_a.286 a_high.64)  <207>;
                    (softfloat_normRoundPackToF64.203 var=117) const ()  <215>;
                    (__link.204 var=118) w32_jal_t21s_s2 (softfloat_normRoundPackToF64.203)  <216>;
                    (__adr_a.286 var=152) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_4t0.284)  <354>;
                    call {
                        (__tmp.185 var=105 stl=X off=12) assign (__ct_0.94)  <197>;
                        (__ct.188 var=107 stl=X off=13) assign (__ct_1084.186)  <200>;
                        (__record_low.198 var=113 stl=X off=14) assign (__fch_a_low.190)  <210>;
                        (__record_high.200 var=114 stl=X off=15) assign (__fch_a_high.195)  <212>;
                        (__link.205 var=118 stl=X off=1) assign (__link.204)  <217>;
                        (__tmp.207 var=120 stl=X off=10 __tmp.211 var=121 stl=X off=11) Fsoftfloat_normRoundPackToF64 (__link.205 __tmp.185 __ct.188 __record_low.198 __record_high.200)  <218>;
                        (__tmp.208 var=120) deassign (__tmp.207)  <220>;
                        (__tmp.212 var=121) deassign (__tmp.211)  <223>;
                    } #23 off=5
                    #240 off=6
                    (__trgt.471 var=306) const ()  <763>;
                    () void_j_t21s_s2 (__trgt.471)  <764>;
                } #21
                {
                    (__rt_low.267 var=26) merge (__tmp.175 __tmp.208)  <333>;
                    (__rt_high.273 var=27) merge (__tmp.179 __tmp.212)  <339>;
                } #25
            } #15
            #241 off=9
            (__trgt.474 var=308) const ()  <768>;
            () void_j_t21s_s2 (__trgt.474)  <769>;
        } #13
        {
            (uZ.216 var=20) merge (uZ.105 uZ.19)  <228>;
            (__rt_low.264 var=26) merge (__fch_uZ.110 __rt_low.267)  <330>;
            (__rt_high.270 var=27) merge (__fch_uZ.115 __rt_high.273)  <336>;
        } #26
    } #6
    #28 off=13 nxt=-2
    (__rd___sp.218 var=23) rd_res_reg (__R_SP.11 __sp.45)  <230>;
    (__ct_16s0.219 var=122) const ()  <231>;
    (__tmp.221 var=124) __Pvoid__pl___Pvoid___sint (__rd___sp.218 __ct_16s0.219)  <233>;
    (__R_SP.222 var=12 __sp.223 var=18) wr_res_reg (__tmp.221 __sp.45)  <234>;
    () void___rts_jr_w32 (__la.24)  <235>;
    (__rt_low.225 var=26 stl=X off=10) assign (__rt_low.264)  <237>;
    () out (__rt_low.225)  <238>;
    (__rt_high.227 var=27 stl=X off=11) assign (__rt_high.270)  <240>;
    () out (__rt_high.227)  <241>;
    () sink (__sp.223)  <249>;
    () sink (uZ.216)  <251>;
    () sink (a_low.58)  <252>;
    () sink (a_high.64)  <253>;
} #0
0 : 'SoftFloat-3e/source/ui64_to_f64.c';
----------
0 : (0,42:0,0);
3 : (0,42:23,0);
4 : (0,42:23,0);
6 : (0,46:4,3);
8 : (0,46:15,4);
9 : (0,47:14,5);
10 : (0,47:14,5);
11 : (0,48:8,6);
13 : (0,48:8,8);
15 : (0,50:4,9);
17 : (0,55:8,10);
19 : (0,52:12,10);
21 : (0,51:8,14);
23 : (0,55:15,14);
28 : (0,50:4,22);
59 : (0,55:15,14);
93 : (0,50:4,9);
123 : (0,46:9,3);
235 : (0,52:12,10);
----------
51 : (0,42:10,0);
52 : (0,42:10,0);
54 : (0,42:10,0);
55 : (0,42:10,0);
57 : (0,42:32,0);
58 : (0,42:32,0);
60 : (0,42:32,0);
62 : (0,44:19,0);
63 : (0,44:19,0);
65 : (0,44:19,0);
68 : (0,42:23,0);
73 : (0,42:23,0);
74 : (0,42:23,0);
76 : (0,46:11,3);
81 : (0,46:11,3);
102 : (0,46:4,3);
105 : (0,47:10,0);
109 : (0,47:10,4);
114 : (0,47:10,4);
115 : (0,47:14,5);
120 : (0,48:17,5);
125 : (0,48:17,5);
134 : (0,50:9,9);
157 : (0,50:4,9);
161 : (0,53:17,0);
162 : (0,53:17,0);
164 : (0,53:17,0);
166 : (0,53:58,10);
171 : (0,53:58,10);
173 : (0,53:59,0);
177 : (0,53:26,0);
179 : (0,53:26,0);
183 : (0,52:12,10);
184 : (0,52:12,0);
185 : (0,52:12,10);
197 : (0,55:46,0);
198 : (0,55:46,0);
200 : (0,55:46,0);
202 : (0,55:55,14);
207 : (0,55:55,14);
210 : (0,55:55,0);
212 : (0,55:55,0);
216 : (0,55:15,14);
217 : (0,55:15,0);
218 : (0,55:15,14);
228 : (0,46:4,21);
230 : (0,50:4,0);
231 : (0,50:4,0);
233 : (0,50:4,0);
234 : (0,50:4,22);
235 : (0,50:4,22);
237 : (0,50:4,0);
240 : (0,50:4,0);
347 : (0,44:19,0);
351 : (0,42:32,0);
383 : (0,50:11,9);
403 : (0,50:4,9);
471 : (0,50:13,0);
493 : (0,46:9,3);
494 : (0,46:9,3);
508 : (0,53:26,10);
509 : (0,53:26,10);
510 : (0,53:26,10);
511 : (0,53:26,10);
534 : (0,53:26,10);
572 : (0,53:26,10);
573 : (0,53:26,10);
611 : (0,53:26,0);
667 : (0,53:26,10);
674 : (0,53:26,10);
761 : (0,50:4,9);
766 : (0,46:4,3);

