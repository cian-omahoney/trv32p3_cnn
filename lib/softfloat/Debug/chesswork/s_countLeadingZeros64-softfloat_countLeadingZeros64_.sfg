
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:31:04 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/s_countLeadingZeros64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint_fast8_t softfloat_countLeadingZeros64(uint64_t)
Fsoftfloat_countLeadingZeros64 : user_defined, called {
    fnm : "softfloat_countLeadingZeros64" 'uint_fast8_t softfloat_countLeadingZeros64(uint64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=16 );
}
****
***/

[
    0 : softfloat_countLeadingZeros64 typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=uint64_t_DMb
   20 : count typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast8_t_DMb
   21 : a32 typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=uint32_t_DMb
   22 : softfloat_countLeadingZeros8 typ=w08 bnd=e sz=256 algn=1 stl=DMb tref=__A256__uchar_DMb
   24 : a_low typ=w08 bnd=B stl=DMb
   25 : a_high typ=w08 bnd=B stl=DMb
   26 : __rd___sp typ=w32 bnd=m
   28 : __ptr_softfloat_countLeadingZeros8 typ=w32 val=0a bnd=m adro=22
   29 : __la typ=w32 bnd=p tref=w32__
   30 : __rt typ=w32 bnd=p tref=uint_fast8_t__
   32 : __arg_a_low typ=w32 bnd=m tref=__uint__
   33 : __arg_a_high typ=w32 bnd=m tref=__uint__
   34 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   36 : __tmp typ=w32 bnd=m
   38 : __ct_0t0 typ=w32 val=0t0 bnd=m
   40 : __adr_a typ=w32 bnd=m adro=19
   42 : __ct_8t0 typ=w32 val=8t0 bnd=m
   44 : __adr_count typ=w32 bnd=m adro=20
   46 : __ct_12t0 typ=w32 val=12t0 bnd=m
   48 : __adr_a32 typ=w32 bnd=m adro=21
   51 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   57 : __fch_a_high typ=w32 bnd=m
   62 : __fch_a32 typ=w32 bnd=m
   65 : __tmp typ=bool bnd=m
   67 : __ct_32 typ=w32 val=32f bnd=m
   70 : __fch_a_low typ=w32 bnd=m
   75 : __fch_a32 typ=w32 bnd=m
   76 : __ct_65536 typ=t20s_rp12 val=16f bnd=m
   78 : __tmp typ=bool bnd=m
   79 : __fch_count typ=w32 bnd=m
   80 : __ct_16 typ=w32 val=16f bnd=m
   82 : __tmp typ=w32 bnd=m
   83 : __fch_a32 typ=w32 bnd=m
   86 : __tmp typ=w32 bnd=m
   87 : __fch_a32 typ=w32 bnd=m
   88 : __ct_16777216 typ=t20s_rp12 val=4096f bnd=m
   90 : __tmp typ=bool bnd=m
   91 : __fch_count typ=w32 bnd=m
   92 : __ct_8 typ=w32 val=8f bnd=m
   94 : __tmp typ=w32 bnd=m
   95 : __fch_a32 typ=w32 bnd=m
   98 : __tmp typ=w32 bnd=m
   99 : __fch_count typ=w32 bnd=m
  100 : __fch_a32 typ=w32 bnd=m
  101 : __ct_24 typ=w32 val=24f bnd=m
  103 : __tmp typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  106 : __fch_softfloat_countLeadingZeros8 typ=__uchar bnd=m
  109 : __tmp typ=w32 bnd=m
  111 : __ct_16s0 typ=w32 val=16s0 bnd=m
  113 : __tmp typ=w32 bnd=m
  122 : __ct_4t0 typ=w32 val=4t0 bnd=m
  124 : __adr_a typ=w32 bnd=m adro=19
  125 : __adr_a typ=w32 bnd=m adro=19
  172 : __either typ=bool bnd=m
  173 : __trgt typ=t13s_s2 val=0j bnd=m
  174 : __trgt typ=t21s_s2 val=0j bnd=m
  175 : __trgt typ=t13s_s2 val=0j bnd=m
  176 : __trgt typ=t21s_s2 val=0j bnd=m
  177 : __trgt typ=t13s_s2 val=0j bnd=m
  178 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_countLeadingZeros64 {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (count.19 var=20) source ()  <30>;
    (a32.20 var=21) source ()  <31>;
    (softfloat_countLeadingZeros8.21 var=22) source ()  <32>;
    (a_low.23 var=24) source ()  <34>;
    (a_high.24 var=25) source ()  <35>;
    (__la.28 var=29 stl=X off=1) inp ()  <39>;
    (__la.29 var=29) deassign (__la.28)  <40>;
    (__arg_a_low.33 var=32 stl=X off=11) inp ()  <44>;
    (__arg_a_low.34 var=32) deassign (__arg_a_low.33)  <45>;
    (__arg_a_high.37 var=33 stl=X off=12) inp ()  <48>;
    (__arg_a_high.38 var=33) deassign (__arg_a_high.37)  <49>;
    (__rd___sp.41 var=26) rd_res_reg (__R_SP.11 __sp.17)  <52>;
    (__ct_m16S0.42 var=34) const ()  <53>;
    (__tmp.44 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_m16S0.42)  <55>;
    (__R_SP.45 var=12 __sp.46 var=18) wr_res_reg (__tmp.44 __sp.17)  <56>;
    (__rd___sp.47 var=26) rd_res_reg (__R_SP.11 __sp.46)  <58>;
    (__ct_0t0.48 var=38) const ()  <59>;
    (__adr_a.50 var=40) __Pvoid__pl___Pvoid___sint (__rd___sp.47 __ct_0t0.48)  <61>;
    (__rd___sp.52 var=26) rd_res_reg (__R_SP.11 __sp.46)  <63>;
    (__rd___sp.57 var=26) rd_res_reg (__R_SP.11 __sp.46)  <68>;
    (__M_DMw.63 var=5 a_low.64 var=24) store (__arg_a_low.34 __adr_a.50 a_low.23)  <74>;
    (__M_DMw.69 var=5 a_high.70 var=25) store (__arg_a_high.38 __adr_a.260 a_high.24)  <79>;
    (__ct_4t0.258 var=122) const ()  <323>;
    (__adr_a.260 var=124) __Pvoid__pl___Pvoid___sint (__rd___sp.47 __ct_4t0.258)  <326>;
    call {
        () chess_separator_scheduler ()  <80>;
    } #4 off=1
    #5 off=2
    (__ct_8t0.53 var=42) const ()  <64>;
    (__adr_count.55 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.52 __ct_8t0.53)  <66>;
    (__ct_0.71 var=51) const ()  <81>;
    (__M_DMw.73 var=5 count.74 var=20) store (__ct_0.71 __adr_count.55 count.19)  <83>;
    call {
        () chess_separator_scheduler ()  <84>;
    } #6 off=3
    #75 off=4
    (__ct_12t0.58 var=46) const ()  <69>;
    (__adr_a32.60 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.57 __ct_12t0.58)  <71>;
    (__fch_a_high.81 var=57) load (__M_DMw.4 __adr_a.261 a_high.70)  <91>;
    (__M_DMw.87 var=5 a32.88 var=21) store (__fch_a_high.81 __adr_a32.60 a32.20)  <97>;
    (__adr_a.261 var=125) __Pvoid__pl___Pvoid___sint (__rd___sp.47 __ct_4t0.258)  <327>;
    call {
        () chess_separator_scheduler ()  <98>;
    } #8 off=5
    #9 off=6
    (__fch_a32.89 var=62) load (__M_DMw.4 __adr_a32.60 a32.88)  <99>;
    (__tmp.312 var=65) bool__ne___uint___uint (__fch_a32.89 __ct_0.71)  <502>;
    (__trgt.317 var=173) const ()  <523>;
    () void_br_bool_t13s_s2 (__tmp.312 __trgt.317)  <524>;
    (__either.318 var=172) undefined ()  <525>;
    if {
        {
            () if_expr (__either.318)  <124>;
        } #11
        {
        } #17 off=10
        {
            #13 off=7
            (__ct_32.114 var=67) const ()  <125>;
            (__M_DMw.116 var=5 count.117 var=20) store (__ct_32.114 __adr_count.55 count.74)  <127>;
            call {
                () chess_separator_scheduler ()  <128>;
            } #14 off=8
            #86 off=9
            (__fch_a_low.119 var=70) load (__M_DMw.4 __adr_a.50 a_low.64)  <130>;
            (__M_DMw.127 var=5 a32.128 var=21) store (__fch_a_low.119 __adr_a32.60 a32.88)  <138>;
            (__trgt.319 var=174) const ()  <526>;
            () void_j_t21s_s2 (__trgt.319)  <527>;
        } #12
        {
            (count.129 var=20) merge (count.74 count.117)  <140>;
            (a32.130 var=21) merge (a32.88 a32.128)  <141>;
        } #18
    } #10
    #19 off=11
    (__fch_a32.131 var=75) load (__M_DMw.4 __adr_a32.60 a32.130)  <142>;
    (__ct_65536.132 var=76) const ()  <143>;
    (__tmp.313 var=78) bool__ge___uint___uint (__fch_a32.131 __ct_65536.132)  <503>;
    (__trgt.320 var=175) const ()  <528>;
    () void_br_bool_t13s_s2 (__tmp.313 __trgt.320)  <529>;
    (__either.321 var=172) undefined ()  <530>;
    if {
        {
            () if_expr (__either.321)  <166>;
        } #21
        {
        } #27 off=15
        {
            #23 off=12
            (__fch_count.155 var=79) load (__M_DMw.4 __adr_count.55 count.129)  <167>;
            (__ct_16.156 var=80) const ()  <168>;
            (__tmp.158 var=82) __uint__pl___uint___uint (__fch_count.155 __ct_16.156)  <170>;
            (__M_DMw.159 var=5 count.160 var=20) store (__tmp.158 __adr_count.55 count.129)  <171>;
            call {
                () chess_separator_scheduler ()  <172>;
            } #24 off=13
            #25 off=14
            (__fch_a32.161 var=83) load (__M_DMw.4 __adr_a32.60 a32.130)  <173>;
            (__tmp.164 var=86) __uint__ls___uint___sint (__fch_a32.161 __ct_16.156)  <176>;
            (__M_DMw.165 var=5 a32.166 var=21) store (__tmp.164 __adr_a32.60 a32.130)  <177>;
            (__trgt.322 var=176) const ()  <531>;
            () void_j_t21s_s2 (__trgt.322)  <532>;
        } #22
        {
            (count.167 var=20) merge (count.129 count.160)  <179>;
            (a32.168 var=21) merge (a32.130 a32.166)  <180>;
        } #28
    } #20
    #29 off=16
    (__fch_a32.169 var=87) load (__M_DMw.4 __adr_a32.60 a32.168)  <181>;
    (__ct_16777216.170 var=88) const ()  <182>;
    (__tmp.314 var=90) bool__ge___uint___uint (__fch_a32.169 __ct_16777216.170)  <504>;
    (__trgt.323 var=177) const ()  <533>;
    () void_br_bool_t13s_s2 (__tmp.314 __trgt.323)  <534>;
    (__either.324 var=172) undefined ()  <535>;
    if {
        {
            () if_expr (__either.324)  <205>;
        } #31
        {
        } #37 off=20
        {
            #33 off=17
            (__fch_count.193 var=91) load (__M_DMw.4 __adr_count.55 count.167)  <206>;
            (__ct_8.194 var=92) const ()  <207>;
            (__tmp.196 var=94) __uint__pl___uint___uint (__fch_count.193 __ct_8.194)  <209>;
            (__M_DMw.197 var=5 count.198 var=20) store (__tmp.196 __adr_count.55 count.167)  <210>;
            call {
                () chess_separator_scheduler ()  <211>;
            } #34 off=18
            #35 off=19
            (__fch_a32.199 var=95) load (__M_DMw.4 __adr_a32.60 a32.168)  <212>;
            (__tmp.202 var=98) __uint__ls___uint___sint (__fch_a32.199 __ct_8.194)  <215>;
            (__M_DMw.203 var=5 a32.204 var=21) store (__tmp.202 __adr_a32.60 a32.168)  <216>;
            (__trgt.325 var=178) const ()  <536>;
            () void_j_t21s_s2 (__trgt.325)  <537>;
        } #32
        {
            (count.205 var=20) merge (count.167 count.198)  <218>;
            (a32.206 var=21) merge (a32.168 a32.204)  <219>;
        } #38
    } #30
    #39 off=21
    (__ptr_softfloat_countLeadingZeros8.26 var=28) const ()  <37>;
    (__fch_count.207 var=99) load (__M_DMw.4 __adr_count.55 count.205)  <220>;
    (__fch_a32.208 var=100) load (__M_DMw.4 __adr_a32.60 a32.206)  <221>;
    (__ct_24.209 var=101) const ()  <222>;
    (__tmp.211 var=103) __uint__rs___uint___sint (__fch_a32.208 __ct_24.209)  <224>;
    (__tmp.213 var=105) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_countLeadingZeros8.26 __tmp.211)  <226>;
    (__fch_softfloat_countLeadingZeros8.214 var=106) load (__M_DMb.2 __tmp.213 softfloat_countLeadingZeros8.21)  <227>;
    (__tmp.217 var=109) __uint__pl___uint___uint (__fch_count.207 __fch_softfloat_countLeadingZeros8.214)  <230>;
    (__M_DMw.218 var=5 count.219 var=20) store (__tmp.217 __adr_count.55 count.205)  <231>;
    call {
        () chess_separator_scheduler ()  <232>;
    } #40 off=22
    #43 off=23 nxt=-2
    (__rt.220 var=30) load (__M_DMw.4 __adr_count.55 count.219)  <233>;
    (__rd___sp.221 var=26) rd_res_reg (__R_SP.11 __sp.46)  <234>;
    (__ct_16s0.222 var=111) const ()  <235>;
    (__tmp.224 var=113) __Pvoid__pl___Pvoid___sint (__rd___sp.221 __ct_16s0.222)  <237>;
    (__R_SP.225 var=12 __sp.226 var=18) wr_res_reg (__tmp.224 __sp.46)  <238>;
    () void___rts_jr_w32 (__la.29)  <239>;
    (__rt.227 var=30 stl=X off=10) assign (__rt.220)  <240>;
    () out (__rt.227)  <241>;
    () sink (__sp.226)  <249>;
    () sink (count.219)  <251>;
    () sink (a32.206)  <252>;
    () sink (a_low.64)  <255>;
    () sink (a_high.70)  <256>;
} #0
0 : 'SoftFloat-3e/source/s_countLeadingZeros64.c';
----------
0 : (0,45:0,0);
3 : (0,45:44,0);
4 : (0,45:44,0);
5 : (0,50:10,5);
6 : (0,50:10,5);
8 : (0,51:8,6);
9 : (0,52:9,6);
10 : (0,52:4,6);
12 : (0,52:17,7);
13 : (0,53:14,8);
14 : (0,53:14,8);
17 : (0,52:4,11);
19 : (0,59:13,14);
20 : (0,59:4,14);
22 : (0,59:25,15);
23 : (0,60:14,16);
24 : (0,60:14,16);
25 : (0,61:12,17);
27 : (0,59:4,19);
29 : (0,63:13,22);
30 : (0,63:4,22);
32 : (0,63:27,23);
33 : (0,64:14,24);
34 : (0,64:14,24);
35 : (0,65:12,25);
37 : (0,63:4,27);
39 : (0,67:10,31);
40 : (0,67:10,31);
43 : (0,68:4,31);
75 : (0,51:4,5);
86 : (0,54:8,8);
----------
37 : (0,67:13,0);
52 : (0,45:13,0);
53 : (0,45:13,0);
55 : (0,45:13,0);
56 : (0,45:13,0);
58 : (0,45:53,0);
59 : (0,45:53,0);
61 : (0,45:53,0);
63 : (0,47:17,0);
64 : (0,47:17,0);
66 : (0,47:17,0);
68 : (0,48:13,0);
69 : (0,48:13,0);
71 : (0,48:13,0);
74 : (0,45:44,0);
79 : (0,45:44,0);
80 : (0,45:44,0);
81 : (0,50:10,0);
83 : (0,50:4,4);
84 : (0,50:10,5);
91 : (0,51:10,5);
97 : (0,51:4,5);
98 : (0,51:8,6);
99 : (0,52:11,6);
124 : (0,52:4,6);
125 : (0,53:14,0);
127 : (0,53:8,7);
128 : (0,53:14,8);
130 : (0,54:14,8);
138 : (0,54:8,8);
140 : (0,52:4,13);
141 : (0,52:4,13);
142 : (0,59:9,14);
143 : (0,59:13,0);
166 : (0,59:4,14);
167 : (0,60:8,15);
168 : (0,60:14,0);
170 : (0,60:14,15);
171 : (0,60:8,15);
172 : (0,60:14,16);
173 : (0,61:8,16);
176 : (0,61:12,16);
177 : (0,61:8,16);
179 : (0,59:4,21);
180 : (0,59:4,21);
181 : (0,63:9,22);
182 : (0,63:13,0);
205 : (0,63:4,22);
206 : (0,64:8,23);
207 : (0,64:14,0);
209 : (0,64:14,23);
210 : (0,64:8,23);
211 : (0,64:14,24);
212 : (0,65:8,24);
215 : (0,65:12,24);
216 : (0,65:8,24);
218 : (0,63:4,29);
219 : (0,63:4,29);
220 : (0,67:4,30);
221 : (0,67:42,30);
222 : (0,67:47,0);
224 : (0,67:45,30);
226 : (0,67:41,30);
227 : (0,67:41,30);
230 : (0,67:10,30);
231 : (0,67:4,30);
232 : (0,67:10,31);
233 : (0,68:11,31);
234 : (0,68:4,0);
235 : (0,68:4,0);
237 : (0,68:4,0);
238 : (0,68:4,31);
239 : (0,68:4,31);
240 : (0,68:11,0);
323 : (0,45:53,0);
502 : (0,52:9,6);
503 : (0,59:13,14);
504 : (0,63:13,22);
524 : (0,52:4,6);
529 : (0,59:4,14);
534 : (0,63:4,22);

