
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 17:53:54 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/ui32_to_f32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t ui32_to_f32(uint32_t)
Fui32_to_f32 : user_defined, called {
    fnm : "ui32_to_f32" 'float32_t ui32_to_f32(unsigned)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=8 );
    llv : 0 0 0 0 0 ;
}
****
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
!!  float32_t softfloat_normRoundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_normRoundPackToF32 : user_defined, called {
    fnm : "softfloat_normRoundPackToF32" 'float32_t softfloat_normRoundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : ui32_to_f32 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=uint32_t_DMb
   20 : uZ typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   23 : __rt typ=w32 bnd=p tref=float32_t___1
   24 : __arg_a typ=w32 bnd=p tref=uint32_t__
   25 : __ct_m8S0 typ=w32 val=-8S0 bnd=m
   27 : __tmp typ=w32 bnd=m
   29 : __ct_0t0 typ=w32 val=0t0 bnd=m
   31 : __adr_a typ=w32 bnd=m adro=19
   33 : __ct_4t0 typ=w32 val=4t0 bnd=m
   35 : __adr_uZ typ=w32 bnd=m adro=20
   36 : __fch_a typ=w32 bnd=m
   37 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   39 : __tmp typ=bool bnd=m
   50 : __fch_a typ=w32 bnd=m
   51 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
   53 : __tmp typ=w32 bnd=m
   56 : __tmp typ=bool bnd=m
   59 : __tmp typ=w32 bnd=m
   60 : __ct_157 typ=w32 val=157f bnd=m
   61 : __ct typ=w32 bnd=m
   62 : __fch_a typ=w32 bnd=m
   63 : __ct_1 typ=w32 val=1f bnd=m
   65 : __tmp typ=w32 bnd=m
   66 : __fch_a typ=w32 bnd=m
   69 : __tmp typ=w32 bnd=m
   70 : __tmp typ=w32 bnd=m
   73 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
   74 : __link typ=w32 bnd=m
   75 : __tmp typ=w32 bnd=m
   78 : __tmp typ=w32 bnd=m
   79 : __ct_156 typ=w32 val=156f bnd=m
   80 : __ct typ=w32 bnd=m
   81 : __fch_a typ=w32 bnd=m
   84 : softfloat_normRoundPackToF32 typ=t21s_s2 val=0r bnd=m
   85 : __link typ=w32 bnd=m
   86 : __tmp typ=w32 bnd=m
   87 : __ct_8s0 typ=w32 val=8s0 bnd=m
   89 : __tmp typ=w32 bnd=m
  110 : __either typ=bool bnd=m
  111 : __trgt typ=t13s_s2 val=0j bnd=m
  112 : __trgt typ=t21s_s2 val=0j bnd=m
  113 : __trgt typ=t13s_s2 val=0j bnd=m
  114 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fui32_to_f32 {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (a.18 var=19) source ()  <29>;
    (uZ.19 var=20) source ()  <30>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (__arg_a.25 var=24 stl=X off=11) inp ()  <36>;
    (__arg_a.26 var=24) deassign (__arg_a.25)  <37>;
    (__rd___sp.28 var=21) rd_res_reg (__R_SP.11 __sp.17)  <39>;
    (__ct_m8S0.29 var=25) const ()  <40>;
    (__tmp.31 var=27) __Pvoid__pl___Pvoid___sint (__rd___sp.28 __ct_m8S0.29)  <42>;
    (__R_SP.32 var=12 __sp.33 var=18) wr_res_reg (__tmp.31 __sp.17)  <43>;
    (__rd___sp.34 var=21) rd_res_reg (__R_SP.11 __sp.33)  <45>;
    (__ct_0t0.35 var=29) const ()  <46>;
    (__adr_a.37 var=31) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_0t0.35)  <48>;
    (__rd___sp.39 var=21) rd_res_reg (__R_SP.11 __sp.33)  <50>;
    (__M_DMw.44 var=5 a.45 var=19) store (__arg_a.26 __adr_a.37 a.18)  <55>;
    call {
        () chess_separator_scheduler ()  <56>;
    } #4 off=1
    #5 off=2
    (__fch_a.46 var=36) load (__M_DMw.4 __adr_a.37 a.45)  <57>;
    (__ct_0.47 var=37) const ()  <58>;
    (__tmp.174 var=39) bool__eq___uint___uint (__fch_a.46 __ct_0.47)  <237>;
    (__trgt.186 var=113) const ()  <297>;
    () void_br_bool_t13s_s2 (__tmp.174 __trgt.186)  <298>;
    (__either.187 var=110) undefined ()  <299>;
    if {
        {
            () if_expr (__either.187)  <75>;
        } #7
        {
            (__ct_4t0.40 var=33) const ()  <51>;
            (__adr_uZ.42 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_4t0.40)  <53>;
            (__M_DMw.69 var=5 uZ.70 var=20) store (__ct_0.47 __adr_uZ.42 uZ.19)  <81>;
        } #9 off=10
        {
            #14 off=3
            (__fch_a.75 var=50) load (__M_DMw.4 __adr_a.37 a.45)  <88>;
            (__ct_2147483648.76 var=51) const ()  <89>;
            (__tmp.78 var=53) __uint__ad___uint___uint (__fch_a.75 __ct_2147483648.76)  <91>;
            (__tmp.81 var=56) bool__ne___uint___uint (__tmp.78 __ct_0.47)  <94>;
            (__trgt.183 var=111) const ()  <292>;
            () void_br_bool_t13s_s2 (__tmp.81 __trgt.183)  <293>;
            (__either.184 var=110) undefined ()  <294>;
            if {
                {
                    () if_expr (__either.184)  <108>;
                } #16
                {
                    #35 off=7
                    (__ct_157.99 var=60) const ()  <113>;
                    (__fch_a.102 var=62) load (__M_DMw.4 __adr_a.37 a.45)  <116>;
                    (__ct_1.103 var=63) const ()  <117>;
                    (__tmp.105 var=65) __uint__rs___uint___sint (__fch_a.102 __ct_1.103)  <119>;
                    (__fch_a.106 var=66) load (__M_DMw.4 __adr_a.37 a.45)  <120>;
                    (__tmp.109 var=69) __uint__ad___uint___uint (__fch_a.106 __ct_1.103)  <123>;
                    (__tmp.110 var=70) __uint__or___uint___uint (__tmp.105 __tmp.109)  <124>;
                    (softfloat_roundPackToF32.114 var=73) const ()  <128>;
                    (__link.115 var=74) w32_jal_t21s_s2 (softfloat_roundPackToF32.114)  <129>;
                    call {
                        (__tmp.98 var=59 stl=X off=11) assign (__ct_0.47)  <112>;
                        (__ct.101 var=61 stl=X off=12) assign (__ct_157.99)  <115>;
                        (__tmp.111 var=70 stl=X off=13) assign (__tmp.110)  <125>;
                        (__link.116 var=74 stl=X off=1) assign (__link.115)  <130>;
                        (__tmp.117 var=75 stl=X off=10) Fsoftfloat_roundPackToF32 (__link.116 __tmp.98 __ct.101 __tmp.111)  <131>;
                        (__tmp.118 var=75) deassign (__tmp.117)  <132>;
                    } #19 off=8
                } #17
                {
                    #48 off=4
                    (__ct_156.124 var=79) const ()  <139>;
                    (__fch_a.127 var=81) load (__M_DMw.4 __adr_a.37 a.45)  <142>;
                    (softfloat_normRoundPackToF32.131 var=84) const ()  <146>;
                    (__link.132 var=85) w32_jal_t21s_s2 (softfloat_normRoundPackToF32.131)  <147>;
                    call {
                        (__tmp.123 var=78 stl=X off=11) assign (__ct_0.47)  <138>;
                        (__ct.126 var=80 stl=X off=12) assign (__ct_156.124)  <141>;
                        (__fch_a.128 var=81 stl=X off=13) assign (__fch_a.127)  <143>;
                        (__link.133 var=85 stl=X off=1) assign (__link.132)  <148>;
                        (__tmp.134 var=86 stl=X off=10) Fsoftfloat_normRoundPackToF32 (__link.133 __tmp.123 __ct.126 __fch_a.128)  <149>;
                        (__tmp.135 var=86) deassign (__tmp.134)  <150>;
                    } #23 off=5
                    #60 off=6
                    (__trgt.185 var=112) const ()  <295>;
                    () void_j_t21s_s2 (__trgt.185)  <296>;
                } #21
                {
                    (__rt.137 var=23) merge (__tmp.118 __tmp.135)  <153>;
                } #25
            } #15
            #61 off=9
            (__trgt.188 var=114) const ()  <300>;
            () void_j_t21s_s2 (__trgt.188)  <301>;
        } #13
        {
            (uZ.138 var=20) merge (uZ.70 uZ.19)  <154>;
            (__rt.139 var=23) merge (__ct_0.47 __rt.137)  <155>;
        } #26
    } #6
    #28 off=11 nxt=-2
    (__rd___sp.140 var=21) rd_res_reg (__R_SP.11 __sp.33)  <156>;
    (__ct_8s0.141 var=87) const ()  <157>;
    (__tmp.143 var=89) __Pvoid__pl___Pvoid___sint (__rd___sp.140 __ct_8s0.141)  <159>;
    (__R_SP.144 var=12 __sp.145 var=18) wr_res_reg (__tmp.143 __sp.33)  <160>;
    () void___rts_jr_w32 (__la.22)  <161>;
    (__rt.146 var=23 stl=X off=10) assign (__rt.139)  <162>;
    () out (__rt.146)  <163>;
    () sink (__sp.145)  <169>;
    () sink (a.45)  <170>;
    () sink (uZ.138)  <171>;
} #0
0 : 'SoftFloat-3e/source/ui32_to_f32.c';
----------
0 : (0,42:0,0);
3 : (0,42:23,0);
4 : (0,42:23,0);
5 : (0,46:9,3);
6 : (0,46:4,3);
9 : (0,47:14,5);
13 : (0,48:8,8);
14 : (0,50:4,9);
15 : (0,50:4,9);
17 : (0,53:8,10);
19 : (0,51:15,10);
21 : (0,51:8,14);
23 : (0,53:15,14);
28 : (0,50:4,22);
35 : (0,51:15,10);
48 : (0,53:15,14);
----------
39 : (0,42:10,0);
40 : (0,42:10,0);
42 : (0,42:10,0);
43 : (0,42:10,0);
45 : (0,42:32,0);
46 : (0,42:32,0);
48 : (0,42:32,0);
50 : (0,44:19,0);
51 : (0,44:19,0);
53 : (0,44:19,0);
55 : (0,42:23,0);
56 : (0,42:23,0);
57 : (0,46:11,3);
58 : (0,46:9,0);
75 : (0,46:4,3);
81 : (0,47:10,4);
88 : (0,50:9,9);
89 : (0,50:13,0);
91 : (0,50:11,9);
94 : (0,50:4,9);
108 : (0,50:4,9);
112 : (0,51:42,0);
113 : (0,51:42,0);
115 : (0,51:42,0);
116 : (0,51:50,10);
117 : (0,51:53,0);
119 : (0,51:51,10);
120 : (0,51:58,10);
123 : (0,51:60,10);
124 : (0,51:55,10);
125 : (0,51:42,0);
129 : (0,51:15,10);
130 : (0,51:15,0);
131 : (0,51:15,10);
138 : (0,53:46,0);
139 : (0,53:46,0);
141 : (0,53:46,0);
142 : (0,53:54,14);
143 : (0,53:46,0);
147 : (0,53:15,14);
148 : (0,53:15,0);
149 : (0,53:15,14);
153 : (0,50:4,18);
154 : (0,46:4,21);
155 : (0,46:4,21);
156 : (0,50:4,0);
157 : (0,50:4,0);
159 : (0,50:4,0);
160 : (0,50:4,22);
161 : (0,50:4,22);
162 : (0,50:4,0);
237 : (0,46:9,3);
293 : (0,50:4,9);
298 : (0,46:4,3);

