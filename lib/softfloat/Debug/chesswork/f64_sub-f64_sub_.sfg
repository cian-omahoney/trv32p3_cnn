
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:46:54 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f64_sub.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t f64_sub(float64_t, float64_t)
Ff64_sub : user_defined, called {
    fnm : "f64_sub" 'float64_t f64_sub(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    frm : ( l=56 );
    llv : 0 0 0 0 0 ;
}
****
!!  float64_t softfloat_subMagsF64(uint_fast64_t, uint_fast64_t, bool)
Fsoftfloat_subMagsF64 : user_defined, called {
    fnm : "softfloat_subMagsF64" 'float64_t softfloat_subMagsF64(uint_fast64_t, uint_fast64_t, bool)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] X[16] );
    llv : 0 0 0 0 0 ;
}
!!  float64_t softfloat_addMagsF64(uint_fast64_t, uint_fast64_t, bool)
Fsoftfloat_addMagsF64 : user_defined, called {
    fnm : "softfloat_addMagsF64" 'float64_t softfloat_addMagsF64(uint_fast64_t, uint_fast64_t, bool)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] X[16] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : f64_sub typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : b typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=float64_t_DMb
   20 : a typ=w08 val=8t0 bnd=a sz=8 algn=4 stl=DMb tref=float64_t_DMb
   21 : uA typ=w08 val=16t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   22 : uiA typ=w08 val=24t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   23 : signA typ=w08 val=32t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   24 : uB typ=w08 val=36t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   25 : uiB typ=w08 val=44t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   26 : signB typ=w08 val=52t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   27 : b_low typ=w08 bnd=B stl=DMb
   28 : b_high typ=w08 bnd=B stl=DMb
   29 : a_low typ=w08 bnd=B stl=DMb
   30 : a_high typ=w08 bnd=B stl=DMb
   31 : uiA_low typ=w08 bnd=B stl=DMb
   32 : uiA_high typ=w08 bnd=B stl=DMb
   33 : uiB_low typ=w08 bnd=B stl=DMb
   34 : uiB_high typ=w08 bnd=B stl=DMb
   35 : __rd___sp typ=w32 bnd=m
   36 : __la typ=w32 bnd=p tref=w32__
   38 : __rt_low typ=w32 bnd=m tref=__uint__
   39 : __rt_high typ=w32 bnd=m tref=__uint__
   41 : __arg_a_low typ=w32 bnd=m tref=__uint__
   42 : __arg_a_high typ=w32 bnd=m tref=__uint__
   44 : __arg_b_low typ=w32 bnd=m tref=__uint__
   45 : __arg_b_high typ=w32 bnd=m tref=__uint__
   46 : __ct_m56S0 typ=w32 val=-56S0 bnd=m
   48 : __tmp typ=w32 bnd=m
   50 : __ct_0t0 typ=w32 val=0t0 bnd=m
   52 : __adr_b typ=w32 bnd=m adro=19
   54 : __ct_8t0 typ=w32 val=8t0 bnd=m
   56 : __adr_a typ=w32 bnd=m adro=20
   58 : __ct_16t0 typ=w32 val=16t0 bnd=m
   60 : __adr_uA typ=w32 bnd=m adro=21
   62 : __ct_24t0 typ=w32 val=24t0 bnd=m
   64 : __adr_uiA typ=w32 bnd=m adro=22
   66 : __ct_32t0 typ=w32 val=32t0 bnd=m
   68 : __adr_signA typ=w32 bnd=m adro=23
   70 : __ct_36t0 typ=w32 val=36t0 bnd=m
   72 : __adr_uB typ=w32 bnd=m adro=24
   74 : __ct_44t0 typ=w32 val=44t0 bnd=m
   76 : __adr_uiB typ=w32 bnd=m adro=25
   78 : __ct_52t0 typ=w32 val=52t0 bnd=m
   80 : __adr_signB typ=w32 bnd=m adro=26
   86 : __fch_a_low typ=w32 bnd=m
   89 : __fch_a_high typ=w32 bnd=m
  101 : __fch_uA typ=w32 bnd=m
  104 : __fch_uA typ=w32 bnd=m
  113 : __fch_uiA_high typ=w32 bnd=m
  120 : __tmp typ=w32 bnd=m
  122 : __fch_b_low typ=w32 bnd=m
  125 : __fch_b_high typ=w32 bnd=m
  137 : __fch_uB typ=w32 bnd=m
  140 : __fch_uB typ=w32 bnd=m
  149 : __fch_uiB_high typ=w32 bnd=m
  156 : __tmp typ=w32 bnd=m
  157 : __fch_signA typ=w32 bnd=m
  160 : __fch_signB typ=w32 bnd=m
  163 : __tmp typ=bool bnd=m
  165 : __fch_uiA_low typ=w32 bnd=m
  168 : __fch_uiA_high typ=w32 bnd=m
  169 : __record_low typ=w32 bnd=m tref=__uint__
  170 : __record_high typ=w32 bnd=m tref=__uint__
  172 : __fch_uiB_low typ=w32 bnd=m
  175 : __fch_uiB_high typ=w32 bnd=m
  176 : __record_low typ=w32 bnd=m tref=__uint__
  177 : __record_high typ=w32 bnd=m tref=__uint__
  178 : __fch_signA typ=w32 bnd=m
  180 : __tmp typ=w32 bnd=m
  183 : softfloat_subMagsF64 typ=t21s_s2 val=0r bnd=m
  184 : __link typ=w32 bnd=m
  186 : __tmp typ=w32 bnd=m
  187 : __tmp typ=w32 bnd=m
  189 : __fch_uiA_low typ=w32 bnd=m
  192 : __fch_uiA_high typ=w32 bnd=m
  193 : __record_low typ=w32 bnd=m tref=__uint__
  194 : __record_high typ=w32 bnd=m tref=__uint__
  196 : __fch_uiB_low typ=w32 bnd=m
  199 : __fch_uiB_high typ=w32 bnd=m
  200 : __record_low typ=w32 bnd=m tref=__uint__
  201 : __record_high typ=w32 bnd=m tref=__uint__
  202 : __fch_signA typ=w32 bnd=m
  204 : __tmp typ=w32 bnd=m
  207 : softfloat_addMagsF64 typ=t21s_s2 val=0r bnd=m
  208 : __link typ=w32 bnd=m
  210 : __tmp typ=w32 bnd=m
  211 : __tmp typ=w32 bnd=m
  212 : __ct_56s0 typ=w32 val=56s0 bnd=m
  214 : __tmp typ=w32 bnd=m
  245 : __ct_28t0 typ=w32 val=28t0 bnd=m
  246 : __adr_uiA typ=w32 bnd=m adro=22
  247 : __ct_48t0 typ=w32 val=48t0 bnd=m
  248 : __adr_uiB typ=w32 bnd=m adro=25
  249 : __adr_uiA typ=w32 bnd=m adro=22
  250 : __adr_uiB typ=w32 bnd=m adro=25
  251 : __ct_4t0 typ=w32 val=4t0 bnd=m
  252 : __adr_b typ=w32 bnd=m adro=19
  253 : __adr_b typ=w32 bnd=m adro=19
  254 : __ct_12t0 typ=w32 val=12t0 bnd=m
  255 : __adr_a typ=w32 bnd=m adro=20
  256 : __adr_a typ=w32 bnd=m adro=20
  257 : __ct_20t0 typ=w32 val=20t0 bnd=m
  258 : __adr_uA typ=w32 bnd=m adro=21
  259 : __adr_uA typ=w32 bnd=m adro=21
  260 : __adr_uiA typ=w32 bnd=m adro=22
  261 : __adr_uiA typ=w32 bnd=m adro=22
  262 : __ct_40t0 typ=w32 val=40t0 bnd=m
  263 : __adr_uB typ=w32 bnd=m adro=24
  264 : __adr_uB typ=w32 bnd=m adro=24
  265 : __adr_uiB typ=w32 bnd=m adro=25
  266 : __adr_uiB typ=w32 bnd=m adro=25
  281 : __apl_r_low typ=w32 bnd=m tref=__uint__
  317 : __ct_31 typ=w32 val=31f bnd=m
  333 : __either typ=bool bnd=m
  334 : __trgt typ=t13s_s2 val=0j bnd=m
  335 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_sub {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (uA.20 var=21) source ()  <31>;
    (signA.22 var=23) source ()  <33>;
    (uB.23 var=24) source ()  <34>;
    (signB.25 var=26) source ()  <36>;
    (b_low.26 var=27) source ()  <37>;
    (b_high.27 var=28) source ()  <38>;
    (a_low.28 var=29) source ()  <39>;
    (a_high.29 var=30) source ()  <40>;
    (uiA_low.30 var=31) source ()  <41>;
    (uiA_high.31 var=32) source ()  <42>;
    (uiB_low.32 var=33) source ()  <43>;
    (uiB_high.33 var=34) source ()  <44>;
    (__la.35 var=36 stl=X off=1) inp ()  <46>;
    (__la.36 var=36) deassign (__la.35)  <47>;
    (__arg_a_low.44 var=41 stl=X off=12) inp ()  <55>;
    (__arg_a_low.45 var=41) deassign (__arg_a_low.44)  <56>;
    (__arg_a_high.48 var=42 stl=X off=13) inp ()  <59>;
    (__arg_a_high.49 var=42) deassign (__arg_a_high.48)  <60>;
    (__arg_b_low.53 var=44 stl=X off=14) inp ()  <64>;
    (__arg_b_low.54 var=44) deassign (__arg_b_low.53)  <65>;
    (__arg_b_high.57 var=45 stl=X off=15) inp ()  <68>;
    (__arg_b_high.58 var=45) deassign (__arg_b_high.57)  <69>;
    (__rd___sp.61 var=35) rd_res_reg (__R_SP.11 __sp.17)  <72>;
    (__ct_m56S0.62 var=46) const ()  <73>;
    (__tmp.64 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_m56S0.62)  <75>;
    (__R_SP.65 var=12 __sp.66 var=18) wr_res_reg (__tmp.64 __sp.17)  <76>;
    (__rd___sp.67 var=35) rd_res_reg (__R_SP.11 __sp.66)  <78>;
    (__ct_0t0.68 var=50) const ()  <79>;
    (__adr_b.70 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_0t0.68)  <81>;
    (__rd___sp.72 var=35) rd_res_reg (__R_SP.11 __sp.66)  <83>;
    (__rd___sp.77 var=35) rd_res_reg (__R_SP.11 __sp.66)  <88>;
    (__rd___sp.82 var=35) rd_res_reg (__R_SP.11 __sp.66)  <93>;
    (__rd___sp.87 var=35) rd_res_reg (__R_SP.11 __sp.66)  <98>;
    (__rd___sp.92 var=35) rd_res_reg (__R_SP.11 __sp.66)  <103>;
    (__rd___sp.97 var=35) rd_res_reg (__R_SP.11 __sp.66)  <108>;
    (__rd___sp.102 var=35) rd_res_reg (__R_SP.11 __sp.66)  <113>;
    (__M_DMw.108 var=5 b_low.109 var=27) store (__arg_b_low.54 __adr_b.70 b_low.26)  <119>;
    (__M_DMw.114 var=5 b_high.115 var=28) store (__arg_b_high.58 __adr_b.456 b_high.27)  <124>;
    (__ct_4t0.455 var=251) const ()  <532>;
    (__adr_b.456 var=252) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_4t0.455)  <534>;
    call {
        () chess_separator_scheduler ()  <125>;
    } #4 off=1
    #5 off=2
    (__ct_8t0.73 var=54) const ()  <84>;
    (__adr_a.75 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_8t0.73)  <86>;
    (__M_DMw.117 var=5 a_low.118 var=29) store (__arg_a_low.45 __adr_a.75 a_low.28)  <127>;
    (__M_DMw.123 var=5 a_high.124 var=30) store (__arg_a_high.49 __adr_a.459 a_high.29)  <132>;
    (__ct_12t0.458 var=254) const ()  <536>;
    (__adr_a.459 var=255) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_12t0.458)  <538>;
    call {
        () chess_separator_scheduler ()  <133>;
    } #6 off=3
    #7 off=4
    (__ct_16t0.78 var=58) const ()  <89>;
    (__adr_uA.80 var=60) __Pvoid__pl___Pvoid___sint (__rd___sp.77 __ct_16t0.78)  <91>;
    (__fch_a_low.126 var=86) load (__M_DMw.4 __adr_a.75 a_low.118)  <135>;
    (__fch_a_high.131 var=89) load (__M_DMw.4 __adr_a.460 a_high.124)  <140>;
    (__M_DMw.137 var=5 uA.138 var=21) store (__fch_a_low.126 __adr_uA.80 uA.20)  <146>;
    (__M_DMw.143 var=5 uA.144 var=21) store (__fch_a_high.131 __adr_uA.462 uA.138)  <151>;
    (__adr_a.460 var=256) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_12t0.458)  <539>;
    (__ct_20t0.461 var=257) const ()  <540>;
    (__adr_uA.462 var=258) __Pvoid__pl___Pvoid___sint (__rd___sp.77 __ct_20t0.461)  <542>;
    call {
        () chess_separator_scheduler ()  <152>;
    } #8 off=5
    #9 off=6
    (__ct_24t0.83 var=62) const ()  <94>;
    (__adr_uiA.85 var=64) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_24t0.83)  <96>;
    (__fch_uA.149 var=101) load (__M_DMw.4 __adr_uA.80 uA.144)  <157>;
    (__fch_uA.154 var=104) load (__M_DMw.4 __adr_uA.463 uA.144)  <162>;
    (__M_DMw.157 var=5 uiA_low.158 var=31) store (__fch_uA.149 __adr_uiA.85 uiA_low.30)  <165>;
    (__M_DMw.163 var=5 uiA_high.164 var=32) store (__fch_uA.154 __adr_uiA.464 uiA_high.31)  <170>;
    (__ct_28t0.449 var=245) const ()  <524>;
    (__adr_uA.463 var=259) __Pvoid__pl___Pvoid___sint (__rd___sp.77 __ct_20t0.461)  <543>;
    (__adr_uiA.464 var=260) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_28t0.449)  <544>;
    call {
        () chess_separator_scheduler ()  <171>;
    } #10 off=7
    #42 off=8
    (__ct_32t0.88 var=66) const ()  <99>;
    (__adr_signA.90 var=68) __Pvoid__pl___Pvoid___sint (__rd___sp.87 __ct_32t0.88)  <101>;
    (__fch_uiA_high.171 var=113) load (__M_DMw.4 __adr_uiA.465 uiA_high.164)  <178>;
    (__M_DMw.180 var=5 signA.181 var=23) store (__tmp.565 __adr_signA.90 signA.22)  <187>;
    (__adr_uiA.465 var=261) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_28t0.449)  <545>;
    (__apl_r_low.487 var=281) __uint__rs___uint___sint (__fch_uiA_high.171 __ct_31.557)  <595>;
    (__ct_31.557 var=317) const ()  <708>;
    (__tmp.565 var=120) __sint_sne0___sint (__apl_r_low.487)  <743>;
    call {
        () chess_separator_scheduler ()  <188>;
    } #12 off=9
    #13 off=10
    (__ct_36t0.93 var=70) const ()  <104>;
    (__adr_uB.95 var=72) __Pvoid__pl___Pvoid___sint (__rd___sp.92 __ct_36t0.93)  <106>;
    (__fch_b_low.183 var=122) load (__M_DMw.4 __adr_b.70 b_low.109)  <190>;
    (__fch_b_high.188 var=125) load (__M_DMw.4 __adr_b.457 b_high.115)  <195>;
    (__M_DMw.194 var=5 uB.195 var=24) store (__fch_b_low.183 __adr_uB.95 uB.23)  <201>;
    (__M_DMw.200 var=5 uB.201 var=24) store (__fch_b_high.188 __adr_uB.467 uB.195)  <206>;
    (__adr_b.457 var=253) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_4t0.455)  <535>;
    (__ct_40t0.466 var=262) const ()  <546>;
    (__adr_uB.467 var=263) __Pvoid__pl___Pvoid___sint (__rd___sp.92 __ct_40t0.466)  <548>;
    call {
        () chess_separator_scheduler ()  <207>;
    } #14 off=11
    #15 off=12
    (__ct_44t0.98 var=74) const ()  <109>;
    (__adr_uiB.100 var=76) __Pvoid__pl___Pvoid___sint (__rd___sp.97 __ct_44t0.98)  <111>;
    (__fch_uB.206 var=137) load (__M_DMw.4 __adr_uB.95 uB.201)  <212>;
    (__fch_uB.211 var=140) load (__M_DMw.4 __adr_uB.468 uB.201)  <217>;
    (__M_DMw.214 var=5 uiB_low.215 var=33) store (__fch_uB.206 __adr_uiB.100 uiB_low.32)  <220>;
    (__M_DMw.220 var=5 uiB_high.221 var=34) store (__fch_uB.211 __adr_uiB.469 uiB_high.33)  <225>;
    (__ct_48t0.451 var=247) const ()  <527>;
    (__adr_uB.468 var=264) __Pvoid__pl___Pvoid___sint (__rd___sp.92 __ct_40t0.466)  <549>;
    (__adr_uiB.469 var=265) __Pvoid__pl___Pvoid___sint (__rd___sp.97 __ct_48t0.451)  <550>;
    call {
        () chess_separator_scheduler ()  <226>;
    } #16 off=13
    #62 off=14
    (__ct_52t0.103 var=78) const ()  <114>;
    (__adr_signB.105 var=80) __Pvoid__pl___Pvoid___sint (__rd___sp.102 __ct_52t0.103)  <116>;
    (__fch_uiB_high.228 var=149) load (__M_DMw.4 __adr_uiB.470 uiB_high.221)  <233>;
    (__M_DMw.237 var=5 signB.238 var=26) store (__tmp.571 __adr_signB.105 signB.25)  <242>;
    (__adr_uiB.470 var=266) __Pvoid__pl___Pvoid___sint (__rd___sp.97 __ct_48t0.451)  <551>;
    (__apl_r_low.528 var=281) __uint__rs___uint___sint (__fch_uiB_high.228 __ct_31.557)  <646>;
    (__tmp.571 var=156) __sint_sne0___sint (__apl_r_low.528)  <752>;
    call {
        () chess_separator_scheduler ()  <243>;
    } #18 off=15
    #19 off=16
    (__fch_signA.239 var=157) load (__M_DMw.4 __adr_signA.90 signA.181)  <244>;
    (__fch_signB.242 var=160) load (__M_DMw.4 __adr_signB.105 signB.238)  <247>;
    (__tmp.245 var=163) bool__eq___sint___sint (__fch_signA.239 __fch_signB.242)  <250>;
    (__trgt.577 var=334) const ()  <802>;
    () void_br_bool_t13s_s2 (__tmp.245 __trgt.577)  <803>;
    (__either.578 var=333) undefined ()  <804>;
    if {
        {
            () if_expr (__either.578)  <285>;
        } #21
        {
            #23 off=20
            (__fch_uiA_low.281 var=165) load (__M_DMw.4 __adr_uiA.85 uiA_low.158)  <287>;
            (__fch_uiA_high.286 var=168) load (__M_DMw.4 __adr_uiA.450 uiA_high.164)  <292>;
            (__fch_uiB_low.293 var=172) load (__M_DMw.4 __adr_uiB.100 uiB_low.215)  <299>;
            (__fch_uiB_high.298 var=175) load (__M_DMw.4 __adr_uiB.452 uiB_high.221)  <304>;
            (__fch_signA.304 var=178) load (__M_DMw.4 __adr_signA.90 signA.181)  <310>;
            (softfloat_subMagsF64.310 var=183) const ()  <316>;
            (__link.311 var=184) w32_jal_t21s_s2 (softfloat_subMagsF64.310)  <317>;
            (__adr_uiA.450 var=246) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_28t0.449)  <526>;
            (__adr_uiB.452 var=248) __Pvoid__pl___Pvoid___sint (__rd___sp.97 __ct_48t0.451)  <529>;
            call {
                (__record_low.289 var=169 stl=X off=12) assign (__fch_uiA_low.281)  <295>;
                (__record_high.291 var=170 stl=X off=13) assign (__fch_uiA_high.286)  <297>;
                (__record_low.301 var=176 stl=X off=14) assign (__fch_uiB_low.293)  <307>;
                (__record_high.303 var=177 stl=X off=15) assign (__fch_uiB_high.298)  <309>;
                (__tmp.307 var=180 stl=X off=16) assign (__fch_signA.304)  <313>;
                (__link.312 var=184 stl=X off=1) assign (__link.311)  <318>;
                (__tmp.314 var=186 stl=X off=10 __tmp.318 var=187 stl=X off=11) Fsoftfloat_subMagsF64 (__link.312 __record_low.289 __record_high.291 __record_low.301 __record_high.303 __tmp.307)  <319>;
                (__tmp.315 var=186) deassign (__tmp.314)  <321>;
                (__tmp.319 var=187) deassign (__tmp.318)  <324>;
            } #24 off=21
        } #22
        {
            #27 off=17
            (__fch_uiA_low.323 var=189) load (__M_DMw.4 __adr_uiA.85 uiA_low.158)  <329>;
            (__fch_uiA_high.328 var=192) load (__M_DMw.4 __adr_uiA.453 uiA_high.164)  <334>;
            (__fch_uiB_low.335 var=196) load (__M_DMw.4 __adr_uiB.100 uiB_low.215)  <341>;
            (__fch_uiB_high.340 var=199) load (__M_DMw.4 __adr_uiB.454 uiB_high.221)  <346>;
            (__fch_signA.346 var=202) load (__M_DMw.4 __adr_signA.90 signA.181)  <352>;
            (softfloat_addMagsF64.352 var=207) const ()  <358>;
            (__link.353 var=208) w32_jal_t21s_s2 (softfloat_addMagsF64.352)  <359>;
            (__adr_uiA.453 var=249) __Pvoid__pl___Pvoid___sint (__rd___sp.82 __ct_28t0.449)  <530>;
            (__adr_uiB.454 var=250) __Pvoid__pl___Pvoid___sint (__rd___sp.97 __ct_48t0.451)  <531>;
            call {
                (__record_low.331 var=193 stl=X off=12) assign (__fch_uiA_low.323)  <337>;
                (__record_high.333 var=194 stl=X off=13) assign (__fch_uiA_high.328)  <339>;
                (__record_low.343 var=200 stl=X off=14) assign (__fch_uiB_low.335)  <349>;
                (__record_high.345 var=201 stl=X off=15) assign (__fch_uiB_high.340)  <351>;
                (__tmp.349 var=204 stl=X off=16) assign (__fch_signA.346)  <355>;
                (__link.354 var=208 stl=X off=1) assign (__link.353)  <360>;
                (__tmp.356 var=210 stl=X off=10 __tmp.360 var=211 stl=X off=11) Fsoftfloat_addMagsF64 (__link.354 __record_low.331 __record_high.333 __record_low.343 __record_high.345 __tmp.349)  <361>;
                (__tmp.357 var=210) deassign (__tmp.356)  <363>;
                (__tmp.361 var=211) deassign (__tmp.360)  <366>;
            } #28 off=18
            #172 off=19
            (__trgt.579 var=335) const ()  <805>;
            () void_j_t21s_s2 (__trgt.579)  <806>;
        } #26
        {
            (__rt_low.429 var=38) merge (__tmp.315 __tmp.357)  <504>;
            (__rt_high.432 var=39) merge (__tmp.319 __tmp.361)  <507>;
        } #30
    } #20
    #32 off=22 nxt=-2
    (__rd___sp.365 var=35) rd_res_reg (__R_SP.11 __sp.66)  <371>;
    (__ct_56s0.366 var=212) const ()  <372>;
    (__tmp.368 var=214) __Pvoid__pl___Pvoid___sint (__rd___sp.365 __ct_56s0.366)  <374>;
    (__R_SP.369 var=12 __sp.370 var=18) wr_res_reg (__tmp.368 __sp.66)  <375>;
    () void___rts_jr_w32 (__la.36)  <376>;
    (__rt_low.372 var=38 stl=X off=10) assign (__rt_low.429)  <378>;
    () out (__rt_low.372)  <379>;
    (__rt_high.374 var=39 stl=X off=11) assign (__rt_high.432)  <381>;
    () out (__rt_high.374)  <382>;
    () sink (__sp.370)  <392>;
    () sink (uA.144)  <395>;
    () sink (signA.181)  <397>;
    () sink (uB.201)  <398>;
    () sink (signB.238)  <400>;
    () sink (b_low.109)  <401>;
    () sink (b_high.115)  <402>;
    () sink (a_low.118)  <403>;
    () sink (a_high.124)  <404>;
    () sink (uiA_low.158)  <405>;
    () sink (uiA_high.164)  <406>;
    () sink (uiB_low.215)  <407>;
    () sink (uiB_high.221)  <408>;
} #0
0 : 'SoftFloat-3e/source/f64_sub.c';
----------
0 : (0,43:0,0);
3 : (0,43:32,0);
4 : (0,43:32,0);
5 : (0,43:19,0);
6 : (0,43:19,0);
7 : (0,55:9,10);
8 : (0,55:9,10);
9 : (0,56:8,11);
10 : (0,56:8,11);
12 : (0,57:10,12);
13 : (0,58:9,13);
14 : (0,58:9,13);
15 : (0,59:8,14);
16 : (0,59:8,14);
18 : (0,60:10,15);
19 : (0,62:15,15);
20 : (0,62:4,15);
22 : (0,65:8,16);
23 : (0,63:47,16);
24 : (0,63:15,16);
26 : (0,63:8,20);
27 : (0,65:47,20);
28 : (0,65:15,20);
32 : (0,62:4,25);
42 : (0,57:4,11);
62 : (0,60:4,14);
----------
72 : (0,43:10,0);
73 : (0,43:10,0);
75 : (0,43:10,0);
76 : (0,43:10,0);
78 : (0,43:42,0);
79 : (0,43:42,0);
81 : (0,43:42,0);
83 : (0,43:29,0);
84 : (0,43:29,0);
86 : (0,43:29,0);
88 : (0,45:19,0);
89 : (0,45:19,0);
91 : (0,45:19,0);
93 : (0,46:18,0);
94 : (0,46:18,0);
96 : (0,46:18,0);
98 : (0,47:9,0);
99 : (0,47:9,0);
101 : (0,47:9,0);
103 : (0,48:19,0);
104 : (0,48:19,0);
106 : (0,48:19,0);
108 : (0,49:18,0);
109 : (0,49:18,0);
111 : (0,49:18,0);
113 : (0,50:9,0);
114 : (0,50:9,0);
116 : (0,50:9,0);
119 : (0,43:32,0);
124 : (0,43:32,0);
125 : (0,43:32,0);
127 : (0,43:19,0);
132 : (0,43:19,0);
133 : (0,43:19,0);
135 : (0,55:11,9);
140 : (0,55:11,9);
146 : (0,55:6,9);
151 : (0,55:6,9);
152 : (0,55:9,10);
157 : (0,56:12,10);
162 : (0,56:12,10);
165 : (0,56:4,10);
170 : (0,56:4,10);
171 : (0,56:8,11);
178 : (0,57:33,11);
187 : (0,57:4,11);
188 : (0,57:10,12);
190 : (0,58:11,12);
195 : (0,58:11,12);
201 : (0,58:6,12);
206 : (0,58:6,12);
207 : (0,58:9,13);
212 : (0,59:12,13);
217 : (0,59:12,13);
220 : (0,59:4,13);
225 : (0,59:4,13);
226 : (0,59:8,14);
233 : (0,60:33,14);
242 : (0,60:4,14);
243 : (0,60:10,15);
244 : (0,62:9,15);
247 : (0,62:18,15);
250 : (0,62:15,15);
285 : (0,62:4,15);
287 : (0,63:37,16);
292 : (0,63:37,16);
295 : (0,63:37,0);
297 : (0,63:37,0);
299 : (0,63:42,16);
304 : (0,63:42,16);
307 : (0,63:42,0);
309 : (0,63:42,0);
310 : (0,63:47,16);
313 : (0,63:47,0);
317 : (0,63:15,16);
318 : (0,63:15,0);
319 : (0,63:15,16);
329 : (0,65:37,20);
334 : (0,65:37,20);
337 : (0,65:37,0);
339 : (0,65:37,0);
341 : (0,65:42,20);
346 : (0,65:42,20);
349 : (0,65:42,0);
351 : (0,65:42,0);
352 : (0,65:47,20);
355 : (0,65:47,0);
359 : (0,65:15,20);
360 : (0,65:15,0);
361 : (0,65:15,20);
371 : (0,62:4,0);
372 : (0,62:4,0);
374 : (0,62:4,0);
375 : (0,62:4,25);
376 : (0,62:4,25);
378 : (0,62:4,0);
381 : (0,62:4,0);
524 : (0,46:18,0);
527 : (0,49:18,0);
532 : (0,43:42,0);
536 : (0,43:29,0);
540 : (0,45:19,0);
546 : (0,48:19,0);
595 : (0,57:37,11);
646 : (0,60:37,14);
708 : (0,57:37,0);
743 : (0,57:4,11);
752 : (0,60:4,14);
803 : (0,62:4,15);

