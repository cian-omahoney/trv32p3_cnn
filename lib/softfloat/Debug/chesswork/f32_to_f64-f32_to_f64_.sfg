
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:46:51 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/f32_to_f64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t f32_to_f64(float32_t)
Ff32_to_f64 : user_defined, called {
    fnm : "f32_to_f64" 'float64_t f32_to_f64(float32_t)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=52 );
    llv : 0 0 0 0 0 ;
}
****
!!  exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)
Fsoftfloat_normSubnormalF32Sig : user_defined, called {
    fnm : "softfloat_normSubnormalF32Sig" 'exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)';
    arg : ( w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : f32_to_f64 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=float32_t_DMb
   20 : uA typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   21 : uiA typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   22 : sign typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   23 : exp typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   24 : frac typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   25 : uiZ typ=w08 val=28t0 bnd=a sz=8 algn=4 stl=DMb tref=uint_fast64_t_DMb
   26 : normExpSig typ=w08 val=36t0 bnd=a sz=8 algn=4 stl=DMb tref=exp16_sig32_DMb
   27 : uZ typ=w08 val=44t0 bnd=a sz=8 algn=4 stl=DMb tref=ui64_f64_DMb
   28 : uiZ_low typ=w08 bnd=B stl=DMb
   29 : uiZ_high typ=w08 bnd=B stl=DMb
   30 : normExpSig_exp typ=w08 bnd=B stl=DMb
   31 : normExpSig_sig typ=w08 bnd=B stl=DMb
   32 : __rd___sp typ=w32 bnd=m
   33 : __la typ=w32 bnd=p tref=w32__
   35 : __rt_low typ=w32 bnd=m tref=__uint__
   36 : __rt_high typ=w32 bnd=m tref=__uint__
   37 : __arg_a typ=w32 bnd=p tref=float32_t___1
   38 : __ct_m52S0 typ=w32 val=-52S0 bnd=m
   40 : __tmp typ=w32 bnd=m
   42 : __ct_0t0 typ=w32 val=0t0 bnd=m
   44 : __adr_a typ=w32 bnd=m adro=19
   46 : __ct_4t0 typ=w32 val=4t0 bnd=m
   48 : __adr_uA typ=w32 bnd=m adro=20
   50 : __ct_8t0 typ=w32 val=8t0 bnd=m
   52 : __adr_uiA typ=w32 bnd=m adro=21
   54 : __ct_12t0 typ=w32 val=12t0 bnd=m
   56 : __adr_sign typ=w32 bnd=m adro=22
   58 : __ct_16t0 typ=w32 val=16t0 bnd=m
   60 : __adr_exp typ=w32 bnd=m adro=23
   62 : __ct_20t0 typ=w32 val=20t0 bnd=m
   64 : __adr_frac typ=w32 bnd=m adro=24
   66 : __ct_28t0 typ=w32 val=28t0 bnd=m
   68 : __adr_uiZ typ=w32 bnd=m adro=25
   69 : __ptr_normExpSig typ=w32 bnd=m
   70 : __ct_36t0 typ=w32 val=36t0 bnd=m
   72 : __adr_normExpSig typ=w32 bnd=m adro=26
   74 : __ct_44t0 typ=w32 val=44t0 bnd=m
   76 : __adr_uZ typ=w32 bnd=m adro=27
   78 : __fch_a typ=w32 bnd=m
   79 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   85 : __fch_uA typ=w32 bnd=m
   86 : __fch_uiA typ=w32 bnd=m
   87 : __ct_31 typ=w32 val=31f bnd=m
   89 : __tmp typ=w32 bnd=m
   93 : __tmp typ=w32 bnd=m
   94 : __fch_uiA typ=w32 bnd=m
   95 : __ct_23 typ=w32 val=23f bnd=m
   97 : __tmp typ=w32 bnd=m
   99 : __ct_255 typ=w32 val=255f bnd=m
  101 : __tmp typ=w32 bnd=m
  102 : __fch_uiA typ=w32 bnd=m
  103 : __ct_8388607 typ=w32 val=8388607f bnd=m
  105 : __tmp typ=w32 bnd=m
  106 : __fch_exp typ=w32 bnd=m
  109 : __tmp typ=bool bnd=m
  110 : __fch_frac typ=w32 bnd=m
  113 : __tmp typ=bool bnd=m
  120 : __fch_sign typ=w32 bnd=m
  136 : __fch_exp typ=w32 bnd=m
  139 : __tmp typ=bool bnd=m
  141 : __fch_frac typ=w32 bnd=m
  144 : __tmp typ=bool bnd=m
  146 : __fch_sign typ=w32 bnd=m
  162 : __fch_frac typ=w32 bnd=m
  165 : softfloat_normSubnormalF32Sig typ=t21s_s2 val=0r bnd=m
  166 : __link typ=w32 bnd=m
  171 : __fch_normExpSig_exp typ=w32 bnd=m
  174 : __tmp typ=w32 bnd=m
  178 : __fch_normExpSig_sig typ=w32 bnd=m
  179 : __fch_sign typ=w32 bnd=m
  185 : __fch_exp typ=w32 bnd=m
  186 : __ct_896 typ=w32 val=896f bnd=m
  188 : __tmp typ=w32 bnd=m
  194 : __fch_frac typ=w32 bnd=m
  196 : __ct_29 typ=w32 val=29f bnd=m
  205 : __fch_uiZ_low typ=w32 bnd=m
  208 : __fch_uiZ_high typ=w32 bnd=m
  220 : __fch_uZ typ=w32 bnd=m
  223 : __fch_uZ typ=w32 bnd=m
  224 : __ct_52s0 typ=w32 val=52s0 bnd=m
  226 : __tmp typ=w32 bnd=m
  237 : __ct_2146959360 typ=t20s_rp12 val=524160f bnd=m
  246 : __ct_m1 typ=w32 val=-1f bnd=m
  255 : __ct_32t0 typ=w32 val=32t0 bnd=m
  256 : __adr_uiZ typ=w32 bnd=m adro=25
  257 : __adr_uiZ typ=w32 bnd=m adro=25
  258 : __adr_uiZ typ=w32 bnd=m adro=25
  259 : __ct_40t0 typ=w32 val=40t0 bnd=m
  260 : __adr_normExpSig typ=w32 bnd=m adro=26
  261 : __adr_uiZ typ=w32 bnd=m adro=25
  262 : __adr_uiZ typ=w32 bnd=m adro=25
  263 : __ct_48t0 typ=w32 val=48t0 bnd=m
  264 : __adr_uZ typ=w32 bnd=m adro=27
  265 : __adr_uZ typ=w32 bnd=m adro=27
  279 : __apl_carries typ=w32 bnd=m tref=__uint__
  284 : __apl_r_low typ=w32 bnd=m tref=__uint__
  286 : __apl_r_high typ=w32 bnd=m tref=__uint__
  305 : __apl_r_high typ=w32 bnd=m tref=__uint__
  361 : __ct_20 typ=w32 val=20f bnd=m
  364 : __ct_3 typ=w32 val=3f bnd=m
  365 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
  407 : __either typ=bool bnd=m
  408 : __trgt typ=t13s_s2 val=0j bnd=m
  409 : __trgt typ=t21s_s2 val=0j bnd=m
  410 : __trgt typ=t13s_s2 val=0j bnd=m
  411 : __trgt typ=t13s_s2 val=0j bnd=m
  412 : __trgt typ=t21s_s2 val=0j bnd=m
  413 : __trgt typ=t13s_s2 val=0j bnd=m
  414 : __trgt typ=t21s_s2 val=0j bnd=m
  415 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_to_f64 {
    #4 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (a.18 var=19) source ()  <29>;
    (uA.19 var=20) source ()  <30>;
    (uiA.20 var=21) source ()  <31>;
    (sign.21 var=22) source ()  <32>;
    (exp.22 var=23) source ()  <33>;
    (frac.23 var=24) source ()  <34>;
    (normExpSig.25 var=26) source ()  <36>;
    (uZ.26 var=27) source ()  <37>;
    (uiZ_low.27 var=28) source ()  <38>;
    (uiZ_high.28 var=29) source ()  <39>;
    (normExpSig_exp.29 var=30) source ()  <40>;
    (normExpSig_sig.30 var=31) source ()  <41>;
    (__la.32 var=33 stl=X off=1) inp ()  <43>;
    (__la.33 var=33) deassign (__la.32)  <44>;
    (__arg_a.40 var=37 stl=X off=12) inp ()  <51>;
    (__arg_a.41 var=37) deassign (__arg_a.40)  <52>;
    (__rd___sp.43 var=32) rd_res_reg (__R_SP.11 __sp.17)  <54>;
    (__ct_m52S0.44 var=38) const ()  <55>;
    (__tmp.46 var=40) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_m52S0.44)  <57>;
    (__R_SP.47 var=12 __sp.48 var=18) wr_res_reg (__tmp.46 __sp.17)  <58>;
    (__rd___sp.49 var=32) rd_res_reg (__R_SP.11 __sp.48)  <60>;
    (__ct_0t0.50 var=42) const ()  <61>;
    (__adr_a.52 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.49 __ct_0t0.50)  <63>;
    (__rd___sp.54 var=32) rd_res_reg (__R_SP.11 __sp.48)  <65>;
    (__rd___sp.59 var=32) rd_res_reg (__R_SP.11 __sp.48)  <70>;
    (__rd___sp.64 var=32) rd_res_reg (__R_SP.11 __sp.48)  <75>;
    (__rd___sp.69 var=32) rd_res_reg (__R_SP.11 __sp.48)  <80>;
    (__rd___sp.74 var=32) rd_res_reg (__R_SP.11 __sp.48)  <85>;
    (__rd___sp.79 var=32) rd_res_reg (__R_SP.11 __sp.48)  <90>;
    (__rd___sp.84 var=32) rd_res_reg (__R_SP.11 __sp.48)  <95>;
    (__rd___sp.89 var=32) rd_res_reg (__R_SP.11 __sp.48)  <100>;
    (__M_DMw.94 var=5 a.95 var=19) store (__arg_a.41 __adr_a.52 a.18)  <105>;
    call {
        () chess_separator_scheduler ()  <106>;
    } #5 off=1
    #6 off=2
    (__ct_4t0.55 var=46) const ()  <66>;
    (__adr_uA.57 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.54 __ct_4t0.55)  <68>;
    (__fch_a.97 var=78) load (__M_DMw.4 __adr_a.52 a.95)  <108>;
    (__M_DMw.101 var=5 uA.102 var=20) store (__fch_a.97 __adr_uA.57 uA.19)  <112>;
    call {
        () chess_separator_scheduler ()  <113>;
    } #7 off=3
    #8 off=4
    (__ct_8t0.60 var=50) const ()  <71>;
    (__adr_uiA.62 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.59 __ct_8t0.60)  <73>;
    (__fch_uA.106 var=85) load (__M_DMw.4 __adr_uA.57 uA.102)  <117>;
    (__M_DMw.107 var=5 uiA.108 var=21) store (__fch_uA.106 __adr_uiA.62 uiA.20)  <118>;
    call {
        () chess_separator_scheduler ()  <119>;
    } #9 off=5
    #67 off=6
    (__ct_12t0.65 var=54) const ()  <76>;
    (__adr_sign.67 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.64 __ct_12t0.65)  <78>;
    (__fch_uiA.109 var=86) load (__M_DMw.4 __adr_uiA.62 uiA.108)  <120>;
    (__ct_31.110 var=87) const ()  <121>;
    (__tmp.112 var=89) __uint__rs___uint___sint (__fch_uiA.109 __ct_31.110)  <123>;
    (__M_DMw.117 var=5 sign.118 var=22) store (__tmp.656 __adr_sign.67 sign.21)  <128>;
    (__tmp.656 var=93) __sint_sne0___sint (__tmp.112)  <807>;
    call {
        () chess_separator_scheduler ()  <129>;
    } #11 off=7
    #12 off=8
    (__ct_16t0.70 var=58) const ()  <81>;
    (__adr_exp.72 var=60) __Pvoid__pl___Pvoid___sint (__rd___sp.69 __ct_16t0.70)  <83>;
    (__fch_uiA.119 var=94) load (__M_DMw.4 __adr_uiA.62 uiA.108)  <130>;
    (__ct_23.120 var=95) const ()  <131>;
    (__tmp.122 var=97) __uint__rs___uint___sint (__fch_uiA.119 __ct_23.120)  <133>;
    (__ct_255.124 var=99) const ()  <135>;
    (__tmp.126 var=101) __sint__ad___sint___sint (__tmp.122 __ct_255.124)  <137>;
    (__M_DMw.127 var=5 exp.128 var=23) store (__tmp.126 __adr_exp.72 exp.22)  <138>;
    call {
        () chess_separator_scheduler ()  <139>;
    } #13 off=9
    #14 off=10
    (__ct_20t0.75 var=62) const ()  <86>;
    (__adr_frac.77 var=64) __Pvoid__pl___Pvoid___sint (__rd___sp.74 __ct_20t0.75)  <88>;
    (__fch_uiA.129 var=102) load (__M_DMw.4 __adr_uiA.62 uiA.108)  <140>;
    (__ct_8388607.130 var=103) const ()  <141>;
    (__tmp.132 var=105) __uint__ad___uint___uint (__fch_uiA.129 __ct_8388607.130)  <143>;
    (__M_DMw.133 var=5 frac.134 var=24) store (__tmp.132 __adr_frac.77 frac.23)  <144>;
    call {
        () chess_separator_scheduler ()  <145>;
    } #15 off=11
    #16 off=12
    (__ct_28t0.80 var=66) const ()  <91>;
    (__adr_uiZ.82 var=68) __Pvoid__pl___Pvoid___sint (__rd___sp.79 __ct_28t0.80)  <93>;
    (__ct_0.98 var=79) const ()  <109>;
    (__fch_exp.135 var=106) load (__M_DMw.4 __adr_exp.72 exp.128)  <146>;
    (__tmp.138 var=109) bool__eq___sint___sint (__fch_exp.135 __ct_255.124)  <149>;
    (__ct_32t0.641 var=255) const ()  <788>;
    (__trgt.973 var=413) const ()  <1476>;
    () void_br_bool_t13s_s2 (__tmp.138 __trgt.973)  <1477>;
    (__either.974 var=407) undefined ()  <1478>;
    if {
        {
            () if_expr (__either.974)  <181>;
        } #18
        {
            #20 off=24
            (__fch_frac.170 var=110) load (__M_DMw.4 __adr_frac.77 frac.134)  <182>;
            (__tmp.173 var=113) bool__ne___uint___uint (__fch_frac.170 __ct_0.98)  <185>;
            (__trgt.965 var=408) const ()  <1462>;
            () void_br_bool_t13s_s2 (__tmp.173 __trgt.965)  <1463>;
            (__either.966 var=407) undefined ()  <1464>;
            if {
                {
                    () if_expr (__either.966)  <217>;
                } #22
                {
                    (__M_DMw.208 var=5 uiZ_low.209 var=28) store (__ct_0.98 __adr_uiZ.82 uiZ_low.27)  <221>;
                    (__M_DMw.214 var=5 uiZ_high.215 var=29) store (__ct_2146959360.631 __adr_uiZ.642 uiZ_high.28)  <226>;
                    (__ct_2146959360.631 var=237) const ()  <776>;
                    (__adr_uiZ.642 var=256) __Pvoid__pl___Pvoid___sint (__rd___sp.79 __ct_32t0.641)  <790>;
                } #24 off=26
                {
                    (__fch_sign.216 var=120) load (__M_DMw.4 __adr_sign.67 sign.118)  <228>;
                    (__M_DMw.229 var=5 uiZ_low.230 var=28) store (__ct_0.98 __adr_uiZ.82 uiZ_low.27)  <241>;
                    (__M_DMw.235 var=5 uiZ_high.236 var=29) store (__apl_r_high.695 __adr_uiZ.643 uiZ_high.28)  <246>;
                    (__adr_uiZ.643 var=257) __Pvoid__pl___Pvoid___sint (__rd___sp.79 __ct_32t0.641)  <791>;
                    (__apl_r_high.674 var=286) __uint__ls___uint___sint (__fch_sign.216 __ct_31.110)  <860>;
                    (__apl_r_high.695 var=305) __uint__pl___uint___uint (__apl_r_high.674 __ct_2146435072.900)  <886>;
                    (__ct_2146435072.900 var=365) const ()  <1167>;
                    (__trgt.967 var=409) const ()  <1465>;
                    () void_j_t21s_s2 (__trgt.967)  <1466>;
                } #302 off=25
                {
                    (uiZ_low.237 var=28) merge (uiZ_low.209 uiZ_low.230)  <248>;
                    (uiZ_high.238 var=29) merge (uiZ_high.215 uiZ_high.236)  <249>;
                } #29
            } #21
        } #19
        {
            #31 off=13
            (__fch_exp.239 var=136) load (__M_DMw.4 __adr_exp.72 exp.128)  <250>;
            (__tmp.962 var=139) bool__ne___sint___sint (__fch_exp.239 __ct_0.98)  <1430>;
            (__trgt.970 var=411) const ()  <1471>;
            () void_br_bool_t13s_s2 (__tmp.962 __trgt.970)  <1472>;
            (__either.971 var=407) undefined ()  <1473>;
            if {
                {
                    () if_expr (__either.971)  <286>;
                } #33
                {
                } #53 off=22
                {
                    #35 off=14
                    (__fch_frac.275 var=141) load (__M_DMw.4 __adr_frac.77 frac.134)  <287>;
                    (__tmp.630 var=144) bool__eq___uint___uint (__fch_frac.275 __ct_0.98)  <775>;
                    (__trgt.968 var=410) const ()  <1467>;
                    () void_br_bool_t13s_s2 (__tmp.630 __trgt.968)  <1468>;
                    (__either.969 var=407) undefined ()  <1469>;
                    if {
                        {
                            () if_expr (__either.969)  <323>;
                            () chess_rear_then ()  <1470>;
                        } #37
                        {
                            (__fch_sign.311 var=146) load (__M_DMw.4 __adr_sign.67 sign.118)  <324>;
                            (__M_DMw.324 var=5 uiZ_low.325 var=28) store (__ct_0.98 __adr_uiZ.82 uiZ_low.27)  <337>;
                            (__M_DMw.330 var=5 uiZ_high.331 var=29) store (__apl_r_high.733 __adr_uiZ.644 uiZ_high.28)  <342>;
                            () sink (__sp.48)  <349>;
                            () sink (a.95)  <350>;
                            () sink (uA.102)  <351>;
                            () sink (uiA.108)  <352>;
                            () sink (sign.118)  <353>;
                            () sink (exp.128)  <354>;
                            () sink (frac.134)  <355>;
                            () sink (uiZ_low.325)  <359>;
                            () sink (uiZ_high.331)  <360>;
                            () sync_sink (exp.128) sid=11  <373>;
                            () sync_sink (frac.134) sid=12  <374>;
                            () sync_sink (normExpSig.25) sid=14  <376>;
                            () sync_sink (uiZ_low.325) sid=16  <378>;
                            () sync_sink (uiZ_high.331) sid=17  <379>;
                            () sync_sink (normExpSig_exp.29) sid=18  <380>;
                            () sync_sink (normExpSig_sig.30) sid=19  <381>;
                            (__adr_uiZ.644 var=258) __Pvoid__pl___Pvoid___sint (__rd___sp.79 __ct_32t0.641)  <792>;
                            (__apl_r_high.733 var=286) __uint__ls___uint___sint (__fch_sign.311 __ct_31.110)  <931>;
                            (__trgt.976 var=415) const ()  <1481>;
                            () void_j_t21s_s2 (__trgt.976)  <1482>;
                        } #41 off=16 nxt=-3 tgt=1
                        {
                        } #42 off=15
                        {
                        } #43
                    } #36
                    #44 off=17
                    (__ct_36t0.85 var=70) const ()  <96>;
                    (__adr_normExpSig.87 var=72) __Pvoid__pl___Pvoid___sint (__rd___sp.84 __ct_36t0.85)  <98>;
                    (__fch_frac.395 var=162) load (__M_DMw.4 __adr_frac.77 frac.134)  <457>;
                    (softfloat_normSubnormalF32Sig.399 var=165) const ()  <461>;
                    (__link.400 var=166) w32_jal_t21s_s2 (softfloat_normSubnormalF32Sig.399)  <462>;
                    call {
                        (__ptr_normExpSig.394 var=69 stl=X off=10) assign (__adr_normExpSig.87)  <456>;
                        (__fch_frac.396 var=162 stl=X off=11) assign (__fch_frac.395)  <458>;
                        (__link.401 var=166 stl=X off=1) assign (__link.400)  <463>;
                        (normExpSig.402 var=26 normExpSig_exp.403 var=30 normExpSig_sig.404 var=31) Fsoftfloat_normSubnormalF32Sig (__link.401 __ptr_normExpSig.394 __fch_frac.396 normExpSig.25 normExpSig_exp.29 normExpSig_sig.30)  <464>;
                    } #45 off=18
                    #49 off=19
                    (__fch_normExpSig_exp.409 var=171) load (__M_DMw.4 __adr_normExpSig.87 normExpSig_exp.403)  <471>;
                    (__tmp.412 var=174) __sint__pl___sint___sint (__fch_normExpSig_exp.409 __ct_m1.632)  <474>;
                    (__M_DMw.413 var=5 exp.414 var=23) store (__tmp.412 __adr_exp.72 exp.128)  <475>;
                    (__ct_m1.632 var=246) const ()  <778>;
                    call {
                        () chess_separator_scheduler ()  <476>;
                    } #50 off=20
                    #51 off=21
                    (__fch_normExpSig_sig.418 var=178) load (__M_DMw.4 __adr_normExpSig.646 normExpSig_sig.404)  <480>;
                    (__M_DMw.419 var=5 frac.420 var=24) store (__fch_normExpSig_sig.418 __adr_frac.77 frac.134)  <481>;
                    (__ct_40t0.645 var=259) const ()  <793>;
                    (__adr_normExpSig.646 var=260) __Pvoid__pl___Pvoid___sint (__rd___sp.84 __ct_40t0.645)  <795>;
                    (__trgt.972 var=412) const ()  <1474>;
                    () void_j_t21s_s2 (__trgt.972)  <1475>;
                } #34
                {
                    (exp.431 var=23) merge (exp.128 exp.414)  <493>;
                    (frac.432 var=24) merge (frac.134 frac.420)  <494>;
                    (normExpSig.434 var=26) merge (normExpSig.25 normExpSig.402)  <496>;
                    (normExpSig_exp.438 var=30) merge (normExpSig_exp.29 normExpSig_exp.403)  <500>;
                    (normExpSig_sig.439 var=31) merge (normExpSig_sig.30 normExpSig_sig.404)  <501>;
                } #54
            } #32
            #336 off=23
            (__fch_sign.452 var=179) load (__M_DMw.4 __adr_sign.67 sign.118)  <514>;
            (__fch_exp.458 var=185) load (__M_DMw.4 __adr_exp.72 exp.431)  <520>;
            (__ct_896.459 var=186) const ()  <521>;
            (__tmp.461 var=188) __sint__pl___sint___sint (__fch_exp.458 __ct_896.459)  <523>;
            (__fch_frac.467 var=194) load (__M_DMw.4 __adr_frac.77 frac.432)  <529>;
            (__ct_29.469 var=196) const ()  <531>;
            (__M_DMw.474 var=5 uiZ_low.475 var=28) store (__apl_r_low.845 __adr_uiZ.82 uiZ_low.27)  <536>;
            (__M_DMw.480 var=5 uiZ_high.481 var=29) store (__apl_r_high.869 __adr_uiZ.647 uiZ_high.28)  <541>;
            (__adr_uiZ.647 var=261) __Pvoid__pl___Pvoid___sint (__rd___sp.79 __ct_32t0.641)  <796>;
            (__apl_r_high.761 var=286) __uint__ls___uint___sint (__fch_sign.452 __ct_31.110)  <965>;
            (__apl_r_high.789 var=286) __uint__ls___uint___sint (__tmp.461 __ct_20.896)  <999>;
            (__apl_r_high.810 var=305) __uint__pl___uint___uint (__apl_r_high.761 __apl_r_high.789)  <1025>;
            (__apl_carries.844 var=279) __uint__rs___uint___sint (__fch_frac.467 __ct_3.899)  <1066>;
            (__apl_r_low.845 var=284) __uint__ls___uint___sint (__fch_frac.467 __ct_29.469)  <1067>;
            (__apl_r_high.869 var=305) __uint__pl___uint___uint (__apl_r_high.810 __apl_carries.844)  <1096>;
            (__ct_20.896 var=361) const ()  <1159>;
            (__ct_3.899 var=364) const ()  <1165>;
            (__trgt.975 var=414) const ()  <1479>;
            () void_j_t21s_s2 (__trgt.975)  <1480>;
        } #30
        {
            (exp.492 var=23) merge (exp.128 exp.431)  <553>;
            (frac.493 var=24) merge (frac.134 frac.432)  <554>;
            (normExpSig.495 var=26) merge (normExpSig.25 normExpSig.434)  <556>;
            (uiZ_low.497 var=28) merge (uiZ_low.237 uiZ_low.475)  <558>;
            (uiZ_high.498 var=29) merge (uiZ_high.238 uiZ_high.481)  <559>;
            (normExpSig_exp.499 var=30) merge (normExpSig_exp.29 normExpSig_exp.438)  <560>;
            (normExpSig_sig.500 var=31) merge (normExpSig_sig.30 normExpSig_sig.439)  <561>;
        } #57
    } #17
    sync {
        (exp.523 var=23) sync_link (exp.492) sid=11  <584>;
        (frac.524 var=24) sync_link (frac.493) sid=12  <585>;
        (normExpSig.526 var=26) sync_link (normExpSig.495) sid=14  <587>;
        (uiZ_low.528 var=28) sync_link (uiZ_low.497) sid=16  <589>;
        (uiZ_high.529 var=29) sync_link (uiZ_high.498) sid=17  <590>;
        (normExpSig_exp.530 var=30) sync_link (normExpSig_exp.499) sid=18  <591>;
        (normExpSig_sig.531 var=31) sync_link (normExpSig_sig.500) sid=19  <592>;
    } #1 off=29
    #58 off=30
    (__ct_44t0.90 var=74) const ()  <101>;
    (__adr_uZ.92 var=76) __Pvoid__pl___Pvoid___sint (__rd___sp.89 __ct_44t0.90)  <103>;
    (__fch_uiZ_low.545 var=205) load (__M_DMw.4 __adr_uiZ.82 uiZ_low.528)  <606>;
    (__fch_uiZ_high.550 var=208) load (__M_DMw.4 __adr_uiZ.648 uiZ_high.529)  <611>;
    (__M_DMw.556 var=5 uZ.557 var=27) store (__fch_uiZ_low.545 __adr_uZ.92 uZ.26)  <617>;
    (__M_DMw.562 var=5 uZ.563 var=27) store (__fch_uiZ_high.550 __adr_uZ.650 uZ.557)  <622>;
    (__adr_uiZ.648 var=262) __Pvoid__pl___Pvoid___sint (__rd___sp.79 __ct_32t0.641)  <797>;
    (__ct_48t0.649 var=263) const ()  <798>;
    (__adr_uZ.650 var=264) __Pvoid__pl___Pvoid___sint (__rd___sp.89 __ct_48t0.649)  <800>;
    call {
        () chess_separator_scheduler ()  <623>;
    } #59 off=31
    #62 off=32 nxt=-2
    (__fch_uZ.568 var=220) load (__M_DMw.4 __adr_uZ.92 uZ.563)  <628>;
    (__fch_uZ.573 var=223) load (__M_DMw.4 __adr_uZ.651 uZ.563)  <633>;
    (__rd___sp.575 var=32) rd_res_reg (__R_SP.11 __sp.48)  <635>;
    (__ct_52s0.576 var=224) const ()  <636>;
    (__tmp.578 var=226) __Pvoid__pl___Pvoid___sint (__rd___sp.575 __ct_52s0.576)  <638>;
    (__R_SP.579 var=12 __sp.580 var=18) wr_res_reg (__tmp.578 __sp.48)  <639>;
    () void___rts_jr_w32 (__la.33)  <640>;
    (__rt_low.582 var=35 stl=X off=10) assign (__fch_uZ.568)  <642>;
    () out (__rt_low.582)  <643>;
    (__rt_high.584 var=36 stl=X off=11) assign (__fch_uZ.573)  <645>;
    () out (__rt_high.584)  <646>;
    () sink (__sp.580)  <652>;
    () sink (a.95)  <653>;
    () sink (uA.102)  <654>;
    () sink (uiA.108)  <655>;
    () sink (sign.118)  <656>;
    () sink (exp.523)  <657>;
    () sink (frac.524)  <658>;
    () sink (normExpSig.526)  <660>;
    () sink (uZ.563)  <661>;
    () sink (uiZ_low.528)  <662>;
    () sink (uiZ_high.529)  <663>;
    () sink (normExpSig_exp.530)  <664>;
    () sink (normExpSig_sig.531)  <665>;
    (__adr_uZ.651 var=265) __Pvoid__pl___Pvoid___sint (__rd___sp.89 __ct_48t0.649)  <801>;
} #0
0 : 'SoftFloat-3e/source/f32_to_f64.c';
----------
0 : (0,44:0,0);
1 : (0,88:1,52);
4 : (0,44:22,0);
5 : (0,44:22,0);
6 : (0,58:9,12);
7 : (0,58:9,12);
8 : (0,59:8,13);
9 : (0,59:8,13);
11 : (0,60:9,14);
12 : (0,61:9,15);
13 : (0,61:9,15);
14 : (0,62:9,16);
15 : (0,62:9,16);
16 : (0,65:13,16);
17 : (0,65:4,16);
19 : (0,65:23,17);
20 : (0,66:8,17);
21 : (0,66:8,17);
24 : (0,68:16,20);
30 : (0,88:1,29);
31 : (0,76:9,30);
32 : (0,76:4,30);
34 : (0,76:17,31);
35 : (0,77:13,31);
36 : (0,77:8,31);
41 : (0,79:12,33);
42 : (0,77:8,36);
44 : (0,81:52,39);
45 : (0,81:21,39);
49 : (0,82:12,42);
50 : (0,82:12,42);
51 : (0,83:13,43);
53 : (0,76:4,45);
58 : (0,89:10,54);
59 : (0,89:10,54);
62 : (0,90:4,54);
67 : (0,60:4,13);
302 : (0,70:12,22);
336 : (0,87:4,48);
----------
54 : (0,44:10,0);
55 : (0,44:10,0);
57 : (0,44:10,0);
58 : (0,44:10,0);
60 : (0,44:32,0);
61 : (0,44:32,0);
63 : (0,44:32,0);
65 : (0,46:19,0);
66 : (0,46:19,0);
68 : (0,46:19,0);
70 : (0,47:18,0);
71 : (0,47:18,0);
73 : (0,47:18,0);
75 : (0,48:9,0);
76 : (0,48:9,0);
78 : (0,48:9,0);
80 : (0,49:17,0);
81 : (0,49:17,0);
83 : (0,49:17,0);
85 : (0,50:18,0);
86 : (0,50:18,0);
88 : (0,50:18,0);
90 : (0,52:18,0);
91 : (0,52:18,0);
93 : (0,52:18,0);
95 : (0,53:23,0);
96 : (0,53:23,0);
98 : (0,53:23,0);
100 : (0,54:19,0);
101 : (0,54:19,0);
103 : (0,54:19,0);
105 : (0,44:22,0);
106 : (0,44:22,0);
108 : (0,58:11,11);
109 : (0,58:6,0);
112 : (0,58:6,11);
113 : (0,58:9,12);
117 : (0,59:12,12);
118 : (0,59:4,12);
119 : (0,59:8,13);
120 : (0,60:32,13);
121 : (0,60:38,0);
123 : (0,60:36,13);
128 : (0,60:4,13);
129 : (0,60:9,14);
130 : (0,61:29,14);
131 : (0,61:35,0);
133 : (0,61:33,14);
135 : (0,61:39,0);
137 : (0,61:39,14);
138 : (0,61:4,14);
139 : (0,61:9,15);
140 : (0,62:13,15);
141 : (0,62:18,0);
143 : (0,62:18,15);
144 : (0,62:4,15);
145 : (0,62:9,16);
146 : (0,65:9,16);
149 : (0,65:13,16);
181 : (0,65:4,16);
182 : (0,66:13,17);
185 : (0,66:8,17);
217 : (0,66:8,17);
221 : (0,68:12,19);
226 : (0,68:12,19);
228 : (0,70:49,22);
241 : (0,70:12,22);
246 : (0,70:12,22);
248 : (0,66:8,25);
249 : (0,66:8,25);
250 : (0,76:11,30);
286 : (0,76:4,30);
287 : (0,77:15,31);
323 : (0,77:8,31);
324 : (0,78:49,32);
337 : (0,78:12,32);
342 : (0,78:12,32);
456 : (0,81:19,0);
457 : (0,81:52,39);
458 : (0,81:52,0);
462 : (0,81:21,39);
463 : (0,81:21,0);
464 : (0,81:21,39);
471 : (0,82:24,41);
474 : (0,82:29,41);
475 : (0,82:8,41);
476 : (0,82:12,42);
480 : (0,83:25,42);
481 : (0,83:8,42);
493 : (0,76:4,47);
494 : (0,76:4,47);
496 : (0,76:4,47);
500 : (0,76:4,47);
501 : (0,76:4,47);
514 : (0,87:41,48);
520 : (0,87:72,48);
521 : (0,87:76,0);
523 : (0,87:76,48);
529 : (0,87:109,48);
531 : (0,87:115,0);
536 : (0,87:4,48);
541 : (0,87:4,48);
553 : (0,65:4,51);
554 : (0,65:4,51);
556 : (0,65:4,51);
558 : (0,65:4,51);
559 : (0,65:4,51);
560 : (0,65:4,51);
561 : (0,65:4,51);
606 : (0,89:12,53);
611 : (0,89:12,53);
617 : (0,89:6,53);
622 : (0,89:6,53);
623 : (0,89:10,54);
628 : (0,90:13,54);
633 : (0,90:13,54);
635 : (0,90:4,0);
636 : (0,90:4,0);
638 : (0,90:4,0);
639 : (0,90:4,54);
640 : (0,90:4,54);
642 : (0,90:13,0);
645 : (0,90:13,0);
775 : (0,77:13,31);
776 : (0,68:19,0);
778 : (0,82:29,0);
788 : (0,52:18,0);
793 : (0,53:23,0);
795 : (0,83:25,0);
798 : (0,54:19,0);
807 : (0,60:4,13);
860 : (0,70:54,22);
886 : (0,70:60,22);
931 : (0,78:54,32);
965 : (0,87:46,48);
999 : (0,87:84,48);
1025 : (0,87:52,48);
1066 : (0,87:113,48);
1067 : (0,87:113,48);
1096 : (0,87:90,48);
1159 : (0,87:84,0);
1165 : (0,87:113,0);
1167 : (0,70:86,0);
1430 : (0,76:9,30);
1463 : (0,66:8,17);
1468 : (0,77:8,31);
1472 : (0,76:4,30);
1477 : (0,65:4,16);

