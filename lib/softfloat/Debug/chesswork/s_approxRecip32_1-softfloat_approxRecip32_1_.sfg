
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 17:53:50 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/s_approxRecip32_1.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint32_t softfloat_approxRecip32_1(uint32_t)
Fsoftfloat_approxRecip32_1 : user_defined, called {
    fnm : "softfloat_approxRecip32_1" 'uint32_t softfloat_approxRecip32_1(uint32_t)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=24 );
}
****
***/

[
    0 : softfloat_approxRecip32_1 typ=u08 bnd=e stl=PMb
    4 : __M_DMh typ=w16 bnd=d stl=DMh
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : a typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=uint32_t_DMb
   20 : index typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   21 : eps typ=w08 val=8t0 bnd=a sz=2 algn=2 stl=DMb tref=uint16_t_DMb
   22 : r0 typ=w08 val=10t0 bnd=a sz=2 algn=2 stl=DMb tref=uint16_t_DMb
   23 : softfloat_approxRecip_1k0s typ=w08 bnd=e sz=32 algn=2 stl=DMb tref=__A16__ushort_DMb
   25 : softfloat_approxRecip_1k1s typ=w08 bnd=e sz=32 algn=2 stl=DMb tref=__A16__ushort_DMb
   26 : sigma0 typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=uint32_t_DMb
   27 : r typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   28 : sqrSigma0 typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=uint32_t_DMb
   29 : __rd___sp typ=w32 bnd=m
   31 : __ptr_softfloat_approxRecip_1k0s typ=w32 val=0a bnd=m adro=23
   33 : __ptr_softfloat_approxRecip_1k1s typ=w32 val=0a bnd=m adro=25
   34 : __la typ=w32 bnd=p tref=w32__
   35 : __rt typ=w32 bnd=p tref=uint32_t__
   36 : __arg_a typ=w32 bnd=p tref=uint32_t__
   37 : __ct_m24S0 typ=w32 val=-24S0 bnd=m
   39 : __tmp typ=w32 bnd=m
   41 : __ct_0t0 typ=w32 val=0t0 bnd=m
   43 : __adr_a typ=w32 bnd=m adro=19
   45 : __ct_4t0 typ=w32 val=4t0 bnd=m
   47 : __adr_index typ=w32 bnd=m adro=20
   49 : __ct_8t0 typ=w32 val=8t0 bnd=m
   51 : __adr_eps typ=w32 bnd=m adro=21
   53 : __ct_10t0 typ=w32 val=10t0 bnd=m
   55 : __adr_r0 typ=w32 bnd=m adro=22
   57 : __ct_12t0 typ=w32 val=12t0 bnd=m
   59 : __adr_sigma0 typ=w32 bnd=m adro=26
   61 : __ct_16t0 typ=w32 val=16t0 bnd=m
   63 : __adr_r typ=w32 bnd=m adro=27
   65 : __ct_20t0 typ=w32 val=20t0 bnd=m
   67 : __adr_sqrSigma0 typ=w32 bnd=m adro=28
   68 : __fch_a typ=w32 bnd=m
   69 : __ct_27 typ=w32 val=27f bnd=m
   71 : __tmp typ=w32 bnd=m
   72 : __ct_15 typ=w32 val=15f bnd=m
   74 : __tmp typ=w32 bnd=m
   76 : __fch_a typ=w32 bnd=m
   77 : __ct_11 typ=w32 val=11f bnd=m
   79 : __tmp typ=w32 bnd=m
   80 : __tmp typ=__ushort bnd=m
   81 : __fch_index typ=w32 bnd=m
   84 : __tmp typ=w32 bnd=m
   85 : __tmp typ=w32 bnd=m
   86 : __fch_softfloat_approxRecip_1k0s typ=__ushort bnd=m
   88 : __fch_index typ=w32 bnd=m
   91 : __tmp typ=w32 bnd=m
   92 : __tmp typ=w32 bnd=m
   93 : __fch_softfloat_approxRecip_1k1s typ=__ushort bnd=m
   95 : __fch_eps typ=__ushort bnd=m
   97 : __tmp typ=w32 bnd=m
   98 : __ct_20 typ=w32 val=20f bnd=m
  100 : __tmp typ=w32 bnd=m
  101 : __tmp typ=w32 bnd=m
  102 : __tmp typ=__ushort bnd=m
  103 : __fch_r0 typ=__ushort bnd=m
  105 : __fch_a typ=w32 bnd=m
  108 : __ct_7 typ=w32 val=7f bnd=m
  112 : __tmp typ=w32 bnd=m
  113 : __fch_r0 typ=__ushort bnd=m
  115 : __ct_16 typ=w32 val=16f bnd=m
  117 : __tmp typ=w32 bnd=m
  119 : __fch_r0 typ=__ushort bnd=m
  121 : __fch_sigma0 typ=w32 bnd=m
  124 : __ct_24 typ=w32 val=24f bnd=m
  129 : __fch_sigma0 typ=w32 bnd=m
  131 : __fch_sigma0 typ=w32 bnd=m
  138 : __fch_r typ=w32 bnd=m
  140 : __fch_r typ=w32 bnd=m
  142 : __fch_sqrSigma0 typ=w32 bnd=m
  151 : __ct_24s0 typ=w32 val=24s0 bnd=m
  153 : __tmp typ=w32 bnd=m
  158 : __ct_1 typ=w32 val=1f bnd=m
  165 : __apl_p1lo typ=w32 bnd=m tref=__uint__
  166 : __apl_p1hi typ=w32 bnd=m tref=__uint__
  208 : __apl_carries typ=w32 bnd=m tref=__uint__
  213 : __tmp typ=w32 bnd=m
  214 : __apl_r_low typ=w32 bnd=m tref=__uint__
  226 : __ct_4294967295 typ=w32 val=-1f bnd=m
  251 : __apl_r_low typ=w32 bnd=m tref=__uint__
  304 : __ct_25 typ=w32 val=25f bnd=m
  306 : __ct_8 typ=w32 val=8f bnd=m
]
Fsoftfloat_approxRecip32_1 {
    #3 off=0
    (__M_DMh.3 var=4) st_def ()  <6>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (a.18 var=19) source ()  <29>;
    (index.19 var=20) source ()  <30>;
    (eps.20 var=21) source ()  <31>;
    (r0.21 var=22) source ()  <32>;
    (softfloat_approxRecip_1k0s.22 var=23) source ()  <33>;
    (softfloat_approxRecip_1k1s.24 var=25) source ()  <35>;
    (sigma0.25 var=26) source ()  <36>;
    (r.26 var=27) source ()  <37>;
    (sqrSigma0.27 var=28) source ()  <38>;
    (__la.33 var=34 stl=X off=1) inp ()  <44>;
    (__la.34 var=34) deassign (__la.33)  <45>;
    (__arg_a.37 var=36 stl=X off=11) inp ()  <48>;
    (__arg_a.38 var=36) deassign (__arg_a.37)  <49>;
    (__rd___sp.40 var=29) rd_res_reg (__R_SP.11 __sp.17)  <51>;
    (__ct_m24S0.41 var=37) const ()  <52>;
    (__tmp.43 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_m24S0.41)  <54>;
    (__R_SP.44 var=12 __sp.45 var=18) wr_res_reg (__tmp.43 __sp.17)  <55>;
    (__rd___sp.46 var=29) rd_res_reg (__R_SP.11 __sp.45)  <57>;
    (__ct_0t0.47 var=41) const ()  <58>;
    (__adr_a.49 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_0t0.47)  <60>;
    (__rd___sp.51 var=29) rd_res_reg (__R_SP.11 __sp.45)  <62>;
    (__rd___sp.56 var=29) rd_res_reg (__R_SP.11 __sp.45)  <67>;
    (__rd___sp.61 var=29) rd_res_reg (__R_SP.11 __sp.45)  <72>;
    (__rd___sp.66 var=29) rd_res_reg (__R_SP.11 __sp.45)  <77>;
    (__rd___sp.71 var=29) rd_res_reg (__R_SP.11 __sp.45)  <82>;
    (__rd___sp.76 var=29) rd_res_reg (__R_SP.11 __sp.45)  <87>;
    (__M_DMw.81 var=5 a.82 var=19) store (__arg_a.38 __adr_a.49 a.18)  <92>;
    call {
        () chess_separator_scheduler ()  <93>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.52 var=45) const ()  <63>;
    (__adr_index.54 var=47) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.52)  <65>;
    (__fch_a.83 var=68) load (__M_DMw.4 __adr_a.49 a.82)  <94>;
    (__ct_27.84 var=69) const ()  <95>;
    (__tmp.86 var=71) __uint__rs___uint___sint (__fch_a.83 __ct_27.84)  <97>;
    (__ct_15.87 var=72) const ()  <98>;
    (__tmp.89 var=74) __uint__ad___uint___uint (__tmp.86 __ct_15.87)  <100>;
    (__M_DMw.91 var=5 index.92 var=20) store (__tmp.89 __adr_index.54 index.19)  <102>;
    call {
        () chess_separator_scheduler ()  <103>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.57 var=49) const ()  <68>;
    (__adr_eps.59 var=51) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_8t0.57)  <70>;
    (__fch_a.93 var=76) load (__M_DMw.4 __adr_a.49 a.82)  <104>;
    (__ct_11.94 var=77) const ()  <105>;
    (__tmp.96 var=79) __uint__rs___uint___sint (__fch_a.93 __ct_11.94)  <107>;
    (__tmp.97 var=80) __ushort___ushort___uint (__tmp.96)  <108>;
    (__M_DMh.98 var=4 eps.99 var=21) store (__tmp.97 __adr_eps.59 eps.20)  <109>;
    call {
        () chess_separator_scheduler ()  <110>;
    } #8 off=5
    #9 off=6
    (__ptr_softfloat_approxRecip_1k0s.29 var=31) const ()  <40>;
    (__ptr_softfloat_approxRecip_1k1s.31 var=33) const ()  <42>;
    (__ct_10t0.62 var=53) const ()  <73>;
    (__adr_r0.64 var=55) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_10t0.62)  <75>;
    (__fch_index.100 var=81) load (__M_DMw.4 __adr_index.54 index.92)  <111>;
    (__tmp.103 var=84) __sint__ls___sint___sint (__fch_index.100 __ct_1.219)  <114>;
    (__tmp.104 var=85) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_approxRecip_1k0s.29 __tmp.103)  <115>;
    (__fch_softfloat_approxRecip_1k0s.105 var=86) load (__M_DMh.3 __tmp.104 softfloat_approxRecip_1k0s.22)  <116>;
    (__fch_index.107 var=88) load (__M_DMw.4 __adr_index.54 index.92)  <118>;
    (__tmp.110 var=91) __sint__ls___sint___sint (__fch_index.107 __ct_1.219)  <121>;
    (__tmp.111 var=92) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_approxRecip_1k1s.31 __tmp.110)  <122>;
    (__fch_softfloat_approxRecip_1k1s.112 var=93) load (__M_DMh.3 __tmp.111 softfloat_approxRecip_1k1s.24)  <123>;
    (__fch_eps.114 var=95) load (__M_DMh.3 __adr_eps.59 eps.99)  <125>;
    (__tmp.116 var=97) __uint__ml___uint___uint (__fch_softfloat_approxRecip_1k1s.112 __fch_eps.114)  <127>;
    (__ct_20.117 var=98) const ()  <128>;
    (__tmp.119 var=100) __uint__rs___uint___sint (__tmp.116 __ct_20.117)  <130>;
    (__tmp.120 var=101) __uint__mi___uint___uint (__fch_softfloat_approxRecip_1k0s.105 __tmp.119)  <131>;
    (__tmp.121 var=102) __ushort___ushort___uint (__tmp.120)  <132>;
    (__M_DMh.122 var=4 r0.123 var=22) store (__tmp.121 __adr_r0.64 r0.21)  <133>;
    (__ct_1.219 var=158) const ()  <293>;
    call {
        () chess_separator_scheduler ()  <134>;
    } #10 off=7
    #449 off=8
    (__ct_12t0.67 var=57) const ()  <78>;
    (__adr_sigma0.69 var=59) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_12t0.67)  <80>;
    (__fch_r0.124 var=103) load (__M_DMh.3 __adr_r0.64 r0.123)  <135>;
    (__fch_a.126 var=105) load (__M_DMw.4 __adr_a.49 a.82)  <137>;
    (__ct_7.129 var=108) const ()  <140>;
    (__M_DMw.134 var=5 sigma0.135 var=26) store (__tmp.299 __adr_sigma0.69 sigma0.25)  <145>;
    (__apl_p1lo.233 var=165) __uint_mul___uint___uint (__fch_r0.124 __fch_a.126)  <334>;
    (__apl_p1hi.240 var=166) __uint_mulhu___uint___uint (__fch_r0.124 __fch_a.126)  <343>;
    (__apl_carries.279 var=208) __uint__ls___uint___sint (__apl_p1hi.240 __ct_25.591)  <392>;
    (__tmp.280 var=213) __uint__rs___uint___sint (__apl_p1lo.233 __ct_7.129)  <393>;
    (__apl_r_low.281 var=214) __uint__or___uint___uint (__tmp.280 __apl_carries.279)  <394>;
    (__ct_4294967295.298 var=226) const ()  <415>;
    (__tmp.299 var=112) __uint__er___uint___uint (__apl_r_low.281 __ct_4294967295.298)  <416>;
    (__ct_25.591 var=304) const ()  <804>;
    call {
        () chess_separator_scheduler ()  <146>;
    } #12 off=9
    #477 off=10
    (__ct_16t0.72 var=61) const ()  <83>;
    (__adr_r.74 var=63) __Pvoid__pl___Pvoid___sint (__rd___sp.71 __ct_16t0.72)  <85>;
    (__fch_r0.136 var=113) load (__M_DMh.3 __adr_r0.64 r0.123)  <147>;
    (__ct_16.138 var=115) const ()  <149>;
    (__tmp.140 var=117) __uint__ls___uint___sint (__fch_r0.136 __ct_16.138)  <151>;
    (__fch_r0.142 var=119) load (__M_DMh.3 __adr_r0.64 r0.123)  <153>;
    (__fch_sigma0.144 var=121) load (__M_DMw.4 __adr_sigma0.69 sigma0.135)  <155>;
    (__ct_24.147 var=124) const ()  <158>;
    (__M_DMw.152 var=5 r.153 var=27) store (__apl_r_low.387 __adr_r.74 r.26)  <163>;
    (__apl_p1lo.312 var=165) __uint_mul___uint___uint (__fch_r0.142 __fch_sigma0.144)  <434>;
    (__apl_p1hi.319 var=166) __uint_mulhu___uint___uint (__fch_r0.142 __fch_sigma0.144)  <443>;
    (__apl_carries.358 var=208) __uint__ls___uint___sint (__apl_p1hi.319 __ct_8.593)  <492>;
    (__tmp.359 var=213) __uint__rs___uint___sint (__apl_p1lo.312 __ct_24.147)  <493>;
    (__apl_r_low.360 var=214) __uint__or___uint___uint (__tmp.359 __apl_carries.358)  <494>;
    (__apl_r_low.387 var=251) __uint_add___uint___uint (__tmp.140 __apl_r_low.360)  <527>;
    (__ct_8.593 var=306) const ()  <808>;
    call {
        () chess_separator_scheduler ()  <164>;
    } #14 off=11
    #502 off=12
    (__ct_20t0.77 var=65) const ()  <88>;
    (__adr_sqrSigma0.79 var=67) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_20t0.77)  <90>;
    (__fch_sigma0.154 var=129) load (__M_DMw.4 __adr_sigma0.69 sigma0.135)  <165>;
    (__fch_sigma0.156 var=131) load (__M_DMw.4 __adr_sigma0.69 sigma0.135)  <167>;
    (__M_DMw.163 var=5 sqrSigma0.164 var=28) store (__apl_p1hi.425 __adr_sqrSigma0.79 sqrSigma0.27)  <174>;
    (__apl_p1hi.425 var=166) __uint_mulhu___uint___uint (__fch_sigma0.154 __fch_sigma0.156)  <573>;
    call {
        () chess_separator_scheduler ()  <175>;
    } #16 off=13
    #532 off=14
    (__fch_r.165 var=138) load (__M_DMw.4 __adr_r.74 r.153)  <176>;
    (__fch_r.167 var=140) load (__M_DMw.4 __adr_r.74 r.153)  <178>;
    (__fch_sqrSigma0.169 var=142) load (__M_DMw.4 __adr_sqrSigma0.79 sqrSigma0.164)  <180>;
    (__M_DMw.177 var=5 r.178 var=27) store (__apl_r_low.568 __adr_r.74 r.153)  <188>;
    (__apl_p1hi.500 var=166) __uint_mulhu___uint___uint (__fch_r.167 __fch_sqrSigma0.169)  <666>;
    (__apl_r_low.543 var=214) __uint__rs___uint___sint (__apl_p1hi.500 __ct_16.138)  <719>;
    (__apl_r_low.568 var=251) __uint_add___uint___uint (__fch_r.165 __apl_r_low.543)  <750>;
    call {
        () chess_separator_scheduler ()  <189>;
    } #18 off=15
    #21 off=16 nxt=-2
    (__rt.179 var=35) load (__M_DMw.4 __adr_r.74 r.178)  <190>;
    (__rd___sp.180 var=29) rd_res_reg (__R_SP.11 __sp.45)  <191>;
    (__ct_24s0.181 var=151) const ()  <192>;
    (__tmp.183 var=153) __Pvoid__pl___Pvoid___sint (__rd___sp.180 __ct_24s0.181)  <194>;
    (__R_SP.184 var=12 __sp.185 var=18) wr_res_reg (__tmp.183 __sp.45)  <195>;
    () void___rts_jr_w32 (__la.34)  <196>;
    (__rt.186 var=35 stl=X off=10) assign (__rt.179)  <197>;
    () out (__rt.186)  <198>;
    () sink (__sp.185)  <204>;
    () sink (a.82)  <205>;
    () sink (index.92)  <206>;
    () sink (eps.99)  <207>;
    () sink (r0.123)  <208>;
    () sink (sigma0.135)  <212>;
    () sink (r.178)  <213>;
    () sink (sqrSigma0.164)  <214>;
} #0
0 : 'SoftFloat-3e/source/s_approxRecip32_1.c';
----------
0 : (0,45:0,0);
3 : (0,45:36,0);
4 : (0,45:36,0);
5 : (0,53:10,8);
6 : (0,53:10,8);
7 : (0,54:8,9);
8 : (0,54:8,9);
9 : (0,55:7,10);
10 : (0,55:7,10);
12 : (0,57:11,11);
14 : (0,58:6,12);
16 : (0,59:14,13);
18 : (0,60:6,14);
21 : (0,61:4,14);
449 : (0,57:4,10);
477 : (0,58:4,11);
502 : (0,59:4,12);
532 : (0,60:4,13);
----------
40 : (0,55:9,0);
42 : (0,56:17,0);
51 : (0,45:9,0);
52 : (0,45:9,0);
54 : (0,45:9,0);
55 : (0,45:9,0);
57 : (0,45:45,0);
58 : (0,45:45,0);
60 : (0,45:45,0);
62 : (0,47:8,0);
63 : (0,47:8,0);
65 : (0,47:8,0);
67 : (0,48:13,0);
68 : (0,48:13,0);
70 : (0,48:13,0);
72 : (0,48:18,0);
73 : (0,48:18,0);
75 : (0,48:18,0);
77 : (0,49:13,0);
78 : (0,49:13,0);
80 : (0,49:13,0);
82 : (0,50:18,0);
83 : (0,50:18,0);
85 : (0,50:18,0);
87 : (0,51:13,0);
88 : (0,51:13,0);
90 : (0,51:13,0);
92 : (0,45:36,0);
93 : (0,45:36,0);
94 : (0,53:12,7);
95 : (0,53:15,0);
97 : (0,53:13,7);
98 : (0,53:18,0);
100 : (0,53:18,7);
102 : (0,53:4,7);
103 : (0,53:10,8);
104 : (0,54:22,8);
105 : (0,54:25,0);
107 : (0,54:23,8);
108 : (0,54:10,8);
109 : (0,54:4,8);
110 : (0,54:8,9);
111 : (0,55:36,9);
114 : (0,55:36,9);
115 : (0,55:35,9);
116 : (0,55:35,9);
118 : (0,56:44,9);
121 : (0,56:44,9);
122 : (0,56:43,9);
123 : (0,56:43,9);
125 : (0,56:69,9);
127 : (0,56:51,9);
128 : (0,56:75,0);
130 : (0,56:73,9);
131 : (0,56:13,9);
132 : (0,55:7,9);
133 : (0,55:4,9);
134 : (0,55:7,10);
135 : (0,57:32,10);
137 : (0,57:53,10);
140 : (0,57:57,0);
145 : (0,57:4,10);
146 : (0,57:11,11);
147 : (0,58:25,11);
149 : (0,58:29,0);
151 : (0,58:27,11);
153 : (0,58:37,11);
155 : (0,58:58,11);
158 : (0,58:67,0);
163 : (0,58:4,11);
164 : (0,58:6,12);
165 : (0,59:33,12);
167 : (0,59:42,12);
174 : (0,59:4,12);
175 : (0,59:14,13);
176 : (0,60:4,13);
178 : (0,60:21,13);
180 : (0,60:41,13);
188 : (0,60:4,13);
189 : (0,60:6,14);
190 : (0,61:11,14);
191 : (0,61:4,0);
192 : (0,61:4,0);
194 : (0,61:4,0);
195 : (0,61:4,14);
196 : (0,61:4,14);
197 : (0,61:11,0);
293 : (0,55:36,0);
334 : (0,57:35,10);
343 : (0,57:35,10);
392 : (0,57:55,10);
393 : (0,57:55,10);
394 : (0,57:55,10);
415 : (0,57:13,0);
416 : (0,57:13,10);
434 : (0,58:40,11);
443 : (0,58:40,11);
492 : (0,58:65,11);
493 : (0,58:65,11);
494 : (0,58:65,11);
527 : (0,58:33,11);
573 : (0,59:40,12);
666 : (0,60:23,13);
719 : (0,60:51,13);
750 : (0,60:6,13);
804 : (0,57:55,0);
808 : (0,58:65,0);

