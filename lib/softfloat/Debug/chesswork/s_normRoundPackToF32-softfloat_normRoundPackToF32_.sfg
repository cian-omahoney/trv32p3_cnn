
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:34:27 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +Opmsa +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork SoftFloat-3e/source/s_normRoundPackToF32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t softfloat_normRoundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_normRoundPackToF32 : user_defined, called {
    fnm : "softfloat_normRoundPackToF32" 'float32_t softfloat_normRoundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=20 );
    llv : 0 0 0 0 0 ;
}
****
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : softfloat_normRoundPackToF32 typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : sig typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=uint_fast32_t_DMb
   20 : exp typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast16_t_DMb
   21 : sign typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=bool_DMb
   22 : softfloat_countLeadingZeros8 typ=w08 bnd=e sz=256 algn=1 stl=DMb tref=__A256__uchar_DMb
   24 : shiftDist typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=int_fast8_t_DMb
   25 : uZ typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=ui32_f32_DMb
   26 : __rd___sp typ=w32 bnd=m
   28 : __ptr_softfloat_countLeadingZeros8 typ=w32 val=0a bnd=m adro=22
   29 : __la typ=w32 bnd=p tref=w32__
   30 : __rt typ=w32 bnd=p tref=float32_t___1
   31 : __arg_sign typ=w32 bnd=p tref=bool__
   33 : __arg_exp typ=w32 bnd=p tref=int_fast16_t__
   34 : __arg_sig typ=w32 bnd=p tref=uint_fast32_t__
   35 : __ct_m20S0 typ=w32 val=-20S0 bnd=m
   37 : __tmp typ=w32 bnd=m
   40 : __ct_0t0 typ=w32 val=0t0 bnd=m
   42 : __adr_sig typ=w32 bnd=m adro=19
   44 : __ct_4t0 typ=w32 val=4t0 bnd=m
   46 : __adr_exp typ=w32 bnd=m adro=20
   48 : __ct_8t0 typ=w32 val=8t0 bnd=m
   50 : __adr_sign typ=w32 bnd=m adro=21
   52 : __ct_12t0 typ=w32 val=12t0 bnd=m
   54 : __adr_shiftDist typ=w32 bnd=m adro=24
   56 : __ct_16t0 typ=w32 val=16t0 bnd=m
   58 : __adr_uZ typ=w32 bnd=m adro=25
   61 : __inl_a typ=w32 bnd=m tref=uint32_t__
   62 : __inl_count typ=w32 bnd=m tref=uint_fast8_t__
   64 : __fch_sig typ=w32 bnd=m
   65 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   67 : __ct_65536 typ=t20s_rp12 val=16f bnd=m
   69 : __tmp typ=bool bnd=m
   70 : __ct_16 typ=w32 val=16f bnd=m
   75 : __ct_16777216 typ=t20s_rp12 val=4096f bnd=m
   77 : __tmp typ=bool bnd=m
   78 : __ct_8 typ=w32 val=8f bnd=m
   84 : __ct_24 typ=w32 val=24f bnd=m
   86 : __tmp typ=w32 bnd=m
   88 : __tmp typ=w32 bnd=m
   89 : __fch_softfloat_countLeadingZeros8 typ=__uchar bnd=m
   95 : __tmp typ=w32 bnd=m
   97 : __fch_exp typ=w32 bnd=m
   98 : __fch_shiftDist typ=w32 bnd=m
   99 : __tmp typ=w32 bnd=m
  100 : __ct_7 typ=w32 val=7f bnd=m
  102 : __fch_shiftDist typ=w32 bnd=m
  103 : __tmp typ=bool bnd=m
  104 : __fch_exp typ=w32 bnd=m
  106 : __ct_253 typ=w32 val=253f bnd=m
  108 : __tmp typ=bool bnd=m
  111 : __tmp typ=bool bnd=m
  112 : __fch_sign typ=w32 bnd=m
  115 : __ct_31 typ=w32 val=31f bnd=m
  117 : __tmp typ=w32 bnd=m
  118 : __fch_sig typ=w32 bnd=m
  121 : __tmp typ=bool bnd=m
  122 : __fch_exp typ=w32 bnd=m
  125 : __tmp typ=w32 bnd=m
  127 : __ct_23 typ=w32 val=23f bnd=m
  129 : __tmp typ=w32 bnd=m
  130 : __tmp typ=w32 bnd=m
  131 : __fch_sig typ=w32 bnd=m
  132 : __fch_shiftDist typ=w32 bnd=m
  135 : __tmp typ=w32 bnd=m
  136 : __tmp typ=w32 bnd=m
  137 : __tmp typ=w32 bnd=m
  145 : __fch_sign typ=w32 bnd=m
  147 : __tmp typ=w32 bnd=m
  148 : __fch_exp typ=w32 bnd=m
  149 : __fch_sig typ=w32 bnd=m
  150 : __fch_shiftDist typ=w32 bnd=m
  151 : __tmp typ=w32 bnd=m
  154 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
  155 : __link typ=w32 bnd=m
  156 : __tmp typ=w32 bnd=m
  158 : __ct_20s0 typ=w32 val=20s0 bnd=m
  160 : __tmp typ=w32 bnd=m
  165 : __ct_4294967295 typ=w32 val=-1f bnd=m
  166 : __ct_m7 typ=w32 val=-7f bnd=m
  174 : __false typ=bool val=0f bnd=m
  175 : __either typ=bool bnd=m
  176 : __trgt typ=t13s_s2 val=0j bnd=m
  177 : __trgt typ=t21s_s2 val=0j bnd=m
  178 : __trgt typ=t13s_s2 val=0j bnd=m
  179 : __trgt typ=t21s_s2 val=0j bnd=m
  180 : __trgt typ=t13s_s2 val=0j bnd=m
  181 : __trgt typ=t13s_s2 val=0j bnd=m
  182 : __trgt typ=t21s_s2 val=0j bnd=m
  183 : __trgt typ=t13s_s2 val=0j bnd=m
  184 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_normRoundPackToF32 {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (sig.18 var=19) source ()  <29>;
    (exp.19 var=20) source ()  <30>;
    (sign.20 var=21) source ()  <31>;
    (softfloat_countLeadingZeros8.21 var=22) source ()  <32>;
    (shiftDist.23 var=24) source ()  <34>;
    (uZ.24 var=25) source ()  <35>;
    (__la.28 var=29 stl=X off=1) inp ()  <39>;
    (__la.29 var=29) deassign (__la.28)  <40>;
    (__arg_sign.32 var=31 stl=X off=11) inp ()  <43>;
    (__arg_sign.33 var=31) deassign (__arg_sign.32)  <44>;
    (__arg_exp.35 var=33 stl=X off=12) inp ()  <46>;
    (__arg_exp.36 var=33) deassign (__arg_exp.35)  <47>;
    (__arg_sig.38 var=34 stl=X off=13) inp ()  <49>;
    (__arg_sig.39 var=34) deassign (__arg_sig.38)  <50>;
    (__rd___sp.41 var=26) rd_res_reg (__R_SP.11 __sp.17)  <52>;
    (__ct_m20S0.42 var=35) const ()  <53>;
    (__tmp.44 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_m20S0.42)  <55>;
    (__R_SP.45 var=12 __sp.46 var=18) wr_res_reg (__tmp.44 __sp.17)  <56>;
    (__rd___sp.48 var=26) rd_res_reg (__R_SP.11 __sp.46)  <59>;
    (__ct_0t0.49 var=40) const ()  <60>;
    (__adr_sig.51 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_0t0.49)  <62>;
    (__rd___sp.53 var=26) rd_res_reg (__R_SP.11 __sp.46)  <64>;
    (__rd___sp.58 var=26) rd_res_reg (__R_SP.11 __sp.46)  <69>;
    (__rd___sp.63 var=26) rd_res_reg (__R_SP.11 __sp.46)  <74>;
    (__rd___sp.68 var=26) rd_res_reg (__R_SP.11 __sp.46)  <79>;
    (__M_DMw.77 var=5 sig.78 var=19) store (__arg_sig.39 __adr_sig.51 sig.18)  <88>;
    call {
        () chess_separator_scheduler ()  <89>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.54 var=44) const ()  <65>;
    (__adr_exp.56 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_4t0.54)  <67>;
    (__M_DMw.79 var=5 exp.80 var=20) store (__arg_exp.36 __adr_exp.56 exp.19)  <90>;
    call {
        () chess_separator_scheduler ()  <91>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.59 var=48) const ()  <70>;
    (__adr_sign.61 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_8t0.59)  <72>;
    (__M_DMw.82 var=5 sign.83 var=21) store (__arg_sign.33 __adr_sign.61 sign.20)  <93>;
    call {
        () chess_separator_scheduler ()  <96>;
    } #10 off=5
    #11 off=6
    (__fch_sig.86 var=64) load (__M_DMw.4 __adr_sig.51 sig.78)  <98>;
    call {
        () chess_separator_scheduler ()  <105>;
    } #16 off=7
    #17 off=8
    (__ct_0.89 var=65) const ()  <103>;
    (__ct_65536.91 var=67) const ()  <106>;
    (__tmp.385 var=69) bool__ge___uint___uint (__fch_sig.86 __ct_65536.91)  <531>;
    (__trgt.391 var=176) const ()  <560>;
    () void_br_bool_t13s_s2 (__tmp.385 __trgt.391)  <561>;
    (__either.392 var=175) undefined ()  <562>;
    if {
        {
            () if_expr (__either.392)  <137>;
        } #19
        {
        } #25 off=10
        {
            (__ct_16.122 var=70) const ()  <138>;
            (__inl_a.126 var=61) __uint__ls___uint___sint (__fch_sig.86 __ct_16.122)  <143>;
            (__trgt.393 var=177) const ()  <563>;
            () void_j_t21s_s2 (__trgt.393)  <564>;
        } #23 off=9
        {
            (__inl_a.127 var=61) merge (__fch_sig.86 __inl_a.126)  <145>;
            (__inl_count.128 var=62) merge (__ct_0.89 __ct_16.122)  <146>;
        } #26
    } #18
    #27 off=11
    (__ct_16777216.129 var=75) const ()  <147>;
    (__tmp.386 var=77) bool__ge___uint___uint (__inl_a.127 __ct_16777216.129)  <532>;
    (__trgt.394 var=178) const ()  <565>;
    () void_br_bool_t13s_s2 (__tmp.386 __trgt.394)  <566>;
    (__either.395 var=175) undefined ()  <567>;
    if {
        {
            () if_expr (__either.395)  <178>;
        } #29
        {
        } #35 off=15
        {
            #31 off=12
            (__ct_8.160 var=78) const ()  <179>;
            (__inl_count.162 var=62) __uint__pl___uint___uint (__inl_count.128 __ct_8.160)  <181>;
            call {
                () chess_separator_scheduler ()  <182>;
            } #32 off=13
            #33 off=14
            (__inl_a.165 var=61) __uint__ls___uint___sint (__inl_a.127 __ct_8.160)  <185>;
            (__trgt.396 var=179) const ()  <568>;
            () void_j_t21s_s2 (__trgt.396)  <569>;
        } #30
        {
            (__inl_a.166 var=61) merge (__inl_a.127 __inl_a.165)  <187>;
            (__inl_count.167 var=62) merge (__inl_count.128 __inl_count.162)  <188>;
        } #36
    } #28
    #37 off=16
    (__ptr_softfloat_countLeadingZeros8.26 var=28) const ()  <37>;
    (__ct_24.168 var=84) const ()  <189>;
    (__tmp.170 var=86) __uint__rs___uint___sint (__inl_a.166 __ct_24.168)  <191>;
    (__tmp.172 var=88) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_countLeadingZeros8.26 __tmp.170)  <193>;
    (__fch_softfloat_countLeadingZeros8.173 var=89) load (__M_DMb.2 __tmp.172 softfloat_countLeadingZeros8.21)  <194>;
    (__inl_count.176 var=62) __uint__pl___uint___uint (__inl_count.167 __fch_softfloat_countLeadingZeros8.173)  <197>;
    call {
        () chess_separator_scheduler ()  <199>;
    } #39 off=17
    #40 off=18
    (__ct_12t0.64 var=52) const ()  <75>;
    (__adr_shiftDist.66 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_12t0.64)  <77>;
    (__tmp.179 var=95) __uint__pl___uint___uint (__inl_count.176 __ct_4294967295.379)  <202>;
    (__M_DMw.181 var=5 shiftDist.182 var=24) store (__tmp.179 __adr_shiftDist.66 shiftDist.23)  <204>;
    (__ct_4294967295.379 var=165) const ()  <471>;
    call {
        () chess_separator_scheduler ()  <205>;
    } #41 off=19
    #42 off=20
    (__fch_exp.183 var=97) load (__M_DMw.4 __adr_exp.56 exp.80)  <206>;
    (__fch_shiftDist.184 var=98) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.182)  <207>;
    (__tmp.185 var=99) __sint__mi___sint___sint (__fch_exp.183 __fch_shiftDist.184)  <208>;
    (__M_DMw.186 var=5 exp.187 var=20) store (__tmp.185 __adr_exp.56 exp.80)  <209>;
    call {
        () chess_separator_scheduler ()  <210>;
    } #43 off=21
    #44 off=22
    (__ct_7.188 var=100) const ()  <211>;
    (__fch_shiftDist.190 var=102) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.182)  <213>;
    (__tmp.387 var=103) bool__lt___sint___sint (__fch_shiftDist.190 __ct_7.188)  <533>;
    (__trgt.397 var=180) const ()  <570>;
    () void_br_bool_t13s_s2 (__tmp.387 __trgt.397)  <571>;
    (__either.398 var=175) undefined ()  <572>;
    if {
        {
            () if_expr (__either.398)  <243>;
        } #46
        {
            (__false.402 var=174) const ()  <578>;
        } #48
        {
            (__fch_exp.220 var=104) load (__M_DMw.4 __adr_exp.56 exp.187)  <244>;
            (__ct_253.222 var=106) const ()  <246>;
            (__tmp.224 var=108) bool__lt___uint___uint (__fch_exp.220 __ct_253.222)  <248>;
            (__trgt.403 var=183) const ()  <579>;
            () void_br_bool_t13s_s2 (__tmp.224 __trgt.403)  <580>;
            (__either.404 var=175) undefined ()  <581>;
        } #47 off=23
        {
            (__tmp.227 var=111) merge (__false.402 __either.404)  <251>;
        } #49
    } #45
    if {
        {
            () if_expr (__tmp.227)  <280>;
        } #52
        {
            #54 off=27
            (__fch_sign.256 var=112) load (__M_DMw.4 __adr_sign.61 sign.83)  <281>;
            (__ct_31.259 var=115) const ()  <284>;
            (__tmp.261 var=117) __uint__ls___uint___sint (__fch_sign.256 __ct_31.259)  <286>;
            (__fch_sig.262 var=118) load (__M_DMw.4 __adr_sig.51 sig.78)  <287>;
            (__tmp.388 var=121) bool__eq___uint___uint (__fch_sig.262 __ct_0.89)  <534>;
            (__trgt.399 var=181) const ()  <573>;
            () void_br_bool_t13s_s2 (__tmp.388 __trgt.399)  <574>;
            (__either.400 var=175) undefined ()  <575>;
            if {
                {
                    () if_expr (__either.400)  <319>;
                } #56
                {
                } #58 off=29
                {
                    (__fch_exp.294 var=122) load (__M_DMw.4 __adr_exp.56 exp.187)  <320>;
                    (__trgt.401 var=182) const ()  <576>;
                    () void_j_t21s_s2 (__trgt.401)  <577>;
                } #57 off=28
                {
                    (__tmp.297 var=125) merge (__ct_0.89 __fch_exp.294)  <323>;
                } #59
            } #55
            #60 off=30
            (__ct_16t0.69 var=56) const ()  <80>;
            (__adr_uZ.71 var=58) __Pvoid__pl___Pvoid___sint (__rd___sp.68 __ct_16t0.69)  <82>;
            (__ct_23.299 var=127) const ()  <325>;
            (__tmp.301 var=129) __uint__ls___uint___sint (__tmp.297 __ct_23.299)  <327>;
            (__tmp.302 var=130) __uint__pl___uint___uint (__tmp.261 __tmp.301)  <328>;
            (__fch_sig.303 var=131) load (__M_DMw.4 __adr_sig.51 sig.78)  <329>;
            (__fch_shiftDist.304 var=132) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.182)  <330>;
            (__tmp.307 var=135) __sint__pl___sint___sint (__fch_shiftDist.304 __ct_m7.380)  <333>;
            (__tmp.308 var=136) __uint__ls___uint___sint (__fch_sig.303 __tmp.307)  <334>;
            (__tmp.309 var=137) __uint__pl___uint___uint (__tmp.302 __tmp.308)  <335>;
            (__M_DMw.313 var=5 uZ.314 var=25) store (__tmp.309 __adr_uZ.71 uZ.24)  <339>;
            (__ct_m7.380 var=166) const ()  <473>;
            call {
                () chess_separator_scheduler ()  <340>;
            } #61 off=31
            #62 off=32
            (__rt.318 var=30) load (__M_DMw.4 __adr_uZ.71 uZ.314)  <344>;
        } #53
        {
            #65 off=24
            (__fch_sign.319 var=145) load (__M_DMw.4 __adr_sign.61 sign.83)  <346>;
            (__fch_exp.323 var=148) load (__M_DMw.4 __adr_exp.56 exp.187)  <350>;
            (__fch_sig.325 var=149) load (__M_DMw.4 __adr_sig.51 sig.78)  <352>;
            (__fch_shiftDist.326 var=150) load (__M_DMw.4 __adr_shiftDist.66 shiftDist.182)  <353>;
            (__tmp.327 var=151) __uint__ls___uint___sint (__fch_sig.325 __fch_shiftDist.326)  <354>;
            (softfloat_roundPackToF32.331 var=154) const ()  <358>;
            (__link.332 var=155) w32_jal_t21s_s2 (softfloat_roundPackToF32.331)  <359>;
            call {
                (__tmp.322 var=147 stl=X off=11) assign (__fch_sign.319)  <349>;
                (__fch_exp.324 var=148 stl=X off=12) assign (__fch_exp.323)  <351>;
                (__tmp.328 var=151 stl=X off=13) assign (__tmp.327)  <355>;
                (__link.333 var=155 stl=X off=1) assign (__link.332)  <360>;
                (__tmp.334 var=156 stl=X off=10) Fsoftfloat_roundPackToF32 (__link.333 __tmp.322 __fch_exp.324 __tmp.328)  <361>;
                (__tmp.335 var=156) deassign (__tmp.334)  <362>;
            } #66 off=25
            #78 off=26
            (__trgt.405 var=184) const ()  <582>;
            () void_j_t21s_s2 (__trgt.405)  <583>;
        } #64
        {
            (uZ.337 var=25) merge (uZ.314 uZ.24)  <365>;
            (__rt.338 var=30) merge (__rt.318 __tmp.335)  <366>;
        } #68
    } #51
    #71 off=33 nxt=-2
    (__rd___sp.340 var=26) rd_res_reg (__R_SP.11 __sp.46)  <368>;
    (__ct_20s0.341 var=158) const ()  <369>;
    (__tmp.343 var=160) __Pvoid__pl___Pvoid___sint (__rd___sp.340 __ct_20s0.341)  <371>;
    (__R_SP.344 var=12 __sp.345 var=18) wr_res_reg (__tmp.343 __sp.46)  <372>;
    () void___rts_jr_w32 (__la.29)  <373>;
    (__rt.346 var=30 stl=X off=10) assign (__rt.338)  <374>;
    () out (__rt.346)  <375>;
    () sink (__sp.345)  <381>;
    () sink (sig.78)  <382>;
    () sink (exp.187)  <383>;
    () sink (sign.83)  <384>;
    () sink (shiftDist.182)  <387>;
    () sink (uZ.337)  <388>;
} #0
0 : 'SoftFloat-3e/source/s_normRoundPackToF32.c';
----------
0 : (0,42:0,0);
3 : (0,43:60,0);
4 : (0,43:60,0);
5 : (0,43:42,0);
6 : (0,43:42,0);
7 : (0,43:31,0);
10 : (0,48:16,7);
11 : (0,48:51,8);
16 : (0,48:16,10);
17 : (0,48:16,11);
18 : (0,48:16,11);
23 : (0,48:16,14);
25 : (0,48:16,16);
27 : (0,48:16,19);
28 : (0,48:16,19);
30 : (0,48:16,20);
31 : (0,48:16,21);
32 : (0,48:16,21);
33 : (0,48:16,22);
35 : (0,48:16,24);
37 : (0,48:16,28);
39 : (0,48:16,29);
40 : (0,48:14,32);
41 : (0,48:14,32);
42 : (0,49:8,33);
43 : (0,49:8,33);
44 : (0,50:12,33);
45 : (0,50:26,33);
47 : (0,50:49,34);
48 : (0,50:26,35);
51 : (0,50:4,37);
53 : (0,54:8,38);
54 : (0,51:60,38);
55 : (0,51:60,38);
57 : (0,51:62,39);
58 : (0,51:60,40);
60 : (0,51:14,43);
61 : (0,51:14,43);
62 : (0,52:8,44);
64 : (0,52:8,47);
65 : (0,54:55,47);
66 : (0,54:15,47);
71 : (0,50:4,52);
----------
37 : (0,48:16,0);
52 : (0,43:1,0);
53 : (0,43:1,0);
55 : (0,43:1,0);
56 : (0,43:1,0);
59 : (0,43:74,0);
60 : (0,43:74,0);
62 : (0,43:74,0);
64 : (0,43:55,0);
65 : (0,43:55,0);
67 : (0,43:55,0);
69 : (0,43:36,0);
70 : (0,43:36,0);
72 : (0,43:36,0);
74 : (0,45:16,0);
75 : (0,45:16,0);
77 : (0,45:16,0);
79 : (0,46:19,0);
80 : (0,46:19,0);
82 : (0,46:19,0);
88 : (0,43:60,0);
89 : (0,43:60,0);
90 : (0,43:42,0);
91 : (0,43:42,0);
93 : (0,43:31,0);
96 : (0,48:16,7);
98 : (0,48:47,8);
103 : (0,48:16,0);
105 : (0,48:16,10);
106 : (0,48:16,0);
137 : (0,48:16,11);
138 : (0,48:16,0);
143 : (0,48:16,13);
145 : (0,48:16,18);
146 : (0,48:16,18);
147 : (0,48:16,0);
178 : (0,48:16,19);
179 : (0,48:16,0);
181 : (0,48:16,20);
182 : (0,48:16,21);
185 : (0,48:16,21);
187 : (0,48:16,26);
188 : (0,48:16,26);
189 : (0,48:16,0);
191 : (0,48:16,27);
193 : (0,48:16,27);
194 : (0,48:16,27);
197 : (0,48:16,27);
199 : (0,48:16,29);
202 : (0,48:53,31);
204 : (0,48:4,31);
205 : (0,48:14,32);
206 : (0,49:4,32);
207 : (0,49:11,32);
208 : (0,49:8,32);
209 : (0,49:4,32);
210 : (0,49:8,33);
211 : (0,50:12,0);
213 : (0,50:15,33);
243 : (0,50:26,33);
244 : (0,50:45,34);
246 : (0,50:49,0);
248 : (0,50:49,34);
251 : (0,50:26,36);
280 : (0,50:4,37);
281 : (0,51:30,38);
284 : (0,51:37,0);
286 : (0,51:35,38);
287 : (0,51:56,38);
319 : (0,51:60,38);
320 : (0,51:62,39);
323 : (0,51:60,41);
325 : (0,51:72,0);
327 : (0,51:70,42);
328 : (0,51:41,42);
329 : (0,51:79,42);
330 : (0,51:85,42);
333 : (0,51:95,42);
334 : (0,51:82,42);
335 : (0,51:76,42);
339 : (0,51:10,42);
340 : (0,51:14,43);
344 : (0,52:17,43);
346 : (0,54:41,47);
349 : (0,54:41,0);
350 : (0,54:47,47);
351 : (0,54:47,0);
352 : (0,54:52,47);
353 : (0,54:57,47);
354 : (0,54:55,47);
355 : (0,54:55,0);
359 : (0,54:15,47);
360 : (0,54:15,0);
361 : (0,54:15,47);
365 : (0,50:4,51);
366 : (0,50:4,51);
368 : (0,50:4,0);
369 : (0,50:4,0);
371 : (0,50:4,0);
372 : (0,50:4,52);
373 : (0,50:4,52);
374 : (0,50:4,0);
471 : (0,48:53,0);
473 : (0,51:95,0);
531 : (0,48:16,11);
532 : (0,48:16,19);
533 : (0,50:12,33);
534 : (0,51:60,38);
561 : (0,48:16,11);
566 : (0,48:16,19);
571 : (0,50:26,33);
574 : (0,51:60,38);
580 : (0,50:4,37);

