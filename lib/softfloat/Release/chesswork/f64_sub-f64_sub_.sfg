
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:54:17 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f64_sub.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t f64_sub(float64_t, float64_t)
Ff64_sub : user_defined, called {
    fnm : "f64_sub" 'float64_t f64_sub(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
!!  float64_t softfloat_subMagsF64(uint_fast64_t, uint_fast64_t, bool)
Fsoftfloat_subMagsF64 : user_defined, called {
    fnm : "softfloat_subMagsF64" 'float64_t softfloat_subMagsF64(uint_fast64_t, uint_fast64_t, bool)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] X[16] );
    llv : 0 0 0 0 0 ;
}
!!  float64_t softfloat_addMagsF64(uint_fast64_t, uint_fast64_t, bool)
Fsoftfloat_addMagsF64 : user_defined, called {
    fnm : "softfloat_addMagsF64" 'float64_t softfloat_addMagsF64(uint_fast64_t, uint_fast64_t, bool)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] X[16] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : f64_sub typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   24 : __rt_low typ=w32 bnd=m tref=__uint__
   25 : __rt_high typ=w32 bnd=m tref=__uint__
   27 : a_low typ=w32 bnd=m tref=__uint__
   28 : a_high typ=w32 bnd=m tref=__uint__
   30 : b_low typ=w32 bnd=m tref=__uint__
   31 : b_high typ=w32 bnd=m tref=__uint__
   32 : __ct_m16S0 typ=w32 val=0S0 bnd=m
   34 : __tmp typ=w32 bnd=m
   86 : __tmp typ=w32 bnd=m
   87 : __tmp typ=bool bnd=m
   88 : uiA_low typ=w32 bnd=m tref=__uint__
   89 : uiA_high typ=w32 bnd=m tref=__uint__
   90 : uiB_low typ=w32 bnd=m tref=__uint__
   91 : uiB_high typ=w32 bnd=m tref=__uint__
   92 : __tmp typ=w32 bnd=m
   95 : softfloat_subMagsF64 typ=t21s_s2 val=0r bnd=m
   98 : __tmp typ=w32 bnd=m
   99 : __tmp typ=w32 bnd=m
  100 : __tmp typ=w32 bnd=m
  103 : softfloat_addMagsF64 typ=t21s_s2 val=0r bnd=m
  106 : __tmp typ=w32 bnd=m
  107 : __tmp typ=w32 bnd=m
  108 : __ct_16s0 typ=w32 val=0s0 bnd=m
  110 : __tmp typ=w32 bnd=m
  139 : __apl_r_low typ=w32 bnd=m tref=__uint__
  175 : __ct_31 typ=w32 val=31f bnd=m
  201 : __either typ=bool bnd=m
  202 : __trgt typ=t13s_s2 val=0j bnd=m
]
Ff64_sub {
    #137 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (a_low.30 var=27 stl=X off=12) inp ()  <41>;
    (a_low.31 var=27) deassign (a_low.30)  <42>;
    (a_high.34 var=28 stl=X off=13) inp ()  <45>;
    (a_high.35 var=28) deassign (a_high.34)  <46>;
    (b_low.39 var=30 stl=X off=14) inp ()  <50>;
    (b_low.40 var=30) deassign (b_low.39)  <51>;
    (b_high.43 var=31 stl=X off=15) inp ()  <54>;
    (b_high.44 var=31) deassign (b_high.43)  <55>;
    (__rd___sp.47 var=21) rd_res_reg (__R_SP.11 __sp.17)  <58>;
    (__ct_m16S0.48 var=32) const ()  <59>;
    (__tmp.50 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.47 __ct_m16S0.48)  <61>;
    (__R_SP.51 var=12 __sp.52 var=18) wr_res_reg (__tmp.50 __sp.17)  <62>;
    (__rd___sp.53 var=21) rd_res_reg (__R_SP.11 __sp.52)  <64>;
    (__tmp.131 var=87) bool__eq___sint___sint (__tmp.349 __tmp.379)  <138>;
    (__ct_16s0.200 var=108) const ()  <206>;
    (__apl_r_low.271 var=139) __uint__rs___uint___sint (a_high.35 __ct_31.341)  <331>;
    (__apl_r_low.312 var=139) __uint__rs___uint___sint (b_high.44 __ct_31.341)  <382>;
    (__ct_31.341 var=175) const ()  <430>;
    (__tmp.349 var=92) __sint_sne0___sint (__apl_r_low.271)  <451>;
    (__tmp.379 var=86) __sint_sne0___sint (__apl_r_low.312)  <508>;
    (__trgt.395 var=202) const ()  <548>;
    () void_br_bool_t13s_s2 (__tmp.131 __trgt.395)  <549>;
    (__either.396 var=201) undefined ()  <550>;
    if {
        {
            () if_expr (__either.396)  <157>;
        } #5
        {
            #173 off=4
            (softfloat_subMagsF64.162 var=95) const ()  <170>;
            (__tmp.385 var=110) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_16s0.200)  <530>;
            (__R_SP.386 var=12 __sp.387 var=18) wr_res_reg (__tmp.385 __sp.52)  <531>;
            () void_j_t21s_s2 (softfloat_subMagsF64.162)  <538>;
            call {
                (uiA_low.151 var=88 stl=X off=12) assign (a_low.31)  <159>;
                (uiA_high.153 var=89 stl=X off=13) assign (a_high.35)  <161>;
                (uiB_low.155 var=90 stl=X off=14) assign (b_low.40)  <163>;
                (uiB_high.157 var=91 stl=X off=15) assign (b_high.44)  <165>;
                (__tmp.159 var=92 stl=X off=16) assign (__tmp.349)  <167>;
                (__la.164 var=22 stl=X off=1) assign (__la.22)  <172>;
                (__tmp.166 var=98 stl=X off=10 __tmp.170 var=99 stl=X off=11) Fsoftfloat_subMagsF64 (__la.164 uiA_low.151 uiA_high.153 uiB_low.155 uiB_high.157 __tmp.159)  <173>;
                (__tmp.167 var=98) deassign (__tmp.166)  <175>;
                (__tmp.171 var=99) deassign (__tmp.170)  <178>;
            } #8 off=5
            #174 off=6 nxt=-2
            (__rt_low.388 var=24 stl=X off=10) assign (__tmp.167)  <533>;
            () out (__rt_low.388)  <534>;
            (__rt_high.389 var=25 stl=X off=11) assign (__tmp.171)  <535>;
            () out (__rt_high.389)  <536>;
            () sink (__sp.387)  <537>;
        } #6
        {
            #177 off=1
            (softfloat_addMagsF64.186 var=103) const ()  <193>;
            (__tmp.390 var=110) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_16s0.200)  <539>;
            (__R_SP.391 var=12 __sp.392 var=18) wr_res_reg (__tmp.390 __sp.52)  <540>;
            () void_j_t21s_s2 (softfloat_addMagsF64.186)  <547>;
            call {
                (uiA_low.175 var=88 stl=X off=12) assign (a_low.31)  <182>;
                (uiA_high.177 var=89 stl=X off=13) assign (a_high.35)  <184>;
                (uiB_low.179 var=90 stl=X off=14) assign (b_low.40)  <186>;
                (uiB_high.181 var=91 stl=X off=15) assign (b_high.44)  <188>;
                (__tmp.183 var=100 stl=X off=16) assign (__tmp.349)  <190>;
                (__la.188 var=22 stl=X off=1) assign (__la.22)  <195>;
                (__tmp.190 var=106 stl=X off=10 __tmp.194 var=107 stl=X off=11) Fsoftfloat_addMagsF64 (__la.188 uiA_low.175 uiA_high.177 uiB_low.179 uiB_high.181 __tmp.183)  <196>;
                (__tmp.191 var=106) deassign (__tmp.190)  <198>;
                (__tmp.195 var=107) deassign (__tmp.194)  <201>;
            } #11 off=2
            #178 off=3 nxt=-2
            (__rt_low.393 var=24 stl=X off=10) assign (__tmp.191)  <542>;
            () out (__rt_low.393)  <543>;
            (__rt_high.394 var=25 stl=X off=11) assign (__tmp.195)  <544>;
            () out (__rt_high.394)  <545>;
            () sink (__sp.392)  <546>;
        } #9
        {
        } #12
    } #4
} #0
0 : 'SoftFloat-3e/source/f64_sub.c';
----------
0 : (0,43:0,0);
4 : (0,62:4,13);
6 : (0,65:8,14);
8 : (0,63:15,14);
9 : (0,63:8,18);
11 : (0,65:15,18);
137 : (0,62:15,13);
173 : (0,62:4,23);
174 : (0,62:4,23);
177 : (0,62:4,23);
178 : (0,62:4,23);
----------
58 : (0,43:10,0);
59 : (0,43:10,0);
61 : (0,43:10,0);
62 : (0,43:10,0);
64 : (0,45:19,0);
138 : (0,62:15,13);
157 : (0,62:4,13);
159 : (0,63:37,0);
161 : (0,63:37,0);
163 : (0,63:42,0);
165 : (0,63:42,0);
167 : (0,63:47,0);
172 : (0,63:15,0);
173 : (0,63:15,14);
182 : (0,65:37,0);
184 : (0,65:37,0);
186 : (0,65:42,0);
188 : (0,65:42,0);
190 : (0,65:47,0);
195 : (0,65:15,0);
196 : (0,65:15,18);
206 : (0,62:4,0);
331 : (0,57:37,9);
382 : (0,60:37,12);
430 : (0,57:37,0);
508 : (0,62:15,13);
530 : (0,62:4,0);
531 : (0,62:4,23);
533 : (0,62:4,0);
535 : (0,62:4,0);
538 : (0,63:15,14);
539 : (0,62:4,0);
540 : (0,62:4,23);
542 : (0,62:4,0);
544 : (0,62:4,0);
547 : (0,65:15,18);
549 : (0,62:4,13);

