
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 17:52:25 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f64_mul.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t f64_mul(float64_t, float64_t)
Ff64_mul : user_defined, called {
    fnm : "f64_mul" 'float64_t f64_mul(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    frm : ( l=52 );
    llv : 0 0 0 0 0 ;
}
****
!!  exp16_sig64 softfloat_normSubnormalF64Sig(uint_fast64_t)
Fsoftfloat_normSubnormalF64Sig : user_defined, called {
    fnm : "softfloat_normSubnormalF64Sig" 'exp16_sig64 softfloat_normSubnormalF64Sig(uint_fast64_t)';
    arg : ( w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
!!  void softfloat_mul64To128M(uint64_t, uint64_t, uint32_t *)
Fsoftfloat_mul64To128M : user_defined, called {
    fnm : "softfloat_mul64To128M" 'void softfloat_mul64To128M(uint64_t, uint64_t, uint32_t *)';
    arg : ( w32:i w32:i w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
    llv : 0 0 0 0 0 ;
}
!!  float64_t softfloat_roundPackToF64(bool, int_fast16_t, uint_fast64_t)
Fsoftfloat_roundPackToF64 : user_defined, called {
    fnm : "softfloat_roundPackToF64" 'float64_t softfloat_roundPackToF64(bool, int_fast16_t, uint_fast64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    llv : 0 0 0 0 0 ;
}
!!  uint_fast64_t softfloat_propagateNaNF64UI(uint_fast64_t, uint_fast64_t)
Fsoftfloat_propagateNaNF64UI : user_defined, called {
    fnm : "softfloat_propagateNaNF64UI" 'uint_fast64_t softfloat_propagateNaNF64UI(uint_fast64_t, uint_fast64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : f64_mul typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   21 : normExpSig typ=w08 val=16t0 bnd=a sz=12 algn=4 stl=DMb tref=exp16_sig64_DMb
   22 : sig128Z typ=w08 val=28t0 bnd=a sz=16 algn=4 stl=DMb tref=__A4__uint_DMb
   24 : normExpSig_exp typ=w08 bnd=B stl=DMb
   25 : normExpSig_sig typ=w08 bnd=B stl=DMb
   26 : normExpSig_sig_low typ=w08 bnd=B stl=DMb
   27 : normExpSig_sig_high typ=w08 bnd=B stl=DMb
   30 : __rd___sp typ=w32 bnd=m
   31 : __la typ=w32 bnd=p tref=w32__
   33 : __rt_low typ=w32 bnd=m tref=__uint__
   34 : __rt_high typ=w32 bnd=m tref=__uint__
   36 : a_low typ=w32 bnd=m tref=__uint__
   37 : a_high typ=w32 bnd=m tref=__uint__
   39 : b_low typ=w32 bnd=m tref=__uint__
   40 : b_high typ=w32 bnd=m tref=__uint__
   41 : __ct_m52S0 typ=w32 val=-52S0 bnd=m
   43 : __tmp typ=w32 bnd=m
   52 : __ptr_normExpSig typ=w32 bnd=m
   53 : __ct_16t0 typ=w32 val=16t0 bnd=m
   55 : __adr_normExpSig typ=w32 bnd=m adro=21
   56 : __ptr_sig128Z typ=w32 bnd=m
   57 : __ct_28t0 typ=w32 val=28t0 bnd=m
   59 : __adr_sig128Z typ=w32 bnd=m adro=22
   66 : expA typ=w32 bnd=m tref=int_fast16_t__
   70 : expB typ=w32 bnd=m tref=int_fast16_t__
   74 : expZ typ=w32 bnd=m tref=int_fast16_t__
   77 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  100 : __ct_2047 typ=w32 val=2047f bnd=m
  135 : __tmp typ=w32 bnd=m
  136 : __tmp typ=w32 bnd=m
  137 : __tmp typ=w32 bnd=m
  143 : __tmp typ=bool bnd=m
  151 : __tmp typ=bool bnd=m
  157 : __tmp typ=bool bnd=m
  158 : __tmp typ=bool bnd=m
  171 : __tmp typ=bool bnd=m
  177 : sigA_low typ=w32 bnd=m tref=__uint__
  178 : sigA_high typ=w32 bnd=m tref=__uint__
  181 : softfloat_normSubnormalF64Sig typ=t21s_s2 val=0r bnd=m
  182 : __link typ=w32 bnd=m
  192 : __fch_normExpSig_sig_low typ=w32 bnd=m
  195 : __fch_normExpSig_sig_high typ=w32 bnd=m
  198 : __tmp typ=bool bnd=m
  204 : sigB_low typ=w32 bnd=m tref=__uint__
  205 : sigB_high typ=w32 bnd=m tref=__uint__
  209 : __link typ=w32 bnd=m
  219 : __fch_normExpSig_sig_low typ=w32 bnd=m
  222 : __fch_normExpSig_sig_high typ=w32 bnd=m
  223 : __tmp typ=w32 bnd=m
  230 : __ct_10 typ=w32 val=10f bnd=m
  236 : __ct_11 typ=w32 val=11f bnd=m
  241 : softfloat_mul64To128M typ=t21s_s2 val=0r bnd=m
  242 : __link typ=w32 bnd=m
  246 : __fch_sig128Z typ=w32 bnd=m
  254 : __fch_sig128Z typ=w32 bnd=m
  260 : __fch_sig128Z typ=w32 bnd=m
  263 : __tmp typ=bool bnd=m
  269 : __fch_sig128Z typ=w32 bnd=m
  272 : __tmp typ=bool bnd=m
  273 : __tmp typ=bool bnd=m
  280 : __ct_1 typ=w32 val=1f bnd=m
  286 : __tmp typ=w32 bnd=m
  287 : sigZ_low typ=w32 bnd=m tref=__uint__
  288 : sigZ_high typ=w32 bnd=m tref=__uint__
  291 : softfloat_roundPackToF64 typ=t21s_s2 val=0r bnd=m
  294 : __tmp typ=w32 bnd=m
  295 : __tmp typ=w32 bnd=m
  296 : __ct_52s0 typ=w32 val=52s0 bnd=m
  298 : __tmp typ=w32 bnd=m
  299 : uiA_low typ=w32 bnd=m tref=__uint__
  300 : uiA_high typ=w32 bnd=m tref=__uint__
  301 : uiB_low typ=w32 bnd=m tref=__uint__
  302 : uiB_high typ=w32 bnd=m tref=__uint__
  305 : softfloat_propagateNaNF64UI typ=t21s_s2 val=0r bnd=m
  306 : __link typ=w32 bnd=m
  308 : __tmp typ=w32 bnd=m
  309 : __tmp typ=w32 bnd=m
  339 : uiZ_low typ=w32 bnd=m tref=__uint__
  340 : uiZ_high typ=w32 bnd=m tref=__uint__
  363 : __ct_2146959360 typ=t20s_rp12 val=524160f bnd=m
  375 : __ct_m1023 typ=w32 val=-1023f bnd=m
  376 : __ct_m1 typ=w32 val=-1f bnd=m
  382 : __ct_20t0 typ=w32 val=20t0 bnd=m
  383 : __adr_normExpSig typ=w32 bnd=m adro=21
  384 : __ct_24t0 typ=w32 val=24t0 bnd=m
  385 : __adr_normExpSig typ=w32 bnd=m adro=21
  388 : __ct_40t0 typ=w32 val=40t0 bnd=m
  389 : __adr_sig128Z typ=w32 bnd=m adro=22
  390 : __ct_36t0 typ=w32 val=36t0 bnd=m
  391 : __adr_sig128Z typ=w32 bnd=m adro=22
  392 : __ct_32t0 typ=w32 val=32t0 bnd=m
  393 : __adr_sig128Z typ=w32 bnd=m adro=22
  413 : __apl_r_low typ=w32 bnd=m tref=__uint__
  450 : sigA_high typ=w32 bnd=m
  475 : sigB_high typ=w32 bnd=m
  497 : magBits_low typ=w32 bnd=m
  499 : magBits_high typ=w32 bnd=m
  505 : magBits_low typ=w32 bnd=m
  507 : magBits_high typ=w32 bnd=m
  515 : __tmp_high typ=w32 bnd=m
  517 : sigA_low typ=w32 bnd=m
  518 : sigA_high typ=w32 bnd=m
  527 : __apl_carries typ=w32 bnd=m tref=__uint__
  532 : __apl_r_low typ=w32 bnd=m tref=__uint__
  533 : __tmp typ=w32 bnd=m
  534 : __apl_r_high typ=w32 bnd=m tref=__uint__
  545 : __tmp_high typ=w32 bnd=m
  547 : sigB_low typ=w32 bnd=m
  548 : sigB_high typ=w32 bnd=m
  571 : sigZ_low typ=w32 bnd=m
  584 : __tmp typ=bool bnd=m
  615 : __apl_r_high typ=w32 bnd=m tref=__uint__
  647 : magBits_low typ=w32 bnd=m
  648 : magBits_high typ=w32 bnd=m
  653 : __ct_31 typ=w32 val=31f bnd=m
  655 : __ct_20 typ=w32 val=20f bnd=m
  658 : __ct_22 typ=w32 val=22f bnd=m
  660 : __ct_21 typ=w32 val=21f bnd=m
  662 : __ct_1048575 typ=w32 val=1048575f bnd=m
  663 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  665 : __ct_1073741824 typ=t20s_rp12 val=262144f bnd=m
  666 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
  669 : __tmpd typ=w32 bnd=m
  670 : __tmp typ=bool bnd=m
  671 : __tmpd typ=w32 bnd=m
  672 : __tmp typ=bool bnd=m
  674 : __tmp typ=bool bnd=m
  676 : __tmp typ=bool bnd=m
  677 : __tmpd typ=w32 bnd=m
  678 : __tmp typ=bool bnd=m
  685 : __tmp_high typ=w32 bnd=m
  689 : __tmp_high typ=w32 bnd=m
  747 : __true typ=bool val=1f bnd=m
  748 : __false typ=bool val=0f bnd=m
  749 : __either typ=bool bnd=m
  750 : __trgt typ=t13s_s2 val=0j bnd=m
  751 : __trgt typ=t13s_s2 val=0j bnd=m
  752 : __trgt typ=t13s_s2 val=0j bnd=m
  753 : __trgt typ=t13s_s2 val=0j bnd=m
  754 : __trgt typ=t13s_s2 val=0j bnd=m
  755 : __trgt typ=t21s_s2 val=0j bnd=m
  756 : __trgt typ=t13s_s2 val=0j bnd=m
  757 : __trgt typ=t13s_s2 val=0j bnd=m
  758 : __trgt typ=t21s_s2 val=0j bnd=m
  759 : __trgt typ=t13s_s2 val=0j bnd=m
  760 : __trgt typ=t13s_s2 val=0j bnd=m
  761 : __trgt typ=t21s_s2 val=0j bnd=m
  762 : __trgt typ=t13s_s2 val=0j bnd=m
  763 : __trgt typ=t21s_s2 val=0j bnd=m
  764 : __trgt typ=t13s_s2 val=0j bnd=m
  765 : __trgt typ=t13s_s2 val=0j bnd=m
  766 : __trgt typ=t13s_s2 val=0j bnd=m
  767 : __trgt typ=t21s_s2 val=0j bnd=m
  768 : __trgt typ=t13s_s2 val=0j bnd=m
  769 : __trgt typ=t21s_s2 val=0j bnd=m
  770 : __trgt typ=t21s_s2 val=0j bnd=m
  771 : __trgt typ=t21s_s2 val=0j bnd=m
  772 : __trgt typ=t21s_s2 val=0j bnd=m
  773 : __trgt typ=t21s_s2 val=0j bnd=m
  774 : __trgt typ=t21s_s2 val=0j bnd=m
  775 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_mul {
    #667 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (normExpSig.20 var=21) source ()  <31>;
    (sig128Z.21 var=22) source ()  <32>;
    (normExpSig_exp.23 var=24) source ()  <34>;
    (normExpSig_sig.24 var=25) source ()  <35>;
    (normExpSig_sig_low.25 var=26) source ()  <36>;
    (normExpSig_sig_high.26 var=27) source ()  <37>;
    (__la.30 var=31 stl=X off=1) inp ()  <41>;
    (__la.31 var=31) deassign (__la.30)  <42>;
    (a_low.39 var=36 stl=X off=12) inp ()  <50>;
    (a_low.40 var=36) deassign (a_low.39)  <51>;
    (a_high.43 var=37 stl=X off=13) inp ()  <54>;
    (a_high.44 var=37) deassign (a_high.43)  <55>;
    (b_low.48 var=39 stl=X off=14) inp ()  <59>;
    (b_low.49 var=39) deassign (b_low.48)  <60>;
    (b_high.52 var=40 stl=X off=15) inp ()  <63>;
    (b_high.53 var=40) deassign (b_high.52)  <64>;
    (__rd___sp.56 var=30) rd_res_reg (__R_SP.11 __sp.17)  <67>;
    (__ct_m52S0.57 var=41) const ()  <68>;
    (__tmp.59 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_m52S0.57)  <70>;
    (__R_SP.60 var=12 __sp.61 var=18) wr_res_reg (__tmp.59 __sp.17)  <71>;
    (__rd___sp.62 var=30) rd_res_reg (__R_SP.11 __sp.61)  <73>;
    (__ct_0.113 var=77) const ()  <124>;
    (__ct_2047.146 var=100) const ()  <155>;
    (expA.148 var=66) __sint__ad___sint___sint (__apl_r_low.1919 __ct_2047.146)  <157>;
    (expB.187 var=70) __sint__ad___sint___sint (__apl_r_low.2005 __ct_2047.146)  <194>;
    (__tmp.193 var=137) __sint__er___sint___sint (__tmp.2544 __tmp.2550)  <200>;
    (__tmp.199 var=143) bool__eq___sint___sint (expA.148 __ct_2047.146)  <206>;
    (__ct_52s0.1299 var=296) const ()  <1498>;
    (__tmp.1301 var=298) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_52s0.1299)  <1500>;
    (__tmp.1860 var=286) __sint_sne0___sint (__tmp.193)  <2254>;
    (__apl_r_low.1878 var=413) __uint__rs___uint___sint (a_high.44 __ct_31.2392)  <2310>;
    (__apl_r_low.1919 var=413) __uint__rs___uint___sint (a_high.44 __ct_20.2394)  <2361>;
    (sigA_high.1938 var=450) __uint__ad___uint___uint (a_high.44 __ct_1048575.2401)  <2384>;
    (__apl_r_low.1964 var=413) __uint__rs___uint___sint (b_high.53 __ct_31.2392)  <2416>;
    (__apl_r_low.2005 var=413) __uint__rs___uint___sint (b_high.53 __ct_20.2394)  <2467>;
    (sigB_high.2024 var=475) __uint__ad___uint___uint (b_high.53 __ct_1048575.2401)  <2490>;
    (__apl_r_high.2306 var=534) __uint__ls___uint___sint (__tmp.1860 __ct_31.2392)  <2839>;
    (__ct_31.2392 var=653) const ()  <2980>;
    (__ct_20.2394 var=655) const ()  <2984>;
    (__ct_1048575.2401 var=662) const ()  <2998>;
    (__tmpd.2440 var=669) __uint__or___uint___uint (sigA_high.1938 a_low.40)  <3076>;
    (__tmpd.2442 var=671) __uint__or___uint___uint (sigB_high.2024 b_low.49)  <3078>;
    (__tmp.2544 var=135) __sint_sne0___sint (__apl_r_low.1878)  <3387>;
    (__tmp.2550 var=136) __sint_sne0___sint (__apl_r_low.1964)  <3396>;
    (__trgt.2597 var=766) const ()  <3564>;
    () void_br_bool_t13s_s2 (__tmp.199 __trgt.2597)  <3565>;
    (__either.2598 var=749) undefined ()  <3566>;
    if {
        {
            () if_expr (__either.2598)  <246>;
        } #8
        {
            #278 off=39
            (__tmp.2441 var=670) bool__ne___uint___uint (__tmpd.2440 __ct_0.113)  <3077>;
            (__trgt.2568 var=751) const ()  <3515>;
            () void_br_bool_t13s_s2 (__tmp.2441 __trgt.2568)  <3516>;
            (__either.2569 var=749) undefined ()  <3517>;
            if {
                {
                    () if_expr (__either.2569)  <289>;
                } #12
                {
                    (__true.2570 var=747) const ()  <3518>;
                } #13
                {
                    #736 off=40
                    (__trgt.2566 var=750) const ()  <3512>;
                    () void_br_bool_t13s_s2 (__tmp.2611 __trgt.2566)  <3513>;
                    (__either.2567 var=749) undefined ()  <3514>;
                    (__tmp.2611 var=151) bool__ne___sint___sint (expB.187 __ct_2047.146)  <3588>;
                    if {
                        {
                            () if_expr (__either.2567)  <334>;
                        } #17
                        {
                            (__false.2571 var=748) const ()  <3519>;
                        } #19
                        {
                            (__trgt.2572 var=752) const ()  <3520>;
                            () void_br_bool_t13s_s2 (__tmp.2609 __trgt.2572)  <3521>;
                            (__either.2573 var=749) undefined ()  <3522>;
                            (__tmp.2609 var=672) bool__ne___uint___uint (__tmpd.2442 __ct_0.113)  <3586>;
                        } #18 off=41
                        {
                            (__tmp.330 var=157) merge (__false.2571 __either.2573)  <340>;
                        } #20
                    } #16
                } #14
                {
                    (__tmp.331 var=158) merge (__true.2570 __tmp.330)  <341>;
                } #21
            } #11
            if {
                {
                    () if_expr (__tmp.331)  <381>;
                    () chess_rear_then ()  <3523>;
                } #24
                {
                    () sink (__sp.61)  <387>;
                    (__trgt.2603 var=770) const ()  <3574>;
                    () void_j_t21s_s2 (__trgt.2603)  <3575>;
                } #26 off=43 nxt=-3 tgt=1
                {
                } #27 off=42
                {
                } #28
            } #23
            #521 off=44
            (magBits_low.2066 var=497) __uint__or___uint___uint (expB.187 b_low.49)  <2544>;
            (magBits_high.2067 var=499) __uint__or___uint___uint (__tmp_high.2452 sigB_high.2024)  <2545>;
            (__tmp_high.2452 var=685) __sint__rs___sint___sint (expB.187 __ct_31.2392)  <3089>;
        } #9
        {
            #738 off=1
            (__trgt.2595 var=765) const ()  <3560>;
            () void_br_bool_t13s_s2 (__tmp.2612 __trgt.2595)  <3561>;
            (__either.2596 var=749) undefined ()  <3562>;
            (__tmp.2612 var=151) bool__ne___sint___sint (expB.187 __ct_2047.146)  <3589>;
            if {
                {
                    () if_expr (__either.2596)  <551>;
                    () chess_rear_then ()  <3563>;
                } #33
                {
                    #44 off=6
                    (__ct_16t0.73 var=53) const ()  <84>;
                    (__adr_normExpSig.75 var=55) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_16t0.73)  <86>;
                    (softfloat_normSubnormalF64Sig.786 var=181) const ()  <942>;
                    (__ct_20t0.1844 var=382) const ()  <2232>;
                    (__adr_normExpSig.1845 var=383) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_20t0.1844)  <2234>;
                    (__ct_24t0.1846 var=384) const ()  <2235>;
                    (__adr_normExpSig.1847 var=385) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_24t0.1846)  <2237>;
                    (__tmp.2559 var=171) bool__ne___sint___sint (expA.148 __ct_0.113)  <3473>;
                    (__trgt.2576 var=754) const ()  <3528>;
                    () void_br_bool_t13s_s2 (__tmp.2559 __trgt.2576)  <3529>;
                    (__either.2577 var=749) undefined ()  <3530>;
                    if {
                        {
                            () if_expr (__either.2577)  <765>;
                        } #46
                        {
                        } #58 off=13
                        {
                            #483 off=7
                            (__tmp.2445 var=674) bool__eq___uint___uint (__tmpd.2440 __ct_0.113)  <3081>;
                            (__trgt.2574 var=753) const ()  <3524>;
                            () void_br_bool_t13s_s2 (__tmp.2445 __trgt.2574)  <3525>;
                            (__either.2575 var=749) undefined ()  <3526>;
                            if {
                                {
                                    () if_expr (__either.2575)  <809>;
                                    () chess_rear_then ()  <3527>;
                                } #50
                                {
                                    () sink (__sp.61)  <815>;
                                    (__trgt.2604 var=771) const ()  <3576>;
                                    () void_j_t21s_s2 (__trgt.2604)  <3577>;
                                } #52 off=9 nxt=-3 tgt=2
                                {
                                } #53 off=8
                                {
                                } #54
                            } #49
                            #55 off=10
                            (__link.787 var=182) w32_jal_t21s_s2 (softfloat_normSubnormalF64Sig.786)  <943>;
                            call {
                                (__ptr_normExpSig.779 var=52 stl=X off=10) assign (__adr_normExpSig.75)  <935>;
                                (sigA_low.781 var=177 stl=X off=11) assign (a_low.40)  <937>;
                                (sigA_high.783 var=178 stl=X off=12) assign (sigA_high.1938)  <939>;
                                (__link.788 var=182 stl=X off=1) assign (__link.787)  <944>;
                                (normExpSig.789 var=21 normExpSig_exp.790 var=24 normExpSig_sig.791 var=25 normExpSig_sig_high.792 var=27 normExpSig_sig_low.793 var=26) Fsoftfloat_normSubnormalF64Sig (__link.788 __ptr_normExpSig.779 sigA_low.781 sigA_high.783 normExpSig.20 normExpSig_exp.23 normExpSig_sig.24 normExpSig_sig_high.26 normExpSig_sig_low.25)  <945>;
                            } #56 off=11
                            #57 off=12
                            (expA.798 var=66) load (__M_DMw.4 __adr_normExpSig.75 normExpSig_exp.790)  <950>;
                            (__fch_normExpSig_sig_low.803 var=192) load (__M_DMw.4 __adr_normExpSig.1845 normExpSig_sig_low.793)  <955>;
                            (__fch_normExpSig_sig_high.808 var=195) load (__M_DMw.4 __adr_normExpSig.1847 normExpSig_sig_high.792)  <960>;
                            (__trgt.2578 var=755) const ()  <3531>;
                            () void_j_t21s_s2 (__trgt.2578)  <3532>;
                        } #47
                        {
                            (normExpSig.818 var=21) merge (normExpSig.20 normExpSig.789)  <970>;
                            (normExpSig_exp.821 var=24) merge (normExpSig_exp.23 normExpSig_exp.790)  <973>;
                            (normExpSig_sig.822 var=25) merge (normExpSig_sig.24 normExpSig_sig.791)  <974>;
                            (normExpSig_sig_low.823 var=26) merge (normExpSig_sig_low.25 normExpSig_sig_low.793)  <975>;
                            (normExpSig_sig_high.824 var=27) merge (normExpSig_sig_high.26 normExpSig_sig_high.792)  <976>;
                            (expA.832 var=66) merge (expA.148 expA.798)  <984>;
                            (sigA_low.2404 var=517) merge (a_low.40 __fch_normExpSig_sig_low.803)  <3002>;
                            (sigA_high.2407 var=518) merge (sigA_high.1938 __fch_normExpSig_sig_high.808)  <3005>;
                        } #59
                    } #45
                    #60 off=14
                    (__tmp.2560 var=198) bool__ne___sint___sint (expB.187 __ct_0.113)  <3474>;
                    (__trgt.2581 var=757) const ()  <3537>;
                    () void_br_bool_t13s_s2 (__tmp.2560 __trgt.2581)  <3538>;
                    (__either.2582 var=749) undefined ()  <3539>;
                    if {
                        {
                            () if_expr (__either.2582)  <1044>;
                        } #62
                        {
                        } #74 off=21
                        {
                            #493 off=15
                            (__tmp.2447 var=676) bool__eq___uint___uint (__tmpd.2442 __ct_0.113)  <3083>;
                            (__trgt.2579 var=756) const ()  <3533>;
                            () void_br_bool_t13s_s2 (__tmp.2447 __trgt.2579)  <3534>;
                            (__either.2580 var=749) undefined ()  <3535>;
                            if {
                                {
                                    () if_expr (__either.2580)  <1088>;
                                    () chess_rear_then ()  <3536>;
                                } #66
                                {
                                    () sink (__sp.61)  <1094>;
                                    (__trgt.2605 var=772) const ()  <3578>;
                                    () void_j_t21s_s2 (__trgt.2605)  <3579>;
                                } #68 off=17 nxt=-3 tgt=2
                                {
                                } #69 off=16
                                {
                                } #70
                            } #65
                            #71 off=18
                            (__link.1021 var=209) w32_jal_t21s_s2 (softfloat_normSubnormalF64Sig.786)  <1222>;
                            call {
                                (__ptr_normExpSig.1013 var=52 stl=X off=10) assign (__adr_normExpSig.75)  <1214>;
                                (sigB_low.1015 var=204 stl=X off=11) assign (b_low.49)  <1216>;
                                (sigB_high.1017 var=205 stl=X off=12) assign (sigB_high.2024)  <1218>;
                                (__link.1022 var=209 stl=X off=1) assign (__link.1021)  <1223>;
                                (normExpSig.1023 var=21 normExpSig_exp.1024 var=24 normExpSig_sig.1025 var=25 normExpSig_sig_high.1026 var=27 normExpSig_sig_low.1027 var=26) Fsoftfloat_normSubnormalF64Sig (__link.1022 __ptr_normExpSig.1013 sigB_low.1015 sigB_high.1017 normExpSig.818 normExpSig_exp.821 normExpSig_sig.822 normExpSig_sig_high.824 normExpSig_sig_low.823)  <1224>;
                            } #72 off=19
                            #73 off=20
                            (expB.1032 var=70) load (__M_DMw.4 __adr_normExpSig.75 normExpSig_exp.1024)  <1229>;
                            (__fch_normExpSig_sig_low.1037 var=219) load (__M_DMw.4 __adr_normExpSig.1845 normExpSig_sig_low.1027)  <1234>;
                            (__fch_normExpSig_sig_high.1042 var=222) load (__M_DMw.4 __adr_normExpSig.1847 normExpSig_sig_high.1026)  <1239>;
                            (__trgt.2583 var=758) const ()  <3540>;
                            () void_j_t21s_s2 (__trgt.2583)  <3541>;
                        } #63
                        {
                            (expB.1072 var=70) merge (expB.187 expB.1032)  <1269>;
                            (sigB_low.2411 var=547) merge (b_low.49 __fch_normExpSig_sig_low.1037)  <3010>;
                            (sigB_high.2414 var=548) merge (sigB_high.2024 __fch_normExpSig_sig_high.1042)  <3013>;
                        } #75
                    } #61
                    #318 off=22
                    (__ct_28t0.78 var=57) const ()  <89>;
                    (__adr_sig128Z.80 var=59) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_28t0.78)  <91>;
                    (__tmp.1083 var=223) __sint__pl___sint___sint (expA.832 expB.1072)  <1280>;
                    (expZ.1086 var=74) __sint__pl___sint___sint (__tmp.1083 __ct_m1023.1835)  <1283>;
                    (__ct_10.1090 var=230) const ()  <1287>;
                    (__ct_11.1096 var=236) const ()  <1293>;
                    (softfloat_mul64To128M.1110 var=241) const ()  <1307>;
                    (__link.1111 var=242) w32_jal_t21s_s2 (softfloat_mul64To128M.1110)  <1308>;
                    (__ct_m1023.1835 var=375) const ()  <2221>;
                    (__tmp_high.2101 var=515) __uint__or___uint___uint (sigA_high.2407 __ct_1048576.2408)  <2587>;
                    (__apl_carries.2123 var=527) __uint__rs___uint___sint (sigA_low.2404 __ct_22.2397)  <2615>;
                    (__apl_r_low.2124 var=532) __uint__ls___uint___sint (sigA_low.2404 __ct_10.1090)  <2616>;
                    (__tmp.2125 var=533) __uint__ls___uint___sint (__tmp_high.2101 __ct_10.1090)  <2617>;
                    (__apl_r_high.2126 var=534) __uint__or___uint___uint (__tmp.2125 __apl_carries.2123)  <2618>;
                    (__tmp_high.2146 var=545) __uint__or___uint___uint (sigB_high.2414 __ct_1048576.2408)  <2642>;
                    (__apl_carries.2168 var=527) __uint__rs___uint___sint (sigB_low.2411 __ct_21.2399)  <2670>;
                    (__apl_r_low.2169 var=532) __uint__ls___uint___sint (sigB_low.2411 __ct_11.1096)  <2671>;
                    (__tmp.2170 var=533) __uint__ls___uint___sint (__tmp_high.2146 __ct_11.1096)  <2672>;
                    (__apl_r_high.2171 var=534) __uint__or___uint___uint (__tmp.2170 __apl_carries.2168)  <2673>;
                    (__ct_22.2397 var=658) const ()  <2990>;
                    (__ct_21.2399 var=660) const ()  <2994>;
                    (__ct_1048576.2408 var=663) const ()  <3006>;
                    call {
                        (sigA_low.1100 var=177 stl=X off=10) assign (__apl_r_low.2124)  <1297>;
                        (sigA_high.1102 var=178 stl=X off=11) assign (__apl_r_high.2126)  <1299>;
                        (sigB_low.1104 var=204 stl=X off=12) assign (__apl_r_low.2169)  <1301>;
                        (sigB_high.1106 var=205 stl=X off=13) assign (__apl_r_high.2171)  <1303>;
                        (__ptr_sig128Z.1107 var=56 stl=X off=14) assign (__adr_sig128Z.80)  <1304>;
                        (__link.1112 var=242 stl=X off=1) assign (__link.1111)  <1309>;
                        (sig128Z.1113 var=22) Fsoftfloat_mul64To128M (__link.1112 sigA_low.1100 sigA_high.1102 sigB_low.1104 sigB_high.1106 __ptr_sig128Z.1107 sig128Z.21)  <1310>;
                    } #77 off=23
                    #706 off=24
                    (__fch_sig128Z.1117 var=246) load (__M_DMw.4 __adr_sig128Z.1851 sig128Z.1113)  <1314>;
                    (__fch_sig128Z.1125 var=254) load (__M_DMw.4 __adr_sig128Z.1853 sig128Z.1113)  <1322>;
                    (__fch_sig128Z.1131 var=260) load (__M_DMw.4 __adr_sig128Z.1855 sig128Z.1113)  <1328>;
                    (__tmp.1134 var=263) bool__ne___uint___uint (__fch_sig128Z.1131 __ct_0.113)  <1331>;
                    (__ct_1.1269 var=280) const ()  <1469>;
                    (__ct_40t0.1850 var=388) const ()  <2240>;
                    (__adr_sig128Z.1851 var=389) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_40t0.1850)  <2242>;
                    (__ct_36t0.1852 var=390) const ()  <2243>;
                    (__adr_sig128Z.1853 var=391) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_36t0.1852)  <2245>;
                    (__ct_32t0.1854 var=392) const ()  <2246>;
                    (__adr_sig128Z.1855 var=393) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_32t0.1854)  <2248>;
                    (__trgt.2584 var=759) const ()  <3542>;
                    () void_br_bool_t13s_s2 (__tmp.1134 __trgt.2584)  <3543>;
                    (__either.2585 var=749) undefined ()  <3544>;
                    if {
                        {
                            () if_expr (__either.2585)  <1371>;
                        } #80
                        {
                            (__false.2586 var=748) const ()  <3545>;
                        } #81
                        {
                            (__fch_sig128Z.1179 var=269) load (__M_DMw.4 __adr_sig128Z.80 sig128Z.1113)  <1377>;
                            (__tmp.2561 var=272) bool__eq___uint___uint (__fch_sig128Z.1179 __ct_0.113)  <3475>;
                            (__trgt.2587 var=760) const ()  <3546>;
                            () void_br_bool_t13s_s2 (__tmp.2561 __trgt.2587)  <3547>;
                            (__either.2588 var=749) undefined ()  <3548>;
                        } #82 off=25
                        {
                            (__tmp.2562 var=273) merge (__false.2586 __either.2588)  <3476>;
                        } #83
                    } #79
                    if {
                        {
                            () if_expr (__tmp.2562)  <1421>;
                        } #86
                        {
                        } #88 off=27
                        {
                            (sigZ_low.2235 var=571) __uint__or___uint___uint (__fch_sig128Z.1125 __ct_1.1269)  <2751>;
                            (__trgt.2589 var=761) const ()  <3549>;
                            () void_j_t21s_s2 (__trgt.2589)  <3550>;
                        } #404 off=26
                        {
                            (sigZ_low.1807 var=287) merge (__fch_sig128Z.1125 sigZ_low.2235)  <2188>;
                        } #89
                    } #85
                    #410 off=28
                    (__ct_1073741824.2422 var=665) const ()  <3022>;
                    (__tmp.2563 var=584) bool__ge___uint___uint (__fch_sig128Z.1117 __ct_1073741824.2422)  <3477>;
                    (__trgt.2590 var=762) const ()  <3551>;
                    () void_br_bool_t13s_s2 (__tmp.2563 __trgt.2590)  <3552>;
                    (__either.2591 var=749) undefined ()  <3553>;
                    if {
                        {
                            () if_expr (__either.2591)  <1468>;
                        } #92
                        {
                        } #94 off=30
                        {
                            (expZ.1271 var=74) __sint__pl___sint___sint (expZ.1086 __ct_m1.1836)  <1471>;
                            (__ct_m1.1836 var=376) const ()  <2223>;
                            (__apl_carries.2274 var=527) __uint__rs___uint___sint (sigZ_low.1807 __ct_31.2392)  <2801>;
                            (__apl_r_low.2275 var=532) __uint__ls___uint___sint (sigZ_low.1807 __ct_1.1269)  <2802>;
                            (__tmp.2276 var=533) __uint__ls___uint___sint (__fch_sig128Z.1117 __ct_1.1269)  <2803>;
                            (__apl_r_high.2277 var=534) __uint__or___uint___uint (__tmp.2276 __apl_carries.2274)  <2804>;
                            (__trgt.2592 var=763) const ()  <3554>;
                            () void_j_t21s_s2 (__trgt.2592)  <3555>;
                        } #428 off=29
                        {
                            (expZ.1275 var=74) merge (expZ.1086 expZ.1271)  <1475>;
                            (sigZ_low.1804 var=287) merge (sigZ_low.1807 __apl_r_low.2275)  <2185>;
                            (sigZ_high.1810 var=288) merge (__fch_sig128Z.1117 __apl_r_high.2277)  <2191>;
                        } #95
                    } #91
                    #98 off=31
                    (softfloat_roundPackToF64.1286 var=291) const ()  <1486>;
                    (__R_SP.1302 var=12 __sp.1303 var=18) wr_res_reg (__tmp.1301 __sp.61)  <1501>;
                    () void_j_t21s_s2 (softfloat_roundPackToF64.1286)  <3511>;
                    call {
                        (__tmp.1278 var=286 stl=X off=12) assign (__tmp.1860)  <1478>;
                        (expZ.1279 var=74 stl=X off=13) assign (expZ.1275)  <1479>;
                        (sigZ_low.1281 var=287 stl=X off=14) assign (sigZ_low.1804)  <1481>;
                        (sigZ_high.1283 var=288 stl=X off=15) assign (sigZ_high.1810)  <1483>;
                        (__la.1288 var=31 stl=X off=1) assign (__la.31)  <1488>;
                        (__tmp.1290 var=294 stl=X off=10 __tmp.1294 var=295 stl=X off=11) Fsoftfloat_roundPackToF64 (__la.1288 __tmp.1278 expZ.1279 sigZ_low.1281 sigZ_high.1283)  <1489>;
                        (__tmp.1291 var=294) deassign (__tmp.1290)  <1491>;
                        (__tmp.1295 var=295) deassign (__tmp.1294)  <1494>;
                    } #97 off=32
                    #99 off=33 nxt=-2
                    (__rt_low.1305 var=33 stl=X off=10) assign (__tmp.1291)  <1504>;
                    () out (__rt_low.1305)  <1505>;
                    (__rt_high.1307 var=34 stl=X off=11) assign (__tmp.1295)  <1507>;
                    () out (__rt_high.1307)  <1508>;
                    () sink (__sp.1303)  <1518>;
                    sync {
                    } #1 off=34
                    #100 off=35
                    (softfloat_propagateNaNF64UI.1400 var=305) const ()  <1609>;
                    (__link.1401 var=306) w32_jal_t21s_s2 (softfloat_propagateNaNF64UI.1400)  <1610>;
                    call {
                        (uiA_low.1391 var=299 stl=X off=12) assign (a_low.40)  <1600>;
                        (uiA_high.1393 var=300 stl=X off=13) assign (a_high.44)  <1602>;
                        (uiB_low.1395 var=301 stl=X off=14) assign (b_low.49)  <1604>;
                        (uiB_high.1397 var=302 stl=X off=15) assign (b_high.53)  <1606>;
                        (__link.1402 var=306 stl=X off=1) assign (__link.1401)  <1611>;
                        (__tmp.1404 var=308 stl=X off=10 __tmp.1408 var=309 stl=X off=11) Fsoftfloat_propagateNaNF64UI (__link.1402 uiA_low.1391 uiA_high.1393 uiB_low.1395 uiB_high.1397)  <1612>;
                        (__tmp.1405 var=308) deassign (__tmp.1404)  <1614>;
                        (__tmp.1409 var=309) deassign (__tmp.1408)  <1617>;
                    } #101 off=36
                    #102 off=37 nxt=-3 tgt=3
                    () sink (__sp.61)  <1625>;
                    () sync_sink (__tmp.1405) sid=118  <2198>;
                    () sync_sink (__tmp.1409) sid=119  <2207>;
                    (magBits_low.2430 var=647) never ()  <3032>;
                    (magBits_high.2437 var=648) never ()  <3039>;
                    (__trgt.2606 var=773) const ()  <3580>;
                    () void_j_t21s_s2 (__trgt.2606)  <3581>;
                } #43
                {
                    #737 off=2
                    (__trgt.2593 var=764) const ()  <3556>;
                    () void_br_bool_t13s_s2 (__tmp.2610 __trgt.2593)  <3557>;
                    (__either.2594 var=749) undefined ()  <3558>;
                    (__tmp.2610 var=672) bool__ne___uint___uint (__tmpd.2442 __ct_0.113)  <3587>;
                    if {
                        {
                            () if_expr (__either.2594)  <594>;
                            () chess_rear_then ()  <3559>;
                        } #37
                        {
                            () sink (__sp.61)  <600>;
                            (__trgt.2607 var=774) const ()  <3582>;
                            () void_j_t21s_s2 (__trgt.2607)  <3583>;
                        } #39 off=4 nxt=-3 tgt=1
                        {
                        } #40 off=3
                        {
                        } #41
                    } #36
                    #529 off=5
                    (magBits_low.2083 var=505) __uint__or___uint___uint (expA.148 a_low.40)  <2565>;
                    (magBits_high.2084 var=507) __uint__or___uint___uint (__tmp_high.2462 sigA_high.1938)  <2566>;
                    (__tmp_high.2462 var=689) __sint__rs___sint___sint (expA.148 __ct_31.2392)  <3103>;
                } #34
                {
                    (magBits_low.2429 var=647) merge (magBits_low.2430 magBits_low.2083)  <3031>;
                    (magBits_high.2436 var=648) merge (magBits_high.2437 magBits_high.2084)  <3038>;
                } #103
            } #32
            #739 off=38
            (__trgt.2599 var=767) const ()  <3567>;
            () void_j_t21s_s2 (__trgt.2599)  <3568>;
        } #30
        {
            (magBits_low.2426 var=647) merge (magBits_low.2066 magBits_low.2429)  <3028>;
            (magBits_high.2433 var=648) merge (magBits_high.2067 magBits_high.2436)  <3035>;
        } #104
    } #7
    #503 off=45
    (__ct_2146959360.1828 var=363) const ()  <2213>;
    (__tmpd.2448 var=677) __uint__or___uint___uint (magBits_high.2433 magBits_low.2426)  <3084>;
    (__tmp.2449 var=678) bool__eq___uint___uint (__tmpd.2448 __ct_0.113)  <3085>;
    (__trgt.2600 var=768) const ()  <3569>;
    () void_br_bool_t13s_s2 (__tmp.2449 __trgt.2600)  <3570>;
    (__either.2601 var=749) undefined ()  <3571>;
    if {
        {
            () if_expr (__either.2601)  <1827>;
        } #107
        {
        } #108 off=47
        {
            (__apl_r_high.2327 var=615) __uint__pl___uint___uint (__apl_r_high.2306 __ct_2146435072.2423)  <2865>;
            (__ct_2146435072.2423 var=666) const ()  <3024>;
            (__trgt.2602 var=769) const ()  <3572>;
            () void_j_t21s_s2 (__trgt.2602)  <3573>;
        } #470 off=46
        {
            (uiZ_high.1827 var=340) merge (__ct_2146959360.1828 __apl_r_high.2327)  <2212>;
        } #110
    } #106
    #111 off=48 nxt=-3 tgt=3
    () sink (__sp.61)  <1846>;
    () sync_sink (__ct_0.113) sid=118  <2200>;
    () sync_sink (uiZ_high.1827) sid=119  <2209>;
    (__trgt.2608 var=775) const ()  <3584>;
    () void_j_t21s_s2 (__trgt.2608)  <3585>;
    sync {
    } #2 off=49
    sync {
        (uiZ_low.1815 var=339) sync_link (__ct_0.113) sid=118  <2196>;
        (uiZ_high.1822 var=340) sync_link (__apl_r_high.2306) sid=119  <2205>;
    } #3 off=51
    #115 off=52 nxt=-2
    (__R_SP.1739 var=12 __sp.1740 var=18) wr_res_reg (__tmp.1301 __sp.61)  <2040>;
    () void___rts_jr_w32 (__la.31)  <2041>;
    (__rt_low.1742 var=33 stl=X off=10) assign (uiZ_low.1815)  <2043>;
    () out (__rt_low.1742)  <2044>;
    (__rt_high.1744 var=34 stl=X off=11) assign (uiZ_high.1822)  <2046>;
    () out (__rt_high.1744)  <2047>;
    () sink (__sp.1740)  <2057>;
} #0
0 : 'SoftFloat-3e/source/f64_mul.c';
----------
0 : (0,44:0,0);
1 : (0,128:1,118);
2 : (0,145:1,137);
3 : (0,147:1,139);
7 : (0,83:4,29);
9 : (0,83:25,30);
11 : (0,84:18,30);
13 : (0,84:18,31);
14 : (0,84:38,32);
16 : (0,84:38,32);
18 : (0,84:38,33);
19 : (0,84:38,34);
23 : (0,84:8,38);
26 : (0,84:49,39);
27 : (0,84:8,41);
30 : (0,147:1,48);
32 : (0,88:4,49);
34 : (0,88:25,50);
36 : (0,89:8,50);
39 : (0,89:20,51);
40 : (0,89:8,53);
43 : (0,147:1,60);
44 : (0,95:9,61);
45 : (0,95:4,61);
47 : (0,95:18,62);
49 : (0,96:8,62);
52 : (0,96:22,63);
53 : (0,96:8,65);
55 : (0,97:52,68);
56 : (0,97:21,68);
57 : (0,95:18,73);
58 : (0,95:4,74);
60 : (0,101:9,77);
61 : (0,101:4,77);
63 : (0,101:18,78);
65 : (0,102:8,78);
68 : (0,102:22,79);
69 : (0,102:8,81);
71 : (0,103:52,84);
72 : (0,103:21,84);
73 : (0,101:18,89);
74 : (0,101:4,90);
77 : (0,116:4,96);
79 : (0,119:22,98);
81 : (0,119:22,99);
82 : (0,119:22,100);
85 : (0,119:4,102);
88 : (0,119:4,105);
91 : (0,121:4,108);
94 : (0,121:4,113);
97 : (0,125:11,116);
98 : (0,125:4,116);
99 : (0,125:4,116);
100 : (0,129:44,119);
101 : (0,129:10,119);
102 : (0,130:4,120);
106 : (0,134:4,128);
108 : (0,134:21,129);
111 : (0,142:4,136);
115 : (0,149:4,141);
278 : (0,84:18,30);
318 : (0,116:4,96);
404 : (0,119:45,103);
410 : (0,121:14,108);
428 : (0,121:40,109);
470 : (0,140:57,132);
483 : (0,96:13,62);
493 : (0,102:13,78);
503 : (0,134:9,128);
521 : (0,85:23,44);
529 : (0,90:23,56);
667 : (0,84:38,33);
706 : (0,119:22,98);
----------
67 : (0,44:10,0);
68 : (0,44:10,0);
70 : (0,44:10,0);
71 : (0,44:10,0);
73 : (0,46:19,0);
84 : (0,58:23,0);
86 : (0,58:23,0);
89 : (0,63:13,0);
91 : (0,63:13,0);
124 : (0,70:6,0);
155 : (0,73:40,0);
157 : (0,73:40,21);
194 : (0,78:40,26);
200 : (0,80:18,28);
206 : (0,83:14,29);
246 : (0,83:4,29);
289 : (0,84:18,30);
334 : (0,84:38,32);
340 : (0,84:38,35);
341 : (0,84:18,37);
381 : (0,84:8,38);
551 : (0,88:4,49);
594 : (0,89:8,50);
765 : (0,95:4,61);
809 : (0,96:8,62);
935 : (0,97:19,0);
937 : (0,97:52,0);
939 : (0,97:52,0);
943 : (0,97:21,68);
944 : (0,97:21,0);
945 : (0,97:21,68);
950 : (0,98:25,70);
955 : (0,99:25,71);
960 : (0,99:25,71);
970 : (0,95:4,76);
973 : (0,95:4,76);
974 : (0,95:4,76);
975 : (0,95:4,76);
976 : (0,95:4,76);
984 : (0,95:4,76);
1044 : (0,101:4,77);
1088 : (0,102:8,78);
1214 : (0,103:19,0);
1216 : (0,103:52,0);
1218 : (0,103:52,0);
1222 : (0,103:21,84);
1223 : (0,103:21,0);
1224 : (0,103:21,84);
1229 : (0,104:25,86);
1234 : (0,105:25,87);
1239 : (0,105:25,87);
1269 : (0,101:4,92);
1280 : (0,109:16,93);
1283 : (0,109:23,93);
1287 : (0,110:43,0);
1293 : (0,111:43,0);
1297 : (0,116:27,0);
1299 : (0,116:27,0);
1301 : (0,116:33,0);
1303 : (0,116:33,0);
1304 : (0,116:39,0);
1308 : (0,116:4,96);
1309 : (0,116:4,0);
1310 : (0,116:4,96);
1314 : (0,118:26,97);
1322 : (0,118:45,97);
1328 : (0,119:16,98);
1331 : (0,119:22,98);
1371 : (0,119:22,98);
1377 : (0,119:32,100);
1421 : (0,119:4,102);
1468 : (0,121:4,108);
1469 : (0,122:8,0);
1471 : (0,122:8,109);
1475 : (0,121:4,115);
1478 : (0,125:37,0);
1479 : (0,125:44,0);
1481 : (0,125:50,0);
1483 : (0,125:50,0);
1488 : (0,125:11,0);
1489 : (0,125:11,116);
1498 : (0,125:4,0);
1500 : (0,125:4,0);
1501 : (0,125:4,116);
1504 : (0,125:35,0);
1507 : (0,125:35,0);
1600 : (0,129:39,0);
1602 : (0,129:39,0);
1604 : (0,129:44,0);
1606 : (0,129:44,0);
1610 : (0,129:10,119);
1611 : (0,129:10,0);
1612 : (0,129:10,119);
1827 : (0,134:4,128);
2040 : (0,149:4,141);
2041 : (0,149:4,141);
2043 : (0,149:13,0);
2046 : (0,149:13,0);
2213 : (0,138:14,0);
2221 : (0,109:23,0);
2223 : (0,122:8,0);
2232 : (0,58:23,0);
2234 : (0,99:25,0);
2235 : (0,58:23,0);
2240 : (0,63:13,0);
2242 : (0,118:26,0);
2243 : (0,63:13,0);
2245 : (0,118:45,0);
2246 : (0,63:13,0);
2248 : (0,119:16,0);
2310 : (0,72:37,20);
2361 : (0,73:34,21);
2384 : (0,74:19,22);
2416 : (0,77:37,25);
2467 : (0,78:34,26);
2490 : (0,79:19,27);
2544 : (0,85:23,44);
2545 : (0,85:23,44);
2565 : (0,90:23,56);
2566 : (0,90:23,56);
2587 : (0,110:17,94);
2615 : (0,110:41,94);
2616 : (0,110:41,94);
2617 : (0,110:41,94);
2618 : (0,110:41,94);
2642 : (0,111:17,95);
2670 : (0,111:41,95);
2671 : (0,111:41,95);
2672 : (0,111:41,95);
2673 : (0,111:41,95);
2751 : (0,119:45,103);
2801 : (0,123:13,110);
2802 : (0,123:13,110);
2803 : (0,123:13,110);
2804 : (0,123:13,110);
2839 : (0,140:51,132);
2865 : (0,140:57,132);
2980 : (0,72:37,0);
2984 : (0,73:34,0);
2990 : (0,110:41,0);
2994 : (0,111:41,0);
2998 : (0,74:21,0);
3006 : (0,110:19,0);
3022 : (0,121:16,0);
3024 : (0,140:83,0);
3076 : (0,84:18,30);
3077 : (0,84:18,30);
3078 : (0,84:38,33);
3081 : (0,96:13,62);
3083 : (0,102:13,78);
3084 : (0,134:9,128);
3085 : (0,134:9,128);
3089 : (0,85:23,44);
3103 : (0,90:23,56);
3387 : (0,80:18,28);
3396 : (0,80:18,28);
3473 : (0,95:9,61);
3474 : (0,101:9,77);
3475 : (0,119:22,100);
3476 : (0,119:22,101);
3477 : (0,121:14,108);
3511 : (0,125:11,116);
3513 : (0,84:38,32);
3516 : (0,84:18,30);
3521 : (0,84:8,38);
3525 : (0,96:8,62);
3529 : (0,95:4,61);
3534 : (0,102:8,78);
3538 : (0,101:4,77);
3543 : (0,119:22,98);
3547 : (0,119:4,102);
3552 : (0,121:4,108);
3557 : (0,89:8,50);
3561 : (0,88:4,49);
3565 : (0,83:4,29);
3570 : (0,134:4,128);

