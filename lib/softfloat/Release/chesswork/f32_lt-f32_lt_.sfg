
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:31:51 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f32_lt.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  bool f32_lt(float32_t, float32_t)
Ff32_lt : user_defined, called {
    fnm : "f32_lt" 'bool f32_lt(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_lt typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   24 : __rt typ=bool bnd=m
   25 : a typ=w32 bnd=p tref=float32_t___1
   26 : b typ=w32 bnd=p tref=float32_t___1
   27 : __ct_m8S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   40 : signA typ=bool bnd=m tref=bool__
   42 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   56 : __tmp typ=w32 bnd=m
   57 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   59 : __tmp typ=w32 bnd=m
   62 : __tmp typ=bool bnd=m
   63 : __ct_8388607 typ=w32 val=8388607f bnd=m
   65 : __tmp typ=w32 bnd=m
   68 : __tmp typ=bool bnd=m
   71 : __tmp typ=bool bnd=m
   74 : __tmp typ=w32 bnd=m
   77 : __tmp typ=w32 bnd=m
   80 : __tmp typ=bool bnd=m
   83 : __tmp typ=w32 bnd=m
   86 : __tmp typ=bool bnd=m
   89 : __tmp typ=bool bnd=m
   90 : __tmp typ=bool bnd=m
   93 : __ct_31 typ=w32 val=31f bnd=m
   95 : __tmp typ=w32 bnd=m
  101 : __tmp typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  106 : __tmp typ=w32 bnd=m
  107 : __tmp typ=bool bnd=m
  108 : __tmp typ=w32 bnd=m
  109 : __ct_1 typ=w32 val=1f bnd=m
  111 : __tmp typ=w32 bnd=m
  114 : __tmp typ=bool bnd=m
  117 : __tmp typ=bool bnd=m
  118 : __tmp typ=bool bnd=m
  121 : __tmp typ=w32 bnd=m
  122 : __tmp typ=w32 bnd=m
  125 : __tmp typ=bool bnd=m
  128 : __tmp typ=bool bnd=m
  129 : __tmp typ=bool bnd=m
  130 : __tmp typ=w32 bnd=m
  131 : __ct_8s0 typ=w32 val=0s0 bnd=m
  133 : __tmp typ=w32 bnd=m
  149 : __ct_4294967295 typ=w32 val=-1f bnd=m
  194 : __true typ=bool val=1f bnd=m
  195 : __false typ=bool val=0f bnd=m
  196 : __either typ=bool bnd=m
  199 : __t_f typ=bool bnd=m
  200 : __trgt typ=t13s_s2 val=0j bnd=m
  201 : __trgt typ=t13s_s2 val=0j bnd=m
  202 : __trgt typ=t13s_s2 val=0j bnd=m
  203 : __trgt typ=t13s_s2 val=0j bnd=m
  204 : __trgt typ=t13s_s2 val=0j bnd=m
  205 : __trgt typ=t13s_s2 val=0j bnd=m
  206 : __trgt typ=t13s_s2 val=0j bnd=m
  207 : __trgt typ=t13s_s2 val=0j bnd=m
  208 : __trgt typ=t13s_s2 val=0j bnd=m
  209 : __trgt typ=t21s_s2 val=0j bnd=m
  210 : __trgt typ=t21s_s2 val=0j bnd=m
  211 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_lt {
    #62 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (a.25 var=25 stl=X off=11) inp ()  <36>;
    (a.26 var=25) deassign (a.25)  <37>;
    (b.28 var=26 stl=X off=12) inp ()  <39>;
    (b.29 var=26) deassign (b.28)  <40>;
    (__rd___sp.31 var=21) rd_res_reg (__R_SP.11 __sp.17)  <42>;
    (__ct_m8S0.32 var=27) const ()  <43>;
    (__tmp.34 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.31 __ct_m8S0.32)  <45>;
    (__R_SP.35 var=12 __sp.36 var=18) wr_res_reg (__tmp.34 __sp.17)  <46>;
    (__rd___sp.37 var=21) rd_res_reg (__R_SP.11 __sp.36)  <48>;
    (__ct_0.55 var=42) const ()  <66>;
    (__ct_2139095040.74 var=57) const ()  <83>;
    (__tmp.76 var=59) __uint__ad___uint___uint (__tmp.317 __ct_2139095040.74)  <85>;
    (__ct_8388607.98 var=63) const ()  <108>;
    (__ct_1.234 var=109) const ()  <249>;
    (__ct_4294967295.316 var=149) const ()  <378>;
    (__tmp.317 var=56) __uint__er___uint___uint (a.26 __ct_4294967295.316)  <379>;
    (__tmp.387 var=62) bool__ne___uint___uint (__tmp.76 __ct_0.55)  <520>;
    (__trgt.409 var=200) const ()  <559>;
    () void_br_bool_t13s_s2 (__tmp.387 __trgt.409)  <560>;
    (__either.410 var=196) undefined ()  <561>;
    if {
        {
            () if_expr (__either.410)  <107>;
        } #5
        {
            (__false.413 var=195) const ()  <565>;
        } #7
        {
            (__tmp.100 var=65) __uint__ad___uint___uint (a.26 __ct_8388607.98)  <110>;
            (__tmp.103 var=68) bool__ne___uint___uint (__tmp.100 __ct_0.55)  <113>;
            (__trgt.414 var=202) const ()  <566>;
            () void_br_bool_t13s_s2 (__tmp.103 __trgt.414)  <567>;
            (__either.415 var=196) undefined ()  <568>;
        } #6 off=1
        {
            (__tmp.106 var=71) merge (__false.413 __either.415)  <116>;
        } #8
    } #4
    if {
        {
            () if_expr (__tmp.106)  <135>;
        } #11
        {
            (__true.425 var=194) const ()  <582>;
        } #12
        {
            #68 off=2
            (__tmp.130 var=77) __uint__ad___uint___uint (__tmp.321 __ct_2139095040.74)  <141>;
            (__tmp.321 var=74) __uint__er___uint___uint (b.29 __ct_4294967295.316)  <386>;
            (__tmp.388 var=80) bool__ne___uint___uint (__tmp.130 __ct_0.55)  <521>;
            (__trgt.411 var=201) const ()  <562>;
            () void_br_bool_t13s_s2 (__tmp.388 __trgt.411)  <563>;
            (__either.412 var=196) undefined ()  <564>;
            if {
                {
                    () if_expr (__either.412)  <163>;
                } #16
                {
                    (__false.426 var=195) const ()  <583>;
                } #18
                {
                    (__tmp.154 var=83) __uint__ad___uint___uint (b.29 __ct_8388607.98)  <166>;
                    (__tmp.157 var=86) bool__ne___uint___uint (__tmp.154 __ct_0.55)  <169>;
                    (__trgt.427 var=207) const ()  <584>;
                    () void_br_bool_t13s_s2 (__tmp.157 __trgt.427)  <585>;
                    (__either.428 var=196) undefined ()  <586>;
                } #17 off=3
                {
                    (__tmp.160 var=89) merge (__false.426 __either.428)  <172>;
                } #19
            } #15
        } #13
        {
            (__tmp.161 var=90) merge (__true.425 __tmp.160)  <173>;
        } #20
    } #10
    if {
        {
            () if_expr (__tmp.161)  <192>;
        } #23
        {
            (__false.429 var=195) const ()  <587>;
        } #24
        {
            #78 off=4
            (__ct_31.182 var=93) const ()  <195>;
            (__tmp.184 var=95) __uint__rs___uint___sint (a.26 __ct_31.182)  <197>;
            (__tmp.190 var=101) __uint__rs___uint___sint (b.29 __ct_31.182)  <203>;
            (__tmp.196 var=107) bool__ne___sint___sint (__tmp.346 __tmp.352)  <209>;
            (__tmp.346 var=105) __sint_sne0___sint (__tmp.184)  <448>;
            (__tmp.352 var=106) __sint_sne0___sint (__tmp.190)  <457>;
            (__trgt.423 var=206) const ()  <579>;
            () void_br_bool_t13s_s2 (__tmp.196 __trgt.423)  <580>;
            (__either.424 var=196) undefined ()  <581>;
            if {
                {
                    () if_expr (__either.424)  <228>;
                } #28
                {
                    #194 off=9
                    (__trgt.416 var=203) const ()  <569>;
                    () void_br_bool_t13s_s2 (signA.438 __trgt.416)  <570>;
                    (__either.417 var=196) undefined ()  <571>;
                    (signA.438 var=40) bool__eq___uint___uint (__tmp.184 __ct_0.55)  <600>;
                    if {
                        {
                            () if_expr (__either.417)  <247>;
                        } #32
                        {
                            (__false.430 var=195) const ()  <588>;
                        } #34
                        {
                            (__tmp.233 var=108) __uint__or___uint___uint (a.26 b.29)  <248>;
                            (__tmp.236 var=111) __uint__ls___uint___sint (__tmp.233 __ct_1.234)  <251>;
                            (__tmp.239 var=114) bool__ne___uint___uint (__tmp.236 __ct_0.55)  <254>;
                            (__trgt.431 var=208) const ()  <589>;
                            () void_br_bool_t13s_s2 (__tmp.239 __trgt.431)  <590>;
                            (__either.432 var=196) undefined ()  <591>;
                        } #33 off=10
                        {
                            (__tmp.242 var=117) merge (__false.430 __either.432)  <257>;
                        } #35
                    } #31
                } #29
                {
                    #37 off=5
                    (__tmp.390 var=118) bool__eq___uint___uint (a.26 b.29)  <523>;
                    (__trgt.418 var=204) const ()  <572>;
                    () void_br_bool_t13s_s2 (__tmp.390 __trgt.418)  <573>;
                    (__either.419 var=196) undefined ()  <574>;
                    if {
                        {
                            () if_expr (__either.419)  <277>;
                        } #39
                        {
                            (__false.420 var=195) const ()  <575>;
                        } #41
                        {
                            (__tmp.265 var=122) __sint__er___sint___sint (__tmp.346 __tmp.357)  <281>;
                            (__tmp.268 var=125) bool__ne___sint___sint (__tmp.265 __ct_0.55)  <284>;
                            (__tmp.357 var=121) __sint_slt___uint___uint (a.26 b.29)  <465>;
                            (__trgt.421 var=205) const ()  <576>;
                            () void_br_bool_t13s_s2 (__tmp.268 __trgt.421)  <577>;
                            (__either.422 var=196) undefined ()  <578>;
                        } #177 off=6
                        {
                            (__tmp.271 var=128) merge (__false.420 __either.422)  <287>;
                        } #42
                    } #38
                    if {
                        {
                            () if_expr (__tmp.271)  <555>;
                        } #196
                        {
                            (__trgt.433 var=209) const ()  <592>;
                            () void_j_t21s_s2 (__trgt.433)  <593>;
                            (__true.434 var=194) const ()  <594>;
                        } #197 off=8
                        {
                            (__trgt.435 var=210) const ()  <595>;
                            () void_j_t21s_s2 (__trgt.435)  <596>;
                            (__false.436 var=195) const ()  <597>;
                        } #198 off=7
                        {
                            (__t_f.408 var=199) merge (__true.434 __false.436)  <558>;
                        } #199
                    } #195
                } #36
                {
                    (__tmp.272 var=129) merge (__tmp.242 __t_f.408)  <288>;
                } #43
            } #27
        } #25
        {
            (__rt.273 var=24) merge (__false.429 __tmp.272)  <289>;
        } #44
    } #22
    if {
        {
            () if_expr (__rt.273)  <341>;
        } #52
        {
        } #53 off=12
        {
            (__trgt.437 var=211) const ()  <598>;
            () void_j_t21s_s2 (__trgt.437)  <599>;
        } #54 off=11
        {
            (__tmp.307 var=130) merge (__ct_1.234 __ct_0.55)  <344>;
        } #55
    } #51
    #47 off=13 nxt=-2
    (__ct_8s0.278 var=131) const ()  <294>;
    (__tmp.280 var=133) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_8s0.278)  <296>;
    (__R_SP.281 var=12 __sp.282 var=18) wr_res_reg (__tmp.280 __sp.36)  <297>;
    () void___rts_jr_w32 (__la.22)  <298>;
    (__tmp.283 var=130 stl=X off=10) assign (__tmp.307)  <299>;
    () out (__tmp.283)  <300>;
    () sink (__sp.282)  <306>;
} #0
0 : 'SoftFloat-3e/source/f32_lt.c';
----------
0 : (0,43:0,0);
4 : (0,55:39,10);
6 : (0,55:39,11);
7 : (0,55:39,12);
10 : (0,55:64,14);
12 : (0,55:64,15);
13 : (0,55:97,16);
15 : (0,55:97,16);
17 : (0,55:97,17);
18 : (0,55:97,18);
22 : (0,55:4,22);
24 : (0,55:124,23);
25 : (0,59:8,26);
27 : (0,64:25,29);
29 : (0,64:33,30);
31 : (0,64:33,30);
33 : (0,64:65,31);
34 : (0,64:33,32);
36 : (0,65:27,35);
37 : (0,65:19,35);
38 : (0,65:27,35);
41 : (0,65:27,37);
47 : (0,63:4,45);
51 : (0,63:4,45);
52 : (0,63:4,45);
53 : (0,63:4,45);
54 : (0,63:4,45);
55 : (0,63:4,45);
62 : (0,55:33,10);
68 : (0,55:91,16);
78 : (0,64:15,29);
177 : (0,65:27,36);
----------
42 : (0,43:5,0);
43 : (0,43:5,0);
45 : (0,43:5,0);
46 : (0,43:5,0);
48 : (0,45:19,0);
66 : (0,51:6,0);
83 : (0,55:19,0);
85 : (0,55:19,10);
107 : (0,55:39,10);
108 : (0,55:49,0);
110 : (0,55:49,11);
113 : (0,55:39,11);
116 : (0,55:39,13);
135 : (0,55:64,14);
141 : (0,55:77,16);
163 : (0,55:97,16);
166 : (0,55:107,17);
169 : (0,55:97,17);
172 : (0,55:97,19);
173 : (0,55:64,21);
192 : (0,55:4,22);
195 : (0,61:39,0);
197 : (0,61:37,27);
203 : (0,62:37,28);
209 : (0,64:15,29);
228 : (0,64:25,29);
247 : (0,64:33,30);
248 : (0,64:54,31);
249 : (0,64:62,0);
251 : (0,64:60,31);
254 : (0,64:65,31);
257 : (0,64:33,33);
277 : (0,65:27,35);
281 : (0,65:37,36);
284 : (0,65:27,36);
287 : (0,65:27,38);
288 : (0,64:25,40);
289 : (0,55:4,44);
294 : (0,63:4,0);
296 : (0,63:4,0);
297 : (0,63:4,45);
298 : (0,63:4,45);
299 : (0,63:4,0);
378 : (0,55:12,0);
379 : (0,55:12,10);
386 : (0,55:70,16);
448 : (0,64:15,29);
457 : (0,64:15,29);
465 : (0,65:37,36);
520 : (0,55:33,10);
521 : (0,55:91,16);
523 : (0,65:19,35);
560 : (0,55:39,10);
563 : (0,55:97,16);
567 : (0,55:64,14);
570 : (0,64:33,30);
573 : (0,65:27,35);
580 : (0,64:25,29);
585 : (0,55:4,22);

