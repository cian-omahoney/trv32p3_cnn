
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:32:41 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f64_eq.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  bool f64_eq(float64_t, float64_t)
Ff64_eq : user_defined, called {
    fnm : "f64_eq" 'bool f64_eq(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f64_eq typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   24 : __rt typ=bool bnd=m
   26 : a_low typ=w32 bnd=m tref=__uint__
   27 : a_high typ=w32 bnd=m tref=__uint__
   29 : b_low typ=w32 bnd=m tref=__uint__
   30 : b_high typ=w32 bnd=m tref=__uint__
   31 : __ct_m16S0 typ=w32 val=0S0 bnd=m
   33 : __tmp typ=w32 bnd=m
   44 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   85 : __tmp typ=bool bnd=m
  103 : __tmp typ=bool bnd=m
  104 : __tmp typ=bool bnd=m
  107 : __tmp typ=bool bnd=m
  118 : __tmp typ=bool bnd=m
  119 : __tmp typ=w32 bnd=m
  120 : __ct_16s0 typ=w32 val=0s0 bnd=m
  122 : __tmp typ=w32 bnd=m
  126 : __ct_1 typ=w32 val=1f bnd=m
  144 : __tmp_high typ=w32 bnd=m
  156 : __tmp_high typ=w32 bnd=m
  166 : __tmp typ=bool bnd=m
  167 : __tmp typ=bool bnd=m
  177 : __tmp_high typ=w32 bnd=m
  198 : __tmp_high typ=w32 bnd=m
  204 : __tmp_high typ=w32 bnd=m
  217 : __tmp_high typ=w32 bnd=m
  239 : __tmp_low typ=w32 bnd=m
  241 : __tmp_high typ=w32 bnd=m
  249 : __tmp_high typ=w32 bnd=m
  263 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
  265 : __ct_1048575 typ=w32 val=1048575f bnd=m
  266 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  269 : __tmpd typ=w32 bnd=m
  270 : __tmp typ=bool bnd=m
  271 : __tmpd typ=w32 bnd=m
  272 : __tmp typ=bool bnd=m
  273 : __tmpd typ=w32 bnd=m
  274 : __tmp typ=bool bnd=m
  277 : __ct_4294967295 typ=w32 val=-1f bnd=m
  286 : __true typ=bool val=1f bnd=m
  287 : __false typ=bool val=0f bnd=m
  288 : __either typ=bool bnd=m
  289 : __trgt typ=t13s_s2 val=0j bnd=m
  290 : __trgt typ=t13s_s2 val=0j bnd=m
  291 : __trgt typ=t13s_s2 val=0j bnd=m
  292 : __trgt typ=t13s_s2 val=0j bnd=m
  293 : __trgt typ=t13s_s2 val=0j bnd=m
  294 : __trgt typ=t13s_s2 val=0j bnd=m
  295 : __trgt typ=t13s_s2 val=0j bnd=m
  296 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_eq {
    #186 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (a_low.26 var=26 stl=X off=11) inp ()  <37>;
    (a_low.27 var=26) deassign (a_low.26)  <38>;
    (a_high.30 var=27 stl=X off=12) inp ()  <41>;
    (a_high.31 var=27) deassign (a_high.30)  <42>;
    (b_low.35 var=29 stl=X off=13) inp ()  <46>;
    (b_low.36 var=29) deassign (b_low.35)  <47>;
    (b_high.39 var=30 stl=X off=14) inp ()  <50>;
    (b_high.40 var=30) deassign (b_high.39)  <51>;
    (__rd___sp.43 var=21) rd_res_reg (__R_SP.11 __sp.17)  <54>;
    (__ct_m16S0.44 var=31) const ()  <55>;
    (__tmp.46 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_m16S0.44)  <57>;
    (__R_SP.47 var=12 __sp.48 var=18) wr_res_reg (__tmp.46 __sp.17)  <58>;
    (__rd___sp.49 var=21) rd_res_reg (__R_SP.11 __sp.48)  <60>;
    (__ct_0.63 var=44) const ()  <74>;
    (__ct_1.270 var=126) const ()  <303>;
    (__tmp_high.301 var=156) __uint__ad___uint___uint (__tmp_high.506 __ct_2146435072.492)  <364>;
    (__ct_2146435072.492 var=263) const ()  <617>;
    (__ct_1048575.494 var=265) const ()  <621>;
    (__ct_4294967295.505 var=277) const ()  <646>;
    (__tmp_high.506 var=144) __uint__er___uint___uint (a_high.31 __ct_4294967295.505)  <647>;
    (__tmp.516 var=166) bool__ne___uint___uint (__tmp_high.301 __ct_0.63)  <684>;
    (__trgt.521 var=289) const ()  <699>;
    () void_br_bool_t13s_s2 (__tmp.516 __trgt.521)  <700>;
    (__either.522 var=288) undefined ()  <701>;
    if {
        {
            () if_expr (__either.522)  <139>;
        } #5
        {
            (__false.525 var=287) const ()  <705>;
        } #7
        {
            (__tmp_high.331 var=177) __uint__ad___uint___uint (a_high.31 __ct_1048575.494)  <402>;
            (__tmpd.498 var=269) __uint__or___uint___uint (__tmp_high.331 a_low.27)  <638>;
            (__tmp.499 var=270) bool__ne___uint___uint (__tmpd.498 __ct_0.63)  <639>;
            (__trgt.526 var=291) const ()  <706>;
            () void_br_bool_t13s_s2 (__tmp.499 __trgt.526)  <707>;
            (__either.527 var=288) undefined ()  <708>;
        } #92 off=1
        {
            (__tmp.140 var=85) merge (__false.525 __either.527)  <148>;
        } #8
    } #4
    if {
        {
            () if_expr (__tmp.140)  <165>;
        } #11
        {
            (__true.533 var=286) const ()  <716>;
        } #12
        {
            #192 off=2
            (__tmp_high.374 var=204) __uint__ad___uint___uint (__tmp_high.510 __ct_2146435072.492)  <457>;
            (__tmp_high.510 var=198) __uint__er___uint___uint (b_high.40 __ct_4294967295.505)  <654>;
            (__tmp.517 var=166) bool__ne___uint___uint (__tmp_high.374 __ct_0.63)  <685>;
            (__trgt.523 var=290) const ()  <702>;
            () void_br_bool_t13s_s2 (__tmp.517 __trgt.523)  <703>;
            (__either.524 var=288) undefined ()  <704>;
            if {
                {
                    () if_expr (__either.524)  <191>;
                } #16
                {
                    (__false.534 var=287) const ()  <717>;
                } #18
                {
                    (__tmp_high.404 var=217) __uint__ad___uint___uint (b_high.40 __ct_1048575.494)  <495>;
                    (__tmpd.500 var=271) __uint__or___uint___uint (__tmp_high.404 b_low.36)  <640>;
                    (__tmp.501 var=272) bool__ne___uint___uint (__tmpd.500 __ct_0.63)  <641>;
                    (__trgt.535 var=294) const ()  <718>;
                    () void_br_bool_t13s_s2 (__tmp.501 __trgt.535)  <719>;
                    (__either.536 var=288) undefined ()  <720>;
                } #139 off=3
                {
                    (__tmp.190 var=103) merge (__false.534 __either.536)  <200>;
                } #19
            } #15
        } #13
        {
            (__tmp.191 var=104) merge (__true.533 __tmp.190)  <201>;
        } #20
    } #10
    if {
        {
            () if_expr (__tmp.191)  <218>;
        } #23
        {
            (__false.537 var=287) const ()  <721>;
        } #24
        {
            #149 off=4
            (__tmp.518 var=166) bool__ne___uint___uint (a_high.31 b_high.40)  <686>;
            (__trgt.528 var=292) const ()  <709>;
            () void_br_bool_t13s_s2 (__tmp.518 __trgt.528)  <710>;
            (__either.529 var=288) undefined ()  <711>;
            if {
                {
                    () if_expr (__either.529)  <534>;
                } #151
                {
                    (__false.530 var=287) const ()  <712>;
                } #153
                {
                    (__tmp.435 var=167) bool__eq___uint___uint (a_low.27 b_low.36)  <535>;
                    (__trgt.531 var=293) const ()  <713>;
                    () void_br_bool_t13s_s2 (__tmp.435 __trgt.531)  <714>;
                    (__either.532 var=288) undefined ()  <715>;
                } #152 off=5
                {
                    (__tmp.436 var=107) merge (__false.530 __either.532)  <536>;
                } #154
            } #150
            if {
                {
                    () if_expr (__tmp.436)  <238>;
                } #28
                {
                    (__true.538 var=286) const ()  <722>;
                } #29
                {
                    (__tmp_low.446 var=239) __uint__or___uint___uint (a_low.27 b_low.36)  <549>;
                    (__tmp_high.447 var=241) __uint__or___uint___uint (a_high.31 b_high.40)  <550>;
                    (__tmp_high.464 var=249) __uint__ad___uint___uint (__tmp_high.447 __ct_2147483647.495)  <571>;
                    (__ct_2147483647.495 var=266) const ()  <623>;
                    (__tmpd.502 var=273) __uint__or___uint___uint (__tmp_high.464 __tmp_low.446)  <642>;
                    (__tmp.503 var=274) bool__eq___uint___uint (__tmpd.502 __ct_0.63)  <643>;
                    (__trgt.539 var=295) const ()  <723>;
                    () void_br_bool_t13s_s2 (__tmp.503 __trgt.539)  <724>;
                    (__either.540 var=288) undefined ()  <725>;
                } #175 off=6
                {
                    (__tmp.237 var=118) merge (__true.538 __either.540)  <249>;
                } #31
            } #27
        } #25
        {
            (__rt.238 var=24) merge (__false.537 __tmp.237)  <250>;
        } #32
    } #22
    if {
        {
            () if_expr (__rt.238)  <302>;
        } #40
        {
        } #41 off=8
        {
            (__trgt.541 var=296) const ()  <726>;
            () void_j_t21s_s2 (__trgt.541)  <727>;
        } #42 off=7
        {
            (__tmp.272 var=119) merge (__ct_1.270 __ct_0.63)  <305>;
        } #43
    } #39
    #35 off=9 nxt=-2
    (__ct_16s0.241 var=120) const ()  <253>;
    (__tmp.243 var=122) __Pvoid__pl___Pvoid___sint (__rd___sp.49 __ct_16s0.241)  <255>;
    (__R_SP.244 var=12 __sp.245 var=18) wr_res_reg (__tmp.243 __sp.48)  <256>;
    () void___rts_jr_w32 (__la.22)  <257>;
    (__tmp.246 var=119 stl=X off=10) assign (__tmp.272)  <258>;
    () out (__tmp.246)  <259>;
    () sink (__sp.245)  <269>;
} #0
0 : 'SoftFloat-3e/source/f64_eq.c';
----------
0 : (0,44:0,0);
4 : (0,55:50,9);
7 : (0,55:50,11);
10 : (0,55:86,13);
12 : (0,55:86,14);
13 : (0,55:130,15);
15 : (0,55:130,15);
18 : (0,55:130,17);
22 : (0,55:4,21);
24 : (0,55:168,22);
25 : (0,63:8,25);
27 : (0,65:24,26);
29 : (0,65:24,27);
35 : (0,65:4,34);
39 : (0,65:4,34);
40 : (0,65:4,34);
41 : (0,65:4,34);
42 : (0,65:4,34);
43 : (0,65:4,34);
92 : (0,55:50,10);
139 : (0,55:130,16);
149 : (0,65:16,26);
150 : (0,65:16,26);
151 : (0,65:16,26);
152 : (0,65:16,26);
153 : (0,65:16,26);
154 : (0,65:16,26);
175 : (0,65:27,28);
186 : (0,55:44,9);
192 : (0,55:124,15);
----------
54 : (0,44:5,0);
55 : (0,44:5,0);
57 : (0,44:5,0);
58 : (0,44:5,0);
60 : (0,46:19,0);
74 : (0,51:6,0);
139 : (0,55:50,9);
148 : (0,55:50,12);
165 : (0,55:86,13);
191 : (0,55:130,15);
200 : (0,55:130,18);
201 : (0,55:86,20);
218 : (0,55:4,21);
238 : (0,65:24,26);
249 : (0,65:24,29);
250 : (0,55:4,33);
253 : (0,65:4,0);
255 : (0,65:4,0);
256 : (0,65:4,34);
257 : (0,65:4,34);
258 : (0,65:4,0);
364 : (0,55:19,9);
402 : (0,55:60,10);
457 : (0,55:99,15);
495 : (0,55:140,16);
534 : (0,65:16,26);
535 : (0,65:16,26);
536 : (0,65:16,26);
549 : (0,65:35,28);
550 : (0,65:35,28);
571 : (0,65:42,28);
617 : (0,55:21,0);
621 : (0,55:62,0);
623 : (0,65:44,0);
638 : (0,55:50,10);
639 : (0,55:50,10);
640 : (0,55:130,16);
641 : (0,55:130,16);
642 : (0,65:27,28);
643 : (0,65:27,28);
646 : (0,55:12,0);
647 : (0,55:12,9);
654 : (0,55:92,15);
684 : (0,55:44,9);
685 : (0,55:124,15);
686 : (0,65:16,26);
700 : (0,55:50,9);
703 : (0,55:130,15);
707 : (0,55:86,13);
710 : (0,65:16,26);
714 : (0,65:24,26);
719 : (0,55:4,21);

