
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:45:41 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f32_to_f64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t f32_to_f64(float32_t)
Ff32_to_f64 : user_defined, called {
    fnm : "f32_to_f64" 'float64_t f32_to_f64(float32_t)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=24 );
    llv : 0 0 0 0 0 ;
}
****
!!  exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)
Fsoftfloat_normSubnormalF32Sig : user_defined, called {
    fnm : "softfloat_normSubnormalF32Sig" 'exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)';
    arg : ( w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : f32_to_f64 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : normExpSig typ=w08 val=8t0 bnd=a sz=8 algn=4 stl=DMb tref=exp16_sig32_DMb
   22 : normExpSig_exp typ=w08 bnd=B stl=DMb
   23 : normExpSig_sig typ=w08 bnd=B stl=DMb
   24 : __rd___sp typ=w32 bnd=m
   25 : __la typ=w32 bnd=p tref=w32__
   27 : __rt_low typ=w32 bnd=m tref=__uint__
   28 : __rt_high typ=w32 bnd=m tref=__uint__
   29 : a typ=w32 bnd=p tref=float32_t___1
   30 : __ct_m24S0 typ=w32 val=-24S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   37 : __ptr_normExpSig typ=w32 bnd=m
   38 : __ct_8t0 typ=w32 val=8t0 bnd=m
   40 : __adr_normExpSig typ=w32 bnd=m adro=20
   47 : exp typ=w32 bnd=m tref=int_fast16_t__
   48 : frac typ=w32 bnd=m tref=uint_fast32_t__
   51 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   58 : __ct_31 typ=w32 val=31f bnd=m
   60 : __tmp typ=w32 bnd=m
   64 : __ct_23 typ=w32 val=23f bnd=m
   66 : __tmp typ=w32 bnd=m
   68 : __ct_255 typ=w32 val=255f bnd=m
   71 : __ct_8388607 typ=w32 val=8388607f bnd=m
   76 : __tmp typ=bool bnd=m
   79 : __tmp typ=bool bnd=m
   94 : __tmp typ=bool bnd=m
   98 : __tmp typ=bool bnd=m
  112 : softfloat_normSubnormalF32Sig typ=t21s_s2 val=0r bnd=m
  113 : __link typ=w32 bnd=m
  118 : __fch_normExpSig_exp typ=w32 bnd=m
  130 : __ct_896 typ=w32 val=896f bnd=m
  132 : __tmp typ=w32 bnd=m
  139 : __ct_29 typ=w32 val=29f bnd=m
  146 : uiZ_low typ=w32 bnd=m tref=__uint__
  147 : uiZ_high typ=w32 bnd=m tref=__uint__
  158 : __ct_24s0 typ=w32 val=24s0 bnd=m
  160 : __tmp typ=w32 bnd=m
  165 : __ct_2146959360 typ=t20s_rp12 val=524160f bnd=m
  172 : __ct_m1 typ=w32 val=-1f bnd=m
  176 : __ct_12t0 typ=w32 val=12t0 bnd=m
  177 : __adr_normExpSig typ=w32 bnd=m adro=20
  186 : __apl_carries typ=w32 bnd=m tref=__uint__
  191 : __apl_r_low typ=w32 bnd=m tref=__uint__
  193 : __apl_r_high typ=w32 bnd=m tref=__uint__
  212 : __apl_r_high typ=w32 bnd=m tref=__uint__
  256 : __ct_20 typ=w32 val=20f bnd=m
  259 : __ct_3 typ=w32 val=3f bnd=m
  260 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
  267 : __tmp typ=w32 bnd=m
  309 : __either typ=bool bnd=m
  310 : __trgt typ=t13s_s2 val=0j bnd=m
  311 : __trgt typ=t21s_s2 val=0j bnd=m
  312 : __trgt typ=t13s_s2 val=0j bnd=m
  313 : __trgt typ=t13s_s2 val=0j bnd=m
  314 : __trgt typ=t21s_s2 val=0j bnd=m
  315 : __trgt typ=t13s_s2 val=0j bnd=m
  316 : __trgt typ=t21s_s2 val=0j bnd=m
  317 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_to_f64 {
    #243 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (normExpSig.19 var=20) source ()  <30>;
    (normExpSig_exp.21 var=22) source ()  <32>;
    (normExpSig_sig.22 var=23) source ()  <33>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (a.32 var=29 stl=X off=12) inp ()  <43>;
    (a.33 var=29) deassign (a.32)  <44>;
    (__rd___sp.35 var=24) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_m24S0.36 var=30) const ()  <47>;
    (__tmp.38 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_m24S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (__rd___sp.41 var=24) rd_res_reg (__R_SP.11 __sp.40)  <52>;
    (__ct_0.67 var=51) const ()  <78>;
    (__ct_31.76 var=58) const ()  <86>;
    (__tmp.78 var=60) __uint__rs___uint___sint (a.33 __ct_31.76)  <88>;
    (__ct_23.82 var=64) const ()  <92>;
    (__tmp.84 var=66) __uint__rs___uint___sint (a.33 __ct_23.82)  <94>;
    (__ct_255.86 var=68) const ()  <96>;
    (exp.88 var=47) __sint__ad___sint___sint (__tmp.84 __ct_255.86)  <98>;
    (__ct_8388607.89 var=71) const ()  <99>;
    (frac.91 var=48) __uint__ad___uint___uint (a.33 __ct_8388607.89)  <101>;
    (__tmp.94 var=76) bool__eq___sint___sint (exp.88 __ct_255.86)  <104>;
    (__apl_r_high.469 var=193) __uint__ls___uint___sint (__tmp.664 __ct_31.76)  <589>;
    (__tmp.664 var=267) __sint_sne0___sint (__tmp.78)  <894>;
    (__trgt.708 var=315) const ()  <1093>;
    () void_br_bool_t13s_s2 (__tmp.94 __trgt.708)  <1094>;
    (__either.709 var=309) undefined ()  <1095>;
    if {
        {
            () if_expr (__either.709)  <127>;
        } #6
        {
            #8 off=10
            (__tmp.119 var=79) bool__ne___uint___uint (frac.91 __ct_0.67)  <130>;
            (__ct_2146959360.445 var=165) const ()  <539>;
            (__trgt.700 var=310) const ()  <1079>;
            () void_br_bool_t13s_s2 (__tmp.119 __trgt.700)  <1080>;
            (__either.701 var=309) undefined ()  <1081>;
            if {
                {
                    () if_expr (__either.701)  <153>;
                } #10
                {
                } #11 off=12
                {
                    (__apl_r_high.490 var=212) __uint__pl___uint___uint (__apl_r_high.469 __ct_2146435072.639)  <615>;
                    (__ct_2146435072.639 var=260) const ()  <818>;
                    (__trgt.702 var=311) const ()  <1082>;
                    () void_j_t21s_s2 (__trgt.702)  <1083>;
                } #77 off=11
                {
                    (uiZ_high.444 var=147) merge (__ct_2146959360.445 __apl_r_high.490)  <538>;
                } #13
            } #9
        } #7
        {
            #15 off=1
            (__tmp.697 var=94) bool__ne___sint___sint (exp.88 __ct_0.67)  <1057>;
            (__trgt.705 var=313) const ()  <1088>;
            () void_br_bool_t13s_s2 (__tmp.697 __trgt.705)  <1089>;
            (__either.706 var=309) undefined ()  <1090>;
            if {
                {
                    () if_expr (__either.706)  <193>;
                } #17
                {
                } #30 off=8
                {
                    #19 off=2
                    (__tmp.426 var=98) bool__eq___uint___uint (frac.91 __ct_0.67)  <518>;
                    (__trgt.703 var=312) const ()  <1084>;
                    () void_br_bool_t13s_s2 (__tmp.426 __trgt.703)  <1085>;
                    (__either.704 var=309) undefined ()  <1086>;
                    if {
                        {
                            () if_expr (__either.704)  <220>;
                            () chess_rear_then ()  <1087>;
                        } #21
                        {
                            () sink (__sp.40)  <236>;
                            () sync_sink (__ct_0.67) sid=23  <522>;
                            () sync_sink (__apl_r_high.469) sid=24  <532>;
                            (__trgt.711 var=317) const ()  <1098>;
                            () void_j_t21s_s2 (__trgt.711)  <1099>;
                        } #24 off=4 nxt=-3 tgt=1
                        {
                        } #25 off=3
                        {
                        } #26
                    } #20
                    #27 off=5
                    (__ct_8t0.47 var=38) const ()  <58>;
                    (__adr_normExpSig.49 var=40) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_8t0.47)  <60>;
                    (softfloat_normSubnormalF32Sig.265 var=112) const ()  <307>;
                    (__link.266 var=113) w32_jal_t21s_s2 (softfloat_normSubnormalF32Sig.265)  <308>;
                    call {
                        (__ptr_normExpSig.261 var=37 stl=X off=10) assign (__adr_normExpSig.49)  <303>;
                        (frac.262 var=48 stl=X off=11) assign (frac.91)  <304>;
                        (__link.267 var=113 stl=X off=1) assign (__link.266)  <309>;
                        (normExpSig.268 var=20 normExpSig_exp.269 var=22 normExpSig_sig.270 var=23) Fsoftfloat_normSubnormalF32Sig (__link.267 __ptr_normExpSig.261 frac.262 normExpSig.19 normExpSig_exp.21 normExpSig_sig.22)  <310>;
                    } #28 off=6
                    #29 off=7
                    (__fch_normExpSig_exp.275 var=118) load (__M_DMw.4 __adr_normExpSig.49 normExpSig_exp.269)  <315>;
                    (exp.278 var=47) __sint__pl___sint___sint (__fch_normExpSig_exp.275 __ct_m1.449)  <318>;
                    (frac.282 var=48) load (__M_DMw.4 __adr_normExpSig.452 normExpSig_sig.270)  <322>;
                    (__ct_m1.449 var=172) const ()  <544>;
                    (__ct_12t0.451 var=176) const ()  <547>;
                    (__adr_normExpSig.452 var=177) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_12t0.451)  <549>;
                    (__trgt.707 var=314) const ()  <1091>;
                    () void_j_t21s_s2 (__trgt.707)  <1092>;
                } #18
                {
                    (exp.299 var=47) merge (exp.88 exp.278)  <339>;
                    (frac.300 var=48) merge (frac.91 frac.282)  <340>;
                } #31
            } #16
            #257 off=9
            (__ct_896.309 var=130) const ()  <349>;
            (__tmp.311 var=132) __sint__pl___sint___sint (exp.299 __ct_896.309)  <351>;
            (__ct_29.318 var=139) const ()  <358>;
            (__apl_r_high.528 var=193) __uint__ls___uint___sint (__tmp.311 __ct_20.635)  <660>;
            (__apl_r_high.549 var=212) __uint__pl___uint___uint (__apl_r_high.469 __apl_r_high.528)  <686>;
            (__apl_carries.583 var=186) __uint__rs___uint___sint (frac.300 __ct_3.638)  <727>;
            (__apl_r_low.584 var=191) __uint__ls___uint___sint (frac.300 __ct_29.318)  <728>;
            (__apl_r_high.608 var=212) __uint__pl___uint___uint (__apl_r_high.549 __apl_carries.583)  <757>;
            (__ct_20.635 var=256) const ()  <810>;
            (__ct_3.638 var=259) const ()  <816>;
            (__trgt.710 var=316) const ()  <1096>;
            () void_j_t21s_s2 (__trgt.710)  <1097>;
        } #14
        {
            (uiZ_low.432 var=146) merge (__ct_0.67 __apl_r_low.584)  <525>;
            (uiZ_high.441 var=147) merge (uiZ_high.444 __apl_r_high.608)  <535>;
        } #33
    } #5
    sync {
        (uiZ_low.428 var=146) sync_link (uiZ_low.432) sid=23  <520>;
        (uiZ_high.437 var=147) sync_link (uiZ_high.441) sid=24  <530>;
    } #1 off=15
    #36 off=16 nxt=-2
    (__ct_24s0.390 var=158) const ()  <428>;
    (__tmp.392 var=160) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_24s0.390)  <430>;
    (__R_SP.393 var=12 __sp.394 var=18) wr_res_reg (__tmp.392 __sp.40)  <431>;
    () void___rts_jr_w32 (__la.25)  <432>;
    (__rt_low.396 var=27 stl=X off=10) assign (uiZ_low.428)  <434>;
    () out (__rt_low.396)  <435>;
    (__rt_high.398 var=28 stl=X off=11) assign (uiZ_high.437)  <437>;
    () out (__rt_high.398)  <438>;
    () sink (__sp.394)  <444>;
} #0
0 : 'SoftFloat-3e/source/f32_to_f64.c';
----------
0 : (0,44:0,0);
1 : (0,88:1,51);
5 : (0,65:4,15);
7 : (0,65:23,16);
8 : (0,66:8,16);
9 : (0,66:8,16);
11 : (0,66:20,17);
14 : (0,88:1,28);
15 : (0,76:9,29);
16 : (0,76:4,29);
18 : (0,76:17,30);
19 : (0,77:13,30);
20 : (0,77:8,30);
24 : (0,79:12,32);
25 : (0,77:8,35);
27 : (0,81:52,38);
28 : (0,81:21,38);
29 : (0,76:17,43);
30 : (0,76:4,44);
36 : (0,90:4,53);
77 : (0,70:60,21);
243 : (0,65:13,15);
257 : (0,87:90,47);
----------
46 : (0,44:10,0);
47 : (0,44:10,0);
49 : (0,44:10,0);
50 : (0,44:10,0);
52 : (0,46:19,0);
58 : (0,53:23,0);
60 : (0,53:23,0);
78 : (0,58:6,0);
86 : (0,60:38,0);
88 : (0,60:36,12);
92 : (0,61:35,0);
94 : (0,61:33,13);
96 : (0,61:39,0);
98 : (0,61:39,13);
99 : (0,62:18,0);
101 : (0,62:18,14);
104 : (0,65:13,15);
127 : (0,65:4,15);
130 : (0,66:8,16);
153 : (0,66:8,16);
193 : (0,76:4,29);
220 : (0,77:8,30);
303 : (0,81:19,0);
304 : (0,81:52,0);
308 : (0,81:21,38);
309 : (0,81:21,0);
310 : (0,81:21,38);
315 : (0,82:24,40);
318 : (0,82:29,40);
322 : (0,83:25,41);
339 : (0,76:4,46);
340 : (0,76:4,46);
349 : (0,87:76,0);
351 : (0,87:76,47);
358 : (0,87:115,0);
428 : (0,90:4,0);
430 : (0,90:4,0);
431 : (0,90:4,53);
432 : (0,90:4,53);
434 : (0,90:13,0);
437 : (0,90:13,0);
518 : (0,77:13,30);
539 : (0,68:19,0);
544 : (0,82:29,0);
547 : (0,53:23,0);
549 : (0,83:25,0);
589 : (0,70:54,21);
615 : (0,70:60,21);
660 : (0,87:84,47);
686 : (0,87:52,47);
727 : (0,87:113,47);
728 : (0,87:113,47);
757 : (0,87:90,47);
810 : (0,87:84,0);
816 : (0,87:113,0);
818 : (0,70:86,0);
894 : (0,70:32,21);
1057 : (0,76:9,29);
1080 : (0,66:8,16);
1085 : (0,77:8,30);
1089 : (0,76:4,29);
1094 : (0,65:4,15);

