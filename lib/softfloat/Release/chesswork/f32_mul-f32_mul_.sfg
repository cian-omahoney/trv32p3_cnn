
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:45:41 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f32_mul.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=20 );
    llv : 0 0 0 0 0 ;
}
****
!!  exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)
Fsoftfloat_normSubnormalF32Sig : user_defined, called {
    fnm : "softfloat_normSubnormalF32Sig" 'exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)';
    arg : ( w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] );
    llv : 0 0 0 0 0 ;
}
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
!!  uint_fast32_t softfloat_propagateNaNF32UI(uint_fast32_t, uint_fast32_t)
Fsoftfloat_propagateNaNF32UI : user_defined, called {
    fnm : "softfloat_propagateNaNF32UI" 'uint_fast32_t softfloat_propagateNaNF32UI(uint_fast32_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : f32_mul typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   21 : normExpSig typ=w08 val=8t0 bnd=a sz=8 algn=4 stl=DMb tref=exp16_sig32_DMb
   23 : normExpSig_exp typ=w08 bnd=B stl=DMb
   24 : normExpSig_sig typ=w08 bnd=B stl=DMb
   25 : __rd___sp typ=w32 bnd=m
   26 : __la typ=w32 bnd=p tref=w32__
   27 : __rt typ=w32 bnd=p tref=float32_t___1
   28 : a typ=w32 bnd=p tref=float32_t___1
   29 : b typ=w32 bnd=p tref=float32_t___1
   30 : __ct_m20S0 typ=w32 val=-20S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   41 : __ptr_normExpSig typ=w32 bnd=m
   42 : __ct_8t0 typ=w32 val=8t0 bnd=m
   44 : __adr_normExpSig typ=w32 bnd=m adro=21
   49 : uiA typ=w32 bnd=m tref=uint_fast32_t__
   51 : expA typ=w32 bnd=m tref=int_fast16_t__
   52 : sigA typ=w32 bnd=m tref=uint_fast32_t__
   53 : uiB typ=w32 bnd=m tref=uint_fast32_t__
   55 : expB typ=w32 bnd=m tref=int_fast16_t__
   56 : sigB typ=w32 bnd=m tref=uint_fast32_t__
   57 : signZ typ=bool bnd=m tref=bool__
   58 : magBits typ=w32 bnd=m tref=uint_fast32_t__
   59 : expZ typ=w32 bnd=m tref=int_fast16_t__
   60 : sigZ typ=w32 bnd=m tref=uint_fast32_t__
   61 : uiZ typ=w32 bnd=m tref=uint_fast32_t__
   62 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   69 : __ct_31 typ=w32 val=31f bnd=m
   71 : __tmp typ=w32 bnd=m
   75 : __ct_23 typ=w32 val=23f bnd=m
   77 : __tmp typ=w32 bnd=m
   79 : __ct_255 typ=w32 val=255f bnd=m
   82 : __ct_8388607 typ=w32 val=8388607f bnd=m
   94 : __tmp typ=w32 bnd=m
  100 : __tmp typ=w32 bnd=m
  108 : __tmp typ=w32 bnd=m
  109 : __tmp typ=w32 bnd=m
  110 : __tmp typ=w32 bnd=m
  116 : __tmp typ=bool bnd=m
  119 : __tmp typ=bool bnd=m
  124 : __tmp typ=bool bnd=m
  127 : __tmp typ=bool bnd=m
  130 : __tmp typ=bool bnd=m
  131 : __tmp typ=bool bnd=m
  144 : __tmp typ=bool bnd=m
  148 : __tmp typ=bool bnd=m
  152 : softfloat_normSubnormalF32Sig typ=t21s_s2 val=0r bnd=m
  153 : __link typ=w32 bnd=m
  165 : __tmp typ=bool bnd=m
  169 : __tmp typ=bool bnd=m
  174 : __link typ=w32 bnd=m
  184 : __tmp typ=w32 bnd=m
  188 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
  190 : __tmp typ=w32 bnd=m
  191 : __ct_7 typ=w32 val=7f bnd=m
  196 : __tmp typ=w32 bnd=m
  197 : __ct_8 typ=w32 val=8f bnd=m
  207 : __ct_1073741824 typ=t20s_rp12 val=262144f bnd=m
  209 : __tmp typ=bool bnd=m
  210 : __ct_1 typ=w32 val=1f bnd=m
  216 : __tmp typ=w32 bnd=m
  219 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
  221 : __tmp typ=w32 bnd=m
  222 : __ct_20s0 typ=w32 val=20s0 bnd=m
  224 : __tmp typ=w32 bnd=m
  227 : softfloat_propagateNaNF32UI typ=t21s_s2 val=0r bnd=m
  228 : __link typ=w32 bnd=m
  229 : __tmp typ=w32 bnd=m
  232 : __tmp typ=bool bnd=m
  234 : __ct_2143289344 typ=t20s_rp12 val=523264f bnd=m
  240 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
  242 : __tmp typ=w32 bnd=m
  280 : __ct_m127 typ=w32 val=-127f bnd=m
  281 : __ct_m1 typ=w32 val=-1f bnd=m
  284 : __ct_12t0 typ=w32 val=12t0 bnd=m
  285 : __adr_normExpSig typ=w32 bnd=m adro=21
  298 : __apl_p1lo typ=w32 bnd=m tref=__uint__
  299 : __apl_p1hi typ=w32 bnd=m tref=__uint__
  403 : __tmp_low typ=w32 bnd=m
  420 : __tmp typ=w32 bnd=m
  468 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  479 : __tmp typ=t20s_rp12 bnd=m
  480 : __true typ=bool val=1f bnd=m
  481 : __false typ=bool val=0f bnd=m
  482 : __either typ=bool bnd=m
  483 : __trgt typ=t13s_s2 val=0j bnd=m
  484 : __trgt typ=t21s_s2 val=0j bnd=m
  485 : __trgt typ=t13s_s2 val=0j bnd=m
  486 : __trgt typ=t13s_s2 val=0j bnd=m
  487 : __trgt typ=t13s_s2 val=0j bnd=m
  488 : __trgt typ=t13s_s2 val=0j bnd=m
  489 : __trgt typ=t13s_s2 val=0j bnd=m
  490 : __trgt typ=t21s_s2 val=0j bnd=m
  491 : __trgt typ=t13s_s2 val=0j bnd=m
  492 : __trgt typ=t13s_s2 val=0j bnd=m
  493 : __trgt typ=t21s_s2 val=0j bnd=m
  494 : __trgt typ=t13s_s2 val=0j bnd=m
  495 : __trgt typ=t21s_s2 val=0j bnd=m
  496 : __trgt typ=t13s_s2 val=0j bnd=m
  497 : __trgt typ=t13s_s2 val=0j bnd=m
  498 : __trgt typ=t13s_s2 val=0j bnd=m
  499 : __trgt typ=t21s_s2 val=0j bnd=m
  500 : __trgt typ=t13s_s2 val=0j bnd=m
  501 : __trgt typ=t21s_s2 val=0j bnd=m
  502 : __trgt typ=t21s_s2 val=0j bnd=m
  503 : __trgt typ=t21s_s2 val=0j bnd=m
  504 : __trgt typ=t21s_s2 val=0j bnd=m
  505 : __trgt typ=t21s_s2 val=0j bnd=m
  506 : __trgt typ=t21s_s2 val=0j bnd=m
  507 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_mul {
    #376 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (normExpSig.20 var=21) source ()  <31>;
    (normExpSig_exp.22 var=23) source ()  <33>;
    (normExpSig_sig.23 var=24) source ()  <34>;
    (__la.25 var=26 stl=X off=1) inp ()  <36>;
    (__la.26 var=26) deassign (__la.25)  <37>;
    (a.29 var=28 stl=X off=11) inp ()  <40>;
    (a.30 var=28) deassign (a.29)  <41>;
    (b.32 var=29 stl=X off=12) inp ()  <43>;
    (b.33 var=29) deassign (b.32)  <44>;
    (__rd___sp.35 var=25) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_m20S0.36 var=30) const ()  <47>;
    (__tmp.38 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_m20S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (__rd___sp.41 var=25) rd_res_reg (__R_SP.11 __sp.40)  <52>;
    (__ct_0.87 var=62) const ()  <98>;
    (__ct_31.96 var=69) const ()  <106>;
    (__tmp.98 var=71) __uint__rs___uint___sint (a.30 __ct_31.96)  <108>;
    (__ct_23.102 var=75) const ()  <112>;
    (__tmp.104 var=77) __uint__rs___uint___sint (a.30 __ct_23.102)  <114>;
    (__ct_255.106 var=79) const ()  <116>;
    (expA.108 var=51) __sint__ad___sint___sint (__tmp.104 __ct_255.106)  <118>;
    (__ct_8388607.109 var=82) const ()  <119>;
    (sigA.111 var=52) __uint__ad___uint___uint (a.30 __ct_8388607.109)  <121>;
    (__tmp.123 var=94) __uint__rs___uint___sint (b.33 __ct_31.96)  <132>;
    (__tmp.129 var=100) __uint__rs___uint___sint (b.33 __ct_23.102)  <138>;
    (expB.133 var=55) __sint__ad___sint___sint (__tmp.129 __ct_255.106)  <142>;
    (sigB.136 var=56) __uint__ad___uint___uint (b.33 __ct_8388607.109)  <145>;
    (__tmp.139 var=110) __sint__er___sint___sint (__tmp.1602 __tmp.1608)  <148>;
    (signZ.142 var=57) bool__ne___sint___sint (__tmp.139 __ct_0.87)  <151>;
    (__ct_2147483648.1596 var=468) const ()  <2196>;
    (__tmp.1602 var=108) __sint_sne0___sint (__tmp.98)  <2204>;
    (__tmp.1608 var=109) __sint_sne0___sint (__tmp.123)  <2213>;
    (__trgt.1623 var=483) const ()  <2305>;
    () void_br_bool_t13s_s2 (signZ.142 __trgt.1623)  <2306>;
    (__either.1624 var=482) undefined ()  <2307>;
    if {
        {
            () if_expr (__either.1624)  <2163>;
        } #378
        {
        } #379 off=2
        {
            (__trgt.1625 var=484) const ()  <2308>;
            () void_j_t21s_s2 (__trgt.1625)  <2309>;
        } #380 off=1
        {
            (__tmp.1597 var=479) merge (__ct_2147483648.1596 __ct_0.87)  <2198>;
        } #381
    } #377
    #314 off=3
    (__tmp.145 var=116) bool__eq___sint___sint (expA.108 __ct_255.106)  <154>;
    (__ct_20s0.965 var=222) const ()  <1137>;
    (__tmp.967 var=224) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_20s0.965)  <1139>;
    (__trgt.1651 var=498) const ()  <2353>;
    () void_br_bool_t13s_s2 (__tmp.145 __trgt.1651)  <2354>;
    (__either.1652 var=482) undefined ()  <2355>;
    if {
        {
            () if_expr (__either.1652)  <188>;
        } #8
        {
            #10 off=36
            (__tmp.181 var=119) bool__ne___uint___uint (sigA.111 __ct_0.87)  <191>;
            (__trgt.1628 var=486) const ()  <2313>;
            () void_br_bool_t13s_s2 (__tmp.181 __trgt.1628)  <2314>;
            (__either.1629 var=482) undefined ()  <2315>;
            if {
                {
                    () if_expr (__either.1629)  <225>;
                } #12
                {
                    (__true.1630 var=480) const ()  <2316>;
                } #13
                {
                    #412 off=37
                    (__trgt.1626 var=485) const ()  <2310>;
                    () void_br_bool_t13s_s2 (__tmp.1665 __trgt.1626)  <2311>;
                    (__either.1627 var=482) undefined ()  <2312>;
                    (__tmp.1665 var=124) bool__ne___sint___sint (expB.133 __ct_255.106)  <2377>;
                    if {
                        {
                            () if_expr (__either.1627)  <264>;
                        } #17
                        {
                            (__false.1631 var=481) const ()  <2317>;
                        } #19
                        {
                            (__trgt.1632 var=487) const ()  <2318>;
                            () void_br_bool_t13s_s2 (__tmp.1663 __trgt.1632)  <2319>;
                            (__either.1633 var=482) undefined ()  <2320>;
                            (__tmp.1663 var=127) bool__ne___uint___uint (sigB.136 __ct_0.87)  <2375>;
                        } #18 off=38
                        {
                            (__tmp.258 var=130) merge (__false.1631 __either.1633)  <270>;
                        } #20
                    } #16
                } #14
                {
                    (__tmp.259 var=131) merge (__true.1630 __tmp.258)  <271>;
                } #21
            } #11
            if {
                {
                    () if_expr (__tmp.259)  <305>;
                    () chess_rear_then ()  <2321>;
                } #24
                {
                    () sink (__sp.40)  <311>;
                    (__trgt.1657 var=502) const ()  <2363>;
                    () void_j_t21s_s2 (__trgt.1657)  <2364>;
                } #26 off=40 nxt=-3 tgt=1
                {
                } #27 off=39
                {
                } #28
            } #23
            #29 off=41
            (magBits.360 var=58) __uint__or___uint___uint (expB.133 sigB.136)  <412>;
        } #9
        {
            #414 off=4
            (__trgt.1649 var=497) const ()  <2349>;
            () void_br_bool_t13s_s2 (__tmp.1666 __trgt.1649)  <2350>;
            (__either.1650 var=482) undefined ()  <2351>;
            (__tmp.1666 var=124) bool__ne___sint___sint (expB.133 __ct_255.106)  <2378>;
            if {
                {
                    () if_expr (__either.1650)  <449>;
                    () chess_rear_then ()  <2352>;
                } #33
                {
                    #44 off=9
                    (__ct_8t0.52 var=42) const ()  <63>;
                    (__adr_normExpSig.54 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_8t0.52)  <65>;
                    (softfloat_normSubnormalF32Sig.645 var=152) const ()  <779>;
                    (__ct_12t0.1375 var=284) const ()  <1699>;
                    (__adr_normExpSig.1376 var=285) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_12t0.1375)  <1701>;
                    (__tmp.1618 var=144) bool__ne___sint___sint (expA.108 __ct_0.87)  <2275>;
                    (__trgt.1636 var=489) const ()  <2326>;
                    () void_br_bool_t13s_s2 (__tmp.1618 __trgt.1636)  <2327>;
                    (__either.1637 var=482) undefined ()  <2328>;
                    if {
                        {
                            () if_expr (__either.1637)  <631>;
                        } #46
                        {
                        } #58 off=16
                        {
                            #48 off=10
                            (__tmp.1364 var=148) bool__eq___uint___uint (sigA.111 __ct_0.87)  <1686>;
                            (__trgt.1634 var=488) const ()  <2322>;
                            () void_br_bool_t13s_s2 (__tmp.1364 __trgt.1634)  <2323>;
                            (__either.1635 var=482) undefined ()  <2324>;
                            if {
                                {
                                    () if_expr (__either.1635)  <669>;
                                    () chess_rear_then ()  <2325>;
                                } #50
                                {
                                    () sink (__sp.40)  <675>;
                                    (__trgt.1658 var=503) const ()  <2365>;
                                    () void_j_t21s_s2 (__trgt.1658)  <2366>;
                                } #52 off=12 nxt=-3 tgt=2
                                {
                                } #53 off=11
                                {
                                } #54
                            } #49
                            #55 off=13
                            (__link.646 var=153) w32_jal_t21s_s2 (softfloat_normSubnormalF32Sig.645)  <780>;
                            call {
                                (__ptr_normExpSig.641 var=41 stl=X off=10) assign (__adr_normExpSig.54)  <775>;
                                (sigA.642 var=52 stl=X off=11) assign (sigA.111)  <776>;
                                (__link.647 var=153 stl=X off=1) assign (__link.646)  <781>;
                                (normExpSig.648 var=21 normExpSig_exp.649 var=23 normExpSig_sig.650 var=24) Fsoftfloat_normSubnormalF32Sig (__link.647 __ptr_normExpSig.641 sigA.642 normExpSig.20 normExpSig_exp.22 normExpSig_sig.23)  <782>;
                            } #56 off=14
                            #57 off=15
                            (expA.655 var=51) load (__M_DMw.4 __adr_normExpSig.54 normExpSig_exp.649)  <787>;
                            (sigA.659 var=52) load (__M_DMw.4 __adr_normExpSig.1376 normExpSig_sig.650)  <791>;
                            (__trgt.1638 var=490) const ()  <2329>;
                            () void_j_t21s_s2 (__trgt.1638)  <2330>;
                        } #47
                        {
                            (normExpSig.668 var=21) merge (normExpSig.20 normExpSig.648)  <800>;
                            (normExpSig_exp.670 var=23) merge (normExpSig_exp.22 normExpSig_exp.649)  <802>;
                            (normExpSig_sig.671 var=24) merge (normExpSig_sig.23 normExpSig_sig.650)  <803>;
                            (expA.677 var=51) merge (expA.108 expA.655)  <809>;
                            (sigA.678 var=52) merge (sigA.111 sigA.659)  <810>;
                        } #59
                    } #45
                    #60 off=17
                    (__tmp.1619 var=165) bool__ne___sint___sint (expB.133 __ct_0.87)  <2276>;
                    (__trgt.1641 var=492) const ()  <2335>;
                    () void_br_bool_t13s_s2 (__tmp.1619 __trgt.1641)  <2336>;
                    (__either.1642 var=482) undefined ()  <2337>;
                    if {
                        {
                            () if_expr (__either.1642)  <862>;
                        } #62
                        {
                        } #74 off=24
                        {
                            #64 off=18
                            (__tmp.1366 var=169) bool__eq___uint___uint (sigB.136 __ct_0.87)  <1688>;
                            (__trgt.1639 var=491) const ()  <2331>;
                            () void_br_bool_t13s_s2 (__tmp.1366 __trgt.1639)  <2332>;
                            (__either.1640 var=482) undefined ()  <2333>;
                            if {
                                {
                                    () if_expr (__either.1640)  <900>;
                                    () chess_rear_then ()  <2334>;
                                } #66
                                {
                                    () sink (__sp.40)  <906>;
                                    (__trgt.1659 var=504) const ()  <2367>;
                                    () void_j_t21s_s2 (__trgt.1659)  <2368>;
                                } #68 off=20 nxt=-3 tgt=2
                                {
                                } #69 off=19
                                {
                                } #70
                            } #65
                            #71 off=21
                            (__link.838 var=174) w32_jal_t21s_s2 (softfloat_normSubnormalF32Sig.645)  <1011>;
                            call {
                                (__ptr_normExpSig.833 var=41 stl=X off=10) assign (__adr_normExpSig.54)  <1006>;
                                (sigB.834 var=56 stl=X off=11) assign (sigB.136)  <1007>;
                                (__link.839 var=174 stl=X off=1) assign (__link.838)  <1012>;
                                (normExpSig.840 var=21 normExpSig_exp.841 var=23 normExpSig_sig.842 var=24) Fsoftfloat_normSubnormalF32Sig (__link.839 __ptr_normExpSig.833 sigB.834 normExpSig.668 normExpSig_exp.670 normExpSig_sig.671)  <1013>;
                            } #72 off=22
                            #73 off=23
                            (expB.847 var=55) load (__M_DMw.4 __adr_normExpSig.54 normExpSig_exp.841)  <1018>;
                            (sigB.851 var=56) load (__M_DMw.4 __adr_normExpSig.1376 normExpSig_sig.842)  <1022>;
                            (__trgt.1643 var=493) const ()  <2338>;
                            () void_j_t21s_s2 (__trgt.1643)  <2339>;
                        } #63
                        {
                            (expB.875 var=55) merge (expB.133 expB.847)  <1046>;
                            (sigB.876 var=56) merge (sigB.136 sigB.851)  <1047>;
                        } #75
                    } #61
                    #370 off=25
                    (__tmp.885 var=184) __sint__pl___sint___sint (expA.677 expB.875)  <1056>;
                    (expZ.888 var=59) __sint__pl___sint___sint (__tmp.885 __ct_m127.1371)  <1059>;
                    (__ct_8388608.889 var=188) const ()  <1060>;
                    (__tmp.891 var=190) __uint__or___uint___uint (sigA.678 __ct_8388608.889)  <1062>;
                    (__ct_7.892 var=191) const ()  <1063>;
                    (sigA.894 var=52) __uint__ls___uint___sint (__tmp.891 __ct_7.892)  <1065>;
                    (__tmp.897 var=196) __uint__or___uint___uint (sigB.876 __ct_8388608.889)  <1068>;
                    (__ct_8.898 var=197) const ()  <1069>;
                    (sigB.900 var=56) __uint__ls___uint___sint (__tmp.897 __ct_8.898)  <1071>;
                    (__ct_1073741824.908 var=207) const ()  <1079>;
                    (__ct_m127.1371 var=280) const ()  <1693>;
                    (__apl_p1lo.1397 var=298) __uint_mul___uint___uint (sigA.894 sigB.900)  <1753>;
                    (__apl_p1hi.1402 var=299) __uint_mulhu___uint___uint (sigA.894 sigB.900)  <1760>;
                    (__tmp_low.1508 var=403) __uint__or___uint___uint (__apl_p1hi.1402 __tmp.1538)  <1921>;
                    (__tmp.1538 var=420) __sint_sne0___sint (__apl_p1lo.1397)  <2037>;
                    (__tmp.1620 var=209) bool__ge___uint___uint (__tmp_low.1508 __ct_1073741824.908)  <2277>;
                    (__trgt.1644 var=494) const ()  <2340>;
                    () void_br_bool_t13s_s2 (__tmp.1620 __trgt.1644)  <2341>;
                    (__either.1645 var=482) undefined ()  <2342>;
                    if {
                        {
                            () if_expr (__either.1645)  <1115>;
                        } #78
                        {
                        } #80 off=27
                        {
                            (__ct_1.944 var=210) const ()  <1116>;
                            (expZ.946 var=59) __sint__pl___sint___sint (expZ.888 __ct_m1.1372)  <1118>;
                            (sigZ.949 var=60) __uint__ls___uint___sint (__tmp_low.1508 __ct_1.944)  <1121>;
                            (__ct_m1.1372 var=281) const ()  <1695>;
                            (__trgt.1646 var=495) const ()  <2343>;
                            () void_j_t21s_s2 (__trgt.1646)  <2344>;
                        } #79 off=26
                        {
                            (expZ.950 var=59) merge (expZ.888 expZ.946)  <1122>;
                            (sigZ.951 var=60) merge (__tmp_low.1508 sigZ.949)  <1123>;
                        } #81
                    } #77
                    #84 off=28
                    (softfloat_roundPackToF32.958 var=219) const ()  <1130>;
                    (__R_SP.968 var=12 __sp.969 var=18) wr_res_reg (__tmp.967 __sp.40)  <1140>;
                    (__tmp.1382 var=216) __sint_sne0___sint (__tmp.139)  <1708>;
                    () void_j_t21s_s2 (softfloat_roundPackToF32.958)  <2304>;
                    call {
                        (__tmp.953 var=216 stl=X off=11) assign (__tmp.1382)  <1125>;
                        (expZ.954 var=59 stl=X off=12) assign (expZ.950)  <1126>;
                        (sigZ.955 var=60 stl=X off=13) assign (sigZ.951)  <1127>;
                        (__la.960 var=26 stl=X off=1) assign (__la.26)  <1132>;
                        (__tmp.961 var=221 stl=X off=10) Fsoftfloat_roundPackToF32 (__la.960 __tmp.953 expZ.954 sigZ.955)  <1133>;
                        (__tmp.962 var=221) deassign (__tmp.961)  <1134>;
                    } #83 off=29
                    #85 off=30 nxt=-2
                    (__rt.970 var=27 stl=X off=10) assign (__tmp.962)  <1142>;
                    () out (__rt.970)  <1143>;
                    () sink (__sp.969)  <1149>;
                    sync {
                    } #1 off=31
                    #86 off=32
                    (softfloat_propagateNaNF32UI.1041 var=227) const ()  <1220>;
                    (__link.1042 var=228) w32_jal_t21s_s2 (softfloat_propagateNaNF32UI.1041)  <1221>;
                    call {
                        (uiA.1037 var=49 stl=X off=11) assign (a.30)  <1216>;
                        (uiB.1038 var=53 stl=X off=12) assign (b.33)  <1217>;
                        (__link.1043 var=228 stl=X off=1) assign (__link.1042)  <1222>;
                        (__tmp.1044 var=229 stl=X off=10) Fsoftfloat_propagateNaNF32UI (__link.1043 uiA.1037 uiB.1038)  <1223>;
                        (__tmp.1045 var=229) deassign (__tmp.1044)  <1224>;
                    } #87 off=33
                    #88 off=34 nxt=-3 tgt=3
                    () sink (__sp.40)  <1231>;
                    () sync_sink (__tmp.1045) sid=98  <1263>;
                    (magBits.1073 var=58) never ()  <1291>;
                    (__trgt.1660 var=505) const ()  <2369>;
                    () void_j_t21s_s2 (__trgt.1660)  <2370>;
                } #43
                {
                    #413 off=5
                    (__trgt.1647 var=496) const ()  <2345>;
                    () void_br_bool_t13s_s2 (__tmp.1664 __trgt.1647)  <2346>;
                    (__either.1648 var=482) undefined ()  <2347>;
                    (__tmp.1664 var=127) bool__ne___uint___uint (sigB.136 __ct_0.87)  <2376>;
                    if {
                        {
                            () if_expr (__either.1648)  <486>;
                            () chess_rear_then ()  <2348>;
                        } #37
                        {
                            () sink (__sp.40)  <492>;
                            (__trgt.1661 var=506) const ()  <2371>;
                            () void_j_t21s_s2 (__trgt.1661)  <2372>;
                        } #39 off=7 nxt=-3 tgt=1
                        {
                        } #40 off=6
                        {
                        } #41
                    } #36
                    #42 off=8
                    (magBits.500 var=58) __uint__or___uint___uint (expA.108 sigA.111)  <593>;
                } #34
                {
                    (magBits.1106 var=58) merge (magBits.1073 magBits.500)  <1324>;
                } #89
            } #32
            #415 off=35
            (__trgt.1653 var=499) const ()  <2356>;
            () void_j_t21s_s2 (__trgt.1653)  <2357>;
        } #30
        {
            (magBits.1139 var=58) merge (magBits.360 magBits.1106)  <1357>;
        } #90
    } #7
    #91 off=42
    (__ct_2143289344.1183 var=234) const ()  <1402>;
    (__tmp.1367 var=232) bool__eq___uint___uint (magBits.1139 __ct_0.87)  <1689>;
    (__trgt.1654 var=500) const ()  <2358>;
    () void_br_bool_t13s_s2 (__tmp.1367 __trgt.1654)  <2359>;
    (__either.1655 var=482) undefined ()  <2360>;
    if {
        {
            () if_expr (__either.1655)  <1401>;
        } #93
        {
        } #94 off=44
        {
            (__ct_2139095040.1189 var=240) const ()  <1408>;
            (__tmp.1191 var=242) __uint__pl___uint___uint (__tmp.1597 __ct_2139095040.1189)  <1410>;
            (__trgt.1656 var=501) const ()  <2361>;
            () void_j_t21s_s2 (__trgt.1656)  <2362>;
        } #95 off=43
        {
            (uiZ.1195 var=61) merge (__ct_2143289344.1183 __tmp.1191)  <1414>;
        } #96
    } #92
    #97 off=45 nxt=-3 tgt=3
    () sink (__sp.40)  <1420>;
    () sync_sink (uiZ.1195) sid=98  <1452>;
    (__trgt.1662 var=507) const ()  <2373>;
    () void_j_t21s_s2 (__trgt.1662)  <2374>;
    sync {
    } #2 off=46
    sync {
        (uiZ.1303 var=61) sync_link (__tmp.1597) sid=98  <1561>;
    } #3 off=48
    #101 off=49 nxt=-2
    (__R_SP.1318 var=12 __sp.1319 var=18) wr_res_reg (__tmp.967 __sp.40)  <1575>;
    () void___rts_jr_w32 (__la.26)  <1576>;
    (__rt.1320 var=27 stl=X off=10) assign (uiZ.1303)  <1577>;
    () out (__rt.1320)  <1578>;
    () sink (__sp.1319)  <1584>;
} #0
0 : 'SoftFloat-3e/source/f32_mul.c';
----------
0 : (0,44:0,0);
1 : (0,115:1,106);
2 : (0,132:1,125);
3 : (0,134:1,127);
7 : (0,78:4,28);
9 : (0,78:24,29);
10 : (0,79:18,29);
11 : (0,79:18,29);
13 : (0,79:18,30);
14 : (0,79:37,31);
16 : (0,79:37,31);
18 : (0,79:37,32);
19 : (0,79:37,33);
23 : (0,79:8,37);
26 : (0,79:48,38);
27 : (0,79:8,40);
29 : (0,78:24,46);
30 : (0,134:1,47);
32 : (0,83:4,48);
34 : (0,83:24,49);
36 : (0,84:8,49);
39 : (0,84:20,50);
40 : (0,84:8,52);
42 : (0,83:24,58);
43 : (0,134:1,59);
44 : (0,90:9,60);
45 : (0,90:4,60);
47 : (0,90:18,61);
48 : (0,91:13,61);
49 : (0,91:8,61);
52 : (0,91:22,62);
53 : (0,91:8,64);
55 : (0,92:52,67);
56 : (0,92:21,67);
57 : (0,90:18,72);
58 : (0,90:4,73);
60 : (0,96:9,76);
61 : (0,96:4,76);
63 : (0,96:18,77);
64 : (0,97:13,77);
65 : (0,97:8,77);
68 : (0,97:22,78);
69 : (0,97:8,80);
71 : (0,98:52,83);
72 : (0,98:21,83);
73 : (0,96:18,88);
74 : (0,96:4,89);
77 : (0,108:4,96);
79 : (0,108:29,97);
80 : (0,108:4,101);
83 : (0,112:11,104);
84 : (0,112:4,104);
85 : (0,112:4,104);
86 : (0,116:44,107);
87 : (0,116:10,107);
88 : (0,117:4,108);
91 : (0,121:9,116);
92 : (0,121:4,116);
94 : (0,121:21,117);
95 : (0,126:11,120);
97 : (0,129:4,124);
101 : (0,136:4,129);
314 : (0,78:14,28);
370 : (0,108:14,96);
376 : (0,127:16,120);
377 : (0,127:16,120);
378 : (0,127:16,120);
379 : (0,127:16,120);
380 : (0,127:16,120);
381 : (0,127:16,120);
----------
46 : (0,44:10,0);
47 : (0,44:10,0);
49 : (0,44:10,0);
50 : (0,44:10,0);
52 : (0,46:19,0);
63 : (0,58:23,0);
65 : (0,58:23,0);
98 : (0,65:6,0);
106 : (0,67:39,0);
108 : (0,67:37,19);
112 : (0,68:36,0);
114 : (0,68:34,20);
116 : (0,68:40,0);
118 : (0,68:40,20);
119 : (0,69:19,0);
121 : (0,69:19,21);
132 : (0,72:37,24);
138 : (0,73:34,25);
142 : (0,73:40,25);
145 : (0,74:19,26);
148 : (0,75:18,27);
151 : (0,75:10,27);
154 : (0,78:14,28);
188 : (0,78:4,28);
191 : (0,79:18,29);
225 : (0,79:18,29);
264 : (0,79:37,31);
270 : (0,79:37,34);
271 : (0,79:18,36);
305 : (0,79:8,37);
412 : (0,80:23,43);
449 : (0,83:4,48);
486 : (0,84:8,49);
593 : (0,85:23,55);
631 : (0,90:4,60);
669 : (0,91:8,61);
775 : (0,92:19,0);
776 : (0,92:52,0);
780 : (0,92:21,67);
781 : (0,92:21,0);
782 : (0,92:21,67);
787 : (0,93:25,69);
791 : (0,94:25,70);
800 : (0,90:4,75);
802 : (0,90:4,75);
803 : (0,90:4,75);
809 : (0,90:4,75);
810 : (0,90:4,75);
862 : (0,96:4,76);
900 : (0,97:8,77);
1006 : (0,98:19,0);
1007 : (0,98:52,0);
1011 : (0,98:21,83);
1012 : (0,98:21,0);
1013 : (0,98:21,83);
1018 : (0,99:25,85);
1022 : (0,100:25,86);
1046 : (0,96:4,91);
1047 : (0,96:4,91);
1056 : (0,104:16,92);
1059 : (0,104:23,92);
1060 : (0,105:17,0);
1062 : (0,105:17,93);
1063 : (0,105:32,0);
1065 : (0,105:30,93);
1068 : (0,106:17,94);
1069 : (0,106:32,0);
1071 : (0,106:30,94);
1079 : (0,108:14,0);
1115 : (0,108:4,96);
1116 : (0,109:8,0);
1118 : (0,109:8,97);
1121 : (0,110:13,98);
1122 : (0,108:4,103);
1123 : (0,108:4,103);
1125 : (0,112:37,0);
1126 : (0,112:44,0);
1127 : (0,112:50,0);
1132 : (0,112:11,0);
1133 : (0,112:11,104);
1137 : (0,112:4,0);
1139 : (0,112:4,0);
1140 : (0,112:4,104);
1142 : (0,112:35,0);
1216 : (0,116:39,0);
1217 : (0,116:44,0);
1221 : (0,116:10,107);
1222 : (0,116:10,0);
1223 : (0,116:10,107);
1324 : (0,83:4,111);
1357 : (0,78:4,114);
1401 : (0,121:4,116);
1402 : (0,125:12,0);
1408 : (0,127:60,0);
1410 : (0,127:40,120);
1414 : (0,121:4,123);
1575 : (0,136:4,129);
1576 : (0,136:4,129);
1577 : (0,136:13,0);
1686 : (0,91:13,61);
1688 : (0,97:13,77);
1689 : (0,121:9,116);
1693 : (0,104:23,0);
1695 : (0,109:8,0);
1699 : (0,58:23,0);
1701 : (0,94:25,0);
1753 : (0,107:64,95);
1760 : (0,107:64,95);
1921 : (0,107:11,95);
2037 : (0,107:11,95);
2163 : (0,127:16,120);
2196 : (0,127:34,0);
2198 : (0,127:16,120);
2204 : (0,75:18,27);
2213 : (0,75:18,27);
2275 : (0,90:9,60);
2276 : (0,96:9,76);
2277 : (0,108:14,96);
2304 : (0,112:11,104);
2306 : (0,127:16,120);
2311 : (0,79:37,31);
2314 : (0,79:18,29);
2319 : (0,79:8,37);
2323 : (0,91:8,61);
2327 : (0,90:4,60);
2332 : (0,97:8,77);
2336 : (0,96:4,76);
2341 : (0,108:4,96);
2346 : (0,84:8,49);
2350 : (0,83:4,48);
2354 : (0,78:4,28);
2359 : (0,121:4,116);

