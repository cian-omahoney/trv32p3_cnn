
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb  7 12:34:11 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/s_approxRecipSqrt32_1.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint32_t softfloat_approxRecipSqrt32_1(unsigned, uint32_t)
Fsoftfloat_approxRecipSqrt32_1 : user_defined, called {
    fnm : "softfloat_approxRecipSqrt32_1" 'uint32_t softfloat_approxRecipSqrt32_1(unsigned, uint32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
}
****
***/

[
    0 : softfloat_approxRecipSqrt32_1 typ=u08 bnd=e stl=PMb
    4 : __M_DMh typ=w16 bnd=d stl=DMh
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : softfloat_approxRecipSqrt_1k0s typ=w08 bnd=e algn=2 stl=DMb
   21 : softfloat_approxRecipSqrt_1k1s typ=w08 bnd=e algn=2 stl=DMb
   22 : __rd___sp typ=w32 bnd=m
   24 : __ptr_softfloat_approxRecipSqrt_1k0s typ=w32 val=0a bnd=m adro=19
   26 : __ptr_softfloat_approxRecipSqrt_1k1s typ=w32 val=0a bnd=m adro=21
   27 : __la typ=w32 bnd=p tref=w32__
   29 : oddExpA typ=w32 bnd=p tref=__uint__
   30 : a typ=w32 bnd=p tref=uint32_t__
   31 : __ct_0S0 typ=w32 val=0S0 bnd=m
   33 : __tmp typ=w32 bnd=m
   35 : eps typ=__ushort bnd=m tref=uint16_t__
   36 : r0 typ=__ushort bnd=m tref=uint16_t__
   37 : ESqrR0 typ=w32 bnd=m tref=uint_fast32_t__
   38 : sigma0 typ=w32 bnd=m tref=uint32_t__
   39 : r typ=w32 bnd=m tref=uint_fast32_t__
   41 : __ct_27 typ=w32 val=27f bnd=m
   43 : __tmp typ=w32 bnd=m
   44 : __ct_14 typ=w32 val=14f bnd=m
   46 : __tmp typ=w32 bnd=m
   47 : __tmp typ=w32 bnd=m
   49 : __ct_12 typ=w32 val=12f bnd=m
   51 : __tmp typ=w32 bnd=m
   55 : __tmp typ=w32 bnd=m
   56 : __tmp typ=w32 bnd=m
   57 : __fch_softfloat_approxRecipSqrt_1k0s typ=__ushort bnd=m
   62 : __tmp typ=w32 bnd=m
   63 : __fch_softfloat_approxRecipSqrt_1k1s typ=__ushort bnd=m
   66 : __tmp typ=w32 bnd=m
   67 : __ct_20 typ=w32 val=20f bnd=m
   69 : __tmp typ=w32 bnd=m
   70 : __tmp typ=w32 bnd=m
   75 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   77 : __tmp typ=bool bnd=m
   79 : __ct_1 typ=w32 val=1f bnd=m
   85 : __ct_23 typ=w32 val=23f bnd=m
   91 : __ct_16 typ=w32 val=16f bnd=m
   93 : __tmp typ=w32 bnd=m
   98 : __ct_25 typ=w32 val=25f bnd=m
  113 : __tmp typ=w32 bnd=m
  114 : __ct_3 typ=w32 val=3f bnd=m
  116 : __tmp typ=w32 bnd=m
  117 : __tmp typ=w32 bnd=m
  121 : __tmp typ=w32 bnd=m
  122 : __tmp typ=w32 bnd=m
  131 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  133 : __tmp typ=w32 bnd=m
  136 : __tmp typ=bool bnd=m
  140 : __ct_0s0 typ=w32 val=0s0 bnd=m
  142 : __tmp typ=w32 bnd=m
  153 : __apl_p1lo typ=w32 bnd=m tref=__uint__
  154 : __apl_p1hi typ=w32 bnd=m tref=__uint__
  192 : __apl_carries typ=w32 bnd=m tref=__uint__
  197 : __tmp typ=w32 bnd=m
  198 : __apl_r_low typ=w32 bnd=m tref=__uint__
  210 : __ct_4294967295 typ=w32 val=-1f bnd=m
  235 : __apl_r_low typ=w32 bnd=m tref=__uint__
  288 : __ct_9 typ=w32 val=9f bnd=m
  290 : __ct_7 typ=w32 val=7f bnd=m
  391 : __either typ=bool bnd=m
  392 : __trgt typ=t13s_s2 val=0j bnd=m
  393 : __trgt typ=t21s_s2 val=0j bnd=m
  394 : __trgt typ=t13s_s2 val=0j bnd=m
  395 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_approxRecipSqrt32_1 {
    #3 off=0
    (__M_DMh.3 var=4) st_def ()  <6>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (softfloat_approxRecipSqrt_1k0s.18 var=19) source ()  <29>;
    (softfloat_approxRecipSqrt_1k1s.20 var=21) source ()  <31>;
    (__ptr_softfloat_approxRecipSqrt_1k0s.22 var=24) const ()  <33>;
    (__ptr_softfloat_approxRecipSqrt_1k1s.24 var=26) const ()  <35>;
    (__la.26 var=27 stl=X off=1) inp ()  <37>;
    (__la.27 var=27) deassign (__la.26)  <38>;
    (oddExpA.30 var=29 stl=X off=11) inp ()  <41>;
    (oddExpA.31 var=29) deassign (oddExpA.30)  <42>;
    (a.33 var=30 stl=X off=12) inp ()  <44>;
    (a.34 var=30) deassign (a.33)  <45>;
    (__rd___sp.36 var=22) rd_res_reg (__R_SP.11 __sp.17)  <47>;
    (__ct_0S0.37 var=31) const ()  <48>;
    (__tmp.39 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0S0.37)  <50>;
    (__R_SP.40 var=12 __sp.41 var=18) wr_res_reg (__tmp.39 __sp.17)  <51>;
    (__ct_27.56 var=41) const ()  <67>;
    (__tmp.58 var=43) __uint__rs___uint___sint (a.34 __ct_27.56)  <69>;
    (__ct_14.59 var=44) const ()  <70>;
    (__tmp.61 var=46) __uint__ad___uint___uint (__tmp.58 __ct_14.59)  <72>;
    (__tmp.62 var=47) __uint__pl___uint___uint (__tmp.61 oddExpA.31)  <73>;
    (__ct_12.64 var=49) const ()  <75>;
    (__tmp.66 var=51) __uint__rs___uint___sint (a.34 __ct_12.64)  <77>;
    (eps.67 var=35) __ushort___ushort___uint (__tmp.66)  <78>;
    (__tmp.70 var=55) __sint__ls___sint___sint (__tmp.62 __ct_1.116)  <81>;
    (__tmp.71 var=56) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_approxRecipSqrt_1k0s.22 __tmp.70)  <82>;
    (__fch_softfloat_approxRecipSqrt_1k0s.72 var=57) load (__M_DMh.3 __tmp.71 softfloat_approxRecipSqrt_1k0s.18)  <83>;
    (__tmp.77 var=62) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_approxRecipSqrt_1k1s.24 __tmp.70)  <88>;
    (__fch_softfloat_approxRecipSqrt_1k1s.78 var=63) load (__M_DMh.3 __tmp.77 softfloat_approxRecipSqrt_1k1s.20)  <89>;
    (__tmp.81 var=66) __uint__ml___uint___uint (__fch_softfloat_approxRecipSqrt_1k1s.78 eps.67)  <92>;
    (__ct_20.82 var=67) const ()  <93>;
    (__tmp.84 var=69) __uint__rs___uint___sint (__tmp.81 __ct_20.82)  <95>;
    (__tmp.85 var=70) __uint__mi___uint___uint (__fch_softfloat_approxRecipSqrt_1k0s.72 __tmp.84)  <96>;
    (r0.86 var=36) __ushort___ushort___uint (__tmp.85)  <97>;
    (ESqrR0.89 var=37) __uint__ml___uint___uint (r0.86 r0.86)  <100>;
    (__ct_0.90 var=75) const ()  <101>;
    (__ct_1.116 var=79) const ()  <128>;
    (__tmp.750 var=77) bool__ne___uint___uint (oddExpA.31 __ct_0.90)  <1129>;
    (__trgt.754 var=392) const ()  <1153>;
    () void_br_bool_t13s_s2 (__tmp.750 __trgt.754)  <1154>;
    (__either.755 var=391) undefined ()  <1155>;
    if {
        {
            () if_expr (__either.755)  <127>;
        } #5
        {
        } #7 off=2
        {
            (ESqrR0.118 var=37) __uint__ls___uint___sint (ESqrR0.89 __ct_1.116)  <130>;
            (__trgt.756 var=393) const ()  <1156>;
            () void_j_t21s_s2 (__trgt.756)  <1157>;
        } #6 off=1
        {
            (ESqrR0.119 var=37) merge (ESqrR0.89 ESqrR0.118)  <131>;
        } #8
    } #4
    #522 off=3
    (__ct_23.123 var=85) const ()  <135>;
    (__ct_16.129 var=91) const ()  <141>;
    (__tmp.131 var=93) __uint__ls___uint___sint (r0.86 __ct_16.129)  <143>;
    (__ct_25.136 var=98) const ()  <148>;
    (__tmp.151 var=113) __uint__rs___uint___sint (__apl_r_low.395 __ct_1.116)  <163>;
    (__ct_3.152 var=114) const ()  <164>;
    (__tmp.154 var=116) __uint__rs___uint___sint (__apl_r_low.395 __ct_3.152)  <166>;
    (__tmp.155 var=117) __uint__pl___uint___uint (__tmp.151 __tmp.154)  <167>;
    (__tmp.159 var=121) __uint__ls___uint___sint (r0.86 __ct_14.59)  <171>;
    (__tmp.160 var=122) __uint__mi___uint___uint (__tmp.155 __tmp.159)  <172>;
    (__ct_2147483648.169 var=131) const ()  <181>;
    (__tmp.171 var=133) __uint__ad___uint___uint (__apl_r_low.568 __ct_2147483648.169)  <183>;
    (__apl_p1lo.249 var=153) __uint_mul___uint___uint (ESqrR0.119 a.34)  <337>;
    (__apl_p1hi.254 var=154) __uint_mulhu___uint___uint (ESqrR0.119 a.34)  <344>;
    (__apl_carries.291 var=192) __uint__ls___uint___sint (__apl_p1hi.254 __ct_9.591)  <391>;
    (__tmp.292 var=197) __uint__rs___uint___sint (__apl_p1lo.249 __ct_23.123)  <392>;
    (__apl_r_low.293 var=198) __uint__or___uint___uint (__tmp.292 __apl_carries.291)  <393>;
    (__ct_4294967295.310 var=210) const ()  <414>;
    (sigma0.311 var=38) __uint__er___uint___uint (__apl_r_low.293 __ct_4294967295.310)  <415>;
    (__apl_p1lo.324 var=153) __uint_mul___uint___uint (r0.86 sigma0.311)  <433>;
    (__apl_p1hi.329 var=154) __uint_mulhu___uint___uint (r0.86 sigma0.311)  <440>;
    (__apl_carries.366 var=192) __uint__ls___uint___sint (__apl_p1hi.329 __ct_7.593)  <487>;
    (__tmp.367 var=197) __uint__rs___uint___sint (__apl_p1lo.324 __ct_25.136)  <488>;
    (__apl_r_low.368 var=198) __uint__or___uint___uint (__tmp.367 __apl_carries.366)  <489>;
    (__apl_r_low.395 var=235) __uint_add___uint___uint (__tmp.131 __apl_r_low.368)  <522>;
    (__apl_p1hi.431 var=154) __uint_mulhu___uint___uint (sigma0.311 sigma0.311)  <566>;
    (__apl_p1hi.502 var=154) __uint_mulhu___uint___uint (__tmp.160 __apl_p1hi.431)  <655>;
    (__apl_r_low.543 var=198) __uint__rs___uint___sint (__apl_p1hi.502 __ct_16.129)  <706>;
    (__apl_r_low.568 var=235) __uint_add___uint___uint (__apl_r_low.395 __apl_r_low.543)  <737>;
    (__ct_9.591 var=288) const ()  <787>;
    (__ct_7.593 var=290) const ()  <791>;
    (__tmp.751 var=136) bool__ne___uint___uint (__tmp.171 __ct_0.90)  <1130>;
    (__trgt.757 var=394) const ()  <1158>;
    () void_br_bool_t13s_s2 (__tmp.751 __trgt.757)  <1159>;
    (__either.758 var=391) undefined ()  <1160>;
    if {
        {
            () if_expr (__either.758)  <210>;
        } #11
        {
        } #13 off=5
        {
            (__trgt.759 var=395) const ()  <1161>;
            () void_j_t21s_s2 (__trgt.759)  <1162>;
        } #12 off=4
        {
            (r.200 var=39) merge (__apl_r_low.568 __ct_2147483648.169)  <213>;
        } #14
    } #10
    #16 off=6 nxt=-2
    (__rd___sp.201 var=22) rd_res_reg (__R_SP.11 __sp.41)  <214>;
    (__ct_0s0.202 var=140) const ()  <215>;
    (__tmp.204 var=142) __Pvoid__pl___Pvoid___sint (__rd___sp.201 __ct_0s0.202)  <217>;
    (__R_SP.205 var=12 __sp.206 var=18) wr_res_reg (__tmp.204 __sp.41)  <218>;
    () void___rts_jr_w32 (__la.27)  <219>;
    (r.207 var=39 stl=X off=10) assign (r.200)  <220>;
    () out (r.207)  <221>;
    () sink (__sp.206)  <227>;
} #0
0 : 'SoftFloat-3e/source/s_approxRecipSqrt32_1.c';
----------
0 : (0,45:0,0);
3 : (0,60:9,11);
4 : (0,60:4,11);
6 : (0,60:28,12);
7 : (0,60:4,14);
10 : (0,67:4,21);
12 : (0,67:32,22);
13 : (0,67:4,24);
16 : (0,68:4,27);
522 : (0,67:9,21);
----------
33 : (0,56:9,0);
35 : (0,57:17,0);
47 : (0,45:9,0);
48 : (0,45:9,0);
50 : (0,45:9,0);
51 : (0,45:9,0);
67 : (0,54:16,0);
69 : (0,54:14,7);
70 : (0,54:19,0);
72 : (0,54:19,7);
73 : (0,54:26,7);
75 : (0,55:25,0);
77 : (0,55:23,8);
78 : (0,55:10,8);
81 : (0,56:40,9);
82 : (0,56:39,9);
83 : (0,56:39,9);
88 : (0,57:47,9);
89 : (0,57:47,9);
92 : (0,57:55,9);
93 : (0,58:22,0);
95 : (0,58:20,9);
96 : (0,57:13,9);
97 : (0,56:7,9);
100 : (0,59:32,10);
101 : (0,60:9,0);
127 : (0,60:4,11);
128 : (0,60:32,0);
130 : (0,60:28,12);
131 : (0,60:4,16);
135 : (0,61:72,0);
141 : (0,62:29,0);
143 : (0,62:27,18);
148 : (0,62:67,0);
163 : (0,64:24,20);
164 : (0,64:35,0);
166 : (0,64:33,20);
167 : (0,64:29,20);
171 : (0,64:59,20);
172 : (0,64:38,20);
181 : (0,67:14,0);
183 : (0,67:14,21);
210 : (0,67:4,21);
213 : (0,67:4,26);
214 : (0,68:4,0);
215 : (0,68:4,0);
217 : (0,68:4,0);
218 : (0,68:4,27);
219 : (0,68:4,27);
220 : (0,68:11,0);
337 : (0,61:50,17);
344 : (0,61:50,17);
391 : (0,61:70,17);
392 : (0,61:70,17);
393 : (0,61:70,17);
414 : (0,61:13,0);
415 : (0,61:13,17);
433 : (0,62:40,18);
440 : (0,62:40,18);
487 : (0,62:65,18);
488 : (0,62:65,18);
489 : (0,62:65,18);
522 : (0,62:33,18);
566 : (0,63:40,19);
655 : (0,65:14,20);
706 : (0,66:13,20);
737 : (0,64:6,20);
787 : (0,61:70,0);
791 : (0,62:65,0);
1129 : (0,60:9,11);
1130 : (0,67:9,21);
1154 : (0,60:4,11);
1159 : (0,67:4,21);

