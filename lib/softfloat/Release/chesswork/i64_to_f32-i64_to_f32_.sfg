
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:57:49 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/i64_to_f32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t i64_to_f32(int64_t)
Fi64_to_f32 : user_defined, called {
    fnm : "i64_to_f32" 'float32_t i64_to_f32(long long)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
!!  uint_fast8_t softfloat_countLeadingZeros64(uint64_t)
Fsoftfloat_countLeadingZeros64 : user_defined, called {
    fnm : "softfloat_countLeadingZeros64" 'uint_fast8_t softfloat_countLeadingZeros64(uint64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : i64_to_f32 typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   22 : __rt typ=w32 bnd=p tref=float32_t___1
   24 : a_low typ=w32 bnd=m tref=__uint__
   25 : a_high typ=w32 bnd=m tref=__uint__
   26 : __ct_m4S0 typ=w32 val=0S0 bnd=m
   28 : __tmp typ=w32 bnd=m
   35 : shiftDist typ=w32 bnd=m tref=int_fast8_t__
   36 : sig typ=w32 bnd=m tref=uint_fast32_t__
   46 : __tmp_low typ=w32 bnd=m tref=__uint__
   47 : __tmp_high typ=w32 bnd=m tref=__uint__
   50 : softfloat_countLeadingZeros64 typ=t21s_s2 val=0r bnd=m
   51 : __link typ=w32 bnd=m
   52 : __tmp typ=w32 bnd=m
   55 : __tmp typ=w32 bnd=m
   57 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   59 : __tmp typ=bool bnd=m
   67 : __ct_149 typ=w32 val=149f bnd=m
   69 : __tmp typ=w32 bnd=m
   71 : __ct_23 typ=w32 val=23f bnd=m
   73 : __tmp typ=w32 bnd=m
   74 : __tmp typ=w32 bnd=m
   76 : __tmp typ=w32 bnd=m
   77 : __tmp typ=w32 bnd=m
   80 : __tmp typ=w32 bnd=m
   88 : __ct_7 typ=w32 val=7f bnd=m
   93 : __tmp typ=bool bnd=m
   96 : __tmp typ=w32 bnd=m
  100 : __tmp typ=w32 bnd=m
  104 : __tmp typ=w32 bnd=m
  105 : __ct_156 typ=w32 val=156f bnd=m
  107 : __tmp typ=w32 bnd=m
  110 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
  112 : __tmp typ=w32 bnd=m
  113 : __ct_4s0 typ=w32 val=0s0 bnd=m
  115 : __tmp typ=w32 bnd=m
  128 : __ct_4294967256 typ=w32 val=-40f bnd=m
  136 : __tmp typ=bool bnd=m
  154 : __apl_r_low typ=w32 bnd=m tref=__uint__
  155 : __apl_r_high typ=w32 bnd=m tref=__uint__
  196 : __tmpd typ=w32 bnd=m
  197 : __tmp typ=bool bnd=m
  218 : __rt_low typ=w32 bnd=m tref=__uint__
  223 : __apl_ff typ=w32 bnd=m tref=__sint__
  224 : __apl_carries typ=w32 bnd=m tref=__uint__
  226 : __tmp typ=bool bnd=m
  227 : __tmp typ=bool bnd=m
  228 : __tmp typ=w32 bnd=m
  229 : __tmp typ=w32 bnd=m
  230 : __apl_r_low typ=w32 bnd=m tref=__uint__
  233 : __ct_m32 typ=w32 val=-32f bnd=m
  234 : __tmp_low typ=w32 bnd=m
  240 : __rt_low typ=w32 bnd=m tref=__uint__
  241 : __rt_high typ=w32 bnd=m tref=__uint__
  246 : __apl_carries typ=w32 bnd=m tref=__uint__
  251 : __apl_r_low typ=w32 bnd=m tref=__uint__
  253 : __apl_r_high typ=w32 bnd=m tref=__uint__
  256 : __tmp_low typ=w32 bnd=m
  258 : __tmp_high typ=w32 bnd=m
  271 : __apl_r_low typ=w32 bnd=m tref=__uint__
  272 : __apl_r_high typ=w32 bnd=m tref=__uint__
  291 : __tmp_low typ=w32 bnd=m
  293 : __tmp_high typ=w32 bnd=m
  310 : __tmp_low typ=w32 bnd=m
  322 : __ct_1 typ=w32 val=1f bnd=m
  323 : __ct_4294967295 typ=w32 val=-1f bnd=m
  326 : __tmpd typ=w32 bnd=m
  334 : __tmp typ=w32 bnd=m
  379 : __tmp_low typ=w32 bnd=m
  381 : __tmp typ=w32 bnd=m
  382 : __tmp typ=w32 bnd=m
  385 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  426 : __tmp typ=t20s_rp12 bnd=m
  429 : __either typ=bool bnd=m
  430 : __trgt typ=t13s_s2 val=0j bnd=m
  431 : __trgt typ=t21s_s2 val=0j bnd=m
  432 : __trgt typ=t13s_s2 val=0j bnd=m
  433 : __trgt typ=t21s_s2 val=0j bnd=m
  434 : __trgt typ=t13s_s2 val=0j bnd=m
  435 : __trgt typ=t21s_s2 val=0j bnd=m
  436 : __trgt typ=t13s_s2 val=0j bnd=m
  437 : __trgt typ=t21s_s2 val=0j bnd=m
  438 : __trgt typ=t13s_s2 val=0j bnd=m
  439 : __trgt typ=t21s_s2 val=0j bnd=m
  440 : __trgt typ=t13s_s2 val=0j bnd=m
  441 : __trgt typ=t21s_s2 val=0j bnd=m
  442 : __trgt typ=t13s_s2 val=0j bnd=m
  443 : __trgt typ=t21s_s2 val=0j bnd=m
  444 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fi64_to_f32 {
    #53 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a_low.25 var=24 stl=X off=11) inp ()  <36>;
    (a_low.26 var=24) deassign (a_low.25)  <37>;
    (a_high.29 var=25 stl=X off=12) inp ()  <40>;
    (a_high.30 var=25) deassign (a_high.29)  <41>;
    (__rd___sp.33 var=20) rd_res_reg (__R_SP.11 __sp.17)  <44>;
    (__ct_m4S0.34 var=26) const ()  <45>;
    (__tmp.36 var=28) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_m4S0.34)  <47>;
    (__R_SP.37 var=12 __sp.38 var=18) wr_res_reg (__tmp.36 __sp.17)  <48>;
    (__rd___sp.39 var=20) rd_res_reg (__R_SP.11 __sp.38)  <50>;
    (__ct_0.92 var=57) const ()  <104>;
    (__tmp.779 var=136) bool__ge___sint___sint (a_high.30 __ct_0.92)  <1220>;
    (__trgt.817 var=430) const ()  <1290>;
    () void_br_bool_t13s_s2 (__tmp.779 __trgt.817)  <1291>;
    (__either.818 var=429) undefined ()  <1292>;
    if {
        {
            () if_expr (__either.818)  <81>;
        } #5
        {
        } #7 off=2
        {
            (__apl_r_low.272 var=154) __uint_sub___uint___uint (__ct_0.92 a_low.26)  <357>;
            (__apl_r_high.273 var=155) __uint_sub___uint___uint (__ct_0.92 a_high.30)  <358>;
            (__apl_r_high.276 var=155) __uint__mi___uint___uint (__apl_r_high.273 __tmp.675)  <361>;
            (__tmp.675 var=381) __sint_sne0___sint (a_low.26)  <1038>;
            (__trgt.819 var=431) const ()  <1293>;
            () void_j_t21s_s2 (__trgt.819)  <1294>;
        } #456 off=1
        {
            (__tmp_low.240 var=46) merge (a_low.26 __apl_r_low.272)  <300>;
            (__tmp_high.243 var=47) merge (a_high.30 __apl_r_high.276)  <303>;
        } #8
    } #4
    #9 off=3
    (softfloat_countLeadingZeros64.82 var=50) const ()  <94>;
    (__link.83 var=51) w32_jal_t21s_s2 (softfloat_countLeadingZeros64.82)  <95>;
    call {
        (__tmp_low.77 var=46 stl=X off=11) assign (__tmp_low.240)  <89>;
        (__tmp_high.79 var=47 stl=X off=12) assign (__tmp_high.243)  <91>;
        (__link.84 var=51 stl=X off=1) assign (__link.83)  <96>;
        (__tmp.85 var=52 stl=X off=10) Fsoftfloat_countLeadingZeros64 (__link.84 __tmp_low.77 __tmp_high.79)  <97>;
        (__tmp.86 var=52) deassign (__tmp.85)  <98>;
    } #10 off=4
    #434 off=5
    (__tmp.90 var=55) __uint__pl___uint___uint (__tmp.86 __ct_4294967256.245)  <102>;
    (__tmp.94 var=59) bool__ge___sint___sint (__tmp.90 __ct_0.92)  <106>;
    (__ct_4s0.206 var=113) const ()  <220>;
    (__ct_4294967256.245 var=128) const ()  <305>;
    (__trgt.838 var=444) const ()  <1325>;
    () void_br_bool_t13s_s2 (__tmp.94 __trgt.838)  <1326>;
    (__either.839 var=429) undefined ()  <1327>;
    if {
        {
            () if_expr (__either.839)  <122>;
        } #13
        {
            #82 off=21
            (__tmpd.320 var=196) __uint__or___uint___uint (a_high.30 a_low.26)  <452>;
            (__tmp.780 var=197) bool__eq___uint___uint (__tmpd.320 __ct_0.92)  <1221>;
            (__trgt.823 var=434) const ()  <1300>;
            () void_br_bool_t13s_s2 (__tmp.780 __trgt.823)  <1301>;
            (__either.824 var=429) undefined ()  <1302>;
            if {
                {
                    () if_expr (__either.824)  <141>;
                } #17
                {
                } #19 off=26
                {
                    #724 off=22
                    (__ct_2147483648.653 var=385) const ()  <1007>;
                    (__trgt.820 var=432) const ()  <1295>;
                    () void_br_bool_t13s_s2 (__tmp.840 __trgt.820)  <1296>;
                    (__either.821 var=429) undefined ()  <1297>;
                    (__tmp.840 var=136) bool__lt___sint___sint (a_high.30 __ct_0.92)  <1328>;
                    if {
                        {
                            () if_expr (__either.821)  <933>;
                        } #426
                        {
                        } #427 off=24
                        {
                            (__trgt.822 var=433) const ()  <1298>;
                            () void_j_t21s_s2 (__trgt.822)  <1299>;
                        } #428 off=23
                        {
                            (__tmp.654 var=426) merge (__ct_2147483648.653 __ct_0.92)  <1009>;
                        } #429
                    } #425
                    #421 off=25
                    (__ct_149.132 var=67) const ()  <146>;
                    (__tmp.134 var=69) __sint__mi___sint___sint (__ct_149.132 __tmp.90)  <148>;
                    (__ct_23.136 var=71) const ()  <150>;
                    (__tmp.138 var=73) __uint__ls___uint___sint (__tmp.134 __ct_23.136)  <152>;
                    (__tmp.139 var=74) __uint__pl___uint___uint (__tmp.654 __tmp.138)  <153>;
                    (__tmp.141 var=76) __uint__ls___uint___sint (__tmp_low.240 __tmp.90)  <155>;
                    (__tmp.142 var=77) __uint__pl___uint___uint (__tmp.139 __tmp.141)  <156>;
                    (__trgt.825 var=435) const ()  <1303>;
                    () void_j_t21s_s2 (__trgt.825)  <1304>;
                } #18
                {
                    (__tmp.145 var=80) merge (__ct_0.92 __tmp.142)  <159>;
                } #20
            } #16
        } #14
        {
            #23 off=6
            (__ct_7.155 var=88) const ()  <168>;
            (shiftDist.157 var=35) __sint__pl___sint___sint (__tmp.90 __ct_7.155)  <170>;
            (__tmp.160 var=93) bool__lt___sint___sint (shiftDist.157 __ct_0.92)  <173>;
            (__trgt.835 var=442) const ()  <1320>;
            () void_br_bool_t13s_s2 (__tmp.160 __trgt.835)  <1321>;
            (__either.836 var=429) undefined ()  <1322>;
            if {
                {
                    () if_expr (__either.836)  <189>;
                } #25
                {
                    #136 off=8
                    (__tmp.178 var=96) __sint__mi___sint___sint (__ct_0.92 shiftDist.157)  <192>;
                    (__tmp.347 var=226) bool__eq___sint___sint (__tmp.178 __ct_0.92)  <490>;
                    (__ct_m32.348 var=233) const ()  <491>;
                    (__apl_ff.350 var=223) __sint__pl___sint___sint (__tmp.178 __ct_m32.348)  <494>;
                    (__tmp.352 var=228) __sint__mi___sint___sint (__ct_0.92 __apl_ff.350)  <497>;
                    (__ct_1.501 var=322) const ()  <698>;
                    (__trgt.832 var=440) const ()  <1315>;
                    () void_br_bool_t13s_s2 (__tmp.347 __trgt.832)  <1316>;
                    (__either.833 var=429) undefined ()  <1317>;
                    if {
                        {
                            () if_expr (__either.833)  <527>;
                        } #160
                        {
                        } #712 off=16
                        {
                            #725 off=9
                            (__trgt.826 var=436) const ()  <1305>;
                            () void_br_bool_t13s_s2 (__tmp.841 __trgt.826)  <1306>;
                            (__either.827 var=429) undefined ()  <1307>;
                            (__tmp.841 var=227) bool__lt___sint___sint (__apl_ff.350 __ct_0.92)  <1329>;
                            if {
                                {
                                    () if_expr (__either.827)  <496>;
                                } #143
                                {
                                    (__apl_carries.353 var=224) __uint__ls___uint___sint (__tmp_high.243 __tmp.352)  <498>;
                                    (__tmp.354 var=229) __uint__rs___uint___sint (__tmp_low.240 __tmp.178)  <499>;
                                    (__apl_r_low.355 var=230) __uint__or___uint___uint (__tmp.354 __apl_carries.353)  <500>;
                                } #144 off=11
                                {
                                    (__apl_r_low.357 var=230) __uint__rs___uint___sint (__tmp_high.243 __apl_ff.350)  <502>;
                                    (__trgt.828 var=437) const ()  <1308>;
                                    () void_j_t21s_s2 (__trgt.828)  <1309>;
                                } #145 off=10
                                {
                                    (__rt_low.358 var=218) merge (__apl_r_low.355 __apl_r_low.357)  <503>;
                                } #146
                            } #142
                            #727 off=12
                            (__trgt.829 var=438) const ()  <1310>;
                            () void_br_bool_t13s_s2 (__tmp.842 __trgt.829)  <1311>;
                            (__either.830 var=429) undefined ()  <1312>;
                            (__tmp.842 var=227) bool__lt___sint___sint (__apl_ff.350 __ct_0.92)  <1330>;
                            if {
                                {
                                    () if_expr (__either.830)  <530>;
                                } #165
                                {
                                    (__apl_carries.381 var=246) __uint__rs___uint___sint (__ct_1.501 __tmp.352)  <532>;
                                    (__apl_r_low.382 var=251) __uint__ls___uint___sint (__ct_1.501 __tmp.178)  <533>;
                                } #166 off=14
                                {
                                    (__apl_r_high.385 var=253) __uint__ls___uint___sint (__ct_1.501 __apl_ff.350)  <536>;
                                    (__trgt.831 var=439) const ()  <1313>;
                                    () void_j_t21s_s2 (__trgt.831)  <1314>;
                                } #167 off=13
                                {
                                    (__rt_low.386 var=240) merge (__apl_r_low.382 __ct_0.92)  <537>;
                                    (__rt_high.387 var=241) merge (__apl_carries.381 __apl_r_high.385)  <538>;
                                } #168
                            } #164
                            #728 off=15
                            (__trgt.834 var=441) const ()  <1318>;
                            () void_j_t21s_s2 (__trgt.834)  <1319>;
                        } #714
                        {
                            (__tmp_low.360 var=234) merge (__tmp_low.240 __rt_low.358)  <505>;
                            (__tmp_low.388 var=256) merge (__ct_1.501 __rt_low.386)  <539>;
                            (__tmp_high.389 var=258) merge (__ct_0.92 __rt_high.387)  <540>;
                        } #169
                    } #159
                    #699 off=17
                    (__apl_r_low.410 var=271) __uint_add___uint___uint (__tmp_low.388 __ct_4294967295.502)  <567>;
                    (__apl_r_high.411 var=272) __uint_add___uint___uint (__tmp_high.389 __ct_4294967295.502)  <568>;
                    (__apl_r_high.414 var=272) __uint__pl___uint___uint (__apl_r_high.411 __tmp.680)  <571>;
                    (__tmp_low.434 var=291) __uint__ad___uint___uint (__tmp_low.240 __apl_r_low.410)  <595>;
                    (__tmp_high.435 var=293) __uint__ad___uint___uint (__tmp_high.243 __apl_r_high.414)  <596>;
                    (__tmp_low.464 var=310) __uint__or___uint___uint (__tmp_low.360 __tmp.551)  <633>;
                    (__ct_4294967295.502 var=323) const ()  <700>;
                    (__tmpd.505 var=326) __uint__or___uint___uint (__tmp_high.435 __tmp_low.434)  <721>;
                    (__tmp.551 var=334) __sint_sne0___sint (__tmpd.505)  <804>;
                    (__tmp.680 var=382) __sint_slt___uint___uint (__apl_r_low.410 __tmp_low.388)  <1046>;
                } #93
                {
                    (__tmp.182 var=100) __uint__ls___uint___sint (__tmp_low.240 shiftDist.157)  <196>;
                    (__trgt.837 var=443) const ()  <1323>;
                    () void_j_t21s_s2 (__trgt.837)  <1324>;
                } #443 off=7
                {
                    (__tmp_low.716 var=379) merge (__tmp_low.464 __tmp.182)  <1097>;
                } #28
            } #24
            #718 off=18
            (__ct_156.188 var=105) const ()  <202>;
            (__tmp.190 var=107) __sint__mi___sint___sint (__ct_156.188 shiftDist.157)  <204>;
            (softfloat_roundPackToF32.195 var=110) const ()  <209>;
            (__tmp.325 var=104) __sint_slt___sint___sint (a_high.30 __ct_0.92)  <458>;
            (__tmp.812 var=115) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_4s0.206)  <1282>;
            (__R_SP.813 var=12 __sp.814 var=18) wr_res_reg (__tmp.812 __sp.38)  <1283>;
            () void_j_t21s_s2 (softfloat_roundPackToF32.195)  <1288>;
            call {
                (__tmp.187 var=104 stl=X off=11) assign (__tmp.325)  <201>;
                (__tmp.191 var=107 stl=X off=12) assign (__tmp.190)  <205>;
                (sig.192 var=36 stl=X off=13) assign (__tmp_low.716)  <206>;
                (__la.197 var=21 stl=X off=1) assign (__la.21)  <211>;
                (__tmp.198 var=112 stl=X off=10) Fsoftfloat_roundPackToF32 (__la.197 __tmp.187 __tmp.191 sig.192)  <212>;
                (__tmp.199 var=112) deassign (__tmp.198)  <213>;
            } #30 off=19
            #719 off=20 nxt=-2
            (__rt.815 var=22 stl=X off=10) assign (__tmp.199)  <1285>;
            () out (__rt.815)  <1286>;
            () sink (__sp.814)  <1287>;
            (__rt.816 var=22) never ()  <1289>;
        } #22
        {
            (__rt.203 var=22) merge (__tmp.145 __rt.816)  <217>;
        } #31
    } #12
    #33 off=28 nxt=-2
    (__tmp.208 var=115) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_4s0.206)  <222>;
    (__R_SP.209 var=12 __sp.210 var=18) wr_res_reg (__tmp.208 __sp.38)  <223>;
    () void___rts_jr_w32 (__la.21)  <224>;
    (__rt.211 var=22 stl=X off=10) assign (__rt.203)  <225>;
    () out (__rt.211)  <226>;
    () sink (__sp.210)  <234>;
} #0
0 : 'SoftFloat-3e/source/i64_to_f32.c';
----------
0 : (0,43:0,0);
4 : (0,52:16,7);
7 : (0,52:39,9);
9 : (0,53:47,12);
10 : (0,53:16,12);
12 : (0,54:4,13);
14 : (0,66:8,14);
16 : (0,56:14,14);
18 : (0,56:79,15);
19 : (0,56:14,16);
22 : (0,59:8,23);
23 : (0,63:23,24);
24 : (0,64:16,24);
30 : (0,66:15,29);
33 : (0,54:4,34);
53 : (0,51:14,6);
82 : (0,56:14,14);
93 : (0,64:18,25);
136 : (0,64:18,25);
142 : (0,64:18,25);
143 : (0,64:18,25);
144 : (0,64:18,25);
145 : (0,64:18,25);
146 : (0,64:18,25);
159 : (0,64:18,25);
160 : (0,64:18,25);
164 : (0,64:18,25);
165 : (0,64:18,25);
166 : (0,64:18,25);
167 : (0,64:18,25);
168 : (0,64:18,25);
169 : (0,64:18,25);
421 : (0,56:79,15);
425 : (0,56:18,15);
426 : (0,56:18,15);
427 : (0,56:18,15);
428 : (0,56:18,15);
429 : (0,56:18,15);
434 : (0,54:11,13);
456 : (0,52:18,8);
699 : (0,64:18,25);
718 : (0,54:4,34);
719 : (0,54:4,34);
----------
44 : (0,43:10,0);
45 : (0,43:10,0);
47 : (0,43:10,0);
48 : (0,43:10,0);
50 : (0,48:19,0);
81 : (0,52:16,7);
89 : (0,53:47,0);
91 : (0,53:47,0);
95 : (0,53:16,12);
96 : (0,53:16,0);
97 : (0,53:16,12);
102 : (0,53:54,12);
104 : (0,54:11,0);
106 : (0,54:11,13);
122 : (0,54:4,13);
141 : (0,56:14,14);
146 : (0,56:61,0);
148 : (0,56:61,15);
150 : (0,56:75,0);
152 : (0,56:73,15);
153 : (0,56:41,15);
155 : (0,56:102,15);
156 : (0,56:79,15);
159 : (0,56:14,17);
168 : (0,61:18,0);
170 : (0,61:18,23);
173 : (0,63:23,24);
189 : (0,64:16,24);
192 : (0,64:56,25);
196 : (0,65:38,26);
201 : (0,66:41,0);
202 : (0,66:52,0);
204 : (0,66:52,29);
205 : (0,66:52,0);
206 : (0,66:65,0);
211 : (0,66:15,0);
212 : (0,66:15,29);
217 : (0,54:4,33);
220 : (0,54:4,0);
222 : (0,54:4,0);
223 : (0,54:4,34);
224 : (0,54:4,34);
225 : (0,54:4,0);
305 : (0,53:54,0);
357 : (0,52:18,8);
358 : (0,52:18,8);
361 : (0,52:18,8);
452 : (0,56:14,14);
490 : (0,64:18,25);
491 : (0,64:18,0);
494 : (0,64:18,25);
496 : (0,64:18,25);
497 : (0,64:18,25);
498 : (0,64:18,25);
499 : (0,64:18,25);
500 : (0,64:18,25);
502 : (0,64:18,25);
503 : (0,64:18,25);
505 : (0,64:18,25);
527 : (0,64:18,25);
530 : (0,64:18,25);
532 : (0,64:18,25);
533 : (0,64:18,25);
536 : (0,64:18,25);
537 : (0,64:18,25);
538 : (0,64:18,25);
539 : (0,64:18,25);
540 : (0,64:18,25);
567 : (0,64:18,25);
568 : (0,64:18,25);
571 : (0,64:18,25);
595 : (0,64:18,25);
596 : (0,64:18,25);
633 : (0,64:18,25);
698 : (0,64:18,0);
700 : (0,64:18,0);
721 : (0,64:18,25);
804 : (0,64:18,25);
933 : (0,56:18,15);
1007 : (0,56:35,0);
1009 : (0,56:18,15);
1038 : (0,52:18,8);
1046 : (0,64:18,25);
1220 : (0,51:14,6);
1221 : (0,56:14,14);
1282 : (0,54:4,0);
1283 : (0,54:4,34);
1285 : (0,54:4,0);
1288 : (0,66:15,29);
1291 : (0,52:16,7);
1296 : (0,56:18,15);
1301 : (0,56:14,14);
1306 : (0,64:18,25);
1311 : (0,64:18,25);
1316 : (0,64:18,25);
1321 : (0,64:16,24);
1326 : (0,54:4,13);

