
// File generated by noodle version U-2022.12#33f3808fcb#221128, Sat Mar 16 14:39:41 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/i64_to_f64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t i64_to_f64(int64_t)
Fi64_to_f64 : user_defined, called {
    fnm : "i64_to_f64" 'float64_t i64_to_f64(long long)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
!!  float64_t softfloat_normRoundPackToF64(bool, int_fast16_t, uint_fast64_t)
Fsoftfloat_normRoundPackToF64 : user_defined, called {
    fnm : "softfloat_normRoundPackToF64" 'float64_t softfloat_normRoundPackToF64(bool, int_fast16_t, uint_fast64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : i64_to_f64 typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   23 : __rt_low typ=w32 bnd=m tref=__uint__
   24 : __rt_high typ=w32 bnd=m tref=__uint__
   26 : a_low typ=w32 bnd=m tref=__uint__
   27 : a_high typ=w32 bnd=m tref=__uint__
   28 : __ct_m8S0 typ=w32 val=0S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   74 : __tmp typ=w32 bnd=m
   75 : __ct_1084 typ=w32 val=1084f bnd=m
   76 : __ct typ=w32 bnd=m
   77 : __tmp_low typ=w32 bnd=m tref=__uint__
   78 : __tmp_high typ=w32 bnd=m tref=__uint__
   81 : softfloat_normRoundPackToF64 typ=t21s_s2 val=0r bnd=m
   84 : __tmp typ=w32 bnd=m
   85 : __tmp typ=w32 bnd=m
   86 : __ct_8s0 typ=w32 val=0s0 bnd=m
   88 : __tmp typ=w32 bnd=m
   98 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   99 : __ct_3286237184 typ=t20s_rp12 val=-246272f bnd=m
  109 : __tmp typ=bool bnd=m
  126 : __tmp_high typ=w32 bnd=m
  141 : __apl_r_low typ=w32 bnd=m tref=__uint__
  142 : __apl_r_high typ=w32 bnd=m tref=__uint__
  169 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  172 : __tmpd typ=w32 bnd=m
  173 : __tmp typ=bool bnd=m
  198 : __tmp typ=w32 bnd=m
  218 : __tmp_high typ=t20s_rp12 bnd=m
  221 : __either typ=bool bnd=m
  222 : __trgt typ=t13s_s2 val=0j bnd=m
  223 : __trgt typ=t21s_s2 val=0j bnd=m
  224 : __trgt typ=t13s_s2 val=0j bnd=m
  225 : __trgt typ=t21s_s2 val=0j bnd=m
  226 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fi64_to_f64 {
    #47 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a_low.29 var=26 stl=X off=12) inp ()  <40>;
    (a_low.30 var=26) deassign (a_low.29)  <41>;
    (a_high.33 var=27 stl=X off=13) inp ()  <44>;
    (a_high.34 var=27) deassign (a_high.33)  <45>;
    (__rd___sp.37 var=20) rd_res_reg (__R_SP.11 __sp.17)  <48>;
    (__ct_m8S0.38 var=28) const ()  <49>;
    (__tmp.40 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_m8S0.38)  <51>;
    (__R_SP.41 var=12 __sp.42 var=18) wr_res_reg (__tmp.40 __sp.17)  <52>;
    (__rd___sp.43 var=20) rd_res_reg (__R_SP.11 __sp.42)  <54>;
    (__ct_8s0.163 var=86) const ()  <174>;
    (__ct_0.200 var=98) const ()  <250>;
    (__tmp_high.242 var=126) __uint__ad___uint___uint (a_high.34 __ct_2147483647.296)  <313>;
    (__ct_2147483647.296 var=169) const ()  <393>;
    (__tmpd.299 var=172) __uint__or___uint___uint (__tmp_high.242 a_low.30)  <409>;
    (__tmp.300 var=173) bool__eq___uint___uint (__tmpd.299 __ct_0.200)  <410>;
    (__trgt.417 var=226) const ()  <609>;
    () void_br_bool_t13s_s2 (__tmp.300 __trgt.417)  <610>;
    (__either.418 var=221) undefined ()  <611>;
    if {
        {
            () if_expr (__either.418)  <87>;
        } #5
        {
            #245 off=7
            (__ct_3286237184.204 var=99) const ()  <255>;
            (__trgt.411 var=222) const ()  <599>;
            () void_br_bool_t13s_s2 (__tmp.419 __trgt.411)  <600>;
            (__either.412 var=221) undefined ()  <601>;
            (__tmp.419 var=109) bool__lt___sint___sint (a_high.34 __ct_0.200)  <612>;
            if {
                {
                    () if_expr (__either.412)  <101>;
                } #9
                {
                } #10 off=9
                {
                    (__trgt.413 var=223) const ()  <602>;
                    () void_j_t21s_s2 (__trgt.413)  <603>;
                } #11 off=8
                {
                    (__tmp_high.203 var=218) merge (__ct_3286237184.204 __ct_0.200)  <254>;
                } #12
            } #8
        } #6
        {
            #246 off=1
            (__trgt.414 var=224) const ()  <604>;
            () void_br_bool_t13s_s2 (__tmp.420 __trgt.414)  <605>;
            (__either.415 var=221) undefined ()  <606>;
            (__tmp.420 var=109) bool__ge___sint___sint (a_high.34 __ct_0.200)  <613>;
            if {
                {
                    () if_expr (__either.415)  <141>;
                } #17
                {
                } #19 off=3
                {
                    (__apl_r_low.262 var=141) __uint_sub___uint___uint (__ct_0.200 a_low.30)  <338>;
                    (__apl_r_high.263 var=142) __uint_sub___uint___uint (__ct_0.200 a_high.34)  <339>;
                    (__apl_r_high.266 var=142) __uint__mi___uint___uint (__apl_r_high.263 __tmp.349)  <342>;
                    (__tmp.349 var=198) __sint_sne0___sint (a_low.30)  <492>;
                    (__trgt.416 var=225) const ()  <607>;
                    () void_j_t21s_s2 (__trgt.416)  <608>;
                } #125 off=2
                {
                    (__tmp_low.207 var=77) merge (a_low.30 __apl_r_low.262)  <259>;
                    (__tmp_high.210 var=78) merge (a_high.34 __apl_r_high.266)  <262>;
                } #20
            } #16
            #241 off=4
            (__ct_1084.138 var=75) const ()  <150>;
            (softfloat_normRoundPackToF64.147 var=81) const ()  <159>;
            (__tmp.304 var=74) __sint_slt___sint___sint (a_high.34 __ct_0.200)  <415>;
            (__tmp.404 var=88) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_8s0.163)  <588>;
            (__R_SP.405 var=12 __sp.406 var=18) wr_res_reg (__tmp.404 __sp.42)  <589>;
            () void_j_t21s_s2 (softfloat_normRoundPackToF64.147)  <596>;
            call {
                (__tmp.137 var=74 stl=X off=12) assign (__tmp.304)  <149>;
                (__ct.140 var=76 stl=X off=13) assign (__ct_1084.138)  <152>;
                (__tmp_low.142 var=77 stl=X off=14) assign (__tmp_low.207)  <154>;
                (__tmp_high.144 var=78 stl=X off=15) assign (__tmp_high.210)  <156>;
                (__la.149 var=21 stl=X off=1) assign (__la.21)  <161>;
                (__tmp.151 var=84 stl=X off=10 __tmp.155 var=85 stl=X off=11) Fsoftfloat_normRoundPackToF64 (__la.149 __tmp.137 __ct.140 __tmp_low.142 __tmp_high.144)  <162>;
                (__tmp.152 var=84) deassign (__tmp.151)  <164>;
                (__tmp.156 var=85) deassign (__tmp.155)  <167>;
            } #22 off=5
            #242 off=6 nxt=-2
            (__rt_low.407 var=23 stl=X off=10) assign (__tmp.152)  <591>;
            () out (__rt_low.407)  <592>;
            (__rt_high.408 var=24 stl=X off=11) assign (__tmp.156)  <593>;
            () out (__rt_high.408)  <594>;
            () sink (__sp.406)  <595>;
            (__rt_high.410 var=24) never ()  <598>;
        } #14
        {
            (__rt_high.216 var=24) merge (__tmp_high.203 __rt_high.410)  <268>;
        } #23
    } #4
    #25 off=11 nxt=-2
    (__tmp.165 var=88) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_8s0.163)  <176>;
    (__R_SP.166 var=12 __sp.167 var=18) wr_res_reg (__tmp.165 __sp.42)  <177>;
    () void___rts_jr_w32 (__la.21)  <178>;
    (__rt_low.169 var=23 stl=X off=10) assign (__ct_0.200)  <180>;
    () out (__rt_low.169)  <181>;
    (__rt_high.171 var=24 stl=X off=11) assign (__rt_high.216)  <183>;
    () out (__rt_high.171)  <184>;
    () sink (__sp.167)  <192>;
} #0
0 : 'SoftFloat-3e/source/i64_to_f64.c';
----------
0 : (0,43:0,0);
4 : (0,50:4,5);
6 : (0,50:41,6);
8 : (0,51:21,6);
10 : (0,51:24,7);
11 : (0,51:21,8);
14 : (0,52:8,14);
16 : (0,54:16,15);
19 : (0,54:39,17);
22 : (0,55:11,20);
25 : (0,55:4,24);
47 : (0,49:14,4);
125 : (0,54:18,16);
241 : (0,55:4,24);
242 : (0,55:4,24);
----------
48 : (0,43:10,0);
49 : (0,43:10,0);
51 : (0,43:10,0);
52 : (0,43:10,0);
54 : (0,46:19,0);
87 : (0,50:4,5);
101 : (0,51:21,6);
141 : (0,54:16,15);
149 : (0,55:41,0);
150 : (0,55:45,0);
152 : (0,55:45,0);
154 : (0,55:54,0);
156 : (0,55:54,0);
161 : (0,55:11,0);
162 : (0,55:11,20);
174 : (0,55:4,0);
176 : (0,55:4,0);
177 : (0,55:4,24);
178 : (0,55:4,24);
180 : (0,55:4,0);
183 : (0,55:4,0);
250 : (0,51:24,0);
255 : (0,51:24,0);
313 : (0,50:14,5);
338 : (0,54:18,16);
339 : (0,54:18,16);
342 : (0,54:18,16);
393 : (0,50:14,0);
409 : (0,50:9,5);
410 : (0,50:9,5);
492 : (0,54:18,16);
588 : (0,55:4,0);
589 : (0,55:4,24);
591 : (0,55:4,0);
593 : (0,55:4,0);
596 : (0,55:11,20);
600 : (0,51:21,6);
605 : (0,54:16,15);
610 : (0,50:4,5);

