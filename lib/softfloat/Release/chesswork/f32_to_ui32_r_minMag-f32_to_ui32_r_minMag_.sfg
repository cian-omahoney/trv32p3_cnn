
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 15:22:16 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f32_to_ui32_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint_fast32_t f32_to_ui32_r_minMag(float32_t, bool)
Ff32_to_ui32_r_minMag : user_defined, called {
    fnm : "f32_to_ui32_r_minMag" 'unsigned long f32_to_ui32_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_to_ui32_r_minMag typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   22 : __rt typ=w32 bnd=p tref=uint_fast32_t__
   23 : a typ=w32 bnd=p tref=float32_t___1
   24 : exact typ=w32 bnd=p tref=bool__
   26 : __ct_m4S0 typ=w32 val=0S0 bnd=m
   28 : __tmp typ=w32 bnd=m
   35 : exp typ=w32 bnd=m tref=int_fast16_t__
   36 : sig typ=w32 bnd=m tref=uint_fast32_t__
   37 : shiftDist typ=w32 bnd=m tref=int_fast16_t__
   38 : sign typ=bool bnd=m tref=bool__
   41 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   48 : __ct_23 typ=w32 val=23f bnd=m
   50 : __tmp typ=w32 bnd=m
   52 : __ct_255 typ=w32 val=255f bnd=m
   55 : __ct_8388607 typ=w32 val=8388607f bnd=m
   58 : __ct_158 typ=w32 val=158f bnd=m
   61 : __ct_32 typ=w32 val=32f bnd=m
   63 : __tmp typ=bool bnd=m
   66 : __ct_31 typ=w32 val=31f bnd=m
   68 : __tmp typ=w32 bnd=m
   76 : __tmp typ=bool bnd=m
   77 : __tmp typ=bool bnd=m
   80 : __tmp typ=bool bnd=m
   83 : __tmp typ=bool bnd=m
   86 : __tmp typ=bool bnd=m
   87 : __ct_4294967295 typ=w32 val=-1f bnd=m
   93 : __tmp typ=w32 bnd=m
   94 : __tmp typ=w32 bnd=m
   95 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
   97 : __tmp typ=w32 bnd=m
   98 : __ct_8 typ=w32 val=8f bnd=m
  103 : __ct_4s0 typ=w32 val=0s0 bnd=m
  105 : __tmp typ=w32 bnd=m
  117 : __true typ=bool val=1f bnd=m
  118 : __false typ=bool val=0f bnd=m
  119 : __either typ=bool bnd=m
  120 : __trgt typ=t13s_s2 val=0j bnd=m
  121 : __trgt typ=t13s_s2 val=0j bnd=m
  122 : __trgt typ=t13s_s2 val=0j bnd=m
  123 : __trgt typ=t21s_s2 val=0j bnd=m
  124 : __trgt typ=t13s_s2 val=0j bnd=m
  125 : __trgt typ=t21s_s2 val=0j bnd=m
  126 : __trgt typ=t13s_s2 val=0j bnd=m
  127 : __trgt typ=t21s_s2 val=0j bnd=m
  128 : __trgt typ=t13s_s2 val=0j bnd=m
  129 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_to_ui32_r_minMag {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a.24 var=23 stl=X off=11) inp ()  <35>;
    (a.25 var=23) deassign (a.24)  <36>;
    (exact.27 var=24 stl=X off=12) inp ()  <38>;
    (__rd___sp.30 var=20) rd_res_reg (__R_SP.11 __sp.17)  <41>;
    (__ct_m4S0.31 var=26) const ()  <42>;
    (__tmp.33 var=28) __Pvoid__pl___Pvoid___sint (__rd___sp.30 __ct_m4S0.31)  <44>;
    (__R_SP.34 var=12 __sp.35 var=18) wr_res_reg (__tmp.33 __sp.17)  <45>;
    (__rd___sp.37 var=20) rd_res_reg (__R_SP.11 __sp.35)  <48>;
    (__ct_0.55 var=41) const ()  <66>;
    (__ct_23.64 var=48) const ()  <74>;
    (__tmp.66 var=50) __uint__rs___uint___sint (a.25 __ct_23.64)  <76>;
    (__ct_255.68 var=52) const ()  <78>;
    (exp.70 var=35) __sint__ad___sint___sint (__tmp.66 __ct_255.68)  <80>;
    (__ct_8388607.71 var=55) const ()  <81>;
    (sig.73 var=36) __uint__ad___uint___uint (a.25 __ct_8388607.71)  <83>;
    (__ct_158.74 var=58) const ()  <84>;
    (shiftDist.76 var=37) __sint__mi___sint___sint (__ct_158.74 exp.70)  <86>;
    (__ct_32.77 var=61) const ()  <87>;
    (__tmp.79 var=63) bool__ge___sint___sint (shiftDist.76 __ct_32.77)  <89>;
    (__trgt.286 var=128) const ()  <393>;
    () void_br_bool_t13s_s2 (__tmp.79 __trgt.286)  <394>;
    (__either.287 var=119) undefined ()  <395>;
    if {
        {
            () if_expr (__either.287)  <108>;
        } #5
        {
        } #6 off=13
        {
            #8 off=1
            (__ct_31.100 var=66) const ()  <111>;
            (__tmp.102 var=68) __uint__rs___uint___sint (a.25 __ct_31.100)  <113>;
            (sign.105 var=38) bool__ne___uint___uint (__tmp.102 __ct_0.55)  <116>;
            (__trgt.271 var=120) const ()  <370>;
            () void_br_bool_t13s_s2 (sign.105 __trgt.271)  <371>;
            (__either.272 var=119) undefined ()  <372>;
            if {
                {
                    () if_expr (__either.272)  <135>;
                } #10
                {
                    (__true.282 var=117) const ()  <387>;
                } #11
                {
                    (__tmp.128 var=76) bool__lt___sint___sint (shiftDist.76 __ct_0.55)  <140>;
                    (__trgt.283 var=126) const ()  <388>;
                    () void_br_bool_t13s_s2 (__tmp.128 __trgt.283)  <389>;
                    (__either.284 var=119) undefined ()  <390>;
                } #12 off=2
                {
                    (__tmp.129 var=77) merge (__true.282 __either.284)  <141>;
                } #13
            } #9
            if {
                {
                    () if_expr (__tmp.129)  <160>;
                } #16
                {
                    #18 off=4
                    (__ct_4294967295.193 var=87) const ()  <208>;
                    (__tmp.268 var=80) bool__ne___sint___sint (exp.70 __ct_255.68)  <353>;
                    (__trgt.273 var=121) const ()  <373>;
                    () void_br_bool_t13s_s2 (__tmp.268 __trgt.273)  <374>;
                    (__either.274 var=119) undefined ()  <375>;
                    if {
                        {
                            () if_expr (__either.274)  <182>;
                        } #20
                        {
                            (__false.278 var=118) const ()  <381>;
                        } #22
                        {
                            (__tmp.171 var=83) bool__ne___uint___uint (sig.73 __ct_0.55)  <185>;
                            (__trgt.279 var=124) const ()  <382>;
                            () void_br_bool_t13s_s2 (__tmp.171 __trgt.279)  <383>;
                            (__either.280 var=119) undefined ()  <384>;
                        } #21 off=5
                        {
                            (__tmp.174 var=86) merge (__false.278 __either.280)  <188>;
                        } #23
                    } #19
                    if {
                        {
                            () if_expr (__tmp.174)  <207>;
                        } #26
                        {
                        } #27 off=10
                        {
                            #44 off=6
                            (__trgt.275 var=122) const ()  <376>;
                            () void_br_bool_t13s_s2 (sign.289 __trgt.275)  <377>;
                            (__either.276 var=119) undefined ()  <378>;
                            (sign.289 var=38) bool__ne___uint___uint (__tmp.102 __ct_0.55)  <398>;
                            if {
                                {
                                    () if_expr (__either.276)  <228>;
                                } #31
                                {
                                } #32 off=8
                                {
                                    (__trgt.277 var=123) const ()  <379>;
                                    () void_j_t21s_s2 (__trgt.277)  <380>;
                                } #33 off=7
                                {
                                    (__tmp.217 var=93) merge (__ct_0.55 __ct_4294967295.193)  <233>;
                                } #34
                            } #30
                            #45 off=9
                            (__trgt.281 var=125) const ()  <385>;
                            () void_j_t21s_s2 (__trgt.281)  <386>;
                        } #28
                        {
                            (__tmp.218 var=94) merge (__ct_4294967295.193 __tmp.217)  <234>;
                        } #35
                    } #25
                } #17
                {
                    (__ct_8388608.219 var=95) const ()  <235>;
                    (__tmp.221 var=97) __uint__or___uint___uint (sig.73 __ct_8388608.219)  <237>;
                    (__ct_8.222 var=98) const ()  <238>;
                    (sig.224 var=36) __uint__ls___uint___sint (__tmp.221 __ct_8.222)  <240>;
                    (__rt.225 var=22) __uint__rs___uint___sint (sig.224 shiftDist.76)  <241>;
                    (__trgt.285 var=127) const ()  <391>;
                    () void_j_t21s_s2 (__trgt.285)  <392>;
                } #36 off=3
                {
                    (__rt.227 var=22) merge (__tmp.218 __rt.225)  <243>;
                } #37
            } #15
            #47 off=12
            (__trgt.288 var=129) const ()  <396>;
            () void_j_t21s_s2 (__trgt.288)  <397>;
        } #7
        {
            (__rt.230 var=22) merge (__ct_0.55 __rt.227)  <246>;
        } #38
    } #4
    #41 off=14 nxt=-2
    (__ct_4s0.235 var=103) const ()  <251>;
    (__tmp.237 var=105) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_4s0.235)  <253>;
    (__R_SP.238 var=12 __sp.239 var=18) wr_res_reg (__tmp.237 __sp.35)  <254>;
    () void___rts_jr_w32 (__la.21)  <255>;
    (__rt.240 var=22 stl=X off=10) assign (__rt.230)  <256>;
    () out (__rt.240)  <257>;
    () sink (__sp.239)  <263>;
} #0
0 : 'SoftFloat-3e/source/f32_to_ui32_r_minMag.c';
----------
0 : (0,44:0,0);
3 : (0,66:12,14);
4 : (0,66:4,14);
6 : (0,66:27,15);
7 : (0,72:8,18);
8 : (0,77:9,20);
9 : (0,77:14,20);
11 : (0,77:14,21);
12 : (0,77:28,22);
15 : (0,77:4,24);
17 : (0,77:35,25);
18 : (0,82:17,25);
19 : (0,82:26,25);
21 : (0,82:26,26);
22 : (0,82:26,27);
25 : (0,82:33,29);
27 : (0,82:35,30);
28 : (0,83:8,31);
30 : (0,83:8,31);
32 : (0,83:8,32);
33 : (0,83:14,33);
36 : (0,81:8,40);
41 : (0,94:4,50);
----------
41 : (0,44:14,0);
42 : (0,44:14,0);
44 : (0,44:14,0);
45 : (0,44:14,0);
48 : (0,49:19,0);
66 : (0,59:6,0);
74 : (0,61:34,0);
76 : (0,61:32,11);
78 : (0,61:38,0);
80 : (0,61:38,11);
81 : (0,62:17,0);
83 : (0,62:17,12);
84 : (0,65:21,0);
86 : (0,65:21,13);
87 : (0,66:12,0);
89 : (0,66:12,14);
108 : (0,66:4,14);
111 : (0,76:38,0);
113 : (0,76:36,19);
116 : (0,76:12,19);
135 : (0,77:14,20);
140 : (0,77:28,22);
141 : (0,77:14,23);
160 : (0,77:4,24);
182 : (0,82:26,25);
185 : (0,82:26,26);
188 : (0,82:26,28);
207 : (0,82:33,29);
208 : (0,82:35,0);
228 : (0,83:8,31);
233 : (0,83:8,34);
234 : (0,82:33,36);
235 : (0,87:15,0);
237 : (0,87:15,41);
238 : (0,87:30,0);
240 : (0,87:28,41);
241 : (0,88:11,42);
243 : (0,77:4,46);
246 : (0,66:4,49);
251 : (0,94:4,0);
253 : (0,94:4,0);
254 : (0,94:4,50);
255 : (0,94:4,50);
256 : (0,94:4,0);
353 : (0,82:17,25);
371 : (0,77:14,20);
374 : (0,82:26,25);
377 : (0,83:8,31);
383 : (0,82:33,29);
389 : (0,77:4,24);
394 : (0,66:4,14);

