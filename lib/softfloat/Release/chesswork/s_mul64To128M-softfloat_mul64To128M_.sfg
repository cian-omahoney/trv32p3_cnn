
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 16:46:04 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/s_mul64To128M.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  void softfloat_mul64To128M(uint64_t, uint64_t, uint32_t *)
Fsoftfloat_mul64To128M : user_defined, called {
    fnm : "softfloat_mul64To128M" 'void softfloat_mul64To128M(uint64_t, uint64_t, uint32_t *)';
    arg : ( w32:i w32:i w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
    frm : ( );
}
****
***/

[
    0 : softfloat_mul64To128M typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __extDMb_w32 typ=w08 bnd=b stl=DMb
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   23 : a_low typ=w32 bnd=m tref=__uint__
   24 : a_high typ=w32 bnd=m tref=__uint__
   26 : b_low typ=w32 bnd=m tref=__uint__
   27 : b_high typ=w32 bnd=m tref=__uint__
   28 : zPtr typ=w32 bnd=p tref=__P__uint__
   29 : __ct_0S0 typ=w32 val=0S0 bnd=m
   31 : __tmp typ=w32 bnd=m
   63 : __tmp typ=bool bnd=m
   81 : __ct_4 typ=w32 val=4f bnd=m
   89 : __tmp typ=w32 bnd=m
   96 : __ct_12 typ=w32 val=12f bnd=m
  100 : __ct_8 typ=w32 val=8f bnd=m
  103 : __ct_0s0 typ=w32 val=0s0 bnd=m
  105 : __tmp typ=w32 bnd=m
  111 : __shv_zPtr typ=w32 bnd=m
  146 : __apl_p1lo typ=w32 bnd=m tref=__uint__
  147 : __apl_p1hi typ=w32 bnd=m tref=__uint__
  204 : __apl_r_low typ=w32 bnd=m tref=__uint__
  205 : __apl_r_high typ=w32 bnd=m tref=__uint__
  226 : __rt typ=bool bnd=m tref=bool__
  231 : __tmp typ=bool bnd=m
  232 : __tmp typ=bool bnd=m
  335 : __ct_1 typ=w32 val=1f bnd=m
  336 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  337 : __tmp typ=w32 bnd=m
  340 : __ct_31 typ=w32 val=31f bnd=m
  345 : __tmp_high typ=w32 bnd=m
  411 : __tmp typ=w32 bnd=m
  412 : __tmp typ=w32 bnd=m
  413 : __tmp typ=w32 bnd=m
  452 : __linex typ=w32 bnd=m
  481 : __true typ=bool val=1f bnd=m
  482 : __false typ=bool val=0f bnd=m
  483 : __either typ=bool bnd=m
  484 : __trgt typ=t13s_s2 val=0j bnd=m
  485 : __trgt typ=t13s_s2 val=0j bnd=m
  486 : __trgt typ=t13s_s2 val=0j bnd=m
  487 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_mul64To128M {
    #1132 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__extDMb_w32.18 var=19) source ()  <29>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a_low.24 var=23 stl=X off=10) inp ()  <35>;
    (a_low.25 var=23) deassign (a_low.24)  <36>;
    (a_high.28 var=24 stl=X off=11) inp ()  <39>;
    (a_high.29 var=24) deassign (a_high.28)  <40>;
    (b_low.33 var=26 stl=X off=12) inp ()  <44>;
    (b_low.34 var=26) deassign (b_low.33)  <45>;
    (b_high.37 var=27 stl=X off=13) inp ()  <48>;
    (b_high.38 var=27) deassign (b_high.37)  <49>;
    (zPtr.41 var=28 stl=X off=14) inp ()  <52>;
    (zPtr.42 var=28) deassign (zPtr.41)  <53>;
    (__rd___sp.44 var=20) rd_res_reg (__R_SP.11 __sp.17)  <55>;
    (__ct_0S0.45 var=29) const ()  <56>;
    (__tmp.47 var=31) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_0S0.45)  <58>;
    (__R_SP.48 var=12 __sp.49 var=18) wr_res_reg (__tmp.47 __sp.17)  <59>;
    (__apl_p1lo.242 var=146) __uint_mul___uint___uint (a_low.25 b_low.34)  <297>;
    (__apl_p1hi.247 var=147) __uint_mulhu___uint___uint (a_low.25 b_low.34)  <304>;
    (__apl_p1lo.285 var=146) __uint_mul___uint___uint (a_high.29 b_low.34)  <352>;
    (__apl_p1hi.290 var=147) __uint_mulhu___uint___uint (a_high.29 b_low.34)  <359>;
    (__apl_p1lo.328 var=146) __uint_mul___uint___uint (a_low.25 b_high.38)  <407>;
    (__apl_p1hi.333 var=147) __uint_mulhu___uint___uint (a_low.25 b_high.38)  <414>;
    (__apl_r_low.371 var=204) __uint_add___uint___uint (__apl_p1lo.285 __apl_p1lo.328)  <462>;
    (__apl_r_high.372 var=205) __uint_add___uint___uint (__apl_p1hi.290 __apl_p1hi.333)  <463>;
    (__apl_r_high.375 var=205) __uint__pl___uint___uint (__apl_r_high.372 __tmp.862)  <466>;
    (__apl_p1lo.402 var=146) __uint_mul___uint___uint (a_high.29 b_high.38)  <499>;
    (__apl_p1hi.407 var=147) __uint_mulhu___uint___uint (a_high.29 b_high.38)  <506>;
    (__tmp.438 var=231) bool__lt___uint___uint (__apl_r_high.375 __apl_p1hi.290)  <545>;
    (__ct_1.721 var=335) const ()  <909>;
    (__tmp.862 var=411) __sint_slt___uint___uint (__apl_r_low.371 __apl_p1lo.285)  <1176>;
    (__trgt.1096 var=485) const ()  <1547>;
    () void_br_bool_t13s_s2 (__tmp.438 __trgt.1096)  <1548>;
    (__either.1097 var=483) undefined ()  <1549>;
    if {
        {
            () if_expr (__either.1097)  <548>;
        } #319
        {
            (__true.1098 var=481) const ()  <1550>;
        } #320
        {
            #322 off=1
            (__tmp.1039 var=232) bool__ne___uint___uint (__apl_r_high.375 __apl_p1hi.290)  <1455>;
            (__trgt.1094 var=484) const ()  <1544>;
            () void_br_bool_t13s_s2 (__tmp.1039 __trgt.1094)  <1545>;
            (__either.1095 var=483) undefined ()  <1546>;
            if {
                {
                    () if_expr (__either.1095)  <550>;
                } #324
                {
                    (__false.1099 var=482) const ()  <1551>;
                } #326
                {
                    (__rt.442 var=226) bool__lt___uint___uint (__apl_r_low.371 __apl_p1lo.285)  <551>;
                    (__trgt.1100 var=486) const ()  <1552>;
                    () void_br_bool_t13s_s2 (__rt.442 __trgt.1100)  <1553>;
                    (__either.1101 var=483) undefined ()  <1554>;
                } #325 off=2
                {
                    (__rt.443 var=226) merge (__false.1099 __either.1101)  <552>;
                } #327
            } #323
        } #321
        {
            (__tmp.444 var=63) merge (__true.1098 __rt.443)  <553>;
        } #328
    } #318
    if {
        {
            () if_expr (__tmp.444)  <911>;
        } #528
        {
        } #529 off=4
        {
            (__ct_0.722 var=336) const ()  <910>;
            (__trgt.1102 var=487) const ()  <1555>;
            () void_j_t21s_s2 (__trgt.1102)  <1556>;
        } #530 off=3
        {
            (__tmp.723 var=337) merge (__ct_1.721 __ct_0.722)  <912>;
        } #531
    } #527
    #5 off=5 nxt=-2
    (__ct_4.107 var=81) const ()  <118>;
    (__M_DMw.110 var=5 __extDMb_w32.111 var=19) store (__linex.932 __shv_zPtr.170 __extDMb_w32.18)  <121>;
    (__M_DMw.116 var=5 __extDMb_w32.117 var=19) store (__apl_p1lo.242 zPtr.42 __extDMb_w32.111)  <126>;
    (__ct_12.126 var=96) const ()  <135>;
    (__M_DMw.129 var=5 __extDMb_w32.130 var=19) store (__apl_r_high.672 __shv_zPtr.171 __extDMb_w32.117)  <138>;
    (__ct_8.132 var=100) const ()  <140>;
    (__M_DMw.135 var=5 __extDMb_w32.136 var=19) store (__apl_r_low.668 __shv_zPtr.172 __extDMb_w32.130)  <143>;
    (__rd___sp.137 var=20) rd_res_reg (__R_SP.11 __sp.49)  <144>;
    (__ct_0s0.138 var=103) const ()  <145>;
    (__tmp.140 var=105) __Pvoid__pl___Pvoid___sint (__rd___sp.137 __ct_0s0.138)  <147>;
    (__R_SP.141 var=12 __sp.142 var=18) wr_res_reg (__tmp.140 __sp.49)  <148>;
    () void___rts_jr_w32 (__la.21)  <149>;
    () sink (__sp.142)  <159>;
    () sink (__extDMb_w32.136)  <160>;
    (__shv_zPtr.170 var=111) __Pvoid__pl___Pvoid___sint (zPtr.42 __ct_4.107)  <202>;
    (__shv_zPtr.171 var=111) __Pvoid__pl___Pvoid___sint (zPtr.42 __ct_12.126)  <203>;
    (__shv_zPtr.172 var=111) __Pvoid__pl___Pvoid___sint (zPtr.42 __ct_8.132)  <204>;
    (__apl_r_low.534 var=204) __uint_add___uint___uint (__apl_p1lo.402 __apl_r_high.375)  <664>;
    (__apl_r_high.535 var=205) __uint_add___uint___uint (__apl_p1hi.407 __tmp.723)  <665>;
    (__apl_r_high.538 var=205) __uint__pl___uint___uint (__apl_r_high.535 __tmp.867)  <668>;
    (__apl_r_low.668 var=204) __uint_add___uint___uint (__apl_r_low.534 __tmp.857)  <827>;
    (__apl_r_high.669 var=205) __uint_add___uint___uint (__apl_r_high.538 __tmp_high.728)  <828>;
    (__apl_r_high.672 var=205) __uint__pl___uint___uint (__apl_r_high.669 __tmp.872)  <831>;
    (__ct_31.727 var=340) const ()  <919>;
    (__tmp_high.728 var=345) __sint__rs___sint___sint (__tmp.857 __ct_31.727)  <920>;
    (__tmp.857 var=89) __sint_slt___uint___uint (__linex.932 __apl_r_low.371)  <1168>;
    (__tmp.867 var=412) __sint_slt___uint___uint (__apl_r_low.534 __apl_p1lo.402)  <1184>;
    (__tmp.872 var=413) __sint_slt___uint___uint (__apl_r_low.668 __apl_r_low.534)  <1192>;
    (__linex.932 var=452) __uint__pl___uint___uint (__apl_p1hi.247 __apl_r_low.371)  <1289>;
} #0
0 : 'SoftFloat-3e/source/s_mul64To128M.c';
----------
0 : (0,43:0,0);
5 : (0,65:0,19);
318 : (0,56:27,11);
319 : (0,56:27,11);
320 : (0,56:27,11);
321 : (0,56:27,11);
322 : (0,56:27,11);
323 : (0,56:27,11);
324 : (0,56:27,11);
325 : (0,56:27,11);
326 : (0,56:27,11);
327 : (0,56:27,11);
328 : (0,56:27,11);
527 : (0,56:11,11);
528 : (0,56:11,11);
529 : (0,56:11,11);
530 : (0,56:11,11);
531 : (0,56:11,11);
1132 : (0,56:27,11);
----------
55 : (0,43:5,0);
56 : (0,43:5,0);
58 : (0,43:5,0);
59 : (0,43:5,0);
118 : (0,59:10,0);
121 : (0,59:8,14);
126 : (0,60:8,15);
135 : (0,62:10,0);
138 : (0,62:8,17);
140 : (0,63:10,0);
143 : (0,63:8,18);
144 : (0,65:0,0);
145 : (0,65:0,0);
147 : (0,65:0,0);
148 : (0,65:0,19);
149 : (0,65:0,19);
202 : (0,59:8,0);
203 : (0,62:8,0);
204 : (0,63:8,0);
297 : (0,52:23,7);
304 : (0,52:23,7);
352 : (0,53:26,8);
359 : (0,53:26,8);
407 : (0,54:31,9);
414 : (0,54:31,9);
462 : (0,54:15,9);
463 : (0,54:15,9);
466 : (0,54:15,9);
499 : (0,55:25,10);
506 : (0,55:25,10);
545 : (0,56:27,11);
548 : (0,56:27,11);
550 : (0,56:27,11);
551 : (0,56:27,11);
552 : (0,56:27,11);
553 : (0,56:27,11);
664 : (0,56:8,11);
665 : (0,56:8,11);
668 : (0,56:8,11);
827 : (0,61:8,16);
828 : (0,61:8,16);
831 : (0,61:8,16);
909 : (0,56:11,0);
910 : (0,56:11,0);
911 : (0,56:11,11);
912 : (0,56:11,11);
919 : (0,61:8,0);
920 : (0,61:8,16);
1168 : (0,61:8,16);
1176 : (0,54:15,9);
1184 : (0,56:8,11);
1192 : (0,61:8,16);
1289 : (0,58:7,13);
1455 : (0,56:27,11);
1545 : (0,56:27,11);
1548 : (0,56:27,11);
1553 : (0,56:11,11);

