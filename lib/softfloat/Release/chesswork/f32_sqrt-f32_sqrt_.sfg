
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:57:43 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f32_sqrt.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t f32_sqrt(float32_t)
Ff32_sqrt : user_defined, called {
    fnm : "f32_sqrt" 'float32_t f32_sqrt(float32_t)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=16 );
    llv : 0 0 0 0 0 ;
}
****
!!  uint_fast32_t softfloat_propagateNaNF32UI(uint_fast32_t, uint_fast32_t)
Fsoftfloat_propagateNaNF32UI : user_defined, called {
    fnm : "softfloat_propagateNaNF32UI" 'uint_fast32_t softfloat_propagateNaNF32UI(uint_fast32_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
!!  exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)
Fsoftfloat_normSubnormalF32Sig : user_defined, called {
    fnm : "softfloat_normSubnormalF32Sig" 'exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)';
    arg : ( w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] );
    llv : 0 0 0 0 0 ;
}
!!  uint32_t softfloat_approxRecipSqrt32_1(unsigned, uint32_t)
Fsoftfloat_approxRecipSqrt32_1 : user_defined, called {
    fnm : "softfloat_approxRecipSqrt32_1" 'uint32_t softfloat_approxRecipSqrt32_1(unsigned, uint32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : f32_sqrt typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : normExpSig typ=w08 val=4t0 bnd=a sz=8 algn=4 stl=DMb tref=exp16_sig32_DMb
   22 : normExpSig_exp typ=w08 bnd=B stl=DMb
   23 : normExpSig_sig typ=w08 bnd=B stl=DMb
   24 : __rd___sp typ=w32 bnd=m
   25 : __la typ=w32 bnd=p tref=w32__
   26 : __rt typ=w32 bnd=p tref=float32_t___1
   27 : a typ=w32 bnd=p tref=float32_t___1
   28 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   35 : __ptr_normExpSig typ=w32 bnd=m
   36 : __ct_4t0 typ=w32 val=4t0 bnd=m
   38 : __adr_normExpSig typ=w32 bnd=m adro=20
   43 : uiA typ=w32 bnd=m tref=uint_fast32_t__
   44 : signA typ=bool bnd=m tref=bool__
   45 : expA typ=w32 bnd=m tref=int_fast16_t__
   46 : sigA typ=w32 bnd=m tref=uint_fast32_t__
   47 : uiZ typ=w32 bnd=m tref=uint_fast32_t__
   48 : expZ typ=w32 bnd=m tref=int_fast16_t__
   49 : sigZ typ=w32 bnd=m tref=uint_fast32_t__
   50 : shiftedSigZ typ=w32 bnd=m tref=uint_fast32_t__
   51 : negRem typ=w32 bnd=m tref=uint32_t__
   52 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   59 : __ct_31 typ=w32 val=31f bnd=m
   61 : __tmp typ=w32 bnd=m
   65 : __ct_23 typ=w32 val=23f bnd=m
   67 : __tmp typ=w32 bnd=m
   69 : __ct_255 typ=w32 val=255f bnd=m
   72 : __ct_8388607 typ=w32 val=8388607f bnd=m
   77 : __tmp typ=bool bnd=m
   80 : __tmp typ=bool bnd=m
   82 : __ct typ=w32 bnd=m
   85 : softfloat_propagateNaNF32UI typ=t21s_s2 val=0r bnd=m
   86 : __link typ=w32 bnd=m
   87 : __tmp typ=w32 bnd=m
   89 : __ct_16s0 typ=w32 val=16s0 bnd=m
   91 : __tmp typ=w32 bnd=m
   93 : __tmp typ=w32 bnd=m
   96 : __tmp typ=bool bnd=m
  103 : __tmp typ=bool bnd=m
  107 : __tmp typ=bool bnd=m
  114 : softfloat_normSubnormalF32Sig typ=t21s_s2 val=0r bnd=m
  115 : __link typ=w32 bnd=m
  127 : __tmp typ=w32 bnd=m
  128 : __ct_1 typ=w32 val=1f bnd=m
  130 : __tmp typ=w32 bnd=m
  131 : __ct_126 typ=w32 val=126f bnd=m
  137 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
  139 : __tmp typ=w32 bnd=m
  140 : __ct_8 typ=w32 val=8f bnd=m
  144 : expA typ=w32 bnd=m
  147 : softfloat_approxRecipSqrt32_1 typ=t21s_s2 val=0r bnd=m
  148 : __link typ=w32 bnd=m
  149 : __tmp typ=w32 bnd=m
  158 : __tmp typ=bool bnd=m
  162 : __ct_2 typ=w32 val=2f bnd=m
  165 : __ct_63 typ=w32 val=63f bnd=m
  167 : __tmp typ=w32 bnd=m
  170 : __tmp typ=bool bnd=m
  175 : __ct_4294967292 typ=w32 val=-4f bnd=m
  178 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  180 : __tmp typ=w32 bnd=m
  183 : __tmp typ=bool bnd=m
  189 : __tmp typ=bool bnd=m
  195 : __tmp typ=w32 bnd=m
  198 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
  200 : __tmp typ=w32 bnd=m
  204 : __ct_2143289344 typ=t20s_rp12 val=523264f bnd=m
  230 : __ct_m127 typ=w32 val=-127f bnd=m
  231 : __ct_4294967295 typ=w32 val=-1f bnd=m
  235 : __ct_8t0 typ=w32 val=8t0 bnd=m
  236 : __adr_normExpSig typ=w32 bnd=m adro=20
  244 : __apl_p1hi typ=w32 bnd=m tref=__uint__
  329 : __either typ=bool bnd=m
  330 : __trgt typ=t13s_s2 val=0j bnd=m
  331 : __trgt typ=t13s_s2 val=0j bnd=m
  332 : __trgt typ=t13s_s2 val=0j bnd=m
  333 : __trgt typ=t13s_s2 val=0j bnd=m
  334 : __trgt typ=t21s_s2 val=0j bnd=m
  335 : __trgt typ=t13s_s2 val=0j bnd=m
  336 : __trgt typ=t21s_s2 val=0j bnd=m
  337 : __trgt typ=t13s_s2 val=0j bnd=m
  338 : __trgt typ=t21s_s2 val=0j bnd=m
  339 : __trgt typ=t13s_s2 val=0j bnd=m
  340 : __trgt typ=t21s_s2 val=0j bnd=m
  341 : __trgt typ=t13s_s2 val=0j bnd=m
  342 : __trgt typ=t21s_s2 val=0j bnd=m
  343 : __trgt typ=t13s_s2 val=0j bnd=m
  344 : __trgt typ=t13s_s2 val=0j bnd=m
  345 : __trgt typ=t13s_s2 val=0j bnd=m
  346 : __trgt typ=t21s_s2 val=0j bnd=m
  347 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_sqrt {
    #4 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (normExpSig.19 var=20) source ()  <30>;
    (normExpSig_exp.21 var=22) source ()  <32>;
    (normExpSig_sig.22 var=23) source ()  <33>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (a.28 var=27 stl=X off=11) inp ()  <39>;
    (a.29 var=27) deassign (a.28)  <40>;
    (__rd___sp.31 var=24) rd_res_reg (__R_SP.11 __sp.17)  <42>;
    (__ct_m16S0.32 var=28) const ()  <43>;
    (__tmp.34 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.31 __ct_m16S0.32)  <45>;
    (__R_SP.35 var=12 __sp.36 var=18) wr_res_reg (__tmp.34 __sp.17)  <46>;
    (__rd___sp.37 var=24) rd_res_reg (__R_SP.11 __sp.36)  <48>;
    (__ct_0.70 var=52) const ()  <81>;
    (__ct_31.79 var=59) const ()  <89>;
    (__tmp.81 var=61) __uint__rs___uint___sint (a.29 __ct_31.79)  <91>;
    (__ct_23.85 var=65) const ()  <95>;
    (__tmp.87 var=67) __uint__rs___uint___sint (a.29 __ct_23.85)  <97>;
    (__ct_255.89 var=69) const ()  <99>;
    (expA.91 var=45) __sint__ad___sint___sint (__tmp.87 __ct_255.89)  <101>;
    (__ct_8388607.92 var=72) const ()  <102>;
    (sigA.94 var=46) __uint__ad___uint___uint (a.29 __ct_8388607.92)  <104>;
    (__tmp.97 var=77) bool__eq___sint___sint (expA.91 __ct_255.89)  <107>;
    (__ct_16s0.245 var=89) const ()  <290>;
    (__tmp.247 var=91) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_16s0.245)  <292>;
    (__ct_2143289344.866 var=204) const ()  <945>;
    (__trgt.1096 var=345) const ()  <1503>;
    () void_br_bool_t13s_s2 (__tmp.97 __trgt.1096)  <1504>;
    (__either.1097 var=329) undefined ()  <1505>;
    if {
        {
            () if_expr (__either.1097)  <134>;
        } #6
        {
            #8 off=31
            (__tmp.126 var=80) bool__ne___uint___uint (sigA.94 __ct_0.70)  <137>;
            (__trgt.1071 var=330) const ()  <1458>;
            () void_br_bool_t13s_s2 (__tmp.126 __trgt.1071)  <1459>;
            (__either.1072 var=329) undefined ()  <1460>;
            if {
                {
                    () if_expr (__either.1072)  <164>;
                    () chess_rear_then ()  <1461>;
                } #10
                {
                    #12 off=33
                    (softfloat_propagateNaNF32UI.159 var=85) const ()  <171>;
                    (__link.160 var=86) w32_jal_t21s_s2 (softfloat_propagateNaNF32UI.159)  <172>;
                    call {
                        (uiA.153 var=43 stl=X off=11) assign (a.29)  <165>;
                        (__ct.156 var=82 stl=X off=12) assign (__ct_0.70)  <168>;
                        (__link.161 var=86 stl=X off=1) assign (__link.160)  <173>;
                        (__tmp.162 var=87 stl=X off=10) Fsoftfloat_propagateNaNF32UI (__link.161 uiA.153 __ct.156)  <174>;
                        (__tmp.163 var=87) deassign (__tmp.162)  <175>;
                    } #13 off=34
                    #14 off=35 nxt=-3 tgt=1
                    () sink (__sp.36)  <182>;
                    () sync_sink (__tmp.163) sid=19  <201>;
                    (__trgt.1099 var=347) const ()  <1508>;
                    () void_j_t21s_s2 (__trgt.1099)  <1509>;
                } #11
                {
                } #15 off=32
                {
                } #16
            } #9
            #229 off=36
            (__trgt.1073 var=331) const ()  <1462>;
            () void_br_bool_t13s_s2 (signA.1100 __trgt.1073)  <1463>;
            (__either.1074 var=329) undefined ()  <1464>;
            (signA.1100 var=44) bool__eq___uint___uint (__tmp.81 __ct_0.70)  <1510>;
            if {
                {
                    () if_expr (__either.1074)  <288>;
                    () chess_rear_then ()  <1465>;
                } #19
                {
                    (__R_SP.248 var=12 __sp.249 var=18) wr_res_reg (__tmp.247 __sp.36)  <293>;
                    () void___rts_jr_w32 (__la.25)  <294>;
                    (__rt.250 var=26 stl=X off=10) assign (a.29)  <295>;
                    () out (__rt.250)  <296>;
                    () sink (__sp.249)  <302>;
                } #22 off=38 nxt=-2
                {
                } #23 off=37
                {
                } #24
            } #18
        } #7
        {
            #228 off=1
            (__trgt.1094 var=344) const ()  <1499>;
            () void_br_bool_t13s_s2 (signA.1101 __trgt.1094)  <1500>;
            (__either.1095 var=329) undefined ()  <1501>;
            (signA.1101 var=44) bool__eq___uint___uint (__tmp.81 __ct_0.70)  <1511>;
            if {
                {
                    () if_expr (__either.1095)  <381>;
                    () chess_rear_then ()  <1502>;
                } #28
                {
                    #39 off=5
                    (__tmp.1065 var=103) bool__ne___sint___sint (expA.91 __ct_0.70)  <1425>;
                    (__trgt.1077 var=333) const ()  <1470>;
                    () void_br_bool_t13s_s2 (__tmp.1065 __trgt.1077)  <1471>;
                    (__either.1078 var=329) undefined ()  <1472>;
                    if {
                        {
                            () if_expr (__either.1078)  <511>;
                        } #41
                        {
                        } #54 off=12
                        {
                            #43 off=6
                            (__tmp.948 var=107) bool__eq___uint___uint (sigA.94 __ct_0.70)  <1099>;
                            (__trgt.1075 var=332) const ()  <1466>;
                            () void_br_bool_t13s_s2 (__tmp.948 __trgt.1075)  <1467>;
                            (__either.1076 var=329) undefined ()  <1468>;
                            if {
                                {
                                    () if_expr (__either.1076)  <542>;
                                    () chess_rear_then ()  <1469>;
                                } #45
                                {
                                    (__R_SP.484 var=12 __sp.485 var=18) wr_res_reg (__tmp.247 __sp.36)  <547>;
                                    () void___rts_jr_w32 (__la.25)  <548>;
                                    (__rt.486 var=26 stl=X off=10) assign (a.29)  <549>;
                                    () out (__rt.486)  <550>;
                                    () sink (__sp.485)  <556>;
                                } #48 off=8 nxt=-2
                                {
                                } #49 off=7
                                {
                                } #50
                            } #44
                            #51 off=9
                            (__ct_4t0.43 var=36) const ()  <54>;
                            (__adr_normExpSig.45 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_4t0.43)  <56>;
                            (softfloat_normSubnormalF32Sig.543 var=114) const ()  <613>;
                            (__link.544 var=115) w32_jal_t21s_s2 (softfloat_normSubnormalF32Sig.543)  <614>;
                            call {
                                (__ptr_normExpSig.539 var=35 stl=X off=10) assign (__adr_normExpSig.45)  <609>;
                                (sigA.540 var=46 stl=X off=11) assign (sigA.94)  <610>;
                                (__link.545 var=115 stl=X off=1) assign (__link.544)  <615>;
                                (normExpSig.546 var=20 normExpSig_exp.547 var=22 normExpSig_sig.548 var=23) Fsoftfloat_normSubnormalF32Sig (__link.545 __ptr_normExpSig.539 sigA.540 normExpSig.19 normExpSig_exp.21 normExpSig_sig.22)  <616>;
                            } #52 off=10
                            #53 off=11
                            (expA.553 var=45) load (__M_DMw.4 __adr_normExpSig.45 normExpSig_exp.547)  <621>;
                            (sigA.557 var=46) load (__M_DMw.4 __adr_normExpSig.955 normExpSig_sig.548)  <625>;
                            (__ct_8t0.954 var=235) const ()  <1107>;
                            (__adr_normExpSig.955 var=236) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_8t0.954)  <1109>;
                            (__trgt.1079 var=334) const ()  <1473>;
                            () void_j_t21s_s2 (__trgt.1079)  <1474>;
                        } #42
                        {
                            (expA.574 var=45) merge (expA.91 expA.553)  <642>;
                            (sigA.575 var=46) merge (sigA.94 sigA.557)  <643>;
                        } #55
                    } #40
                    #195 off=13
                    (__tmp.586 var=127) __sint__pl___sint___sint (expA.574 __ct_m127.951)  <654>;
                    (__ct_1.587 var=128) const ()  <655>;
                    (__tmp.589 var=130) __sint__rs___sint___sint (__tmp.586 __ct_1.587)  <657>;
                    (__ct_126.590 var=131) const ()  <658>;
                    (expZ.592 var=48) __sint__pl___sint___sint (__tmp.589 __ct_126.590)  <660>;
                    (expA.595 var=45) __sint__ad___sint___sint (expA.574 __ct_1.587)  <663>;
                    (__ct_8388608.596 var=137) const ()  <664>;
                    (__tmp.598 var=139) __uint__or___uint___uint (sigA.575 __ct_8388608.596)  <666>;
                    (__ct_8.599 var=140) const ()  <667>;
                    (sigA.601 var=46) __uint__ls___uint___sint (__tmp.598 __ct_8.599)  <669>;
                    (softfloat_approxRecipSqrt32_1.608 var=147) const ()  <676>;
                    (__link.609 var=148) w32_jal_t21s_s2 (softfloat_approxRecipSqrt32_1.608)  <677>;
                    (__ct_m127.951 var=230) const ()  <1102>;
                    call {
                        (expA.604 var=144 stl=X off=11) assign (expA.595)  <672>;
                        (sigA.605 var=46 stl=X off=12) assign (sigA.601)  <673>;
                        (__link.610 var=148 stl=X off=1) assign (__link.609)  <678>;
                        (__tmp.611 var=149 stl=X off=10) Fsoftfloat_approxRecipSqrt32_1 (__link.610 expA.604 sigA.605)  <679>;
                        (__tmp.612 var=149) deassign (__tmp.611)  <680>;
                    } #57 off=14
                    #213 off=15
                    (__apl_p1hi.974 var=244) __uint_mulhu___uint___uint (sigA.601 __tmp.612)  <1163>;
                    (__tmp.1066 var=158) bool__eq___sint___sint (expA.595 __ct_0.70)  <1426>;
                    (__trgt.1080 var=335) const ()  <1475>;
                    () void_br_bool_t13s_s2 (__tmp.1066 __trgt.1080)  <1476>;
                    (__either.1081 var=329) undefined ()  <1477>;
                    if {
                        {
                            () if_expr (__either.1081)  <717>;
                        } #60
                        {
                        } #62 off=17
                        {
                            (sigZ.651 var=49) __uint__rs___uint___sint (__apl_p1hi.974 __ct_1.587)  <720>;
                            (__trgt.1082 var=336) const ()  <1478>;
                            () void_j_t21s_s2 (__trgt.1082)  <1479>;
                        } #61 off=16
                        {
                            (sigZ.652 var=49) merge (__apl_p1hi.974 sigZ.651)  <721>;
                        } #63
                    } #59
                    #64 off=18
                    (__ct_2.653 var=162) const ()  <722>;
                    (sigZ.655 var=49) __uint__pl___uint___uint (sigZ.652 __ct_2.653)  <724>;
                    (__ct_63.656 var=165) const ()  <725>;
                    (__tmp.658 var=167) __uint__ad___uint___uint (sigZ.655 __ct_63.656)  <727>;
                    (__tmp.1068 var=170) bool__ge___uint___uint (__tmp.658 __ct_2.653)  <1428>;
                    (__trgt.1089 var=341) const ()  <1490>;
                    () void_br_bool_t13s_s2 (__tmp.1068 __trgt.1089)  <1491>;
                    (__either.1090 var=329) undefined ()  <1492>;
                    if {
                        {
                            () if_expr (__either.1090)  <757>;
                        } #66
                        {
                        } #80 off=26
                        {
                            #68 off=19
                            (shiftedSigZ.690 var=50) __uint__rs___uint___sint (sigZ.655 __ct_2.653)  <760>;
                            (negRem.691 var=51) __uint__ml___uint___uint (shiftedSigZ.690 shiftedSigZ.690)  <761>;
                            (__ct_4294967292.692 var=175) const ()  <762>;
                            (sigZ.694 var=49) __uint__ad___uint___uint (sigZ.655 __ct_4294967292.692)  <764>;
                            (__ct_2147483648.695 var=178) const ()  <765>;
                            (__tmp.697 var=180) __uint__ad___uint___uint (negRem.691 __ct_2147483648.695)  <767>;
                            (__tmp.700 var=183) bool__ne___uint___uint (__tmp.697 __ct_0.70)  <770>;
                            (__trgt.1086 var=339) const ()  <1485>;
                            () void_br_bool_t13s_s2 (__tmp.700 __trgt.1086)  <1486>;
                            (__either.1087 var=329) undefined ()  <1487>;
                            if {
                                {
                                    () if_expr (__either.1087)  <797>;
                                } #70
                                {
                                    (sigZ.729 var=49) __uint__or___uint___uint (sigZ.694 __ct_1.587)  <800>;
                                } #71 off=24
                                {
                                    #73 off=20
                                    (__tmp.1067 var=189) bool__eq___uint___uint (negRem.691 __ct_0.70)  <1427>;
                                    (__trgt.1083 var=337) const ()  <1480>;
                                    () void_br_bool_t13s_s2 (__tmp.1067 __trgt.1083)  <1481>;
                                    (__either.1084 var=329) undefined ()  <1482>;
                                    if {
                                        {
                                            () if_expr (__either.1084)  <830>;
                                        } #75
                                        {
                                        } #77 off=22
                                        {
                                            (sigZ.761 var=49) __uint__pl___uint___uint (sigZ.694 __ct_4294967295.952)  <833>;
                                            (__ct_4294967295.952 var=231) const ()  <1104>;
                                            (__trgt.1085 var=338) const ()  <1483>;
                                            () void_j_t21s_s2 (__trgt.1085)  <1484>;
                                        } #76 off=21
                                        {
                                            (sigZ.762 var=49) merge (sigZ.694 sigZ.761)  <834>;
                                        } #78
                                    } #74
                                    #230 off=23
                                    (__trgt.1088 var=340) const ()  <1488>;
                                    () void_j_t21s_s2 (__trgt.1088)  <1489>;
                                } #72
                                {
                                    (sigZ.763 var=49) merge (sigZ.729 sigZ.762)  <835>;
                                } #79
                            } #69
                            #231 off=25
                            (__trgt.1091 var=342) const ()  <1493>;
                            () void_j_t21s_s2 (__trgt.1091)  <1494>;
                        } #67
                        {
                            (sigZ.764 var=49) merge (sigZ.655 sigZ.763)  <836>;
                        } #81
                    } #65
                    #84 off=27
                    (softfloat_roundPackToF32.775 var=198) const ()  <847>;
                    (__R_SP.785 var=12 __sp.786 var=18) wr_res_reg (__tmp.247 __sp.36)  <857>;
                    () void_j_t21s_s2 (softfloat_roundPackToF32.775)  <1457>;
                    call {
                        (__tmp.770 var=195 stl=X off=11) assign (__ct_0.70)  <842>;
                        (expZ.771 var=48 stl=X off=12) assign (expZ.592)  <843>;
                        (sigZ.772 var=49 stl=X off=13) assign (sigZ.764)  <844>;
                        (__la.777 var=25 stl=X off=1) assign (__la.25)  <849>;
                        (__tmp.778 var=200 stl=X off=10) Fsoftfloat_roundPackToF32 (__la.777 __tmp.770 expZ.771 sigZ.772)  <850>;
                        (__tmp.779 var=200) deassign (__tmp.778)  <851>;
                    } #83 off=28
                    #85 off=29 nxt=-2
                    (__rt.787 var=26 stl=X off=10) assign (__tmp.779)  <859>;
                    () out (__rt.787)  <860>;
                    () sink (__sp.786)  <866>;
                } #38
                {
                    #30 off=2
                    (__tmp.330 var=93) __uint__or___uint___uint (expA.91 sigA.94)  <383>;
                    (__tmp.946 var=96) bool__eq___uint___uint (__tmp.330 __ct_0.70)  <1097>;
                    (__trgt.1092 var=343) const ()  <1495>;
                    () void_br_bool_t13s_s2 (__tmp.946 __trgt.1092)  <1496>;
                    (__either.1093 var=329) undefined ()  <1497>;
                    if {
                        {
                            () if_expr (__either.1093)  <414>;
                            () chess_rear_then ()  <1498>;
                        } #32
                        {
                            (__R_SP.365 var=12 __sp.366 var=18) wr_res_reg (__tmp.247 __sp.36)  <419>;
                            () void___rts_jr_w32 (__la.25)  <420>;
                            (__rt.367 var=26 stl=X off=10) assign (a.29)  <421>;
                            () out (__rt.367)  <422>;
                            () sink (__sp.366)  <428>;
                        } #35 off=4 nxt=-2
                        {
                        } #36 off=3
                        {
                        } #37
                    } #31
                } #29
                {
                } #86
            } #27
            #232 off=30
            (__trgt.1098 var=346) const ()  <1506>;
            () void_j_t21s_s2 (__trgt.1098)  <1507>;
        } #25
        {
        } #87
    } #5
    sync {
        (uiZ.886 var=47) sync_link (__ct_2143289344.866) sid=19  <965>;
    } #1 off=40
    #91 off=41 nxt=-2
    (__R_SP.907 var=12 __sp.908 var=18) wr_res_reg (__tmp.247 __sp.36)  <985>;
    () void___rts_jr_w32 (__la.25)  <986>;
    (__rt.909 var=26 stl=X off=10) assign (uiZ.886)  <987>;
    () out (__rt.909)  <988>;
    () sink (__sp.908)  <994>;
} #0
0 : 'SoftFloat-3e/source/f32_sqrt.c';
----------
0 : (0,44:0,0);
1 : (0,118:1,108);
4 : (0,66:14,16);
5 : (0,66:4,16);
7 : (0,66:24,17);
8 : (0,67:8,17);
9 : (0,67:8,17);
11 : (0,67:20,18);
12 : (0,68:50,18);
13 : (0,68:18,18);
14 : (0,69:12,19);
15 : (0,67:8,22);
18 : (0,71:8,25);
22 : (0,71:23,26);
23 : (0,71:8,29);
25 : (0,118:1,35);
27 : (0,76:4,36);
29 : (0,76:17,37);
30 : (0,77:13,37);
31 : (0,77:8,37);
35 : (0,77:31,38);
36 : (0,77:8,41);
38 : (0,118:1,47);
39 : (0,82:9,48);
40 : (0,82:4,48);
42 : (0,82:18,49);
43 : (0,83:13,49);
44 : (0,83:8,49);
48 : (0,83:22,50);
49 : (0,83:8,53);
51 : (0,84:52,56);
52 : (0,84:21,56);
53 : (0,82:18,61);
54 : (0,82:4,62);
57 : (0,94:32,68);
59 : (0,96:4,69);
61 : (0,96:21,70);
62 : (0,96:4,72);
64 : (0,100:23,76);
65 : (0,100:4,76);
67 : (0,100:29,77);
68 : (0,104:8,80);
69 : (0,104:8,80);
71 : (0,104:35,81);
72 : (0,106:15,84);
73 : (0,107:12,84);
74 : (0,107:12,84);
76 : (0,107:26,85);
77 : (0,107:12,87);
80 : (0,100:4,95);
83 : (0,110:11,98);
84 : (0,110:4,98);
85 : (0,110:4,98);
91 : (0,120:4,110);
195 : (0,94:32,68);
213 : (0,96:4,69);
----------
42 : (0,44:10,0);
43 : (0,44:10,0);
45 : (0,44:10,0);
46 : (0,44:10,0);
48 : (0,46:19,0);
54 : (0,51:23,0);
56 : (0,51:23,0);
81 : (0,59:6,0);
89 : (0,61:39,0);
91 : (0,61:37,13);
95 : (0,62:36,0);
97 : (0,62:34,14);
99 : (0,62:40,0);
101 : (0,62:40,14);
102 : (0,63:19,0);
104 : (0,63:19,15);
107 : (0,66:14,16);
134 : (0,66:4,16);
137 : (0,67:8,17);
164 : (0,67:8,17);
165 : (0,68:47,0);
168 : (0,68:50,0);
172 : (0,68:18,18);
173 : (0,68:18,0);
174 : (0,68:18,18);
288 : (0,71:8,25);
290 : (0,71:23,0);
292 : (0,71:23,0);
293 : (0,71:23,26);
294 : (0,71:23,26);
295 : (0,71:30,0);
381 : (0,76:4,36);
383 : (0,77:21,37);
414 : (0,77:8,37);
419 : (0,77:31,38);
420 : (0,77:31,38);
421 : (0,77:38,0);
511 : (0,82:4,48);
542 : (0,83:8,49);
547 : (0,83:22,50);
548 : (0,83:22,50);
549 : (0,83:29,0);
609 : (0,84:19,0);
610 : (0,84:52,0);
614 : (0,84:21,56);
615 : (0,84:21,0);
616 : (0,84:21,56);
621 : (0,85:25,58);
625 : (0,86:25,59);
642 : (0,82:4,64);
643 : (0,82:4,64);
654 : (0,90:18,65);
655 : (0,90:27,0);
657 : (0,90:25,65);
658 : (0,90:30,0);
660 : (0,90:30,65);
663 : (0,91:9,66);
664 : (0,92:17,0);
666 : (0,92:17,67);
667 : (0,92:32,0);
669 : (0,92:30,67);
672 : (0,94:67,0);
673 : (0,94:67,0);
677 : (0,94:32,68);
678 : (0,94:32,0);
679 : (0,94:32,68);
717 : (0,96:4,69);
720 : (0,96:21,70);
721 : (0,96:4,74);
722 : (0,99:9,0);
724 : (0,99:9,75);
725 : (0,100:15,0);
727 : (0,100:15,76);
757 : (0,100:4,76);
760 : (0,101:26,77);
761 : (0,102:29,78);
762 : (0,103:13,0);
764 : (0,103:13,79);
765 : (0,104:22,0);
767 : (0,104:20,80);
770 : (0,104:8,80);
797 : (0,104:8,80);
800 : (0,105:17,81);
830 : (0,107:12,84);
833 : (0,107:26,85);
834 : (0,107:12,89);
835 : (0,104:8,92);
836 : (0,100:4,97);
842 : (0,110:38,0);
843 : (0,110:40,0);
844 : (0,110:46,0);
849 : (0,110:11,0);
850 : (0,110:11,98);
857 : (0,110:4,98);
859 : (0,110:35,0);
945 : (0,117:8,0);
985 : (0,120:4,110);
986 : (0,120:4,110);
987 : (0,120:13,0);
1097 : (0,77:13,37);
1099 : (0,83:13,49);
1102 : (0,90:18,0);
1104 : (0,107:26,0);
1107 : (0,51:23,0);
1109 : (0,86:25,0);
1163 : (0,94:30,68);
1425 : (0,82:9,48);
1426 : (0,96:4,69);
1427 : (0,107:12,84);
1428 : (0,100:23,76);
1457 : (0,110:11,98);
1459 : (0,67:8,17);
1463 : (0,71:8,25);
1467 : (0,83:8,49);
1471 : (0,82:4,48);
1476 : (0,96:4,69);
1481 : (0,107:12,84);
1486 : (0,104:8,80);
1491 : (0,100:4,76);
1496 : (0,77:8,37);
1500 : (0,76:4,36);
1504 : (0,66:4,16);

