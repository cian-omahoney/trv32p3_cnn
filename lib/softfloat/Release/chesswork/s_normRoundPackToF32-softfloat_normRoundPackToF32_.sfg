
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:32:00 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/s_normRoundPackToF32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t softfloat_normRoundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_normRoundPackToF32 : user_defined, called {
    fnm : "softfloat_normRoundPackToF32" 'float32_t softfloat_normRoundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : softfloat_normRoundPackToF32 typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : softfloat_countLeadingZeros8 typ=w08 bnd=e sz=256 algn=1 stl=DMb tref=__A256__uchar_DMb
   22 : __rd___sp typ=w32 bnd=m
   24 : __ptr_softfloat_countLeadingZeros8 typ=w32 val=0a bnd=m adro=19
   25 : __la typ=w32 bnd=p tref=w32__
   26 : __rt typ=w32 bnd=p tref=float32_t___1
   27 : sign typ=w32 bnd=p tref=bool__
   28 : sign typ=bool bnd=m
   29 : exp typ=w32 bnd=p tref=int_fast16_t__
   30 : sig typ=w32 bnd=p tref=uint_fast32_t__
   31 : __ct_m4S0 typ=w32 val=0S0 bnd=m
   33 : __tmp typ=w32 bnd=m
   41 : __inl_a typ=w32 bnd=m tref=uint32_t__
   42 : __inl_count typ=w32 bnd=m tref=uint_fast8_t__
   44 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   46 : __ct_65536 typ=t20s_rp12 val=16f bnd=m
   48 : __tmp typ=bool bnd=m
   49 : __ct_16 typ=w32 val=16f bnd=m
   54 : __ct_16777216 typ=t20s_rp12 val=4096f bnd=m
   56 : __tmp typ=bool bnd=m
   57 : __ct_8 typ=w32 val=8f bnd=m
   63 : __ct_24 typ=w32 val=24f bnd=m
   65 : __tmp typ=w32 bnd=m
   67 : __tmp typ=w32 bnd=m
   68 : __fch_softfloat_countLeadingZeros8 typ=__uchar bnd=m
   74 : __tmp typ=w32 bnd=m
   77 : __ct_7 typ=w32 val=7f bnd=m
   79 : __tmp typ=bool bnd=m
   81 : __ct_253 typ=w32 val=253f bnd=m
   83 : __tmp typ=bool bnd=m
   86 : __tmp typ=bool bnd=m
   93 : __tmp typ=bool bnd=m
   96 : __tmp typ=w32 bnd=m
   98 : __ct_23 typ=w32 val=23f bnd=m
  100 : __tmp typ=w32 bnd=m
  101 : __tmp typ=w32 bnd=m
  104 : __tmp typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  106 : __tmp typ=w32 bnd=m
  114 : __tmp typ=w32 bnd=m
  115 : __tmp typ=w32 bnd=m
  118 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
  120 : __tmp typ=w32 bnd=m
  122 : __ct_4s0 typ=w32 val=0s0 bnd=m
  124 : __tmp typ=w32 bnd=m
  135 : __ct_4294967295 typ=w32 val=-1f bnd=m
  136 : __ct_m7 typ=w32 val=-7f bnd=m
  146 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  151 : __tmp typ=t20s_rp12 bnd=m
  153 : __false typ=bool val=0f bnd=m
  154 : __either typ=bool bnd=m
  155 : __trgt typ=t13s_s2 val=0j bnd=m
  156 : __trgt typ=t21s_s2 val=0j bnd=m
  157 : __trgt typ=t13s_s2 val=0j bnd=m
  158 : __trgt typ=t21s_s2 val=0j bnd=m
  159 : __trgt typ=t13s_s2 val=0j bnd=m
  160 : __trgt typ=t13s_s2 val=0j bnd=m
  161 : __trgt typ=t21s_s2 val=0j bnd=m
  162 : __trgt typ=t13s_s2 val=0j bnd=m
  163 : __trgt typ=t21s_s2 val=0j bnd=m
  164 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fsoftfloat_normRoundPackToF32 {
    #42 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (softfloat_countLeadingZeros8.18 var=19) source ()  <29>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (sign.28 var=27 stl=X off=11) inp ()  <39>;
    (sign.29 var=27) deassign (sign.28)  <40>;
    (exp.31 var=29 stl=X off=12) inp ()  <42>;
    (exp.32 var=29) deassign (exp.31)  <43>;
    (sig.34 var=30 stl=X off=13) inp ()  <45>;
    (sig.35 var=30) deassign (sig.34)  <46>;
    (__rd___sp.37 var=22) rd_res_reg (__R_SP.11 __sp.17)  <48>;
    (__ct_m4S0.38 var=31) const ()  <49>;
    (__tmp.40 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_m4S0.38)  <51>;
    (__R_SP.41 var=12 __sp.42 var=18) wr_res_reg (__tmp.40 __sp.17)  <52>;
    (__rd___sp.44 var=22) rd_res_reg (__R_SP.11 __sp.42)  <55>;
    (__ct_0.59 var=44) const ()  <70>;
    (__ct_65536.61 var=46) const ()  <72>;
    (__tmp.310 var=48) bool__ge___uint___uint (sig.35 __ct_65536.61)  <450>;
    (__trgt.320 var=155) const ()  <481>;
    () void_br_bool_t13s_s2 (__tmp.310 __trgt.320)  <482>;
    (__either.321 var=154) undefined ()  <483>;
    if {
        {
            () if_expr (__either.321)  <96>;
        } #5
        {
        } #7 off=2
        {
            (__ct_16.85 var=49) const ()  <97>;
            (__inl_a.89 var=41) __uint__ls___uint___sint (sig.35 __ct_16.85)  <101>;
            (__trgt.322 var=156) const ()  <484>;
            () void_j_t21s_s2 (__trgt.322)  <485>;
        } #6 off=1
        {
            (__inl_a.90 var=41) merge (sig.35 __inl_a.89)  <102>;
            (__inl_count.91 var=42) merge (__ct_0.59 __ct_16.85)  <103>;
        } #8
    } #4
    #9 off=3
    (__ct_16777216.92 var=54) const ()  <104>;
    (__tmp.311 var=56) bool__ge___uint___uint (__inl_a.90 __ct_16777216.92)  <451>;
    (__trgt.323 var=157) const ()  <486>;
    () void_br_bool_t13s_s2 (__tmp.311 __trgt.323)  <487>;
    (__either.324 var=154) undefined ()  <488>;
    if {
        {
            () if_expr (__either.324)  <128>;
        } #11
        {
        } #13 off=5
        {
            (__ct_8.116 var=57) const ()  <129>;
            (__inl_count.118 var=42) __uint__pl___uint___uint (__inl_count.91 __ct_8.116)  <131>;
            (__inl_a.121 var=41) __uint__ls___uint___sint (__inl_a.90 __ct_8.116)  <134>;
            (__trgt.325 var=158) const ()  <489>;
            () void_j_t21s_s2 (__trgt.325)  <490>;
        } #12 off=4
        {
            (__inl_a.122 var=41) merge (__inl_a.90 __inl_a.121)  <135>;
            (__inl_count.123 var=42) merge (__inl_count.91 __inl_count.118)  <136>;
        } #14
    } #10
    #15 off=6
    (__ptr_softfloat_countLeadingZeros8.22 var=24) const ()  <33>;
    (__ct_24.124 var=63) const ()  <137>;
    (__tmp.126 var=65) __uint__rs___uint___sint (__inl_a.122 __ct_24.124)  <139>;
    (__tmp.128 var=67) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_countLeadingZeros8.22 __tmp.126)  <141>;
    (__fch_softfloat_countLeadingZeros8.129 var=68) load (__M_DMb.2 __tmp.128 softfloat_countLeadingZeros8.18)  <142>;
    (__inl_count.132 var=42) __uint__pl___uint___uint (__inl_count.123 __fch_softfloat_countLeadingZeros8.129)  <145>;
    (__tmp.135 var=74) __uint__pl___uint___uint (__inl_count.132 __ct_4294967295.293)  <148>;
    (exp.137 var=29) __sint__mi___sint___sint (exp.32 __tmp.135)  <150>;
    (__ct_7.138 var=77) const ()  <151>;
    (__ct_4s0.257 var=122) const ()  <272>;
    (__ct_4294967295.293 var=135) const ()  <362>;
    (__tmp.312 var=79) bool__lt___sint___sint (__tmp.135 __ct_7.138)  <452>;
    (__trgt.326 var=159) const ()  <491>;
    () void_br_bool_t13s_s2 (__tmp.312 __trgt.326)  <492>;
    (__either.327 var=154) undefined ()  <493>;
    if {
        {
            () if_expr (__either.327)  <175>;
        } #17
        {
            (__false.334 var=153) const ()  <504>;
        } #19
        {
            (__ct_253.163 var=81) const ()  <177>;
            (__tmp.165 var=83) bool__lt___uint___uint (exp.137 __ct_253.163)  <179>;
            (__trgt.335 var=164) const ()  <505>;
            () void_br_bool_t13s_s2 (__tmp.165 __trgt.335)  <506>;
            (__either.336 var=154) undefined ()  <507>;
        } #18 off=7
        {
            (__tmp.168 var=86) merge (__false.334 __either.336)  <182>;
        } #20
    } #16
    if {
        {
            () if_expr (__tmp.168)  <204>;
        } #23
        {
            #63 off=11
            (__ct_2147483648.306 var=146) const ()  <424>;
            (__trgt.328 var=160) const ()  <494>;
            () void_br_bool_t13s_s2 (sign.337 __trgt.328)  <495>;
            (__either.329 var=154) undefined ()  <496>;
            (sign.337 var=28) bool__ne___sint___sint (sign.29 __ct_0.59)  <508>;
            if {
                {
                    () if_expr (__either.329)  <393>;
                } #53
                {
                } #54 off=13
                {
                    (__trgt.330 var=161) const ()  <497>;
                    () void_j_t21s_s2 (__trgt.330)  <498>;
                } #55 off=12
                {
                    (__tmp.307 var=151) merge (__ct_2147483648.306 __ct_0.59)  <426>;
                } #56
            } #52
            #48 off=14
            (__tmp.196 var=93) bool__ne___uint___uint (sig.35 __ct_0.59)  <211>;
            (__trgt.331 var=162) const ()  <499>;
            () void_br_bool_t13s_s2 (__tmp.196 __trgt.331)  <500>;
            (__either.332 var=154) undefined ()  <501>;
            if {
                {
                    () if_expr (__either.332)  <233>;
                } #27
                {
                } #28 off=16
                {
                    (__trgt.333 var=163) const ()  <502>;
                    () void_j_t21s_s2 (__trgt.333)  <503>;
                } #29 off=15
                {
                    (__tmp.220 var=96) merge (exp.137 __ct_0.59)  <236>;
                } #30
            } #26
            #31 off=17
            (__ct_23.222 var=98) const ()  <238>;
            (__tmp.224 var=100) __uint__ls___uint___sint (__tmp.220 __ct_23.222)  <240>;
            (__tmp.225 var=101) __uint__pl___uint___uint (__tmp.307 __tmp.224)  <241>;
            (__tmp.228 var=104) __sint__pl___sint___sint (__tmp.135 __ct_m7.294)  <244>;
            (__tmp.229 var=105) __uint__ls___uint___sint (sig.35 __tmp.228)  <245>;
            (__tmp.230 var=106) __uint__pl___uint___uint (__tmp.225 __tmp.229)  <246>;
            (__ct_m7.294 var=136) const ()  <364>;
        } #24
        {
            #61 off=8
            (__tmp.243 var=115) __uint__ls___uint___sint (sig.35 __tmp.135)  <258>;
            (softfloat_roundPackToF32.247 var=118) const ()  <262>;
            (__tmp.315 var=124) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_4s0.257)  <473>;
            (__R_SP.316 var=12 __sp.317 var=18) wr_res_reg (__tmp.315 __sp.42)  <474>;
            () void_j_t21s_s2 (softfloat_roundPackToF32.247)  <479>;
            call {
                (__tmp.241 var=114 stl=X off=11) assign (sign.29)  <256>;
                (exp.242 var=29 stl=X off=12) assign (exp.137)  <257>;
                (__tmp.244 var=115 stl=X off=13) assign (__tmp.243)  <259>;
                (__la.249 var=25 stl=X off=1) assign (__la.25)  <264>;
                (__tmp.250 var=120 stl=X off=10) Fsoftfloat_roundPackToF32 (__la.249 __tmp.241 exp.242 __tmp.244)  <265>;
                (__tmp.251 var=120) deassign (__tmp.250)  <266>;
            } #34 off=9
            #62 off=10 nxt=-2
            (__rt.318 var=26 stl=X off=10) assign (__tmp.251)  <476>;
            () out (__rt.318)  <477>;
            () sink (__sp.317)  <478>;
            (__rt.319 var=26) never ()  <480>;
        } #32
        {
            (__rt.254 var=26) merge (__tmp.230 __rt.319)  <269>;
        } #35
    } #22
    #38 off=18 nxt=-2
    (__tmp.259 var=124) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_4s0.257)  <274>;
    (__R_SP.260 var=12 __sp.261 var=18) wr_res_reg (__tmp.259 __sp.42)  <275>;
    () void___rts_jr_w32 (__la.25)  <276>;
    (__rt.262 var=26 stl=X off=10) assign (__rt.254)  <277>;
    () out (__rt.262)  <278>;
    () sink (__sp.261)  <284>;
} #0
0 : 'SoftFloat-3e/source/s_normRoundPackToF32.c';
----------
0 : (0,42:0,0);
4 : (0,48:16,8);
6 : (0,48:16,9);
7 : (0,48:16,13);
9 : (0,48:16,16);
10 : (0,48:16,16);
12 : (0,48:16,17);
13 : (0,48:16,21);
15 : (0,50:12,30);
16 : (0,50:26,30);
18 : (0,50:49,31);
19 : (0,50:26,32);
22 : (0,50:4,34);
24 : (0,54:8,35);
26 : (0,51:60,35);
28 : (0,51:62,36);
29 : (0,51:60,37);
31 : (0,54:8,43);
32 : (0,52:8,44);
34 : (0,54:15,44);
38 : (0,50:4,49);
42 : (0,48:16,8);
48 : (0,51:60,35);
52 : (0,51:18,35);
53 : (0,51:18,35);
54 : (0,51:18,35);
55 : (0,51:18,35);
56 : (0,51:18,35);
61 : (0,50:4,49);
62 : (0,50:4,49);
----------
33 : (0,48:16,0);
48 : (0,43:1,0);
49 : (0,43:1,0);
51 : (0,43:1,0);
52 : (0,43:1,0);
55 : (0,46:19,0);
70 : (0,48:16,0);
72 : (0,48:16,0);
96 : (0,48:16,8);
97 : (0,48:16,0);
101 : (0,48:16,10);
102 : (0,48:16,15);
103 : (0,48:16,15);
104 : (0,48:16,0);
128 : (0,48:16,16);
129 : (0,48:16,0);
131 : (0,48:16,17);
134 : (0,48:16,18);
135 : (0,48:16,23);
136 : (0,48:16,23);
137 : (0,48:16,0);
139 : (0,48:16,24);
141 : (0,48:16,24);
142 : (0,48:16,24);
145 : (0,48:16,24);
148 : (0,48:53,28);
150 : (0,49:8,29);
151 : (0,50:12,0);
175 : (0,50:26,30);
177 : (0,50:49,0);
179 : (0,50:49,31);
182 : (0,50:26,33);
204 : (0,50:4,34);
211 : (0,51:60,35);
233 : (0,51:60,35);
236 : (0,51:60,38);
238 : (0,51:72,0);
240 : (0,51:70,39);
241 : (0,51:41,39);
244 : (0,51:95,39);
245 : (0,51:82,39);
246 : (0,51:76,39);
256 : (0,54:41,0);
257 : (0,54:47,0);
258 : (0,54:55,44);
259 : (0,54:55,0);
264 : (0,54:15,0);
265 : (0,54:15,44);
269 : (0,50:4,48);
272 : (0,50:4,0);
274 : (0,50:4,0);
275 : (0,50:4,49);
276 : (0,50:4,49);
277 : (0,50:4,0);
362 : (0,48:53,0);
364 : (0,51:95,0);
393 : (0,51:18,35);
424 : (0,51:35,0);
426 : (0,51:18,35);
450 : (0,48:16,8);
451 : (0,48:16,16);
452 : (0,50:12,30);
473 : (0,50:4,0);
474 : (0,50:4,49);
476 : (0,50:4,0);
479 : (0,54:15,44);
482 : (0,48:16,8);
487 : (0,48:16,16);
492 : (0,50:26,30);
495 : (0,51:18,35);
500 : (0,51:60,35);
506 : (0,50:4,34);

