
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:29:47 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/ui32_to_f64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t ui32_to_f64(uint32_t)
Fui32_to_f64 : user_defined, called {
    fnm : "ui32_to_f64" 'float64_t ui32_to_f64(unsigned)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : ui32_to_f64 typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : softfloat_countLeadingZeros8 typ=w08 bnd=e sz=256 algn=1 stl=DMb tref=__A256__uchar_DMb
   22 : __rd___sp typ=w32 bnd=m
   24 : __ptr_softfloat_countLeadingZeros8 typ=w32 val=0a bnd=m adro=19
   25 : __la typ=w32 bnd=p tref=w32__
   27 : __rt_low typ=w32 bnd=m tref=__uint__
   28 : __rt_high typ=w32 bnd=m tref=__uint__
   29 : a typ=w32 bnd=p tref=uint32_t__
   30 : __ct_m8S0 typ=w32 val=0S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   40 : __inl_a typ=w32 bnd=m lscp=7 tref=uint32_t__
   41 : __inl_count typ=w32 bnd=m lscp=7 tref=uint_fast8_t__
   43 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   45 : __tmp typ=bool bnd=m
   51 : __ct_65536 typ=t20s_rp12 val=16f bnd=m
   53 : __tmp typ=bool bnd=m
   54 : __ct_16 typ=w32 val=16f bnd=m
   59 : __ct_16777216 typ=t20s_rp12 val=4096f bnd=m
   61 : __tmp typ=bool bnd=m
   62 : __ct_8 typ=w32 val=8f bnd=m
   68 : __ct_24 typ=w32 val=24f bnd=m
   70 : __tmp typ=w32 bnd=m
   72 : __tmp typ=w32 bnd=m
   73 : __fch_softfloat_countLeadingZeros8 typ=__uchar bnd=m
   77 : __ct_21 typ=w32 val=21f bnd=m
   79 : __tmp typ=w32 bnd=m
   83 : __ct_1074 typ=w32 val=1074f bnd=m
   85 : __tmp typ=w32 bnd=m
   97 : uiZ_low typ=w32 bnd=m tref=__uint__
   98 : uiZ_high typ=w32 bnd=m tref=__uint__
  109 : __ct_8s0 typ=w32 val=0s0 bnd=m
  111 : __tmp typ=w32 bnd=m
  122 : __rt_low typ=w32 bnd=m tref=__uint__
  123 : __rt_high typ=w32 bnd=m tref=__uint__
  127 : __apl_ff typ=w32 bnd=m tref=__sint__
  128 : __apl_carries typ=w32 bnd=m tref=__uint__
  130 : __tmp typ=bool bnd=m
  131 : __tmp typ=bool bnd=m
  132 : __tmp typ=w32 bnd=m
  133 : __apl_r_low typ=w32 bnd=m tref=__uint__
  135 : __apl_r_high typ=w32 bnd=m tref=__uint__
  137 : __ct_m32 typ=w32 val=-32f bnd=m
  144 : __tmp_low typ=w32 bnd=m
  146 : __tmp_high typ=w32 bnd=m
  160 : __apl_r_high typ=w32 bnd=m tref=__uint__
  175 : __ct_20 typ=w32 val=20f bnd=m
  206 : __either typ=bool bnd=m
  207 : __trgt typ=t13s_s2 val=0j bnd=m
  208 : __trgt typ=t21s_s2 val=0j bnd=m
  209 : __trgt typ=t13s_s2 val=0j bnd=m
  210 : __trgt typ=t21s_s2 val=0j bnd=m
  211 : __trgt typ=t13s_s2 val=0j bnd=m
  212 : __trgt typ=t21s_s2 val=0j bnd=m
  213 : __trgt typ=t13s_s2 val=0j bnd=m
  214 : __trgt typ=t21s_s2 val=0j bnd=m
  215 : __trgt typ=t13s_s2 val=0j bnd=m
  216 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fui32_to_f64 {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (softfloat_countLeadingZeros8.18 var=19) source ()  <29>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (a.32 var=29 stl=X off=12) inp ()  <43>;
    (a.33 var=29) deassign (a.32)  <44>;
    (__rd___sp.35 var=22) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_m8S0.36 var=30) const ()  <47>;
    (__tmp.38 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_m8S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (__rd___sp.41 var=22) rd_res_reg (__R_SP.11 __sp.40)  <52>;
    (__ct_0.54 var=43) const ()  <65>;
    (__tmp.236 var=45) bool__eq___uint___uint (a.33 __ct_0.54)  <298>;
    (__trgt.385 var=215) const ()  <641>;
    () void_br_bool_t13s_s2 (__tmp.236 __trgt.385)  <642>;
    (__either.386 var=206) undefined ()  <643>;
    if {
        {
            () if_expr (__either.386)  <89>;
        } #5
        {
        } #6 off=14
        {
            #8 off=1
            (__ct_65536.86 var=51) const ()  <98>;
            (__tmp.369 var=53) bool__ge___uint___uint (a.33 __ct_65536.86)  <602>;
            (__trgt.373 var=207) const ()  <621>;
            () void_br_bool_t13s_s2 (__tmp.369 __trgt.373)  <622>;
            (__either.374 var=206) undefined ()  <623>;
            if {
                {
                    () if_expr (__either.374)  <121>;
                } #10
                {
                } #12 off=3
                {
                    (__ct_16.109 var=54) const ()  <122>;
                    (__inl_a.113 var=40) __uint__ls___uint___sint (a.33 __ct_16.109)  <126>;
                    (__trgt.375 var=208) const ()  <624>;
                    () void_j_t21s_s2 (__trgt.375)  <625>;
                } #11 off=2
                {
                    (__inl_a.114 var=40) merge (a.33 __inl_a.113)  <127>;
                    (__inl_count.115 var=41) merge (__ct_0.54 __ct_16.109)  <128>;
                } #13
            } #9
            #14 off=4
            (__ct_16777216.116 var=59) const ()  <129>;
            (__tmp.370 var=61) bool__ge___uint___uint (__inl_a.114 __ct_16777216.116)  <603>;
            (__trgt.376 var=209) const ()  <626>;
            () void_br_bool_t13s_s2 (__tmp.370 __trgt.376)  <627>;
            (__either.377 var=206) undefined ()  <628>;
            if {
                {
                    () if_expr (__either.377)  <152>;
                } #16
                {
                } #18 off=6
                {
                    (__ct_8.139 var=62) const ()  <153>;
                    (__inl_count.141 var=41) __uint__pl___uint___uint (__inl_count.115 __ct_8.139)  <155>;
                    (__inl_a.144 var=40) __uint__ls___uint___sint (__inl_a.114 __ct_8.139)  <158>;
                    (__trgt.378 var=210) const ()  <629>;
                    () void_j_t21s_s2 (__trgt.378)  <630>;
                } #17 off=5
                {
                    (__inl_a.145 var=40) merge (__inl_a.114 __inl_a.144)  <159>;
                    (__inl_count.146 var=41) merge (__inl_count.115 __inl_count.141)  <160>;
                } #19
            } #15
            #121 off=7
            (__ptr_softfloat_countLeadingZeros8.22 var=24) const ()  <33>;
            (__ct_24.147 var=68) const ()  <161>;
            (__tmp.149 var=70) __uint__rs___uint___sint (__inl_a.145 __ct_24.147)  <163>;
            (__tmp.151 var=72) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_countLeadingZeros8.22 __tmp.149)  <165>;
            (__fch_softfloat_countLeadingZeros8.152 var=73) load (__M_DMb.2 __tmp.151 softfloat_countLeadingZeros8.18)  <166>;
            (__inl_count.155 var=41) __uint__pl___uint___uint (__inl_count.146 __fch_softfloat_countLeadingZeros8.152)  <169>;
            (__ct_21.156 var=77) const ()  <170>;
            (__tmp.158 var=79) __uint__pl___uint___uint (__inl_count.155 __ct_21.156)  <172>;
            (__ct_1074.162 var=83) const ()  <176>;
            (__tmp.164 var=85) __sint__mi___sint___sint (__ct_1074.162 __tmp.158)  <178>;
            (__apl_r_high.261 var=135) __uint__ls___uint___sint (__tmp.164 __ct_20.336)  <342>;
            (__tmp.279 var=130) bool__eq___sint___sint (__tmp.158 __ct_0.54)  <364>;
            (__ct_20.336 var=175) const ()  <450>;
            (__trgt.382 var=213) const ()  <636>;
            () void_br_bool_t13s_s2 (__tmp.279 __trgt.382)  <637>;
            (__either.383 var=206) undefined ()  <638>;
            if {
                {
                    () if_expr (__either.383)  <367>;
                } #58
                {
                } #59 off=12
                {
                    #61 off=8
                    (__ct_m32.252 var=137) const ()  <331>;
                    (__apl_ff.282 var=127) __sint__pl___sint___sint (__tmp.158 __ct_m32.252)  <368>;
                    (__tmp.283 var=131) bool__lt___sint___sint (__apl_ff.282 __ct_0.54)  <369>;
                    (__trgt.379 var=211) const ()  <631>;
                    () void_br_bool_t13s_s2 (__tmp.283 __trgt.379)  <632>;
                    (__either.380 var=206) undefined ()  <633>;
                    if {
                        {
                            () if_expr (__either.380)  <370>;
                        } #63
                        {
                            (__tmp.284 var=132) __sint__mi___sint___sint (__ct_0.54 __apl_ff.282)  <371>;
                            (__apl_carries.285 var=128) __uint__rs___uint___sint (a.33 __tmp.284)  <372>;
                            (__apl_r_low.286 var=133) __uint__ls___uint___sint (a.33 __tmp.158)  <373>;
                        } #64 off=10
                        {
                            (__apl_r_high.289 var=135) __uint__ls___uint___sint (a.33 __apl_ff.282)  <376>;
                            (__trgt.381 var=212) const ()  <634>;
                            () void_j_t21s_s2 (__trgt.381)  <635>;
                        } #65 off=9
                        {
                            (__rt_low.290 var=122) merge (__apl_r_low.286 __ct_0.54)  <377>;
                            (__rt_high.291 var=123) merge (__apl_carries.285 __apl_r_high.289)  <378>;
                        } #66
                    } #62
                    #127 off=11
                    (__trgt.384 var=214) const ()  <639>;
                    () void_j_t21s_s2 (__trgt.384)  <640>;
                } #60
                {
                    (__tmp_low.292 var=144) merge (a.33 __rt_low.290)  <379>;
                    (__tmp_high.293 var=146) merge (__ct_0.54 __rt_high.291)  <380>;
                } #67
            } #57
            #81 off=13
            (__apl_r_high.310 var=160) __uint__pl___uint___uint (__apl_r_high.261 __tmp_high.293)  <402>;
            (__trgt.387 var=216) const ()  <644>;
            () void_j_t21s_s2 (__trgt.387)  <645>;
        } #7
        {
            (uiZ_low.239 var=97) merge (__ct_0.54 __tmp_low.292)  <301>;
            (uiZ_high.242 var=98) merge (__ct_0.54 __apl_r_high.310)  <304>;
        } #21
    } #4
    #24 off=15 nxt=-2
    (__ct_8s0.203 var=109) const ()  <215>;
    (__tmp.205 var=111) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_8s0.203)  <217>;
    (__R_SP.206 var=12 __sp.207 var=18) wr_res_reg (__tmp.205 __sp.40)  <218>;
    () void___rts_jr_w32 (__la.25)  <219>;
    (__rt_low.209 var=27 stl=X off=10) assign (uiZ_low.239)  <221>;
    () out (__rt_low.209)  <222>;
    (__rt_high.211 var=28 stl=X off=11) assign (uiZ_high.242)  <224>;
    () out (__rt_high.211)  <225>;
    () sink (__sp.207)  <231>;
} #0
0 : 'SoftFloat-3e/source/ui32_to_f64.c';
----------
0 : (0,42:0,0);
3 : (0,48:9,4);
4 : (0,48:4,4);
6 : (0,48:15,5);
7 : (0,50:11,8);
8 : (0,51:20,13);
9 : (0,51:20,13);
11 : (0,51:20,14);
12 : (0,51:20,18);
14 : (0,51:20,21);
15 : (0,51:20,21);
17 : (0,51:20,22);
18 : (0,51:20,26);
24 : (0,56:4,39);
57 : (0,53:104,34);
58 : (0,53:104,34);
59 : (0,53:104,34);
60 : (0,53:104,34);
61 : (0,53:104,34);
62 : (0,53:104,34);
63 : (0,53:104,34);
64 : (0,53:104,34);
65 : (0,53:104,34);
66 : (0,53:104,34);
67 : (0,53:104,34);
81 : (0,53:84,34);
121 : (0,53:104,34);
----------
46 : (0,42:10,0);
47 : (0,42:10,0);
49 : (0,42:10,0);
50 : (0,42:10,0);
52 : (0,46:19,0);
65 : (0,48:9,0);
89 : (0,48:4,4);
98 : (0,51:20,0);
121 : (0,51:20,13);
122 : (0,51:20,0);
126 : (0,51:20,15);
127 : (0,51:20,20);
128 : (0,51:20,20);
129 : (0,51:20,0);
152 : (0,51:20,21);
153 : (0,51:20,0);
155 : (0,51:20,22);
158 : (0,51:20,23);
159 : (0,51:20,28);
160 : (0,51:20,28);
161 : (0,51:20,0);
163 : (0,51:20,29);
165 : (0,51:20,29);
166 : (0,51:20,29);
169 : (0,51:20,29);
170 : (0,51:55,0);
172 : (0,51:55,33);
176 : (0,53:66,0);
178 : (0,53:66,34);
215 : (0,56:4,0);
217 : (0,56:4,0);
218 : (0,56:4,39);
219 : (0,56:4,39);
221 : (0,56:13,0);
224 : (0,56:13,0);
298 : (0,48:9,4);
331 : (0,53:78,0);
342 : (0,53:78,34);
364 : (0,53:104,34);
367 : (0,53:104,34);
368 : (0,53:104,34);
369 : (0,53:104,34);
370 : (0,53:104,34);
371 : (0,53:104,34);
372 : (0,53:104,34);
373 : (0,53:104,34);
376 : (0,53:104,34);
377 : (0,53:104,34);
378 : (0,53:104,34);
379 : (0,53:104,34);
380 : (0,53:104,34);
402 : (0,53:84,34);
450 : (0,53:78,0);
602 : (0,51:20,13);
603 : (0,51:20,21);
622 : (0,51:20,13);
627 : (0,51:20,21);
632 : (0,53:104,34);
637 : (0,53:104,34);
642 : (0,48:4,4);

