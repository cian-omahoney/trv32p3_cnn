
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:31:56 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f64_to_ui64_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint_fast64_t f64_to_ui64_r_minMag(float64_t, bool)
Ff64_to_ui64_r_minMag : user_defined, called {
    fnm : "f64_to_ui64_r_minMag" 'unsigned long long f64_to_ui64_r_minMag(float64_t, bool)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f64_to_ui64_r_minMag typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   23 : __rt_low typ=w32 bnd=m tref=__uint__
   24 : __rt_high typ=w32 bnd=m tref=__uint__
   26 : a_low typ=w32 bnd=m tref=__uint__
   27 : a_high typ=w32 bnd=m tref=__uint__
   28 : exact typ=w32 bnd=p tref=bool__
   30 : __ct_m8S0 typ=w32 val=0S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   39 : exp typ=w32 bnd=m tref=int_fast16_t__
   41 : shiftDist typ=w32 bnd=m tref=int_fast16_t__
   45 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   62 : __ct_2047 typ=w32 val=2047f bnd=m
   68 : __ct_1075 typ=w32 val=1075f bnd=m
   71 : __ct_53 typ=w32 val=53f bnd=m
   73 : __tmp typ=bool bnd=m
   84 : __tmp typ=bool bnd=m
   90 : __tmp typ=bool bnd=m
  101 : __tmp typ=bool bnd=m
  102 : __ct_m11 typ=w32 val=-11f bnd=m
  104 : __tmp typ=bool bnd=m
  110 : __tmp typ=w32 bnd=m
  117 : __ct_8s0 typ=w32 val=0s0 bnd=m
  119 : __tmp typ=w32 bnd=m
  125 : __ct_4294967295 typ=w32 val=-1f bnd=m
  130 : __rt_low typ=w32 bnd=m tref=__uint__
  131 : __rt_high typ=w32 bnd=m tref=__uint__
  135 : __apl_ff typ=w32 bnd=m tref=__sint__
  136 : __apl_carries typ=w32 bnd=m tref=__uint__
  138 : __tmp typ=bool bnd=m
  139 : __tmp typ=bool bnd=m
  140 : __tmp typ=w32 bnd=m
  141 : __tmp typ=w32 bnd=m
  142 : __apl_r_low typ=w32 bnd=m tref=__uint__
  143 : __apl_r_high typ=w32 bnd=m tref=__uint__
  145 : __ct_m32 typ=w32 val=-32f bnd=m
  160 : sig_high typ=w32 bnd=m
  177 : __tmp typ=bool bnd=m
  202 : __tmp_high typ=w32 bnd=m
  208 : __rt_low typ=w32 bnd=m tref=__uint__
  209 : __rt_high typ=w32 bnd=m tref=__uint__
  213 : __apl_ff typ=w32 bnd=m tref=__sint__
  214 : __apl_carries typ=w32 bnd=m tref=__uint__
  216 : __tmp typ=bool bnd=m
  217 : __tmp typ=bool bnd=m
  218 : __tmp typ=w32 bnd=m
  219 : __apl_r_low typ=w32 bnd=m tref=__uint__
  220 : __tmp typ=w32 bnd=m
  221 : __apl_r_high typ=w32 bnd=m tref=__uint__
  224 : z_low typ=w32 bnd=m
  226 : z_high typ=w32 bnd=m
  230 : z_low typ=w32 bnd=m
  232 : z_high typ=w32 bnd=m
  238 : __ct_20 typ=w32 val=20f bnd=m
  240 : __ct_31 typ=w32 val=31f bnd=m
  242 : __ct_1048575 typ=w32 val=1048575f bnd=m
  243 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  246 : __tmpd typ=w32 bnd=m
  247 : __tmp typ=bool bnd=m
  262 : __false typ=bool val=0f bnd=m
  263 : __either typ=bool bnd=m
  264 : __trgt typ=t13s_s2 val=0j bnd=m
  265 : __trgt typ=t13s_s2 val=0j bnd=m
  266 : __trgt typ=t21s_s2 val=0j bnd=m
  267 : __trgt typ=t13s_s2 val=0j bnd=m
  268 : __trgt typ=t21s_s2 val=0j bnd=m
  269 : __trgt typ=t13s_s2 val=0j bnd=m
  270 : __trgt typ=t13s_s2 val=0j bnd=m
  271 : __trgt typ=t21s_s2 val=0j bnd=m
  272 : __trgt typ=t13s_s2 val=0j bnd=m
  273 : __trgt typ=t21s_s2 val=0j bnd=m
  274 : __trgt typ=t13s_s2 val=0j bnd=m
  275 : __trgt typ=t21s_s2 val=0j bnd=m
  276 : __trgt typ=t13s_s2 val=0j bnd=m
  277 : __trgt typ=t21s_s2 val=0j bnd=m
  278 : __trgt typ=t13s_s2 val=0j bnd=m
  279 : __trgt typ=t21s_s2 val=0j bnd=m
  280 : __trgt typ=t13s_s2 val=0j bnd=m
  281 : __trgt typ=t21s_s2 val=0j bnd=m
  282 : __trgt typ=t13s_s2 val=0j bnd=m
  283 : __trgt typ=t21s_s2 val=0j bnd=m
  284 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_to_ui64_r_minMag {
    #188 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a_low.29 var=26 stl=X off=12) inp ()  <40>;
    (a_low.30 var=26) deassign (a_low.29)  <41>;
    (a_high.33 var=27 stl=X off=13) inp ()  <44>;
    (a_high.34 var=27) deassign (a_high.33)  <45>;
    (exact.37 var=28 stl=X off=14) inp ()  <48>;
    (__rd___sp.40 var=20) rd_res_reg (__R_SP.11 __sp.17)  <51>;
    (__ct_m8S0.41 var=30) const ()  <52>;
    (__tmp.43 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_m8S0.41)  <54>;
    (__R_SP.44 var=12 __sp.45 var=18) wr_res_reg (__tmp.43 __sp.17)  <55>;
    (__rd___sp.47 var=20) rd_res_reg (__R_SP.11 __sp.45)  <58>;
    (__ct_0.65 var=45) const ()  <76>;
    (__ct_2047.92 var=62) const ()  <101>;
    (exp.94 var=39) __sint__ad___sint___sint (__apl_r_low.465 __ct_2047.92)  <103>;
    (__ct_1075.98 var=68) const ()  <107>;
    (shiftDist.100 var=41) __sint__mi___sint___sint (__ct_1075.98 exp.94)  <109>;
    (__ct_53.101 var=71) const ()  <110>;
    (__tmp.103 var=73) bool__ge___sint___sint (shiftDist.100 __ct_53.101)  <112>;
    (__apl_r_low.465 var=142) __uint__rs___uint___sint (a_high.34 __ct_20.629)  <568>;
    (sig_high.484 var=160) __uint__ad___uint___uint (a_high.34 __ct_1048575.633)  <591>;
    (__ct_20.629 var=238) const ()  <789>;
    (__ct_1048575.633 var=242) const ()  <797>;
    (__trgt.682 var=282) const ()  <949>;
    () void_br_bool_t13s_s2 (__tmp.103 __trgt.682)  <950>;
    (__either.683 var=263) undefined ()  <951>;
    if {
        {
            () if_expr (__either.683)  <131>;
        } #6
        {
        } #7 off=32
        {
            #117 off=1
            (__apl_r_low.510 var=142) __uint__rs___uint___sint (a_high.34 __ct_31.631)  <623>;
            (__tmp.530 var=177) bool__ne___uint___uint (__apl_r_low.510 __ct_0.65)  <648>;
            (__ct_31.631 var=240) const ()  <793>;
            (__trgt.679 var=280) const ()  <944>;
            () void_br_bool_t13s_s2 (__tmp.530 __trgt.679)  <945>;
            (__either.680 var=263) undefined ()  <946>;
            if {
                {
                    () if_expr (__either.680)  <158>;
                } #11
                {
                    sync {
                    } #1 off=22
                    #13 off=23
                    (__ct_4294967295.425 var=125) const ()  <508>;
                    (__tmp.650 var=84) bool__ne___sint___sint (exp.94 __ct_2047.92)  <883>;
                    (__trgt.653 var=264) const ()  <901>;
                    () void_br_bool_t13s_s2 (__tmp.650 __trgt.653)  <902>;
                    (__either.654 var=263) undefined ()  <903>;
                    if {
                        {
                            () if_expr (__either.654)  <198>;
                        } #15
                        {
                            (__false.658 var=262) const ()  <909>;
                        } #17
                        {
                            (__tmpd.637 var=246) __uint__or___uint___uint (sig_high.484 a_low.30)  <819>;
                            (__tmp.638 var=247) bool__ne___uint___uint (__tmpd.637 __ct_0.65)  <820>;
                            (__trgt.659 var=267) const ()  <910>;
                            () void_br_bool_t13s_s2 (__tmp.638 __trgt.659)  <911>;
                            (__either.660 var=263) undefined ()  <912>;
                        } #123 off=24
                        {
                            (__tmp.192 var=90) merge (__false.658 __either.660)  <204>;
                        } #18
                    } #14
                    if {
                        {
                            () if_expr (__tmp.192)  <223>;
                        } #21
                        {
                        } #22 off=29
                        {
                            #196 off=25
                            (__trgt.655 var=265) const ()  <904>;
                            () void_br_bool_t13s_s2 (__tmp.686 __trgt.655)  <905>;
                            (__either.656 var=263) undefined ()  <906>;
                            (__tmp.686 var=177) bool__ne___uint___uint (__apl_r_low.510 __ct_0.65)  <956>;
                            if {
                                {
                                    () if_expr (__either.656)  <244>;
                                } #26
                                {
                                } #27 off=27
                                {
                                    (__trgt.657 var=266) const ()  <907>;
                                    () void_j_t21s_s2 (__trgt.657)  <908>;
                                } #28 off=26
                                {
                                    (__rt_low.428 var=23) merge (__ct_0.65 __ct_4294967295.425)  <512>;
                                } #29
                            } #25
                            #198 off=28
                            (__trgt.661 var=268) const ()  <913>;
                            () void_j_t21s_s2 (__trgt.661)  <914>;
                        } #23
                        {
                            (__rt_low.424 var=23) merge (__ct_4294967295.425 __rt_low.428)  <507>;
                        } #30
                    } #20
                } #12
                {
                    #134 off=2
                    (__ct_m32.456 var=145) const ()  <557>;
                    (__tmp.552 var=101) bool__ge___sint___sint (__ct_0.65 shiftDist.100)  <677>;
                    (__tmp_high.559 var=202) __uint__or___uint___uint (sig_high.484 __ct_1048576.634)  <687>;
                    (__ct_1048576.634 var=243) const ()  <799>;
                    (__trgt.676 var=278) const ()  <939>;
                    () void_br_bool_t13s_s2 (__tmp.552 __trgt.676)  <940>;
                    (__either.677 var=263) undefined ()  <941>;
                    if {
                        {
                            () if_expr (__either.677)  <272>;
                        } #34
                        {
                            #36 off=10
                            (__ct_m11.258 var=102) const ()  <273>;
                            (__tmp.260 var=104) bool__lt___sint___sint (shiftDist.100 __ct_m11.258)  <275>;
                            (__trgt.662 var=269) const ()  <915>;
                            () void_br_bool_t13s_s2 (__tmp.260 __trgt.662)  <916>;
                            (__either.663 var=263) undefined ()  <917>;
                            if {
                                {
                                    () if_expr (__either.663)  <294>;
                                    () chess_rear_then ()  <918>;
                                } #38
                                {
                                    () sink (__sp.45)  <300>;
                                    (__trgt.685 var=284) const ()  <954>;
                                    () void_j_t21s_s2 (__trgt.685)  <955>;
                                } #40 off=12 nxt=-3 tgt=1
                                {
                                } #41 off=11
                                {
                                } #42
                            } #37
                            #146 off=13
                            (__tmp.320 var=110) __sint__mi___sint___sint (__ct_0.65 shiftDist.100)  <360>;
                            (__tmp.575 var=216) bool__eq___sint___sint (__tmp.320 __ct_0.65)  <707>;
                            (__trgt.667 var=272) const ()  <924>;
                            () void_br_bool_t13s_s2 (__tmp.575 __trgt.667)  <925>;
                            (__either.668 var=263) undefined ()  <926>;
                            if {
                                {
                                    () if_expr (__either.668)  <710>;
                                } #148
                                {
                                } #149 off=18
                                {
                                    #151 off=14
                                    (__apl_ff.578 var=213) __sint__pl___sint___sint (__tmp.320 __ct_m32.456)  <711>;
                                    (__tmp.579 var=217) bool__lt___sint___sint (__apl_ff.578 __ct_0.65)  <712>;
                                    (__trgt.664 var=270) const ()  <919>;
                                    () void_br_bool_t13s_s2 (__tmp.579 __trgt.664)  <920>;
                                    (__either.665 var=263) undefined ()  <921>;
                                    if {
                                        {
                                            () if_expr (__either.665)  <713>;
                                        } #153
                                        {
                                            (__tmp.580 var=218) __sint__mi___sint___sint (__ct_0.65 __apl_ff.578)  <714>;
                                            (__apl_carries.581 var=214) __uint__rs___uint___sint (a_low.30 __tmp.580)  <715>;
                                            (__apl_r_low.582 var=219) __uint__ls___uint___sint (a_low.30 __tmp.320)  <716>;
                                            (__tmp.583 var=220) __uint__ls___uint___sint (__tmp_high.559 __tmp.320)  <717>;
                                            (__apl_r_high.584 var=221) __uint__or___uint___uint (__tmp.583 __apl_carries.581)  <718>;
                                        } #154 off=16
                                        {
                                            (__apl_r_high.585 var=221) __uint__ls___uint___sint (a_low.30 __apl_ff.578)  <719>;
                                            (__trgt.666 var=271) const ()  <922>;
                                            () void_j_t21s_s2 (__trgt.666)  <923>;
                                        } #155 off=15
                                        {
                                            (__rt_low.586 var=208) merge (__apl_r_low.582 __ct_0.65)  <720>;
                                            (__rt_high.587 var=209) merge (__apl_r_high.584 __apl_r_high.585)  <721>;
                                        } #156
                                    } #152
                                    #200 off=17
                                    (__trgt.669 var=273) const ()  <927>;
                                    () void_j_t21s_s2 (__trgt.669)  <928>;
                                } #150
                                {
                                    (z_low.588 var=224) merge (a_low.30 __rt_low.586)  <722>;
                                    (z_high.589 var=226) merge (__tmp_high.559 __rt_high.587)  <723>;
                                } #157
                            } #147
                        } #35
                        {
                            #165 off=3
                            (__tmp.603 var=138) bool__eq___sint___sint (shiftDist.100 __ct_0.65)  <741>;
                            (__trgt.673 var=276) const ()  <934>;
                            () void_br_bool_t13s_s2 (__tmp.603 __trgt.673)  <935>;
                            (__either.674 var=263) undefined ()  <936>;
                            if {
                                {
                                    () if_expr (__either.674)  <744>;
                                } #167
                                {
                                } #168 off=8
                                {
                                    #170 off=4
                                    (__apl_ff.606 var=135) __sint__pl___sint___sint (shiftDist.100 __ct_m32.456)  <745>;
                                    (__tmp.607 var=139) bool__lt___sint___sint (__apl_ff.606 __ct_0.65)  <746>;
                                    (__trgt.670 var=274) const ()  <929>;
                                    () void_br_bool_t13s_s2 (__tmp.607 __trgt.670)  <930>;
                                    (__either.671 var=263) undefined ()  <931>;
                                    if {
                                        {
                                            () if_expr (__either.671)  <747>;
                                        } #172
                                        {
                                            (__tmp.608 var=140) __sint__mi___sint___sint (__ct_0.65 __apl_ff.606)  <748>;
                                            (__apl_carries.609 var=136) __uint__ls___uint___sint (__tmp_high.559 __tmp.608)  <749>;
                                            (__tmp.610 var=141) __uint__rs___uint___sint (a_low.30 shiftDist.100)  <750>;
                                            (__apl_r_low.611 var=142) __uint__or___uint___uint (__tmp.610 __apl_carries.609)  <751>;
                                            (__apl_r_high.612 var=143) __uint__rs___uint___sint (__tmp_high.559 shiftDist.100)  <752>;
                                        } #173 off=6
                                        {
                                            (__apl_r_low.613 var=142) __uint__rs___uint___sint (__tmp_high.559 __apl_ff.606)  <753>;
                                            (__trgt.672 var=275) const ()  <932>;
                                            () void_j_t21s_s2 (__trgt.672)  <933>;
                                        } #174 off=5
                                        {
                                            (__rt_low.614 var=130) merge (__apl_r_low.611 __apl_r_low.613)  <754>;
                                            (__rt_high.615 var=131) merge (__apl_r_high.612 __ct_0.65)  <755>;
                                        } #175
                                    } #171
                                    #202 off=7
                                    (__trgt.675 var=277) const ()  <937>;
                                    () void_j_t21s_s2 (__trgt.675)  <938>;
                                } #169
                                {
                                    (z_low.616 var=230) merge (a_low.30 __rt_low.614)  <756>;
                                    (z_high.617 var=232) merge (__tmp_high.559 __rt_high.615)  <757>;
                                } #176
                            } #166
                            #203 off=9
                            (__trgt.678 var=279) const ()  <942>;
                            () void_j_t21s_s2 (__trgt.678)  <943>;
                        } #44
                        {
                            (__rt_low.431 var=23) merge (z_low.588 z_low.616)  <515>;
                            (__rt_high.446 var=24) merge (z_high.589 z_high.617)  <530>;
                        } #45
                    } #33
                    #204 off=20
                    (__trgt.681 var=281) const ()  <947>;
                    () void_j_t21s_s2 (__trgt.681)  <948>;
                } #31
                {
                    (__rt_low.421 var=23) merge (__rt_low.424 __rt_low.431)  <504>;
                    (__rt_high.437 var=24) merge (__rt_low.424 __rt_high.446)  <521>;
                } #46
            } #10
            #205 off=31
            (__trgt.684 var=283) const ()  <952>;
            () void_j_t21s_s2 (__trgt.684)  <953>;
        } #8
        {
            (__rt_low.417 var=23) merge (__ct_0.65 __rt_low.421)  <499>;
            (__rt_high.434 var=24) merge (__ct_0.65 __rt_high.437)  <518>;
        } #47
    } #5
    #50 off=33 nxt=-2
    (__ct_8s0.382 var=117) const ()  <422>;
    (__tmp.384 var=119) __Pvoid__pl___Pvoid___sint (__rd___sp.47 __ct_8s0.382)  <424>;
    (__R_SP.385 var=12 __sp.386 var=18) wr_res_reg (__tmp.384 __sp.45)  <425>;
    () void___rts_jr_w32 (__la.21)  <426>;
    (__rt_low.388 var=23 stl=X off=10) assign (__rt_low.417)  <428>;
    () out (__rt_low.388)  <429>;
    (__rt_high.390 var=24 stl=X off=11) assign (__rt_high.434)  <431>;
    () out (__rt_high.390)  <432>;
    () sink (__sp.386)  <440>;
} #0
0 : 'SoftFloat-3e/source/f64_to_ui64_r_minMag.c';
----------
0 : (0,44:0,0);
1 : (0,93:1,22);
5 : (0,66:4,14);
7 : (0,66:27,15);
8 : (0,72:8,18);
10 : (0,77:4,20);
12 : (0,90:4,21);
13 : (0,98:13,23);
14 : (0,98:23,23);
17 : (0,98:23,25);
20 : (0,98:30,27);
22 : (0,98:32,28);
23 : (0,99:8,29);
25 : (0,99:8,29);
27 : (0,99:8,30);
28 : (0,99:14,31);
31 : (0,93:1,38);
33 : (0,78:4,39);
35 : (0,78:26,40);
36 : (0,79:23,40);
37 : (0,79:8,40);
40 : (0,79:31,41);
41 : (0,79:8,43);
44 : (0,81:11,49);
50 : (0,97:4,61);
117 : (0,76:12,19);
123 : (0,98:23,24);
134 : (0,78:19,39);
146 : (0,80:41,46);
147 : (0,80:41,46);
148 : (0,80:41,46);
149 : (0,80:41,46);
150 : (0,80:41,46);
151 : (0,80:41,46);
152 : (0,80:41,46);
153 : (0,80:41,46);
154 : (0,80:41,46);
155 : (0,80:41,46);
156 : (0,80:41,46);
157 : (0,80:41,46);
165 : (0,83:15,50);
166 : (0,83:15,50);
167 : (0,83:15,50);
168 : (0,83:15,50);
169 : (0,83:15,50);
170 : (0,83:15,50);
171 : (0,83:15,50);
172 : (0,83:15,50);
173 : (0,83:15,50);
174 : (0,83:15,50);
175 : (0,83:15,50);
176 : (0,83:15,50);
188 : (0,66:12,14);
----------
51 : (0,44:14,0);
52 : (0,44:14,0);
54 : (0,44:14,0);
55 : (0,44:14,0);
58 : (0,49:19,0);
76 : (0,59:6,0);
101 : (0,61:38,0);
103 : (0,61:38,11);
107 : (0,65:22,0);
109 : (0,65:22,13);
110 : (0,66:12,0);
112 : (0,66:12,14);
131 : (0,66:4,14);
158 : (0,77:4,20);
198 : (0,98:23,23);
204 : (0,98:23,26);
223 : (0,98:30,27);
244 : (0,99:8,29);
272 : (0,78:4,39);
273 : (0,79:23,0);
275 : (0,79:23,40);
294 : (0,79:8,40);
360 : (0,80:43,46);
422 : (0,97:4,0);
424 : (0,97:4,0);
425 : (0,97:4,61);
426 : (0,97:4,61);
428 : (0,97:4,0);
431 : (0,97:4,0);
508 : (0,98:32,0);
557 : (0,61:32,0);
568 : (0,61:32,11);
591 : (0,62:17,12);
623 : (0,76:36,19);
648 : (0,76:12,19);
677 : (0,78:19,39);
687 : (0,80:17,46);
707 : (0,80:41,46);
710 : (0,80:41,46);
711 : (0,80:41,46);
712 : (0,80:41,46);
713 : (0,80:41,46);
714 : (0,80:41,46);
715 : (0,80:41,46);
716 : (0,80:41,46);
717 : (0,80:41,46);
718 : (0,80:41,46);
719 : (0,80:41,46);
720 : (0,80:41,46);
721 : (0,80:41,46);
722 : (0,80:41,46);
723 : (0,80:41,46);
741 : (0,83:15,50);
744 : (0,83:15,50);
745 : (0,83:15,50);
746 : (0,83:15,50);
747 : (0,83:15,50);
748 : (0,83:15,50);
749 : (0,83:15,50);
750 : (0,83:15,50);
751 : (0,83:15,50);
752 : (0,83:15,50);
753 : (0,83:15,50);
754 : (0,83:15,50);
755 : (0,83:15,50);
756 : (0,83:15,50);
757 : (0,83:15,50);
789 : (0,61:32,0);
793 : (0,76:36,0);
797 : (0,62:19,0);
799 : (0,80:19,0);
819 : (0,98:23,24);
820 : (0,98:23,24);
883 : (0,98:13,23);
902 : (0,98:23,23);
905 : (0,99:8,29);
911 : (0,98:30,27);
916 : (0,79:8,40);
920 : (0,80:41,46);
925 : (0,80:41,46);
930 : (0,83:15,50);
935 : (0,83:15,50);
940 : (0,78:4,39);
945 : (0,77:4,20);
950 : (0,66:4,14);

