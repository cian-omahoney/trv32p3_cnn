
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 13:34:41 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/ui64_to_f32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t ui64_to_f32(uint64_t)
Fui64_to_f32 : user_defined, called {
    fnm : "ui64_to_f32" 'float32_t ui64_to_f32(unsigned long long)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
!!  uint_fast8_t softfloat_countLeadingZeros64(uint64_t)
Fsoftfloat_countLeadingZeros64 : user_defined, called {
    fnm : "softfloat_countLeadingZeros64" 'uint_fast8_t softfloat_countLeadingZeros64(uint64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : ui64_to_f32 typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   22 : __rt typ=w32 bnd=p tref=float32_t___1
   24 : a_low typ=w32 bnd=m tref=__uint__
   25 : a_high typ=w32 bnd=m tref=__uint__
   26 : __ct_m4S0 typ=w32 val=0S0 bnd=m
   28 : __tmp typ=w32 bnd=m
   33 : shiftDist typ=w32 bnd=m tref=int_fast8_t__
   34 : sig typ=w32 bnd=m tref=uint_fast32_t__
   37 : softfloat_countLeadingZeros64 typ=t21s_s2 val=0r bnd=m
   38 : __link typ=w32 bnd=m
   39 : __tmp typ=w32 bnd=m
   42 : __tmp typ=w32 bnd=m
   44 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   46 : __tmp typ=bool bnd=m
   52 : __ct_149 typ=w32 val=149f bnd=m
   54 : __tmp typ=w32 bnd=m
   56 : __ct_23 typ=w32 val=23f bnd=m
   58 : __tmp typ=w32 bnd=m
   61 : __tmp typ=w32 bnd=m
   62 : __tmp typ=w32 bnd=m
   65 : __tmp typ=w32 bnd=m
   73 : __ct_7 typ=w32 val=7f bnd=m
   78 : __tmp typ=bool bnd=m
   81 : __tmp typ=w32 bnd=m
   85 : __tmp typ=w32 bnd=m
   91 : __tmp typ=w32 bnd=m
   92 : __ct_156 typ=w32 val=156f bnd=m
   94 : __tmp typ=w32 bnd=m
   97 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
   99 : __tmp typ=w32 bnd=m
  100 : __ct_4s0 typ=w32 val=0s0 bnd=m
  102 : __tmp typ=w32 bnd=m
  115 : __ct_4294967256 typ=w32 val=-40f bnd=m
  148 : __tmpd typ=w32 bnd=m
  149 : __tmp typ=bool bnd=m
  150 : __rt_low typ=w32 bnd=m tref=__uint__
  155 : __apl_ff typ=w32 bnd=m tref=__sint__
  156 : __apl_carries typ=w32 bnd=m tref=__uint__
  158 : __tmp typ=bool bnd=m
  159 : __tmp typ=bool bnd=m
  160 : __tmp typ=w32 bnd=m
  161 : __tmp typ=w32 bnd=m
  162 : __apl_r_low typ=w32 bnd=m tref=__uint__
  165 : __ct_m32 typ=w32 val=-32f bnd=m
  166 : __tmp_low typ=w32 bnd=m
  172 : __rt_low typ=w32 bnd=m tref=__uint__
  173 : __rt_high typ=w32 bnd=m tref=__uint__
  178 : __apl_carries typ=w32 bnd=m tref=__uint__
  183 : __apl_r_low typ=w32 bnd=m tref=__uint__
  185 : __apl_r_high typ=w32 bnd=m tref=__uint__
  188 : __tmp_low typ=w32 bnd=m
  190 : __tmp_high typ=w32 bnd=m
  203 : __apl_r_low typ=w32 bnd=m tref=__uint__
  204 : __apl_r_high typ=w32 bnd=m tref=__uint__
  223 : __tmp_low typ=w32 bnd=m
  225 : __tmp_high typ=w32 bnd=m
  242 : __tmp_low typ=w32 bnd=m
  252 : __ct_1 typ=w32 val=1f bnd=m
  253 : __ct_4294967295 typ=w32 val=-1f bnd=m
  256 : __tmpd typ=w32 bnd=m
  262 : __tmp typ=w32 bnd=m
  294 : __tmp_low typ=w32 bnd=m
  300 : __tmp typ=w32 bnd=m
  334 : __either typ=bool bnd=m
  335 : __trgt typ=t13s_s2 val=0j bnd=m
  336 : __trgt typ=t21s_s2 val=0j bnd=m
  337 : __trgt typ=t13s_s2 val=0j bnd=m
  338 : __trgt typ=t21s_s2 val=0j bnd=m
  339 : __trgt typ=t13s_s2 val=0j bnd=m
  340 : __trgt typ=t21s_s2 val=0j bnd=m
  341 : __trgt typ=t13s_s2 val=0j bnd=m
  342 : __trgt typ=t21s_s2 val=0j bnd=m
  343 : __trgt typ=t13s_s2 val=0j bnd=m
  344 : __trgt typ=t21s_s2 val=0j bnd=m
  345 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fui64_to_f32 {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a_low.25 var=24 stl=X off=11) inp ()  <36>;
    (a_low.26 var=24) deassign (a_low.25)  <37>;
    (a_high.29 var=25 stl=X off=12) inp ()  <40>;
    (a_high.30 var=25) deassign (a_high.29)  <41>;
    (__rd___sp.33 var=20) rd_res_reg (__R_SP.11 __sp.17)  <44>;
    (__ct_m4S0.34 var=26) const ()  <45>;
    (__tmp.36 var=28) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_m4S0.34)  <47>;
    (__R_SP.37 var=12 __sp.38 var=18) wr_res_reg (__tmp.36 __sp.17)  <48>;
    (__rd___sp.39 var=20) rd_res_reg (__R_SP.11 __sp.38)  <50>;
    (softfloat_countLeadingZeros64.54 var=37) const ()  <65>;
    (__link.55 var=38) w32_jal_t21s_s2 (softfloat_countLeadingZeros64.54)  <66>;
    call {
        (a_low.49 var=24 stl=X off=11) assign (a_low.26)  <60>;
        (a_high.51 var=25 stl=X off=12) assign (a_high.30)  <62>;
        (__link.56 var=38 stl=X off=1) assign (__link.55)  <67>;
        (__tmp.57 var=39 stl=X off=10) Fsoftfloat_countLeadingZeros64 (__link.56 a_low.49 a_high.51)  <68>;
        (__tmp.58 var=39) deassign (__tmp.57)  <69>;
    } #4 off=1
    #193 off=2
    (__tmp.62 var=42) __uint__pl___uint___uint (__tmp.58 __ct_4294967256.203)  <73>;
    (__ct_0.64 var=44) const ()  <75>;
    (__tmp.66 var=46) bool__ge___sint___sint (__tmp.62 __ct_0.64)  <77>;
    (__ct_4s0.172 var=100) const ()  <185>;
    (__ct_4294967256.203 var=115) const ()  <258>;
    (__trgt.521 var=345) const ()  <876>;
    () void_br_bool_t13s_s2 (__tmp.66 __trgt.521)  <877>;
    (__either.522 var=334) undefined ()  <878>;
    if {
        {
            () if_expr (__either.522)  <91>;
        } #7
        {
            #45 off=18
            (__tmpd.236 var=148) __uint__or___uint___uint (a_high.30 a_low.26)  <345>;
            (__tmp.485 var=149) bool__eq___uint___uint (__tmpd.236 __ct_0.64)  <806>;
            (__trgt.506 var=335) const ()  <851>;
            () void_br_bool_t13s_s2 (__tmp.485 __trgt.506)  <852>;
            (__either.507 var=334) undefined ()  <853>;
            if {
                {
                    () if_expr (__either.507)  <108>;
                } #11
                {
                } #13 off=20
                {
                    (__ct_149.98 var=52) const ()  <111>;
                    (__tmp.100 var=54) __sint__mi___sint___sint (__ct_149.98 __tmp.62)  <113>;
                    (__ct_23.102 var=56) const ()  <115>;
                    (__tmp.104 var=58) __uint__ls___uint___sint (__tmp.100 __ct_23.102)  <117>;
                    (__tmp.107 var=61) __uint__ls___uint___sint (a_low.26 __tmp.62)  <120>;
                    (__tmp.108 var=62) __uint__pl___uint___uint (__tmp.104 __tmp.107)  <121>;
                    (__trgt.508 var=336) const ()  <854>;
                    () void_j_t21s_s2 (__trgt.508)  <855>;
                } #12 off=19
                {
                    (__tmp.111 var=65) merge (__ct_0.64 __tmp.108)  <124>;
                } #14
            } #10
        } #8
        {
            #17 off=3
            (__ct_7.121 var=73) const ()  <133>;
            (shiftDist.123 var=33) __sint__pl___sint___sint (__tmp.62 __ct_7.121)  <135>;
            (__tmp.126 var=78) bool__lt___sint___sint (shiftDist.123 __ct_0.64)  <138>;
            (__trgt.518 var=343) const ()  <871>;
            () void_br_bool_t13s_s2 (__tmp.126 __trgt.518)  <872>;
            (__either.519 var=334) undefined ()  <873>;
            if {
                {
                    () if_expr (__either.519)  <152>;
                } #19
                {
                    #68 off=5
                    (__tmp.142 var=81) __sint__mi___sint___sint (__ct_0.64 shiftDist.123)  <155>;
                    (__tmp.242 var=158) bool__eq___sint___sint (__tmp.142 __ct_0.64)  <352>;
                    (__ct_m32.243 var=165) const ()  <353>;
                    (__apl_ff.245 var=155) __sint__pl___sint___sint (__tmp.142 __ct_m32.243)  <356>;
                    (__tmp.247 var=160) __sint__mi___sint___sint (__ct_0.64 __apl_ff.245)  <359>;
                    (__ct_1.374 var=252) const ()  <530>;
                    (__trgt.515 var=341) const ()  <866>;
                    () void_br_bool_t13s_s2 (__tmp.242 __trgt.515)  <867>;
                    (__either.516 var=334) undefined ()  <868>;
                    if {
                        {
                            () if_expr (__either.516)  <389>;
                        } #92
                        {
                        } #321 off=13
                        {
                            #332 off=6
                            (__trgt.509 var=337) const ()  <856>;
                            () void_br_bool_t13s_s2 (__tmp.523 __trgt.509)  <857>;
                            (__either.510 var=334) undefined ()  <858>;
                            (__tmp.523 var=159) bool__lt___sint___sint (__apl_ff.245 __ct_0.64)  <879>;
                            if {
                                {
                                    () if_expr (__either.510)  <358>;
                                } #75
                                {
                                    (__apl_carries.248 var=156) __uint__ls___uint___sint (a_high.30 __tmp.247)  <360>;
                                    (__tmp.249 var=161) __uint__rs___uint___sint (a_low.26 __tmp.142)  <361>;
                                    (__apl_r_low.250 var=162) __uint__or___uint___uint (__tmp.249 __apl_carries.248)  <362>;
                                } #76 off=8
                                {
                                    (__apl_r_low.252 var=162) __uint__rs___uint___sint (a_high.30 __apl_ff.245)  <364>;
                                    (__trgt.511 var=338) const ()  <859>;
                                    () void_j_t21s_s2 (__trgt.511)  <860>;
                                } #77 off=7
                                {
                                    (__rt_low.253 var=150) merge (__apl_r_low.250 __apl_r_low.252)  <365>;
                                } #78
                            } #74
                            #334 off=9
                            (__trgt.512 var=339) const ()  <861>;
                            () void_br_bool_t13s_s2 (__tmp.524 __trgt.512)  <862>;
                            (__either.513 var=334) undefined ()  <863>;
                            (__tmp.524 var=159) bool__lt___sint___sint (__apl_ff.245 __ct_0.64)  <880>;
                            if {
                                {
                                    () if_expr (__either.513)  <392>;
                                } #97
                                {
                                    (__apl_carries.276 var=178) __uint__rs___uint___sint (__ct_1.374 __tmp.247)  <394>;
                                    (__apl_r_low.277 var=183) __uint__ls___uint___sint (__ct_1.374 __tmp.142)  <395>;
                                } #98 off=11
                                {
                                    (__apl_r_high.280 var=185) __uint__ls___uint___sint (__ct_1.374 __apl_ff.245)  <398>;
                                    (__trgt.514 var=340) const ()  <864>;
                                    () void_j_t21s_s2 (__trgt.514)  <865>;
                                } #99 off=10
                                {
                                    (__rt_low.281 var=172) merge (__apl_r_low.277 __ct_0.64)  <399>;
                                    (__rt_high.282 var=173) merge (__apl_carries.276 __apl_r_high.280)  <400>;
                                } #100
                            } #96
                            #335 off=12
                            (__trgt.517 var=342) const ()  <869>;
                            () void_j_t21s_s2 (__trgt.517)  <870>;
                        } #323
                        {
                            (__tmp_low.255 var=166) merge (a_low.26 __rt_low.253)  <367>;
                            (__tmp_low.283 var=188) merge (__ct_1.374 __rt_low.281)  <401>;
                            (__tmp_high.284 var=190) merge (__ct_0.64 __rt_high.282)  <402>;
                        } #101
                    } #91
                    #308 off=14
                    (__apl_r_low.305 var=203) __uint_add___uint___uint (__tmp_low.283 __ct_4294967295.375)  <429>;
                    (__apl_r_high.306 var=204) __uint_add___uint___uint (__tmp_high.284 __ct_4294967295.375)  <430>;
                    (__apl_r_high.309 var=204) __uint__pl___uint___uint (__apl_r_high.306 __tmp.437)  <433>;
                    (__tmp_low.329 var=223) __uint__ad___uint___uint (a_low.26 __apl_r_low.305)  <457>;
                    (__tmp_high.330 var=225) __uint__ad___uint___uint (a_high.30 __apl_r_high.309)  <458>;
                    (__tmp_low.359 var=242) __uint__or___uint___uint (__tmp_low.255 __tmp.392)  <495>;
                    (__ct_4294967295.375 var=253) const ()  <532>;
                    (__tmpd.378 var=256) __uint__or___uint___uint (__tmp_high.330 __tmp_low.329)  <552>;
                    (__tmp.392 var=262) __sint_sne0___sint (__tmpd.378)  <588>;
                    (__tmp.437 var=300) __sint_slt___uint___uint (__apl_r_low.305 __tmp_low.283)  <706>;
                } #56
                {
                    (__tmp.146 var=85) __uint__ls___uint___sint (a_low.26 shiftDist.123)  <159>;
                    (__trgt.520 var=344) const ()  <874>;
                    () void_j_t21s_s2 (__trgt.520)  <875>;
                } #202 off=4
                {
                    (__tmp_low.454 var=294) merge (__tmp_low.359 __tmp.146)  <731>;
                } #22
            } #18
            #327 off=15
            (__ct_156.154 var=92) const ()  <167>;
            (__tmp.156 var=94) __sint__mi___sint___sint (__ct_156.154 shiftDist.123)  <169>;
            (softfloat_roundPackToF32.161 var=97) const ()  <174>;
            (__tmp.501 var=102) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_4s0.172)  <843>;
            (__R_SP.502 var=12 __sp.503 var=18) wr_res_reg (__tmp.501 __sp.38)  <844>;
            () void_j_t21s_s2 (softfloat_roundPackToF32.161)  <849>;
            call {
                (__tmp.153 var=91 stl=X off=11) assign (__ct_0.64)  <166>;
                (__tmp.157 var=94 stl=X off=12) assign (__tmp.156)  <170>;
                (sig.158 var=34 stl=X off=13) assign (__tmp_low.454)  <171>;
                (__la.163 var=21 stl=X off=1) assign (__la.21)  <176>;
                (__tmp.164 var=99 stl=X off=10) Fsoftfloat_roundPackToF32 (__la.163 __tmp.153 __tmp.157 sig.158)  <177>;
                (__tmp.165 var=99) deassign (__tmp.164)  <178>;
            } #24 off=16
            #328 off=17 nxt=-2
            (__rt.504 var=22 stl=X off=10) assign (__tmp.165)  <846>;
            () out (__rt.504)  <847>;
            () sink (__sp.503)  <848>;
            (__rt.505 var=22) never ()  <850>;
        } #16
        {
            (__rt.169 var=22) merge (__tmp.111 __rt.505)  <182>;
        } #25
    } #6
    #27 off=22 nxt=-2
    (__tmp.174 var=102) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_4s0.172)  <187>;
    (__R_SP.175 var=12 __sp.176 var=18) wr_res_reg (__tmp.174 __sp.38)  <188>;
    () void___rts_jr_w32 (__la.21)  <189>;
    (__rt.177 var=22 stl=X off=10) assign (__rt.169)  <190>;
    () out (__rt.177)  <191>;
    () sink (__sp.176)  <199>;
} #0
0 : 'SoftFloat-3e/source/ui64_to_f32.c';
----------
0 : (0,42:0,0);
3 : (0,48:47,4);
4 : (0,48:16,4);
6 : (0,49:4,5);
8 : (0,60:8,6);
10 : (0,51:14,6);
12 : (0,51:76,7);
13 : (0,51:14,8);
16 : (0,54:8,15);
17 : (0,58:23,16);
18 : (0,58:28,16);
24 : (0,60:15,21);
27 : (0,49:4,26);
45 : (0,51:14,6);
56 : (0,58:30,17);
68 : (0,58:30,17);
74 : (0,58:30,17);
75 : (0,58:30,17);
76 : (0,58:30,17);
77 : (0,58:30,17);
78 : (0,58:30,17);
91 : (0,58:30,17);
92 : (0,58:30,17);
96 : (0,58:30,17);
97 : (0,58:30,17);
98 : (0,58:30,17);
99 : (0,58:30,17);
100 : (0,58:30,17);
101 : (0,58:30,17);
193 : (0,49:11,5);
308 : (0,58:30,17);
327 : (0,49:4,26);
328 : (0,49:4,26);
----------
44 : (0,42:10,0);
45 : (0,42:10,0);
47 : (0,42:10,0);
48 : (0,42:10,0);
50 : (0,45:19,0);
60 : (0,48:47,0);
62 : (0,48:47,0);
66 : (0,48:16,4);
67 : (0,48:16,0);
68 : (0,48:16,4);
73 : (0,48:51,4);
75 : (0,49:11,0);
77 : (0,49:11,5);
91 : (0,49:4,5);
108 : (0,51:14,6);
111 : (0,51:58,0);
113 : (0,51:58,7);
115 : (0,51:72,0);
117 : (0,51:70,7);
120 : (0,51:96,7);
121 : (0,51:76,7);
124 : (0,51:14,9);
133 : (0,56:18,0);
135 : (0,56:18,15);
138 : (0,58:23,16);
152 : (0,58:28,16);
155 : (0,58:65,17);
159 : (0,59:35,18);
166 : (0,60:42,0);
167 : (0,60:49,0);
169 : (0,60:49,21);
170 : (0,60:49,0);
171 : (0,60:62,0);
176 : (0,60:15,0);
177 : (0,60:15,21);
182 : (0,49:4,25);
185 : (0,49:4,0);
187 : (0,49:4,0);
188 : (0,49:4,26);
189 : (0,49:4,26);
190 : (0,49:4,0);
258 : (0,48:51,0);
345 : (0,51:14,6);
352 : (0,58:30,17);
353 : (0,58:30,0);
356 : (0,58:30,17);
358 : (0,58:30,17);
359 : (0,58:30,17);
360 : (0,58:30,17);
361 : (0,58:30,17);
362 : (0,58:30,17);
364 : (0,58:30,17);
365 : (0,58:30,17);
367 : (0,58:30,17);
389 : (0,58:30,17);
392 : (0,58:30,17);
394 : (0,58:30,17);
395 : (0,58:30,17);
398 : (0,58:30,17);
399 : (0,58:30,17);
400 : (0,58:30,17);
401 : (0,58:30,17);
402 : (0,58:30,17);
429 : (0,58:30,17);
430 : (0,58:30,17);
433 : (0,58:30,17);
457 : (0,58:30,17);
458 : (0,58:30,17);
495 : (0,58:30,17);
530 : (0,58:30,0);
532 : (0,58:30,0);
552 : (0,58:30,17);
588 : (0,58:30,17);
706 : (0,58:30,17);
806 : (0,51:14,6);
843 : (0,49:4,0);
844 : (0,49:4,26);
846 : (0,49:4,0);
849 : (0,60:15,21);
852 : (0,51:14,6);
857 : (0,58:30,17);
862 : (0,58:30,17);
867 : (0,58:30,17);
872 : (0,58:28,16);
877 : (0,49:4,5);

