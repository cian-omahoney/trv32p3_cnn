
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 12:18:21 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f32_to_i32_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  int_fast32_t f32_to_i32_r_minMag(float32_t, bool)
Ff32_to_i32_r_minMag : user_defined, called {
    fnm : "f32_to_i32_r_minMag" 'long f32_to_i32_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_to_i32_r_minMag typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   22 : __rt typ=w32 bnd=p tref=int_fast32_t__
   23 : a typ=w32 bnd=p tref=float32_t___1
   24 : exact typ=w32 bnd=p tref=bool__
   26 : __ct_m4S0 typ=w32 val=0S0 bnd=m
   28 : __tmp typ=w32 bnd=m
   35 : exp typ=w32 bnd=m tref=int_fast16_t__
   36 : sig typ=w32 bnd=m tref=uint_fast32_t__
   37 : shiftDist typ=w32 bnd=m tref=int_fast16_t__
   38 : sign typ=bool bnd=m tref=bool__
   41 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   48 : __ct_23 typ=w32 val=23f bnd=m
   50 : __tmp typ=w32 bnd=m
   52 : __ct_255 typ=w32 val=255f bnd=m
   55 : __ct_8388607 typ=w32 val=8388607f bnd=m
   58 : __ct_158 typ=w32 val=158f bnd=m
   61 : __ct_32 typ=w32 val=32f bnd=m
   63 : __tmp typ=bool bnd=m
   66 : __ct_31 typ=w32 val=31f bnd=m
   68 : __tmp typ=w32 bnd=m
   74 : __tmp typ=bool bnd=m
   75 : __ct_3472883712 typ=t20s_rp12 val=-200704f bnd=m
   77 : __tmp typ=bool bnd=m
   78 : __ct_m2147483648 typ=t20s_rp12 val=-524288f bnd=m
   82 : __tmp typ=bool bnd=m
   85 : __tmp typ=bool bnd=m
   88 : __tmp typ=bool bnd=m
   89 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   95 : __tmp typ=w32 bnd=m
   96 : __tmp typ=w32 bnd=m
   97 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
   99 : __tmp typ=w32 bnd=m
  100 : __ct_8 typ=w32 val=8f bnd=m
  103 : __tmp typ=w32 bnd=m
  107 : __tmp typ=w32 bnd=m
  108 : __tmp typ=w32 bnd=m
  110 : __ct_4s0 typ=w32 val=0s0 bnd=m
  112 : __tmp typ=w32 bnd=m
  131 : __false typ=bool val=0f bnd=m
  132 : __either typ=bool bnd=m
  133 : __trgt typ=t13s_s2 val=0j bnd=m
  134 : __trgt typ=t13s_s2 val=0j bnd=m
  135 : __trgt typ=t21s_s2 val=0j bnd=m
  136 : __trgt typ=t13s_s2 val=0j bnd=m
  137 : __trgt typ=t21s_s2 val=0j bnd=m
  138 : __trgt typ=t13s_s2 val=0j bnd=m
  139 : __trgt typ=t21s_s2 val=0j bnd=m
  140 : __trgt typ=t13s_s2 val=0j bnd=m
  141 : __trgt typ=t21s_s2 val=0j bnd=m
  142 : __trgt typ=t13s_s2 val=0j bnd=m
  143 : __trgt typ=t21s_s2 val=0j bnd=m
  144 : __trgt typ=t13s_s2 val=0j bnd=m
  145 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_to_i32_r_minMag {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a.24 var=23 stl=X off=11) inp ()  <35>;
    (a.25 var=23) deassign (a.24)  <36>;
    (exact.27 var=24 stl=X off=12) inp ()  <38>;
    (__rd___sp.30 var=20) rd_res_reg (__R_SP.11 __sp.17)  <41>;
    (__ct_m4S0.31 var=26) const ()  <42>;
    (__tmp.33 var=28) __Pvoid__pl___Pvoid___sint (__rd___sp.30 __ct_m4S0.31)  <44>;
    (__R_SP.34 var=12 __sp.35 var=18) wr_res_reg (__tmp.33 __sp.17)  <45>;
    (__rd___sp.37 var=20) rd_res_reg (__R_SP.11 __sp.35)  <48>;
    (__ct_0.55 var=41) const ()  <66>;
    (__ct_23.64 var=48) const ()  <74>;
    (__tmp.66 var=50) __uint__rs___uint___sint (a.25 __ct_23.64)  <76>;
    (__ct_255.68 var=52) const ()  <78>;
    (exp.70 var=35) __sint__ad___sint___sint (__tmp.66 __ct_255.68)  <80>;
    (__ct_8388607.71 var=55) const ()  <81>;
    (sig.73 var=36) __uint__ad___uint___uint (a.25 __ct_8388607.71)  <83>;
    (__ct_158.74 var=58) const ()  <84>;
    (shiftDist.76 var=37) __sint__mi___sint___sint (__ct_158.74 exp.70)  <86>;
    (__ct_32.77 var=61) const ()  <87>;
    (__tmp.79 var=63) bool__ge___sint___sint (shiftDist.76 __ct_32.77)  <89>;
    (__trgt.322 var=144) const ()  <463>;
    () void_br_bool_t13s_s2 (__tmp.79 __trgt.322)  <464>;
    (__either.323 var=132) undefined ()  <465>;
    if {
        {
            () if_expr (__either.323)  <108>;
        } #5
        {
        } #6 off=18
        {
            #52 off=1
            (__ct_31.100 var=66) const ()  <111>;
            (__tmp.102 var=68) __uint__rs___uint___sint (a.25 __ct_31.100)  <113>;
            (__tmp.294 var=74) bool__ge___sint___sint (__ct_0.55 shiftDist.76)  <372>;
            (__trgt.319 var=142) const ()  <458>;
            () void_br_bool_t13s_s2 (__tmp.294 __trgt.319)  <459>;
            (__either.320 var=132) undefined ()  <460>;
            if {
                {
                    () if_expr (__either.320)  <138>;
                } #10
                {
                    #12 off=6
                    (__ct_3472883712.127 var=75) const ()  <139>;
                    (__tmp.129 var=77) bool__eq___uint___uint (a.25 __ct_3472883712.127)  <141>;
                    (__ct_m2147483648.148 var=78) const ()  <161>;
                    (__trgt.313 var=138) const ()  <448>;
                    () void_br_bool_t13s_s2 (__tmp.129 __trgt.313)  <449>;
                    (__either.314 var=132) undefined ()  <450>;
                    if {
                        {
                            () if_expr (__either.314)  <160>;
                        } #14
                        {
                        } #15 off=15
                        {
                            #17 off=7
                            (__ct_2147483647.195 var=89) const ()  <210>;
                            (__tmp.300 var=82) bool__ne___sint___sint (exp.70 __ct_255.68)  <414>;
                            (__trgt.304 var=133) const ()  <434>;
                            () void_br_bool_t13s_s2 (__tmp.300 __trgt.304)  <435>;
                            (__either.305 var=132) undefined ()  <436>;
                            if {
                                {
                                    () if_expr (__either.305)  <184>;
                                } #19
                                {
                                    (__false.309 var=131) const ()  <442>;
                                } #21
                                {
                                    (__tmp.173 var=85) bool__ne___uint___uint (sig.73 __ct_0.55)  <187>;
                                    (__trgt.310 var=136) const ()  <443>;
                                    () void_br_bool_t13s_s2 (__tmp.173 __trgt.310)  <444>;
                                    (__either.311 var=132) undefined ()  <445>;
                                } #20 off=8
                                {
                                    (__tmp.176 var=88) merge (__false.309 __either.311)  <190>;
                                } #22
                            } #18
                            if {
                                {
                                    () if_expr (__tmp.176)  <209>;
                                } #25
                                {
                                } #26 off=13
                                {
                                    #57 off=9
                                    (__trgt.306 var=134) const ()  <437>;
                                    () void_br_bool_t13s_s2 (sign.325 __trgt.306)  <438>;
                                    (__either.307 var=132) undefined ()  <439>;
                                    (sign.325 var=38) bool__ne___uint___uint (__tmp.102 __ct_0.55)  <468>;
                                    if {
                                        {
                                            () if_expr (__either.307)  <230>;
                                        } #30
                                        {
                                        } #31 off=11
                                        {
                                            (__trgt.308 var=135) const ()  <440>;
                                            () void_j_t21s_s2 (__trgt.308)  <441>;
                                        } #32 off=10
                                        {
                                            (__tmp.219 var=95) merge (__ct_m2147483648.148 __ct_2147483647.195)  <235>;
                                        } #33
                                    } #29
                                    #58 off=12
                                    (__trgt.312 var=137) const ()  <446>;
                                    () void_j_t21s_s2 (__trgt.312)  <447>;
                                } #27
                                {
                                    (__tmp.220 var=96) merge (__ct_2147483647.195 __tmp.219)  <236>;
                                } #34
                            } #24
                            #59 off=14
                            (__trgt.315 var=139) const ()  <451>;
                            () void_j_t21s_s2 (__trgt.315)  <452>;
                        } #16
                        {
                            (__rt.221 var=22) merge (__ct_m2147483648.148 __tmp.220)  <237>;
                        } #35
                    } #13
                } #11
                {
                    #37 off=2
                    (__ct_8388608.222 var=97) const ()  <238>;
                    (__tmp.224 var=99) __uint__or___uint___uint (sig.73 __ct_8388608.222)  <240>;
                    (__ct_8.225 var=100) const ()  <241>;
                    (sig.227 var=36) __uint__ls___uint___sint (__tmp.224 __ct_8.225)  <243>;
                    (__tmp.228 var=103) __uint__rs___uint___sint (sig.227 shiftDist.76)  <244>;
                    (__trgt.316 var=140) const ()  <453>;
                    () void_br_bool_t13s_s2 (sign.326 __trgt.316)  <454>;
                    (__either.317 var=132) undefined ()  <455>;
                    (sign.326 var=38) bool__eq___uint___uint (__tmp.102 __ct_0.55)  <469>;
                    if {
                        {
                            () if_expr (__either.317)  <264>;
                        } #39
                        {
                        } #41 off=4
                        {
                            (__tmp.250 var=107) __sint__mi___sint___sint (__ct_0.55 __tmp.228)  <267>;
                            (__trgt.318 var=141) const ()  <456>;
                            () void_j_t21s_s2 (__trgt.318)  <457>;
                        } #40 off=3
                        {
                            (__tmp.251 var=108) merge (__tmp.228 __tmp.250)  <268>;
                        } #42
                    } #38
                    #61 off=5
                    (__trgt.321 var=143) const ()  <461>;
                    () void_j_t21s_s2 (__trgt.321)  <462>;
                } #36
                {
                    (__rt.253 var=22) merge (__rt.221 __tmp.251)  <270>;
                } #43
            } #9
            #62 off=17
            (__trgt.324 var=145) const ()  <466>;
            () void_j_t21s_s2 (__trgt.324)  <467>;
        } #7
        {
            (__rt.256 var=22) merge (__ct_0.55 __rt.253)  <273>;
        } #44
    } #4
    #47 off=19 nxt=-2
    (__ct_4s0.261 var=110) const ()  <278>;
    (__tmp.263 var=112) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_4s0.261)  <280>;
    (__R_SP.264 var=12 __sp.265 var=18) wr_res_reg (__tmp.263 __sp.35)  <281>;
    () void___rts_jr_w32 (__la.21)  <282>;
    (__rt.266 var=22 stl=X off=10) assign (__rt.256)  <283>;
    () out (__rt.266)  <284>;
    () sink (__sp.265)  <290>;
} #0
0 : 'SoftFloat-3e/source/f32_to_i32_r_minMag.c';
----------
0 : (0,44:0,0);
3 : (0,66:12,14);
4 : (0,66:4,14);
6 : (0,66:27,15);
7 : (0,72:8,18);
9 : (0,77:4,20);
11 : (0,77:26,21);
12 : (0,78:17,21);
13 : (0,78:8,21);
15 : (0,78:77,22);
16 : (0,78:77,24);
17 : (0,83:17,25);
18 : (0,83:26,25);
20 : (0,83:26,26);
21 : (0,83:26,27);
24 : (0,83:33,29);
26 : (0,83:35,30);
27 : (0,84:8,31);
29 : (0,84:8,31);
31 : (0,84:23,32);
32 : (0,84:30,33);
36 : (0,82:8,44);
37 : (0,95:11,47);
38 : (0,95:16,47);
40 : (0,95:18,48);
41 : (0,95:26,49);
47 : (0,95:4,58);
52 : (0,77:19,20);
----------
41 : (0,44:13,0);
42 : (0,44:13,0);
44 : (0,44:13,0);
45 : (0,44:13,0);
48 : (0,49:19,0);
66 : (0,59:6,0);
74 : (0,61:34,0);
76 : (0,61:32,11);
78 : (0,61:38,0);
80 : (0,61:38,11);
81 : (0,62:17,0);
83 : (0,62:17,12);
84 : (0,65:21,0);
86 : (0,65:21,13);
87 : (0,66:12,0);
89 : (0,66:12,14);
108 : (0,66:4,14);
111 : (0,76:38,0);
113 : (0,76:36,19);
138 : (0,77:4,20);
139 : (0,78:17,0);
141 : (0,78:17,21);
160 : (0,78:8,21);
161 : (0,78:96,0);
184 : (0,83:26,25);
187 : (0,83:26,26);
190 : (0,83:26,28);
209 : (0,83:33,29);
210 : (0,83:35,0);
230 : (0,84:8,31);
235 : (0,84:8,34);
236 : (0,83:33,36);
237 : (0,78:8,40);
238 : (0,88:15,0);
240 : (0,88:15,45);
241 : (0,88:30,0);
243 : (0,88:28,45);
244 : (0,89:14,46);
264 : (0,95:16,47);
267 : (0,95:18,48);
268 : (0,95:16,50);
270 : (0,77:4,54);
273 : (0,66:4,57);
278 : (0,95:4,0);
280 : (0,95:4,0);
281 : (0,95:4,58);
282 : (0,95:4,58);
283 : (0,95:4,0);
372 : (0,77:19,20);
414 : (0,83:17,25);
435 : (0,83:26,25);
438 : (0,84:8,31);
444 : (0,83:33,29);
449 : (0,78:8,21);
454 : (0,95:16,47);
459 : (0,77:4,20);
464 : (0,66:4,14);

