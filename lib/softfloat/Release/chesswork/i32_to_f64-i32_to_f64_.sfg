
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb  7 12:34:09 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/i32_to_f64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t i32_to_f64(int32_t)
Fi32_to_f64 : user_defined, called {
    fnm : "i32_to_f64" 'float64_t i32_to_f64(int)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : i32_to_f64 typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : softfloat_countLeadingZeros8 typ=w08 bnd=e sz=256 algn=1 stl=DMb tref=__A256__uchar_DMb
   22 : __rd___sp typ=w32 bnd=m
   24 : __ptr_softfloat_countLeadingZeros8 typ=w32 val=0a bnd=m adro=19
   25 : __la typ=w32 bnd=p tref=w32__
   27 : __rt_low typ=w32 bnd=m tref=__uint__
   28 : __rt_high typ=w32 bnd=m tref=__uint__
   29 : a typ=w32 bnd=p tref=int32_t__
   30 : __ct_m8S0 typ=w32 val=0S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   38 : sign typ=bool bnd=m tref=bool__
   42 : __inl_a typ=w32 bnd=m lscp=7 tref=uint32_t__
   43 : __inl_count typ=w32 bnd=m lscp=7 tref=uint_fast8_t__
   45 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   47 : __tmp typ=bool bnd=m
   57 : __tmp typ=w32 bnd=m
   59 : __tmp typ=w32 bnd=m
   62 : __ct_65536 typ=t20s_rp12 val=16f bnd=m
   64 : __tmp typ=bool bnd=m
   65 : __ct_16 typ=w32 val=16f bnd=m
   70 : __ct_16777216 typ=t20s_rp12 val=4096f bnd=m
   72 : __tmp typ=bool bnd=m
   73 : __ct_8 typ=w32 val=8f bnd=m
   79 : __ct_24 typ=w32 val=24f bnd=m
   81 : __tmp typ=w32 bnd=m
   83 : __tmp typ=w32 bnd=m
   84 : __fch_softfloat_countLeadingZeros8 typ=__uchar bnd=m
   88 : __ct_21 typ=w32 val=21f bnd=m
   90 : __tmp typ=w32 bnd=m
   96 : __ct_1074 typ=w32 val=1074f bnd=m
   98 : __tmp typ=w32 bnd=m
  110 : uiZ_low typ=w32 bnd=m tref=__uint__
  111 : uiZ_high typ=w32 bnd=m tref=__uint__
  122 : __ct_8s0 typ=w32 val=0s0 bnd=m
  124 : __tmp typ=w32 bnd=m
  135 : __rt_low typ=w32 bnd=m tref=__uint__
  136 : __rt_high typ=w32 bnd=m tref=__uint__
  140 : __apl_ff typ=w32 bnd=m tref=__sint__
  141 : __apl_carries typ=w32 bnd=m tref=__uint__
  143 : __tmp typ=bool bnd=m
  144 : __tmp typ=bool bnd=m
  145 : __tmp typ=w32 bnd=m
  146 : __apl_r_low typ=w32 bnd=m tref=__uint__
  148 : __apl_r_high typ=w32 bnd=m tref=__uint__
  150 : __ct_m32 typ=w32 val=-32f bnd=m
  173 : __apl_r_high typ=w32 bnd=m tref=__uint__
  186 : __tmp_low typ=w32 bnd=m
  188 : __tmp_high typ=w32 bnd=m
  202 : __ct_31 typ=w32 val=31f bnd=m
  204 : __ct_20 typ=w32 val=20f bnd=m
  212 : __tmp typ=w32 bnd=m
  283 : __either typ=bool bnd=m
  284 : __trgt typ=t13s_s2 val=0j bnd=m
  285 : __trgt typ=t21s_s2 val=0j bnd=m
  286 : __trgt typ=t13s_s2 val=0j bnd=m
  287 : __trgt typ=t21s_s2 val=0j bnd=m
  288 : __trgt typ=t13s_s2 val=0j bnd=m
  289 : __trgt typ=t21s_s2 val=0j bnd=m
  290 : __trgt typ=t13s_s2 val=0j bnd=m
  291 : __trgt typ=t21s_s2 val=0j bnd=m
  292 : __trgt typ=t13s_s2 val=0j bnd=m
  293 : __trgt typ=t21s_s2 val=0j bnd=m
  294 : __trgt typ=t13s_s2 val=0j bnd=m
  295 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fi32_to_f64 {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (softfloat_countLeadingZeros8.18 var=19) source ()  <29>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (a.32 var=29 stl=X off=12) inp ()  <43>;
    (a.33 var=29) deassign (a.32)  <44>;
    (__rd___sp.35 var=22) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_m8S0.36 var=30) const ()  <47>;
    (__tmp.38 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_m8S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (__rd___sp.41 var=22) rd_res_reg (__R_SP.11 __sp.40)  <52>;
    (__ct_0.58 var=45) const ()  <69>;
    (__tmp.283 var=47) bool__eq___sint___sint (a.33 __ct_0.58)  <348>;
    (__trgt.650 var=294) const ()  <1040>;
    () void_br_bool_t13s_s2 (__tmp.283 __trgt.650)  <1041>;
    (__either.651 var=283) undefined ()  <1042>;
    if {
        {
            () if_expr (__either.651)  <95>;
        } #5
        {
        } #6 off=17
        {
            #8 off=1
            (sign.614 var=38) bool__ge___sint___sint (a.33 __ct_0.58)  <971>;
            (__trgt.635 var=284) const ()  <1015>;
            () void_br_bool_t13s_s2 (sign.614 __trgt.635)  <1016>;
            (__either.636 var=283) undefined ()  <1017>;
            if {
                {
                    () if_expr (__either.636)  <123>;
                } #10
                {
                } #12 off=3
                {
                    (__tmp.114 var=57) __uint__mi___uint___uint (__ct_0.58 a.33)  <127>;
                    (__trgt.637 var=285) const ()  <1018>;
                    () void_j_t21s_s2 (__trgt.637)  <1019>;
                } #11 off=2
                {
                    (__tmp.116 var=59) merge (a.33 __tmp.114)  <129>;
                } #13
            } #9
            #14 off=4
            (__ct_65536.123 var=62) const ()  <136>;
            (__tmp.615 var=64) bool__ge___uint___uint (__tmp.116 __ct_65536.123)  <972>;
            (__trgt.638 var=286) const ()  <1020>;
            () void_br_bool_t13s_s2 (__tmp.615 __trgt.638)  <1021>;
            (__either.639 var=283) undefined ()  <1022>;
            if {
                {
                    () if_expr (__either.639)  <161>;
                } #16
                {
                } #18 off=6
                {
                    (__ct_16.148 var=65) const ()  <162>;
                    (__inl_a.152 var=42) __uint__ls___uint___sint (__tmp.116 __ct_16.148)  <166>;
                    (__trgt.640 var=287) const ()  <1023>;
                    () void_j_t21s_s2 (__trgt.640)  <1024>;
                } #17 off=5
                {
                    (__inl_a.153 var=42) merge (__tmp.116 __inl_a.152)  <167>;
                    (__inl_count.154 var=43) merge (__ct_0.58 __ct_16.148)  <168>;
                } #19
            } #15
            #20 off=7
            (__ct_16777216.155 var=70) const ()  <169>;
            (__tmp.616 var=72) bool__ge___uint___uint (__inl_a.153 __ct_16777216.155)  <973>;
            (__trgt.641 var=288) const ()  <1025>;
            () void_br_bool_t13s_s2 (__tmp.616 __trgt.641)  <1026>;
            (__either.642 var=283) undefined ()  <1027>;
            if {
                {
                    () if_expr (__either.642)  <194>;
                } #22
                {
                } #24 off=9
                {
                    (__ct_8.180 var=73) const ()  <195>;
                    (__inl_count.182 var=43) __uint__pl___uint___uint (__inl_count.154 __ct_8.180)  <197>;
                    (__inl_a.185 var=42) __uint__ls___uint___sint (__inl_a.153 __ct_8.180)  <200>;
                    (__trgt.643 var=289) const ()  <1028>;
                    () void_j_t21s_s2 (__trgt.643)  <1029>;
                } #23 off=8
                {
                    (__inl_a.186 var=42) merge (__inl_a.153 __inl_a.185)  <201>;
                    (__inl_count.187 var=43) merge (__inl_count.154 __inl_count.182)  <202>;
                } #25
            } #21
            #494 off=10
            (__ptr_softfloat_countLeadingZeros8.22 var=24) const ()  <33>;
            (__ct_24.188 var=79) const ()  <203>;
            (__tmp.190 var=81) __uint__rs___uint___sint (__inl_a.186 __ct_24.188)  <205>;
            (__tmp.192 var=83) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_countLeadingZeros8.22 __tmp.190)  <207>;
            (__fch_softfloat_countLeadingZeros8.193 var=84) load (__M_DMb.2 __tmp.192 softfloat_countLeadingZeros8.18)  <208>;
            (__inl_count.196 var=43) __uint__pl___uint___uint (__inl_count.187 __fch_softfloat_countLeadingZeros8.193)  <211>;
            (__ct_21.197 var=88) const ()  <212>;
            (__tmp.199 var=90) __uint__pl___uint___uint (__inl_count.196 __ct_21.197)  <214>;
            (__ct_1074.205 var=96) const ()  <220>;
            (__tmp.207 var=98) __sint__mi___sint___sint (__ct_1074.205 __tmp.199)  <222>;
            (__apl_r_high.308 var=148) __uint__ls___uint___sint (__tmp.469 __ct_31.442)  <394>;
            (__apl_r_high.336 var=148) __uint__ls___uint___sint (__tmp.207 __ct_20.444)  <428>;
            (__apl_r_high.357 var=173) __uint__pl___uint___uint (__apl_r_high.308 __apl_r_high.336)  <454>;
            (__tmp.385 var=143) bool__eq___sint___sint (__tmp.199 __ct_0.58)  <487>;
            (__ct_31.442 var=202) const ()  <574>;
            (__ct_20.444 var=204) const ()  <578>;
            (__tmp.469 var=212) __sint_slt___sint___sint (a.33 __ct_0.58)  <653>;
            (__trgt.647 var=292) const ()  <1035>;
            () void_br_bool_t13s_s2 (__tmp.385 __trgt.647)  <1036>;
            (__either.648 var=283) undefined ()  <1037>;
            if {
                {
                    () if_expr (__either.648)  <490>;
                } #106
                {
                } #107 off=15
                {
                    #109 off=11
                    (__ct_m32.299 var=150) const ()  <383>;
                    (__apl_ff.388 var=140) __sint__pl___sint___sint (__tmp.199 __ct_m32.299)  <491>;
                    (__tmp.389 var=144) bool__lt___sint___sint (__apl_ff.388 __ct_0.58)  <492>;
                    (__trgt.644 var=290) const ()  <1030>;
                    () void_br_bool_t13s_s2 (__tmp.389 __trgt.644)  <1031>;
                    (__either.645 var=283) undefined ()  <1032>;
                    if {
                        {
                            () if_expr (__either.645)  <493>;
                        } #111
                        {
                            (__tmp.390 var=145) __sint__mi___sint___sint (__ct_0.58 __apl_ff.388)  <494>;
                            (__apl_carries.391 var=141) __uint__rs___uint___sint (__tmp.116 __tmp.390)  <495>;
                            (__apl_r_low.392 var=146) __uint__ls___uint___sint (__tmp.116 __tmp.199)  <496>;
                        } #112 off=13
                        {
                            (__apl_r_high.395 var=148) __uint__ls___uint___sint (__tmp.116 __apl_ff.388)  <499>;
                            (__trgt.646 var=291) const ()  <1033>;
                            () void_j_t21s_s2 (__trgt.646)  <1034>;
                        } #113 off=12
                        {
                            (__rt_low.396 var=135) merge (__apl_r_low.392 __ct_0.58)  <500>;
                            (__rt_high.397 var=136) merge (__apl_carries.391 __apl_r_high.395)  <501>;
                        } #114
                    } #110
                    #519 off=14
                    (__trgt.649 var=293) const ()  <1038>;
                    () void_j_t21s_s2 (__trgt.649)  <1039>;
                } #108
                {
                    (__tmp_low.398 var=186) merge (__tmp.116 __rt_low.396)  <502>;
                    (__tmp_high.399 var=188) merge (__ct_0.58 __rt_high.397)  <503>;
                } #115
            } #105
            #129 off=16
            (__apl_r_high.416 var=173) __uint__pl___uint___uint (__apl_r_high.357 __tmp_high.399)  <525>;
            (__trgt.652 var=295) const ()  <1043>;
            () void_j_t21s_s2 (__trgt.652)  <1044>;
        } #7
        {
            (uiZ_low.286 var=110) merge (__ct_0.58 __tmp_low.398)  <351>;
            (uiZ_high.289 var=111) merge (__ct_0.58 __apl_r_high.416)  <354>;
        } #27
    } #4
    #30 off=18 nxt=-2
    (__ct_8s0.248 var=122) const ()  <261>;
    (__tmp.250 var=124) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_8s0.248)  <263>;
    (__R_SP.251 var=12 __sp.252 var=18) wr_res_reg (__tmp.250 __sp.40)  <264>;
    () void___rts_jr_w32 (__la.25)  <265>;
    (__rt_low.254 var=27 stl=X off=10) assign (uiZ_low.286)  <267>;
    () out (__rt_low.254)  <268>;
    (__rt_high.256 var=28 stl=X off=11) assign (uiZ_high.289)  <270>;
    () out (__rt_high.256)  <271>;
    () sink (__sp.252)  <277>;
} #0
0 : 'SoftFloat-3e/source/i32_to_f64.c';
----------
0 : (0,43:0,0);
3 : (0,51:9,6);
4 : (0,51:4,6);
6 : (0,51:15,7);
7 : (0,53:11,10);
8 : (0,55:15,11);
9 : (0,55:20,11);
11 : (0,55:22,12);
12 : (0,55:43,13);
14 : (0,56:20,21);
15 : (0,56:20,21);
17 : (0,56:20,22);
18 : (0,56:20,26);
20 : (0,56:20,29);
21 : (0,56:20,29);
23 : (0,56:20,30);
24 : (0,56:20,34);
30 : (0,62:4,47);
105 : (0,58:110,42);
106 : (0,58:110,42);
107 : (0,58:110,42);
108 : (0,58:110,42);
109 : (0,58:110,42);
110 : (0,58:110,42);
111 : (0,58:110,42);
112 : (0,58:110,42);
113 : (0,58:110,42);
114 : (0,58:110,42);
115 : (0,58:110,42);
129 : (0,58:87,42);
494 : (0,58:110,42);
----------
46 : (0,43:10,0);
47 : (0,43:10,0);
49 : (0,43:10,0);
50 : (0,43:10,0);
52 : (0,49:19,0);
69 : (0,51:9,0);
95 : (0,51:4,6);
123 : (0,55:20,11);
127 : (0,55:22,12);
129 : (0,55:20,14);
136 : (0,56:20,0);
161 : (0,56:20,21);
162 : (0,56:20,0);
166 : (0,56:20,23);
167 : (0,56:20,28);
168 : (0,56:20,28);
169 : (0,56:20,0);
194 : (0,56:20,29);
195 : (0,56:20,0);
197 : (0,56:20,30);
200 : (0,56:20,31);
201 : (0,56:20,36);
202 : (0,56:20,36);
203 : (0,56:20,0);
205 : (0,56:20,37);
207 : (0,56:20,37);
208 : (0,56:20,37);
211 : (0,56:20,37);
212 : (0,56:58,0);
214 : (0,56:58,41);
220 : (0,58:69,0);
222 : (0,58:69,42);
261 : (0,62:4,0);
263 : (0,62:4,0);
264 : (0,62:4,47);
265 : (0,62:4,47);
267 : (0,62:13,0);
270 : (0,62:13,0);
348 : (0,51:9,6);
383 : (0,58:37,0);
394 : (0,58:37,42);
428 : (0,58:81,42);
454 : (0,58:43,42);
487 : (0,58:110,42);
490 : (0,58:110,42);
491 : (0,58:110,42);
492 : (0,58:110,42);
493 : (0,58:110,42);
494 : (0,58:110,42);
495 : (0,58:110,42);
496 : (0,58:110,42);
499 : (0,58:110,42);
500 : (0,58:110,42);
501 : (0,58:110,42);
502 : (0,58:110,42);
503 : (0,58:110,42);
525 : (0,58:87,42);
574 : (0,58:37,0);
578 : (0,58:81,0);
653 : (0,58:15,42);
971 : (0,54:18,10);
972 : (0,56:20,21);
973 : (0,56:20,29);
1016 : (0,55:20,11);
1021 : (0,56:20,21);
1026 : (0,56:20,29);
1031 : (0,58:110,42);
1036 : (0,58:110,42);
1041 : (0,51:4,6);

