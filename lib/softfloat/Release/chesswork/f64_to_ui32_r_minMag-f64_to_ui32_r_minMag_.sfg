
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:29:41 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f64_to_ui32_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint_fast32_t f64_to_ui32_r_minMag(float64_t, bool)
Ff64_to_ui32_r_minMag : user_defined, called {
    fnm : "f64_to_ui32_r_minMag" 'unsigned long f64_to_ui32_r_minMag(float64_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f64_to_ui32_r_minMag typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   22 : __rt typ=w32 bnd=p tref=uint_fast32_t__
   24 : a_low typ=w32 bnd=m tref=__uint__
   25 : a_high typ=w32 bnd=m tref=__uint__
   26 : exact typ=w32 bnd=p tref=bool__
   28 : __ct_m8S0 typ=w32 val=0S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   37 : exp typ=w32 bnd=m tref=int_fast16_t__
   39 : shiftDist typ=w32 bnd=m tref=int_fast16_t__
   60 : __ct_2047 typ=w32 val=2047f bnd=m
   66 : __ct_1075 typ=w32 val=1075f bnd=m
   69 : __ct_53 typ=w32 val=53f bnd=m
   71 : __tmp typ=bool bnd=m
   72 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   82 : __ct_21 typ=w32 val=21f bnd=m
   84 : __tmp typ=bool bnd=m
   85 : __tmp typ=bool bnd=m
   88 : __tmp typ=bool bnd=m
   94 : __tmp typ=bool bnd=m
   95 : __ct_4294967295 typ=w32 val=-1f bnd=m
  101 : __tmp typ=w32 bnd=m
  102 : __tmp typ=w32 bnd=m
  109 : __ct_8s0 typ=w32 val=0s0 bnd=m
  111 : __tmp typ=w32 bnd=m
  120 : __rt_low typ=w32 bnd=m tref=__uint__
  125 : __apl_ff typ=w32 bnd=m tref=__sint__
  126 : __apl_carries typ=w32 bnd=m tref=__uint__
  128 : __tmp typ=bool bnd=m
  129 : __tmp typ=bool bnd=m
  130 : __tmp typ=w32 bnd=m
  131 : __tmp typ=w32 bnd=m
  132 : __apl_r_low typ=w32 bnd=m tref=__uint__
  135 : __ct_m32 typ=w32 val=-32f bnd=m
  150 : sig_high typ=w32 bnd=m
  167 : __tmp typ=bool bnd=m
  188 : sig_high typ=w32 bnd=m
  194 : __tmp_low typ=w32 bnd=m
  202 : __ct_20 typ=w32 val=20f bnd=m
  204 : __ct_31 typ=w32 val=31f bnd=m
  206 : __ct_1048575 typ=w32 val=1048575f bnd=m
  207 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  210 : __tmpd typ=w32 bnd=m
  211 : __tmp typ=bool bnd=m
  228 : __true typ=bool val=1f bnd=m
  229 : __false typ=bool val=0f bnd=m
  230 : __either typ=bool bnd=m
  231 : __trgt typ=t13s_s2 val=0j bnd=m
  232 : __trgt typ=t13s_s2 val=0j bnd=m
  233 : __trgt typ=t13s_s2 val=0j bnd=m
  234 : __trgt typ=t21s_s2 val=0j bnd=m
  235 : __trgt typ=t13s_s2 val=0j bnd=m
  236 : __trgt typ=t21s_s2 val=0j bnd=m
  237 : __trgt typ=t13s_s2 val=0j bnd=m
  238 : __trgt typ=t21s_s2 val=0j bnd=m
  239 : __trgt typ=t13s_s2 val=0j bnd=m
  240 : __trgt typ=t21s_s2 val=0j bnd=m
  241 : __trgt typ=t13s_s2 val=0j bnd=m
  242 : __trgt typ=t21s_s2 val=0j bnd=m
  243 : __trgt typ=t13s_s2 val=0j bnd=m
  244 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_to_ui32_r_minMag {
    #153 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a_low.25 var=24 stl=X off=11) inp ()  <36>;
    (a_low.26 var=24) deassign (a_low.25)  <37>;
    (a_high.29 var=25 stl=X off=12) inp ()  <40>;
    (a_high.30 var=25) deassign (a_high.29)  <41>;
    (exact.33 var=26 stl=X off=13) inp ()  <44>;
    (__rd___sp.36 var=20) rd_res_reg (__R_SP.11 __sp.17)  <47>;
    (__ct_m8S0.37 var=28) const ()  <48>;
    (__tmp.39 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_m8S0.37)  <50>;
    (__R_SP.40 var=12 __sp.41 var=18) wr_res_reg (__tmp.39 __sp.17)  <51>;
    (__rd___sp.43 var=20) rd_res_reg (__R_SP.11 __sp.41)  <54>;
    (__ct_2047.88 var=60) const ()  <97>;
    (exp.90 var=37) __sint__ad___sint___sint (__apl_r_low.301 __ct_2047.88)  <99>;
    (__ct_1075.94 var=66) const ()  <103>;
    (shiftDist.96 var=39) __sint__mi___sint___sint (__ct_1075.94 exp.90)  <105>;
    (__ct_53.97 var=69) const ()  <106>;
    (__tmp.99 var=71) bool__ge___sint___sint (shiftDist.96 __ct_53.97)  <108>;
    (__ct_0.118 var=72) const ()  <128>;
    (__apl_r_low.301 var=132) __uint__rs___uint___sint (a_high.30 __ct_20.433)  <377>;
    (sig_high.320 var=150) __uint__ad___uint___uint (a_high.30 __ct_1048575.437)  <400>;
    (__ct_20.433 var=202) const ()  <557>;
    (__ct_1048575.437 var=206) const ()  <565>;
    (__trgt.483 var=243) const ()  <710>;
    () void_br_bool_t13s_s2 (__tmp.99 __trgt.483)  <711>;
    (__either.484 var=230) undefined ()  <712>;
    if {
        {
            () if_expr (__either.484)  <127>;
        } #5
        {
        } #6 off=19
        {
            #101 off=1
            (__apl_r_low.346 var=132) __uint__rs___uint___sint (a_high.30 __ct_31.435)  <432>;
            (__tmp.366 var=167) bool__ne___uint___uint (__apl_r_low.346 __ct_0.118)  <457>;
            (__ct_31.435 var=204) const ()  <561>;
            (__trgt.462 var=231) const ()  <677>;
            () void_br_bool_t13s_s2 (__tmp.366 __trgt.462)  <678>;
            (__either.463 var=230) undefined ()  <679>;
            if {
                {
                    () if_expr (__either.463)  <154>;
                } #10
                {
                    (__true.479 var=228) const ()  <704>;
                } #11
                {
                    (__ct_21.146 var=82) const ()  <157>;
                    (__tmp.148 var=84) bool__lt___sint___sint (shiftDist.96 __ct_21.146)  <159>;
                    (__trgt.480 var=241) const ()  <705>;
                    () void_br_bool_t13s_s2 (__tmp.148 __trgt.480)  <706>;
                    (__either.481 var=230) undefined ()  <707>;
                } #12 off=2
                {
                    (__tmp.149 var=85) merge (__true.479 __either.481)  <160>;
                } #13
            } #9
            if {
                {
                    () if_expr (__tmp.149)  <179>;
                } #16
                {
                    #18 off=10
                    (__ct_4294967295.213 var=95) const ()  <227>;
                    (__tmp.459 var=88) bool__ne___sint___sint (exp.90 __ct_2047.88)  <659>;
                    (__trgt.464 var=232) const ()  <680>;
                    () void_br_bool_t13s_s2 (__tmp.459 __trgt.464)  <681>;
                    (__either.465 var=230) undefined ()  <682>;
                    if {
                        {
                            () if_expr (__either.465)  <201>;
                        } #20
                        {
                            (__false.469 var=229) const ()  <688>;
                        } #22
                        {
                            (__tmpd.441 var=210) __uint__or___uint___uint (sig_high.320 a_low.26)  <587>;
                            (__tmp.442 var=211) bool__ne___uint___uint (__tmpd.441 __ct_0.118)  <588>;
                            (__trgt.470 var=235) const ()  <689>;
                            () void_br_bool_t13s_s2 (__tmp.442 __trgt.470)  <690>;
                            (__either.471 var=230) undefined ()  <691>;
                        } #107 off=11
                        {
                            (__tmp.194 var=94) merge (__false.469 __either.471)  <207>;
                        } #23
                    } #19
                    if {
                        {
                            () if_expr (__tmp.194)  <226>;
                        } #26
                        {
                        } #27 off=16
                        {
                            #167 off=12
                            (__trgt.466 var=233) const ()  <683>;
                            () void_br_bool_t13s_s2 (__tmp.486 __trgt.466)  <684>;
                            (__either.467 var=230) undefined ()  <685>;
                            (__tmp.486 var=167) bool__ne___uint___uint (__apl_r_low.346 __ct_0.118)  <715>;
                            if {
                                {
                                    () if_expr (__either.467)  <247>;
                                } #31
                                {
                                } #32 off=14
                                {
                                    (__trgt.468 var=234) const ()  <686>;
                                    () void_j_t21s_s2 (__trgt.468)  <687>;
                                } #33 off=13
                                {
                                    (__tmp.237 var=101) merge (__ct_0.118 __ct_4294967295.213)  <252>;
                                } #34
                            } #30
                            #168 off=15
                            (__trgt.472 var=236) const ()  <692>;
                            () void_j_t21s_s2 (__trgt.472)  <693>;
                        } #28
                        {
                            (__tmp.238 var=102) merge (__ct_4294967295.213 __tmp.237)  <253>;
                        } #35
                    } #25
                } #17
                {
                    #129 off=3
                    (sig_high.391 var=188) __uint__or___uint___uint (sig_high.320 __ct_1048576.438)  <489>;
                    (__tmp.407 var=128) bool__eq___sint___sint (shiftDist.96 __ct_0.118)  <509>;
                    (__ct_1048576.438 var=207) const ()  <567>;
                    (__trgt.476 var=239) const ()  <699>;
                    () void_br_bool_t13s_s2 (__tmp.407 __trgt.476)  <700>;
                    (__either.477 var=230) undefined ()  <701>;
                    if {
                        {
                            () if_expr (__either.477)  <512>;
                        } #131
                        {
                        } #132 off=8
                        {
                            #134 off=4
                            (__ct_m32.292 var=135) const ()  <366>;
                            (__apl_ff.410 var=125) __sint__pl___sint___sint (shiftDist.96 __ct_m32.292)  <513>;
                            (__tmp.411 var=129) bool__lt___sint___sint (__apl_ff.410 __ct_0.118)  <514>;
                            (__trgt.473 var=237) const ()  <694>;
                            () void_br_bool_t13s_s2 (__tmp.411 __trgt.473)  <695>;
                            (__either.474 var=230) undefined ()  <696>;
                            if {
                                {
                                    () if_expr (__either.474)  <515>;
                                } #136
                                {
                                    (__tmp.412 var=130) __sint__mi___sint___sint (__ct_0.118 __apl_ff.410)  <516>;
                                    (__apl_carries.413 var=126) __uint__ls___uint___sint (sig_high.391 __tmp.412)  <517>;
                                    (__tmp.414 var=131) __uint__rs___uint___sint (a_low.26 shiftDist.96)  <518>;
                                    (__apl_r_low.415 var=132) __uint__or___uint___uint (__tmp.414 __apl_carries.413)  <519>;
                                } #137 off=6
                                {
                                    (__apl_r_low.417 var=132) __uint__rs___uint___sint (sig_high.391 __apl_ff.410)  <521>;
                                    (__trgt.475 var=238) const ()  <697>;
                                    () void_j_t21s_s2 (__trgt.475)  <698>;
                                } #138 off=5
                                {
                                    (__rt_low.418 var=120) merge (__apl_r_low.415 __apl_r_low.417)  <522>;
                                } #139
                            } #135
                            #170 off=7
                            (__trgt.478 var=240) const ()  <702>;
                            () void_j_t21s_s2 (__trgt.478)  <703>;
                        } #133
                        {
                            (__tmp_low.420 var=194) merge (a_low.26 __rt_low.418)  <524>;
                        } #140
                    } #130
                    #171 off=9
                    (__trgt.482 var=242) const ()  <708>;
                    () void_j_t21s_s2 (__trgt.482)  <709>;
                } #36
                {
                    (__rt.245 var=22) merge (__tmp.238 __tmp_low.420)  <260>;
                } #37
            } #15
            #172 off=18
            (__trgt.485 var=244) const ()  <713>;
            () void_j_t21s_s2 (__trgt.485)  <714>;
        } #7
        {
            (__rt.248 var=22) merge (__ct_0.118 __rt.245)  <263>;
        } #38
    } #4
    #41 off=20 nxt=-2
    (__ct_8s0.253 var=109) const ()  <268>;
    (__tmp.255 var=111) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_8s0.253)  <270>;
    (__R_SP.256 var=12 __sp.257 var=18) wr_res_reg (__tmp.255 __sp.41)  <271>;
    () void___rts_jr_w32 (__la.21)  <272>;
    (__rt.258 var=22 stl=X off=10) assign (__rt.248)  <273>;
    () out (__rt.258)  <274>;
    () sink (__sp.257)  <282>;
} #0
0 : 'SoftFloat-3e/source/f64_to_ui32_r_minMag.c';
----------
0 : (0,44:0,0);
4 : (0,66:4,14);
6 : (0,66:27,15);
7 : (0,72:8,18);
9 : (0,77:14,20);
11 : (0,77:14,21);
12 : (0,77:28,22);
15 : (0,77:4,24);
17 : (0,77:36,25);
18 : (0,82:17,25);
19 : (0,82:27,25);
22 : (0,82:27,27);
25 : (0,82:34,29);
27 : (0,82:36,30);
28 : (0,83:8,31);
30 : (0,83:8,31);
32 : (0,83:8,32);
33 : (0,83:14,33);
36 : (0,81:8,40);
41 : (0,94:4,50);
101 : (0,76:12,19);
107 : (0,82:27,26);
129 : (0,88:11,42);
130 : (0,88:11,42);
131 : (0,88:11,42);
132 : (0,88:11,42);
133 : (0,88:11,42);
134 : (0,88:11,42);
135 : (0,88:11,42);
136 : (0,88:11,42);
137 : (0,88:11,42);
138 : (0,88:11,42);
139 : (0,88:11,42);
140 : (0,88:11,42);
153 : (0,66:12,14);
----------
47 : (0,44:14,0);
48 : (0,44:14,0);
50 : (0,44:14,0);
51 : (0,44:14,0);
54 : (0,49:19,0);
97 : (0,61:38,0);
99 : (0,61:38,11);
103 : (0,65:22,0);
105 : (0,65:22,13);
106 : (0,66:12,0);
108 : (0,66:12,14);
127 : (0,66:4,14);
128 : (0,72:15,0);
154 : (0,77:14,20);
157 : (0,77:28,0);
159 : (0,77:28,22);
160 : (0,77:14,23);
179 : (0,77:4,24);
201 : (0,82:27,25);
207 : (0,82:27,28);
226 : (0,82:34,29);
227 : (0,82:36,0);
247 : (0,83:8,31);
252 : (0,83:8,34);
253 : (0,82:34,36);
260 : (0,77:4,46);
263 : (0,66:4,49);
268 : (0,94:4,0);
270 : (0,94:4,0);
271 : (0,94:4,50);
272 : (0,94:4,50);
273 : (0,94:4,0);
366 : (0,61:32,0);
377 : (0,61:32,11);
400 : (0,62:17,12);
432 : (0,76:36,19);
457 : (0,76:12,19);
489 : (0,87:8,41);
509 : (0,88:11,42);
512 : (0,88:11,42);
513 : (0,88:11,42);
514 : (0,88:11,42);
515 : (0,88:11,42);
516 : (0,88:11,42);
517 : (0,88:11,42);
518 : (0,88:11,42);
519 : (0,88:11,42);
521 : (0,88:11,42);
522 : (0,88:11,42);
524 : (0,88:11,42);
557 : (0,61:32,0);
561 : (0,76:36,0);
565 : (0,62:19,0);
567 : (0,87:11,0);
587 : (0,82:27,26);
588 : (0,82:27,26);
659 : (0,82:17,25);
678 : (0,77:14,20);
681 : (0,82:27,25);
684 : (0,83:8,31);
690 : (0,82:34,29);
695 : (0,88:11,42);
700 : (0,88:11,42);
706 : (0,77:4,24);
711 : (0,66:4,14);

