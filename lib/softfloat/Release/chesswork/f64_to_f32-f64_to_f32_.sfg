
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 16:32:31 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f64_to_f32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t f64_to_f32(float64_t)
Ff64_to_f32 : user_defined, called {
    fnm : "f64_to_f32" 'float32_t f64_to_f32(float64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : f64_to_f32 typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   23 : __rt typ=w32 bnd=p tref=float32_t___1
   25 : a_low typ=w32 bnd=m tref=__uint__
   26 : a_high typ=w32 bnd=m tref=__uint__
   27 : __ct_m16S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   40 : exp typ=w32 bnd=m tref=int_fast16_t__
   42 : uiZ typ=w32 bnd=m tref=uint_fast32_t__
   68 : __ct_2047 typ=w32 val=2047f bnd=m
   76 : __tmp typ=bool bnd=m
   80 : __ct_2143289344 typ=t20s_rp12 val=523264f bnd=m
   83 : __ct_31 typ=w32 val=31f bnd=m
   86 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   88 : __tmp typ=w32 bnd=m
   89 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   92 : __ct_22 typ=w32 val=22f bnd=m
   97 : __tmp typ=w32 bnd=m
  100 : __tmp typ=bool bnd=m
  112 : __tmp typ=w32 bnd=m
  115 : __tmp typ=w32 bnd=m
  116 : __ct_1073741824 typ=t20s_rp12 val=262144f bnd=m
  118 : __tmp typ=w32 bnd=m
  121 : softfloat_roundPackToF32 typ=t21s_s2 val=0r bnd=m
  123 : __tmp typ=w32 bnd=m
  124 : __ct_16s0 typ=w32 val=0s0 bnd=m
  126 : __tmp typ=w32 bnd=m
  149 : __ct_m897 typ=w32 val=-897f bnd=m
  158 : __apl_carries typ=w32 bnd=m tref=__uint__
  163 : __tmp typ=w32 bnd=m
  164 : __apl_r_low typ=w32 bnd=m tref=__uint__
  179 : __tmp typ=bool bnd=m
  201 : frac_high typ=w32 bnd=m
  228 : __ct_20 typ=w32 val=20f bnd=m
  233 : __ct_1048575 typ=w32 val=1048575f bnd=m
  236 : __tmpd typ=w32 bnd=m
  237 : __tmp typ=bool bnd=m
  249 : __tmp_low typ=w32 bnd=m
  268 : __tmp_low typ=w32 bnd=m
  279 : __ct_10 typ=w32 val=10f bnd=m
  280 : __ct_4194303 typ=w32 val=4194303f bnd=m
  287 : __tmp typ=w32 bnd=m
  318 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  325 : __tmp typ=t20s_rp12 bnd=m
  328 : __either typ=bool bnd=m
  329 : __trgt typ=t13s_s2 val=0j bnd=m
  330 : __trgt typ=t21s_s2 val=0j bnd=m
  331 : __trgt typ=t13s_s2 val=0j bnd=m
  332 : __trgt typ=t21s_s2 val=0j bnd=m
  333 : __trgt typ=t13s_s2 val=0j bnd=m
  334 : __trgt typ=t13s_s2 val=0j bnd=m
  335 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff64_to_f32 {
    #255 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (a_low.26 var=25 stl=X off=11) inp ()  <37>;
    (a_low.27 var=25) deassign (a_low.26)  <38>;
    (a_high.30 var=26 stl=X off=12) inp ()  <41>;
    (a_high.31 var=26) deassign (a_high.30)  <42>;
    (__rd___sp.34 var=21) rd_res_reg (__R_SP.11 __sp.17)  <45>;
    (__ct_m16S0.35 var=27) const ()  <46>;
    (__tmp.37 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_m16S0.35)  <48>;
    (__R_SP.38 var=12 __sp.39 var=18) wr_res_reg (__tmp.37 __sp.17)  <49>;
    (__rd___sp.40 var=21) rd_res_reg (__R_SP.11 __sp.39)  <51>;
    (__ct_31.149 var=83) const ()  <160>;
    (__ct_0.155 var=89) const ()  <166>;
    (__apl_r_low.349 var=164) __uint__rs___uint___sint (a_high.31 __ct_31.149)  <444>;
    (__tmp.369 var=179) bool__ne___uint___uint (__apl_r_low.349 __ct_0.155)  <469>;
    (__apl_r_low.390 var=164) __uint__rs___uint___sint (a_high.31 __ct_20.450)  <495>;
    (frac_high.409 var=201) __uint__ad___uint___uint (a_high.31 __ct_1048575.455)  <518>;
    (__ct_20.450 var=228) const ()  <592>;
    (__ct_1048575.455 var=233) const ()  <602>;
    (__ct_2147483648.595 var=318) const ()  <916>;
    (__trgt.605 var=329) const ()  <982>;
    () void_br_bool_t13s_s2 (__tmp.369 __trgt.605)  <983>;
    (__either.606 var=328) undefined ()  <984>;
    if {
        {
            () if_expr (__either.606)  <880>;
        } #257
        {
        } #258 off=2
        {
            (__trgt.607 var=330) const ()  <985>;
            () void_j_t21s_s2 (__trgt.607)  <986>;
        } #259 off=1
        {
            (__tmp.596 var=325) merge (__ct_2147483648.595 __ct_0.155)  <918>;
        } #260
    } #256
    #249 off=3
    (__ct_2047.96 var=68) const ()  <105>;
    (exp.98 var=40) __sint__ad___sint___sint (__apl_r_low.390 __ct_2047.96)  <107>;
    (__tmp.104 var=76) bool__eq___sint___sint (exp.98 __ct_2047.96)  <113>;
    (__ct_16s0.217 var=124) const ()  <229>;
    (__tmp.219 var=126) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_16s0.217)  <231>;
    (__trgt.613 var=334) const ()  <996>;
    () void_br_bool_t13s_s2 (__tmp.104 __trgt.613)  <997>;
    (__either.614 var=328) undefined ()  <998>;
    if {
        {
            () if_expr (__either.614)  <133>;
        } #5
        {
            #114 off=10
            (__ct_2143289344.146 var=80) const ()  <157>;
            (__tmpd.458 var=236) __uint__or___uint___uint (frac_high.409 a_low.27)  <626>;
            (__tmp.459 var=237) bool__ne___uint___uint (__tmpd.458 __ct_0.155)  <627>;
            (__trgt.608 var=331) const ()  <987>;
            () void_br_bool_t13s_s2 (__tmp.459 __trgt.608)  <988>;
            (__either.609 var=328) undefined ()  <989>;
            if {
                {
                    () if_expr (__either.609)  <156>;
                } #9
                {
                } #10 off=12
                {
                    (__ct_2139095040.152 var=86) const ()  <163>;
                    (__tmp.154 var=88) __uint__pl___uint___uint (__tmp.596 __ct_2139095040.152)  <165>;
                    (__trgt.610 var=332) const ()  <990>;
                    () void_j_t21s_s2 (__trgt.610)  <991>;
                } #11 off=11
                {
                    (uiZ.158 var=42) merge (__ct_2143289344.146 __tmp.154)  <169>;
                } #12
            } #8
        } #6
        {
            #277 off=4
            (__ct_22.159 var=92) const ()  <170>;
            (__tmp.164 var=97) __uint__or___uint___uint (exp.98 __tmp_low.528)  <175>;
            (__apl_carries.476 var=158) __uint__ls___uint___sint (frac_high.409 __ct_10.544)  <650>;
            (__tmp.477 var=163) __uint__rs___uint___sint (a_low.27 __ct_22.159)  <651>;
            (__apl_r_low.478 var=164) __uint__or___uint___uint (__tmp.477 __apl_carries.476)  <652>;
            (__tmp_low.498 var=249) __uint__ad___uint___uint (a_low.27 __ct_4194303.545)  <676>;
            (__tmp_low.528 var=268) __uint__or___uint___uint (__apl_r_low.478 __tmp.560)  <714>;
            (__ct_10.544 var=279) const ()  <753>;
            (__ct_4194303.545 var=280) const ()  <755>;
            (__tmp.560 var=287) __sint_sne0___sint (__tmp_low.498)  <812>;
            (__tmp.602 var=100) bool__ne___uint___uint (__tmp.164 __ct_0.155)  <960>;
            (__trgt.611 var=333) const ()  <992>;
            () void_br_bool_t13s_s2 (__tmp.602 __trgt.611)  <993>;
            (__either.612 var=328) undefined ()  <994>;
            if {
                {
                    () if_expr (__either.612)  <199>;
                    () chess_rear_then ()  <995>;
                } #16
                {
                    #21 off=6
                    (__tmp.202 var=115) __sint__pl___sint___sint (exp.98 __ct_m897.332)  <214>;
                    (__ct_1073741824.204 var=116) const ()  <216>;
                    (__tmp.206 var=118) __uint__or___uint___uint (__tmp_low.528 __ct_1073741824.204)  <218>;
                    (softfloat_roundPackToF32.210 var=121) const ()  <222>;
                    (__R_SP.220 var=12 __sp.221 var=18) wr_res_reg (__tmp.219 __sp.39)  <232>;
                    (__ct_m897.332 var=149) const ()  <404>;
                    (__tmp.464 var=112) __sint_sne0___sint (__apl_r_low.349)  <633>;
                    () void_j_t21s_s2 (softfloat_roundPackToF32.210)  <981>;
                    call {
                        (__tmp.199 var=112 stl=X off=11) assign (__tmp.464)  <211>;
                        (__tmp.203 var=115 stl=X off=12) assign (__tmp.202)  <215>;
                        (__tmp.207 var=118 stl=X off=13) assign (__tmp.206)  <219>;
                        (__la.212 var=22 stl=X off=1) assign (__la.22)  <224>;
                        (__tmp.213 var=123 stl=X off=10) Fsoftfloat_roundPackToF32 (__la.212 __tmp.199 __tmp.203 __tmp.207)  <225>;
                        (__tmp.214 var=123) deassign (__tmp.213)  <226>;
                    } #20 off=7
                    #22 off=8 nxt=-2
                    (__rt.222 var=23 stl=X off=10) assign (__tmp.214)  <234>;
                    () out (__rt.222)  <235>;
                    () sink (__sp.221)  <243>;
                } #18
                {
                } #42 off=5
                {
                } #23
            } #15
            #282 off=9
            (__trgt.615 var=335) const ()  <999>;
            () void_j_t21s_s2 (__trgt.615)  <1000>;
        } #13
        {
            (uiZ.278 var=42) merge (uiZ.158 __tmp.596)  <297>;
        } #24
    } #4
    #27 off=14 nxt=-2
    (__R_SP.295 var=12 __sp.296 var=18) wr_res_reg (__tmp.219 __sp.39)  <313>;
    () void___rts_jr_w32 (__la.22)  <314>;
    (__rt.297 var=23 stl=X off=10) assign (uiZ.278)  <315>;
    () out (__rt.297)  <316>;
    () sink (__sp.296)  <324>;
} #0
0 : 'SoftFloat-3e/source/f64_to_f32.c';
----------
0 : (0,44:0,0);
4 : (0,64:4,14);
6 : (0,64:24,15);
8 : (0,65:8,15);
10 : (0,65:20,16);
11 : (0,68:15,20);
13 : (0,83:1,27);
15 : (0,76:4,29);
18 : (0,83:1,34);
20 : (0,82:11,35);
21 : (0,82:4,35);
22 : (0,82:4,35);
27 : (0,85:4,45);
114 : (0,65:8,15);
249 : (0,64:13,14);
255 : (0,69:20,20);
256 : (0,69:20,20);
257 : (0,69:20,20);
258 : (0,69:20,20);
259 : (0,69:20,20);
260 : (0,69:20,20);
277 : (0,76:9,29);
----------
45 : (0,44:10,0);
46 : (0,44:10,0);
48 : (0,44:10,0);
49 : (0,44:10,0);
51 : (0,46:19,0);
105 : (0,60:39,0);
107 : (0,60:39,12);
113 : (0,64:13,14);
133 : (0,64:4,14);
156 : (0,65:8,15);
157 : (0,67:19,0);
160 : (0,69:39,0);
163 : (0,69:63,0);
165 : (0,69:43,20);
166 : (0,69:69,0);
169 : (0,65:8,23);
170 : (0,75:49,0);
175 : (0,76:16,29);
199 : (0,76:4,29);
211 : (0,82:37,0);
214 : (0,82:47,35);
215 : (0,82:47,0);
216 : (0,82:63,0);
218 : (0,82:63,35);
219 : (0,82:63,0);
224 : (0,82:11,0);
225 : (0,82:11,35);
229 : (0,82:4,0);
231 : (0,82:4,0);
232 : (0,82:4,35);
234 : (0,82:35,0);
297 : (0,64:4,42);
313 : (0,85:4,45);
314 : (0,85:4,45);
315 : (0,85:13,0);
404 : (0,82:47,0);
444 : (0,59:36,11);
469 : (0,59:12,11);
495 : (0,60:33,12);
518 : (0,61:18,13);
592 : (0,60:33,0);
602 : (0,61:20,0);
626 : (0,65:8,15);
627 : (0,65:8,15);
650 : (0,75:13,28);
651 : (0,75:13,28);
652 : (0,75:13,28);
676 : (0,75:13,28);
714 : (0,75:13,28);
753 : (0,75:13,0);
755 : (0,75:13,0);
812 : (0,75:13,28);
880 : (0,69:20,20);
916 : (0,69:37,0);
918 : (0,69:20,20);
960 : (0,76:9,29);
981 : (0,82:11,35);
983 : (0,69:20,20);
988 : (0,65:8,15);
993 : (0,76:4,29);
997 : (0,64:4,14);

