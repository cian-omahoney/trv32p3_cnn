
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:32:01 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/s_normSubnormalF64Sig.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  exp16_sig64 softfloat_normSubnormalF64Sig(uint_fast64_t)
Fsoftfloat_normSubnormalF64Sig : user_defined, called {
    fnm : "softfloat_normSubnormalF64Sig" 'exp16_sig64 softfloat_normSubnormalF64Sig(uint_fast64_t)';
    arg : ( w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
!!  uint_fast8_t softfloat_countLeadingZeros64(uint64_t)
Fsoftfloat_countLeadingZeros64 : user_defined, called {
    fnm : "softfloat_countLeadingZeros64" 'uint_fast8_t softfloat_countLeadingZeros64(uint64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : softfloat_normSubnormalF64Sig typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __extDMb_exp16_sig64 typ=w08 bnd=b stl=DMb
   25 : __extPMb_void typ=u08 bnd=b stl=PMb
   26 : __extDMb_w32 typ=w08 bnd=b stl=DMb
   27 : __rd___sp typ=w32 bnd=m
   28 : __la typ=w32 bnd=p tref=w32__
   29 : __aptr___rt typ=w32 bnd=p tref=__Pexp16_sig64__
   31 : sig_low typ=w32 bnd=m tref=__uint__
   32 : sig_high typ=w32 bnd=m tref=__uint__
   33 : __ct_m12S0 typ=w32 val=0S0 bnd=m
   35 : __tmp typ=w32 bnd=m
   57 : softfloat_countLeadingZeros64 typ=t21s_s2 val=0r bnd=m
   58 : __link typ=w32 bnd=m
   59 : __tmp typ=w32 bnd=m
   62 : __tmp typ=w32 bnd=m
   64 : __ct_1 typ=w32 val=1f bnd=m
   66 : __tmp typ=w32 bnd=m
   71 : __ct_4 typ=w32 val=4f bnd=m
  106 : __ct_12s0 typ=w32 val=0s0 bnd=m
  108 : __tmp typ=w32 bnd=m
  121 : __ct_4294967285 typ=w32 val=-11f bnd=m
  123 : __shv___aptr___rt typ=w32 bnd=m
  124 : __ct_8 typ=w32 val=8f bnd=m
  133 : __rt_low typ=w32 bnd=m tref=__uint__
  134 : __rt_high typ=w32 bnd=m tref=__uint__
  138 : __apl_ff typ=w32 bnd=m tref=__sint__
  139 : __apl_carries typ=w32 bnd=m tref=__uint__
  140 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  141 : __tmp typ=bool bnd=m
  142 : __tmp typ=bool bnd=m
  143 : __tmp typ=w32 bnd=m
  144 : __apl_r_low typ=w32 bnd=m tref=__uint__
  145 : __tmp typ=w32 bnd=m
  146 : __apl_r_high typ=w32 bnd=m tref=__uint__
  148 : __ct_m32 typ=w32 val=-32f bnd=m
  149 : __tmp_low typ=w32 bnd=m
  151 : __tmp_high typ=w32 bnd=m
  165 : __either typ=bool bnd=m
  166 : __trgt typ=t13s_s2 val=0j bnd=m
  167 : __trgt typ=t21s_s2 val=0j bnd=m
  168 : __trgt typ=t13s_s2 val=0j bnd=m
  169 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_normSubnormalF64Sig {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__extDMb_exp16_sig64.19 var=20) source ()  <30>;
    (__extPMb_void.24 var=25) source ()  <35>;
    (__extDMb_w32.25 var=26) source ()  <36>;
    (__la.27 var=28 stl=X off=1) inp ()  <38>;
    (__la.28 var=28) deassign (__la.27)  <39>;
    (__aptr___rt.30 var=29 stl=X off=10) inp ()  <41>;
    (__aptr___rt.31 var=29) deassign (__aptr___rt.30)  <42>;
    (sig_low.34 var=31 stl=X off=11) inp ()  <45>;
    (sig_low.35 var=31) deassign (sig_low.34)  <46>;
    (sig_high.38 var=32 stl=X off=12) inp ()  <49>;
    (sig_high.39 var=32) deassign (sig_high.38)  <50>;
    (__rd___sp.42 var=27) rd_res_reg (__R_SP.11 __sp.17)  <53>;
    (__ct_m12S0.43 var=33) const ()  <54>;
    (__tmp.45 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.42 __ct_m12S0.43)  <56>;
    (__R_SP.46 var=12 __sp.47 var=18) wr_res_reg (__tmp.45 __sp.17)  <57>;
    (__rd___sp.48 var=27) rd_res_reg (__R_SP.11 __sp.47)  <59>;
    (softfloat_countLeadingZeros64.75 var=57) const ()  <86>;
    (__link.76 var=58) w32_jal_t21s_s2 (softfloat_countLeadingZeros64.75)  <87>;
    call {
        (sig_low.70 var=31 stl=X off=11) assign (sig_low.35)  <81>;
        (sig_high.72 var=32 stl=X off=12) assign (sig_high.39)  <83>;
        (__link.77 var=58 stl=X off=1) assign (__link.76)  <88>;
        (__tmp.78 var=59 stl=X off=10) Fsoftfloat_countLeadingZeros64 (__link.77 sig_low.70 sig_high.72)  <89>;
        (__tmp.79 var=59) deassign (__tmp.78)  <90>;
    } #4 off=1
    #46 off=2
    (__tmp.83 var=62) __uint__pl___uint___uint (__tmp.79 __ct_4294967285.433)  <94>;
    (__ct_1.85 var=64) const ()  <96>;
    (__tmp.87 var=66) __sint__mi___sint___sint (__ct_1.85 __tmp.83)  <98>;
    (__ct_4294967285.433 var=121) const ()  <444>;
    (__ct_0.467 var=140) const ()  <487>;
    (__tmp.468 var=141) bool__eq___sint___sint (__tmp.83 __ct_0.467)  <488>;
    (__trgt.503 var=168) const ()  <577>;
    () void_br_bool_t13s_s2 (__tmp.468 __trgt.503)  <578>;
    (__either.504 var=165) undefined ()  <579>;
    if {
        {
            () if_expr (__either.504)  <491>;
        } #48
        {
        } #49 off=7
        {
            #51 off=3
            (__ct_m32.469 var=148) const ()  <489>;
            (__apl_ff.471 var=138) __sint__pl___sint___sint (__tmp.83 __ct_m32.469)  <492>;
            (__tmp.472 var=142) bool__lt___sint___sint (__apl_ff.471 __ct_0.467)  <493>;
            (__trgt.500 var=166) const ()  <572>;
            () void_br_bool_t13s_s2 (__tmp.472 __trgt.500)  <573>;
            (__either.501 var=165) undefined ()  <574>;
            if {
                {
                    () if_expr (__either.501)  <494>;
                } #53
                {
                    (__tmp.473 var=143) __sint__mi___sint___sint (__ct_0.467 __apl_ff.471)  <495>;
                    (__apl_carries.474 var=139) __uint__rs___uint___sint (sig_low.35 __tmp.473)  <496>;
                    (__apl_r_low.475 var=144) __uint__ls___uint___sint (sig_low.35 __tmp.83)  <497>;
                    (__tmp.476 var=145) __uint__ls___uint___sint (sig_high.39 __tmp.83)  <498>;
                    (__apl_r_high.477 var=146) __uint__or___uint___uint (__tmp.476 __apl_carries.474)  <499>;
                } #54 off=5
                {
                    (__apl_r_high.478 var=146) __uint__ls___uint___sint (sig_low.35 __apl_ff.471)  <500>;
                    (__trgt.502 var=167) const ()  <575>;
                    () void_j_t21s_s2 (__trgt.502)  <576>;
                } #55 off=4
                {
                    (__rt_low.479 var=133) merge (__apl_r_low.475 __ct_0.467)  <501>;
                    (__rt_high.480 var=134) merge (__apl_r_high.477 __apl_r_high.478)  <502>;
                } #56
            } #52
            #61 off=6
            (__trgt.505 var=169) const ()  <580>;
            () void_j_t21s_s2 (__trgt.505)  <581>;
        } #50
        {
            (__tmp_low.481 var=149) merge (sig_low.35 __rt_low.479)  <503>;
            (__tmp_high.482 var=151) merge (sig_high.39 __rt_high.480)  <504>;
        } #57
    } #47
    #29 off=8 nxt=-2
    (__ct_4.94 var=71) const ()  <104>;
    (__M_DMw.272 var=5 __extDMb_exp16_sig64.273 var=20 __extDMb_w32.274 var=26 __extPMb_void.275 var=25) store (__tmp.87 __aptr___rt.31 __extDMb_exp16_sig64.19 __extDMb_w32.25 __extPMb_void.24)  <284>;
    (__ct_12s0.372 var=106) const ()  <349>;
    (__tmp.374 var=108) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_12s0.372)  <351>;
    (__R_SP.375 var=12 __sp.376 var=18) wr_res_reg (__tmp.374 __sp.47)  <352>;
    () void___rts_jr_w32 (__la.28)  <353>;
    () sink (__sp.376)  <361>;
    () sink (__extDMb_exp16_sig64.446)  <362>;
    () sink (__extPMb_void.448)  <363>;
    () sink (__extDMb_w32.447)  <364>;
    (__M_DMw.438 var=5 __extDMb_exp16_sig64.439 var=20 __extDMb_w32.440 var=26 __extPMb_void.441 var=25) store (__tmp_low.481 __shv___aptr___rt.451 __extDMb_exp16_sig64.273 __extDMb_w32.274 __extPMb_void.275)  <451>;
    (__M_DMw.445 var=5 __extDMb_exp16_sig64.446 var=20 __extDMb_w32.447 var=26 __extPMb_void.448 var=25) store (__tmp_high.482 __shv___aptr___rt.453 __extDMb_exp16_sig64.439 __extDMb_w32.440 __extPMb_void.441)  <455>;
    (__shv___aptr___rt.451 var=123) __Pvoid__pl___Pvoid___sint (__aptr___rt.31 __ct_4.94)  <458>;
    (__ct_8.452 var=124) const ()  <459>;
    (__shv___aptr___rt.453 var=123) __Pvoid__pl___Pvoid___sint (__aptr___rt.31 __ct_8.452)  <461>;
} #0
0 : 'SoftFloat-3e/source/s_normSubnormalF64Sig.c';
----------
0 : (0,41:0,0);
3 : (0,46:47,3);
4 : (0,46:16,3);
29 : (0,49:4,56);
46 : (0,48:15,5);
47 : (0,48:15,5);
48 : (0,48:15,5);
49 : (0,48:15,5);
50 : (0,48:15,5);
51 : (0,48:15,5);
52 : (0,48:15,5);
53 : (0,48:15,5);
54 : (0,48:15,5);
55 : (0,48:15,5);
56 : (0,48:15,5);
57 : (0,48:15,5);
----------
53 : (0,41:19,0);
54 : (0,41:19,0);
56 : (0,41:19,0);
57 : (0,41:19,0);
59 : (0,44:23,0);
81 : (0,46:47,0);
83 : (0,46:47,0);
87 : (0,46:16,3);
88 : (0,46:16,0);
89 : (0,46:16,3);
94 : (0,46:53,3);
96 : (0,47:14,0);
98 : (0,47:14,4);
104 : (0,48:5,0);
284 : (0,49:11,28);
349 : (0,49:4,0);
351 : (0,49:4,0);
352 : (0,49:4,56);
353 : (0,49:4,56);
444 : (0,46:53,0);
451 : (0,49:11,28);
455 : (0,49:11,28);
487 : (0,48:15,0);
488 : (0,48:15,5);
489 : (0,48:15,0);
491 : (0,48:15,5);
492 : (0,48:15,5);
493 : (0,48:15,5);
494 : (0,48:15,5);
495 : (0,48:15,5);
496 : (0,48:15,5);
497 : (0,48:15,5);
498 : (0,48:15,5);
499 : (0,48:15,5);
500 : (0,48:15,5);
501 : (0,48:15,5);
502 : (0,48:15,5);
503 : (0,48:15,5);
504 : (0,48:15,5);
573 : (0,48:15,5);
578 : (0,48:15,5);

