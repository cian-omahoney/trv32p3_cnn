
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:54:22 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/s_normRoundPackToF64.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float64_t softfloat_normRoundPackToF64(bool, int_fast16_t, uint_fast64_t)
Fsoftfloat_normRoundPackToF64 : user_defined, called {
    fnm : "softfloat_normRoundPackToF64" 'float64_t softfloat_normRoundPackToF64(bool, int_fast16_t, uint_fast64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
!!  uint_fast8_t softfloat_countLeadingZeros64(uint64_t)
Fsoftfloat_countLeadingZeros64 : user_defined, called {
    fnm : "softfloat_countLeadingZeros64" 'uint_fast8_t softfloat_countLeadingZeros64(uint64_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    llv : 0 0 0 0 0 ;
}
!!  float64_t softfloat_roundPackToF64(bool, int_fast16_t, uint_fast64_t)
Fsoftfloat_roundPackToF64 : user_defined, called {
    fnm : "softfloat_roundPackToF64" 'float64_t softfloat_roundPackToF64(bool, int_fast16_t, uint_fast64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : softfloat_normRoundPackToF64 typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   23 : __rt_low typ=w32 bnd=m tref=__uint__
   24 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : sign typ=w32 bnd=p tref=bool__
   27 : exp typ=w32 bnd=p tref=int_fast16_t__
   29 : sig_low typ=w32 bnd=m tref=__uint__
   30 : sig_high typ=w32 bnd=m tref=__uint__
   31 : __ct_m8S0 typ=w32 val=0S0 bnd=m
   33 : __tmp typ=w32 bnd=m
   42 : softfloat_countLeadingZeros64 typ=t21s_s2 val=0r bnd=m
   43 : __link typ=w32 bnd=m
   44 : __tmp typ=w32 bnd=m
   47 : __tmp typ=w32 bnd=m
   50 : __ct_10 typ=w32 val=10f bnd=m
   52 : __tmp typ=bool bnd=m
   54 : __ct_2045 typ=w32 val=2045f bnd=m
   56 : __tmp typ=bool bnd=m
   59 : __tmp typ=bool bnd=m
   67 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   69 : __tmp typ=w32 bnd=m
   77 : __tmp typ=w32 bnd=m
   95 : __tmp typ=w32 bnd=m
   97 : __tmp_low typ=w32 bnd=m tref=__uint__
   98 : __tmp_high typ=w32 bnd=m tref=__uint__
  101 : softfloat_roundPackToF64 typ=t21s_s2 val=0r bnd=m
  104 : __tmp typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  107 : __ct_8s0 typ=w32 val=0s0 bnd=m
  109 : __tmp typ=w32 bnd=m
  121 : __ct_4294967295 typ=w32 val=-1f bnd=m
  122 : __ct_m10 typ=w32 val=-10f bnd=m
  125 : __rt_low typ=w32 bnd=m tref=__uint__
  126 : __rt_high typ=w32 bnd=m tref=__uint__
  130 : __apl_ff typ=w32 bnd=m tref=__sint__
  131 : __apl_carries typ=w32 bnd=m tref=__uint__
  133 : __tmp typ=bool bnd=m
  134 : __tmp typ=bool bnd=m
  135 : __tmp typ=w32 bnd=m
  136 : __apl_r_low typ=w32 bnd=m tref=__uint__
  137 : __tmp typ=w32 bnd=m
  138 : __apl_r_high typ=w32 bnd=m tref=__uint__
  140 : __ct_m32 typ=w32 val=-32f bnd=m
  176 : __apl_r_high typ=w32 bnd=m tref=__uint__
  189 : __tmp_low typ=w32 bnd=m
  191 : __tmp_high typ=w32 bnd=m
  203 : __tmp_low typ=w32 bnd=m
  205 : __tmp_high typ=w32 bnd=m
  211 : __ct_31 typ=w32 val=31f bnd=m
  213 : __ct_20 typ=w32 val=20f bnd=m
  217 : __tmpd typ=w32 bnd=m
  218 : __tmp typ=bool bnd=m
  223 : __tmp typ=w32 bnd=m
  254 : __false typ=bool val=0f bnd=m
  255 : __either typ=bool bnd=m
  256 : __trgt typ=t13s_s2 val=0j bnd=m
  257 : __trgt typ=t13s_s2 val=0j bnd=m
  258 : __trgt typ=t21s_s2 val=0j bnd=m
  259 : __trgt typ=t13s_s2 val=0j bnd=m
  260 : __trgt typ=t21s_s2 val=0j bnd=m
  261 : __trgt typ=t13s_s2 val=0j bnd=m
  262 : __trgt typ=t21s_s2 val=0j bnd=m
  263 : __trgt typ=t13s_s2 val=0j bnd=m
  264 : __trgt typ=t21s_s2 val=0j bnd=m
  265 : __trgt typ=t13s_s2 val=0j bnd=m
  266 : __trgt typ=t21s_s2 val=0j bnd=m
  267 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fsoftfloat_normRoundPackToF64 {
    #34 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (sign.28 var=25 stl=X off=12) inp ()  <39>;
    (sign.29 var=25) deassign (sign.28)  <40>;
    (exp.31 var=27 stl=X off=13) inp ()  <42>;
    (exp.32 var=27) deassign (exp.31)  <43>;
    (sig_low.35 var=29 stl=X off=14) inp ()  <46>;
    (sig_low.36 var=29) deassign (sig_low.35)  <47>;
    (sig_high.39 var=30 stl=X off=15) inp ()  <50>;
    (sig_high.40 var=30) deassign (sig_high.39)  <51>;
    (__rd___sp.43 var=20) rd_res_reg (__R_SP.11 __sp.17)  <54>;
    (__ct_m8S0.44 var=31) const ()  <55>;
    (__tmp.46 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_m8S0.44)  <57>;
    (__R_SP.47 var=12 __sp.48 var=18) wr_res_reg (__tmp.46 __sp.17)  <58>;
    (__rd___sp.50 var=20) rd_res_reg (__R_SP.11 __sp.48)  <61>;
    (softfloat_countLeadingZeros64.63 var=42) const ()  <74>;
    (__link.64 var=43) w32_jal_t21s_s2 (softfloat_countLeadingZeros64.63)  <75>;
    call {
        (sig_low.58 var=29 stl=X off=11) assign (sig_low.36)  <69>;
        (sig_high.60 var=30 stl=X off=12) assign (sig_high.40)  <71>;
        (__link.65 var=43 stl=X off=1) assign (__link.64)  <76>;
        (__tmp.66 var=44 stl=X off=10) Fsoftfloat_countLeadingZeros64 (__link.65 sig_low.58 sig_high.60)  <77>;
        (__tmp.67 var=44) deassign (__tmp.66)  <78>;
    } #4 off=1
    #5 off=2
    (__tmp.71 var=47) __uint__pl___uint___uint (__tmp.67 __ct_4294967295.236)  <82>;
    (exp.73 var=27) __sint__mi___sint___sint (exp.32 __tmp.71)  <84>;
    (__ct_10.74 var=50) const ()  <85>;
    (__ct_0.133 var=67) const ()  <147>;
    (__ct_8s0.195 var=107) const ()  <206>;
    (__ct_4294967295.236 var=121) const ()  <288>;
    (__ct_m32.245 var=140) const ()  <314>;
    (__tmp.479 var=52) bool__lt___sint___sint (__tmp.71 __ct_10.74)  <713>;
    (__trgt.489 var=256) const ()  <741>;
    () void_br_bool_t13s_s2 (__tmp.479 __trgt.489)  <742>;
    (__either.490 var=255) undefined ()  <743>;
    if {
        {
            () if_expr (__either.490)  <102>;
        } #7
        {
            (__false.506 var=254) const ()  <769>;
        } #9
        {
            (__ct_2045.92 var=54) const ()  <104>;
            (__tmp.94 var=56) bool__lt___uint___uint (exp.73 __ct_2045.92)  <106>;
            (__trgt.507 var=267) const ()  <770>;
            () void_br_bool_t13s_s2 (__tmp.94 __trgt.507)  <771>;
            (__either.508 var=255) undefined ()  <772>;
        } #8 off=3
        {
            (__tmp.97 var=59) merge (__false.506 __either.508)  <109>;
        } #10
    } #6
    if {
        {
            () if_expr (__tmp.97)  <124>;
        } #13
        {
            #218 off=13
            (__apl_r_high.254 var=138) __uint__ls___uint___sint (__tmp.459 __ct_31.429)  <325>;
            (__ct_31.429 var=211) const ()  <553>;
            (__tmpd.435 var=217) __uint__or___uint___uint (sig_high.40 sig_low.36)  <578>;
            (__tmp.436 var=218) bool__ne___uint___uint (__tmpd.435 __ct_0.133)  <579>;
            (__tmp.459 var=223) __sint_sne0___sint (sign.29)  <627>;
            (__trgt.491 var=257) const ()  <744>;
            () void_br_bool_t13s_s2 (__tmp.436 __trgt.491)  <745>;
            (__either.492 var=255) undefined ()  <746>;
            if {
                {
                    () if_expr (__either.492)  <146>;
                } #17
                {
                } #18 off=15
                {
                    (__trgt.493 var=258) const ()  <747>;
                    () void_j_t21s_s2 (__trgt.493)  <748>;
                } #19 off=14
                {
                    (__tmp.135 var=69) merge (exp.73 __ct_0.133)  <149>;
                } #20
            } #16
            #205 off=16
            (__tmp.143 var=77) __sint__pl___sint___sint (__tmp.71 __ct_m10.237)  <157>;
            (__ct_m10.237 var=122) const ()  <290>;
            (__apl_r_high.295 var=138) __uint__ls___uint___sint (__tmp.135 __ct_20.431)  <376>;
            (__apl_r_high.316 var=176) __uint__pl___uint___uint (__apl_r_high.254 __apl_r_high.295)  <402>;
            (__tmp.344 var=133) bool__eq___sint___sint (__tmp.143 __ct_0.133)  <435>;
            (__ct_20.431 var=213) const ()  <557>;
            (__trgt.497 var=261) const ()  <754>;
            () void_br_bool_t13s_s2 (__tmp.344 __trgt.497)  <755>;
            (__either.498 var=255) undefined ()  <756>;
            if {
                {
                    () if_expr (__either.498)  <438>;
                } #125
                {
                } #126 off=21
                {
                    #128 off=17
                    (__apl_ff.347 var=130) __sint__pl___sint___sint (__tmp.143 __ct_m32.245)  <439>;
                    (__tmp.348 var=134) bool__lt___sint___sint (__apl_ff.347 __ct_0.133)  <440>;
                    (__trgt.494 var=259) const ()  <749>;
                    () void_br_bool_t13s_s2 (__tmp.348 __trgt.494)  <750>;
                    (__either.495 var=255) undefined ()  <751>;
                    if {
                        {
                            () if_expr (__either.495)  <441>;
                        } #130
                        {
                            (__tmp.349 var=135) __sint__mi___sint___sint (__ct_0.133 __apl_ff.347)  <442>;
                            (__apl_carries.350 var=131) __uint__rs___uint___sint (sig_low.36 __tmp.349)  <443>;
                            (__apl_r_low.351 var=136) __uint__ls___uint___sint (sig_low.36 __tmp.143)  <444>;
                            (__tmp.352 var=137) __uint__ls___uint___sint (sig_high.40 __tmp.143)  <445>;
                            (__apl_r_high.353 var=138) __uint__or___uint___uint (__tmp.352 __apl_carries.350)  <446>;
                        } #131 off=19
                        {
                            (__apl_r_high.354 var=138) __uint__ls___uint___sint (sig_low.36 __apl_ff.347)  <447>;
                            (__trgt.496 var=260) const ()  <752>;
                            () void_j_t21s_s2 (__trgt.496)  <753>;
                        } #132 off=18
                        {
                            (__rt_low.355 var=125) merge (__apl_r_low.351 __ct_0.133)  <448>;
                            (__rt_high.356 var=126) merge (__apl_r_high.353 __apl_r_high.354)  <449>;
                        } #133
                    } #129
                    #229 off=20
                    (__trgt.499 var=262) const ()  <757>;
                    () void_j_t21s_s2 (__trgt.499)  <758>;
                } #127
                {
                    (__tmp_low.357 var=189) merge (sig_low.36 __rt_low.355)  <450>;
                    (__tmp_high.358 var=191) merge (sig_high.40 __rt_high.356)  <451>;
                } #134
            } #124
            #148 off=22
            (__apl_r_high.375 var=176) __uint__pl___uint___uint (__apl_r_high.316 __tmp_high.358)  <473>;
        } #14
        {
            #166 off=4
            (__tmp.403 var=133) bool__eq___sint___sint (__tmp.71 __ct_0.133)  <506>;
            (__trgt.503 var=265) const ()  <764>;
            () void_br_bool_t13s_s2 (__tmp.403 __trgt.503)  <765>;
            (__either.504 var=255) undefined ()  <766>;
            if {
                {
                    () if_expr (__either.504)  <509>;
                } #168
                {
                } #169 off=9
                {
                    #171 off=5
                    (__apl_ff.406 var=130) __sint__pl___sint___sint (__tmp.71 __ct_m32.245)  <510>;
                    (__tmp.407 var=134) bool__lt___sint___sint (__apl_ff.406 __ct_0.133)  <511>;
                    (__trgt.500 var=263) const ()  <759>;
                    () void_br_bool_t13s_s2 (__tmp.407 __trgt.500)  <760>;
                    (__either.501 var=255) undefined ()  <761>;
                    if {
                        {
                            () if_expr (__either.501)  <512>;
                        } #173
                        {
                            (__tmp.408 var=135) __sint__mi___sint___sint (__ct_0.133 __apl_ff.406)  <513>;
                            (__apl_carries.409 var=131) __uint__rs___uint___sint (sig_low.36 __tmp.408)  <514>;
                            (__apl_r_low.410 var=136) __uint__ls___uint___sint (sig_low.36 __tmp.71)  <515>;
                            (__tmp.411 var=137) __uint__ls___uint___sint (sig_high.40 __tmp.71)  <516>;
                            (__apl_r_high.412 var=138) __uint__or___uint___uint (__tmp.411 __apl_carries.409)  <517>;
                        } #174 off=7
                        {
                            (__apl_r_high.413 var=138) __uint__ls___uint___sint (sig_low.36 __apl_ff.406)  <518>;
                            (__trgt.502 var=264) const ()  <762>;
                            () void_j_t21s_s2 (__trgt.502)  <763>;
                        } #175 off=6
                        {
                            (__rt_low.414 var=125) merge (__apl_r_low.410 __ct_0.133)  <519>;
                            (__rt_high.415 var=126) merge (__apl_r_high.412 __apl_r_high.413)  <520>;
                        } #176
                    } #172
                    #230 off=8
                    (__trgt.505 var=266) const ()  <767>;
                    () void_j_t21s_s2 (__trgt.505)  <768>;
                } #170
                {
                    (__tmp_low.416 var=203) merge (sig_low.36 __rt_low.414)  <521>;
                    (__tmp_high.417 var=205) merge (sig_high.40 __rt_high.415)  <522>;
                } #177
            } #167
            #224 off=10
            (softfloat_roundPackToF64.179 var=101) const ()  <191>;
            (__tmp.482 var=109) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_8s0.195)  <730>;
            (__R_SP.483 var=12 __sp.484 var=18) wr_res_reg (__tmp.482 __sp.48)  <731>;
            () void_j_t21s_s2 (softfloat_roundPackToF64.179)  <738>;
            call {
                (__tmp.170 var=95 stl=X off=12) assign (sign.29)  <182>;
                (exp.171 var=27 stl=X off=13) assign (exp.73)  <183>;
                (__tmp_low.174 var=97 stl=X off=14) assign (__tmp_low.416)  <186>;
                (__tmp_high.176 var=98 stl=X off=15) assign (__tmp_high.417)  <188>;
                (__la.181 var=21 stl=X off=1) assign (__la.21)  <193>;
                (__tmp.183 var=104 stl=X off=10 __tmp.187 var=105 stl=X off=11) Fsoftfloat_roundPackToF64 (__la.181 __tmp.170 exp.171 __tmp_low.174 __tmp_high.176)  <194>;
                (__tmp.184 var=104) deassign (__tmp.183)  <196>;
                (__tmp.188 var=105) deassign (__tmp.187)  <199>;
            } #24 off=11
            #225 off=12 nxt=-2
            (__rt_low.485 var=23 stl=X off=10) assign (__tmp.184)  <733>;
            () out (__rt_low.485)  <734>;
            (__rt_high.486 var=24 stl=X off=11) assign (__tmp.188)  <735>;
            () out (__rt_high.486)  <736>;
            () sink (__sp.484)  <737>;
            (__rt_low.487 var=23) never ()  <739>;
            (__rt_high.488 var=24) never ()  <740>;
        } #22
        {
            (__rt_low.230 var=23) merge (__tmp_low.357 __rt_low.487)  <282>;
            (__rt_high.233 var=24) merge (__apl_r_high.375 __rt_high.488)  <285>;
        } #25
    } #12
    #28 off=23 nxt=-2
    (__tmp.197 var=109) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_8s0.195)  <208>;
    (__R_SP.198 var=12 __sp.199 var=18) wr_res_reg (__tmp.197 __sp.48)  <209>;
    () void___rts_jr_w32 (__la.21)  <210>;
    (__rt_low.201 var=23 stl=X off=10) assign (__rt_low.230)  <212>;
    () out (__rt_low.201)  <213>;
    (__rt_high.203 var=24 stl=X off=11) assign (__rt_high.233)  <215>;
    () out (__rt_high.203)  <216>;
    () sink (__sp.199)  <224>;
} #0
0 : 'SoftFloat-3e/source/s_normRoundPackToF64.c';
----------
0 : (0,42:0,0);
4 : (0,48:16,3);
5 : (0,50:13,5);
6 : (0,50:27,5);
8 : (0,50:50,6);
9 : (0,50:27,7);
12 : (0,50:4,9);
14 : (0,54:8,10);
16 : (0,51:82,10);
18 : (0,51:84,11);
19 : (0,51:82,12);
22 : (0,52:8,19);
24 : (0,54:15,19);
28 : (0,50:4,24);
34 : (0,48:16,3);
124 : (0,51:104,14);
125 : (0,51:104,14);
126 : (0,51:104,14);
127 : (0,51:104,14);
128 : (0,51:104,14);
129 : (0,51:104,14);
130 : (0,51:104,14);
131 : (0,51:104,14);
132 : (0,51:104,14);
133 : (0,51:104,14);
134 : (0,51:104,14);
148 : (0,51:98,14);
166 : (0,54:55,19);
167 : (0,54:55,19);
168 : (0,54:55,19);
169 : (0,54:55,19);
170 : (0,54:55,19);
171 : (0,54:55,19);
172 : (0,54:55,19);
173 : (0,54:55,19);
174 : (0,54:55,19);
175 : (0,54:55,19);
176 : (0,54:55,19);
177 : (0,54:55,19);
205 : (0,51:104,14);
218 : (0,51:82,10);
224 : (0,50:4,24);
225 : (0,50:4,24);
----------
54 : (0,43:1,0);
55 : (0,43:1,0);
57 : (0,43:1,0);
58 : (0,43:1,0);
61 : (0,46:19,0);
69 : (0,48:47,0);
71 : (0,48:47,0);
75 : (0,48:16,3);
76 : (0,48:16,0);
77 : (0,48:16,3);
82 : (0,48:53,3);
84 : (0,49:8,4);
85 : (0,50:13,0);
102 : (0,50:27,5);
104 : (0,50:50,0);
106 : (0,50:50,6);
109 : (0,50:27,8);
124 : (0,50:4,9);
146 : (0,51:82,10);
147 : (0,51:82,0);
149 : (0,51:82,13);
157 : (0,51:117,14);
182 : (0,54:41,0);
183 : (0,54:47,0);
186 : (0,54:55,0);
188 : (0,54:55,0);
193 : (0,54:15,0);
194 : (0,54:15,19);
206 : (0,50:4,0);
208 : (0,50:4,0);
209 : (0,50:4,24);
210 : (0,50:4,24);
212 : (0,50:4,0);
215 : (0,50:4,0);
288 : (0,48:53,0);
290 : (0,51:117,0);
314 : (0,51:52,0);
325 : (0,51:52,10);
376 : (0,51:92,14);
402 : (0,51:58,14);
435 : (0,51:104,14);
438 : (0,51:104,14);
439 : (0,51:104,14);
440 : (0,51:104,14);
441 : (0,51:104,14);
442 : (0,51:104,14);
443 : (0,51:104,14);
444 : (0,51:104,14);
445 : (0,51:104,14);
446 : (0,51:104,14);
447 : (0,51:104,14);
448 : (0,51:104,14);
449 : (0,51:104,14);
450 : (0,51:104,14);
451 : (0,51:104,14);
473 : (0,51:98,14);
506 : (0,54:55,19);
509 : (0,54:55,19);
510 : (0,54:55,19);
511 : (0,54:55,19);
512 : (0,54:55,19);
513 : (0,54:55,19);
514 : (0,54:55,19);
515 : (0,54:55,19);
516 : (0,54:55,19);
517 : (0,54:55,19);
518 : (0,54:55,19);
519 : (0,54:55,19);
520 : (0,54:55,19);
521 : (0,54:55,19);
522 : (0,54:55,19);
553 : (0,51:52,0);
557 : (0,51:92,0);
578 : (0,51:82,10);
579 : (0,51:82,10);
627 : (0,51:30,10);
713 : (0,50:13,5);
730 : (0,50:4,0);
731 : (0,50:4,24);
733 : (0,50:4,0);
735 : (0,50:4,0);
738 : (0,54:15,19);
742 : (0,50:27,5);
745 : (0,51:82,10);
750 : (0,51:104,14);
755 : (0,51:104,14);
760 : (0,54:55,19);
765 : (0,54:55,19);
771 : (0,50:4,9);

