
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Apr 10 19:59:38 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f32_eq.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  bool f32_eq(float32_t, float32_t)
Ff32_eq : user_defined, called {
    fnm : "f32_eq" 'bool f32_eq(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_eq typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   24 : __rt typ=bool bnd=m
   25 : a typ=w32 bnd=p tref=float32_t___1
   26 : b typ=w32 bnd=p tref=float32_t___1
   27 : __ct_m8S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   40 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   54 : __tmp typ=w32 bnd=m
   55 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   57 : __tmp typ=w32 bnd=m
   60 : __tmp typ=bool bnd=m
   61 : __ct_8388607 typ=w32 val=8388607f bnd=m
   63 : __tmp typ=w32 bnd=m
   66 : __tmp typ=bool bnd=m
   69 : __tmp typ=bool bnd=m
   72 : __tmp typ=w32 bnd=m
   75 : __tmp typ=w32 bnd=m
   78 : __tmp typ=bool bnd=m
   81 : __tmp typ=w32 bnd=m
   84 : __tmp typ=bool bnd=m
   87 : __tmp typ=bool bnd=m
   88 : __tmp typ=bool bnd=m
   91 : __tmp typ=bool bnd=m
   94 : __tmp typ=w32 bnd=m
   95 : __ct_1 typ=w32 val=1f bnd=m
   97 : __tmp typ=w32 bnd=m
  100 : __tmp typ=bool bnd=m
  102 : __tmp typ=bool bnd=m
  103 : __tmp typ=w32 bnd=m
  104 : __ct_8s0 typ=w32 val=0s0 bnd=m
  106 : __tmp typ=w32 bnd=m
  122 : __ct_4294967295 typ=w32 val=-1f bnd=m
  131 : __true typ=bool val=1f bnd=m
  132 : __false typ=bool val=0f bnd=m
  133 : __either typ=bool bnd=m
  134 : __trgt typ=t13s_s2 val=0j bnd=m
  135 : __trgt typ=t13s_s2 val=0j bnd=m
  136 : __trgt typ=t13s_s2 val=0j bnd=m
  137 : __trgt typ=t13s_s2 val=0j bnd=m
  138 : __trgt typ=t13s_s2 val=0j bnd=m
  139 : __trgt typ=t13s_s2 val=0j bnd=m
  140 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_eq {
    #49 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (a.25 var=25 stl=X off=11) inp ()  <36>;
    (a.26 var=25) deassign (a.25)  <37>;
    (b.28 var=26 stl=X off=12) inp ()  <39>;
    (b.29 var=26) deassign (b.28)  <40>;
    (__rd___sp.31 var=21) rd_res_reg (__R_SP.11 __sp.17)  <42>;
    (__ct_m8S0.32 var=27) const ()  <43>;
    (__tmp.34 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.31 __ct_m8S0.32)  <45>;
    (__R_SP.35 var=12 __sp.36 var=18) wr_res_reg (__tmp.34 __sp.17)  <46>;
    (__rd___sp.37 var=21) rd_res_reg (__R_SP.11 __sp.36)  <48>;
    (__ct_0.51 var=40) const ()  <62>;
    (__ct_2139095040.70 var=55) const ()  <79>;
    (__tmp.72 var=57) __uint__ad___uint___uint (__tmp.239 __ct_2139095040.70)  <81>;
    (__ct_8388607.92 var=61) const ()  <102>;
    (__ct_1.190 var=95) const ()  <204>;
    (__ct_4294967295.238 var=122) const ()  <295>;
    (__tmp.239 var=54) __uint__er___uint___uint (a.26 __ct_4294967295.238)  <296>;
    (__tmp.249 var=60) bool__ne___uint___uint (__tmp.72 __ct_0.51)  <331>;
    (__trgt.253 var=134) const ()  <344>;
    () void_br_bool_t13s_s2 (__tmp.249 __trgt.253)  <345>;
    (__either.254 var=133) undefined ()  <346>;
    if {
        {
            () if_expr (__either.254)  <101>;
        } #5
        {
            (__false.257 var=132) const ()  <350>;
        } #7
        {
            (__tmp.94 var=63) __uint__ad___uint___uint (a.26 __ct_8388607.92)  <104>;
            (__tmp.97 var=66) bool__ne___uint___uint (__tmp.94 __ct_0.51)  <107>;
            (__trgt.258 var=136) const ()  <351>;
            () void_br_bool_t13s_s2 (__tmp.97 __trgt.258)  <352>;
            (__either.259 var=133) undefined ()  <353>;
        } #6 off=1
        {
            (__tmp.100 var=69) merge (__false.257 __either.259)  <110>;
        } #8
    } #4
    if {
        {
            () if_expr (__tmp.100)  <127>;
        } #11
        {
            (__true.262 var=131) const ()  <357>;
        } #12
        {
            #55 off=2
            (__tmp.122 var=75) __uint__ad___uint___uint (__tmp.243 __ct_2139095040.70)  <133>;
            (__tmp.243 var=72) __uint__er___uint___uint (b.29 __ct_4294967295.238)  <303>;
            (__tmp.250 var=78) bool__ne___uint___uint (__tmp.122 __ct_0.51)  <332>;
            (__trgt.255 var=135) const ()  <347>;
            () void_br_bool_t13s_s2 (__tmp.250 __trgt.255)  <348>;
            (__either.256 var=133) undefined ()  <349>;
            if {
                {
                    () if_expr (__either.256)  <153>;
                } #16
                {
                    (__false.263 var=132) const ()  <358>;
                } #18
                {
                    (__tmp.144 var=81) __uint__ad___uint___uint (b.29 __ct_8388607.92)  <156>;
                    (__tmp.147 var=84) bool__ne___uint___uint (__tmp.144 __ct_0.51)  <159>;
                    (__trgt.264 var=138) const ()  <359>;
                    () void_br_bool_t13s_s2 (__tmp.147 __trgt.264)  <360>;
                    (__either.265 var=133) undefined ()  <361>;
                } #17 off=3
                {
                    (__tmp.150 var=87) merge (__false.263 __either.265)  <162>;
                } #19
            } #15
        } #13
        {
            (__tmp.151 var=88) merge (__true.262 __tmp.150)  <163>;
        } #20
    } #10
    if {
        {
            () if_expr (__tmp.151)  <180>;
        } #23
        {
            (__false.266 var=132) const ()  <362>;
        } #24
        {
            #26 off=4
            (__tmp.170 var=91) bool__eq___uint___uint (a.26 b.29)  <183>;
            (__trgt.260 var=137) const ()  <354>;
            () void_br_bool_t13s_s2 (__tmp.170 __trgt.260)  <355>;
            (__either.261 var=133) undefined ()  <356>;
            if {
                {
                    () if_expr (__either.261)  <200>;
                } #28
                {
                    (__true.267 var=131) const ()  <363>;
                } #29
                {
                    (__tmp.189 var=94) __uint__or___uint___uint (a.26 b.29)  <203>;
                    (__tmp.192 var=97) __uint__ls___uint___sint (__tmp.189 __ct_1.190)  <206>;
                    (__tmp.232 var=100) bool__eq___uint___uint (__tmp.192 __ct_0.51)  <279>;
                    (__trgt.268 var=139) const ()  <364>;
                    () void_br_bool_t13s_s2 (__tmp.232 __trgt.268)  <365>;
                    (__either.269 var=133) undefined ()  <366>;
                } #30 off=5
                {
                    (__tmp.197 var=102) merge (__true.267 __either.269)  <211>;
                } #31
            } #27
        } #25
        {
            (__rt.198 var=24) merge (__false.266 __tmp.197)  <212>;
        } #32
    } #22
    if {
        {
            () if_expr (__rt.198)  <259>;
        } #40
        {
        } #41 off=7
        {
            (__trgt.270 var=140) const ()  <367>;
            () void_j_t21s_s2 (__trgt.270)  <368>;
        } #42 off=6
        {
            (__tmp.228 var=103) merge (__ct_1.190 __ct_0.51)  <262>;
        } #43
    } #39
    #35 off=8 nxt=-2
    (__ct_8s0.201 var=104) const ()  <215>;
    (__tmp.203 var=106) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_8s0.201)  <217>;
    (__R_SP.204 var=12 __sp.205 var=18) wr_res_reg (__tmp.203 __sp.36)  <218>;
    () void___rts_jr_w32 (__la.22)  <219>;
    (__tmp.206 var=103 stl=X off=10) assign (__tmp.228)  <220>;
    () out (__tmp.206)  <221>;
    () sink (__sp.205)  <227>;
} #0
0 : 'SoftFloat-3e/source/f32_eq.c';
----------
0 : (0,44:0,0);
4 : (0,55:39,9);
6 : (0,55:39,10);
7 : (0,55:39,11);
10 : (0,55:64,13);
12 : (0,55:64,14);
13 : (0,55:97,15);
15 : (0,55:97,15);
17 : (0,55:97,16);
18 : (0,55:97,17);
22 : (0,55:4,21);
24 : (0,55:124,22);
25 : (0,63:8,25);
26 : (0,65:16,26);
27 : (0,65:24,26);
29 : (0,65:24,27);
30 : (0,65:27,28);
35 : (0,65:4,34);
39 : (0,65:4,34);
40 : (0,65:4,34);
41 : (0,65:4,34);
42 : (0,65:4,34);
43 : (0,65:4,34);
49 : (0,55:33,9);
55 : (0,55:91,15);
----------
42 : (0,44:5,0);
43 : (0,44:5,0);
45 : (0,44:5,0);
46 : (0,44:5,0);
48 : (0,46:19,0);
62 : (0,51:6,0);
79 : (0,55:19,0);
81 : (0,55:19,9);
101 : (0,55:39,9);
102 : (0,55:49,0);
104 : (0,55:49,10);
107 : (0,55:39,10);
110 : (0,55:39,12);
127 : (0,55:64,13);
133 : (0,55:77,15);
153 : (0,55:97,15);
156 : (0,55:107,16);
159 : (0,55:97,16);
162 : (0,55:97,18);
163 : (0,55:64,20);
180 : (0,55:4,21);
183 : (0,65:16,26);
200 : (0,65:24,26);
203 : (0,65:46,28);
204 : (0,65:54,0);
206 : (0,65:52,28);
211 : (0,65:24,29);
212 : (0,55:4,33);
215 : (0,65:4,0);
217 : (0,65:4,0);
218 : (0,65:4,34);
219 : (0,65:4,34);
220 : (0,65:4,0);
279 : (0,65:27,28);
295 : (0,55:12,0);
296 : (0,55:12,9);
303 : (0,55:70,15);
331 : (0,55:33,9);
332 : (0,55:91,15);
345 : (0,55:39,9);
348 : (0,55:97,15);
352 : (0,55:64,13);
355 : (0,65:24,26);
360 : (0,55:4,21);

