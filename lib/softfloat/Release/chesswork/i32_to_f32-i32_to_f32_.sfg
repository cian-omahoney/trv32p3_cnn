
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 12:18:25 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/i32_to_f32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t i32_to_f32(int32_t)
Fi32_to_f32 : user_defined, called {
    fnm : "i32_to_f32" 'float32_t i32_to_f32(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
!!  float32_t softfloat_normRoundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_normRoundPackToF32 : user_defined, called {
    fnm : "softfloat_normRoundPackToF32" 'float32_t softfloat_normRoundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
***/

[
    0 : i32_to_f32 typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   22 : __rt typ=w32 bnd=p tref=float32_t___1
   23 : a typ=w32 bnd=p tref=int32_t__
   24 : __ct_m4S0 typ=w32 val=0S0 bnd=m
   26 : __tmp typ=w32 bnd=m
   31 : sign typ=bool bnd=m tref=bool__
   33 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   36 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   38 : __tmp typ=w32 bnd=m
   41 : __tmp typ=bool bnd=m
   43 : __ct_3472883712 typ=t20s_rp12 val=-200704f bnd=m
   58 : __tmp typ=w32 bnd=m
   60 : __tmp typ=w32 bnd=m
   61 : __tmp typ=w32 bnd=m
   62 : __ct_156 typ=w32 val=156f bnd=m
   63 : __ct typ=w32 bnd=m
   66 : softfloat_normRoundPackToF32 typ=t21s_s2 val=0r bnd=m
   68 : __tmp typ=w32 bnd=m
   69 : __ct_4s0 typ=w32 val=0s0 bnd=m
   71 : __tmp typ=w32 bnd=m
  114 : __tmp typ=t20s_rp12 bnd=m
  117 : __either typ=bool bnd=m
  118 : __trgt typ=t13s_s2 val=0j bnd=m
  119 : __trgt typ=t21s_s2 val=0j bnd=m
  120 : __trgt typ=t13s_s2 val=0j bnd=m
  121 : __trgt typ=t21s_s2 val=0j bnd=m
  122 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fi32_to_f32 {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a.24 var=23 stl=X off=11) inp ()  <35>;
    (a.25 var=23) deassign (a.24)  <36>;
    (__rd___sp.27 var=20) rd_res_reg (__R_SP.11 __sp.17)  <38>;
    (__ct_m4S0.28 var=24) const ()  <39>;
    (__tmp.30 var=26) __Pvoid__pl___Pvoid___sint (__rd___sp.27 __ct_m4S0.28)  <41>;
    (__R_SP.31 var=12 __sp.32 var=18) wr_res_reg (__tmp.30 __sp.17)  <42>;
    (__rd___sp.33 var=20) rd_res_reg (__R_SP.11 __sp.32)  <44>;
    (__ct_0.42 var=33) const ()  <53>;
    (__ct_2147483647.45 var=36) const ()  <56>;
    (__tmp.47 var=38) __sint__ad___sint___sint (a.25 __ct_2147483647.45)  <58>;
    (__ct_4s0.129 var=69) const ()  <142>;
    (__tmp.157 var=41) bool__eq___sint___sint (__tmp.47 __ct_0.42)  <204>;
    (__trgt.246 var=122) const ()  <360>;
    () void_br_bool_t13s_s2 (__tmp.157 __trgt.246)  <361>;
    (__either.247 var=117) undefined ()  <362>;
    if {
        {
            () if_expr (__either.247)  <76>;
        } #5
        {
            #143 off=7
            (__ct_3472883712.78 var=43) const ()  <91>;
            (__trgt.240 var=118) const ()  <350>;
            () void_br_bool_t13s_s2 (sign.248 __trgt.240)  <351>;
            (__either.241 var=117) undefined ()  <352>;
            (sign.248 var=31) bool__lt___sint___sint (a.25 __ct_0.42)  <363>;
            if {
                {
                    () if_expr (__either.241)  <90>;
                } #9
                {
                } #10 off=9
                {
                    (__trgt.242 var=119) const ()  <353>;
                    () void_j_t21s_s2 (__trgt.242)  <354>;
                } #11 off=8
                {
                    (__tmp.82 var=114) merge (__ct_3472883712.78 __ct_0.42)  <95>;
                } #12
            } #8
        } #6
        {
            #145 off=1
            (__trgt.243 var=120) const ()  <355>;
            () void_br_bool_t13s_s2 (sign.249 __trgt.243)  <356>;
            (__either.244 var=117) undefined ()  <357>;
            (sign.249 var=31) bool__ge___sint___sint (a.25 __ct_0.42)  <364>;
            if {
                {
                    () if_expr (__either.244)  <117>;
                } #17
                {
                } #19 off=3
                {
                    (__tmp.108 var=58) __uint__mi___uint___uint (__ct_0.42 a.25)  <121>;
                    (__trgt.245 var=121) const ()  <358>;
                    () void_j_t21s_s2 (__trgt.245)  <359>;
                } #18 off=2
                {
                    (__tmp.110 var=60) merge (a.25 __tmp.108)  <123>;
                } #20
            } #16
            #140 off=4
            (__ct_156.113 var=62) const ()  <126>;
            (softfloat_normRoundPackToF32.119 var=66) const ()  <132>;
            (__tmp.162 var=61) __sint_slt___sint___sint (a.25 __ct_0.42)  <210>;
            (__tmp.235 var=71) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_4s0.129)  <342>;
            (__R_SP.236 var=12 __sp.237 var=18) wr_res_reg (__tmp.235 __sp.32)  <343>;
            () void_j_t21s_s2 (softfloat_normRoundPackToF32.119)  <348>;
            call {
                (__tmp.112 var=61 stl=X off=11) assign (__tmp.162)  <125>;
                (__ct.115 var=63 stl=X off=12) assign (__ct_156.113)  <128>;
                (__tmp.116 var=60 stl=X off=13) assign (__tmp.110)  <129>;
                (__la.121 var=21 stl=X off=1) assign (__la.21)  <134>;
                (__tmp.122 var=68 stl=X off=10) Fsoftfloat_normRoundPackToF32 (__la.121 __tmp.112 __ct.115 __tmp.116)  <135>;
                (__tmp.123 var=68) deassign (__tmp.122)  <136>;
            } #22 off=5
            #141 off=6 nxt=-2
            (__rt.238 var=22 stl=X off=10) assign (__tmp.123)  <345>;
            () out (__rt.238)  <346>;
            () sink (__sp.237)  <347>;
            (__rt.239 var=22) never ()  <349>;
        } #14
        {
            (__rt.126 var=22) merge (__tmp.82 __rt.239)  <139>;
        } #23
    } #4
    #25 off=11 nxt=-2
    (__tmp.131 var=71) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_4s0.129)  <144>;
    (__R_SP.132 var=12 __sp.133 var=18) wr_res_reg (__tmp.131 __sp.32)  <145>;
    () void___rts_jr_w32 (__la.21)  <146>;
    (__rt.134 var=22 stl=X off=10) assign (__rt.126)  <147>;
    () out (__rt.134)  <148>;
    () sink (__sp.133)  <154>;
} #0
0 : 'SoftFloat-3e/source/i32_to_f32.c';
----------
0 : (0,43:0,0);
3 : (0,50:9,5);
4 : (0,50:4,5);
6 : (0,50:30,6);
8 : (0,51:21,6);
10 : (0,51:71,7);
11 : (0,51:21,8);
14 : (0,52:8,14);
16 : (0,54:16,15);
18 : (0,54:18,16);
19 : (0,54:39,17);
22 : (0,55:11,20);
25 : (0,55:4,24);
140 : (0,55:4,24);
141 : (0,55:4,24);
----------
38 : (0,43:10,0);
39 : (0,43:10,0);
41 : (0,43:10,0);
42 : (0,43:10,0);
44 : (0,46:19,0);
53 : (0,49:16,0);
56 : (0,50:16,0);
58 : (0,50:14,5);
76 : (0,50:4,5);
90 : (0,51:21,6);
91 : (0,51:71,0);
95 : (0,51:21,9);
117 : (0,54:16,15);
121 : (0,54:18,16);
123 : (0,54:16,18);
125 : (0,55:41,0);
126 : (0,55:45,0);
128 : (0,55:45,0);
129 : (0,55:53,0);
134 : (0,55:11,0);
135 : (0,55:11,20);
139 : (0,50:4,23);
142 : (0,55:4,0);
144 : (0,55:4,0);
145 : (0,55:4,24);
146 : (0,55:4,24);
147 : (0,55:4,0);
204 : (0,50:9,5);
342 : (0,55:4,0);
343 : (0,55:4,24);
345 : (0,55:4,0);
348 : (0,55:11,20);
351 : (0,51:21,6);
356 : (0,54:16,15);
361 : (0,50:4,5);

