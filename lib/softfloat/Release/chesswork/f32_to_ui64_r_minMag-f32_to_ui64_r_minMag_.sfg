
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 17:52:23 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f32_to_ui64_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  uint_fast64_t f32_to_ui64_r_minMag(float32_t, bool)
Ff32_to_ui64_r_minMag : user_defined, called {
    fnm : "f32_to_ui64_r_minMag" 'unsigned long long f32_to_ui64_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_to_ui64_r_minMag typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   23 : __rt_low typ=w32 bnd=m tref=__uint__
   24 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : a typ=w32 bnd=p tref=float32_t___1
   26 : exact typ=w32 bnd=p tref=bool__
   28 : __ct_m4S0 typ=w32 val=0S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   37 : exp typ=w32 bnd=m tref=int_fast16_t__
   38 : sig typ=w32 bnd=m tref=uint_fast32_t__
   39 : shiftDist typ=w32 bnd=m tref=int_fast16_t__
   40 : sign typ=bool bnd=m tref=bool__
   44 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   51 : __ct_23 typ=w32 val=23f bnd=m
   53 : __tmp typ=w32 bnd=m
   55 : __ct_255 typ=w32 val=255f bnd=m
   58 : __ct_8388607 typ=w32 val=8388607f bnd=m
   61 : __ct_190 typ=w32 val=190f bnd=m
   64 : __ct_64 typ=w32 val=64f bnd=m
   66 : __tmp typ=bool bnd=m
   69 : __ct_31 typ=w32 val=31f bnd=m
   71 : __tmp typ=w32 bnd=m
   79 : __tmp typ=bool bnd=m
   80 : __tmp typ=bool bnd=m
   83 : __tmp typ=bool bnd=m
   86 : __tmp typ=bool bnd=m
   89 : __tmp typ=bool bnd=m
   98 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
  107 : __ct_4s0 typ=w32 val=0s0 bnd=m
  109 : __tmp typ=w32 bnd=m
  114 : __ct_4294967295 typ=w32 val=-1f bnd=m
  131 : __apl_r_high typ=w32 bnd=m tref=__uint__
  133 : __ct_m32 typ=w32 val=-32f bnd=m
  140 : __rt_low typ=w32 bnd=m tref=__uint__
  141 : __rt_high typ=w32 bnd=m tref=__uint__
  145 : __apl_ff typ=w32 bnd=m tref=__sint__
  146 : __apl_carries typ=w32 bnd=m tref=__uint__
  148 : __tmp typ=bool bnd=m
  149 : __tmp typ=bool bnd=m
  150 : __tmp typ=w32 bnd=m
  152 : __apl_r_low typ=w32 bnd=m tref=__uint__
  153 : __apl_r_high typ=w32 bnd=m tref=__uint__
  156 : __rt_low typ=w32 bnd=m
  158 : __rt_high typ=w32 bnd=m
  164 : __ct_8 typ=w32 val=8f bnd=m
  182 : __true typ=bool val=1f bnd=m
  183 : __false typ=bool val=0f bnd=m
  184 : __either typ=bool bnd=m
  185 : __trgt typ=t13s_s2 val=0j bnd=m
  186 : __trgt typ=t13s_s2 val=0j bnd=m
  187 : __trgt typ=t13s_s2 val=0j bnd=m
  188 : __trgt typ=t21s_s2 val=0j bnd=m
  189 : __trgt typ=t13s_s2 val=0j bnd=m
  190 : __trgt typ=t21s_s2 val=0j bnd=m
  191 : __trgt typ=t13s_s2 val=0j bnd=m
  192 : __trgt typ=t21s_s2 val=0j bnd=m
  193 : __trgt typ=t13s_s2 val=0j bnd=m
  194 : __trgt typ=t21s_s2 val=0j bnd=m
  195 : __trgt typ=t13s_s2 val=0j bnd=m
  196 : __trgt typ=t21s_s2 val=0j bnd=m
  197 : __trgt typ=t13s_s2 val=0j bnd=m
  198 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_to_ui64_r_minMag {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a.28 var=25 stl=X off=12) inp ()  <39>;
    (a.29 var=25) deassign (a.28)  <40>;
    (exact.31 var=26 stl=X off=13) inp ()  <42>;
    (__rd___sp.34 var=20) rd_res_reg (__R_SP.11 __sp.17)  <45>;
    (__ct_m4S0.35 var=28) const ()  <46>;
    (__tmp.37 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_m4S0.35)  <48>;
    (__R_SP.38 var=12 __sp.39 var=18) wr_res_reg (__tmp.37 __sp.17)  <49>;
    (__rd___sp.41 var=20) rd_res_reg (__R_SP.11 __sp.39)  <52>;
    (__ct_0.61 var=44) const ()  <72>;
    (__ct_23.70 var=51) const ()  <80>;
    (__tmp.72 var=53) __uint__rs___uint___sint (a.29 __ct_23.70)  <82>;
    (__ct_255.74 var=55) const ()  <84>;
    (exp.76 var=37) __sint__ad___sint___sint (__tmp.72 __ct_255.74)  <86>;
    (__ct_8388607.77 var=58) const ()  <87>;
    (sig.79 var=38) __uint__ad___uint___uint (a.29 __ct_8388607.77)  <89>;
    (__ct_190.80 var=61) const ()  <90>;
    (shiftDist.82 var=39) __sint__mi___sint___sint (__ct_190.80 exp.76)  <92>;
    (__ct_64.83 var=64) const ()  <93>;
    (__tmp.85 var=66) bool__ge___sint___sint (shiftDist.82 __ct_64.83)  <95>;
    (__trgt.411 var=197) const ()  <610>;
    () void_br_bool_t13s_s2 (__tmp.85 __trgt.411)  <611>;
    (__either.412 var=184) undefined ()  <612>;
    if {
        {
            () if_expr (__either.412)  <115>;
        } #5
        {
        } #6 off=19
        {
            #8 off=1
            (__ct_31.107 var=69) const ()  <118>;
            (__tmp.109 var=71) __uint__rs___uint___sint (a.29 __ct_31.107)  <120>;
            (sign.112 var=40) bool__ne___uint___uint (__tmp.109 __ct_0.61)  <123>;
            (__trgt.390 var=185) const ()  <577>;
            () void_br_bool_t13s_s2 (sign.112 __trgt.390)  <578>;
            (__either.391 var=184) undefined ()  <579>;
            if {
                {
                    () if_expr (__either.391)  <143>;
                } #10
                {
                    (__true.407 var=182) const ()  <604>;
                } #11
                {
                    (__tmp.136 var=79) bool__lt___sint___sint (shiftDist.82 __ct_0.61)  <148>;
                    (__trgt.408 var=195) const ()  <605>;
                    () void_br_bool_t13s_s2 (__tmp.136 __trgt.408)  <606>;
                    (__either.409 var=184) undefined ()  <607>;
                } #12 off=2
                {
                    (__tmp.137 var=80) merge (__true.407 __either.409)  <149>;
                } #13
            } #9
            if {
                {
                    () if_expr (__tmp.137)  <169>;
                } #16
                {
                    #18 off=10
                    (__ct_4294967295.291 var=114) const ()  <349>;
                    (__tmp.387 var=83) bool__ne___sint___sint (exp.76 __ct_255.74)  <559>;
                    (__trgt.392 var=186) const ()  <580>;
                    () void_br_bool_t13s_s2 (__tmp.387 __trgt.392)  <581>;
                    (__either.393 var=184) undefined ()  <582>;
                    if {
                        {
                            () if_expr (__either.393)  <192>;
                        } #20
                        {
                            (__false.397 var=183) const ()  <588>;
                        } #22
                        {
                            (__tmp.181 var=86) bool__ne___uint___uint (sig.79 __ct_0.61)  <195>;
                            (__trgt.398 var=189) const ()  <589>;
                            () void_br_bool_t13s_s2 (__tmp.181 __trgt.398)  <590>;
                            (__either.399 var=184) undefined ()  <591>;
                        } #21 off=11
                        {
                            (__tmp.184 var=89) merge (__false.397 __either.399)  <198>;
                        } #23
                    } #19
                    if {
                        {
                            () if_expr (__tmp.184)  <218>;
                        } #26
                        {
                        } #27 off=16
                        {
                            #101 off=12
                            (__trgt.394 var=187) const ()  <583>;
                            () void_br_bool_t13s_s2 (sign.414 __trgt.394)  <584>;
                            (__either.395 var=184) undefined ()  <585>;
                            (sign.414 var=40) bool__ne___uint___uint (__tmp.109 __ct_0.61)  <615>;
                            if {
                                {
                                    () if_expr (__either.395)  <240>;
                                } #31
                                {
                                } #32 off=14
                                {
                                    (__trgt.396 var=188) const ()  <586>;
                                    () void_j_t21s_s2 (__trgt.396)  <587>;
                                } #33 off=13
                                {
                                    (__rt_low.294 var=23) merge (__ct_0.61 __ct_4294967295.291)  <353>;
                                } #34
                            } #30
                            #102 off=15
                            (__trgt.400 var=190) const ()  <592>;
                            () void_j_t21s_s2 (__trgt.400)  <593>;
                        } #28
                        {
                            (__rt_low.290 var=23) merge (__ct_4294967295.291 __rt_low.294)  <348>;
                        } #35
                    } #25
                } #17
                {
                    #94 off=3
                    (__ct_8388608.231 var=98) const ()  <247>;
                    (sig.233 var=38) __uint__or___uint___uint (sig.79 __ct_8388608.231)  <249>;
                    (__apl_r_high.324 var=131) __uint__ls___uint___sint (sig.233 __ct_8.368)  <401>;
                    (__tmp.342 var=148) bool__eq___sint___sint (shiftDist.82 __ct_0.61)  <423>;
                    (__ct_8.368 var=164) const ()  <470>;
                    (__trgt.404 var=193) const ()  <599>;
                    () void_br_bool_t13s_s2 (__tmp.342 __trgt.404)  <600>;
                    (__either.405 var=184) undefined ()  <601>;
                    if {
                        {
                            () if_expr (__either.405)  <426>;
                        } #77
                        {
                        } #78 off=8
                        {
                            #80 off=4
                            (__ct_m32.315 var=133) const ()  <390>;
                            (__apl_ff.345 var=145) __sint__pl___sint___sint (shiftDist.82 __ct_m32.315)  <427>;
                            (__tmp.346 var=149) bool__lt___sint___sint (__apl_ff.345 __ct_0.61)  <428>;
                            (__trgt.401 var=191) const ()  <594>;
                            () void_br_bool_t13s_s2 (__tmp.346 __trgt.401)  <595>;
                            (__either.402 var=184) undefined ()  <596>;
                            if {
                                {
                                    () if_expr (__either.402)  <429>;
                                } #82
                                {
                                    (__tmp.347 var=150) __sint__mi___sint___sint (__ct_0.61 __apl_ff.345)  <430>;
                                    (__apl_carries.348 var=146) __uint__ls___uint___sint (__apl_r_high.324 __tmp.347)  <431>;
                                    (__apl_r_high.351 var=153) __uint__rs___uint___sint (__apl_r_high.324 shiftDist.82)  <434>;
                                } #83 off=6
                                {
                                    (__apl_r_low.352 var=152) __uint__rs___uint___sint (__apl_r_high.324 __apl_ff.345)  <435>;
                                    (__trgt.403 var=192) const ()  <597>;
                                    () void_j_t21s_s2 (__trgt.403)  <598>;
                                } #84 off=5
                                {
                                    (__rt_low.353 var=140) merge (__apl_carries.348 __apl_r_low.352)  <436>;
                                    (__rt_high.354 var=141) merge (__apl_r_high.351 __ct_0.61)  <437>;
                                } #85
                            } #81
                            #104 off=7
                            (__trgt.406 var=194) const ()  <602>;
                            () void_j_t21s_s2 (__trgt.406)  <603>;
                        } #79
                        {
                            (__rt_low.355 var=156) merge (__ct_0.61 __rt_low.353)  <438>;
                            (__rt_high.356 var=158) merge (__apl_r_high.324 __rt_high.354)  <439>;
                        } #86
                    } #76
                    #105 off=9
                    (__trgt.410 var=196) const ()  <608>;
                    () void_j_t21s_s2 (__trgt.410)  <609>;
                } #36
                {
                    (__rt_low.287 var=23) merge (__rt_low.290 __rt_low.355)  <345>;
                    (__rt_high.300 var=24) merge (__rt_low.290 __rt_high.356)  <359>;
                } #37
            } #15
            #106 off=18
            (__trgt.413 var=198) const ()  <613>;
            () void_j_t21s_s2 (__trgt.413)  <614>;
        } #7
        {
            (__rt_low.284 var=23) merge (__ct_0.61 __rt_low.287)  <342>;
            (__rt_high.297 var=24) merge (__ct_0.61 __rt_high.300)  <356>;
        } #38
    } #4
    #41 off=20 nxt=-2
    (__ct_4s0.250 var=107) const ()  <266>;
    (__tmp.252 var=109) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_4s0.250)  <268>;
    (__R_SP.253 var=12 __sp.254 var=18) wr_res_reg (__tmp.252 __sp.39)  <269>;
    () void___rts_jr_w32 (__la.21)  <270>;
    (__rt_low.256 var=23 stl=X off=10) assign (__rt_low.284)  <272>;
    () out (__rt_low.256)  <273>;
    (__rt_high.258 var=24 stl=X off=11) assign (__rt_high.297)  <275>;
    () out (__rt_high.258)  <276>;
    () sink (__sp.254)  <282>;
} #0
0 : 'SoftFloat-3e/source/f32_to_ui64_r_minMag.c';
----------
0 : (0,44:0,0);
3 : (0,66:12,14);
4 : (0,66:4,14);
6 : (0,66:27,15);
7 : (0,72:8,18);
8 : (0,77:9,20);
9 : (0,77:14,20);
11 : (0,77:14,21);
12 : (0,77:28,22);
15 : (0,77:4,24);
17 : (0,77:35,25);
18 : (0,82:17,25);
19 : (0,82:26,25);
21 : (0,82:26,26);
22 : (0,82:26,27);
25 : (0,82:33,29);
27 : (0,82:35,30);
28 : (0,83:8,31);
30 : (0,83:8,31);
32 : (0,83:8,32);
33 : (0,83:14,33);
36 : (0,81:8,40);
41 : (0,96:4,51);
76 : (0,89:13,43);
77 : (0,89:13,43);
78 : (0,89:13,43);
79 : (0,89:13,43);
80 : (0,89:13,43);
81 : (0,89:13,43);
82 : (0,89:13,43);
83 : (0,89:13,43);
84 : (0,89:13,43);
85 : (0,89:13,43);
86 : (0,89:13,43);
94 : (0,89:13,43);
----------
45 : (0,44:14,0);
46 : (0,44:14,0);
48 : (0,44:14,0);
49 : (0,44:14,0);
52 : (0,49:19,0);
72 : (0,59:6,0);
80 : (0,61:34,0);
82 : (0,61:32,11);
84 : (0,61:38,0);
86 : (0,61:38,11);
87 : (0,62:17,0);
89 : (0,62:17,12);
90 : (0,65:21,0);
92 : (0,65:21,13);
93 : (0,66:12,0);
95 : (0,66:12,14);
115 : (0,66:4,14);
118 : (0,76:38,0);
120 : (0,76:36,19);
123 : (0,76:12,19);
143 : (0,77:14,20);
148 : (0,77:28,22);
149 : (0,77:14,23);
169 : (0,77:4,24);
192 : (0,82:26,25);
195 : (0,82:26,26);
198 : (0,82:26,28);
218 : (0,82:33,29);
240 : (0,83:8,31);
247 : (0,87:8,0);
249 : (0,87:8,41);
266 : (0,96:4,0);
268 : (0,96:4,0);
269 : (0,96:4,51);
270 : (0,96:4,51);
272 : (0,96:4,0);
275 : (0,96:4,0);
349 : (0,82:35,0);
390 : (0,88:31,0);
401 : (0,88:31,42);
423 : (0,89:13,43);
426 : (0,89:13,43);
427 : (0,89:13,43);
428 : (0,89:13,43);
429 : (0,89:13,43);
430 : (0,89:13,43);
431 : (0,89:13,43);
434 : (0,89:13,43);
435 : (0,89:13,43);
436 : (0,89:13,43);
437 : (0,89:13,43);
438 : (0,89:13,43);
439 : (0,89:13,43);
470 : (0,88:31,0);
559 : (0,82:17,25);
578 : (0,77:14,20);
581 : (0,82:26,25);
584 : (0,83:8,31);
590 : (0,82:33,29);
595 : (0,89:13,43);
600 : (0,89:13,43);
606 : (0,77:4,24);
611 : (0,66:4,14);

