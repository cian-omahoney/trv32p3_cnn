
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 15:22:24 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/s_normSubnormalF32Sig.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)
Fsoftfloat_normSubnormalF32Sig : user_defined, called {
    fnm : "softfloat_normSubnormalF32Sig" 'exp16_sig32 softfloat_normSubnormalF32Sig(uint_fast32_t)';
    arg : ( w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : softfloat_normSubnormalF32Sig typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : softfloat_countLeadingZeros8 typ=w08 bnd=e sz=256 algn=1 stl=DMb tref=__A256__uchar_DMb
   22 : __extDMb_exp16_sig32 typ=w08 bnd=b stl=DMb
   25 : __extPMb_void typ=u08 bnd=b stl=PMb
   26 : __extDMb_w32 typ=w08 bnd=b stl=DMb
   27 : __rd___sp typ=w32 bnd=m
   29 : __ptr_softfloat_countLeadingZeros8 typ=w32 val=0a bnd=m adro=19
   30 : __la typ=w32 bnd=p tref=w32__
   31 : __aptr___rt typ=w32 bnd=p tref=__Pexp16_sig32__
   32 : sig typ=w32 bnd=p tref=uint_fast32_t__
   33 : __ct_m8S0 typ=w32 val=0S0 bnd=m
   35 : __tmp typ=w32 bnd=m
   42 : __inl_a typ=w32 bnd=m tref=uint32_t__
   43 : __inl_count typ=w32 bnd=m tref=uint_fast8_t__
   59 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   61 : __ct_65536 typ=t20s_rp12 val=16f bnd=m
   63 : __tmp typ=bool bnd=m
   64 : __ct_16 typ=w32 val=16f bnd=m
   69 : __ct_16777216 typ=t20s_rp12 val=4096f bnd=m
   71 : __tmp typ=bool bnd=m
   72 : __ct_8 typ=w32 val=8f bnd=m
   78 : __ct_24 typ=w32 val=24f bnd=m
   80 : __tmp typ=w32 bnd=m
   82 : __tmp typ=w32 bnd=m
   83 : __fch_softfloat_countLeadingZeros8 typ=__uchar bnd=m
   89 : __tmp typ=w32 bnd=m
   91 : __ct_1 typ=w32 val=1f bnd=m
   93 : __tmp typ=w32 bnd=m
   97 : __tmp typ=w32 bnd=m
   98 : __ct_4 typ=w32 val=4f bnd=m
  129 : __ct_8s0 typ=w32 val=0s0 bnd=m
  131 : __tmp typ=w32 bnd=m
  144 : __ct_4294967288 typ=w32 val=-8f bnd=m
  146 : __shv___aptr___rt typ=w32 bnd=m
  159 : __either typ=bool bnd=m
  160 : __trgt typ=t13s_s2 val=0j bnd=m
  161 : __trgt typ=t21s_s2 val=0j bnd=m
  162 : __trgt typ=t13s_s2 val=0j bnd=m
  163 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_normSubnormalF32Sig {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (softfloat_countLeadingZeros8.18 var=19) source ()  <29>;
    (__extDMb_exp16_sig32.21 var=22) source ()  <32>;
    (__extPMb_void.24 var=25) source ()  <35>;
    (__extDMb_w32.25 var=26) source ()  <36>;
    (__la.29 var=30 stl=X off=1) inp ()  <40>;
    (__la.30 var=30) deassign (__la.29)  <41>;
    (__aptr___rt.32 var=31 stl=X off=10) inp ()  <43>;
    (__aptr___rt.33 var=31) deassign (__aptr___rt.32)  <44>;
    (sig.35 var=32 stl=X off=11) inp ()  <46>;
    (sig.36 var=32) deassign (sig.35)  <47>;
    (__rd___sp.38 var=27) rd_res_reg (__R_SP.11 __sp.17)  <49>;
    (__ct_m8S0.39 var=33) const ()  <50>;
    (__tmp.41 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.38 __ct_m8S0.39)  <52>;
    (__R_SP.42 var=12 __sp.43 var=18) wr_res_reg (__tmp.41 __sp.17)  <53>;
    (__rd___sp.44 var=27) rd_res_reg (__R_SP.11 __sp.43)  <55>;
    (__ct_0.73 var=59) const ()  <84>;
    (__ct_65536.75 var=61) const ()  <86>;
    (__tmp.579 var=63) bool__ge___uint___uint (sig.36 __ct_65536.75)  <634>;
    (__trgt.583 var=160) const ()  <652>;
    () void_br_bool_t13s_s2 (__tmp.579 __trgt.583)  <653>;
    (__either.584 var=159) undefined ()  <654>;
    if {
        {
            () if_expr (__either.584)  <127>;
        } #5
        {
        } #7 off=2
        {
            (__ct_16.116 var=64) const ()  <128>;
            (__inl_a.120 var=42) __uint__ls___uint___sint (sig.36 __ct_16.116)  <132>;
            (__trgt.585 var=161) const ()  <655>;
            () void_j_t21s_s2 (__trgt.585)  <656>;
        } #6 off=1
        {
            (__inl_a.121 var=42) merge (sig.36 __inl_a.120)  <133>;
            (__inl_count.122 var=43) merge (__ct_0.73 __ct_16.116)  <134>;
        } #8
    } #4
    #9 off=3
    (__ct_16777216.123 var=69) const ()  <135>;
    (__tmp.580 var=71) bool__ge___uint___uint (__inl_a.121 __ct_16777216.123)  <635>;
    (__trgt.586 var=162) const ()  <657>;
    () void_br_bool_t13s_s2 (__tmp.580 __trgt.586)  <658>;
    (__either.587 var=159) undefined ()  <659>;
    if {
        {
            () if_expr (__either.587)  <176>;
        } #11
        {
        } #13 off=5
        {
            (__ct_8.164 var=72) const ()  <177>;
            (__inl_count.166 var=43) __uint__pl___uint___uint (__inl_count.122 __ct_8.164)  <179>;
            (__inl_a.169 var=42) __uint__ls___uint___sint (__inl_a.121 __ct_8.164)  <182>;
            (__trgt.588 var=163) const ()  <660>;
            () void_j_t21s_s2 (__trgt.588)  <661>;
        } #12 off=4
        {
            (__inl_a.170 var=42) merge (__inl_a.121 __inl_a.169)  <183>;
            (__inl_count.171 var=43) merge (__inl_count.122 __inl_count.166)  <184>;
        } #14
    } #10
    #39 off=6 nxt=-2
    (__ptr_softfloat_countLeadingZeros8.27 var=29) const ()  <38>;
    (__ct_24.172 var=78) const ()  <185>;
    (__tmp.174 var=80) __uint__rs___uint___sint (__inl_a.170 __ct_24.172)  <187>;
    (__tmp.176 var=82) __Pvoid__pl___Pvoid___sint (__ptr_softfloat_countLeadingZeros8.27 __tmp.174)  <189>;
    (__fch_softfloat_countLeadingZeros8.177 var=83) load (__M_DMb.2 __tmp.176 softfloat_countLeadingZeros8.18)  <190>;
    (__inl_count.180 var=43) __uint__pl___uint___uint (__inl_count.171 __fch_softfloat_countLeadingZeros8.177)  <193>;
    (__tmp.183 var=89) __uint__pl___uint___uint (__inl_count.180 __ct_4294967288.559)  <196>;
    (__ct_1.185 var=91) const ()  <198>;
    (__tmp.187 var=93) __sint__mi___sint___sint (__ct_1.185 __tmp.183)  <200>;
    (__tmp.193 var=97) __uint__ls___uint___sint (sig.36 __tmp.183)  <205>;
    (__ct_4.194 var=98) const ()  <206>;
    (__M_DMw.385 var=5 __extDMb_exp16_sig32.386 var=22 __extDMb_w32.387 var=26 __extPMb_void.388 var=25) store (__tmp.187 __aptr___rt.33 __extDMb_exp16_sig32.21 __extDMb_w32.25 __extPMb_void.24)  <400>;
    (__ct_8s0.495 var=129) const ()  <470>;
    (__tmp.497 var=131) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_8s0.495)  <472>;
    (__R_SP.498 var=12 __sp.499 var=18) wr_res_reg (__tmp.497 __sp.43)  <473>;
    () void___rts_jr_w32 (__la.30)  <474>;
    () sink (__sp.499)  <480>;
    () sink (__extDMb_exp16_sig32.565)  <483>;
    () sink (__extPMb_void.567)  <484>;
    () sink (__extDMb_w32.566)  <485>;
    (__ct_4294967288.559 var=144) const ()  <582>;
    (__M_DMw.564 var=5 __extDMb_exp16_sig32.565 var=22 __extDMb_w32.566 var=26 __extPMb_void.567 var=25) store (__tmp.193 __shv___aptr___rt.570 __extDMb_exp16_sig32.386 __extDMb_w32.387 __extPMb_void.388)  <589>;
    (__shv___aptr___rt.570 var=146) __Pvoid__pl___Pvoid___sint (__aptr___rt.33 __ct_4.194)  <592>;
} #0
0 : 'SoftFloat-3e/source/s_normSubnormalF32Sig.c';
----------
0 : (0,41:0,0);
3 : (0,46:16,8);
4 : (0,46:16,8);
6 : (0,46:16,9);
7 : (0,46:16,13);
9 : (0,46:16,16);
10 : (0,46:16,16);
12 : (0,46:16,17);
13 : (0,46:16,21);
39 : (0,49:4,81);
----------
38 : (0,46:16,0);
49 : (0,41:19,0);
50 : (0,41:19,0);
52 : (0,41:19,0);
53 : (0,41:19,0);
55 : (0,44:23,0);
84 : (0,46:16,0);
86 : (0,46:16,0);
127 : (0,46:16,8);
128 : (0,46:16,0);
132 : (0,46:16,10);
133 : (0,46:16,15);
134 : (0,46:16,15);
135 : (0,46:16,0);
176 : (0,46:16,16);
177 : (0,46:16,0);
179 : (0,46:16,17);
182 : (0,46:16,18);
183 : (0,46:16,23);
184 : (0,46:16,23);
185 : (0,46:16,0);
187 : (0,46:16,24);
189 : (0,46:16,24);
190 : (0,46:16,24);
193 : (0,46:16,24);
196 : (0,46:53,28);
198 : (0,47:14,0);
200 : (0,47:14,29);
205 : (0,48:15,30);
206 : (0,48:5,0);
400 : (0,49:11,53);
470 : (0,49:4,0);
472 : (0,49:4,0);
473 : (0,49:4,81);
474 : (0,49:4,81);
582 : (0,46:53,0);
589 : (0,49:11,53);
634 : (0,46:16,8);
635 : (0,46:16,16);
653 : (0,46:16,8);
658 : (0,46:16,16);

