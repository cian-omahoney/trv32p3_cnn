
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 16:36:20 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/s_roundPackToF32.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)
Fsoftfloat_roundPackToF32 : user_defined, called {
    fnm : "softfloat_roundPackToF32" 'float32_t softfloat_roundPackToF32(bool, int_fast16_t, uint_fast32_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : softfloat_roundPackToF32 typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   22 : __rt typ=w32 bnd=p tref=float32_t___1
   23 : sign typ=w32 bnd=p tref=bool__
   24 : sign typ=bool bnd=m
   25 : exp typ=w32 bnd=p tref=int_fast16_t__
   26 : sig typ=w32 bnd=p tref=uint_fast32_t__
   27 : __ct_m4S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   38 : roundBits typ=w32 bnd=m tref=uint_fast8_t__
   39 : uiZ typ=w32 bnd=m tref=uint_fast32_t__
   40 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   45 : __ct_64 typ=w32 val=64f bnd=m
   67 : __ct_127 typ=w32 val=127f bnd=m
   70 : __ct_253 typ=w32 val=253f bnd=m
   73 : __tmp typ=bool bnd=m
   76 : __tmp typ=bool bnd=m
   79 : __tmp typ=w32 bnd=m
   89 : __tmp typ=bool bnd=m
   92 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
   94 : __tmp typ=w32 bnd=m
   95 : __tmp typ=bool bnd=m
   96 : __tmp typ=bool bnd=m
  101 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
  103 : __tmp typ=w32 bnd=m
  113 : __tmp typ=w32 bnd=m
  114 : __ct_7 typ=w32 val=7f bnd=m
  122 : __tmp typ=w32 bnd=m
  125 : __tmp typ=bool bnd=m
  131 : __tmp typ=w32 bnd=m
  135 : __tmp typ=bool bnd=m
  144 : __ct_23 typ=w32 val=23f bnd=m
  146 : __tmp typ=w32 bnd=m
  147 : __tmp typ=w32 bnd=m
  157 : __ct_4s0 typ=w32 val=0s0 bnd=m
  159 : __tmp typ=w32 bnd=m
  174 : __ct_31 typ=w32 val=31f bnd=m
  175 : __tmp typ=bool bnd=m
  176 : __tmp typ=w32 bnd=m
  178 : __tmp typ=w32 bnd=m
  179 : __tmp typ=w32 bnd=m
  180 : __tmp typ=w32 bnd=m
  183 : __tmp typ=w32 bnd=m
  190 : __ct_4294967295 typ=w32 val=-1f bnd=m
  204 : __tmp typ=w32 bnd=m
  205 : __tmp typ=w32 bnd=m
  208 : __ct_4294967294 typ=w32 val=-2f bnd=m
  219 : __tmp typ=t20s_rp12 bnd=m
  220 : __true typ=bool val=1f bnd=m
  222 : __either typ=bool bnd=m
  223 : __trgt typ=t13s_s2 val=0j bnd=m
  224 : __trgt typ=t21s_s2 val=0j bnd=m
  225 : __trgt typ=t13s_s2 val=0j bnd=m
  226 : __trgt typ=t21s_s2 val=0j bnd=m
  227 : __trgt typ=t13s_s2 val=0j bnd=m
  228 : __trgt typ=t13s_s2 val=0j bnd=m
  229 : __trgt typ=t13s_s2 val=0j bnd=m
  230 : __trgt typ=t21s_s2 val=0j bnd=m
  231 : __trgt typ=t13s_s2 val=0j bnd=m
  232 : __trgt typ=t21s_s2 val=0j bnd=m
  233 : __trgt typ=t13s_s2 val=0j bnd=m
  234 : __trgt typ=t21s_s2 val=0j bnd=m
  235 : __trgt typ=t13s_s2 val=0j bnd=m
  236 : __trgt typ=t21s_s2 val=0j bnd=m
  237 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fsoftfloat_roundPackToF32 {
    #114 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (sign.24 var=23 stl=X off=11) inp ()  <35>;
    (sign.25 var=23) deassign (sign.24)  <36>;
    (exp.27 var=25 stl=X off=12) inp ()  <38>;
    (exp.28 var=25) deassign (exp.27)  <39>;
    (sig.30 var=26 stl=X off=13) inp ()  <41>;
    (sig.31 var=26) deassign (sig.30)  <42>;
    (__rd___sp.33 var=20) rd_res_reg (__R_SP.11 __sp.17)  <44>;
    (__ct_m4S0.34 var=27) const ()  <45>;
    (__tmp.36 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_m4S0.34)  <47>;
    (__R_SP.37 var=12 __sp.38 var=18) wr_res_reg (__tmp.36 __sp.17)  <48>;
    (__rd___sp.40 var=20) rd_res_reg (__R_SP.11 __sp.38)  <51>;
    (__ct_0.55 var=40) const ()  <66>;
    (__ct_127.155 var=67) const ()  <170>;
    (roundBits.157 var=38) __uint__ad___uint___uint (sig.31 __ct_127.155)  <172>;
    (__ct_2147483648.234 var=92) const ()  <252>;
    (sign.475 var=24) bool__ne___sint___sint (sign.25 __ct_0.55)  <547>;
    (__trgt.558 var=223) const ()  <767>;
    () void_br_bool_t13s_s2 (sign.475 __trgt.558)  <768>;
    (__either.559 var=222) undefined ()  <769>;
    if {
        {
            () if_expr (__either.559)  <648>;
        } #116
        {
        } #117 off=2
        {
            (__trgt.560 var=224) const ()  <770>;
            () void_j_t21s_s2 (__trgt.560)  <771>;
        } #118 off=1
        {
            (__tmp.532 var=219) merge (__ct_2147483648.234 __ct_0.55)  <702>;
        } #119
    } #115
    #111 off=3
    (__ct_64.60 var=45) const ()  <71>;
    (__ct_253.158 var=70) const ()  <173>;
    (__tmp.554 var=73) bool__lt___uint___uint (exp.28 __ct_253.158)  <748>;
    (__trgt.572 var=231) const ()  <790>;
    () void_br_bool_t13s_s2 (__tmp.554 __trgt.572)  <791>;
    (__either.573 var=222) undefined ()  <792>;
    if {
        {
            () if_expr (__either.573)  <195>;
        } #31
        {
        } #53 off=15
        {
            #33 off=4
            (__tmp.182 var=76) bool__lt___sint___sint (exp.28 __ct_0.55)  <198>;
            (__trgt.569 var=229) const ()  <785>;
            () void_br_bool_t13s_s2 (__tmp.182 __trgt.569)  <786>;
            (__either.570 var=222) undefined ()  <787>;
            if {
                {
                    () if_expr (__either.570)  <217>;
                } #35
                {
                    #86 off=10
                    (__tmp.203 var=79) __sint__mi___sint___sint (__ct_0.55 exp.28)  <220>;
                    (__ct_31.488 var=174) const ()  <600>;
                    (__tmp.489 var=175) bool__lt___uint___uint (__tmp.203 __ct_31.488)  <601>;
                    (__trgt.561 var=225) const ()  <772>;
                    () void_br_bool_t13s_s2 (__tmp.489 __trgt.561)  <773>;
                    (__either.562 var=222) undefined ()  <774>;
                    if {
                        {
                            () if_expr (__either.562)  <603>;
                        } #88
                        {
                            (__tmp.491 var=176) __uint__rs___uint___sint (sig.31 __tmp.203)  <604>;
                            (__tmp.492 var=178) __uint__mi___uint___uint (__ct_0.55 __tmp.203)  <605>;
                            (__tmp.493 var=179) __uint__ad___uint___uint (__tmp.492 __ct_31.488)  <606>;
                            (__tmp.494 var=180) __uint__ls___uint___sint (sig.31 __tmp.493)  <607>;
                            (__tmp.497 var=183) __uint__or___uint___uint (__tmp.491 __tmp.544)  <610>;
                            (__tmp.544 var=204) __sint_sne0___sint (__tmp.494)  <716>;
                        } #147 off=12
                        {
                            (__tmp.550 var=205) __sint_sne0___sint (sig.31)  <725>;
                            (__trgt.563 var=226) const ()  <775>;
                            () void_j_t21s_s2 (__trgt.563)  <776>;
                        } #180 off=11
                        {
                            (sig.500 var=26) merge (__tmp.497 __tmp.550)  <613>;
                        } #91
                    } #87
                    #83 off=13
                    (roundBits.210 var=38) __uint__ad___uint___uint (sig.500 __ct_127.155)  <227>;
                } #36
                {
                    #38 off=5
                    (__tmp.213 var=89) bool__lt___sint___sint (__ct_253.158 exp.28)  <230>;
                    (__trgt.564 var=227) const ()  <777>;
                    () void_br_bool_t13s_s2 (__tmp.213 __trgt.564)  <778>;
                    (__either.565 var=222) undefined ()  <779>;
                    if {
                        {
                            () if_expr (__either.565)  <249>;
                        } #40
                        {
                            (__true.566 var=220) const ()  <780>;
                        } #41
                        {
                            (__tmp.236 var=94) __uint__pl___uint___uint (sig.31 __ct_64.60)  <254>;
                            (__tmp.237 var=95) bool__ge___uint___uint (__tmp.236 __ct_2147483648.234)  <255>;
                            (__trgt.567 var=228) const ()  <781>;
                            () void_br_bool_t13s_s2 (__tmp.237 __trgt.567)  <782>;
                            (__either.568 var=222) undefined ()  <783>;
                        } #42 off=6
                        {
                            (__tmp.238 var=96) merge (__true.566 __either.568)  <256>;
                        } #43
                    } #39
                    if {
                        {
                            () if_expr (__tmp.238)  <275>;
                            () chess_rear_then ()  <784>;
                        } #46
                        {
                            (__ct_2139095040.261 var=101) const ()  <280>;
                            (__tmp.263 var=103) __uint__pl___uint___uint (__tmp.532 __ct_2139095040.261)  <282>;
                            () sink (__sp.38)  <297>;
                            () sync_sink (__tmp.263) sid=16  <313>;
                            (__trgt.581 var=237) const ()  <805>;
                            () void_j_t21s_s2 (__trgt.581)  <806>;
                        } #49 off=8 nxt=-3 tgt=1
                        {
                        } #50 off=7
                        {
                        } #51
                    } #45
                    #187 off=9
                    (__trgt.571 var=230) const ()  <788>;
                    () void_j_t21s_s2 (__trgt.571)  <789>;
                } #37
                {
                    (roundBits.321 var=38) merge (roundBits.210 roundBits.157)  <364>;
                    (sig.322 var=26) merge (sig.500 sig.31)  <365>;
                    (exp.323 var=25) merge (__ct_0.55 exp.28)  <366>;
                } #52
            } #34
            #188 off=14
            (__trgt.574 var=232) const ()  <793>;
            () void_j_t21s_s2 (__trgt.574)  <794>;
        } #32
        {
            (roundBits.339 var=38) merge (roundBits.157 roundBits.321)  <382>;
            (sig.340 var=26) merge (sig.31 sig.322)  <383>;
            (exp.341 var=25) merge (exp.28 exp.323)  <384>;
        } #54
    } #30
    #133 off=16
    (__tmp.345 var=113) __uint__pl___uint___uint (sig.340 __ct_64.60)  <388>;
    (__ct_7.346 var=114) const ()  <389>;
    (sig.348 var=26) __uint__rs___uint___sint (__tmp.345 __ct_7.346)  <391>;
    (__tmp.372 var=122) __uint__er___uint___uint (roundBits.339 __ct_64.60)  <416>;
    (__tmp.480 var=125) bool__eq___uint___uint (__tmp.372 __ct_0.55)  <574>;
    (__ct_4294967294.538 var=208) const ()  <708>;
    (__trgt.575 var=233) const ()  <795>;
    () void_br_bool_t13s_s2 (__tmp.480 __trgt.575)  <796>;
    (__either.576 var=222) undefined ()  <797>;
    if {
        {
            () if_expr (__either.576)  <657>;
        } #135
        {
        } #136 off=18
        {
            (__ct_4294967295.503 var=190) const ()  <619>;
            (__trgt.577 var=234) const ()  <798>;
            () void_j_t21s_s2 (__trgt.577)  <799>;
        } #137 off=17
        {
            (__tmp.539 var=131) merge (__ct_4294967294.538 __ct_4294967295.503)  <710>;
        } #138
    } #134
    #130 off=19
    (sig.382 var=26) __uint__ad___uint___uint (sig.348 __tmp.539)  <426>;
    (__tmp.555 var=135) bool__ne___uint___uint (sig.382 __ct_0.55)  <749>;
    (__trgt.578 var=235) const ()  <800>;
    () void_br_bool_t13s_s2 (__tmp.555 __trgt.578)  <801>;
    (__either.579 var=222) undefined ()  <802>;
    if {
        {
            () if_expr (__either.579)  <449>;
        } #63
        {
        } #65 off=21
        {
            (__trgt.580 var=236) const ()  <803>;
            () void_j_t21s_s2 (__trgt.580)  <804>;
        } #64 off=20
        {
            (exp.407 var=25) merge (exp.341 __ct_0.55)  <452>;
        } #66
    } #62
    #67 off=22
    (__ct_23.413 var=144) const ()  <458>;
    (__tmp.415 var=146) __uint__ls___uint___sint (exp.407 __ct_23.413)  <460>;
    (__tmp.416 var=147) __uint__pl___uint___uint (__tmp.532 __tmp.415)  <461>;
    (uiZ.417 var=39) __uint__pl___uint___uint (__tmp.416 sig.382)  <462>;
    sync {
        (uiZ.433 var=39) sync_link (uiZ.417) sid=16  <478>;
    } #1 off=23
    #70 off=24 nxt=-2
    (__ct_4s0.447 var=157) const ()  <491>;
    (__tmp.449 var=159) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_4s0.447)  <493>;
    (__R_SP.450 var=12 __sp.451 var=18) wr_res_reg (__tmp.449 __sp.38)  <494>;
    () void___rts_jr_w32 (__la.21)  <495>;
    (__rt.452 var=22 stl=X off=10) assign (uiZ.433)  <496>;
    () out (__rt.452)  <497>;
    () sink (__sp.451)  <503>;
} #0
0 : 'SoftFloat-3e/source/s_roundPackToF32.c';
----------
0 : (0,43:0,0);
1 : (0,118:1,71);
30 : (0,70:4,29);
32 : (0,70:38,30);
33 : (0,71:17,30);
34 : (0,71:8,30);
36 : (0,71:23,31);
37 : (0,87:15,36);
38 : (0,87:26,36);
39 : (0,87:33,36);
41 : (0,87:33,37);
42 : (0,87:48,38);
45 : (0,87:15,40);
49 : (0,95:12,42);
50 : (0,87:15,45);
53 : (0,70:4,52);
62 : (0,113:4,63);
64 : (0,113:21,64);
65 : (0,113:4,66);
67 : (0,117:8,71);
70 : (0,120:4,73);
83 : (0,81:28,33);
86 : (0,79:18,31);
87 : (0,79:18,31);
88 : (0,79:18,31);
91 : (0,79:18,31);
111 : (0,70:14,29);
114 : (0,94:20,41);
115 : (0,94:20,41);
116 : (0,94:20,41);
117 : (0,94:20,41);
118 : (0,94:20,41);
119 : (0,94:20,41);
130 : (0,113:9,63);
133 : (0,112:50,62);
134 : (0,112:50,62);
135 : (0,112:50,62);
136 : (0,112:50,62);
137 : (0,112:50,62);
138 : (0,112:50,62);
147 : (0,79:18,31);
180 : (0,79:18,31);
----------
44 : (0,44:1,0);
45 : (0,44:1,0);
47 : (0,44:1,0);
48 : (0,44:1,0);
51 : (0,53:19,0);
66 : (0,57:17,0);
71 : (0,59:19,0);
170 : (0,67:20,0);
172 : (0,67:20,28);
173 : (0,70:14,0);
195 : (0,70:4,29);
198 : (0,71:17,30);
217 : (0,71:8,30);
220 : (0,79:50,31);
227 : (0,81:28,33);
230 : (0,87:26,36);
249 : (0,87:33,36);
252 : (0,87:48,0);
254 : (0,87:55,38);
255 : (0,87:48,38);
256 : (0,87:33,39);
275 : (0,87:15,40);
280 : (0,94:63,0);
282 : (0,94:43,41);
364 : (0,71:8,49);
365 : (0,71:8,49);
366 : (0,71:8,49);
382 : (0,70:4,54);
383 : (0,70:4,54);
384 : (0,70:4,54);
388 : (0,100:15,55);
389 : (0,100:34,0);
391 : (0,100:32,55);
416 : (0,112:42,62);
426 : (0,112:8,62);
449 : (0,113:4,63);
452 : (0,113:4,68);
458 : (0,117:56,0);
460 : (0,117:54,70);
461 : (0,117:35,70);
462 : (0,117:60,70);
491 : (0,120:4,0);
493 : (0,120:4,0);
494 : (0,120:4,73);
495 : (0,120:4,73);
496 : (0,120:13,0);
574 : (0,112:29,62);
600 : (0,79:18,0);
601 : (0,79:18,31);
603 : (0,79:18,31);
604 : (0,79:18,31);
605 : (0,79:18,31);
606 : (0,79:18,31);
607 : (0,79:18,31);
610 : (0,79:18,31);
613 : (0,79:18,31);
619 : (0,112:11,0);
648 : (0,94:20,41);
657 : (0,112:50,62);
702 : (0,94:20,41);
708 : (0,112:11,0);
710 : (0,112:50,62);
716 : (0,79:18,31);
725 : (0,79:18,31);
748 : (0,70:14,29);
749 : (0,113:9,63);
768 : (0,94:20,41);
773 : (0,79:18,31);
778 : (0,87:33,36);
782 : (0,87:15,40);
786 : (0,71:8,30);
791 : (0,70:4,29);
796 : (0,112:50,62);
801 : (0,113:4,63);

