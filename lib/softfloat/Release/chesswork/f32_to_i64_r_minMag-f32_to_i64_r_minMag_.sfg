
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Apr 10 19:59:40 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -ISoftFloat-3e/source/include -ISoftFloat-3e/source/riscv -ISoftFloat-3e/build/chess -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DSOFTFLOAT_NO_EXCEPTIONS -DINLINE_LEVEL=5 -DSOFTFLOAT_FAST_DIV32TO16 -D__tct_patch__=0 +Oextc -itrv32p3_cnn_chess.h +Opmsa +NOrlt +wRelease/chesswork SoftFloat-3e/source/f32_to_i64_r_minMag.c +Q0=+Sal,+Sca,+Osps,-Wflla,+Opmsa,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+Opmsa,+NOrlt trv32p3_cnn


/***
!!  int_fast64_t f32_to_i64_r_minMag(float32_t, bool)
Ff32_to_i64_r_minMag : user_defined, called {
    fnm : "f32_to_i64_r_minMag" 'long long f32_to_i64_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}
****
***/

[
    0 : f32_to_i64_r_minMag typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   23 : __rt_low typ=w32 bnd=m tref=__uint__
   24 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : a typ=w32 bnd=p tref=float32_t___1
   26 : exact typ=w32 bnd=p tref=bool__
   28 : __ct_m4S0 typ=w32 val=0S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   37 : exp typ=w32 bnd=m tref=int_fast16_t__
   38 : sig typ=w32 bnd=m tref=uint_fast32_t__
   39 : shiftDist typ=w32 bnd=m tref=int_fast16_t__
   40 : sign typ=bool bnd=m tref=bool__
   44 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   51 : __ct_23 typ=w32 val=23f bnd=m
   53 : __tmp typ=w32 bnd=m
   55 : __ct_255 typ=w32 val=255f bnd=m
   58 : __ct_8388607 typ=w32 val=8388607f bnd=m
   61 : __ct_190 typ=w32 val=190f bnd=m
   64 : __ct_64 typ=w32 val=64f bnd=m
   66 : __tmp typ=bool bnd=m
   69 : __ct_31 typ=w32 val=31f bnd=m
   71 : __tmp typ=w32 bnd=m
   77 : __tmp typ=bool bnd=m
   78 : __ct_3741319168 typ=t20s_rp12 val=-135168f bnd=m
   80 : __tmp typ=bool bnd=m
   85 : __tmp typ=bool bnd=m
   88 : __tmp typ=bool bnd=m
   91 : __tmp typ=bool bnd=m
  100 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
  114 : __ct_4s0 typ=w32 val=0s0 bnd=m
  116 : __tmp typ=w32 bnd=m
  121 : __ct_4294967295 typ=w32 val=-1f bnd=m
  122 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  123 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  144 : __apl_r_high typ=w32 bnd=m tref=__uint__
  146 : __ct_m32 typ=w32 val=-32f bnd=m
  153 : __rt_low typ=w32 bnd=m tref=__uint__
  154 : __rt_high typ=w32 bnd=m tref=__uint__
  158 : __apl_ff typ=w32 bnd=m tref=__sint__
  159 : __apl_carries typ=w32 bnd=m tref=__uint__
  161 : __tmp typ=bool bnd=m
  162 : __tmp typ=bool bnd=m
  163 : __tmp typ=w32 bnd=m
  165 : __apl_r_low typ=w32 bnd=m tref=__uint__
  166 : __apl_r_high typ=w32 bnd=m tref=__uint__
  169 : __tmp_low typ=w32 bnd=m
  171 : __tmp_high typ=w32 bnd=m
  184 : __apl_r_low typ=w32 bnd=m tref=__uint__
  185 : __apl_r_high typ=w32 bnd=m tref=__uint__
  198 : __ct_8 typ=w32 val=8f bnd=m
  212 : __tmp typ=w32 bnd=m
  227 : __false typ=bool val=0f bnd=m
  228 : __either typ=bool bnd=m
  229 : __trgt typ=t13s_s2 val=0j bnd=m
  230 : __trgt typ=t13s_s2 val=0j bnd=m
  231 : __trgt typ=t21s_s2 val=0j bnd=m
  232 : __trgt typ=t13s_s2 val=0j bnd=m
  233 : __trgt typ=t21s_s2 val=0j bnd=m
  234 : __trgt typ=t13s_s2 val=0j bnd=m
  235 : __trgt typ=t21s_s2 val=0j bnd=m
  236 : __trgt typ=t13s_s2 val=0j bnd=m
  237 : __trgt typ=t21s_s2 val=0j bnd=m
  238 : __trgt typ=t13s_s2 val=0j bnd=m
  239 : __trgt typ=t21s_s2 val=0j bnd=m
  240 : __trgt typ=t13s_s2 val=0j bnd=m
  241 : __trgt typ=t21s_s2 val=0j bnd=m
  242 : __trgt typ=t13s_s2 val=0j bnd=m
  243 : __trgt typ=t21s_s2 val=0j bnd=m
  244 : __trgt typ=t13s_s2 val=0j bnd=m
  245 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ff32_to_i64_r_minMag {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (a.28 var=25 stl=X off=12) inp ()  <39>;
    (a.29 var=25) deassign (a.28)  <40>;
    (exact.31 var=26 stl=X off=13) inp ()  <42>;
    (__rd___sp.34 var=20) rd_res_reg (__R_SP.11 __sp.17)  <45>;
    (__ct_m4S0.35 var=28) const ()  <46>;
    (__tmp.37 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_m4S0.35)  <48>;
    (__R_SP.38 var=12 __sp.39 var=18) wr_res_reg (__tmp.37 __sp.17)  <49>;
    (__rd___sp.41 var=20) rd_res_reg (__R_SP.11 __sp.39)  <52>;
    (__ct_0.61 var=44) const ()  <72>;
    (__ct_23.70 var=51) const ()  <80>;
    (__tmp.72 var=53) __uint__rs___uint___sint (a.29 __ct_23.70)  <82>;
    (__ct_255.74 var=55) const ()  <84>;
    (exp.76 var=37) __sint__ad___sint___sint (__tmp.72 __ct_255.74)  <86>;
    (__ct_8388607.77 var=58) const ()  <87>;
    (sig.79 var=38) __uint__ad___uint___uint (a.29 __ct_8388607.77)  <89>;
    (__ct_190.80 var=61) const ()  <90>;
    (shiftDist.82 var=39) __sint__mi___sint___sint (__ct_190.80 exp.76)  <92>;
    (__ct_64.83 var=64) const ()  <93>;
    (__tmp.85 var=66) bool__ge___sint___sint (shiftDist.82 __ct_64.83)  <95>;
    (__trgt.497 var=244) const ()  <745>;
    () void_br_bool_t13s_s2 (__tmp.85 __trgt.497)  <746>;
    (__either.498 var=228) undefined ()  <747>;
    if {
        {
            () if_expr (__either.498)  <115>;
        } #5
        {
        } #6 off=24
        {
            #57 off=1
            (__ct_31.107 var=69) const ()  <118>;
            (__tmp.109 var=71) __uint__rs___uint___sint (a.29 __ct_31.107)  <120>;
            (__tmp.353 var=77) bool__ge___sint___sint (__ct_0.61 shiftDist.82)  <439>;
            (__trgt.494 var=242) const ()  <740>;
            () void_br_bool_t13s_s2 (__tmp.353 __trgt.494)  <741>;
            (__either.495 var=228) undefined ()  <742>;
            if {
                {
                    () if_expr (__either.495)  <146>;
                } #10
                {
                    #12 off=12
                    (__ct_3741319168.135 var=78) const ()  <147>;
                    (__tmp.137 var=80) bool__eq___uint___uint (a.29 __ct_3741319168.135)  <149>;
                    (__ct_2147483648.337 var=122) const ()  <401>;
                    (__trgt.482 var=234) const ()  <720>;
                    () void_br_bool_t13s_s2 (__tmp.137 __trgt.482)  <721>;
                    (__either.483 var=228) undefined ()  <722>;
                    if {
                        {
                            () if_expr (__either.483)  <169>;
                        } #14
                        {
                        } #15 off=21
                        {
                            #17 off=13
                            (__ct_4294967295.321 var=121) const ()  <384>;
                            (__ct_2147483647.341 var=123) const ()  <406>;
                            (__tmp.469 var=85) bool__ne___sint___sint (exp.76 __ct_255.74)  <684>;
                            (__trgt.473 var=229) const ()  <706>;
                            () void_br_bool_t13s_s2 (__tmp.469 __trgt.473)  <707>;
                            (__either.474 var=228) undefined ()  <708>;
                            if {
                                {
                                    () if_expr (__either.474)  <194>;
                                } #19
                                {
                                    (__false.478 var=227) const ()  <714>;
                                } #21
                                {
                                    (__tmp.183 var=88) bool__ne___uint___uint (sig.79 __ct_0.61)  <197>;
                                    (__trgt.479 var=232) const ()  <715>;
                                    () void_br_bool_t13s_s2 (__tmp.183 __trgt.479)  <716>;
                                    (__either.480 var=228) undefined ()  <717>;
                                } #20 off=14
                                {
                                    (__tmp.186 var=91) merge (__false.478 __either.480)  <200>;
                                } #22
                            } #18
                            if {
                                {
                                    () if_expr (__tmp.186)  <220>;
                                } #25
                                {
                                } #26 off=19
                                {
                                    #149 off=15
                                    (__trgt.475 var=230) const ()  <709>;
                                    () void_br_bool_t13s_s2 (sign.500 __trgt.475)  <710>;
                                    (__either.476 var=228) undefined ()  <711>;
                                    (sign.500 var=40) bool__ne___uint___uint (__tmp.109 __ct_0.61)  <750>;
                                    if {
                                        {
                                            () if_expr (__either.476)  <242>;
                                        } #30
                                        {
                                        } #31 off=17
                                        {
                                            (__trgt.477 var=231) const ()  <712>;
                                            () void_j_t21s_s2 (__trgt.477)  <713>;
                                        } #32 off=16
                                        {
                                            (__rt_low.324 var=23) merge (__ct_0.61 __ct_4294967295.321)  <388>;
                                            (__rt_high.344 var=24) merge (__ct_2147483648.337 __ct_2147483647.341)  <410>;
                                        } #33
                                    } #29
                                    #150 off=18
                                    (__trgt.481 var=233) const ()  <718>;
                                    () void_j_t21s_s2 (__trgt.481)  <719>;
                                } #27
                                {
                                    (__rt_low.320 var=23) merge (__ct_4294967295.321 __rt_low.324)  <383>;
                                    (__rt_high.340 var=24) merge (__ct_2147483647.341 __rt_high.344)  <405>;
                                } #34
                            } #24
                            #151 off=20
                            (__trgt.484 var=235) const ()  <723>;
                            () void_j_t21s_s2 (__trgt.484)  <724>;
                        } #16
                        {
                            (__rt_low.317 var=23) merge (__ct_0.61 __rt_low.320)  <380>;
                            (__rt_high.336 var=24) merge (__ct_2147483648.337 __rt_high.340)  <400>;
                        } #35
                    } #13
                } #11
                {
                    #119 off=2
                    (__ct_8388608.234 var=100) const ()  <250>;
                    (sig.236 var=38) __uint__or___uint___uint (sig.79 __ct_8388608.234)  <252>;
                    (__apl_r_high.369 var=144) __uint__ls___uint___sint (sig.236 __ct_8.439)  <460>;
                    (__tmp.387 var=161) bool__eq___sint___sint (shiftDist.82 __ct_0.61)  <482>;
                    (__ct_8.439 var=198) const ()  <564>;
                    (__trgt.488 var=238) const ()  <730>;
                    () void_br_bool_t13s_s2 (__tmp.387 __trgt.488)  <731>;
                    (__either.489 var=228) undefined ()  <732>;
                    if {
                        {
                            () if_expr (__either.489)  <485>;
                        } #89
                        {
                        } #90 off=7
                        {
                            #92 off=3
                            (__ct_m32.360 var=146) const ()  <449>;
                            (__apl_ff.390 var=158) __sint__pl___sint___sint (shiftDist.82 __ct_m32.360)  <486>;
                            (__tmp.391 var=162) bool__lt___sint___sint (__apl_ff.390 __ct_0.61)  <487>;
                            (__trgt.485 var=236) const ()  <725>;
                            () void_br_bool_t13s_s2 (__tmp.391 __trgt.485)  <726>;
                            (__either.486 var=228) undefined ()  <727>;
                            if {
                                {
                                    () if_expr (__either.486)  <488>;
                                } #94
                                {
                                    (__tmp.392 var=163) __sint__mi___sint___sint (__ct_0.61 __apl_ff.390)  <489>;
                                    (__apl_carries.393 var=159) __uint__ls___uint___sint (__apl_r_high.369 __tmp.392)  <490>;
                                    (__apl_r_high.396 var=166) __uint__rs___uint___sint (__apl_r_high.369 shiftDist.82)  <493>;
                                } #95 off=5
                                {
                                    (__apl_r_low.397 var=165) __uint__rs___uint___sint (__apl_r_high.369 __apl_ff.390)  <494>;
                                    (__trgt.487 var=237) const ()  <728>;
                                    () void_j_t21s_s2 (__trgt.487)  <729>;
                                } #96 off=4
                                {
                                    (__rt_low.398 var=153) merge (__apl_carries.393 __apl_r_low.397)  <495>;
                                    (__rt_high.399 var=154) merge (__apl_r_high.396 __ct_0.61)  <496>;
                                } #97
                            } #93
                            #153 off=6
                            (__trgt.490 var=239) const ()  <733>;
                            () void_j_t21s_s2 (__trgt.490)  <734>;
                        } #91
                        {
                            (__tmp_low.400 var=169) merge (__ct_0.61 __rt_low.398)  <497>;
                            (__tmp_high.401 var=171) merge (__apl_r_high.369 __rt_high.399)  <498>;
                        } #98
                    } #88
                    #154 off=8
                    (__trgt.491 var=240) const ()  <735>;
                    () void_br_bool_t13s_s2 (sign.501 __trgt.491)  <736>;
                    (__either.492 var=228) undefined ()  <737>;
                    (sign.501 var=40) bool__eq___uint___uint (__tmp.109 __ct_0.61)  <751>;
                    if {
                        {
                            () if_expr (__either.492)  <278>;
                        } #39
                        {
                        } #41 off=10
                        {
                            (__apl_r_low.419 var=184) __uint_sub___uint___uint (__ct_0.61 __tmp_low.400)  <521>;
                            (__apl_r_high.420 var=185) __uint_sub___uint___uint (__ct_0.61 __tmp_high.401)  <522>;
                            (__apl_r_high.423 var=185) __uint__mi___uint___uint (__apl_r_high.420 __tmp.463)  <525>;
                            (__tmp.463 var=212) __sint_sne0___sint (__tmp_low.400)  <638>;
                            (__trgt.493 var=241) const ()  <738>;
                            () void_j_t21s_s2 (__trgt.493)  <739>;
                        } #127 off=9
                        {
                            (__rt_low.327 var=23) merge (__tmp_low.400 __apl_r_low.419)  <391>;
                            (__rt_high.347 var=24) merge (__tmp_high.401 __apl_r_high.423)  <413>;
                        } #42
                    } #38
                    #155 off=11
                    (__trgt.496 var=243) const ()  <743>;
                    () void_j_t21s_s2 (__trgt.496)  <744>;
                } #36
                {
                    (__rt_low.314 var=23) merge (__rt_low.317 __rt_low.327)  <377>;
                    (__rt_high.333 var=24) merge (__rt_high.336 __rt_high.347)  <397>;
                } #43
            } #9
            #156 off=23
            (__trgt.499 var=245) const ()  <748>;
            () void_j_t21s_s2 (__trgt.499)  <749>;
        } #7
        {
            (__rt_low.311 var=23) merge (__ct_0.61 __rt_low.314)  <374>;
            (__rt_high.330 var=24) merge (__ct_0.61 __rt_high.333)  <394>;
        } #44
    } #4
    #47 off=25 nxt=-2
    (__ct_4s0.277 var=114) const ()  <294>;
    (__tmp.279 var=116) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_4s0.277)  <296>;
    (__R_SP.280 var=12 __sp.281 var=18) wr_res_reg (__tmp.279 __sp.39)  <297>;
    () void___rts_jr_w32 (__la.21)  <298>;
    (__rt_low.283 var=23 stl=X off=10) assign (__rt_low.311)  <300>;
    () out (__rt_low.283)  <301>;
    (__rt_high.285 var=24 stl=X off=11) assign (__rt_high.330)  <303>;
    () out (__rt_high.285)  <304>;
    () sink (__sp.281)  <310>;
} #0
0 : 'SoftFloat-3e/source/f32_to_i64_r_minMag.c';
----------
0 : (0,44:0,0);
3 : (0,67:12,15);
4 : (0,67:4,15);
6 : (0,67:27,16);
7 : (0,73:8,19);
9 : (0,78:4,21);
11 : (0,78:26,22);
12 : (0,79:17,22);
13 : (0,79:8,22);
15 : (0,79:77,23);
16 : (0,80:12,26);
17 : (0,86:17,27);
18 : (0,86:26,27);
20 : (0,86:26,28);
21 : (0,86:26,29);
24 : (0,86:33,31);
26 : (0,86:35,32);
27 : (0,87:8,33);
29 : (0,87:8,33);
31 : (0,87:33,34);
32 : (0,87:40,35);
36 : (0,85:8,46);
38 : (0,100:16,50);
41 : (0,100:26,52);
47 : (0,100:4,61);
57 : (0,78:19,21);
88 : (0,93:16,49);
89 : (0,93:16,49);
90 : (0,93:16,49);
91 : (0,93:16,49);
92 : (0,93:16,49);
93 : (0,93:16,49);
94 : (0,93:16,49);
95 : (0,93:16,49);
96 : (0,93:16,49);
97 : (0,93:16,49);
98 : (0,93:16,49);
119 : (0,93:16,49);
127 : (0,100:18,51);
----------
45 : (0,44:13,0);
46 : (0,44:13,0);
48 : (0,44:13,0);
49 : (0,44:13,0);
52 : (0,49:19,0);
72 : (0,60:6,0);
80 : (0,62:34,0);
82 : (0,62:32,12);
84 : (0,62:38,0);
86 : (0,62:38,12);
87 : (0,63:17,0);
89 : (0,63:17,13);
90 : (0,66:21,0);
92 : (0,66:21,14);
93 : (0,67:12,0);
95 : (0,67:12,15);
115 : (0,67:4,15);
118 : (0,77:38,0);
120 : (0,77:36,20);
146 : (0,78:4,21);
147 : (0,79:17,0);
149 : (0,79:17,22);
169 : (0,79:8,22);
194 : (0,86:26,27);
197 : (0,86:26,28);
200 : (0,86:26,30);
220 : (0,86:33,31);
242 : (0,87:8,33);
250 : (0,91:8,0);
252 : (0,91:8,47);
278 : (0,100:16,50);
294 : (0,100:4,0);
296 : (0,100:4,0);
297 : (0,100:4,61);
298 : (0,100:4,61);
300 : (0,100:4,0);
303 : (0,100:4,0);
384 : (0,86:35,0);
401 : (0,80:41,0);
406 : (0,86:35,0);
439 : (0,78:19,21);
449 : (0,92:31,0);
460 : (0,92:31,48);
482 : (0,93:16,49);
485 : (0,93:16,49);
486 : (0,93:16,49);
487 : (0,93:16,49);
488 : (0,93:16,49);
489 : (0,93:16,49);
490 : (0,93:16,49);
493 : (0,93:16,49);
494 : (0,93:16,49);
495 : (0,93:16,49);
496 : (0,93:16,49);
497 : (0,93:16,49);
498 : (0,93:16,49);
521 : (0,100:18,51);
522 : (0,100:18,51);
525 : (0,100:18,51);
564 : (0,92:31,0);
638 : (0,100:18,51);
684 : (0,86:17,27);
707 : (0,86:26,27);
710 : (0,87:8,33);
716 : (0,86:33,31);
721 : (0,79:8,22);
726 : (0,93:16,49);
731 : (0,93:16,49);
736 : (0,100:16,50);
741 : (0,78:4,21);
746 : (0,67:4,15);

