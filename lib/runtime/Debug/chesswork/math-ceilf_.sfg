
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 16:47:10 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float ceilf(float)
Fceilf : user_defined, called {
    fnm : "ceilf" 'float ceilf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=16 );
}
****
!!  bool f32_lt(float32_t, float32_t)
Ff32_lt : user_defined, called {
    fnm : "f32_lt" 'bool f32_lt(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : ceilf typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : x typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   20 : i0 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   21 : j0 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   22 : i typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=u_int32_t_DMb
   23 : __rd___sp typ=w32 bnd=m
   24 : __la typ=w32 bnd=p tref=w32__
   25 : __rt typ=w32 bnd=p tref=__ffloat__
   26 : __arg_x typ=w32 bnd=p tref=__ffloat__
   27 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   31 : __ct_0t0 typ=w32 val=0t0 bnd=m
   33 : __adr_x typ=w32 bnd=m adro=19
   35 : __ct_4t0 typ=w32 val=4t0 bnd=m
   37 : __adr_i0 typ=w32 bnd=m adro=20
   39 : __ct_8t0 typ=w32 val=8t0 bnd=m
   41 : __adr_j0 typ=w32 bnd=m adro=21
   43 : __ct_12t0 typ=w32 val=12t0 bnd=m
   45 : __adr_i typ=w32 bnd=m adro=22
   46 : __fch_x typ=w32 bnd=m
   48 : __fch_i0 typ=w32 bnd=m
   49 : __ct_23 typ=w32 val=23f bnd=m
   51 : __tmp typ=w32 bnd=m
   52 : __ct_255 typ=w32 val=255f bnd=m
   54 : __tmp typ=w32 bnd=m
   57 : __tmp typ=w32 bnd=m
   58 : __fch_j0 typ=w32 bnd=m
   61 : __tmp typ=bool bnd=m
   62 : __fch_j0 typ=w32 bnd=m
   63 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   65 : __tmp typ=bool bnd=m
   66 : __ct_1900671690 typ=w32 val=1900671690f bnd=m
   68 : __fch_x typ=w32 bnd=m
   69 : __tmp typ=w32 bnd=m
   72 : __tmp typ=bool bnd=m
   73 : __fch_i0 typ=w32 bnd=m
   76 : __tmp typ=bool bnd=m
   77 : __ct_m2147483648 typ=t20s_rp12 val=-524288f bnd=m
   79 : __fch_i0 typ=w32 bnd=m
   82 : __tmp typ=bool bnd=m
   83 : __ct_1065353216 typ=t20s_rp12 val=260096f bnd=m
   85 : __ct_8388607 typ=w32 val=8388607f bnd=m
   87 : __fch_j0 typ=w32 bnd=m
   88 : __tmp typ=w32 bnd=m
   89 : __fch_i0 typ=w32 bnd=m
   91 : __fch_i typ=w32 bnd=m
   92 : __tmp typ=w32 bnd=m
   95 : __tmp typ=bool bnd=m
   97 : __ct_16s0 typ=w32 val=16s0 bnd=m
   99 : __tmp typ=w32 bnd=m
  102 : __fch_x typ=w32 bnd=m
  103 : __tmp typ=w32 bnd=m
  106 : __tmp typ=bool bnd=m
  107 : __fch_i0 typ=w32 bnd=m
  110 : __tmp typ=bool bnd=m
  111 : __fch_i0 typ=w32 bnd=m
  113 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
  115 : __fch_j0 typ=w32 bnd=m
  116 : __tmp typ=w32 bnd=m
  117 : __tmp typ=w32 bnd=m
  119 : __fch_i0 typ=w32 bnd=m
  121 : __fch_i typ=w32 bnd=m
  122 : __tmp typ=w32 bnd=m
  123 : __tmp typ=w32 bnd=m
  125 : __fch_i0 typ=w32 bnd=m
  128 : __fch_j0 typ=w32 bnd=m
  129 : __ct_128 typ=w32 val=128f bnd=m
  131 : __tmp typ=bool bnd=m
  132 : __fch_x typ=w32 bnd=m
  133 : __fch_x typ=w32 bnd=m
  138 : __tmp typ=w32 bnd=m
  143 : __ct_m127 typ=w32 val=-127f bnd=m
  157 : __ct_4294967295 typ=w32 val=-1f bnd=m
  162 : a typ=w32 bnd=m tref=float32_t__
  163 : b typ=w32 bnd=m tref=float32_t__
  164 : f32_lt typ=t21s_s2 val=0r bnd=m
  165 : __link typ=w32 bnd=m
  166 : __tmp typ=w32 bnd=m
  172 : a typ=w32 bnd=m tref=float32_t__
  173 : b typ=w32 bnd=m tref=float32_t__
  174 : f32_add typ=t21s_s2 val=0r bnd=m
  175 : __link typ=w32 bnd=m
  188 : __either typ=bool bnd=m
  189 : __trgt typ=t13s_s2 val=0j bnd=m
  190 : __trgt typ=t21s_s2 val=0j bnd=m
  191 : __trgt typ=t13s_s2 val=0j bnd=m
  192 : __trgt typ=t21s_s2 val=0j bnd=m
  193 : __trgt typ=t13s_s2 val=0j bnd=m
  194 : __trgt typ=t21s_s2 val=0j bnd=m
  195 : __trgt typ=t13s_s2 val=0j bnd=m
  196 : __trgt typ=t13s_s2 val=0j bnd=m
  197 : __trgt typ=t21s_s2 val=0j bnd=m
  198 : __trgt typ=t13s_s2 val=0j bnd=m
  199 : __trgt typ=t21s_s2 val=0j bnd=m
  200 : __trgt typ=t13s_s2 val=0j bnd=m
  201 : __trgt typ=t21s_s2 val=0j bnd=m
  202 : __trgt typ=t13s_s2 val=0j bnd=m
  203 : __trgt typ=t21s_s2 val=0j bnd=m
  204 : __trgt typ=t13s_s2 val=0j bnd=m
  205 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fceilf {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (x.18 var=19) source ()  <29>;
    (i0.19 var=20) source ()  <30>;
    (j0.20 var=21) source ()  <31>;
    (i.21 var=22) source ()  <32>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (__arg_x.27 var=26 stl=X off=11) inp ()  <38>;
    (__arg_x.28 var=26) deassign (__arg_x.27)  <39>;
    (__rd___sp.30 var=23) rd_res_reg (__R_SP.11 __sp.17)  <41>;
    (__ct_m16S0.31 var=27) const ()  <42>;
    (__tmp.33 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.30 __ct_m16S0.31)  <44>;
    (__R_SP.34 var=12 __sp.35 var=18) wr_res_reg (__tmp.33 __sp.17)  <45>;
    (__rd___sp.36 var=23) rd_res_reg (__R_SP.11 __sp.35)  <47>;
    (__ct_0t0.37 var=31) const ()  <48>;
    (__adr_x.39 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0t0.37)  <50>;
    (__rd___sp.41 var=23) rd_res_reg (__R_SP.11 __sp.35)  <52>;
    (__rd___sp.46 var=23) rd_res_reg (__R_SP.11 __sp.35)  <57>;
    (__rd___sp.51 var=23) rd_res_reg (__R_SP.11 __sp.35)  <62>;
    (__M_DMw.56 var=5 x.57 var=19) store (__arg_x.28 __adr_x.39 x.18)  <67>;
    call {
        () chess_separator_scheduler ()  <68>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.42 var=35) const ()  <53>;
    (__adr_i0.44 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_4t0.42)  <55>;
    (__fch_x.58 var=46) load (__M_DMw.4 __adr_x.39 x.57)  <69>;
    (__M_DMw.60 var=5 i0.61 var=20) store (__fch_x.58 __adr_i0.44 i0.19)  <71>;
    call {
        () chess_separator_scheduler ()  <72>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.47 var=39) const ()  <58>;
    (__adr_j0.49 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_8t0.47)  <60>;
    (__fch_i0.62 var=48) load (__M_DMw.4 __adr_i0.44 i0.61)  <73>;
    (__ct_23.63 var=49) const ()  <74>;
    (__tmp.65 var=51) __sint__rs___sint___sint (__fch_i0.62 __ct_23.63)  <76>;
    (__ct_255.66 var=52) const ()  <77>;
    (__tmp.68 var=54) __sint__ad___sint___sint (__tmp.65 __ct_255.66)  <79>;
    (__tmp.71 var=57) __sint__pl___sint___sint (__tmp.68 __ct_m127.423)  <82>;
    (__M_DMw.72 var=5 j0.73 var=21) store (__tmp.71 __adr_j0.49 j0.20)  <83>;
    (__ct_m127.423 var=143) const ()  <509>;
    call {
        () chess_separator_scheduler ()  <84>;
    } #8 off=5
    #9 off=6
    (__fch_j0.74 var=58) load (__M_DMw.4 __adr_j0.49 j0.73)  <85>;
    (__tmp.77 var=61) bool__lt___sint___sint (__fch_j0.74 __ct_23.63)  <88>;
    (__ct_16s0.225 var=97) const ()  <242>;
    (f32_add.472 var=174) const ()  <641>;
    (__trgt.533 var=204) const ()  <793>;
    () void_br_bool_t13s_s2 (__tmp.77 __trgt.533)  <794>;
    (__either.534 var=188) undefined ()  <795>;
    if {
        {
            () if_expr (__either.534)  <106>;
        } #11
        {
            #13 off=12
            (__fch_j0.95 var=62) load (__M_DMw.4 __adr_j0.49 j0.73)  <107>;
            (__ct_0.96 var=63) const ()  <108>;
            (__tmp.98 var=65) bool__lt___sint___sint (__fch_j0.95 __ct_0.96)  <110>;
            (__ct_1900671690.116 var=66) const ()  <129>;
            (f32_lt.446 var=164) const ()  <587>;
            (__trgt.527 var=200) const ()  <783>;
            () void_br_bool_t13s_s2 (__tmp.98 __trgt.527)  <784>;
            (__either.528 var=188) undefined ()  <785>;
            if {
                {
                    () if_expr (__either.528)  <128>;
                } #15
                {
                    #135 off=29
                    (__fch_x.118 var=68) load (__M_DMw.4 __adr_x.39 x.57)  <131>;
                    (__link.473 var=175) w32_jal_t21s_s2 (f32_add.472)  <642>;
                    call {
                        (a.474 var=172 stl=X off=11) assign (__ct_1900671690.116)  <643>;
                        (b.475 var=173 stl=X off=12) assign (__fch_x.118)  <644>;
                        (__link.476 var=175 stl=X off=1) assign (__link.473)  <645>;
                        (__tmp.477 var=69 stl=X off=10) Ff32_add (__link.476 a.474 b.475)  <646>;
                        (__tmp.478 var=69) deassign (__tmp.477)  <647>;
                    } #136 off=30
                    #132 off=31
                    (__link.447 var=165) w32_jal_t21s_s2 (f32_lt.446)  <588>;
                    call {
                        (a.449 var=162 stl=X off=11) assign (__ct_0.96)  <590>;
                        (b.450 var=163 stl=X off=12) assign (__tmp.478)  <591>;
                        (__link.451 var=165 stl=X off=1) assign (__link.447)  <592>;
                        (__tmp.452 var=166 stl=X off=10) Ff32_lt (__link.451 a.449 b.450)  <593>;
                        (__tmp.453 var=166) deassign (__tmp.452)  <594>;
                    } #118 off=32
                    #119 off=33
                    (__tmp.505 var=72) bool__eq___sint___sint (__tmp.453 __ct_0.96)  <728>;
                    (__trgt.516 var=193) const ()  <764>;
                    () void_br_bool_t13s_s2 (__tmp.505 __trgt.516)  <765>;
                    (__either.517 var=188) undefined ()  <766>;
                    if {
                        {
                            () if_expr (__either.517)  <153>;
                        } #19
                        {
                        } #37 off=41
                        {
                            #21 off=34
                            (__fch_i0.140 var=73) load (__M_DMw.4 __adr_i0.44 i0.61)  <154>;
                            (__tmp.143 var=76) bool__lt___sint___sint (__fch_i0.140 __ct_0.96)  <157>;
                            (__trgt.513 var=191) const ()  <759>;
                            () void_br_bool_t13s_s2 (__tmp.143 __trgt.513)  <760>;
                            (__either.514 var=188) undefined ()  <761>;
                            if {
                                {
                                    () if_expr (__either.514)  <175>;
                                } #23
                                {
                                    (__ct_m2147483648.161 var=77) const ()  <176>;
                                    (__M_DMw.163 var=5 i0.164 var=20) store (__ct_m2147483648.161 __adr_i0.44 i0.61)  <178>;
                                } #25 off=39
                                {
                                    #28 off=35
                                    (__fch_i0.165 var=79) load (__M_DMw.4 __adr_i0.44 i0.61)  <180>;
                                    (__tmp.504 var=82) bool__eq___sint___sint (__fch_i0.165 __ct_0.96)  <727>;
                                    (__trgt.510 var=189) const ()  <754>;
                                    () void_br_bool_t13s_s2 (__tmp.504 __trgt.510)  <755>;
                                    (__either.511 var=188) undefined ()  <756>;
                                    if {
                                        {
                                            () if_expr (__either.511)  <201>;
                                        } #30
                                        {
                                        } #34 off=37
                                        {
                                            (__ct_1065353216.186 var=83) const ()  <202>;
                                            (__M_DMw.188 var=5 i0.189 var=20) store (__ct_1065353216.186 __adr_i0.44 i0.61)  <204>;
                                            (__trgt.512 var=190) const ()  <757>;
                                            () void_j_t21s_s2 (__trgt.512)  <758>;
                                        } #32 off=36
                                        {
                                            (i0.190 var=20) merge (i0.61 i0.189)  <206>;
                                        } #35
                                    } #29
                                    #158 off=38
                                    (__trgt.515 var=192) const ()  <762>;
                                    () void_j_t21s_s2 (__trgt.515)  <763>;
                                } #27
                                {
                                    (i0.191 var=20) merge (i0.164 i0.190)  <207>;
                                } #36
                            } #22
                            #159 off=40
                            (__trgt.518 var=194) const ()  <767>;
                            () void_j_t21s_s2 (__trgt.518)  <768>;
                        } #20
                        {
                            (i0.192 var=20) merge (i0.61 i0.191)  <208>;
                        } #38
                    } #18
                } #16
                {
                    #40 off=13
                    (__ct_12t0.52 var=43) const ()  <63>;
                    (__adr_i.54 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_12t0.52)  <65>;
                    (__ct_8388607.193 var=85) const ()  <209>;
                    (__fch_j0.195 var=87) load (__M_DMw.4 __adr_j0.49 j0.73)  <211>;
                    (__tmp.196 var=88) __uint__rs___uint___sint (__ct_8388607.193 __fch_j0.195)  <212>;
                    (__M_DMw.197 var=5 i.198 var=22) store (__tmp.196 __adr_i.54 i.21)  <213>;
                    call {
                        () chess_separator_scheduler ()  <214>;
                    } #41 off=14
                    #42 off=15
                    (__fch_i0.199 var=89) load (__M_DMw.4 __adr_i0.44 i0.61)  <215>;
                    (__fch_i.201 var=91) load (__M_DMw.4 __adr_i.54 i.198)  <217>;
                    (__tmp.202 var=92) __uint__ad___uint___uint (__fch_i0.199 __fch_i.201)  <218>;
                    (__tmp.205 var=95) bool__eq___uint___uint (__tmp.202 __ct_0.96)  <221>;
                    (__trgt.519 var=195) const ()  <769>;
                    () void_br_bool_t13s_s2 (__tmp.205 __trgt.519)  <770>;
                    (__either.520 var=188) undefined ()  <771>;
                    if {
                        {
                            () if_expr (__either.520)  <239>;
                            () chess_rear_then ()  <772>;
                        } #44
                        {
                            (__rt.223 var=25) load (__M_DMw.4 __adr_x.39 x.57)  <240>;
                            (__rd___sp.224 var=23) rd_res_reg (__R_SP.11 __sp.35)  <241>;
                            (__tmp.227 var=99) __Pvoid__pl___Pvoid___sint (__rd___sp.224 __ct_16s0.225)  <244>;
                            (__R_SP.228 var=12 __sp.229 var=18) wr_res_reg (__tmp.227 __sp.35)  <245>;
                            () void___rts_jr_w32 (__la.24)  <246>;
                            (__rt.230 var=25 stl=X off=10) assign (__rt.223)  <247>;
                            () out (__rt.230)  <248>;
                            () sink (__sp.229)  <254>;
                            () sink (x.57)  <255>;
                            () sink (i0.61)  <256>;
                            () sink (j0.73)  <257>;
                            () sink (i.198)  <258>;
                        } #48 off=17 nxt=-2
                        {
                        } #49 off=16
                        {
                        } #50
                    } #43
                    #144 off=18
                    (__fch_x.267 var=102) load (__M_DMw.4 __adr_x.39 x.57)  <295>;
                    (__link.483 var=175) w32_jal_t21s_s2 (f32_add.472)  <655>;
                    call {
                        (a.484 var=172 stl=X off=11) assign (__ct_1900671690.116)  <656>;
                        (b.485 var=173 stl=X off=12) assign (__fch_x.267)  <657>;
                        (__link.486 var=175 stl=X off=1) assign (__link.483)  <658>;
                        (__tmp.487 var=103 stl=X off=10) Ff32_add (__link.486 a.484 b.485)  <659>;
                        (__tmp.488 var=103) deassign (__tmp.487)  <660>;
                    } #145 off=19
                    #141 off=20
                    (__link.459 var=165) w32_jal_t21s_s2 (f32_lt.446)  <603>;
                    call {
                        (a.461 var=162 stl=X off=11) assign (__ct_0.96)  <605>;
                        (b.462 var=163 stl=X off=12) assign (__tmp.488)  <606>;
                        (__link.463 var=165 stl=X off=1) assign (__link.459)  <607>;
                        (__tmp.464 var=166 stl=X off=10) Ff32_lt (__link.463 a.461 b.462)  <608>;
                        (__tmp.465 var=166) deassign (__tmp.464)  <609>;
                    } #127 off=21
                    #128 off=22
                    (__tmp.507 var=106) bool__eq___sint___sint (__tmp.465 __ct_0.96)  <730>;
                    (__trgt.524 var=198) const ()  <778>;
                    () void_br_bool_t13s_s2 (__tmp.507 __trgt.524)  <779>;
                    (__either.525 var=188) undefined ()  <780>;
                    if {
                        {
                            () if_expr (__either.525)  <317>;
                        } #53
                        {
                        } #65 off=27
                        {
                            #102 off=23
                            (__fch_i0.289 var=107) load (__M_DMw.4 __adr_i0.44 i0.61)  <318>;
                            (__tmp.506 var=110) bool__ge___sint___sint (__ct_0.96 __fch_i0.289)  <729>;
                            (__trgt.521 var=196) const ()  <773>;
                            () void_br_bool_t13s_s2 (__tmp.506 __trgt.521)  <774>;
                            (__either.522 var=188) undefined ()  <775>;
                            if {
                                {
                                    () if_expr (__either.522)  <339>;
                                } #57
                                {
                                } #61 off=25
                                {
                                    (__fch_i0.310 var=111) load (__M_DMw.4 __adr_i0.44 i0.61)  <340>;
                                    (__ct_8388608.312 var=113) const ()  <342>;
                                    (__fch_j0.314 var=115) load (__M_DMw.4 __adr_j0.49 j0.73)  <344>;
                                    (__tmp.315 var=116) __uint__rs___uint___sint (__ct_8388608.312 __fch_j0.314)  <345>;
                                    (__tmp.316 var=117) __uint__pl___uint___uint (__fch_i0.310 __tmp.315)  <346>;
                                    (__M_DMw.318 var=5 i0.319 var=20) store (__tmp.316 __adr_i0.44 i0.61)  <348>;
                                    (__trgt.523 var=197) const ()  <776>;
                                    () void_j_t21s_s2 (__trgt.523)  <777>;
                                } #59 off=24
                                {
                                    (i0.320 var=20) merge (i0.61 i0.319)  <350>;
                                } #62
                            } #56
                            #108 off=26
                            (__fch_i0.321 var=119) load (__M_DMw.4 __adr_i0.44 i0.320)  <351>;
                            (__fch_i.323 var=121) load (__M_DMw.4 __adr_i.54 i.198)  <353>;
                            (__tmp.325 var=123) __uint__ad___uint___uint (__fch_i0.321 __tmp.440)  <355>;
                            (__M_DMw.327 var=5 i0.328 var=20) store (__tmp.325 __adr_i0.44 i0.320)  <357>;
                            (__ct_4294967295.439 var=157) const ()  <556>;
                            (__tmp.440 var=122) __uint__er___uint___uint (__fch_i.323 __ct_4294967295.439)  <557>;
                            (__trgt.526 var=199) const ()  <781>;
                            () void_j_t21s_s2 (__trgt.526)  <782>;
                        } #54
                        {
                            (i0.329 var=20) merge (i0.61 i0.328)  <359>;
                        } #66
                    } #52
                    #161 off=28
                    (__trgt.529 var=201) const ()  <786>;
                    () void_j_t21s_s2 (__trgt.529)  <787>;
                } #39
                {
                    (i0.337 var=20) merge (i0.192 i0.329)  <367>;
                    (i.339 var=22) merge (i.21 i.198)  <369>;
                } #67
            } #14
            #68 off=43
            (__fch_i0.347 var=125) load (__M_DMw.4 __adr_i0.44 i0.337)  <377>;
            (__M_DMw.349 var=5 x.350 var=19) store (__fch_i0.347 __adr_x.39 x.57)  <379>;
            call {
                () chess_separator_scheduler ()  <380>;
            } #69 off=44
            #70 off=45
            (__rt.351 var=25) load (__M_DMw.4 __adr_x.39 x.350)  <381>;
        } #12
        {
            #73 off=7
            (__fch_j0.352 var=128) load (__M_DMw.4 __adr_j0.49 j0.73)  <383>;
            (__ct_128.353 var=129) const ()  <384>;
            (__tmp.355 var=131) bool__eq___sint___sint (__fch_j0.352 __ct_128.353)  <386>;
            (__trgt.530 var=202) const ()  <788>;
            () void_br_bool_t13s_s2 (__tmp.355 __trgt.530)  <789>;
            (__either.531 var=188) undefined ()  <790>;
            if {
                {
                    () if_expr (__either.531)  <404>;
                } #75
                {
                    #153 off=9
                    (__fch_x.373 var=132) load (__M_DMw.4 __adr_x.39 x.57)  <405>;
                    (__fch_x.374 var=133) load (__M_DMw.4 __adr_x.39 x.57)  <406>;
                    (__link.493 var=175) w32_jal_t21s_s2 (f32_add.472)  <668>;
                    call {
                        (a.494 var=172 stl=X off=11) assign (__fch_x.373)  <669>;
                        (b.495 var=173 stl=X off=12) assign (__fch_x.374)  <670>;
                        (__link.496 var=175 stl=X off=1) assign (__link.493)  <671>;
                        (__rt.497 var=25 stl=X off=10) Ff32_add (__link.496 a.494 b.495)  <672>;
                        (__rt.498 var=25) deassign (__rt.497)  <673>;
                    } #154 off=10
                } #76
                {
                    (__rt.376 var=25) load (__M_DMw.4 __adr_x.39 x.57)  <409>;
                    (__trgt.532 var=203) const ()  <791>;
                    () void_j_t21s_s2 (__trgt.532)  <792>;
                } #80 off=8
                {
                    (__rt.377 var=25) merge (__rt.498 __rt.376)  <411>;
                } #82
            } #74
            #162 off=11
            (__trgt.535 var=205) const ()  <796>;
            () void_j_t21s_s2 (__trgt.535)  <797>;
        } #72
        {
            (x.384 var=19) merge (x.350 x.57)  <419>;
            (i0.385 var=20) merge (i0.337 i0.61)  <420>;
            (i.387 var=22) merge (i.339 i.21)  <422>;
            (__rt.394 var=25) merge (__rt.351 __rt.377)  <429>;
        } #84
    } #10
    #86 off=46 nxt=-2
    (__rd___sp.395 var=23) rd_res_reg (__R_SP.11 __sp.35)  <430>;
    (__tmp.398 var=138) __Pvoid__pl___Pvoid___sint (__rd___sp.395 __ct_16s0.225)  <433>;
    (__R_SP.399 var=12 __sp.400 var=18) wr_res_reg (__tmp.398 __sp.35)  <434>;
    () void___rts_jr_w32 (__la.24)  <435>;
    (__rt.401 var=25 stl=X off=10) assign (__rt.394)  <436>;
    () out (__rt.401)  <437>;
    () sink (__sp.400)  <443>;
    () sink (x.384)  <444>;
    () sink (i0.385)  <445>;
    () sink (j0.73)  <446>;
    () sink (i.387)  <447>;
} #0
0 : 'src/math.c';
----------
0 : (0,127:0,0);
3 : (0,127:12,0);
4 : (0,127:12,0);
5 : (0,134:4,6);
6 : (0,134:4,6);
7 : (0,135:7,8);
8 : (0,135:7,8);
9 : (0,136:9,8);
10 : (0,136:4,8);
12 : (0,151:8,9);
13 : (0,137:13,9);
14 : (0,137:8,9);
16 : (0,137:17,10);
18 : (0,138:12,10);
20 : (0,138:34,11);
21 : (0,139:21,11);
22 : (0,139:16,11);
25 : (0,139:28,13);
27 : (0,140:21,15);
28 : (0,140:26,15);
29 : (0,140:21,15);
32 : (0,140:35,17);
34 : (0,140:21,19);
37 : (0,138:12,26);
39 : (0,142:15,31);
40 : (0,143:14,32);
41 : (0,143:14,32);
42 : (0,144:21,32);
43 : (0,144:12,32);
48 : (0,144:26,33);
49 : (0,144:12,36);
52 : (0,145:12,39);
54 : (0,145:34,40);
56 : (0,146:16,40);
59 : (0,146:28,42);
61 : (0,146:16,43);
65 : (0,145:12,49);
68 : (0,154:3,57);
69 : (0,154:3,57);
70 : (0,155:4,58);
72 : (0,150:11,60);
73 : (0,151:13,60);
74 : (0,151:8,60);
76 : (0,152:13,61);
80 : (0,152:13,65);
86 : (0,155:4,73);
102 : (0,146:21,40);
108 : (0,147:16,46);
118 : (0,138:21,10);
119 : (0,138:21,10);
127 : (0,145:21,39);
128 : (0,145:21,39);
132 : (0,138:21,10);
135 : (0,138:19,10);
136 : (0,138:19,10);
141 : (0,145:21,39);
144 : (0,145:19,39);
145 : (0,145:19,39);
153 : (0,151:29,61);
154 : (0,151:29,61);
----------
41 : (0,127:6,0);
42 : (0,127:6,0);
44 : (0,127:6,0);
45 : (0,127:6,0);
47 : (0,127:18,0);
48 : (0,127:18,0);
50 : (0,127:18,0);
52 : (0,131:12,0);
53 : (0,131:12,0);
55 : (0,131:12,0);
57 : (0,131:15,0);
58 : (0,131:15,0);
60 : (0,131:15,0);
62 : (0,132:14,0);
63 : (0,132:14,0);
65 : (0,132:14,0);
67 : (0,127:12,0);
68 : (0,127:12,0);
69 : (0,134:15,5);
71 : (0,134:1,5);
72 : (0,134:4,6);
73 : (0,135:11,7);
74 : (0,135:15,0);
76 : (0,135:13,7);
77 : (0,135:19,0);
79 : (0,135:18,7);
82 : (0,135:24,7);
83 : (0,135:4,7);
84 : (0,135:7,8);
85 : (0,136:7,8);
88 : (0,136:9,8);
106 : (0,136:4,8);
107 : (0,137:11,9);
108 : (0,137:14,0);
110 : (0,137:13,9);
128 : (0,137:8,9);
129 : (0,138:15,0);
131 : (0,138:20,10);
153 : (0,138:12,10);
154 : (0,139:19,11);
157 : (0,139:21,11);
175 : (0,139:16,11);
176 : (0,139:28,0);
178 : (0,139:26,12);
180 : (0,140:24,15);
201 : (0,140:21,15);
202 : (0,140:36,0);
204 : (0,140:33,16);
206 : (0,140:21,21);
207 : (0,139:16,23);
208 : (0,138:12,28);
209 : (0,143:16,0);
211 : (0,143:41,31);
212 : (0,143:39,31);
213 : (0,143:12,31);
214 : (0,143:14,32);
215 : (0,144:16,32);
217 : (0,144:19,32);
218 : (0,144:18,32);
221 : (0,144:21,32);
239 : (0,144:12,32);
240 : (0,144:33,33);
241 : (0,144:26,0);
242 : (0,144:26,0);
244 : (0,144:26,0);
245 : (0,144:26,33);
246 : (0,144:26,33);
247 : (0,144:33,0);
295 : (0,145:20,39);
317 : (0,145:12,39);
318 : (0,146:19,40);
339 : (0,146:16,40);
340 : (0,146:25,41);
342 : (0,146:31,0);
344 : (0,146:56,41);
345 : (0,146:54,41);
346 : (0,146:28,41);
348 : (0,146:25,41);
350 : (0,146:16,45);
351 : (0,147:16,46);
353 : (0,147:24,46);
355 : (0,147:19,46);
357 : (0,147:16,46);
359 : (0,145:12,51);
367 : (0,137:8,54);
369 : (0,137:8,54);
377 : (0,154:14,56);
379 : (0,154:1,56);
380 : (0,154:3,57);
381 : (0,155:11,57);
383 : (0,151:11,60);
384 : (0,151:15,0);
386 : (0,151:13,60);
404 : (0,151:8,60);
405 : (0,151:28,61);
406 : (0,151:30,61);
409 : (0,152:20,64);
411 : (0,151:8,67);
419 : (0,136:4,71);
420 : (0,136:4,71);
422 : (0,136:4,71);
429 : (0,136:4,71);
430 : (0,155:4,0);
433 : (0,155:4,0);
434 : (0,155:4,73);
435 : (0,155:4,73);
436 : (0,155:4,0);
509 : (0,135:24,0);
556 : (0,147:23,0);
557 : (0,147:23,46);
587 : (0,138:21,0);
588 : (0,138:21,10);
590 : (0,138:21,10);
591 : (0,138:21,10);
592 : (0,138:21,10);
593 : (0,138:21,10);
594 : (0,138:21,10);
603 : (0,145:21,39);
605 : (0,145:21,39);
606 : (0,145:21,39);
607 : (0,145:21,39);
608 : (0,145:21,39);
609 : (0,145:21,39);
641 : (0,138:19,0);
642 : (0,138:19,10);
643 : (0,138:19,10);
644 : (0,138:19,10);
645 : (0,138:19,10);
646 : (0,138:19,10);
647 : (0,138:19,10);
655 : (0,145:19,39);
656 : (0,145:19,39);
657 : (0,145:19,39);
658 : (0,145:19,39);
659 : (0,145:19,39);
660 : (0,145:19,39);
668 : (0,151:29,61);
669 : (0,151:29,61);
670 : (0,151:29,61);
671 : (0,151:29,61);
672 : (0,151:29,61);
673 : (0,151:29,61);
727 : (0,140:26,15);
728 : (0,138:21,10);
729 : (0,146:21,40);
730 : (0,145:21,39);
755 : (0,140:21,15);
760 : (0,139:16,11);
765 : (0,138:12,10);
770 : (0,144:12,32);
774 : (0,146:16,40);
779 : (0,145:12,39);
784 : (0,137:8,9);
789 : (0,151:8,60);
794 : (0,136:4,8);

