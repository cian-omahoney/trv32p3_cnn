
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 16:47:10 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float log10f(float)
Flog10f : user_defined, called {
    fnm : "log10f" 'float log10f(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=24 );
}
****
!! extern float logf(float)
Flogf : user_defined, called {
    fnm : "logf" 'float logf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    llv : 0 0 0 0 0 ;
}
!!  float32_t f32_sub(float32_t, float32_t)
Ff32_sub : user_defined, called {
    fnm : "f32_sub" 'float32_t f32_sub(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_div(float32_t, float32_t)
Ff32_div : user_defined, called {
    fnm : "f32_div" 'float32_t f32_div(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t i32_to_f32(int)
Fi32_to_f32 : user_defined, called {
    fnm : "i32_to_f32" 'float32_t i32_to_f32(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
}
***/

[
    0 : log10f typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : x typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   20 : hx typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   21 : k typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   22 : i typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   23 : y typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   24 : z typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   25 : __rd___sp typ=w32 bnd=m
   26 : __la typ=w32 bnd=p tref=w32__
   27 : __rt typ=w32 bnd=p tref=__ffloat__
   28 : __arg_x typ=w32 bnd=p tref=__ffloat__
   29 : __ct_m24S0 typ=w32 val=-24S0 bnd=m
   31 : __tmp typ=w32 bnd=m
   33 : __ct_0t0 typ=w32 val=0t0 bnd=m
   35 : __adr_x typ=w32 bnd=m adro=19
   37 : __ct_20t0 typ=w32 val=20t0 bnd=m
   39 : __adr_hx typ=w32 bnd=m adro=20
   41 : __ct_16t0 typ=w32 val=16t0 bnd=m
   43 : __adr_k typ=w32 bnd=m adro=21
   45 : __ct_12t0 typ=w32 val=12t0 bnd=m
   47 : __adr_i typ=w32 bnd=m adro=22
   49 : __ct_4t0 typ=w32 val=4t0 bnd=m
   51 : __adr_y typ=w32 bnd=m adro=23
   53 : __ct_8t0 typ=w32 val=8t0 bnd=m
   55 : __adr_z typ=w32 bnd=m adro=24
   58 : __fch_x typ=w32 bnd=m
   60 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   62 : __fch_hx typ=w32 bnd=m
   63 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
   65 : __tmp typ=bool bnd=m
   66 : __fch_hx typ=w32 bnd=m
   67 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   69 : __tmp typ=w32 bnd=m
   72 : __tmp typ=bool bnd=m
   73 : __ct_4286578688 typ=t20s_rp12 val=-2048f bnd=m
   75 : __ct_24s0 typ=w32 val=24s0 bnd=m
   77 : __tmp typ=w32 bnd=m
   78 : __fch_hx typ=w32 bnd=m
   81 : __tmp typ=bool bnd=m
   82 : __fch_x typ=w32 bnd=m
   83 : __fch_x typ=w32 bnd=m
   84 : __tmp typ=w32 bnd=m
   90 : __tmp typ=w32 bnd=m
   95 : __fch_x typ=w32 bnd=m
   96 : __ct_1275068416 typ=t20s_rp12 val=311296f bnd=m
   98 : __tmp typ=w32 bnd=m
   99 : __fch_x typ=w32 bnd=m
  101 : __fch_hx typ=w32 bnd=m
  102 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
  104 : __tmp typ=bool bnd=m
  105 : __fch_x typ=w32 bnd=m
  106 : __fch_x typ=w32 bnd=m
  108 : __fch_k typ=w32 bnd=m
  109 : __fch_hx typ=w32 bnd=m
  110 : __ct_23 typ=w32 val=23f bnd=m
  112 : __tmp typ=w32 bnd=m
  113 : __ct_127 typ=w32 val=127f bnd=m
  115 : __tmp typ=w32 bnd=m
  116 : __tmp typ=w32 bnd=m
  117 : __fch_k typ=w32 bnd=m
  119 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  121 : __tmp typ=w32 bnd=m
  122 : __ct_31 typ=w32 val=31f bnd=m
  124 : __tmp typ=w32 bnd=m
  126 : __fch_hx typ=w32 bnd=m
  127 : __ct_8388607 typ=w32 val=8388607f bnd=m
  129 : __tmp typ=w32 bnd=m
  132 : __fch_i typ=w32 bnd=m
  133 : __tmp typ=w32 bnd=m
  136 : __tmp typ=w32 bnd=m
  137 : __tmp typ=w32 bnd=m
  138 : __fch_k typ=w32 bnd=m
  139 : __fch_i typ=w32 bnd=m
  140 : __tmp typ=w32 bnd=m
  141 : __tmp typ=w32 bnd=m
  142 : __fch_hx typ=w32 bnd=m
  144 : __fch_y typ=w32 bnd=m
  145 : __ct_894707675 typ=w32 val=894707675f bnd=m
  147 : __tmp typ=w32 bnd=m
  148 : __ct_1054759897 typ=w32 val=1054759897f bnd=m
  150 : __fch_x typ=w32 bnd=m
  153 : logf typ=t21s_s2 val=0r bnd=m
  154 : __link typ=w32 bnd=m
  155 : __tmp typ=w32 bnd=m
  156 : __tmp typ=w32 bnd=m
  157 : __tmp typ=w32 bnd=m
  158 : __fch_z typ=w32 bnd=m
  159 : __fch_y typ=w32 bnd=m
  160 : __ct_1050288256 typ=w32 val=1050288256f bnd=m
  162 : __tmp typ=w32 bnd=m
  166 : __tmp typ=w32 bnd=m
  171 : __ct_m25 typ=w32 val=-25f bnd=m
  172 : __ct_m127 typ=w32 val=-127f bnd=m
  175 : a typ=w32 bnd=m tref=float32_t__
  176 : b typ=w32 bnd=m tref=float32_t__
  177 : f32_sub typ=t21s_s2 val=0r bnd=m
  178 : __link typ=w32 bnd=m
  181 : a typ=w32 bnd=m tref=float32_t__
  182 : b typ=w32 bnd=m tref=float32_t__
  183 : f32_div typ=t21s_s2 val=0r bnd=m
  184 : __link typ=w32 bnd=m
  187 : a typ=w32 bnd=m tref=float32_t__
  188 : b typ=w32 bnd=m tref=float32_t__
  189 : f32_mul typ=t21s_s2 val=0r bnd=m
  190 : __link typ=w32 bnd=m
  193 : a typ=w32 bnd=m tref=float32_t__
  194 : b typ=w32 bnd=m tref=float32_t__
  195 : f32_add typ=t21s_s2 val=0r bnd=m
  196 : __link typ=w32 bnd=m
  199 : a typ=w32 bnd=m tref=__sint__
  200 : i32_to_f32 typ=t21s_s2 val=0r bnd=m
  201 : __link typ=w32 bnd=m
  217 : __either typ=bool bnd=m
  218 : __trgt typ=t13s_s2 val=0j bnd=m
  219 : __trgt typ=t13s_s2 val=0j bnd=m
  220 : __trgt typ=t13s_s2 val=0j bnd=m
  221 : __trgt typ=t21s_s2 val=0j bnd=m
  222 : __trgt typ=t13s_s2 val=0j bnd=m
  223 : __trgt typ=t21s_s2 val=0j bnd=m
]
Flog10f {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (x.18 var=19) source ()  <29>;
    (hx.19 var=20) source ()  <30>;
    (k.20 var=21) source ()  <31>;
    (i.21 var=22) source ()  <32>;
    (y.22 var=23) source ()  <33>;
    (z.23 var=24) source ()  <34>;
    (__la.25 var=26 stl=X off=1) inp ()  <36>;
    (__la.26 var=26) deassign (__la.25)  <37>;
    (__arg_x.29 var=28 stl=X off=11) inp ()  <40>;
    (__arg_x.30 var=28) deassign (__arg_x.29)  <41>;
    (__rd___sp.32 var=25) rd_res_reg (__R_SP.11 __sp.17)  <43>;
    (__ct_m24S0.33 var=29) const ()  <44>;
    (__tmp.35 var=31) __Pvoid__pl___Pvoid___sint (__rd___sp.32 __ct_m24S0.33)  <46>;
    (__R_SP.36 var=12 __sp.37 var=18) wr_res_reg (__tmp.35 __sp.17)  <47>;
    (__rd___sp.38 var=25) rd_res_reg (__R_SP.11 __sp.37)  <49>;
    (__ct_0t0.39 var=33) const ()  <50>;
    (__adr_x.41 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.38 __ct_0t0.39)  <52>;
    (__rd___sp.43 var=25) rd_res_reg (__R_SP.11 __sp.37)  <54>;
    (__rd___sp.48 var=25) rd_res_reg (__R_SP.11 __sp.37)  <59>;
    (__rd___sp.53 var=25) rd_res_reg (__R_SP.11 __sp.37)  <64>;
    (__rd___sp.58 var=25) rd_res_reg (__R_SP.11 __sp.37)  <69>;
    (__rd___sp.63 var=25) rd_res_reg (__R_SP.11 __sp.37)  <74>;
    (__M_DMw.70 var=5 x.71 var=19) store (__arg_x.30 __adr_x.41 x.18)  <81>;
    call {
        () chess_separator_scheduler ()  <82>;
    } #4 off=1
    #5 off=2
    (__ct_20t0.44 var=37) const ()  <55>;
    (__adr_hx.46 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_20t0.44)  <57>;
    (__fch_x.72 var=58) load (__M_DMw.4 __adr_x.41 x.71)  <83>;
    (__M_DMw.74 var=5 hx.75 var=20) store (__fch_x.72 __adr_hx.46 hx.19)  <85>;
    call {
        () chess_separator_scheduler ()  <86>;
    } #6 off=3
    #7 off=4
    (__ct_16t0.49 var=41) const ()  <60>;
    (__adr_k.51 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_16t0.49)  <62>;
    (__ct_0.76 var=60) const ()  <87>;
    (__M_DMw.78 var=5 k.79 var=21) store (__ct_0.76 __adr_k.51 k.20)  <89>;
    call {
        () chess_separator_scheduler ()  <90>;
    } #8 off=5
    #9 off=6
    (__fch_hx.80 var=62) load (__M_DMw.4 __adr_hx.46 hx.75)  <91>;
    (__ct_8388608.81 var=63) const ()  <92>;
    (__ct_24s0.142 var=75) const ()  <158>;
    (f32_mul.488 var=189) const ()  <638>;
    (__tmp.568 var=65) bool__ge___sint___sint (__fch_hx.80 __ct_8388608.81)  <807>;
    (__trgt.575 var=220) const ()  <850>;
    () void_br_bool_t13s_s2 (__tmp.568 __trgt.575)  <851>;
    (__either.576 var=217) undefined ()  <852>;
    if {
        {
            () if_expr (__either.576)  <118>;
        } #11
        {
        } #41 off=24
        {
            #13 off=7
            (__fch_hx.107 var=66) load (__M_DMw.4 __adr_hx.46 hx.75)  <119>;
            (__ct_2147483647.108 var=67) const ()  <120>;
            (__tmp.110 var=69) __sint__ad___sint___sint (__fch_hx.107 __ct_2147483647.108)  <122>;
            (__tmp.113 var=72) bool__eq___sint___sint (__tmp.110 __ct_0.76)  <125>;
            (__trgt.571 var=218) const ()  <842>;
            () void_br_bool_t13s_s2 (__tmp.113 __trgt.571)  <843>;
            (__either.572 var=217) undefined ()  <844>;
            if {
                {
                    () if_expr (__either.572)  <149>;
                    () chess_rear_then ()  <845>;
                } #15
                {
                    (__ct_4286578688.139 var=73) const ()  <153>;
                    (__rd___sp.141 var=25) rd_res_reg (__R_SP.11 __sp.37)  <157>;
                    (__tmp.144 var=77) __Pvoid__pl___Pvoid___sint (__rd___sp.141 __ct_24s0.142)  <160>;
                    (__R_SP.145 var=12 __sp.146 var=18) wr_res_reg (__tmp.144 __sp.37)  <161>;
                    () void___rts_jr_w32 (__la.26)  <162>;
                    (__rt.147 var=27 stl=X off=10) assign (__ct_4286578688.139)  <163>;
                    () out (__rt.147)  <164>;
                    () sink (__sp.146)  <170>;
                    () sink (x.71)  <171>;
                    () sink (hx.75)  <172>;
                    () sink (k.79)  <173>;
                } #23 off=9 nxt=-2
                {
                } #24 off=8
                {
                } #25
            } #14
            #26 off=10
            (__fch_hx.194 var=78) load (__M_DMw.4 __adr_hx.46 hx.75)  <223>;
            (__tmp.197 var=81) bool__lt___sint___sint (__fch_hx.194 __ct_0.76)  <226>;
            (__trgt.573 var=219) const ()  <846>;
            () void_br_bool_t13s_s2 (__tmp.197 __trgt.573)  <847>;
            (__either.574 var=217) undefined ()  <848>;
            if {
                {
                    () if_expr (__either.574)  <250>;
                    () chess_rear_then ()  <849>;
                } #28
                {
                    #75 off=12
                    (__fch_x.221 var=82) load (__M_DMw.4 __adr_x.41 x.71)  <251>;
                    (__fch_x.222 var=83) load (__M_DMw.4 __adr_x.41 x.71)  <252>;
                    (f32_sub.468 var=177) const ()  <612>;
                    (__link.469 var=178) w32_jal_t21s_s2 (f32_sub.468)  <613>;
                    call {
                        (a.470 var=175 stl=X off=11) assign (__fch_x.221)  <614>;
                        (b.471 var=176 stl=X off=12) assign (__fch_x.222)  <615>;
                        (__link.472 var=178 stl=X off=1) assign (__link.469)  <616>;
                        (__tmp.473 var=84 stl=X off=10) Ff32_sub (__link.472 a.470 b.471)  <617>;
                        (__tmp.474 var=84) deassign (__tmp.473)  <618>;
                    } #76 off=13
                    #81 off=14
                    (f32_div.478 var=183) const ()  <625>;
                    (__link.479 var=184) w32_jal_t21s_s2 (f32_div.478)  <626>;
                    call {
                        (a.480 var=181 stl=X off=11) assign (__tmp.474)  <627>;
                        (b.481 var=182 stl=X off=12) assign (__ct_0.76)  <628>;
                        (__link.482 var=184 stl=X off=1) assign (__link.479)  <629>;
                        (__rt.483 var=27 stl=X off=10) Ff32_div (__link.482 a.480 b.481)  <630>;
                        (__rt.484 var=27) deassign (__rt.483)  <631>;
                    } #82 off=15
                    #32 off=16 nxt=-2
                    (__rd___sp.227 var=25) rd_res_reg (__R_SP.11 __sp.37)  <257>;
                    (__tmp.230 var=90) __Pvoid__pl___Pvoid___sint (__rd___sp.227 __ct_24s0.142)  <260>;
                    (__R_SP.231 var=12 __sp.232 var=18) wr_res_reg (__tmp.230 __sp.37)  <261>;
                    () void___rts_jr_w32 (__la.26)  <262>;
                    (__rt.233 var=27 stl=X off=10) assign (__rt.484)  <263>;
                    () out (__rt.233)  <264>;
                    () sink (__sp.232)  <270>;
                    () sink (x.71)  <271>;
                    () sink (hx.75)  <272>;
                    () sink (k.79)  <273>;
                } #29
                {
                } #33 off=11
                {
                } #34
            } #27
            #35 off=17
            (__M_DMw.284 var=5 k.285 var=21) store (__ct_m25.462 __adr_k.51 k.79)  <327>;
            (__ct_m25.462 var=171) const ()  <575>;
            call {
                () chess_separator_scheduler ()  <328>;
            } #36 off=18
            #90 off=19
            (__fch_x.286 var=95) load (__M_DMw.4 __adr_x.41 x.71)  <329>;
            (__ct_1275068416.287 var=96) const ()  <330>;
            (__link.489 var=190) w32_jal_t21s_s2 (f32_mul.488)  <639>;
            call {
                (a.490 var=187 stl=X off=11) assign (__fch_x.286)  <640>;
                (b.491 var=188 stl=X off=12) assign (__ct_1275068416.287)  <641>;
                (__link.492 var=190 stl=X off=1) assign (__link.489)  <642>;
                (__tmp.493 var=98 stl=X off=10) Ff32_mul (__link.492 a.490 b.491)  <643>;
                (__tmp.494 var=98) deassign (__tmp.493)  <644>;
            } #91 off=20
            #87 off=21
            (__M_DMw.290 var=5 x.291 var=19) store (__tmp.494 __adr_x.41 x.71)  <333>;
            call {
                () chess_separator_scheduler ()  <334>;
            } #38 off=22
            #39 off=23
            (__fch_x.292 var=99) load (__M_DMw.4 __adr_x.41 x.291)  <335>;
            (__M_DMw.294 var=5 hx.295 var=20) store (__fch_x.292 __adr_hx.46 hx.75)  <337>;
            (__trgt.577 var=221) const ()  <853>;
            () void_j_t21s_s2 (__trgt.577)  <854>;
        } #12
        {
            (x.302 var=19) merge (x.71 x.291)  <345>;
            (hx.303 var=20) merge (hx.75 hx.295)  <346>;
            (k.304 var=21) merge (k.79 k.285)  <347>;
        } #42
    } #10
    #43 off=25
    (__fch_hx.319 var=101) load (__M_DMw.4 __adr_hx.46 hx.303)  <362>;
    (__ct_2139095040.320 var=102) const ()  <363>;
    (__tmp.322 var=104) bool__ge___sint___sint (__fch_hx.319 __ct_2139095040.320)  <365>;
    (f32_add.498 var=195) const ()  <651>;
    (__trgt.578 var=222) const ()  <855>;
    () void_br_bool_t13s_s2 (__tmp.322 __trgt.578)  <856>;
    (__either.579 var=217) undefined ()  <857>;
    if {
        {
            () if_expr (__either.579)  <389>;
        } #45
        {
            #99 off=53
            (__fch_x.346 var=105) load (__M_DMw.4 __adr_x.41 x.302)  <390>;
            (__fch_x.347 var=106) load (__M_DMw.4 __adr_x.41 x.302)  <391>;
            (__link.499 var=196) w32_jal_t21s_s2 (f32_add.498)  <652>;
            call {
                (a.500 var=193 stl=X off=11) assign (__fch_x.346)  <653>;
                (b.501 var=194 stl=X off=12) assign (__fch_x.347)  <654>;
                (__link.502 var=196 stl=X off=1) assign (__link.499)  <655>;
                (__rt.503 var=27 stl=X off=10) Ff32_add (__link.502 a.500 b.501)  <656>;
                (__rt.504 var=27) deassign (__rt.503)  <657>;
            } #100 off=54
        } #46
        {
            #50 off=26
            (__fch_k.349 var=108) load (__M_DMw.4 __adr_k.51 k.304)  <394>;
            (__fch_hx.350 var=109) load (__M_DMw.4 __adr_hx.46 hx.303)  <395>;
            (__ct_23.351 var=110) const ()  <396>;
            (__tmp.353 var=112) __sint__rs___sint___sint (__fch_hx.350 __ct_23.351)  <398>;
            (__tmp.356 var=115) __sint__pl___sint___sint (__tmp.353 __ct_m127.463)  <401>;
            (__tmp.357 var=116) __sint__pl___sint___sint (__fch_k.349 __tmp.356)  <402>;
            (__M_DMw.358 var=5 k.359 var=21) store (__tmp.357 __adr_k.51 k.304)  <403>;
            (__ct_m127.463 var=172) const ()  <577>;
            call {
                () chess_separator_scheduler ()  <404>;
            } #51 off=27
            #52 off=28
            (__ct_12t0.54 var=45) const ()  <65>;
            (__adr_i.56 var=47) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_12t0.54)  <67>;
            (__fch_k.360 var=117) load (__M_DMw.4 __adr_k.51 k.359)  <405>;
            (__ct_2147483648.362 var=119) const ()  <407>;
            (__tmp.364 var=121) __uint__ad___uint___uint (__fch_k.360 __ct_2147483648.362)  <409>;
            (__ct_31.365 var=122) const ()  <410>;
            (__tmp.367 var=124) __uint__rs___uint___sint (__tmp.364 __ct_31.365)  <412>;
            (__M_DMw.369 var=5 i.370 var=22) store (__tmp.367 __adr_i.56 i.21)  <414>;
            call {
                () chess_separator_scheduler ()  <415>;
            } #53 off=29
            #54 off=30
            (__ct_127.354 var=113) const ()  <399>;
            (__fch_hx.371 var=126) load (__M_DMw.4 __adr_hx.46 hx.303)  <416>;
            (__ct_8388607.372 var=127) const ()  <417>;
            (__tmp.374 var=129) __sint__ad___sint___sint (__fch_hx.371 __ct_8388607.372)  <419>;
            (__fch_i.377 var=132) load (__M_DMw.4 __adr_i.56 i.370)  <422>;
            (__tmp.378 var=133) __sint__mi___sint___sint (__ct_127.354 __fch_i.377)  <423>;
            (__tmp.381 var=136) __sint__ls___sint___sint (__tmp.378 __ct_23.351)  <426>;
            (__tmp.382 var=137) __sint__or___sint___sint (__tmp.374 __tmp.381)  <427>;
            (__M_DMw.383 var=5 hx.384 var=20) store (__tmp.382 __adr_hx.46 hx.303)  <428>;
            call {
                () chess_separator_scheduler ()  <429>;
            } #55 off=31
            #110 off=32
            (__fch_k.385 var=138) load (__M_DMw.4 __adr_k.51 k.359)  <430>;
            (__fch_i.386 var=139) load (__M_DMw.4 __adr_i.56 i.370)  <431>;
            (__tmp.387 var=140) __sint__pl___sint___sint (__fch_k.385 __fch_i.386)  <432>;
            (i32_to_f32.507 var=200) const ()  <663>;
            (__link.508 var=201) w32_jal_t21s_s2 (i32_to_f32.507)  <664>;
            call {
                (a.509 var=199 stl=X off=11) assign (__tmp.387)  <665>;
                (__link.510 var=201 stl=X off=1) assign (__link.508)  <666>;
                (__tmp.511 var=141 stl=X off=10) Fi32_to_f32 (__link.510 a.509)  <667>;
                (__tmp.512 var=141) deassign (__tmp.511)  <668>;
            } #111 off=33
            #107 off=34
            (__ct_4t0.59 var=49) const ()  <70>;
            (__adr_y.61 var=51) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_4t0.59)  <72>;
            (__M_DMw.389 var=5 y.390 var=23) store (__tmp.512 __adr_y.61 y.22)  <434>;
            call {
                () chess_separator_scheduler ()  <435>;
            } #57 off=35
            #58 off=36
            (__fch_hx.391 var=142) load (__M_DMw.4 __adr_hx.46 hx.384)  <436>;
            (__M_DMw.393 var=5 x.394 var=19) store (__fch_hx.391 __adr_x.41 x.302)  <438>;
            call {
                () chess_separator_scheduler ()  <439>;
            } #59 off=37
            #120 off=38
            (__fch_y.395 var=144) load (__M_DMw.4 __adr_y.61 y.390)  <440>;
            (__ct_894707675.396 var=145) const ()  <441>;
            (__link.517 var=190) w32_jal_t21s_s2 (f32_mul.488)  <676>;
            call {
                (a.518 var=187 stl=X off=11) assign (__fch_y.395)  <677>;
                (b.519 var=188 stl=X off=12) assign (__ct_894707675.396)  <678>;
                (__link.520 var=190 stl=X off=1) assign (__link.517)  <679>;
                (__tmp.521 var=147 stl=X off=10) Ff32_mul (__link.520 a.518 b.519)  <680>;
                (__tmp.522 var=147) deassign (__tmp.521)  <681>;
            } #121 off=39
            #117 off=40
            (__fch_x.401 var=150) load (__M_DMw.4 __adr_x.41 x.394)  <446>;
            (logf.405 var=153) const ()  <450>;
            (__link.406 var=154) w32_jal_t21s_s2 (logf.405)  <451>;
            call {
                (__fch_x.402 var=150 stl=X off=11) assign (__fch_x.401)  <447>;
                (__link.407 var=154 stl=X off=1) assign (__link.406)  <452>;
                (__tmp.408 var=155 stl=X off=10) Flogf (__link.407 __fch_x.402)  <453>;
                (__tmp.409 var=155) deassign (__tmp.408)  <454>;
            } #61 off=41
            #129 off=42
            (__ct_1054759897.399 var=148) const ()  <444>;
            (__link.527 var=190) w32_jal_t21s_s2 (f32_mul.488)  <689>;
            call {
                (a.528 var=187 stl=X off=11) assign (__ct_1054759897.399)  <690>;
                (b.529 var=188 stl=X off=12) assign (__tmp.409)  <691>;
                (__link.530 var=190 stl=X off=1) assign (__link.527)  <692>;
                (__tmp.531 var=156 stl=X off=10) Ff32_mul (__link.530 a.528 b.529)  <693>;
                (__tmp.532 var=156) deassign (__tmp.531)  <694>;
            } #130 off=43
            #135 off=44
            (__link.537 var=196) w32_jal_t21s_s2 (f32_add.498)  <702>;
            call {
                (a.538 var=193 stl=X off=11) assign (__tmp.522)  <703>;
                (b.539 var=194 stl=X off=12) assign (__tmp.532)  <704>;
                (__link.540 var=196 stl=X off=1) assign (__link.537)  <705>;
                (__tmp.541 var=157 stl=X off=10) Ff32_add (__link.540 a.538 b.539)  <706>;
                (__tmp.542 var=157) deassign (__tmp.541)  <707>;
            } #136 off=45
            #126 off=46
            (__ct_8t0.64 var=53) const ()  <75>;
            (__adr_z.66 var=55) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_8t0.64)  <77>;
            (__M_DMw.413 var=5 z.414 var=24) store (__tmp.542 __adr_z.66 z.23)  <458>;
            call {
                () chess_separator_scheduler ()  <459>;
            } #63 off=47
            #145 off=48
            (__fch_z.415 var=158) load (__M_DMw.4 __adr_z.66 z.414)  <460>;
            (__fch_y.416 var=159) load (__M_DMw.4 __adr_y.61 y.390)  <461>;
            (__ct_1050288256.417 var=160) const ()  <462>;
            (__link.547 var=190) w32_jal_t21s_s2 (f32_mul.488)  <715>;
            call {
                (a.548 var=187 stl=X off=11) assign (__fch_y.416)  <716>;
                (b.549 var=188 stl=X off=12) assign (__ct_1050288256.417)  <717>;
                (__link.550 var=190 stl=X off=1) assign (__link.547)  <718>;
                (__tmp.551 var=162 stl=X off=10) Ff32_mul (__link.550 a.548 b.549)  <719>;
                (__tmp.552 var=162) deassign (__tmp.551)  <720>;
            } #146 off=49
            #151 off=50
            (__link.557 var=196) w32_jal_t21s_s2 (f32_add.498)  <728>;
            call {
                (a.558 var=193 stl=X off=11) assign (__fch_z.415)  <729>;
                (b.559 var=194 stl=X off=12) assign (__tmp.552)  <730>;
                (__link.560 var=196 stl=X off=1) assign (__link.557)  <731>;
                (__rt.561 var=27 stl=X off=10) Ff32_add (__link.560 a.558 b.559)  <732>;
                (__rt.562 var=27) deassign (__rt.561)  <733>;
            } #152 off=51
            #158 off=52
            (__trgt.580 var=223) const ()  <858>;
            () void_j_t21s_s2 (__trgt.580)  <859>;
        } #49
        {
            (x.421 var=19) merge (x.302 x.394)  <467>;
            (hx.422 var=20) merge (hx.303 hx.384)  <468>;
            (k.423 var=21) merge (k.304 k.359)  <469>;
            (i.424 var=22) merge (i.21 i.370)  <470>;
            (y.425 var=23) merge (y.22 y.390)  <471>;
            (z.426 var=24) merge (z.23 z.414)  <472>;
            (__rt.427 var=27) merge (__rt.504 __rt.562)  <473>;
        } #66
    } #44
    #68 off=55 nxt=-2
    (__rd___sp.428 var=25) rd_res_reg (__R_SP.11 __sp.37)  <474>;
    (__tmp.431 var=166) __Pvoid__pl___Pvoid___sint (__rd___sp.428 __ct_24s0.142)  <477>;
    (__R_SP.432 var=12 __sp.433 var=18) wr_res_reg (__tmp.431 __sp.37)  <478>;
    () void___rts_jr_w32 (__la.26)  <479>;
    (__rt.434 var=27 stl=X off=10) assign (__rt.427)  <480>;
    () out (__rt.434)  <481>;
    () sink (__sp.433)  <487>;
    () sink (x.421)  <488>;
    () sink (hx.422)  <489>;
    () sink (k.423)  <490>;
    () sink (i.424)  <491>;
    () sink (y.425)  <492>;
    () sink (z.426)  <493>;
} #0
0 : 'src/math.c';
----------
0 : (0,1161:0,0);
3 : (0,1161:13,0);
4 : (0,1161:13,0);
5 : (0,1173:4,6);
6 : (0,1173:4,6);
7 : (0,1175:5,8);
8 : (0,1175:5,8);
9 : (0,1176:11,8);
10 : (0,1176:4,8);
12 : (0,1176:25,9);
13 : (0,1177:27,9);
14 : (0,1177:8,9);
23 : (0,1178:12,18);
24 : (0,1177:8,22);
26 : (0,1179:14,25);
27 : (0,1179:8,25);
29 : (0,1179:18,26);
32 : (0,1179:18,26);
33 : (0,1179:8,29);
35 : (0,1180:10,33);
36 : (0,1180:10,33);
38 : (0,1180:19,34);
39 : (0,1181:4,35);
41 : (0,1176:4,38);
43 : (0,1183:11,41);
44 : (0,1183:4,41);
46 : (0,1183:26,42);
49 : (0,1183:26,44);
50 : (0,1184:6,46);
51 : (0,1184:6,46);
52 : (0,1185:7,47);
53 : (0,1185:7,47);
54 : (0,1186:7,48);
55 : (0,1186:7,48);
57 : (0,1187:7,49);
58 : (0,1188:3,50);
59 : (0,1188:3,50);
61 : (0,1189:30,50);
63 : (0,1189:7,51);
68 : (0,1190:4,56);
75 : (0,1179:27,26);
76 : (0,1179:27,26);
81 : (0,1179:30,26);
82 : (0,1179:30,26);
87 : (0,1180:17,33);
90 : (0,1180:19,33);
91 : (0,1180:19,33);
99 : (0,1183:34,42);
100 : (0,1183:34,42);
107 : (0,1187:4,48);
110 : (0,1187:9,48);
111 : (0,1187:9,48);
117 : (0,1189:30,50);
120 : (0,1189:10,50);
121 : (0,1189:10,50);
126 : (0,1189:4,50);
129 : (0,1189:29,50);
130 : (0,1189:29,50);
135 : (0,1189:21,50);
136 : (0,1189:21,50);
145 : (0,1190:15,51);
146 : (0,1190:15,51);
151 : (0,1190:13,51);
152 : (0,1190:13,51);
----------
43 : (0,1161:6,0);
44 : (0,1161:6,0);
46 : (0,1161:6,0);
47 : (0,1161:6,0);
49 : (0,1161:19,0);
50 : (0,1161:19,0);
52 : (0,1161:19,0);
54 : (0,1171:16,0);
55 : (0,1171:16,0);
57 : (0,1171:16,0);
59 : (0,1171:14,0);
60 : (0,1171:14,0);
62 : (0,1171:14,0);
64 : (0,1171:12,0);
65 : (0,1171:12,0);
67 : (0,1171:12,0);
69 : (0,1170:10,0);
70 : (0,1170:10,0);
72 : (0,1170:10,0);
74 : (0,1170:12,0);
75 : (0,1170:12,0);
77 : (0,1170:12,0);
81 : (0,1161:13,0);
82 : (0,1161:13,0);
83 : (0,1173:15,5);
85 : (0,1173:1,5);
86 : (0,1173:4,6);
87 : (0,1175:6,0);
89 : (0,1175:4,7);
90 : (0,1175:5,8);
91 : (0,1176:8,8);
92 : (0,1176:13,0);
118 : (0,1176:4,8);
119 : (0,1177:13,9);
120 : (0,1177:16,0);
122 : (0,1177:15,9);
125 : (0,1177:27,9);
149 : (0,1177:8,9);
153 : (0,1178:19,0);
157 : (0,1178:12,0);
158 : (0,1178:12,0);
160 : (0,1178:12,0);
161 : (0,1178:12,18);
162 : (0,1178:12,18);
163 : (0,1178:32,0);
223 : (0,1179:12,25);
226 : (0,1179:14,25);
250 : (0,1179:8,25);
251 : (0,1179:26,26);
252 : (0,1179:28,26);
257 : (0,1179:18,0);
260 : (0,1179:18,0);
261 : (0,1179:18,26);
262 : (0,1179:18,26);
263 : (0,1179:30,0);
327 : (0,1180:8,32);
328 : (0,1180:10,33);
329 : (0,1180:17,33);
330 : (0,1180:22,0);
333 : (0,1180:17,33);
334 : (0,1180:19,34);
335 : (0,1181:15,34);
337 : (0,1181:1,34);
345 : (0,1176:4,40);
346 : (0,1176:4,40);
347 : (0,1176:4,40);
362 : (0,1183:8,41);
363 : (0,1183:14,0);
365 : (0,1183:11,41);
389 : (0,1183:4,41);
390 : (0,1183:33,42);
391 : (0,1183:35,42);
394 : (0,1184:4,45);
395 : (0,1184:10,45);
396 : (0,1184:14,0);
398 : (0,1184:12,45);
399 : (0,1184:18,0);
401 : (0,1184:17,45);
402 : (0,1184:6,45);
403 : (0,1184:4,45);
404 : (0,1184:6,46);
405 : (0,1185:21,46);
407 : (0,1185:23,0);
409 : (0,1185:22,46);
410 : (0,1185:36,0);
412 : (0,1185:34,46);
414 : (0,1185:4,46);
415 : (0,1185:7,47);
416 : (0,1186:10,47);
417 : (0,1186:13,0);
419 : (0,1186:12,47);
422 : (0,1186:32,47);
423 : (0,1186:31,47);
426 : (0,1186:34,47);
427 : (0,1186:24,47);
428 : (0,1186:4,47);
429 : (0,1186:7,48);
430 : (0,1187:17,48);
431 : (0,1187:19,48);
432 : (0,1187:18,48);
434 : (0,1187:4,48);
435 : (0,1187:7,49);
436 : (0,1188:14,49);
438 : (0,1188:1,49);
439 : (0,1188:3,50);
440 : (0,1189:9,50);
441 : (0,1189:11,0);
444 : (0,1189:23,0);
446 : (0,1189:35,50);
447 : (0,1189:35,0);
451 : (0,1189:30,50);
452 : (0,1189:30,0);
453 : (0,1189:30,50);
458 : (0,1189:4,50);
459 : (0,1189:7,51);
460 : (0,1190:12,51);
461 : (0,1190:14,51);
462 : (0,1190:16,0);
467 : (0,1183:4,54);
468 : (0,1183:4,54);
469 : (0,1183:4,54);
470 : (0,1183:4,54);
471 : (0,1183:4,54);
472 : (0,1183:4,54);
473 : (0,1183:4,54);
474 : (0,1190:4,0);
477 : (0,1190:4,0);
478 : (0,1190:4,56);
479 : (0,1190:4,56);
480 : (0,1190:4,0);
575 : (0,1180:10,0);
577 : (0,1184:17,0);
612 : (0,1179:27,0);
613 : (0,1179:27,26);
614 : (0,1179:27,26);
615 : (0,1179:27,26);
616 : (0,1179:27,26);
617 : (0,1179:27,26);
618 : (0,1179:27,26);
625 : (0,1179:30,0);
626 : (0,1179:30,26);
627 : (0,1179:30,26);
628 : (0,1179:30,26);
629 : (0,1179:30,26);
630 : (0,1179:30,26);
631 : (0,1179:30,26);
638 : (0,1180:19,0);
639 : (0,1180:19,33);
640 : (0,1180:19,33);
641 : (0,1180:19,33);
642 : (0,1180:19,33);
643 : (0,1180:19,33);
644 : (0,1180:19,33);
651 : (0,1183:34,0);
652 : (0,1183:34,42);
653 : (0,1183:34,42);
654 : (0,1183:34,42);
655 : (0,1183:34,42);
656 : (0,1183:34,42);
657 : (0,1183:34,42);
663 : (0,1187:9,0);
664 : (0,1187:9,48);
665 : (0,1187:9,48);
666 : (0,1187:9,48);
667 : (0,1187:9,48);
668 : (0,1187:9,48);
676 : (0,1189:10,50);
677 : (0,1189:10,50);
678 : (0,1189:10,50);
679 : (0,1189:10,50);
680 : (0,1189:10,50);
681 : (0,1189:10,50);
689 : (0,1189:29,50);
690 : (0,1189:29,50);
691 : (0,1189:29,50);
692 : (0,1189:29,50);
693 : (0,1189:29,50);
694 : (0,1189:29,50);
702 : (0,1189:21,50);
703 : (0,1189:21,50);
704 : (0,1189:21,50);
705 : (0,1189:21,50);
706 : (0,1189:21,50);
707 : (0,1189:21,50);
715 : (0,1190:15,51);
716 : (0,1190:15,51);
717 : (0,1190:15,51);
718 : (0,1190:15,51);
719 : (0,1190:15,51);
720 : (0,1190:15,51);
728 : (0,1190:13,51);
729 : (0,1190:13,51);
730 : (0,1190:13,51);
731 : (0,1190:13,51);
732 : (0,1190:13,51);
733 : (0,1190:13,51);
807 : (0,1176:11,8);
843 : (0,1177:8,9);
847 : (0,1179:8,25);
851 : (0,1176:4,8);
856 : (0,1183:4,41);

