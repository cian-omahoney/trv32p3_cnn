
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:30:50 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/clib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline int ispunct(int)
Fispunct : user_defined, called {
    fnm : "ispunct" 'int ispunct(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=4 );
}
****
***/

[
    0 : ispunct typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : c typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   20 : _ct_code typ=w08 bnd=e algn=1 stl=DMb
   22 : __rd___sp typ=w32 bnd=m
   24 : __ptr__ct_code typ=w32 val=0a bnd=m adro=20
   25 : __la typ=w32 bnd=p tref=w32__
   27 : __arg_c typ=w32 bnd=p tref=__sint__
   28 : __ct_m4S0 typ=w32 val=-4S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   32 : __ct_0t0 typ=w32 val=0t0 bnd=m
   34 : __adr_c typ=w32 bnd=m adro=19
   35 : __tmpb0_Fispunct typ=w32 bnd=m tref=__sint__
   36 : __tmpb1_Fispunct typ=__uchar bnd=m tref=__uchar__
   38 : __fch_c typ=w32 bnd=m
   43 : __tmp typ=w32 bnd=m
   44 : __fch__ct_code typ=__uchar bnd=m
   46 : __ct_16 typ=w32 val=16f bnd=m
   48 : __tmp typ=w32 bnd=m
   50 : __ct_4s0 typ=w32 val=4s0 bnd=m
   52 : __tmp typ=w32 bnd=m
]
Fispunct {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (c.18 var=19) source ()  <29>;
    (_ct_code.19 var=20) source ()  <30>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (__arg_c.28 var=27 stl=X off=11) inp ()  <39>;
    (__arg_c.29 var=27) deassign (__arg_c.28)  <40>;
    (__rd___sp.31 var=22) rd_res_reg (__R_SP.11 __sp.17)  <42>;
    (__ct_m4S0.32 var=28) const ()  <43>;
    (__tmp.34 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.31 __ct_m4S0.32)  <45>;
    (__R_SP.35 var=12 __sp.36 var=18) wr_res_reg (__tmp.34 __sp.17)  <46>;
    (__rd___sp.37 var=22) rd_res_reg (__R_SP.11 __sp.36)  <48>;
    (__ct_0t0.38 var=32) const ()  <49>;
    (__adr_c.40 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_0t0.38)  <51>;
    (__M_DMw.45 var=5 c.46 var=19) store (__arg_c.29 __adr_c.40 c.18)  <56>;
    call {
        () chess_separator_scheduler ()  <59>;
    } #6 off=1
    #7 off=2
    (__fch_c.49 var=38) load (__M_DMw.4 __adr_c.40 c.46)  <61>;
    (__tmpb1_Fispunct.50 var=36) __uchar___uchar___sint (__fch_c.49)  <62>;
    call {
        () chess_separator_scheduler ()  <65>;
    } #10 off=3
    #15 off=4
    (__ptr__ct_code.22 var=24) const ()  <33>;
    (__tmp.72 var=43) __Pvoid__pl___Pvoid___sint (__ptr__ct_code.22 __tmpb1_Fispunct.50)  <87>;
    (__fch__ct_code.73 var=44) load (__M_DMb.2 __tmp.72 _ct_code.19)  <88>;
    (__ct_16.75 var=46) const ()  <90>;
    (__tmp.77 var=48) __uint__ad___uint___uint (__fch__ct_code.73 __ct_16.75)  <92>;
    call {
        () chess_separator_scheduler ()  <96>;
    } #19 off=5
    #21 off=6 nxt=-2
    (__rd___sp.80 var=22) rd_res_reg (__R_SP.11 __sp.36)  <97>;
    (__ct_4s0.81 var=50) const ()  <98>;
    (__tmp.83 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.80 __ct_4s0.81)  <100>;
    (__R_SP.84 var=12 __sp.85 var=18) wr_res_reg (__tmp.83 __sp.36)  <101>;
    () void___rts_jr_w32 (__la.25)  <102>;
    (__tmpb0_Fispunct.86 var=35 stl=X off=10) assign (__tmp.77)  <103>;
    () out (__tmpb0_Fispunct.86)  <104>;
    () sink (__sp.85)  <110>;
    () sink (c.46)  <111>;
} #0
0 : 'include/ctype.h';
----------
0 : (0,61:19,0);
3 : (0,61:19,0);
6 : (0,61:35,3);
7 : (0,61:45,4);
10 : (0,61:35,6);
15 : (0,61:35,10);
19 : (0,61:35,18);
21 : (0,61:28,20);
----------
42 : (0,61:19,0);
43 : (0,61:19,0);
45 : (0,61:19,0);
46 : (0,61:19,0);
48 : (0,61:23,0);
49 : (0,61:23,0);
51 : (0,61:23,0);
56 : (0,61:19,0);
59 : (0,61:35,3);
61 : (0,61:44,4);
62 : (0,61:45,4);
65 : (0,61:35,6);
87 : (0,61:35,9);
88 : (0,61:35,9);
90 : (0,61:35,0);
92 : (0,61:35,9);
96 : (0,61:35,18);
97 : (0,61:28,0);
98 : (0,61:28,0);
100 : (0,61:28,0);
101 : (0,61:28,20);
102 : (0,61:28,20);
103 : (0,61:43,0);

