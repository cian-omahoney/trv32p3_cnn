
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:58:54 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  size_t strlen(const char *)
Fstrlen : user_defined, called {
    fnm : "strlen" 'size_t strlen(const char *)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=8 );
}
****
***/

[
    0 : strlen typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   20 : r typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   23 : __rt typ=w32 bnd=p tref=size_t__
   24 : __arg_s typ=w32 bnd=p tref=__P__cchar__
   25 : __ct_m8S0 typ=w32 val=-8S0 bnd=m
   27 : __tmp typ=w32 bnd=m
   29 : __ct_0t0 typ=w32 val=0t0 bnd=m
   31 : __adr_s typ=w32 bnd=m adro=19
   33 : __ct_4t0 typ=w32 val=4t0 bnd=m
   35 : __adr_r typ=w32 bnd=m adro=20
   37 : __fch_s typ=w32 bnd=m
   38 : __fch_r typ=w32 bnd=m
   39 : __ct_1 typ=w32 val=1f bnd=m
   42 : __fch___extDMb typ=w08 bnd=m
   44 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   46 : __tmp typ=bool bnd=m
   47 : __fch_r typ=w32 bnd=m
   51 : __fch___extDMb typ=w08 bnd=m
   55 : __tmp typ=bool bnd=m
   56 : __fch_r typ=w32 bnd=m
   59 : __tmp typ=w32 bnd=m
   60 : __fch_s typ=w32 bnd=m
   61 : __tmp typ=w32 bnd=m
   63 : __ct_8s0 typ=w32 val=8s0 bnd=m
   65 : __tmp typ=w32 bnd=m
   72 : __ct_m1 typ=w32 val=-1f bnd=m
   73 : __shv___fch_r typ=w32 bnd=m
   74 : __shv___fch_r typ=w32 bnd=m
   83 : __either typ=bool bnd=m
   84 : __trgt typ=t13s_s2 val=0j bnd=m
   85 : __trgt typ=t13s_s2 val=0j bnd=m
   86 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrlen {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (s.18 var=19) source ()  <29>;
    (r.19 var=20) source ()  <30>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (__arg_s.25 var=24 stl=X off=11) inp ()  <36>;
    (__arg_s.26 var=24) deassign (__arg_s.25)  <37>;
    (__rd___sp.28 var=21) rd_res_reg (__R_SP.11 __sp.17)  <39>;
    (__ct_m8S0.29 var=25) const ()  <40>;
    (__tmp.31 var=27) __Pvoid__pl___Pvoid___sint (__rd___sp.28 __ct_m8S0.29)  <42>;
    (__R_SP.32 var=12 __sp.33 var=18) wr_res_reg (__tmp.31 __sp.17)  <43>;
    (__rd___sp.34 var=21) rd_res_reg (__R_SP.11 __sp.33)  <45>;
    (__ct_0t0.35 var=29) const ()  <46>;
    (__adr_s.37 var=31) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_0t0.35)  <48>;
    (__rd___sp.39 var=21) rd_res_reg (__R_SP.11 __sp.33)  <50>;
    (__M_DMw.45 var=5 s.46 var=19) store (__arg_s.26 __adr_s.37 s.18)  <56>;
    call {
        () chess_separator_scheduler ()  <57>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.40 var=33) const ()  <51>;
    (__adr_r.42 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_4t0.40)  <53>;
    (__fch_s.47 var=37) load (__M_DMw.4 __adr_s.37 s.46)  <58>;
    (__M_DMw.48 var=5 r.49 var=20) store (__fch_s.47 __adr_r.42 r.19)  <59>;
    call {
        () chess_separator_scheduler ()  <60>;
    } #6 off=3
    #7 off=4
    (__fch_r.50 var=38) load (__M_DMw.4 __adr_r.42 r.49)  <61>;
    call {
        () chess_separator_scheduler ()  <62>;
    } #8 off=5
    #9 off=6
    (__ct_1.51 var=39) const ()  <63>;
    (__M_DMw.54 var=5 r.55 var=20) store (__shv___fch_r.164 __adr_r.42 r.49)  <66>;
    (__shv___fch_r.164 var=74) __Pvoid__pl___Pvoid___sint (__fch_r.50 __ct_1.51)  <192>;
    call {
        () chess_separator_scheduler ()  <67>;
    } #10 off=7
    #11 off=8
    (__fch___extDMb.56 var=42) load (__M_DMb.2 __fch_r.50 __extDMb.16)  <68>;
    (__ct_0.58 var=44) const ()  <70>;
    (__tmp.170 var=46) bool__eq___sint___sint (__fch___extDMb.56 __ct_0.58)  <216>;
    (__trgt.175 var=85) const ()  <231>;
    () void_br_bool_t13s_s2 (__tmp.170 __trgt.175)  <232>;
    (__either.176 var=83) undefined ()  <233>;
    if {
        {
            () if_expr (__either.176)  <87>;
            () chess_frequent_else ()  <88>;
            () chess_rear_then ()  <234>;
        } #13
        {
            (__trgt.177 var=86) const ()  <235>;
            () void_j_t21s_s2 (__trgt.177)  <236>;
        } #24 off=16
        {
            #99 off=9
            (__trgt.173 var=84) const ()  <228>;
            do {
                {
                    (r.82 var=20) entry (r.114 r.55)  <96>;
                } #16
                {
                    #18 off=10
                    (__fch_r.89 var=47) load (__M_DMw.4 __adr_r.42 r.82)  <103>;
                    call {
                        () chess_separator_scheduler ()  <104>;
                    } #19 off=11
                    #20 off=12
                    (__M_DMw.93 var=5 r.94 var=20) store (__shv___fch_r.163 __adr_r.42 r.82)  <108>;
                    (__shv___fch_r.163 var=73) __Pvoid__pl___Pvoid___sint (__fch_r.89 __ct_1.51)  <191>;
                    call {
                        () chess_separator_scheduler ()  <109>;
                    } #21 off=13
                    #22 off=14
                    (__fch___extDMb.95 var=51) load (__M_DMb.2 __fch_r.89 __extDMb.16)  <110>;
                    (__tmp.99 var=55) bool__ne___sint___sint (__fch___extDMb.95 __ct_0.58)  <114>;
                    () void_br_bool_t13s_s2 (__tmp.99 __trgt.173)  <229>;
                    (__either.174 var=83) undefined ()  <230>;
                } #17
                {
                    () while_expr (__either.174)  <115>;
                    (r.114 var=20 r.115 var=20) exit (r.94)  <123>;
                } #23
            } #15 rng=[1,2147483647]
        } #14
        {
            (r.128 var=20) merge (r.55 r.115)  <130>;
        } #25
    } #12
    #28 off=17 nxt=-2
    (__fch_r.130 var=56) load (__M_DMw.4 __adr_r.42 r.128)  <132>;
    (__tmp.133 var=59) __Pvoid__pl___Pvoid___sint (__fch_r.130 __ct_m1.162)  <135>;
    (__fch_s.134 var=60) load (__M_DMw.4 __adr_s.37 s.46)  <136>;
    (__tmp.135 var=61) __sint__mi___Pvoid___Pvoid (__tmp.133 __fch_s.134)  <137>;
    (__rd___sp.137 var=21) rd_res_reg (__R_SP.11 __sp.33)  <139>;
    (__ct_8s0.138 var=63) const ()  <140>;
    (__tmp.140 var=65) __Pvoid__pl___Pvoid___sint (__rd___sp.137 __ct_8s0.138)  <142>;
    (__R_SP.141 var=12 __sp.142 var=18) wr_res_reg (__tmp.140 __sp.33)  <143>;
    () void___rts_jr_w32 (__la.22)  <144>;
    (__rt.143 var=23 stl=X off=10) assign (__tmp.135)  <145>;
    () out (__rt.143)  <146>;
    () sink (__sp.142)  <152>;
    () sink (s.46)  <153>;
    () sink (r.128)  <154>;
    (__ct_m1.162 var=72) const ()  <189>;
} #0
0 : 'src/string.c';
----------
0 : (0,335:0,0);
3 : (0,335:14,0);
4 : (0,335:14,0);
5 : (0,337:20,2);
6 : (0,337:20,2);
7 : (0,338:4,4);
8 : (0,338:4,4);
9 : (0,338:4,5);
10 : (0,338:4,5);
11 : (0,338:4,5);
12 : (0,338:4,5);
14 : (0,338:4,6);
15 : (0,338:4,6);
17 : (0,338:16,6);
18 : (0,338:13,8);
19 : (0,338:13,8);
20 : (0,338:13,9);
21 : (0,338:13,9);
22 : (0,338:4,9);
24 : (0,338:4,11);
28 : (0,339:4,14);
----------
39 : (0,335:7,0);
40 : (0,335:7,0);
42 : (0,335:7,0);
43 : (0,335:7,0);
45 : (0,335:26,0);
46 : (0,335:26,0);
48 : (0,335:26,0);
50 : (0,337:16,0);
51 : (0,337:16,0);
53 : (0,337:16,0);
56 : (0,335:14,0);
57 : (0,335:14,0);
58 : (0,337:20,2);
59 : (0,337:20,2);
60 : (0,337:20,2);
61 : (0,338:4,3);
62 : (0,338:4,4);
63 : (0,338:4,0);
66 : (0,338:4,4);
67 : (0,338:4,5);
68 : (0,338:4,5);
70 : (0,338:4,0);
87 : (0,338:4,5);
96 : (0,338:4,6);
103 : (0,338:12,7);
104 : (0,338:13,8);
108 : (0,338:12,8);
109 : (0,338:13,9);
110 : (0,338:11,9);
114 : (0,338:4,9);
115 : (0,338:4,9);
123 : (0,338:4,9);
130 : (0,338:4,13);
132 : (0,339:12,14);
135 : (0,339:14,14);
136 : (0,339:21,14);
137 : (0,339:19,14);
139 : (0,339:4,0);
140 : (0,339:4,0);
142 : (0,339:4,0);
143 : (0,339:4,14);
144 : (0,339:4,14);
145 : (0,339:19,0);
189 : (0,339:14,0);
191 : (0,338:13,0);
192 : (0,338:4,0);
216 : (0,338:4,5);
229 : (0,338:4,9);
232 : (0,338:4,5);

