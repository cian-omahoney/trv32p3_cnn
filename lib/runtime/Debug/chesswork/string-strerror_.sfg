
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 16:33:38 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strerror(int)
Fstrerror : user_defined, called {
    fnm : "strerror" 'char *strerror(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=4 );
}
****
***/

[
    0 : strerror typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : errnum typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   20 : _ZL13__str0001003f typ=w08 bnd=i sz=1 algn=1 stl=DMb tref=__A1__cchar_DMb
   21 : __rd___sp typ=w32 bnd=m
   23 : __ptr___str0001003f typ=w32 val=0a bnd=m adro=20
   24 : __la typ=w32 bnd=p tref=w32__
   25 : __rt typ=w32 bnd=p tref=__P__cchar__
   26 : __arg_errnum typ=w32 bnd=p tref=__sint__
   27 : __ct_m4S0 typ=w32 val=-4S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   31 : __ct_0t0 typ=w32 val=0t0 bnd=m
   33 : __adr_errnum typ=w32 bnd=m adro=19
   36 : __ct_4s0 typ=w32 val=4s0 bnd=m
   38 : __tmp typ=w32 bnd=m
]
Fstrerror {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (errnum.18 var=19) source ()  <29>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (__arg_errnum.27 var=26 stl=X off=11) inp ()  <38>;
    (__arg_errnum.28 var=26) deassign (__arg_errnum.27)  <39>;
    (__rd___sp.30 var=21) rd_res_reg (__R_SP.11 __sp.17)  <41>;
    (__ct_m4S0.31 var=27) const ()  <42>;
    (__tmp.33 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.30 __ct_m4S0.31)  <44>;
    (__R_SP.34 var=12 __sp.35 var=18) wr_res_reg (__tmp.33 __sp.17)  <45>;
    (__rd___sp.36 var=21) rd_res_reg (__R_SP.11 __sp.35)  <47>;
    (__ct_0t0.37 var=31) const ()  <48>;
    (__adr_errnum.39 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0t0.37)  <50>;
    (__M_DMw.41 var=5 errnum.42 var=19) store (__arg_errnum.28 __adr_errnum.39 errnum.18)  <52>;
    call {
        () chess_separator_scheduler ()  <56>;
    } #6 off=1
    #8 off=2 nxt=-2
    (__ptr___str0001003f.21 var=23) const ()  <32>;
    (__rd___sp.45 var=21) rd_res_reg (__R_SP.11 __sp.35)  <57>;
    (__ct_4s0.46 var=36) const ()  <58>;
    (__tmp.48 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_4s0.46)  <60>;
    (__R_SP.49 var=12 __sp.50 var=18) wr_res_reg (__tmp.48 __sp.35)  <61>;
    () void___rts_jr_w32 (__la.24)  <62>;
    (__rt.51 var=25 stl=X off=10) assign (__ptr___str0001003f.21)  <63>;
    () out (__rt.51)  <64>;
    () sink (__sp.50)  <70>;
    () sink (errnum.42)  <71>;
} #0
0 : 'src/string.c';
----------
0 : (0,329:0,0);
3 : (0,329:15,0);
6 : (0,331:4,3);
8 : (0,332:4,3);
----------
32 : (0,332:18,0);
41 : (0,329:6,0);
42 : (0,329:6,0);
44 : (0,329:6,0);
45 : (0,329:6,0);
47 : (0,329:19,0);
48 : (0,329:19,0);
50 : (0,329:19,0);
52 : (0,329:15,0);
56 : (0,331:4,3);
57 : (0,332:4,0);
58 : (0,332:4,0);
60 : (0,332:4,0);
61 : (0,332:4,3);
62 : (0,332:4,3);
63 : (0,332:11,0);

