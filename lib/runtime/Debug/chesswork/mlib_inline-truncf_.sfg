
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 15:23:33 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/mlib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline float truncf(float)
Ftruncf : user_defined, called {
    fnm : "truncf" 'float truncf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=4 );
}
****
!! extern float ceilf(float)
Fceilf : user_defined, called {
    fnm : "ceilf" 'float ceilf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
}
!! extern float floorf(float)
Ffloorf : user_defined, called {
    fnm : "floorf" 'float floorf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
}
!!  bool f64_lt(float64_t, float64_t)
Ff64_lt : user_defined, called {
    fnm : "f64_lt" 'bool f64_lt(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
!!  float64_t f32_to_f64(float32_t)
Ff32_to_f64 : user_defined, called {
    fnm : "f32_to_f64" 'float64_t f32_to_f64(float32_t)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : truncf typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : x typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   23 : __arg_x typ=w32 bnd=p tref=__ffloat__
   24 : __ct_m4S0 typ=w32 val=-4S0 bnd=m
   26 : __tmp typ=w32 bnd=m
   28 : __ct_0t0 typ=w32 val=0t0 bnd=m
   30 : __adr_x typ=w32 bnd=m adro=19
   31 : __fch_x typ=w32 bnd=m
   35 : __tmp typ=bool bnd=m
   36 : __fch_x typ=w32 bnd=m
   39 : ceilf typ=t21s_s2 val=0r bnd=m
   40 : __link typ=w32 bnd=m
   41 : __tmp typ=w32 bnd=m
   42 : __fch_x typ=w32 bnd=m
   45 : floorf typ=t21s_s2 val=0r bnd=m
   46 : __link typ=w32 bnd=m
   47 : __tmp typ=w32 bnd=m
   48 : __tmp typ=w32 bnd=m
   49 : __ct_4s0 typ=w32 val=4s0 bnd=m
   51 : __tmp typ=w32 bnd=m
   61 : a_low typ=w32 bnd=m tref=__uint__
   62 : a_high typ=w32 bnd=m tref=__uint__
   63 : b_low typ=w32 bnd=m tref=__uint__
   64 : b_high typ=w32 bnd=m tref=__uint__
   65 : f64_lt typ=t21s_s2 val=0r bnd=m
   66 : __link typ=w32 bnd=m
   67 : __tmp typ=w32 bnd=m
   68 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   76 : a typ=w32 bnd=m tref=float32_t__
   77 : f32_to_f64 typ=t21s_s2 val=0r bnd=m
   78 : __link typ=w32 bnd=m
   80 : __tmp typ=w32 bnd=m
   81 : __tmp typ=w32 bnd=m
   93 : __either typ=bool bnd=m
   94 : __trgt typ=t13s_s2 val=0j bnd=m
   95 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ftruncf {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (x.18 var=19) source ()  <29>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (__arg_x.24 var=23 stl=X off=11) inp ()  <35>;
    (__arg_x.25 var=23) deassign (__arg_x.24)  <36>;
    (__rd___sp.27 var=20) rd_res_reg (__R_SP.11 __sp.17)  <38>;
    (__ct_m4S0.28 var=24) const ()  <39>;
    (__tmp.30 var=26) __Pvoid__pl___Pvoid___sint (__rd___sp.27 __ct_m4S0.28)  <41>;
    (__R_SP.31 var=12 __sp.32 var=18) wr_res_reg (__tmp.30 __sp.17)  <42>;
    (__rd___sp.33 var=20) rd_res_reg (__R_SP.11 __sp.32)  <44>;
    (__ct_0t0.34 var=28) const ()  <45>;
    (__adr_x.36 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_0t0.34)  <47>;
    (__M_DMw.38 var=5 x.39 var=19) store (__arg_x.25 __adr_x.36 x.18)  <49>;
    call {
        () chess_separator_scheduler ()  <50>;
    } #4 off=1
    #33 off=2
    (__fch_x.40 var=31) load (__M_DMw.4 __adr_x.36 x.39)  <51>;
    (f32_to_f64.125 var=77) const ()  <194>;
    (__link.126 var=78) w32_jal_t21s_s2 (f32_to_f64.125)  <195>;
    call {
        (a.127 var=76 stl=X off=12) assign (__fch_x.40)  <196>;
        (__link.128 var=78 stl=X off=1) assign (__link.126)  <197>;
        (__tmp.129 var=80 stl=X off=10 __tmp.130 var=81 stl=X off=11) Ff32_to_f64 (__link.128 a.127)  <198>;
        (__tmp.132 var=80) deassign (__tmp.129)  <200>;
        (__tmp.134 var=81) deassign (__tmp.130)  <202>;
    } #34 off=3
    #30 off=4
    (f64_lt.107 var=65) const ()  <152>;
    (__link.108 var=66) w32_jal_t21s_s2 (f64_lt.107)  <153>;
    (__ct_0.109 var=68) const ()  <154>;
    call {
        (a_low.110 var=61 stl=X off=11) assign (__tmp.132)  <155>;
        (a_high.111 var=62 stl=X off=12) assign (__tmp.134)  <156>;
        (b_low.112 var=63 stl=X off=13) assign (__ct_0.109)  <157>;
        (b_high.113 var=64 stl=X off=14) assign (__ct_0.109)  <158>;
        (__link.114 var=66 stl=X off=1) assign (__link.108)  <159>;
        (__tmp.115 var=67 stl=X off=10) Ff64_lt (__link.114 a_low.110 a_high.111 b_low.112 b_high.113)  <160>;
        (__tmp.116 var=67) deassign (__tmp.115)  <161>;
    } #23 off=5
    #24 off=6
    (__tmp.117 var=35) bool__ne___sint___sint (__tmp.116 __ct_0.109)  <162>;
    (__trgt.145 var=94) const ()  <258>;
    () void_br_bool_t13s_s2 (__tmp.117 __trgt.145)  <259>;
    (__either.146 var=93) undefined ()  <260>;
    if {
        {
            () if_expr (__either.146)  <67>;
        } #7
        {
            #9 off=10
            (__fch_x.56 var=36) load (__M_DMw.4 __adr_x.36 x.39)  <68>;
            (ceilf.60 var=39) const ()  <72>;
            (__link.61 var=40) w32_jal_t21s_s2 (ceilf.60)  <73>;
            call {
                (__fch_x.57 var=36 stl=X off=11) assign (__fch_x.56)  <69>;
                (__link.62 var=40 stl=X off=1) assign (__link.61)  <74>;
                (__tmp.63 var=41 stl=X off=10) Fceilf (__link.62 __fch_x.57)  <75>;
                (__tmp.64 var=41) deassign (__tmp.63)  <76>;
            } #10 off=11
        } #8
        {
            #12 off=7
            (__fch_x.66 var=42) load (__M_DMw.4 __adr_x.36 x.39)  <78>;
            (floorf.70 var=45) const ()  <82>;
            (__link.71 var=46) w32_jal_t21s_s2 (floorf.70)  <83>;
            call {
                (__fch_x.67 var=42 stl=X off=11) assign (__fch_x.66)  <79>;
                (__link.72 var=46 stl=X off=1) assign (__link.71)  <84>;
                (__tmp.73 var=47 stl=X off=10) Ffloorf (__link.72 __fch_x.67)  <85>;
                (__tmp.74 var=47) deassign (__tmp.73)  <86>;
            } #13 off=8
            #38 off=9
            (__trgt.147 var=95) const ()  <261>;
            () void_j_t21s_s2 (__trgt.147)  <262>;
        } #11
        {
            (__tmp.76 var=48) merge (__tmp.64 __tmp.74)  <88>;
        } #14
    } #6
    #16 off=12 nxt=-2
    (__rd___sp.77 var=20) rd_res_reg (__R_SP.11 __sp.32)  <89>;
    (__ct_4s0.78 var=49) const ()  <90>;
    (__tmp.80 var=51) __Pvoid__pl___Pvoid___sint (__rd___sp.77 __ct_4s0.78)  <92>;
    (__R_SP.81 var=12 __sp.82 var=18) wr_res_reg (__tmp.80 __sp.32)  <93>;
    () void___rts_jr_w32 (__la.21)  <94>;
    (__tmp.83 var=48 stl=X off=10) assign (__tmp.76)  <95>;
    () out (__tmp.83)  <96>;
    () sink (__sp.82)  <102>;
    () sink (x.39)  <103>;
} #0
0 : 'include/math.h';
----------
0 : (0,84:21,0);
3 : (0,84:21,0);
4 : (0,84:21,0);
6 : (0,84:48,2);
8 : (0,84:50,3);
9 : (0,84:56,3);
10 : (0,84:50,3);
11 : (0,84:61,4);
12 : (0,84:68,4);
13 : (0,84:61,4);
16 : (0,84:33,6);
23 : (0,84:42,2);
24 : (0,84:42,2);
30 : (0,84:42,2);
33 : (0,84:42,2);
34 : (0,84:42,2);
----------
38 : (0,84:21,0);
39 : (0,84:21,0);
41 : (0,84:21,0);
42 : (0,84:21,0);
44 : (0,84:28,0);
45 : (0,84:28,0);
47 : (0,84:28,0);
49 : (0,84:21,0);
50 : (0,84:21,0);
51 : (0,84:40,2);
67 : (0,84:48,2);
68 : (0,84:56,3);
69 : (0,84:56,0);
73 : (0,84:50,3);
74 : (0,84:50,0);
75 : (0,84:50,3);
78 : (0,84:68,4);
79 : (0,84:68,0);
83 : (0,84:61,4);
84 : (0,84:61,0);
85 : (0,84:61,4);
88 : (0,84:48,5);
89 : (0,84:33,0);
90 : (0,84:33,0);
92 : (0,84:33,0);
93 : (0,84:33,6);
94 : (0,84:33,6);
95 : (0,84:48,0);
152 : (0,84:42,0);
153 : (0,84:42,2);
154 : (0,84:42,0);
155 : (0,84:42,2);
156 : (0,84:42,2);
157 : (0,84:42,2);
158 : (0,84:42,2);
159 : (0,84:42,2);
160 : (0,84:42,2);
161 : (0,84:42,2);
162 : (0,84:42,2);
194 : (0,84:42,0);
195 : (0,84:42,2);
196 : (0,84:42,2);
197 : (0,84:42,2);
198 : (0,84:42,2);
200 : (0,84:42,2);
202 : (0,84:42,2);
259 : (0,84:48,2);

