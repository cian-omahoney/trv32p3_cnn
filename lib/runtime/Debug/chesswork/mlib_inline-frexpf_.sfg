
// File generated by noodle version U-2022.12#33f3808fcb#221128, Sat Mar 16 14:42:53 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/mlib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline float frexpf(float, int *)
Ffrexpf : user_defined, called {
    fnm : "frexpf" 'float frexpf(float, int *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=8 );
}
****
!! extern float ldexpf(float, int)
Fldexpf : user_defined, called {
    fnm : "ldexpf" 'float ldexpf(float, int)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  bool f32_eq(float32_t, float32_t)
Ff32_eq : user_defined, called {
    fnm : "f32_eq" 'bool f32_eq(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : frexpf typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : e typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__sint_DMb
   20 : x typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   21 : __extDMb_w32 typ=w08 bnd=b stl=DMb
   22 : __rd___sp typ=w32 bnd=m
   23 : __la typ=w32 bnd=p tref=w32__
   24 : __rt typ=w32 bnd=p tref=__ffloat__
   25 : __arg_x typ=w32 bnd=p tref=__ffloat__
   26 : __arg_e typ=w32 bnd=p tref=__P__sint__
   27 : __ct_m8S0 typ=w32 val=-8S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   31 : __ct_0t0 typ=w32 val=0t0 bnd=m
   33 : __adr_e typ=w32 bnd=m adro=19
   35 : __ct_4t0 typ=w32 val=4t0 bnd=m
   37 : __adr_x typ=w32 bnd=m adro=20
   38 : __fch_x typ=w32 bnd=m
   39 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   41 : __tmp typ=bool bnd=m
   44 : __fch_e typ=w32 bnd=m
   45 : __fch_x typ=w32 bnd=m
   47 : __ct_23 typ=w32 val=23f bnd=m
   49 : __tmp typ=w32 bnd=m
   50 : __ct_255 typ=w32 val=255f bnd=m
   52 : __tmp typ=w32 bnd=m
   55 : __tmp typ=w32 bnd=m
   56 : __fch_e typ=w32 bnd=m
   57 : __fch_x typ=w32 bnd=m
   60 : __fch_e typ=w32 bnd=m
   61 : __fch___extDMb_w32 typ=w32 bnd=m
   62 : __tmp typ=w32 bnd=m
   65 : ldexpf typ=t21s_s2 val=0r bnd=m
   66 : __link typ=w32 bnd=m
   67 : __tmp typ=w32 bnd=m
   69 : __ct_8s0 typ=w32 val=8s0 bnd=m
   71 : __tmp typ=w32 bnd=m
   76 : __ct_m126 typ=w32 val=-126f bnd=m
   80 : a typ=w32 bnd=m tref=float32_t__
   81 : b typ=w32 bnd=m tref=float32_t__
   82 : f32_eq typ=t21s_s2 val=0r bnd=m
   83 : __link typ=w32 bnd=m
   84 : __tmp typ=w32 bnd=m
   95 : __either typ=bool bnd=m
   96 : __trgt typ=t13s_s2 val=0j bnd=m
   97 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ffrexpf {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (e.18 var=19) source ()  <29>;
    (x.19 var=20) source ()  <30>;
    (__extDMb_w32.20 var=21) source ()  <31>;
    (__la.22 var=23 stl=X off=1) inp ()  <33>;
    (__la.23 var=23) deassign (__la.22)  <34>;
    (__arg_x.26 var=25 stl=X off=11) inp ()  <37>;
    (__arg_x.27 var=25) deassign (__arg_x.26)  <38>;
    (__arg_e.29 var=26 stl=X off=12) inp ()  <40>;
    (__arg_e.30 var=26) deassign (__arg_e.29)  <41>;
    (__rd___sp.32 var=22) rd_res_reg (__R_SP.11 __sp.17)  <43>;
    (__ct_m8S0.33 var=27) const ()  <44>;
    (__tmp.35 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.32 __ct_m8S0.33)  <46>;
    (__R_SP.36 var=12 __sp.37 var=18) wr_res_reg (__tmp.35 __sp.17)  <47>;
    (__rd___sp.38 var=22) rd_res_reg (__R_SP.11 __sp.37)  <49>;
    (__ct_0t0.39 var=31) const ()  <50>;
    (__adr_e.41 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.38 __ct_0t0.39)  <52>;
    (__rd___sp.43 var=22) rd_res_reg (__R_SP.11 __sp.37)  <54>;
    (__M_DMw.48 var=5 e.49 var=19) store (__arg_e.30 __adr_e.41 e.18)  <59>;
    call {
        () chess_separator_scheduler ()  <60>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.44 var=35) const ()  <55>;
    (__adr_x.46 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_4t0.44)  <57>;
    (__M_DMw.50 var=5 x.51 var=20) store (__arg_x.27 __adr_x.46 x.19)  <61>;
    call {
        () chess_separator_scheduler ()  <62>;
    } #6 off=3
    #28 off=4
    (__fch_x.52 var=38) load (__M_DMw.4 __adr_x.46 x.51)  <63>;
    (__ct_0.53 var=39) const ()  <64>;
    (f32_eq.142 var=82) const ()  <202>;
    (__link.143 var=83) w32_jal_t21s_s2 (f32_eq.142)  <203>;
    call {
        (a.145 var=80 stl=X off=11) assign (__fch_x.52)  <205>;
        (b.146 var=81 stl=X off=12) assign (__ct_0.53)  <206>;
        (__link.147 var=83 stl=X off=1) assign (__link.143)  <207>;
        (__tmp.148 var=84 stl=X off=10) Ff32_eq (__link.147 a.145 b.146)  <208>;
        (__tmp.149 var=84) deassign (__tmp.148)  <209>;
    } #29 off=5
    #30 off=6
    (__tmp.150 var=41) bool__ne___sint___sint (__tmp.149 __ct_0.53)  <210>;
    (__trgt.158 var=96) const ()  <258>;
    () void_br_bool_t13s_s2 (__tmp.150 __trgt.158)  <259>;
    (__either.159 var=95) undefined ()  <260>;
    if {
        {
            () if_expr (__either.159)  <82>;
        } #9
        {
            (__fch_e.73 var=44) load (__M_DMw.4 __adr_e.41 e.49)  <85>;
            (__M_DMw.74 var=5 __extDMb_w32.75 var=21) store (__ct_0.53 __fch_e.73 __extDMb_w32.20)  <86>;
        } #11 off=12
        {
            #14 off=7
            (__fch_x.76 var=45) load (__M_DMw.4 __adr_x.46 x.51)  <88>;
            (__ct_23.78 var=47) const ()  <90>;
            (__tmp.80 var=49) __sint__rs___sint___sint (__fch_x.76 __ct_23.78)  <92>;
            (__ct_255.81 var=50) const ()  <93>;
            (__tmp.83 var=52) __sint__ad___sint___sint (__tmp.80 __ct_255.81)  <95>;
            (__tmp.86 var=55) __sint__pl___sint___sint (__tmp.83 __ct_m126.137)  <98>;
            (__fch_e.87 var=56) load (__M_DMw.4 __adr_e.41 e.49)  <99>;
            (__M_DMw.88 var=5 __extDMb_w32.89 var=21) store (__tmp.86 __fch_e.87 __extDMb_w32.20)  <100>;
            (__ct_m126.137 var=76) const ()  <183>;
            call {
                () chess_separator_scheduler ()  <101>;
            } #15 off=8
            #16 off=9
            (__fch_x.90 var=57) load (__M_DMw.4 __adr_x.46 x.51)  <102>;
            (__fch_e.94 var=60) load (__M_DMw.4 __adr_e.41 e.49)  <106>;
            (__fch___extDMb_w32.95 var=61) load (__M_DMw.4 __fch_e.94 __extDMb_w32.89)  <107>;
            (__tmp.96 var=62) __sint__mi___sint___sint (__ct_0.53 __fch___extDMb_w32.95)  <108>;
            (ldexpf.100 var=65) const ()  <112>;
            (__link.101 var=66) w32_jal_t21s_s2 (ldexpf.100)  <113>;
            call {
                (__fch_x.91 var=57 stl=X off=11) assign (__fch_x.90)  <103>;
                (__tmp.97 var=62 stl=X off=12) assign (__tmp.96)  <109>;
                (__link.102 var=66 stl=X off=1) assign (__link.101)  <114>;
                (__tmp.103 var=67 stl=X off=10) Fldexpf (__link.102 __fch_x.91 __tmp.97)  <115>;
                (__tmp.104 var=67) deassign (__tmp.103)  <116>;
            } #17 off=10
            #18 off=11
            (__M_DMw.106 var=5 x.107 var=20) store (__tmp.104 __adr_x.46 x.51)  <118>;
            (__trgt.160 var=97) const ()  <261>;
            () void_j_t21s_s2 (__trgt.160)  <262>;
        } #13
        {
            (x.108 var=20) merge (x.51 x.107)  <120>;
            (__extDMb_w32.109 var=21) merge (__extDMb_w32.75 __extDMb_w32.89)  <121>;
        } #20
    } #8
    #23 off=13 nxt=-2
    (__rt.110 var=24) load (__M_DMw.4 __adr_x.46 x.108)  <122>;
    (__rd___sp.111 var=22) rd_res_reg (__R_SP.11 __sp.37)  <123>;
    (__ct_8s0.112 var=69) const ()  <124>;
    (__tmp.114 var=71) __Pvoid__pl___Pvoid___sint (__rd___sp.111 __ct_8s0.112)  <126>;
    (__R_SP.115 var=12 __sp.116 var=18) wr_res_reg (__tmp.114 __sp.37)  <127>;
    () void___rts_jr_w32 (__la.23)  <128>;
    (__rt.117 var=24 stl=X off=10) assign (__rt.110)  <129>;
    () out (__rt.117)  <130>;
    () sink (__sp.116)  <136>;
    () sink (e.49)  <137>;
    () sink (x.108)  <138>;
    () sink (__extDMb_w32.109)  <139>;
} #0
0 : 'include/math.h';
----------
0 : (0,88:21,0);
3 : (0,88:31,0);
4 : (0,88:31,0);
5 : (0,88:21,0);
6 : (0,88:21,0);
8 : (0,90:4,3);
11 : (0,91:11,5);
13 : (0,92:9,6);
14 : (0,93:11,7);
15 : (0,93:11,7);
16 : (0,94:21,7);
17 : (0,94:12,7);
18 : (0,94:10,8);
23 : (0,96:4,11);
28 : (0,90:10,3);
29 : (0,90:10,3);
30 : (0,90:10,3);
----------
43 : (0,88:21,0);
44 : (0,88:21,0);
46 : (0,88:21,0);
47 : (0,88:21,0);
49 : (0,88:36,0);
50 : (0,88:36,0);
52 : (0,88:36,0);
54 : (0,88:28,0);
55 : (0,88:28,0);
57 : (0,88:28,0);
59 : (0,88:31,0);
60 : (0,88:31,0);
61 : (0,88:21,0);
62 : (0,88:21,0);
63 : (0,90:8,3);
64 : (0,90:13,0);
82 : (0,90:4,3);
85 : (0,91:9,4);
86 : (0,91:8,4);
88 : (0,93:24,6);
90 : (0,93:30,0);
92 : (0,93:27,6);
93 : (0,93:36,0);
95 : (0,93:34,6);
98 : (0,93:42,6);
99 : (0,93:9,6);
100 : (0,93:8,6);
101 : (0,93:11,7);
102 : (0,94:19,7);
103 : (0,94:19,0);
106 : (0,94:23,7);
107 : (0,94:22,7);
108 : (0,94:21,7);
109 : (0,94:21,0);
113 : (0,94:12,7);
114 : (0,94:12,0);
115 : (0,94:12,7);
118 : (0,94:8,7);
120 : (0,90:4,10);
121 : (0,90:4,10);
122 : (0,96:11,11);
123 : (0,96:4,0);
124 : (0,96:4,0);
126 : (0,96:4,0);
127 : (0,96:4,11);
128 : (0,96:4,11);
129 : (0,96:11,0);
183 : (0,93:42,0);
202 : (0,90:10,0);
203 : (0,90:10,3);
205 : (0,90:10,3);
206 : (0,90:10,3);
207 : (0,90:10,3);
208 : (0,90:10,3);
209 : (0,90:10,3);
210 : (0,90:10,3);
259 : (0,90:4,3);

