
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 15:23:25 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strstr(const char *, const char *)
Fstrstr : user_defined, called {
    fnm : "strstr" 'char *strstr(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=20 );
}
****
***/

[
    0 : strstr typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s2 typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   20 : s1 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : r1 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb lscp=10 tref=__P__cchar_DMb
   22 : r2 typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb lscp=10 tref=__P__cchar_DMb
   23 : c1 typ=w08 val=16t0 bnd=a sz=1 algn=1 stl=DMb lscp=21 tref=__cchar_DMb
   24 : c2 typ=w08 val=17t0 bnd=a sz=1 algn=1 stl=DMb lscp=21 tref=__cchar_DMb
   25 : __rd___sp typ=w32 bnd=m
   26 : __la typ=w32 bnd=p tref=w32__
   27 : __rt typ=w32 bnd=p tref=__P__cchar__
   28 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   29 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   30 : __ct_m20S0 typ=w32 val=-20S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   34 : __ct_0t0 typ=w32 val=0t0 bnd=m
   36 : __adr_s2 typ=w32 bnd=m adro=19
   38 : __ct_4t0 typ=w32 val=4t0 bnd=m
   40 : __adr_s1 typ=w32 bnd=m adro=20
   42 : __ct_8t0 typ=w32 val=8t0 bnd=m
   44 : __adr_r1 typ=w32 bnd=m adro=21
   46 : __ct_12t0 typ=w32 val=12t0 bnd=m
   48 : __adr_r2 typ=w32 bnd=m adro=22
   50 : __ct_16t0 typ=w32 val=16t0 bnd=m
   52 : __adr_c1 typ=w32 bnd=m adro=23
   54 : __ct_17t0 typ=w32 val=17t0 bnd=m
   56 : __adr_c2 typ=w32 bnd=m adro=24
   60 : __fch_s1 typ=w32 bnd=m
   61 : __fch_s2 typ=w32 bnd=m
   64 : __fch_r1 typ=w32 bnd=m
   65 : __ct_1 typ=w32 val=1f bnd=m
   68 : __fch___extDMb typ=w08 bnd=m
   69 : __fch_r2 typ=w32 bnd=m
   73 : __fch___extDMb typ=w08 bnd=m
   74 : __fch_c2 typ=w08 bnd=m
   76 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   78 : __tmp typ=bool bnd=m
   80 : __ct_20s0 typ=w32 val=20s0 bnd=m
   82 : __tmp typ=w32 bnd=m
   83 : __fch_c1 typ=w08 bnd=m
   85 : __fch_c2 typ=w08 bnd=m
   87 : __tmp typ=bool bnd=m
   90 : __fch_s1 typ=w32 bnd=m
   94 : __fch___extDMb typ=w08 bnd=m
   98 : __tmp typ=bool bnd=m
  104 : __tmp typ=w32 bnd=m
  113 : __shv___fch_r1 typ=w32 bnd=m
  114 : __shv___fch_r2 typ=w32 bnd=m
  115 : __shv___fch_s1 typ=w32 bnd=m
  124 : __either typ=bool bnd=m
  125 : __trgt typ=t13s_s2 val=0j bnd=m
  126 : __trgt typ=t13s_s2 val=0j bnd=m
  127 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fstrstr {
    #4 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (s2.18 var=19) source ()  <29>;
    (s1.19 var=20) source ()  <30>;
    (r1.20 var=21) source ()  <31>;
    (r2.21 var=22) source ()  <32>;
    (c1.22 var=23) source ()  <33>;
    (c2.23 var=24) source ()  <34>;
    (__la.25 var=26 stl=X off=1) inp ()  <36>;
    (__la.26 var=26) deassign (__la.25)  <37>;
    (__arg_s1.29 var=28 stl=X off=11) inp ()  <40>;
    (__arg_s1.30 var=28) deassign (__arg_s1.29)  <41>;
    (__arg_s2.32 var=29 stl=X off=12) inp ()  <43>;
    (__arg_s2.33 var=29) deassign (__arg_s2.32)  <44>;
    (__rd___sp.35 var=25) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_m20S0.36 var=30) const ()  <47>;
    (__tmp.38 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_m20S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (__rd___sp.41 var=25) rd_res_reg (__R_SP.11 __sp.40)  <52>;
    (__ct_0t0.42 var=34) const ()  <53>;
    (__adr_s2.44 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_0t0.42)  <55>;
    (__rd___sp.46 var=25) rd_res_reg (__R_SP.11 __sp.40)  <57>;
    (__rd___sp.51 var=25) rd_res_reg (__R_SP.11 __sp.40)  <62>;
    (__rd___sp.56 var=25) rd_res_reg (__R_SP.11 __sp.40)  <67>;
    (__rd___sp.61 var=25) rd_res_reg (__R_SP.11 __sp.40)  <72>;
    (__rd___sp.66 var=25) rd_res_reg (__R_SP.11 __sp.40)  <77>;
    (__M_DMw.74 var=5 s2.75 var=19) store (__arg_s2.33 __adr_s2.44 s2.18)  <85>;
    call {
        () chess_separator_scheduler ()  <86>;
    } #5 off=1
    #6 off=2
    (__ct_4t0.47 var=38) const ()  <58>;
    (__adr_s1.49 var=40) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_4t0.47)  <60>;
    (__M_DMw.76 var=5 s1.77 var=20) store (__arg_s1.30 __adr_s1.49 s1.19)  <87>;
    call {
        () chess_separator_scheduler ()  <88>;
    } #7 off=3
    #72 off=4
    (__ct_8t0.52 var=42) const ()  <63>;
    (__adr_r1.54 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_8t0.52)  <65>;
    (__ct_12t0.57 var=46) const ()  <68>;
    (__adr_r2.59 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_12t0.57)  <70>;
    (__ct_16t0.62 var=50) const ()  <73>;
    (__adr_c1.64 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_16t0.62)  <75>;
    (__ct_17t0.67 var=54) const ()  <78>;
    (__adr_c2.69 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_17t0.67)  <80>;
    (__fch_s2.106 var=61) load (__M_DMw.4 __adr_s2.44 s2.75)  <117>;
    (__ct_1.162 var=65) const ()  <176>;
    (__ct_0.181 var=76) const ()  <196>;
    (__rd___sp.210 var=25) rd_res_reg (__R_SP.11 __sp.40)  <226>;
    (__ct_20s0.211 var=80) const ()  <227>;
    (__tmp.213 var=82) __Pvoid__pl___Pvoid___sint (__rd___sp.210 __ct_20s0.211)  <229>;
    (__trgt.565 var=125) const ()  <662>;
    (__trgt.567 var=126) const ()  <667>;
    (__trgt.569 var=127) const ()  <670>;
    do {
        {
            (s1.85 var=20) entry (s1.474 s1.77)  <96>;
            (r1.86 var=21) entry (r1.476 r1.20)  <97>;
            (r2.87 var=22) entry (r2.478 r2.21)  <98>;
            (c1.88 var=23) entry (c1.480 c1.22)  <99>;
            (c2.89 var=24) entry (c2.482 c2.23)  <100>;
        } #9
        {
            #11 off=5
            (__fch_s1.103 var=60) load (__M_DMw.4 __adr_s1.49 s1.85)  <114>;
            (__M_DMw.104 var=5 r1.105 var=21) store (__fch_s1.103 __adr_r1.54 r1.86)  <115>;
            call {
                () chess_separator_scheduler ()  <116>;
            } #12 off=6
            #13 off=7
            (__M_DMw.107 var=5 r2.108 var=22) store (__fch_s2.106 __adr_r2.59 r2.87)  <118>;
            call {
                () chess_separator_scheduler ()  <119>;
            } #14 off=8
            #73 off=9
            (__rt.209 var=27) load (__M_DMw.4 __adr_s1.49 s1.85)  <225>;
            do {
                {
                    (r1.144 var=21) entry (r1.365 r1.105)  <157>;
                    (r2.145 var=22) entry (r2.367 r2.108)  <158>;
                    (c1.146 var=23) entry (c1.369 c1.88)  <159>;
                    (c2.147 var=24) entry (c2.371 c2.89)  <160>;
                } #20
                {
                    #22 off=10
                    (__fch_r1.161 var=64) load (__M_DMw.4 __adr_r1.54 r1.144)  <174>;
                    call {
                        () chess_separator_scheduler ()  <175>;
                    } #23 off=11
                    #24 off=12
                    (__M_DMw.165 var=5 r1.166 var=21) store (__shv___fch_r1.556 __adr_r1.54 r1.144)  <179>;
                    (__shv___fch_r1.556 var=113) __Pvoid__pl___Pvoid___sint (__fch_r1.161 __ct_1.162)  <615>;
                    call {
                        () chess_separator_scheduler ()  <180>;
                    } #25 off=13
                    #26 off=14
                    (__fch___extDMb.167 var=68) load (__M_DMb.2 __fch_r1.161 __extDMb.16)  <181>;
                    (__M_DMb.168 var=3 c1.169 var=23) store (__fch___extDMb.167 __adr_c1.64 c1.146)  <182>;
                    call {
                        () chess_separator_scheduler ()  <183>;
                    } #27 off=15
                    #28 off=16
                    (__fch_r2.170 var=69) load (__M_DMw.4 __adr_r2.59 r2.145)  <184>;
                    call {
                        () chess_separator_scheduler ()  <185>;
                    } #29 off=17
                    #30 off=18
                    (__M_DMw.174 var=5 r2.175 var=22) store (__shv___fch_r2.557 __adr_r2.59 r2.145)  <189>;
                    (__shv___fch_r2.557 var=114) __Pvoid__pl___Pvoid___sint (__fch_r2.170 __ct_1.162)  <616>;
                    call {
                        () chess_separator_scheduler ()  <190>;
                    } #31 off=19
                    #32 off=20
                    (__fch___extDMb.176 var=73) load (__M_DMb.2 __fch_r2.170 __extDMb.16)  <191>;
                    (__M_DMb.177 var=3 c2.178 var=24) store (__fch___extDMb.176 __adr_c2.69 c2.147)  <192>;
                    call {
                        () chess_separator_scheduler ()  <193>;
                    } #33 off=21
                    #34 off=22
                    (__fch_c2.179 var=74) load (__M_DMb.2 __adr_c2.69 c2.178)  <194>;
                    (__tmp.183 var=78) bool__eq___sint___sint (__fch_c2.179 __ct_0.181)  <198>;
                    () void_br_bool_t13s_s2 (__tmp.183 __trgt.565)  <663>;
                    (__either.566 var=124) undefined ()  <664>;
                    if {
                        {
                            () if_expr (__either.566)  <224>;
                            () chess_frequent_else ()  <665>;
                            () chess_rear_then ()  <666>;
                        } #36
                        {
                            (__R_SP.214 var=12 __sp.215 var=18) wr_res_reg (__tmp.213 __sp.40)  <230>;
                            () void___rts_jr_w32 (__la.26)  <231>;
                            (__rt.216 var=27 stl=X off=10) assign (__rt.209)  <232>;
                            () out (__rt.216)  <233>;
                            () sink (__sp.215)  <239>;
                            () sink (s2.75)  <240>;
                            () sink (s1.85)  <241>;
                            () sink (r1.166)  <242>;
                            () sink (r2.175)  <243>;
                            () sink (c1.169)  <244>;
                            () sink (c2.178)  <245>;
                        } #40 off=24 nxt=-2
                        {
                        } #41 off=23
                        {
                        } #42
                    } #35
                    #43 off=25
                    (__fch_c1.267 var=83) load (__M_DMb.2 __adr_c1.64 c1.169)  <296>;
                    (__fch_c2.269 var=85) load (__M_DMb.2 __adr_c2.69 c2.178)  <298>;
                    (__tmp.555 var=87) bool__eq___sint___sint (__fch_c1.267 __fch_c2.269)  <614>;
                    () void_br_bool_t13s_s2 (__tmp.555 __trgt.567)  <668>;
                    (__either.568 var=124) undefined ()  <669>;
                } #21
                {
                    () while_expr (__either.568)  <416>;
                    (r1.365 var=21 r1.366 var=21) exit (r1.166)  <425>;
                    (r2.367 var=22 r2.368 var=22) exit (r2.175)  <426>;
                    (c1.369 var=23 c1.370 var=23) exit (c1.169)  <427>;
                    (c2.371 var=24 c2.372 var=24) exit (c2.178)  <428>;
                } #51
            } #19 rng=[1,2147483647]
            #54 off=26
            (__fch_s1.449 var=90) load (__M_DMw.4 __adr_s1.49 s1.85)  <492>;
            call {
                () chess_separator_scheduler ()  <493>;
            } #55 off=27
            #56 off=28
            (__M_DMw.453 var=5 s1.454 var=20) store (__shv___fch_s1.558 __adr_s1.49 s1.85)  <497>;
            (__shv___fch_s1.558 var=115) __Pvoid__pl___Pvoid___sint (__fch_s1.449 __ct_1.162)  <617>;
            call {
                () chess_separator_scheduler ()  <498>;
            } #57 off=29
            #58 off=30
            (__fch___extDMb.455 var=94) load (__M_DMb.2 __fch_s1.449 __extDMb.16)  <499>;
            (__tmp.459 var=98) bool__ne___sint___sint (__fch___extDMb.455 __ct_0.181)  <503>;
            () void_br_bool_t13s_s2 (__tmp.459 __trgt.569)  <671>;
            (__either.570 var=124) undefined ()  <672>;
        } #10
        {
            () while_expr (__either.570)  <504>;
            (s1.474 var=20 s1.475 var=20) exit (s1.454)  <512>;
            (r1.476 var=21 r1.477 var=21) exit (r1.366)  <513>;
            (r2.478 var=22 r2.479 var=22) exit (r2.368)  <514>;
            (c1.480 var=23 c1.481 var=23) exit (c1.370)  <515>;
            (c2.482 var=24 c2.483 var=24) exit (c2.372)  <516>;
        } #59
    } #8
    #62 off=31 nxt=-2
    (__rd___sp.513 var=25) rd_res_reg (__R_SP.11 __sp.40)  <533>;
    (__tmp.516 var=104) __Pvoid__pl___Pvoid___sint (__rd___sp.513 __ct_20s0.211)  <536>;
    (__R_SP.517 var=12 __sp.518 var=18) wr_res_reg (__tmp.516 __sp.40)  <537>;
    () void___rts_jr_w32 (__la.26)  <538>;
    (__rt.519 var=27 stl=X off=10) assign (__ct_0.181)  <539>;
    () out (__rt.519)  <540>;
    () sink (__sp.518)  <546>;
    () sink (s2.75)  <547>;
    () sink (s1.475)  <548>;
    () sink (r1.477)  <549>;
    () sink (r2.479)  <550>;
    () sink (c1.481)  <551>;
    () sink (c2.483)  <552>;
} #0
0 : 'src/string.c';
----------
0 : (0,223:0,0);
4 : (0,223:29,0);
5 : (0,223:29,0);
6 : (0,223:13,0);
7 : (0,223:13,0);
8 : (0,237:6,3);
10 : (0,226:7,3);
11 : (0,227:25,3);
12 : (0,227:25,3);
13 : (0,228:25,4);
14 : (0,228:25,4);
19 : (0,229:8,6);
21 : (0,229:18,6);
22 : (0,230:25,7);
23 : (0,230:25,7);
24 : (0,230:25,8);
25 : (0,230:25,8);
26 : (0,230:22,8);
27 : (0,230:22,8);
28 : (0,231:25,10);
29 : (0,231:25,10);
30 : (0,231:25,11);
31 : (0,231:25,11);
32 : (0,231:22,11);
33 : (0,231:22,11);
34 : (0,232:19,12);
35 : (0,232:12,12);
40 : (0,233:16,13);
41 : (0,232:12,16);
43 : (0,234:19,19);
54 : (0,237:16,34);
55 : (0,237:16,34);
56 : (0,237:16,35);
57 : (0,237:16,35);
58 : (0,237:6,35);
62 : (0,238:4,36);
----------
46 : (0,223:6,0);
47 : (0,223:6,0);
49 : (0,223:6,0);
50 : (0,223:6,0);
52 : (0,223:41,0);
53 : (0,223:41,0);
55 : (0,223:41,0);
57 : (0,223:25,0);
58 : (0,223:25,0);
60 : (0,223:25,0);
62 : (0,227:20,0);
63 : (0,227:20,0);
65 : (0,227:20,0);
67 : (0,228:20,0);
68 : (0,228:20,0);
70 : (0,228:20,0);
72 : (0,230:17,0);
73 : (0,230:17,0);
75 : (0,230:17,0);
77 : (0,231:17,0);
78 : (0,231:17,0);
80 : (0,231:17,0);
85 : (0,223:29,0);
86 : (0,223:29,0);
87 : (0,223:13,0);
88 : (0,223:13,0);
96 : (0,237:6,3);
97 : (0,237:6,3);
98 : (0,237:6,3);
99 : (0,237:6,3);
100 : (0,237:6,3);
114 : (0,227:25,3);
115 : (0,227:25,3);
116 : (0,227:25,3);
117 : (0,228:25,4);
118 : (0,228:25,4);
119 : (0,228:25,4);
157 : (0,229:8,6);
158 : (0,229:8,6);
159 : (0,229:8,6);
160 : (0,229:8,6);
174 : (0,230:23,6);
175 : (0,230:25,7);
176 : (0,230:25,0);
179 : (0,230:23,7);
180 : (0,230:25,8);
181 : (0,230:22,8);
182 : (0,230:22,8);
183 : (0,230:22,8);
184 : (0,231:23,9);
185 : (0,231:25,10);
189 : (0,231:23,10);
190 : (0,231:25,11);
191 : (0,231:22,11);
192 : (0,231:22,11);
193 : (0,231:22,11);
194 : (0,232:16,12);
196 : (0,232:22,0);
198 : (0,232:19,12);
224 : (0,232:12,12);
225 : (0,233:30,13);
226 : (0,233:16,0);
227 : (0,233:16,0);
229 : (0,233:16,0);
230 : (0,233:16,13);
231 : (0,233:16,13);
232 : (0,233:23,0);
296 : (0,234:16,19);
298 : (0,234:22,19);
416 : (0,229:8,26);
425 : (0,229:8,26);
426 : (0,229:8,26);
427 : (0,229:8,26);
428 : (0,229:8,26);
492 : (0,237:14,33);
493 : (0,237:16,34);
497 : (0,237:14,34);
498 : (0,237:16,35);
499 : (0,237:13,35);
503 : (0,237:6,35);
504 : (0,237:6,35);
512 : (0,237:6,35);
513 : (0,237:6,35);
514 : (0,237:6,35);
515 : (0,237:6,35);
516 : (0,237:6,35);
533 : (0,238:4,0);
536 : (0,238:4,0);
537 : (0,238:4,36);
538 : (0,238:4,36);
539 : (0,238:11,0);
614 : (0,234:19,19);
615 : (0,230:25,0);
616 : (0,231:25,0);
617 : (0,237:16,0);
663 : (0,232:12,12);
668 : (0,229:8,26);
671 : (0,237:6,35);

