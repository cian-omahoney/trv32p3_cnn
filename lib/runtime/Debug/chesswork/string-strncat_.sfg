
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:34:09 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strncat(char * restrict, const char * restrict, size_t)
Fstrncat : user_defined, called {
    fnm : "strncat" 'char *strncat(char * restrict, const char * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=20 );
}
****
***/

[
    0 : strncat typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : n typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   20 : s2 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : __arg_s2__rstr typ=w08 bnd=b stl=DMb
   22 : s1 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   23 : __arg_s1__rstr typ=w08 bnd=b stl=DMb
   24 : result typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   25 : c typ=w08 val=16t0 bnd=a sz=1 algn=1 stl=DMb tref=__cchar_DMb
   26 : __rd___sp typ=w32 bnd=m
   27 : __la typ=w32 bnd=p tref=w32__
   28 : __rt typ=w32 bnd=p tref=__P__cchar__
   29 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   30 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   31 : __arg_n typ=w32 bnd=p tref=size_t__
   32 : __ct_m20S0 typ=w32 val=-20S0 bnd=m
   34 : __tmp typ=w32 bnd=m
   36 : __ct_0t0 typ=w32 val=0t0 bnd=m
   38 : __adr_n typ=w32 bnd=m adro=19
   40 : __ct_4t0 typ=w32 val=4t0 bnd=m
   42 : __adr_s2 typ=w32 bnd=m adro=20
   44 : __ct_8t0 typ=w32 val=8t0 bnd=m
   46 : __adr_s1 typ=w32 bnd=m adro=22
   48 : __ct_12t0 typ=w32 val=12t0 bnd=m
   50 : __adr_result typ=w32 bnd=m adro=24
   52 : __ct_16t0 typ=w32 val=16t0 bnd=m
   54 : __adr_c typ=w32 bnd=m adro=25
   60 : s2__rstr typ=w08 bnd=b stl=DMb
   61 : s1__rstr typ=w08 bnd=b stl=DMb
   62 : __fch_s1 typ=w32 bnd=m
   63 : __fch_s1 typ=w32 bnd=m
   64 : __ct_1 typ=w32 val=1f bnd=m
   67 : __fch_s1__rstr typ=w08 bnd=m
   69 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   71 : __tmp typ=bool bnd=m
   72 : __fch_s1 typ=w32 bnd=m
   76 : __fch_s1__rstr typ=w08 bnd=m
   80 : __tmp typ=bool bnd=m
   81 : __fch_s1 typ=w32 bnd=m
   84 : __tmp typ=w32 bnd=m
   85 : __fch_n typ=w32 bnd=m
   91 : __tmp typ=bool bnd=m
   92 : __fch_s2 typ=w32 bnd=m
   96 : __fch_s2__rstr typ=w08 bnd=m
  100 : __tmp typ=bool bnd=m
  103 : __tmp typ=bool bnd=m
  104 : __fch_c typ=w08 bnd=m
  105 : __fch_s1 typ=w32 bnd=m
  109 : __fch_n typ=w32 bnd=m
  115 : __tmp typ=bool bnd=m
  116 : __fch_s2 typ=w32 bnd=m
  120 : __fch_s2__rstr typ=w08 bnd=m
  124 : __tmp typ=bool bnd=m
  127 : __tmp typ=bool bnd=m
  128 : __ct_0 typ=w08 val=0f bnd=m
  130 : __fch_s1 typ=w32 bnd=m
  132 : __ct_20s0 typ=w32 val=20s0 bnd=m
  134 : __tmp typ=w32 bnd=m
  146 : __ct_m1 typ=w32 val=-1f bnd=m
  148 : __shv___fch_s1 typ=w32 bnd=m
  149 : __shv___fch_s2 typ=w32 bnd=m
  150 : __shv___fch_s2 typ=w32 bnd=m
  151 : __shv___fch_s1 typ=w32 bnd=m
  152 : __shv___fch_n typ=w32 bnd=m
  153 : __shv___fch_s1 typ=w32 bnd=m
  154 : __shv___fch_n typ=w32 bnd=m
  161 : __true typ=bool val=1f bnd=m
  162 : __false typ=bool val=0f bnd=m
  163 : __either typ=bool bnd=m
  164 : __trgt typ=t13s_s2 val=0j bnd=m
  165 : __trgt typ=t13s_s2 val=0j bnd=m
  166 : __trgt typ=t21s_s2 val=0j bnd=m
  167 : __trgt typ=t13s_s2 val=0j bnd=m
  168 : __trgt typ=t13s_s2 val=0j bnd=m
  169 : __trgt typ=t13s_s2 val=0j bnd=m
  170 : __trgt typ=t13s_s2 val=0j bnd=m
  171 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrncat {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (n.18 var=19) source ()  <29>;
    (s2.19 var=20) source ()  <30>;
    (__arg_s2__rstr.20 var=21) source ()  <31>;
    (s1.21 var=22) source ()  <32>;
    (__arg_s1__rstr.22 var=23) source ()  <33>;
    (result.23 var=24) source ()  <34>;
    (c.24 var=25) source ()  <35>;
    (__la.26 var=27 stl=X off=1) inp ()  <37>;
    (__la.27 var=27) deassign (__la.26)  <38>;
    (__arg_s1.30 var=29 stl=X off=11) inp ()  <41>;
    (__arg_s1.31 var=29) deassign (__arg_s1.30)  <42>;
    (__arg_s2.33 var=30 stl=X off=12) inp ()  <44>;
    (__arg_s2.34 var=30) deassign (__arg_s2.33)  <45>;
    (__arg_n.36 var=31 stl=X off=13) inp ()  <47>;
    (__arg_n.37 var=31) deassign (__arg_n.36)  <48>;
    (__rd___sp.39 var=26) rd_res_reg (__R_SP.11 __sp.17)  <50>;
    (__ct_m20S0.40 var=32) const ()  <51>;
    (__tmp.42 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_m20S0.40)  <53>;
    (__R_SP.43 var=12 __sp.44 var=18) wr_res_reg (__tmp.42 __sp.17)  <54>;
    (__rd___sp.45 var=26) rd_res_reg (__R_SP.11 __sp.44)  <56>;
    (__ct_0t0.46 var=36) const ()  <57>;
    (__adr_n.48 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_0t0.46)  <59>;
    (__rd___sp.50 var=26) rd_res_reg (__R_SP.11 __sp.44)  <61>;
    (__rd___sp.55 var=26) rd_res_reg (__R_SP.11 __sp.44)  <66>;
    (__rd___sp.60 var=26) rd_res_reg (__R_SP.11 __sp.44)  <71>;
    (__rd___sp.65 var=26) rd_res_reg (__R_SP.11 __sp.44)  <76>;
    (__M_DMw.75 var=5 n.76 var=19) store (__arg_n.37 __adr_n.48 n.18)  <86>;
    call {
        () chess_separator_scheduler ()  <87>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.51 var=40) const ()  <62>;
    (__adr_s2.53 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.51)  <64>;
    (s2__rstr.77 var=60 __arg_s2__rstr.78 var=21) chain_tie (__arg_s2__rstr.20)  <88>;
    (__M_DMw.79 var=5 s2.80 var=20) store (__arg_s2.34 __adr_s2.53 s2.19)  <89>;
    call {
        () chess_separator_scheduler ()  <90>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.56 var=44) const ()  <67>;
    (__adr_s1.58 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.56)  <69>;
    (s1__rstr.81 var=61 __arg_s1__rstr.82 var=23) chain_tie (__arg_s1__rstr.22)  <91>;
    (__M_DMw.83 var=5 s1.84 var=22) store (__arg_s1.31 __adr_s1.58 s1.21)  <92>;
    call {
        () chess_separator_scheduler ()  <93>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.61 var=48) const ()  <72>;
    (__adr_result.63 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_12t0.61)  <74>;
    (__fch_s1.85 var=62) load (__M_DMw.4 __adr_s1.58 s1.84)  <94>;
    (__M_DMw.86 var=5 result.87 var=24) store (__fch_s1.85 __adr_result.63 result.23)  <95>;
    call {
        () chess_separator_scheduler ()  <96>;
    } #10 off=7
    #11 off=8
    (__fch_s1.88 var=63) load (__M_DMw.4 __adr_s1.58 s1.84)  <97>;
    call {
        () chess_separator_scheduler ()  <98>;
    } #12 off=9
    #13 off=10
    (__ct_1.89 var=64) const ()  <99>;
    (__M_DMw.92 var=5 s1.93 var=22) store (__shv___fch_s1.549 __adr_s1.58 s1.84)  <102>;
    (__shv___fch_s1.549 var=153) __Pvoid__pl___Pvoid___sint (__fch_s1.88 __ct_1.89)  <563>;
    call {
        () chess_separator_scheduler ()  <103>;
    } #14 off=11
    #15 off=12
    (__fch_s1__rstr.94 var=67) load (__M_DMb.2 __fch_s1.88 s1__rstr.81)  <104>;
    (__ct_0.96 var=69) const ()  <106>;
    (__tmp.559 var=71) bool__eq___sint___sint (__fch_s1__rstr.94 __ct_0.96)  <603>;
    (__trgt.566 var=165) const ()  <624>;
    () void_br_bool_t13s_s2 (__tmp.559 __trgt.566)  <625>;
    (__either.567 var=163) undefined ()  <626>;
    if {
        {
            () if_expr (__either.567)  <139>;
            () chess_frequent_else ()  <140>;
            () chess_rear_then ()  <627>;
        } #17
        {
            (__trgt.568 var=166) const ()  <628>;
            () void_j_t21s_s2 (__trgt.568)  <629>;
        } #28 off=20
        {
            #227 off=13
            (__trgt.564 var=164) const ()  <621>;
            do {
                {
                    (s1.138 var=22) entry (s1.188 s1.93)  <150>;
                } #20
                {
                    #22 off=14
                    (__fch_s1.159 var=72) load (__M_DMw.4 __adr_s1.58 s1.138)  <171>;
                    call {
                        () chess_separator_scheduler ()  <172>;
                    } #23 off=15
                    #24 off=16
                    (__M_DMw.163 var=5 s1.164 var=22) store (__shv___fch_s1.544 __adr_s1.58 s1.138)  <176>;
                    (__shv___fch_s1.544 var=148) __Pvoid__pl___Pvoid___sint (__fch_s1.159 __ct_1.89)  <558>;
                    call {
                        () chess_separator_scheduler ()  <177>;
                    } #25 off=17
                    #26 off=18
                    (__fch_s1__rstr.165 var=76) load (__M_DMb.2 __fch_s1.159 s1__rstr.81)  <178>;
                    (__tmp.169 var=80) bool__ne___sint___sint (__fch_s1__rstr.165 __ct_0.96)  <182>;
                    () void_br_bool_t13s_s2 (__tmp.169 __trgt.564)  <622>;
                    (__either.565 var=163) undefined ()  <623>;
                } #21
                {
                    () while_expr (__either.565)  <183>;
                    (s1.188 var=22 s1.189 var=22) exit (s1.164)  <193>;
                } #27
            } #19 rng=[1,2147483647]
        } #18
        {
            (s1.230 var=22) merge (s1.93 s1.189)  <214>;
        } #29
    } #16
    #30 off=21
    (__fch_s1.232 var=81) load (__M_DMw.4 __adr_s1.58 s1.230)  <216>;
    call {
        () chess_separator_scheduler ()  <217>;
    } #31 off=22
    #32 off=23
    (__tmp.235 var=84) __Pvoid__pl___Pvoid___sint (__fch_s1.232 __ct_m1.542)  <220>;
    (__M_DMw.236 var=5 s1.237 var=22) store (__tmp.235 __adr_s1.58 s1.230)  <221>;
    (__ct_m1.542 var=146) const ()  <554>;
    call {
        () chess_separator_scheduler ()  <223>;
    } #34 off=24
    #35 off=25
    (__fch_n.238 var=85) load (__M_DMw.4 __adr_n.48 n.76)  <224>;
    call {
        () chess_separator_scheduler ()  <225>;
    } #36 off=26
    #37 off=27
    (__M_DMw.242 var=5 n.243 var=19) store (__shv___fch_n.550 __adr_n.48 n.76)  <229>;
    (__shv___fch_n.550 var=154) __uint__pl___uint___uint (__fch_n.238 __ct_m1.542)  <564>;
    call {
        () chess_separator_scheduler ()  <230>;
    } #38 off=28
    #39 off=29
    (__ct_16t0.66 var=52) const ()  <77>;
    (__adr_c.68 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_16t0.66)  <79>;
    (__tmp.560 var=91) bool__eq___uint___uint (__fch_n.238 __ct_0.96)  <604>;
    (__trgt.569 var=167) const ()  <630>;
    () void_br_bool_t13s_s2 (__tmp.560 __trgt.569)  <631>;
    (__either.570 var=163) undefined ()  <632>;
    if {
        {
            () if_expr (__either.570)  <264>;
        } #41
        {
            (__true.576 var=161) const ()  <640>;
        } #48
        {
            #43 off=30
            (__fch_s2.277 var=92) load (__M_DMw.4 __adr_s2.53 s2.80)  <265>;
            call {
                () chess_separator_scheduler ()  <266>;
            } #44 off=31
            #45 off=32
            (__M_DMw.281 var=5 s2.282 var=20) store (__shv___fch_s2.545 __adr_s2.53 s2.80)  <270>;
            (__shv___fch_s2.545 var=149) __Pvoid__pl___Pvoid___sint (__fch_s2.277 __ct_1.89)  <559>;
            call {
                () chess_separator_scheduler ()  <271>;
            } #46 off=33
            #47 off=34
            (__fch_s2__rstr.283 var=96) load (__M_DMb.2 __fch_s2.277 s2__rstr.77)  <272>;
            (__M_DMb.284 var=3 c.285 var=25) store (__fch_s2__rstr.283 __adr_c.68 c.24)  <273>;
            (__tmp.557 var=100) bool__eq___sint___sint (__fch_s2__rstr.283 __ct_0.96)  <601>;
            (__trgt.577 var=170) const ()  <641>;
            () void_br_bool_t13s_s2 (__tmp.557 __trgt.577)  <642>;
            (__either.578 var=163) undefined ()  <643>;
        } #42
        {
            (s2.293 var=20) merge (s2.80 s2.282)  <281>;
            (c.294 var=25) merge (c.24 c.285)  <282>;
            (__tmp.558 var=103) merge (__true.576 __either.578)  <602>;
        } #49
    } #40
    if {
        {
            () if_expr (__tmp.558)  <314>;
            () chess_frequent_else ()  <315>;
            () chess_rear_then ()  <644>;
        } #52
        {
            (__trgt.579 var=171) const ()  <645>;
            () void_j_t21s_s2 (__trgt.579)  <646>;
        } #79 off=53
        {
            #223 off=35
            (__trgt.571 var=168) const ()  <633>;
            (__trgt.574 var=169) const ()  <637>;
            do {
                {
                    (n.332 var=19) entry (n.435 n.243)  <322>;
                    (s2.333 var=20) entry (s2.437 s2.293)  <323>;
                    (s1.335 var=22) entry (s1.441 s1.237)  <325>;
                    (c.338 var=25) entry (c.447 c.294)  <328>;
                    (s1__rstr.340 var=61) entry (s1__rstr.451 s1__rstr.81)  <330>;
                } #55
                {
                    #57 off=36
                    (__fch_c.356 var=104) load (__M_DMb.2 __adr_c.68 c.338)  <346>;
                    (__fch_s1.357 var=105) load (__M_DMw.4 __adr_s1.58 s1.335)  <347>;
                    call {
                        () chess_separator_scheduler ()  <348>;
                    } #58 off=37
                    #59 off=38
                    (__M_DMw.361 var=5 s1.362 var=22) store (__shv___fch_s1.547 __adr_s1.58 s1.335)  <352>;
                    (__shv___fch_s1.547 var=151) __Pvoid__pl___Pvoid___sint (__fch_s1.357 __ct_1.89)  <561>;
                    call {
                        () chess_separator_scheduler ()  <353>;
                    } #60 off=39
                    #61 off=40
                    (__M_DMb.363 var=3 s1__rstr.364 var=61) store (__fch_c.356 __fch_s1.357 s1__rstr.340)  <354>;
                    call {
                        () chess_separator_scheduler ()  <355>;
                    } #62 off=41
                    #63 off=42
                    (__fch_n.365 var=109) load (__M_DMw.4 __adr_n.48 n.332)  <356>;
                    call {
                        () chess_separator_scheduler ()  <357>;
                    } #64 off=43
                    #65 off=44
                    (__M_DMw.369 var=5 n.370 var=19) store (__shv___fch_n.548 __adr_n.48 n.332)  <361>;
                    (__shv___fch_n.548 var=152) __uint__pl___uint___uint (__fch_n.365 __ct_m1.542)  <562>;
                    call {
                        () chess_separator_scheduler ()  <362>;
                    } #66 off=45
                    #67 off=46
                    (__tmp.561 var=115) bool__eq___uint___uint (__fch_n.365 __ct_0.96)  <605>;
                    () void_br_bool_t13s_s2 (__tmp.561 __trgt.571)  <634>;
                    (__either.572 var=163) undefined ()  <635>;
                    if {
                        {
                            () if_expr (__either.572)  <396>;
                        } #69
                        {
                            (__false.573 var=162) const ()  <636>;
                        } #76
                        {
                            #71 off=47
                            (__fch_s2.404 var=116) load (__M_DMw.4 __adr_s2.53 s2.333)  <397>;
                            call {
                                () chess_separator_scheduler ()  <398>;
                            } #72 off=48
                            #73 off=49
                            (__M_DMw.408 var=5 s2.409 var=20) store (__shv___fch_s2.546 __adr_s2.53 s2.333)  <402>;
                            (__shv___fch_s2.546 var=150) __Pvoid__pl___Pvoid___sint (__fch_s2.404 __ct_1.89)  <560>;
                            call {
                                () chess_separator_scheduler ()  <403>;
                            } #74 off=50
                            #75 off=51
                            (__fch_s2__rstr.410 var=120) load (__M_DMb.2 __fch_s2.404 s2__rstr.77)  <404>;
                            (__M_DMb.411 var=3 c.412 var=25) store (__fch_s2__rstr.410 __adr_c.68 c.338)  <405>;
                            (__tmp.416 var=124) bool__ne___sint___sint (__fch_s2__rstr.410 __ct_0.96)  <409>;
                            () void_br_bool_t13s_s2 (__tmp.416 __trgt.574)  <638>;
                            (__either.575 var=163) undefined ()  <639>;
                        } #70
                        {
                            (__tmp.419 var=127) merge (__false.573 __either.575)  <412>;
                            (s2.420 var=20) merge (s2.333 s2.409)  <413>;
                            (c.421 var=25) merge (c.338 c.412)  <414>;
                        } #77
                    } #68
                } #56
                {
                    () while_expr (__tmp.419)  <416>;
                    (n.435 var=19 n.436 var=19) exit (n.370)  <423>;
                    (s2.437 var=20 s2.438 var=20) exit (s2.420)  <424>;
                    (s1.441 var=22 s1.442 var=22) exit (s1.362)  <426>;
                    (c.447 var=25 c.448 var=25) exit (c.421)  <429>;
                    (s1__rstr.451 var=61 s1__rstr.452 var=61) exit (s1__rstr.364)  <431>;
                } #78
            } #54 rng=[1,2147483647]
        } #53
        {
            (n.483 var=19) merge (n.243 n.436)  <447>;
            (s2.484 var=20) merge (s2.293 s2.438)  <448>;
            (s1.485 var=22) merge (s1.237 s1.442)  <449>;
            (c.486 var=25) merge (c.294 c.448)  <450>;
            (s1__rstr.487 var=61) merge (s1__rstr.81 s1__rstr.452)  <451>;
        } #80
    } #51
    #81 off=54
    (__ct_0.491 var=128) const ()  <455>;
    (__fch_s1.493 var=130) load (__M_DMw.4 __adr_s1.58 s1.485)  <457>;
    (__M_DMb.494 var=3 s1__rstr.495 var=61) store (__ct_0.491 __fch_s1.493 s1__rstr.487)  <458>;
    call {
        () chess_separator_scheduler ()  <459>;
    } #82 off=55
    #85 off=56 nxt=-2
    (__rt.496 var=28) load (__M_DMw.4 __adr_result.63 result.87)  <460>;
    (__rd___sp.499 var=26) rd_res_reg (__R_SP.11 __sp.44)  <463>;
    (__ct_20s0.500 var=132) const ()  <464>;
    (__tmp.502 var=134) __Pvoid__pl___Pvoid___sint (__rd___sp.499 __ct_20s0.500)  <466>;
    (__R_SP.503 var=12 __sp.504 var=18) wr_res_reg (__tmp.502 __sp.44)  <467>;
    () void___rts_jr_w32 (__la.27)  <468>;
    (__rt.505 var=28 stl=X off=10) assign (__rt.496)  <469>;
    () out (__rt.505)  <470>;
    () sink (__sp.504)  <476>;
    () sink (n.483)  <477>;
    () sink (s2.484)  <478>;
    () sink (s1.485)  <480>;
    () sink (result.87)  <482>;
    () sink (c.486)  <483>;
    () sink (s2__rstr.77)  <517>;
    () sink (s1__rstr.495)  <519>;
} #0
0 : 'src/string.c';
----------
0 : (0,73:0,0);
3 : (0,73:60,0);
4 : (0,73:60,0);
5 : (0,73:34,0);
6 : (0,73:34,0);
7 : (0,73:14,0);
8 : (0,73:14,0);
9 : (0,77:19,4);
10 : (0,77:19,4);
11 : (0,78:4,6);
12 : (0,78:4,6);
13 : (0,78:4,7);
14 : (0,78:4,7);
15 : (0,78:4,7);
16 : (0,78:4,7);
18 : (0,78:4,8);
19 : (0,78:4,8);
21 : (0,79:6,8);
22 : (0,78:14,10);
23 : (0,78:14,10);
24 : (0,78:14,11);
25 : (0,78:14,11);
26 : (0,78:4,11);
28 : (0,78:4,13);
30 : (0,80:6,17);
31 : (0,80:6,17);
32 : (0,80:6,18);
34 : (0,80:6,19);
35 : (0,82:4,21);
36 : (0,82:4,21);
37 : (0,82:4,22);
38 : (0,82:4,22);
39 : (0,82:4,22);
40 : (0,82:4,22);
42 : (0,82:4,23);
43 : (0,82:4,24);
44 : (0,82:4,24);
45 : (0,82:4,25);
46 : (0,82:4,25);
47 : (0,82:4,25);
48 : (0,82:4,26);
51 : (0,82:4,28);
53 : (0,82:4,29);
54 : (0,82:4,29);
56 : (0,82:37,29);
57 : (0,82:34,30);
58 : (0,82:34,30);
59 : (0,82:34,31);
60 : (0,82:34,31);
61 : (0,82:37,32);
62 : (0,82:37,32);
63 : (0,82:12,33);
64 : (0,82:12,33);
65 : (0,82:12,34);
66 : (0,82:12,34);
67 : (0,82:15,34);
68 : (0,82:15,34);
70 : (0,82:15,35);
71 : (0,82:26,36);
72 : (0,82:26,36);
73 : (0,82:26,37);
74 : (0,82:26,37);
75 : (0,82:15,37);
76 : (0,82:15,38);
79 : (0,82:4,42);
81 : (0,83:8,46);
82 : (0,83:8,46);
85 : (0,84:4,46);
----------
50 : (0,73:6,0);
51 : (0,73:6,0);
53 : (0,73:6,0);
54 : (0,73:6,0);
56 : (0,73:67,0);
57 : (0,73:67,0);
59 : (0,73:67,0);
61 : (0,73:56,0);
62 : (0,73:56,0);
64 : (0,73:56,0);
66 : (0,73:30,0);
67 : (0,73:30,0);
69 : (0,73:30,0);
71 : (0,77:10,0);
72 : (0,77:10,0);
74 : (0,77:10,0);
76 : (0,81:9,0);
77 : (0,81:9,0);
79 : (0,81:9,0);
86 : (0,73:60,0);
87 : (0,73:60,0);
89 : (0,73:34,0);
90 : (0,73:34,0);
92 : (0,73:14,0);
93 : (0,73:14,0);
94 : (0,77:19,4);
95 : (0,77:19,4);
96 : (0,77:19,4);
97 : (0,78:4,5);
98 : (0,78:4,6);
99 : (0,78:4,0);
102 : (0,78:4,6);
103 : (0,78:4,7);
104 : (0,78:4,7);
106 : (0,78:4,0);
139 : (0,78:4,7);
150 : (0,78:4,8);
171 : (0,78:12,9);
172 : (0,78:14,10);
176 : (0,78:12,10);
177 : (0,78:14,11);
178 : (0,78:11,11);
182 : (0,78:4,11);
183 : (0,78:4,11);
193 : (0,78:4,11);
214 : (0,78:4,15);
216 : (0,80:4,16);
217 : (0,80:6,17);
220 : (0,80:6,17);
221 : (0,80:4,17);
223 : (0,80:6,19);
224 : (0,82:4,20);
225 : (0,82:4,21);
229 : (0,82:4,21);
230 : (0,82:4,22);
264 : (0,82:4,22);
265 : (0,82:4,23);
266 : (0,82:4,24);
270 : (0,82:4,24);
271 : (0,82:4,25);
272 : (0,82:4,25);
273 : (0,82:4,25);
281 : (0,82:4,27);
282 : (0,82:4,27);
314 : (0,82:4,28);
322 : (0,82:4,29);
323 : (0,82:4,29);
325 : (0,82:4,29);
328 : (0,82:4,29);
330 : (0,82:4,29);
346 : (0,82:39,29);
347 : (0,82:32,29);
348 : (0,82:34,30);
352 : (0,82:32,30);
353 : (0,82:34,31);
354 : (0,82:31,31);
355 : (0,82:37,32);
356 : (0,82:11,32);
357 : (0,82:12,33);
361 : (0,82:11,33);
362 : (0,82:12,34);
396 : (0,82:15,34);
397 : (0,82:24,35);
398 : (0,82:26,36);
402 : (0,82:24,36);
403 : (0,82:26,37);
404 : (0,82:23,37);
405 : (0,82:19,37);
409 : (0,82:15,37);
412 : (0,82:15,39);
413 : (0,82:15,39);
414 : (0,82:15,39);
416 : (0,82:4,40);
423 : (0,82:4,40);
424 : (0,82:4,40);
426 : (0,82:4,40);
429 : (0,82:4,40);
431 : (0,82:4,40);
447 : (0,82:4,44);
448 : (0,82:4,44);
449 : (0,82:4,44);
450 : (0,82:4,44);
451 : (0,82:4,44);
455 : (0,83:8,0);
457 : (0,83:5,45);
458 : (0,83:4,45);
459 : (0,83:8,46);
460 : (0,84:11,46);
463 : (0,84:4,0);
464 : (0,84:4,0);
466 : (0,84:4,0);
467 : (0,84:4,46);
468 : (0,84:4,46);
469 : (0,84:11,0);
554 : (0,80:6,0);
558 : (0,78:14,0);
559 : (0,82:4,0);
560 : (0,82:26,0);
561 : (0,82:34,0);
562 : (0,82:12,0);
563 : (0,78:4,0);
564 : (0,82:4,0);
601 : (0,82:4,25);
602 : (0,82:4,27);
603 : (0,78:4,7);
604 : (0,82:4,22);
605 : (0,82:15,34);
622 : (0,78:4,11);
625 : (0,78:4,7);
631 : (0,82:4,22);
634 : (0,82:15,34);
638 : (0,82:4,40);
642 : (0,82:4,28);

