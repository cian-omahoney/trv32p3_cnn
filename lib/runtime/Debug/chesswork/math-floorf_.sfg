
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Apr 10 20:00:44 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float floorf(float)
Ffloorf : user_defined, called {
    fnm : "floorf" 'float floorf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=16 );
}
****
!!  bool f32_lt(float32_t, float32_t)
Ff32_lt : user_defined, called {
    fnm : "f32_lt" 'bool f32_lt(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : floorf typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : x typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   20 : i0 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   21 : j0 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   22 : i typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=u_int32_t_DMb
   23 : __rd___sp typ=w32 bnd=m
   24 : __la typ=w32 bnd=p tref=w32__
   25 : __rt typ=w32 bnd=p tref=__ffloat__
   26 : __arg_x typ=w32 bnd=p tref=__ffloat__
   27 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   31 : __ct_0t0 typ=w32 val=0t0 bnd=m
   33 : __adr_x typ=w32 bnd=m adro=19
   35 : __ct_4t0 typ=w32 val=4t0 bnd=m
   37 : __adr_i0 typ=w32 bnd=m adro=20
   39 : __ct_8t0 typ=w32 val=8t0 bnd=m
   41 : __adr_j0 typ=w32 bnd=m adro=21
   43 : __ct_12t0 typ=w32 val=12t0 bnd=m
   45 : __adr_i typ=w32 bnd=m adro=22
   46 : __fch_x typ=w32 bnd=m
   48 : __fch_i0 typ=w32 bnd=m
   49 : __ct_23 typ=w32 val=23f bnd=m
   51 : __tmp typ=w32 bnd=m
   52 : __ct_255 typ=w32 val=255f bnd=m
   54 : __tmp typ=w32 bnd=m
   57 : __tmp typ=w32 bnd=m
   58 : __fch_j0 typ=w32 bnd=m
   61 : __tmp typ=bool bnd=m
   62 : __fch_j0 typ=w32 bnd=m
   63 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   65 : __tmp typ=bool bnd=m
   66 : __ct_1900671690 typ=w32 val=1900671690f bnd=m
   68 : __fch_x typ=w32 bnd=m
   69 : __tmp typ=w32 bnd=m
   72 : __tmp typ=bool bnd=m
   73 : __fch_i0 typ=w32 bnd=m
   76 : __tmp typ=bool bnd=m
   79 : __fch_i0 typ=w32 bnd=m
   80 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   82 : __tmp typ=w32 bnd=m
   85 : __tmp typ=bool bnd=m
   86 : __ct_m1082130432 typ=t20s_rp12 val=-264192f bnd=m
   88 : __ct_8388607 typ=w32 val=8388607f bnd=m
   90 : __fch_j0 typ=w32 bnd=m
   91 : __tmp typ=w32 bnd=m
   92 : __fch_i0 typ=w32 bnd=m
   94 : __fch_i typ=w32 bnd=m
   95 : __tmp typ=w32 bnd=m
   98 : __tmp typ=bool bnd=m
  100 : __ct_16s0 typ=w32 val=16s0 bnd=m
  102 : __tmp typ=w32 bnd=m
  105 : __fch_x typ=w32 bnd=m
  106 : __tmp typ=w32 bnd=m
  109 : __tmp typ=bool bnd=m
  110 : __fch_i0 typ=w32 bnd=m
  113 : __tmp typ=bool bnd=m
  114 : __fch_i0 typ=w32 bnd=m
  116 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
  118 : __fch_j0 typ=w32 bnd=m
  119 : __tmp typ=w32 bnd=m
  120 : __tmp typ=w32 bnd=m
  122 : __fch_i0 typ=w32 bnd=m
  124 : __fch_i typ=w32 bnd=m
  125 : __tmp typ=w32 bnd=m
  126 : __tmp typ=w32 bnd=m
  128 : __fch_i0 typ=w32 bnd=m
  131 : __fch_j0 typ=w32 bnd=m
  132 : __ct_128 typ=w32 val=128f bnd=m
  134 : __tmp typ=bool bnd=m
  135 : __fch_x typ=w32 bnd=m
  136 : __fch_x typ=w32 bnd=m
  141 : __tmp typ=w32 bnd=m
  146 : __ct_m127 typ=w32 val=-127f bnd=m
  156 : __ct_4294967295 typ=w32 val=-1f bnd=m
  161 : a typ=w32 bnd=m tref=float32_t__
  162 : b typ=w32 bnd=m tref=float32_t__
  163 : f32_lt typ=t21s_s2 val=0r bnd=m
  164 : __link typ=w32 bnd=m
  165 : __tmp typ=w32 bnd=m
  171 : a typ=w32 bnd=m tref=float32_t__
  172 : b typ=w32 bnd=m tref=float32_t__
  173 : f32_add typ=t21s_s2 val=0r bnd=m
  174 : __link typ=w32 bnd=m
  187 : __either typ=bool bnd=m
  188 : __trgt typ=t13s_s2 val=0j bnd=m
  189 : __trgt typ=t21s_s2 val=0j bnd=m
  190 : __trgt typ=t13s_s2 val=0j bnd=m
  191 : __trgt typ=t21s_s2 val=0j bnd=m
  192 : __trgt typ=t13s_s2 val=0j bnd=m
  193 : __trgt typ=t21s_s2 val=0j bnd=m
  194 : __trgt typ=t13s_s2 val=0j bnd=m
  195 : __trgt typ=t13s_s2 val=0j bnd=m
  196 : __trgt typ=t21s_s2 val=0j bnd=m
  197 : __trgt typ=t13s_s2 val=0j bnd=m
  198 : __trgt typ=t21s_s2 val=0j bnd=m
  199 : __trgt typ=t13s_s2 val=0j bnd=m
  200 : __trgt typ=t21s_s2 val=0j bnd=m
  201 : __trgt typ=t13s_s2 val=0j bnd=m
  202 : __trgt typ=t21s_s2 val=0j bnd=m
  203 : __trgt typ=t13s_s2 val=0j bnd=m
  204 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ffloorf {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (x.18 var=19) source ()  <29>;
    (i0.19 var=20) source ()  <30>;
    (j0.20 var=21) source ()  <31>;
    (i.21 var=22) source ()  <32>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (__arg_x.27 var=26 stl=X off=11) inp ()  <38>;
    (__arg_x.28 var=26) deassign (__arg_x.27)  <39>;
    (__rd___sp.30 var=23) rd_res_reg (__R_SP.11 __sp.17)  <41>;
    (__ct_m16S0.31 var=27) const ()  <42>;
    (__tmp.33 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.30 __ct_m16S0.31)  <44>;
    (__R_SP.34 var=12 __sp.35 var=18) wr_res_reg (__tmp.33 __sp.17)  <45>;
    (__rd___sp.36 var=23) rd_res_reg (__R_SP.11 __sp.35)  <47>;
    (__ct_0t0.37 var=31) const ()  <48>;
    (__adr_x.39 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0t0.37)  <50>;
    (__rd___sp.41 var=23) rd_res_reg (__R_SP.11 __sp.35)  <52>;
    (__rd___sp.46 var=23) rd_res_reg (__R_SP.11 __sp.35)  <57>;
    (__rd___sp.51 var=23) rd_res_reg (__R_SP.11 __sp.35)  <62>;
    (__M_DMw.56 var=5 x.57 var=19) store (__arg_x.28 __adr_x.39 x.18)  <67>;
    call {
        () chess_separator_scheduler ()  <68>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.42 var=35) const ()  <53>;
    (__adr_i0.44 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_4t0.42)  <55>;
    (__fch_x.58 var=46) load (__M_DMw.4 __adr_x.39 x.57)  <69>;
    (__M_DMw.60 var=5 i0.61 var=20) store (__fch_x.58 __adr_i0.44 i0.19)  <71>;
    call {
        () chess_separator_scheduler ()  <72>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.47 var=39) const ()  <58>;
    (__adr_j0.49 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_8t0.47)  <60>;
    (__fch_i0.62 var=48) load (__M_DMw.4 __adr_i0.44 i0.61)  <73>;
    (__ct_23.63 var=49) const ()  <74>;
    (__tmp.65 var=51) __sint__rs___sint___sint (__fch_i0.62 __ct_23.63)  <76>;
    (__ct_255.66 var=52) const ()  <77>;
    (__tmp.68 var=54) __sint__ad___sint___sint (__tmp.65 __ct_255.66)  <79>;
    (__tmp.71 var=57) __sint__pl___sint___sint (__tmp.68 __ct_m127.426)  <82>;
    (__M_DMw.72 var=5 j0.73 var=21) store (__tmp.71 __adr_j0.49 j0.20)  <83>;
    (__ct_m127.426 var=146) const ()  <512>;
    call {
        () chess_separator_scheduler ()  <84>;
    } #8 off=5
    #9 off=6
    (__fch_j0.74 var=58) load (__M_DMw.4 __adr_j0.49 j0.73)  <85>;
    (__tmp.77 var=61) bool__lt___sint___sint (__fch_j0.74 __ct_23.63)  <88>;
    (__ct_16s0.228 var=100) const ()  <245>;
    (f32_add.471 var=173) const ()  <637>;
    (__trgt.532 var=203) const ()  <789>;
    () void_br_bool_t13s_s2 (__tmp.77 __trgt.532)  <790>;
    (__either.533 var=187) undefined ()  <791>;
    if {
        {
            () if_expr (__either.533)  <106>;
        } #11
        {
            #13 off=12
            (__fch_j0.95 var=62) load (__M_DMw.4 __adr_j0.49 j0.73)  <107>;
            (__ct_0.96 var=63) const ()  <108>;
            (__tmp.98 var=65) bool__lt___sint___sint (__fch_j0.95 __ct_0.96)  <110>;
            (__ct_1900671690.116 var=66) const ()  <129>;
            (f32_lt.445 var=163) const ()  <583>;
            (__trgt.526 var=199) const ()  <779>;
            () void_br_bool_t13s_s2 (__tmp.98 __trgt.526)  <780>;
            (__either.527 var=187) undefined ()  <781>;
            if {
                {
                    () if_expr (__either.527)  <128>;
                } #15
                {
                    #130 off=29
                    (__fch_x.118 var=68) load (__M_DMw.4 __adr_x.39 x.57)  <131>;
                    (__link.472 var=174) w32_jal_t21s_s2 (f32_add.471)  <638>;
                    call {
                        (a.473 var=171 stl=X off=11) assign (__ct_1900671690.116)  <639>;
                        (b.474 var=172 stl=X off=12) assign (__fch_x.118)  <640>;
                        (__link.475 var=174 stl=X off=1) assign (__link.472)  <641>;
                        (__tmp.476 var=69 stl=X off=10) Ff32_add (__link.475 a.473 b.474)  <642>;
                        (__tmp.477 var=69) deassign (__tmp.476)  <643>;
                    } #131 off=30
                    #127 off=31
                    (__link.446 var=164) w32_jal_t21s_s2 (f32_lt.445)  <584>;
                    call {
                        (a.448 var=161 stl=X off=11) assign (__ct_0.96)  <586>;
                        (b.449 var=162 stl=X off=12) assign (__tmp.477)  <587>;
                        (__link.450 var=164 stl=X off=1) assign (__link.446)  <588>;
                        (__tmp.451 var=165 stl=X off=10) Ff32_lt (__link.450 a.448 b.449)  <589>;
                        (__tmp.452 var=165) deassign (__tmp.451)  <590>;
                    } #113 off=32
                    #114 off=33
                    (__tmp.504 var=72) bool__eq___sint___sint (__tmp.452 __ct_0.96)  <724>;
                    (__trgt.515 var=192) const ()  <760>;
                    () void_br_bool_t13s_s2 (__tmp.504 __trgt.515)  <761>;
                    (__either.516 var=187) undefined ()  <762>;
                    if {
                        {
                            () if_expr (__either.516)  <153>;
                        } #19
                        {
                        } #37 off=41
                        {
                            #21 off=34
                            (__fch_i0.140 var=73) load (__M_DMw.4 __adr_i0.44 i0.61)  <154>;
                            (__tmp.143 var=76) bool__ge___sint___sint (__fch_i0.140 __ct_0.96)  <157>;
                            (__trgt.512 var=190) const ()  <755>;
                            () void_br_bool_t13s_s2 (__tmp.143 __trgt.512)  <756>;
                            (__either.513 var=187) undefined ()  <757>;
                            if {
                                {
                                    () if_expr (__either.513)  <175>;
                                } #23
                                {
                                    (__M_DMw.163 var=5 i0.164 var=20) store (__ct_0.96 __adr_i0.44 i0.61)  <178>;
                                } #25 off=39
                                {
                                    #28 off=35
                                    (__fch_i0.165 var=79) load (__M_DMw.4 __adr_i0.44 i0.61)  <180>;
                                    (__ct_2147483647.166 var=80) const ()  <181>;
                                    (__tmp.168 var=82) __sint__ad___sint___sint (__fch_i0.165 __ct_2147483647.166)  <183>;
                                    (__tmp.503 var=85) bool__eq___sint___sint (__tmp.168 __ct_0.96)  <723>;
                                    (__trgt.509 var=188) const ()  <750>;
                                    () void_br_bool_t13s_s2 (__tmp.503 __trgt.509)  <751>;
                                    (__either.510 var=187) undefined ()  <752>;
                                    if {
                                        {
                                            () if_expr (__either.510)  <204>;
                                        } #30
                                        {
                                        } #34 off=37
                                        {
                                            (__ct_m1082130432.189 var=86) const ()  <205>;
                                            (__M_DMw.191 var=5 i0.192 var=20) store (__ct_m1082130432.189 __adr_i0.44 i0.61)  <207>;
                                            (__trgt.511 var=189) const ()  <753>;
                                            () void_j_t21s_s2 (__trgt.511)  <754>;
                                        } #32 off=36
                                        {
                                            (i0.193 var=20) merge (i0.61 i0.192)  <209>;
                                        } #35
                                    } #29
                                    #153 off=38
                                    (__trgt.514 var=191) const ()  <758>;
                                    () void_j_t21s_s2 (__trgt.514)  <759>;
                                } #27
                                {
                                    (i0.194 var=20) merge (i0.164 i0.193)  <210>;
                                } #36
                            } #22
                            #154 off=40
                            (__trgt.517 var=193) const ()  <763>;
                            () void_j_t21s_s2 (__trgt.517)  <764>;
                        } #20
                        {
                            (i0.195 var=20) merge (i0.61 i0.194)  <211>;
                        } #38
                    } #18
                } #16
                {
                    #40 off=13
                    (__ct_12t0.52 var=43) const ()  <63>;
                    (__adr_i.54 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_12t0.52)  <65>;
                    (__ct_8388607.196 var=88) const ()  <212>;
                    (__fch_j0.198 var=90) load (__M_DMw.4 __adr_j0.49 j0.73)  <214>;
                    (__tmp.199 var=91) __uint__rs___uint___sint (__ct_8388607.196 __fch_j0.198)  <215>;
                    (__M_DMw.200 var=5 i.201 var=22) store (__tmp.199 __adr_i.54 i.21)  <216>;
                    call {
                        () chess_separator_scheduler ()  <217>;
                    } #41 off=14
                    #42 off=15
                    (__fch_i0.202 var=92) load (__M_DMw.4 __adr_i0.44 i0.61)  <218>;
                    (__fch_i.204 var=94) load (__M_DMw.4 __adr_i.54 i.201)  <220>;
                    (__tmp.205 var=95) __uint__ad___uint___uint (__fch_i0.202 __fch_i.204)  <221>;
                    (__tmp.208 var=98) bool__eq___uint___uint (__tmp.205 __ct_0.96)  <224>;
                    (__trgt.518 var=194) const ()  <765>;
                    () void_br_bool_t13s_s2 (__tmp.208 __trgt.518)  <766>;
                    (__either.519 var=187) undefined ()  <767>;
                    if {
                        {
                            () if_expr (__either.519)  <242>;
                            () chess_rear_then ()  <768>;
                        } #44
                        {
                            (__rt.226 var=25) load (__M_DMw.4 __adr_x.39 x.57)  <243>;
                            (__rd___sp.227 var=23) rd_res_reg (__R_SP.11 __sp.35)  <244>;
                            (__tmp.230 var=102) __Pvoid__pl___Pvoid___sint (__rd___sp.227 __ct_16s0.228)  <247>;
                            (__R_SP.231 var=12 __sp.232 var=18) wr_res_reg (__tmp.230 __sp.35)  <248>;
                            () void___rts_jr_w32 (__la.24)  <249>;
                            (__rt.233 var=25 stl=X off=10) assign (__rt.226)  <250>;
                            () out (__rt.233)  <251>;
                            () sink (__sp.232)  <257>;
                            () sink (x.57)  <258>;
                            () sink (i0.61)  <259>;
                            () sink (j0.73)  <260>;
                            () sink (i.201)  <261>;
                        } #48 off=17 nxt=-2
                        {
                        } #49 off=16
                        {
                        } #50
                    } #43
                    #139 off=18
                    (__fch_x.270 var=105) load (__M_DMw.4 __adr_x.39 x.57)  <298>;
                    (__link.482 var=174) w32_jal_t21s_s2 (f32_add.471)  <651>;
                    call {
                        (a.483 var=171 stl=X off=11) assign (__ct_1900671690.116)  <652>;
                        (b.484 var=172 stl=X off=12) assign (__fch_x.270)  <653>;
                        (__link.485 var=174 stl=X off=1) assign (__link.482)  <654>;
                        (__tmp.486 var=106 stl=X off=10) Ff32_add (__link.485 a.483 b.484)  <655>;
                        (__tmp.487 var=106) deassign (__tmp.486)  <656>;
                    } #140 off=19
                    #136 off=20
                    (__link.458 var=164) w32_jal_t21s_s2 (f32_lt.445)  <599>;
                    call {
                        (a.460 var=161 stl=X off=11) assign (__ct_0.96)  <601>;
                        (b.461 var=162 stl=X off=12) assign (__tmp.487)  <602>;
                        (__link.462 var=164 stl=X off=1) assign (__link.458)  <603>;
                        (__tmp.463 var=165 stl=X off=10) Ff32_lt (__link.462 a.460 b.461)  <604>;
                        (__tmp.464 var=165) deassign (__tmp.463)  <605>;
                    } #122 off=21
                    #123 off=22
                    (__tmp.506 var=109) bool__eq___sint___sint (__tmp.464 __ct_0.96)  <726>;
                    (__trgt.523 var=197) const ()  <774>;
                    () void_br_bool_t13s_s2 (__tmp.506 __trgt.523)  <775>;
                    (__either.524 var=187) undefined ()  <776>;
                    if {
                        {
                            () if_expr (__either.524)  <320>;
                        } #53
                        {
                        } #65 off=27
                        {
                            #55 off=23
                            (__fch_i0.292 var=110) load (__M_DMw.4 __adr_i0.44 i0.61)  <321>;
                            (__tmp.505 var=113) bool__ge___sint___sint (__fch_i0.292 __ct_0.96)  <725>;
                            (__trgt.520 var=195) const ()  <769>;
                            () void_br_bool_t13s_s2 (__tmp.505 __trgt.520)  <770>;
                            (__either.521 var=187) undefined ()  <771>;
                            if {
                                {
                                    () if_expr (__either.521)  <342>;
                                } #57
                                {
                                } #61 off=25
                                {
                                    (__fch_i0.313 var=114) load (__M_DMw.4 __adr_i0.44 i0.61)  <343>;
                                    (__ct_8388608.315 var=116) const ()  <345>;
                                    (__fch_j0.317 var=118) load (__M_DMw.4 __adr_j0.49 j0.73)  <347>;
                                    (__tmp.318 var=119) __uint__rs___uint___sint (__ct_8388608.315 __fch_j0.317)  <348>;
                                    (__tmp.319 var=120) __uint__pl___uint___uint (__fch_i0.313 __tmp.318)  <349>;
                                    (__M_DMw.321 var=5 i0.322 var=20) store (__tmp.319 __adr_i0.44 i0.61)  <351>;
                                    (__trgt.522 var=196) const ()  <772>;
                                    () void_j_t21s_s2 (__trgt.522)  <773>;
                                } #59 off=24
                                {
                                    (i0.323 var=20) merge (i0.61 i0.322)  <353>;
                                } #62
                            } #56
                            #103 off=26
                            (__fch_i0.324 var=122) load (__M_DMw.4 __adr_i0.44 i0.323)  <354>;
                            (__fch_i.326 var=124) load (__M_DMw.4 __adr_i.54 i.201)  <356>;
                            (__tmp.328 var=126) __uint__ad___uint___uint (__fch_i0.324 __tmp.439)  <358>;
                            (__M_DMw.330 var=5 i0.331 var=20) store (__tmp.328 __adr_i0.44 i0.323)  <360>;
                            (__ct_4294967295.438 var=156) const ()  <552>;
                            (__tmp.439 var=125) __uint__er___uint___uint (__fch_i.326 __ct_4294967295.438)  <553>;
                            (__trgt.525 var=198) const ()  <777>;
                            () void_j_t21s_s2 (__trgt.525)  <778>;
                        } #54
                        {
                            (i0.332 var=20) merge (i0.61 i0.331)  <362>;
                        } #66
                    } #52
                    #156 off=28
                    (__trgt.528 var=200) const ()  <782>;
                    () void_j_t21s_s2 (__trgt.528)  <783>;
                } #39
                {
                    (i0.340 var=20) merge (i0.195 i0.332)  <370>;
                    (i.342 var=22) merge (i.21 i.201)  <372>;
                } #67
            } #14
            #68 off=43
            (__fch_i0.350 var=128) load (__M_DMw.4 __adr_i0.44 i0.340)  <380>;
            (__M_DMw.352 var=5 x.353 var=19) store (__fch_i0.350 __adr_x.39 x.57)  <382>;
            call {
                () chess_separator_scheduler ()  <383>;
            } #69 off=44
            #70 off=45
            (__rt.354 var=25) load (__M_DMw.4 __adr_x.39 x.353)  <384>;
        } #12
        {
            #73 off=7
            (__fch_j0.355 var=131) load (__M_DMw.4 __adr_j0.49 j0.73)  <386>;
            (__ct_128.356 var=132) const ()  <387>;
            (__tmp.358 var=134) bool__eq___sint___sint (__fch_j0.355 __ct_128.356)  <389>;
            (__trgt.529 var=201) const ()  <784>;
            () void_br_bool_t13s_s2 (__tmp.358 __trgt.529)  <785>;
            (__either.530 var=187) undefined ()  <786>;
            if {
                {
                    () if_expr (__either.530)  <407>;
                } #75
                {
                    #148 off=9
                    (__fch_x.376 var=135) load (__M_DMw.4 __adr_x.39 x.57)  <408>;
                    (__fch_x.377 var=136) load (__M_DMw.4 __adr_x.39 x.57)  <409>;
                    (__link.492 var=174) w32_jal_t21s_s2 (f32_add.471)  <664>;
                    call {
                        (a.493 var=171 stl=X off=11) assign (__fch_x.376)  <665>;
                        (b.494 var=172 stl=X off=12) assign (__fch_x.377)  <666>;
                        (__link.495 var=174 stl=X off=1) assign (__link.492)  <667>;
                        (__rt.496 var=25 stl=X off=10) Ff32_add (__link.495 a.493 b.494)  <668>;
                        (__rt.497 var=25) deassign (__rt.496)  <669>;
                    } #149 off=10
                } #76
                {
                    (__rt.379 var=25) load (__M_DMw.4 __adr_x.39 x.57)  <412>;
                    (__trgt.531 var=202) const ()  <787>;
                    () void_j_t21s_s2 (__trgt.531)  <788>;
                } #80 off=8
                {
                    (__rt.380 var=25) merge (__rt.497 __rt.379)  <414>;
                } #82
            } #74
            #157 off=11
            (__trgt.534 var=204) const ()  <792>;
            () void_j_t21s_s2 (__trgt.534)  <793>;
        } #72
        {
            (x.387 var=19) merge (x.353 x.57)  <422>;
            (i0.388 var=20) merge (i0.340 i0.61)  <423>;
            (i.390 var=22) merge (i.342 i.21)  <425>;
            (__rt.397 var=25) merge (__rt.354 __rt.380)  <432>;
        } #84
    } #10
    #86 off=46 nxt=-2
    (__rd___sp.398 var=23) rd_res_reg (__R_SP.11 __sp.35)  <433>;
    (__tmp.401 var=141) __Pvoid__pl___Pvoid___sint (__rd___sp.398 __ct_16s0.228)  <436>;
    (__R_SP.402 var=12 __sp.403 var=18) wr_res_reg (__tmp.401 __sp.35)  <437>;
    () void___rts_jr_w32 (__la.24)  <438>;
    (__rt.404 var=25 stl=X off=10) assign (__rt.397)  <439>;
    () out (__rt.404)  <440>;
    () sink (__sp.403)  <446>;
    () sink (x.387)  <447>;
    () sink (i0.388)  <448>;
    () sink (j0.73)  <449>;
    () sink (i.390)  <450>;
} #0
0 : 'src/math.c';
----------
0 : (0,204:0,0);
3 : (0,204:13,0);
4 : (0,204:13,0);
5 : (0,210:4,6);
6 : (0,210:4,6);
7 : (0,211:7,8);
8 : (0,211:7,8);
9 : (0,212:9,8);
10 : (0,212:4,8);
12 : (0,227:8,9);
13 : (0,213:13,9);
14 : (0,213:8,9);
16 : (0,213:17,10);
18 : (0,214:12,10);
20 : (0,214:34,11);
21 : (0,215:21,11);
22 : (0,215:16,11);
25 : (0,215:29,13);
27 : (0,216:21,15);
28 : (0,216:39,15);
29 : (0,216:21,15);
32 : (0,216:48,17);
34 : (0,216:21,19);
37 : (0,214:12,26);
39 : (0,218:15,31);
40 : (0,219:14,32);
41 : (0,219:14,32);
42 : (0,220:21,32);
43 : (0,220:12,32);
48 : (0,220:26,33);
49 : (0,220:12,36);
52 : (0,221:12,39);
54 : (0,221:34,40);
55 : (0,222:21,40);
56 : (0,222:16,40);
59 : (0,222:28,42);
61 : (0,222:16,43);
65 : (0,221:12,49);
68 : (0,230:3,57);
69 : (0,230:3,57);
70 : (0,231:4,58);
72 : (0,226:11,60);
73 : (0,227:13,60);
74 : (0,227:8,60);
76 : (0,228:13,61);
80 : (0,228:13,65);
86 : (0,231:4,73);
103 : (0,223:16,46);
113 : (0,214:21,10);
114 : (0,214:21,10);
122 : (0,221:21,39);
123 : (0,221:21,39);
127 : (0,214:21,10);
130 : (0,214:19,10);
131 : (0,214:19,10);
136 : (0,221:21,39);
139 : (0,221:19,39);
140 : (0,221:19,39);
148 : (0,227:29,61);
149 : (0,227:29,61);
----------
41 : (0,204:6,0);
42 : (0,204:6,0);
44 : (0,204:6,0);
45 : (0,204:6,0);
47 : (0,204:19,0);
48 : (0,204:19,0);
50 : (0,204:19,0);
52 : (0,208:12,0);
53 : (0,208:12,0);
55 : (0,208:12,0);
57 : (0,208:15,0);
58 : (0,208:15,0);
60 : (0,208:15,0);
62 : (0,209:14,0);
63 : (0,209:14,0);
65 : (0,209:14,0);
67 : (0,204:13,0);
68 : (0,204:13,0);
69 : (0,210:15,5);
71 : (0,210:1,5);
72 : (0,210:4,6);
73 : (0,211:11,7);
74 : (0,211:15,0);
76 : (0,211:13,7);
77 : (0,211:19,0);
79 : (0,211:18,7);
82 : (0,211:24,7);
83 : (0,211:4,7);
84 : (0,211:7,8);
85 : (0,212:7,8);
88 : (0,212:9,8);
106 : (0,212:4,8);
107 : (0,213:11,9);
108 : (0,213:14,0);
110 : (0,213:13,9);
128 : (0,213:8,9);
129 : (0,214:15,0);
131 : (0,214:20,10);
153 : (0,214:12,10);
154 : (0,215:19,11);
157 : (0,215:21,11);
175 : (0,215:16,11);
178 : (0,215:27,12);
180 : (0,216:25,15);
181 : (0,216:28,0);
183 : (0,216:27,15);
204 : (0,216:21,15);
205 : (0,216:48,0);
207 : (0,216:46,16);
209 : (0,216:21,21);
210 : (0,215:16,23);
211 : (0,214:12,28);
212 : (0,219:16,0);
214 : (0,219:41,31);
215 : (0,219:39,31);
216 : (0,219:12,31);
217 : (0,219:14,32);
218 : (0,220:16,32);
220 : (0,220:19,32);
221 : (0,220:18,32);
224 : (0,220:21,32);
242 : (0,220:12,32);
243 : (0,220:33,33);
244 : (0,220:26,0);
245 : (0,220:26,0);
247 : (0,220:26,0);
248 : (0,220:26,33);
249 : (0,220:26,33);
250 : (0,220:33,0);
298 : (0,221:20,39);
320 : (0,221:12,39);
321 : (0,222:19,40);
342 : (0,222:16,40);
343 : (0,222:25,41);
345 : (0,222:31,0);
347 : (0,222:56,41);
348 : (0,222:54,41);
349 : (0,222:28,41);
351 : (0,222:25,41);
353 : (0,222:16,45);
354 : (0,223:16,46);
356 : (0,223:24,46);
358 : (0,223:19,46);
360 : (0,223:16,46);
362 : (0,221:12,51);
370 : (0,213:8,54);
372 : (0,213:8,54);
380 : (0,230:14,56);
382 : (0,230:1,56);
383 : (0,230:3,57);
384 : (0,231:11,57);
386 : (0,227:11,60);
387 : (0,227:15,0);
389 : (0,227:13,60);
407 : (0,227:8,60);
408 : (0,227:28,61);
409 : (0,227:30,61);
412 : (0,228:20,64);
414 : (0,227:8,67);
422 : (0,212:4,71);
423 : (0,212:4,71);
425 : (0,212:4,71);
432 : (0,212:4,71);
433 : (0,231:4,0);
436 : (0,231:4,0);
437 : (0,231:4,73);
438 : (0,231:4,73);
439 : (0,231:4,0);
512 : (0,211:24,0);
552 : (0,223:23,0);
553 : (0,223:23,46);
583 : (0,214:21,0);
584 : (0,214:21,10);
586 : (0,214:21,10);
587 : (0,214:21,10);
588 : (0,214:21,10);
589 : (0,214:21,10);
590 : (0,214:21,10);
599 : (0,221:21,39);
601 : (0,221:21,39);
602 : (0,221:21,39);
603 : (0,221:21,39);
604 : (0,221:21,39);
605 : (0,221:21,39);
637 : (0,214:19,0);
638 : (0,214:19,10);
639 : (0,214:19,10);
640 : (0,214:19,10);
641 : (0,214:19,10);
642 : (0,214:19,10);
643 : (0,214:19,10);
651 : (0,221:19,39);
652 : (0,221:19,39);
653 : (0,221:19,39);
654 : (0,221:19,39);
655 : (0,221:19,39);
656 : (0,221:19,39);
664 : (0,227:29,61);
665 : (0,227:29,61);
666 : (0,227:29,61);
667 : (0,227:29,61);
668 : (0,227:29,61);
669 : (0,227:29,61);
723 : (0,216:39,15);
724 : (0,214:21,10);
725 : (0,222:21,40);
726 : (0,221:21,39);
751 : (0,216:21,15);
756 : (0,215:16,11);
761 : (0,214:12,10);
766 : (0,220:12,32);
770 : (0,222:16,40);
775 : (0,221:12,39);
780 : (0,213:8,9);
785 : (0,227:8,60);
790 : (0,212:4,8);

