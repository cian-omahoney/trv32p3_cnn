
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 16:33:38 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  size_t strxfrm(char * restrict, const char * restrict, size_t)
Fstrxfrm : user_defined, called {
    fnm : "strxfrm" 'size_t strxfrm(char * restrict, const char * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=20 );
}
****
!!  size_t strlen(const char *)
Fstrlen : user_defined, called {
    fnm : "strlen" 'size_t strlen(const char *)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
}
***/

[
    0 : strxfrm typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   13 : __vola typ=u08 bnd=b stl=PMb
   16 : __extPMb typ=u08 bnd=b stl=PMb
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : n typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   20 : s2 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : __arg_s2__rstr typ=w08 bnd=b stl=DMb
   22 : s1 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   23 : __arg_s1__rstr typ=w08 bnd=b stl=DMb
   24 : result typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   25 : i typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb lscp=16 tref=size_t_DMb
   26 : __extPMb_void typ=u08 bnd=b stl=PMb
   27 : __extDMb_void typ=w08 bnd=b stl=DMb
   28 : __rd___sp typ=w32 bnd=m
   29 : __la typ=w32 bnd=p tref=w32__
   30 : __rt typ=w32 bnd=p tref=size_t__
   31 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   32 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   33 : __arg_n typ=w32 bnd=p tref=size_t__
   34 : __ct_m20S0 typ=w32 val=-20S0 bnd=m
   36 : __tmp typ=w32 bnd=m
   38 : __ct_0t0 typ=w32 val=0t0 bnd=m
   40 : __adr_n typ=w32 bnd=m adro=19
   42 : __ct_4t0 typ=w32 val=4t0 bnd=m
   44 : __adr_s2 typ=w32 bnd=m adro=20
   46 : __ct_8t0 typ=w32 val=8t0 bnd=m
   48 : __adr_s1 typ=w32 bnd=m adro=22
   50 : __ct_12t0 typ=w32 val=12t0 bnd=m
   52 : __adr_result typ=w32 bnd=m adro=24
   54 : __ct_16t0 typ=w32 val=16t0 bnd=m
   56 : __adr_i typ=w32 bnd=m adro=25
   58 : s2__rstr typ=w08 bnd=b stl=DMb
   59 : s1__rstr typ=w08 bnd=b stl=DMb
   60 : __fch_s2 typ=w32 bnd=m
   63 : strlen typ=t21s_s2 val=0r bnd=m
   64 : __link typ=w32 bnd=m
   65 : __tmp typ=w32 bnd=m
   66 : __fch_result typ=w32 bnd=m
   67 : __fch_n typ=w32 bnd=m
   68 : __tmp typ=bool bnd=m
   69 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   71 : __fch_s2 typ=w32 bnd=m
   72 : __fch_i typ=w32 bnd=m
   74 : __tmp typ=w32 bnd=m
   75 : __fch_s2__rstr typ=w08 bnd=m
   76 : __fch_s1 typ=w32 bnd=m
   77 : __fch_i typ=w32 bnd=m
   79 : __tmp typ=w32 bnd=m
   80 : __fch_i typ=w32 bnd=m
   81 : __ct_1 typ=w32 val=1f bnd=m
   83 : __tmp typ=w32 bnd=m
   84 : __fch_i typ=w32 bnd=m
   85 : __fch_result typ=w32 bnd=m
   86 : __tmp typ=bool bnd=m
   88 : __ct_20s0 typ=w32 val=20s0 bnd=m
   90 : __tmp typ=w32 bnd=m
  109 : __either typ=bool bnd=m
  110 : __trgt typ=t13s_s2 val=0j bnd=m
  111 : __trgt typ=t13s_s2 val=0j bnd=m
  112 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrxfrm {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__vola.12 var=13) source ()  <23>;
    (__extPMb.15 var=16) source ()  <26>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (n.18 var=19) source ()  <29>;
    (s2.19 var=20) source ()  <30>;
    (__arg_s2__rstr.20 var=21) source ()  <31>;
    (s1.21 var=22) source ()  <32>;
    (__arg_s1__rstr.22 var=23) source ()  <33>;
    (result.23 var=24) source ()  <34>;
    (i.24 var=25) source ()  <35>;
    (__extPMb_void.25 var=26) source ()  <36>;
    (__extDMb_void.26 var=27) source ()  <37>;
    (__la.28 var=29 stl=X off=1) inp ()  <39>;
    (__la.29 var=29) deassign (__la.28)  <40>;
    (__arg_s1.32 var=31 stl=X off=11) inp ()  <43>;
    (__arg_s1.33 var=31) deassign (__arg_s1.32)  <44>;
    (__arg_s2.35 var=32 stl=X off=12) inp ()  <46>;
    (__arg_s2.36 var=32) deassign (__arg_s2.35)  <47>;
    (__arg_n.38 var=33 stl=X off=13) inp ()  <49>;
    (__arg_n.39 var=33) deassign (__arg_n.38)  <50>;
    (__rd___sp.41 var=28) rd_res_reg (__R_SP.11 __sp.17)  <52>;
    (__ct_m20S0.42 var=34) const ()  <53>;
    (__tmp.44 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_m20S0.42)  <55>;
    (__R_SP.45 var=12 __sp.46 var=18) wr_res_reg (__tmp.44 __sp.17)  <56>;
    (__rd___sp.47 var=28) rd_res_reg (__R_SP.11 __sp.46)  <58>;
    (__ct_0t0.48 var=38) const ()  <59>;
    (__adr_n.50 var=40) __Pvoid__pl___Pvoid___sint (__rd___sp.47 __ct_0t0.48)  <61>;
    (__rd___sp.52 var=28) rd_res_reg (__R_SP.11 __sp.46)  <63>;
    (__rd___sp.57 var=28) rd_res_reg (__R_SP.11 __sp.46)  <68>;
    (__rd___sp.62 var=28) rd_res_reg (__R_SP.11 __sp.46)  <73>;
    (__rd___sp.67 var=28) rd_res_reg (__R_SP.11 __sp.46)  <78>;
    (__M_DMw.73 var=5 n.74 var=19) store (__arg_n.39 __adr_n.50 n.18)  <84>;
    call {
        () chess_separator_scheduler ()  <85>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.53 var=42) const ()  <64>;
    (__adr_s2.55 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.52 __ct_4t0.53)  <66>;
    (s2__rstr.75 var=58 __arg_s2__rstr.76 var=21) chain_tie (__arg_s2__rstr.20)  <86>;
    (__M_DMw.77 var=5 s2.78 var=20) store (__arg_s2.36 __adr_s2.55 s2.19)  <87>;
    call {
        () chess_separator_scheduler ()  <88>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.58 var=46) const ()  <69>;
    (__adr_s1.60 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.57 __ct_8t0.58)  <71>;
    (s1__rstr.79 var=59 __arg_s1__rstr.80 var=23) chain_tie (__arg_s1__rstr.22)  <89>;
    (__M_DMw.81 var=5 s1.82 var=22) store (__arg_s1.33 __adr_s1.60 s1.21)  <90>;
    call {
        () chess_separator_scheduler ()  <91>;
    } #8 off=5
    #9 off=6
    (__fch_s2.83 var=60) load (__M_DMw.4 __adr_s2.55 s2.78)  <92>;
    (strlen.87 var=63) const ()  <96>;
    (__link.88 var=64) w32_jal_t21s_s2 (strlen.87)  <97>;
    call {
        (__fch_s2.84 var=60 stl=X off=11) assign (__fch_s2.83)  <93>;
        (__link.89 var=64 stl=X off=1) assign (__link.88)  <98>;
        (__tmp.90 var=65 stl=X off=10 __extDMb.93 var=17 __extDMb_void.94 var=27 __extPMb.95 var=16 __extPMb_void.96 var=26 s2__rstr.97 var=58 __vola.98 var=13) Fstrlen (__link.89 __fch_s2.84 __extDMb.16 __extDMb_void.26 __extPMb.15 __extPMb_void.25 s2__rstr.75 __vola.12)  <99>;
        (__tmp.91 var=65) deassign (__tmp.90)  <100>;
    } #10 off=7
    #11 off=8
    (__ct_12t0.63 var=50) const ()  <74>;
    (__adr_result.65 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_12t0.63)  <76>;
    (__M_DMw.99 var=5 result.100 var=24) store (__tmp.91 __adr_result.65 result.23)  <102>;
    call {
        () chess_separator_scheduler ()  <103>;
    } #12 off=9
    #13 off=10
    (__fch_result.101 var=66) load (__M_DMw.4 __adr_result.65 result.100)  <104>;
    (__fch_n.102 var=67) load (__M_DMw.4 __adr_n.50 n.74)  <105>;
    (__tmp.297 var=68) bool__ge___uint___uint (__fch_result.101 __fch_n.102)  <361>;
    (__trgt.302 var=111) const ()  <379>;
    () void_br_bool_t13s_s2 (__tmp.297 __trgt.302)  <380>;
    (__either.303 var=109) undefined ()  <381>;
    if {
        {
            () if_expr (__either.303)  <135>;
        } #15
        {
        } #31 off=22
        {
            #17 off=11
            (__ct_16t0.68 var=54) const ()  <79>;
            (__adr_i.70 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_16t0.68)  <81>;
            (__ct_0.132 var=69) const ()  <136>;
            (__M_DMw.134 var=5 i.135 var=25) store (__ct_0.132 __adr_i.70 i.24)  <138>;
            call {
                () chess_separator_scheduler ()  <139>;
            } #18 off=12
            #40 off=13
            (__fch_s2.164 var=71) load (__M_DMw.4 __adr_s2.55 s2.78)  <168>;
            (__fch_s1.169 var=76) load (__M_DMw.4 __adr_s1.60 s1.82)  <173>;
            (__ct_1.176 var=81) const ()  <181>;
            (__fch_result.182 var=85) load (__M_DMw.4 __adr_result.65 result.100)  <188>;
            (__trgt.300 var=110) const ()  <376>;
            do {
                {
                    (i.148 var=25) entry (i.208 i.135)  <152>;
                    (s1__rstr.152 var=59) entry (s1__rstr.216 s1__rstr.79)  <156>;
                } #20
                {
                    #22 off=14
                    (__fch_i.165 var=72) load (__M_DMw.4 __adr_i.70 i.148)  <169>;
                    (__tmp.167 var=74) __Pvoid__pl___Pvoid___sint (__fch_s2.164 __fch_i.165)  <171>;
                    (__fch_s2__rstr.168 var=75) load (__M_DMb.2 __tmp.167 s2__rstr.97)  <172>;
                    (__fch_i.170 var=77) load (__M_DMw.4 __adr_i.70 i.148)  <174>;
                    (__tmp.172 var=79) __Pvoid__pl___Pvoid___sint (__fch_s1.169 __fch_i.170)  <176>;
                    (__M_DMb.173 var=3 s1__rstr.174 var=59) store (__fch_s2__rstr.168 __tmp.172 s1__rstr.152)  <177>;
                    call {
                        () chess_separator_scheduler ()  <178>;
                    } #23 off=15
                    #24 off=16
                    (__fch_i.175 var=80) load (__M_DMw.4 __adr_i.70 i.148)  <179>;
                    call {
                        () chess_separator_scheduler ()  <180>;
                    } #25 off=17
                    #26 off=18
                    (__tmp.178 var=83) __uint__pl___uint___uint (__fch_i.175 __ct_1.176)  <183>;
                    (__M_DMw.179 var=5 i.180 var=25) store (__tmp.178 __adr_i.70 i.148)  <184>;
                    call {
                        () chess_separator_scheduler ()  <186>;
                    } #28 off=19
                    #44 off=20
                    (__fch_i.181 var=84) load (__M_DMw.4 __adr_i.70 i.180)  <187>;
                    (__tmp.291 var=86) bool__ge___uint___uint (__fch_result.182 __fch_i.181)  <329>;
                    () void_br_bool_t13s_s2 (__tmp.291 __trgt.300)  <377>;
                    (__either.301 var=109) undefined ()  <378>;
                } #21
                {
                    () while_expr (__either.301)  <190>;
                    (i.208 var=25 i.209 var=25) exit (i.180)  <203>;
                    (s1__rstr.216 var=59 s1__rstr.217 var=59) exit (s1__rstr.174)  <207>;
                } #30
            } #19 rng=[1,2147483647]
            #46 off=21
            (__trgt.304 var=112) const ()  <382>;
            () void_j_t21s_s2 (__trgt.304)  <383>;
        } #16
        {
            (i.240 var=25) merge (i.24 i.209)  <219>;
            (s1__rstr.241 var=59) merge (s1__rstr.79 s1__rstr.217)  <220>;
        } #32
    } #14
    #35 off=23 nxt=-2
    (__rt.243 var=30) load (__M_DMw.4 __adr_result.65 result.100)  <222>;
    (__rd___sp.246 var=28) rd_res_reg (__R_SP.11 __sp.46)  <225>;
    (__ct_20s0.247 var=88) const ()  <226>;
    (__tmp.249 var=90) __Pvoid__pl___Pvoid___sint (__rd___sp.246 __ct_20s0.247)  <228>;
    (__R_SP.250 var=12 __sp.251 var=18) wr_res_reg (__tmp.249 __sp.46)  <229>;
    () void___rts_jr_w32 (__la.29)  <230>;
    (__rt.252 var=30 stl=X off=10) assign (__rt.243)  <231>;
    () out (__rt.252)  <232>;
    () sink (__vola.98)  <233>;
    () sink (__extPMb.95)  <236>;
    () sink (__extDMb.93)  <237>;
    () sink (__sp.251)  <238>;
    () sink (n.74)  <239>;
    () sink (s2.78)  <240>;
    () sink (s1.82)  <242>;
    () sink (result.100)  <244>;
    () sink (i.240)  <245>;
    () sink (__extPMb_void.96)  <246>;
    () sink (__extDMb_void.94)  <247>;
    () sink (s2__rstr.97)  <279>;
    () sink (s1__rstr.241)  <281>;
} #0
0 : 'src/string.c';
----------
0 : (0,124:0,0);
3 : (0,124:61,0);
4 : (0,124:61,0);
5 : (0,124:35,0);
6 : (0,124:35,0);
7 : (0,124:15,0);
8 : (0,124:15,0);
9 : (0,127:27,4);
10 : (0,127:20,4);
11 : (0,127:20,4);
12 : (0,127:20,4);
13 : (0,128:15,5);
14 : (0,128:4,5);
16 : (0,129:8,6);
17 : (0,129:25,6);
18 : (0,129:25,6);
19 : (0,129:8,7);
21 : (0,129:8,7);
22 : (0,130:18,8);
23 : (0,130:18,8);
24 : (0,129:41,0);
25 : (0,129:41,0);
26 : (0,129:41,0);
28 : (0,129:8,11);
31 : (0,128:4,15);
35 : (0,131:4,18);
44 : (0,129:29,12);
----------
52 : (0,124:7,0);
53 : (0,124:7,0);
55 : (0,124:7,0);
56 : (0,124:7,0);
58 : (0,124:68,0);
59 : (0,124:68,0);
61 : (0,124:68,0);
63 : (0,124:57,0);
64 : (0,124:57,0);
66 : (0,124:57,0);
68 : (0,124:31,0);
69 : (0,124:31,0);
71 : (0,124:31,0);
73 : (0,127:11,0);
74 : (0,127:11,0);
76 : (0,127:11,0);
78 : (0,129:20,0);
79 : (0,129:20,0);
81 : (0,129:20,0);
84 : (0,124:61,0);
85 : (0,124:61,0);
87 : (0,124:35,0);
88 : (0,124:35,0);
90 : (0,124:15,0);
91 : (0,124:15,0);
92 : (0,127:27,4);
93 : (0,127:27,0);
97 : (0,127:20,4);
98 : (0,127:20,0);
99 : (0,127:20,4);
102 : (0,127:20,4);
103 : (0,127:20,4);
104 : (0,128:8,5);
105 : (0,128:17,5);
135 : (0,128:4,5);
136 : (0,129:25,0);
138 : (0,129:25,6);
139 : (0,129:25,6);
152 : (0,129:8,7);
156 : (0,129:8,7);
168 : (0,130:20,7);
169 : (0,130:23,7);
171 : (0,130:22,7);
172 : (0,130:22,7);
173 : (0,130:12,7);
174 : (0,130:15,7);
176 : (0,130:14,7);
177 : (0,130:14,7);
178 : (0,130:18,8);
179 : (0,129:40,0);
180 : (0,129:41,0);
181 : (0,129:41,0);
183 : (0,129:41,0);
184 : (0,129:40,0);
186 : (0,129:8,11);
187 : (0,129:27,12);
188 : (0,129:32,12);
190 : (0,129:8,12);
203 : (0,129:8,12);
207 : (0,129:8,12);
219 : (0,128:4,17);
220 : (0,128:4,17);
222 : (0,131:11,18);
225 : (0,131:4,0);
226 : (0,131:4,0);
228 : (0,131:4,0);
229 : (0,131:4,18);
230 : (0,131:4,18);
231 : (0,131:11,0);
329 : (0,129:29,12);
361 : (0,128:15,5);
377 : (0,129:8,12);
380 : (0,128:4,5);

