
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:55:24 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  size_t strspn(const char *, const char *)
Fstrspn : user_defined, called {
    fnm : "strspn" 'size_t strspn(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=24 );
}
****
***/

[
    0 : strspn typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s2 typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   20 : s1 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : r1 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   22 : c typ=w08 val=12t0 bnd=a sz=1 algn=1 stl=DMb tref=__cchar_DMb
   23 : r2 typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb lscp=21 tref=__P__cchar_DMb
   24 : d typ=w08 val=20t0 bnd=a sz=1 algn=1 stl=DMb lscp=21 tref=__cchar_DMb
   25 : __rd___sp typ=w32 bnd=m
   26 : __la typ=w32 bnd=p tref=w32__
   27 : __rt typ=w32 bnd=p tref=size_t__
   28 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   29 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   30 : __ct_m24S0 typ=w32 val=-24S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   34 : __ct_0t0 typ=w32 val=0t0 bnd=m
   36 : __adr_s2 typ=w32 bnd=m adro=19
   38 : __ct_4t0 typ=w32 val=4t0 bnd=m
   40 : __adr_s1 typ=w32 bnd=m adro=20
   42 : __ct_8t0 typ=w32 val=8t0 bnd=m
   44 : __adr_r1 typ=w32 bnd=m adro=21
   46 : __ct_12t0 typ=w32 val=12t0 bnd=m
   48 : __adr_c typ=w32 bnd=m adro=22
   50 : __ct_16t0 typ=w32 val=16t0 bnd=m
   52 : __adr_r2 typ=w32 bnd=m adro=23
   54 : __ct_20t0 typ=w32 val=20t0 bnd=m
   56 : __adr_d typ=w32 bnd=m adro=24
   59 : __fch_s1 typ=w32 bnd=m
   60 : __fch_r1 typ=w32 bnd=m
   61 : __ct_1 typ=w32 val=1f bnd=m
   64 : __fch___extDMb typ=w08 bnd=m
   66 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   68 : __tmp typ=bool bnd=m
   69 : __fch_s2 typ=w32 bnd=m
   70 : __fch_r2 typ=w32 bnd=m
   74 : __fch___extDMb typ=w08 bnd=m
   75 : __fch_c typ=w08 bnd=m
   77 : __fch_d typ=w08 bnd=m
   79 : __tmp typ=bool bnd=m
   80 : __fch_d typ=w08 bnd=m
   84 : __tmp typ=bool bnd=m
   85 : __fch_d typ=w08 bnd=m
   89 : __tmp typ=bool bnd=m
   91 : __fch_r1 typ=w32 bnd=m
   95 : __fch___extDMb typ=w08 bnd=m
   99 : __tmp typ=bool bnd=m
  100 : __fch_r1 typ=w32 bnd=m
  103 : __tmp typ=w32 bnd=m
  104 : __fch_s1 typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  107 : __ct_24s0 typ=w32 val=24s0 bnd=m
  109 : __tmp typ=w32 bnd=m
  117 : __ct_m1 typ=w32 val=-1f bnd=m
  118 : __shv___fch_r2 typ=w32 bnd=m
  119 : __shv___fch_r1 typ=w32 bnd=m
  120 : __shv___fch_r1 typ=w32 bnd=m
  129 : __either typ=bool bnd=m
  130 : __trgt typ=t13s_s2 val=0j bnd=m
  131 : __trgt typ=t13s_s2 val=0j bnd=m
  132 : __trgt typ=t13s_s2 val=0j bnd=m
  133 : __trgt typ=t13s_s2 val=0j bnd=m
  134 : __trgt typ=t13s_s2 val=0j bnd=m
  135 : __trgt typ=t21s_s2 val=0j bnd=m
  136 : __trgt typ=t21s_s2 val=0j bnd=m
  137 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrspn {
    #5 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (s2.18 var=19) source ()  <29>;
    (s1.19 var=20) source ()  <30>;
    (r1.20 var=21) source ()  <31>;
    (c.21 var=22) source ()  <32>;
    (r2.22 var=23) source ()  <33>;
    (d.23 var=24) source ()  <34>;
    (__la.25 var=26 stl=X off=1) inp ()  <36>;
    (__la.26 var=26) deassign (__la.25)  <37>;
    (__arg_s1.29 var=28 stl=X off=11) inp ()  <40>;
    (__arg_s1.30 var=28) deassign (__arg_s1.29)  <41>;
    (__arg_s2.32 var=29 stl=X off=12) inp ()  <43>;
    (__arg_s2.33 var=29) deassign (__arg_s2.32)  <44>;
    (__rd___sp.35 var=25) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_m24S0.36 var=30) const ()  <47>;
    (__tmp.38 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_m24S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (__rd___sp.41 var=25) rd_res_reg (__R_SP.11 __sp.40)  <52>;
    (__ct_0t0.42 var=34) const ()  <53>;
    (__adr_s2.44 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_0t0.42)  <55>;
    (__rd___sp.46 var=25) rd_res_reg (__R_SP.11 __sp.40)  <57>;
    (__rd___sp.51 var=25) rd_res_reg (__R_SP.11 __sp.40)  <62>;
    (__rd___sp.56 var=25) rd_res_reg (__R_SP.11 __sp.40)  <67>;
    (__rd___sp.61 var=25) rd_res_reg (__R_SP.11 __sp.40)  <72>;
    (__rd___sp.66 var=25) rd_res_reg (__R_SP.11 __sp.40)  <77>;
    (__M_DMw.73 var=5 s2.74 var=19) store (__arg_s2.33 __adr_s2.44 s2.18)  <84>;
    call {
        () chess_separator_scheduler ()  <85>;
    } #6 off=1
    #7 off=2
    (__ct_4t0.47 var=38) const ()  <58>;
    (__adr_s1.49 var=40) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_4t0.47)  <60>;
    (__M_DMw.75 var=5 s1.76 var=20) store (__arg_s1.30 __adr_s1.49 s1.19)  <86>;
    call {
        () chess_separator_scheduler ()  <87>;
    } #8 off=3
    #9 off=4
    (__ct_8t0.52 var=42) const ()  <63>;
    (__adr_r1.54 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_8t0.52)  <65>;
    (__fch_s1.77 var=59) load (__M_DMw.4 __adr_s1.49 s1.76)  <88>;
    (__M_DMw.78 var=5 r1.79 var=21) store (__fch_s1.77 __adr_r1.54 r1.20)  <89>;
    call {
        () chess_separator_scheduler ()  <90>;
    } #10 off=5
    #11 off=6
    (__fch_r1.80 var=60) load (__M_DMw.4 __adr_r1.54 r1.79)  <91>;
    call {
        () chess_separator_scheduler ()  <92>;
    } #12 off=7
    #13 off=8
    (__ct_1.81 var=61) const ()  <93>;
    (__M_DMw.84 var=5 r1.85 var=21) store (__shv___fch_r1.564 __adr_r1.54 r1.79)  <96>;
    (__shv___fch_r1.564 var=120) __Pvoid__pl___Pvoid___sint (__fch_r1.80 __ct_1.81)  <644>;
    call {
        () chess_separator_scheduler ()  <97>;
    } #14 off=9
    #15 off=10
    (__ct_12t0.57 var=46) const ()  <68>;
    (__adr_c.59 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_12t0.57)  <70>;
    (__fch___extDMb.86 var=64) load (__M_DMb.2 __fch_r1.80 __extDMb.16)  <98>;
    (__M_DMb.87 var=3 c.88 var=22) store (__fch___extDMb.86 __adr_c.59 c.21)  <99>;
    (__ct_0.90 var=66) const ()  <101>;
    (__tmp.570 var=68) bool__eq___sint___sint (__fch___extDMb.86 __ct_0.90)  <676>;
    (__trgt.581 var=134) const ()  <706>;
    () void_br_bool_t13s_s2 (__tmp.570 __trgt.581)  <707>;
    (__either.582 var=129) undefined ()  <708>;
    if {
        {
            () if_expr (__either.582)  <128>;
            () chess_frequent_else ()  <129>;
            () chess_rear_then ()  <709>;
        } #17
        {
            (__trgt.583 var=135) const ()  <710>;
            () void_j_t21s_s2 (__trgt.583)  <711>;
        } #55 off=36
        {
            #67 off=11
            (__ct_16t0.62 var=50) const ()  <73>;
            (__adr_r2.64 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_16t0.62)  <75>;
            (__ct_20t0.67 var=54) const ()  <78>;
            (__adr_d.69 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_20t0.67)  <80>;
            (__fch_s2.141 var=69) load (__M_DMw.4 __adr_s2.44 s2.74)  <154>;
            (__trgt.573 var=130) const ()  <692>;
            (__trgt.575 var=131) const ()  <696>;
            (__trgt.577 var=132) const ()  <699>;
            (__trgt.579 var=133) const ()  <703>;
            (__trgt.584 var=136) const ()  <712>;
            (__trgt.585 var=137) const ()  <714>;
            do {
                {
                    (r1.125 var=21) entry (r1.438 r1.85)  <138>;
                    (c.126 var=22) entry (c.440 c.88)  <139>;
                    (r2.127 var=23) entry (r2.442 r2.22)  <140>;
                    (d.128 var=24) entry (d.444 d.23)  <141>;
                } #20
                {
                    #22 off=12
                    (__M_DMw.142 var=5 r2.143 var=23) store (__fch_s2.141 __adr_r2.64 r2.127)  <155>;
                    call {
                        () chess_separator_scheduler ()  <156>;
                    } #23 off=13
                    #66 off=14
                    (__fch_c.177 var=75) load (__M_DMb.2 __adr_c.59 c.126)  <191>;
                    do {
                        {
                            (r2.154 var=23) entry (r2.279 r2.143)  <167>;
                            (d.155 var=24) entry (d.281 d.128)  <168>;
                        } #25
                        {
                            #27 off=15
                            (__fch_r2.168 var=70) load (__M_DMw.4 __adr_r2.64 r2.154)  <181>;
                            call {
                                () chess_separator_scheduler ()  <182>;
                            } #28 off=16
                            #29 off=17
                            (__M_DMw.172 var=5 r2.173 var=23) store (__shv___fch_r2.562 __adr_r2.64 r2.154)  <186>;
                            (__shv___fch_r2.562 var=118) __Pvoid__pl___Pvoid___sint (__fch_r2.168 __ct_1.81)  <642>;
                            call {
                                () chess_separator_scheduler ()  <187>;
                            } #30 off=18
                            #31 off=19
                            (__fch___extDMb.174 var=74) load (__M_DMb.2 __fch_r2.168 __extDMb.16)  <188>;
                            (__M_DMb.175 var=3 d.176 var=24) store (__fch___extDMb.174 __adr_d.69 d.155)  <189>;
                            call {
                                () chess_separator_scheduler ()  <190>;
                            } #32 off=20
                            #33 off=21
                            (__fch_d.179 var=77) load (__M_DMb.2 __adr_d.69 d.176)  <193>;
                            (__tmp.181 var=79) bool__eq___sint___sint (__fch_c.177 __fch_d.179)  <195>;
                            () void_br_bool_t13s_s2 (__tmp.181 __trgt.573)  <693>;
                            (__either.574 var=129) undefined ()  <694>;
                            if {
                                {
                                    () if_expr (__either.574)  <220>;
                                    () chess_rear_then ()  <695>;
                                } #35
                                {
                                    () sink (__sp.40)  <226>;
                                    () sink (s2.74)  <227>;
                                    () sink (s1.76)  <228>;
                                    () sink (r1.125)  <229>;
                                    () sink (c.126)  <230>;
                                    () sink (r2.173)  <231>;
                                    () sink (d.176)  <232>;
                                    () sync_sink (r2.173) sid=11  <243>;
                                    () sync_sink (d.176) sid=12  <244>;
                                    () void_j_t21s_s2 (__trgt.584)  <713>;
                                } #37 off=23 nxt=-3 tgt=1
                                {
                                } #38 off=22
                                {
                                } #39
                            } #34
                            #40 off=24
                            (__fch_d.254 var=80) load (__M_DMb.2 __adr_d.69 d.176)  <305>;
                            (__tmp.258 var=84) bool__ne___sint___sint (__fch_d.254 __ct_0.90)  <309>;
                            () void_br_bool_t13s_s2 (__tmp.258 __trgt.575)  <697>;
                            (__either.576 var=129) undefined ()  <698>;
                        } #26
                        {
                            () while_expr (__either.576)  <310>;
                            (r2.279 var=23 r2.280 var=23) exit (r2.173)  <321>;
                            (d.281 var=24 d.282 var=24) exit (d.176)  <322>;
                        } #41
                    } #24
                    sync {
                        (r2.317 var=23) sync_link (r2.280) sid=11  <345>;
                        (d.318 var=24) sync_link (d.282) sid=12  <346>;
                    } #1 off=26
                    #42 off=27
                    (__fch_d.331 var=85) load (__M_DMb.2 __adr_d.69 d.318)  <359>;
                    (__tmp.560 var=89) bool__eq___sint___sint (__fch_d.331 __ct_0.90)  <639>;
                    () void_br_bool_t13s_s2 (__tmp.560 __trgt.577)  <700>;
                    (__either.578 var=129) undefined ()  <701>;
                    if {
                        {
                            () if_expr (__either.578)  <389>;
                            () chess_rear_then ()  <702>;
                        } #44
                        {
                            () sink (__sp.40)  <395>;
                            () sink (s2.74)  <396>;
                            () sink (s1.76)  <397>;
                            () sink (r1.125)  <398>;
                            () sink (c.126)  <399>;
                            () sink (r2.317)  <400>;
                            () sink (d.318)  <401>;
                            () sync_sink (r1.125) sid=33  <410>;
                            () sync_sink (c.126) sid=34  <411>;
                            () sync_sink (r2.317) sid=35  <412>;
                            () sync_sink (d.318) sid=36  <413>;
                            () void_j_t21s_s2 (__trgt.585)  <715>;
                        } #46 off=29 nxt=-3 tgt=2
                        {
                        } #47 off=28
                        {
                        } #48
                    } #43
                    #49 off=30
                    (__fch_r1.409 var=91) load (__M_DMw.4 __adr_r1.54 r1.125)  <474>;
                    call {
                        () chess_separator_scheduler ()  <475>;
                    } #50 off=31
                    #51 off=32
                    (__M_DMw.413 var=5 r1.414 var=21) store (__shv___fch_r1.563 __adr_r1.54 r1.125)  <479>;
                    (__shv___fch_r1.563 var=119) __Pvoid__pl___Pvoid___sint (__fch_r1.409 __ct_1.81)  <643>;
                    call {
                        () chess_separator_scheduler ()  <480>;
                    } #52 off=33
                    #53 off=34
                    (__fch___extDMb.415 var=95) load (__M_DMb.2 __fch_r1.409 __extDMb.16)  <481>;
                    (__M_DMb.416 var=3 c.417 var=22) store (__fch___extDMb.415 __adr_c.59 c.126)  <482>;
                    (__tmp.421 var=99) bool__ne___sint___sint (__fch___extDMb.415 __ct_0.90)  <486>;
                    () void_br_bool_t13s_s2 (__tmp.421 __trgt.579)  <704>;
                    (__either.580 var=129) undefined ()  <705>;
                } #21
                {
                    () while_expr (__either.580)  <487>;
                    (r1.438 var=21 r1.439 var=21) exit (r1.414)  <496>;
                    (c.440 var=22 c.441 var=22) exit (c.417)  <497>;
                    (r2.442 var=23 r2.443 var=23) exit (r2.317)  <498>;
                    (d.444 var=24 d.445 var=24) exit (d.318)  <499>;
                } #54
            } #19 rng=[1,2147483647]
        } #18
        {
            (r1.478 var=21) merge (r1.85 r1.439)  <520>;
            (c.479 var=22) merge (c.88 c.441)  <521>;
            (r2.480 var=23) merge (r2.22 r2.443)  <522>;
            (d.481 var=24) merge (d.23 d.445)  <523>;
        } #56
    } #16
    sync {
        (r1.502 var=21) sync_link (r1.478) sid=33  <544>;
        (c.503 var=22) sync_link (c.479) sid=34  <545>;
        (r2.504 var=23) sync_link (r2.480) sid=35  <546>;
        (d.505 var=24) sync_link (d.481) sid=36  <547>;
    } #2 off=38
    #59 off=39 nxt=-2
    (__fch_r1.518 var=100) load (__M_DMw.4 __adr_r1.54 r1.502)  <560>;
    (__tmp.521 var=103) __Pvoid__pl___Pvoid___sint (__fch_r1.518 __ct_m1.561)  <563>;
    (__fch_s1.522 var=104) load (__M_DMw.4 __adr_s1.49 s1.76)  <564>;
    (__tmp.523 var=105) __sint__mi___Pvoid___Pvoid (__tmp.521 __fch_s1.522)  <565>;
    (__rd___sp.525 var=25) rd_res_reg (__R_SP.11 __sp.40)  <567>;
    (__ct_24s0.526 var=107) const ()  <568>;
    (__tmp.528 var=109) __Pvoid__pl___Pvoid___sint (__rd___sp.525 __ct_24s0.526)  <570>;
    (__R_SP.529 var=12 __sp.530 var=18) wr_res_reg (__tmp.528 __sp.40)  <571>;
    () void___rts_jr_w32 (__la.26)  <572>;
    (__rt.531 var=27 stl=X off=10) assign (__tmp.523)  <573>;
    () out (__rt.531)  <574>;
    () sink (__sp.530)  <580>;
    () sink (s2.74)  <581>;
    () sink (s1.76)  <582>;
    () sink (r1.502)  <583>;
    () sink (c.503)  <584>;
    () sink (r2.504)  <585>;
    () sink (d.505)  <586>;
    (__ct_m1.561 var=117) const ()  <640>;
} #0
0 : 'src/string.c';
----------
0 : (0,205:0,0);
1 : (0,216:10,21);
2 : (0,210:4,36);
5 : (0,205:30,0);
6 : (0,205:30,0);
7 : (0,205:14,0);
8 : (0,205:14,0);
9 : (0,208:21,3);
10 : (0,208:21,3);
11 : (0,210:4,6);
12 : (0,210:4,6);
13 : (0,210:4,7);
14 : (0,210:4,7);
15 : (0,210:4,7);
16 : (0,210:4,7);
18 : (0,210:4,8);
19 : (0,210:4,8);
21 : (0,210:24,8);
22 : (0,211:25,8);
23 : (0,211:25,8);
24 : (0,216:10,10);
26 : (0,213:11,10);
27 : (0,214:19,11);
28 : (0,214:19,11);
29 : (0,214:19,12);
30 : (0,214:19,12);
31 : (0,214:14,13);
32 : (0,214:14,13);
33 : (0,215:18,13);
34 : (0,215:12,13);
37 : (0,215:24,14);
38 : (0,215:12,16);
40 : (0,216:10,20);
42 : (0,217:12,22);
43 : (0,217:8,22);
46 : (0,218:12,23);
47 : (0,217:8,25);
49 : (0,210:19,30);
50 : (0,210:19,30);
51 : (0,210:19,31);
52 : (0,210:19,31);
53 : (0,210:4,31);
55 : (0,210:4,33);
59 : (0,220:4,37);
----------
46 : (0,205:7,0);
47 : (0,205:7,0);
49 : (0,205:7,0);
50 : (0,205:7,0);
52 : (0,205:42,0);
53 : (0,205:42,0);
55 : (0,205:42,0);
57 : (0,205:26,0);
58 : (0,205:26,0);
60 : (0,205:26,0);
62 : (0,208:16,0);
63 : (0,208:16,0);
65 : (0,208:16,0);
67 : (0,209:9,0);
68 : (0,209:9,0);
70 : (0,209:9,0);
72 : (0,211:20,0);
73 : (0,211:20,0);
75 : (0,211:20,0);
77 : (0,212:13,0);
78 : (0,212:13,0);
80 : (0,212:13,0);
84 : (0,205:30,0);
85 : (0,205:30,0);
86 : (0,205:14,0);
87 : (0,205:14,0);
88 : (0,208:21,3);
89 : (0,208:21,3);
90 : (0,208:21,3);
91 : (0,210:4,5);
92 : (0,210:4,6);
93 : (0,210:4,0);
96 : (0,210:4,6);
97 : (0,210:4,7);
98 : (0,210:4,7);
99 : (0,210:4,7);
101 : (0,210:4,0);
128 : (0,210:4,7);
138 : (0,210:4,8);
139 : (0,210:4,8);
140 : (0,210:4,8);
141 : (0,210:4,8);
154 : (0,211:25,8);
155 : (0,211:25,8);
156 : (0,211:25,8);
167 : (0,216:10,10);
168 : (0,216:10,10);
181 : (0,214:17,10);
182 : (0,214:19,11);
186 : (0,214:17,11);
187 : (0,214:19,12);
188 : (0,214:16,12);
189 : (0,214:12,12);
190 : (0,214:14,13);
191 : (0,215:16,13);
193 : (0,215:21,13);
195 : (0,215:18,13);
220 : (0,215:12,13);
305 : (0,216:17,20);
309 : (0,216:10,20);
310 : (0,216:10,20);
321 : (0,216:10,20);
322 : (0,216:10,20);
359 : (0,217:13,22);
389 : (0,217:8,22);
474 : (0,210:17,29);
475 : (0,210:19,30);
479 : (0,210:17,30);
480 : (0,210:19,31);
481 : (0,210:16,31);
482 : (0,210:12,31);
486 : (0,210:4,31);
487 : (0,210:4,31);
496 : (0,210:4,31);
497 : (0,210:4,31);
498 : (0,210:4,31);
499 : (0,210:4,31);
520 : (0,210:4,35);
521 : (0,210:4,35);
522 : (0,210:4,35);
523 : (0,210:4,35);
560 : (0,220:12,37);
563 : (0,220:14,37);
564 : (0,220:20,37);
565 : (0,220:18,37);
567 : (0,220:4,0);
568 : (0,220:4,0);
570 : (0,220:4,0);
571 : (0,220:4,37);
572 : (0,220:4,37);
573 : (0,220:18,0);
639 : (0,217:12,22);
640 : (0,220:14,0);
642 : (0,214:19,0);
643 : (0,210:19,0);
644 : (0,210:4,0);
676 : (0,210:4,7);
693 : (0,215:12,13);
697 : (0,216:10,20);
700 : (0,217:8,22);
704 : (0,210:4,31);
707 : (0,210:4,7);

