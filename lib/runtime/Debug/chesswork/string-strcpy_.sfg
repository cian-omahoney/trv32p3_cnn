
// File generated by noodle version U-2022.12#33f3808fcb#221128, Sat Mar 16 14:40:47 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strcpy(char * restrict, const char * restrict)
Fstrcpy : user_defined, called {
    fnm : "strcpy" 'char *strcpy(char * restrict, const char * restrict)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=12 );
}
****
***/

[
    0 : strcpy typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s2 typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   20 : __arg_s2__rstr typ=w08 bnd=b stl=DMb
   21 : s1 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   22 : __arg_s1__rstr typ=w08 bnd=b stl=DMb
   23 : result typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   24 : __rd___sp typ=w32 bnd=m
   25 : __la typ=w32 bnd=p tref=w32__
   26 : __rt typ=w32 bnd=p tref=__P__cchar__
   27 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   28 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   29 : __ct_m12S0 typ=w32 val=-12S0 bnd=m
   31 : __tmp typ=w32 bnd=m
   33 : __ct_0t0 typ=w32 val=0t0 bnd=m
   35 : __adr_s2 typ=w32 bnd=m adro=19
   37 : __ct_4t0 typ=w32 val=4t0 bnd=m
   39 : __adr_s1 typ=w32 bnd=m adro=21
   41 : __ct_8t0 typ=w32 val=8t0 bnd=m
   43 : __adr_result typ=w32 bnd=m adro=23
   46 : s2__rstr typ=w08 bnd=b stl=DMb
   47 : s1__rstr typ=w08 bnd=b stl=DMb
   48 : __fch_s1 typ=w32 bnd=m
   49 : __fch_s2 typ=w32 bnd=m
   50 : __ct_1 typ=w32 val=1f bnd=m
   53 : __fch_s2__rstr typ=w08 bnd=m
   54 : __fch_s1 typ=w32 bnd=m
   59 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   61 : __tmp typ=bool bnd=m
   62 : __fch_s2 typ=w32 bnd=m
   66 : __fch_s2__rstr typ=w08 bnd=m
   67 : __fch_s1 typ=w32 bnd=m
   74 : __tmp typ=bool bnd=m
   76 : __ct_12s0 typ=w32 val=12s0 bnd=m
   78 : __tmp typ=w32 bnd=m
   87 : __shv___fch_s2 typ=w32 bnd=m
   88 : __shv___fch_s1 typ=w32 bnd=m
   89 : __shv___fch_s2 typ=w32 bnd=m
   90 : __shv___fch_s1 typ=w32 bnd=m
   99 : __either typ=bool bnd=m
  100 : __trgt typ=t13s_s2 val=0j bnd=m
  101 : __trgt typ=t13s_s2 val=0j bnd=m
  102 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrcpy {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (s2.18 var=19) source ()  <29>;
    (__arg_s2__rstr.19 var=20) source ()  <30>;
    (s1.20 var=21) source ()  <31>;
    (__arg_s1__rstr.21 var=22) source ()  <32>;
    (result.22 var=23) source ()  <33>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (__arg_s1.28 var=27 stl=X off=11) inp ()  <39>;
    (__arg_s1.29 var=27) deassign (__arg_s1.28)  <40>;
    (__arg_s2.31 var=28 stl=X off=12) inp ()  <42>;
    (__arg_s2.32 var=28) deassign (__arg_s2.31)  <43>;
    (__rd___sp.34 var=24) rd_res_reg (__R_SP.11 __sp.17)  <45>;
    (__ct_m12S0.35 var=29) const ()  <46>;
    (__tmp.37 var=31) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_m12S0.35)  <48>;
    (__R_SP.38 var=12 __sp.39 var=18) wr_res_reg (__tmp.37 __sp.17)  <49>;
    (__rd___sp.40 var=24) rd_res_reg (__R_SP.11 __sp.39)  <51>;
    (__ct_0t0.41 var=33) const ()  <52>;
    (__adr_s2.43 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_0t0.41)  <54>;
    (__rd___sp.45 var=24) rd_res_reg (__R_SP.11 __sp.39)  <56>;
    (__rd___sp.50 var=24) rd_res_reg (__R_SP.11 __sp.39)  <61>;
    (s2__rstr.57 var=46 __arg_s2__rstr.58 var=20) chain_tie (__arg_s2__rstr.19)  <68>;
    (__M_DMw.59 var=5 s2.60 var=19) store (__arg_s2.32 __adr_s2.43 s2.18)  <69>;
    call {
        () chess_separator_scheduler ()  <70>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.46 var=37) const ()  <57>;
    (__adr_s1.48 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_4t0.46)  <59>;
    (s1__rstr.61 var=47 __arg_s1__rstr.62 var=22) chain_tie (__arg_s1__rstr.21)  <71>;
    (__M_DMw.63 var=5 s1.64 var=21) store (__arg_s1.29 __adr_s1.48 s1.20)  <72>;
    call {
        () chess_separator_scheduler ()  <73>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.51 var=41) const ()  <62>;
    (__adr_result.53 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_8t0.51)  <64>;
    (__fch_s1.65 var=48) load (__M_DMw.4 __adr_s1.48 s1.64)  <74>;
    (__M_DMw.66 var=5 result.67 var=23) store (__fch_s1.65 __adr_result.53 result.22)  <75>;
    call {
        () chess_separator_scheduler ()  <76>;
    } #8 off=5
    #9 off=6
    (__fch_s2.68 var=49) load (__M_DMw.4 __adr_s2.43 s2.60)  <77>;
    call {
        () chess_separator_scheduler ()  <78>;
    } #10 off=7
    #11 off=8
    (__ct_1.69 var=50) const ()  <79>;
    (__M_DMw.72 var=5 s2.73 var=19) store (__shv___fch_s2.239 __adr_s2.43 s2.60)  <82>;
    (__shv___fch_s2.239 var=89) __Pvoid__pl___Pvoid___sint (__fch_s2.68 __ct_1.69)  <267>;
    call {
        () chess_separator_scheduler ()  <83>;
    } #12 off=9
    #13 off=10
    (__fch_s2__rstr.74 var=53) load (__M_DMb.2 __fch_s2.68 s2__rstr.57)  <84>;
    (__fch_s1.75 var=54) load (__M_DMw.4 __adr_s1.48 s1.64)  <85>;
    call {
        () chess_separator_scheduler ()  <86>;
    } #14 off=11
    #15 off=12
    (__M_DMw.79 var=5 s1.80 var=21) store (__shv___fch_s1.240 __adr_s1.48 s1.64)  <90>;
    (__shv___fch_s1.240 var=90) __Pvoid__pl___Pvoid___sint (__fch_s1.75 __ct_1.69)  <268>;
    call {
        () chess_separator_scheduler ()  <91>;
    } #16 off=13
    #17 off=14
    (__M_DMb.81 var=3 s1__rstr.82 var=47) store (__fch_s2__rstr.74 __fch_s1.75 s1__rstr.61)  <92>;
    (__ct_0.84 var=59) const ()  <94>;
    (__tmp.246 var=61) bool__eq___sint___sint (__fch_s2__rstr.74 __ct_0.84)  <292>;
    (__trgt.251 var=101) const ()  <307>;
    () void_br_bool_t13s_s2 (__tmp.246 __trgt.251)  <308>;
    (__either.252 var=99) undefined ()  <309>;
    if {
        {
            () if_expr (__either.252)  <119>;
            () chess_frequent_else ()  <120>;
            () chess_rear_then ()  <310>;
        } #19
        {
            (__trgt.253 var=102) const ()  <311>;
            () void_j_t21s_s2 (__trgt.253)  <312>;
        } #34 off=26
        {
            #110 off=15
            (__trgt.249 var=100) const ()  <304>;
            do {
                {
                    (s2.115 var=19) entry (s2.162 s2.73)  <127>;
                    (s1.117 var=21) entry (s1.166 s1.80)  <129>;
                    (s1__rstr.121 var=47) entry (s1__rstr.174 s1__rstr.82)  <133>;
                } #22
                {
                    #24 off=16
                    (__fch_s2.131 var=62) load (__M_DMw.4 __adr_s2.43 s2.115)  <143>;
                    call {
                        () chess_separator_scheduler ()  <144>;
                    } #25 off=17
                    #26 off=18
                    (__M_DMw.135 var=5 s2.136 var=19) store (__shv___fch_s2.237 __adr_s2.43 s2.115)  <148>;
                    (__shv___fch_s2.237 var=87) __Pvoid__pl___Pvoid___sint (__fch_s2.131 __ct_1.69)  <265>;
                    call {
                        () chess_separator_scheduler ()  <149>;
                    } #27 off=19
                    #28 off=20
                    (__fch_s2__rstr.137 var=66) load (__M_DMb.2 __fch_s2.131 s2__rstr.57)  <150>;
                    (__fch_s1.138 var=67) load (__M_DMw.4 __adr_s1.48 s1.117)  <151>;
                    call {
                        () chess_separator_scheduler ()  <152>;
                    } #29 off=21
                    #30 off=22
                    (__M_DMw.142 var=5 s1.143 var=21) store (__shv___fch_s1.238 __adr_s1.48 s1.117)  <156>;
                    (__shv___fch_s1.238 var=88) __Pvoid__pl___Pvoid___sint (__fch_s1.138 __ct_1.69)  <266>;
                    call {
                        () chess_separator_scheduler ()  <157>;
                    } #31 off=23
                    #32 off=24
                    (__M_DMb.144 var=3 s1__rstr.145 var=47) store (__fch_s2__rstr.137 __fch_s1.138 s1__rstr.121)  <158>;
                    (__tmp.149 var=74) bool__ne___sint___sint (__fch_s2__rstr.137 __ct_0.84)  <162>;
                    () void_br_bool_t13s_s2 (__tmp.149 __trgt.249)  <305>;
                    (__either.250 var=99) undefined ()  <306>;
                } #23
                {
                    () while_expr (__either.250)  <163>;
                    (s2.162 var=19 s2.163 var=19) exit (s2.136)  <170>;
                    (s1.166 var=21 s1.167 var=21) exit (s1.143)  <172>;
                    (s1__rstr.174 var=47 s1__rstr.175 var=47) exit (s1__rstr.145)  <176>;
                } #33
            } #21 rng=[1,2147483647]
        } #20
        {
            (s2.194 var=19) merge (s2.73 s2.163)  <186>;
            (s1.195 var=21) merge (s1.80 s1.167)  <187>;
            (s1__rstr.196 var=47) merge (s1__rstr.82 s1__rstr.175)  <188>;
        } #35
    } #18
    #38 off=27 nxt=-2
    (__rt.199 var=26) load (__M_DMw.4 __adr_result.53 result.67)  <191>;
    (__rd___sp.202 var=24) rd_res_reg (__R_SP.11 __sp.39)  <194>;
    (__ct_12s0.203 var=76) const ()  <195>;
    (__tmp.205 var=78) __Pvoid__pl___Pvoid___sint (__rd___sp.202 __ct_12s0.203)  <197>;
    (__R_SP.206 var=12 __sp.207 var=18) wr_res_reg (__tmp.205 __sp.39)  <198>;
    () void___rts_jr_w32 (__la.25)  <199>;
    (__rt.208 var=26 stl=X off=10) assign (__rt.199)  <200>;
    () out (__rt.208)  <201>;
    () sink (__sp.207)  <207>;
    () sink (s2.194)  <208>;
    () sink (s1.195)  <210>;
    () sink (result.67)  <212>;
    () sink (s2__rstr.57)  <238>;
    () sink (s1__rstr.196)  <240>;
} #0
0 : 'src/string.c';
----------
0 : (0,43:0,0);
3 : (0,43:33,0);
4 : (0,43:33,0);
5 : (0,43:13,0);
6 : (0,43:13,0);
7 : (0,45:19,3);
8 : (0,45:19,3);
9 : (0,46:4,5);
10 : (0,46:4,5);
11 : (0,46:4,6);
12 : (0,46:4,6);
13 : (0,46:4,7);
14 : (0,46:4,7);
15 : (0,46:4,8);
16 : (0,46:4,8);
17 : (0,46:4,8);
18 : (0,46:4,8);
20 : (0,46:4,9);
21 : (0,46:4,9);
23 : (0,46:27,9);
24 : (0,46:23,11);
25 : (0,46:23,11);
26 : (0,46:23,12);
27 : (0,46:23,12);
28 : (0,46:15,13);
29 : (0,46:15,13);
30 : (0,46:15,14);
31 : (0,46:15,14);
32 : (0,46:4,14);
34 : (0,46:4,16);
38 : (0,47:4,19);
----------
45 : (0,43:6,0);
46 : (0,43:6,0);
48 : (0,43:6,0);
49 : (0,43:6,0);
51 : (0,43:55,0);
52 : (0,43:55,0);
54 : (0,43:55,0);
56 : (0,43:29,0);
57 : (0,43:29,0);
59 : (0,43:29,0);
61 : (0,45:10,0);
62 : (0,45:10,0);
64 : (0,45:10,0);
69 : (0,43:33,0);
70 : (0,43:33,0);
72 : (0,43:13,0);
73 : (0,43:13,0);
74 : (0,45:19,3);
75 : (0,45:19,3);
76 : (0,45:19,3);
77 : (0,46:4,4);
78 : (0,46:4,5);
79 : (0,46:4,0);
82 : (0,46:4,5);
83 : (0,46:4,6);
84 : (0,46:4,6);
85 : (0,46:4,6);
86 : (0,46:4,7);
90 : (0,46:4,7);
91 : (0,46:4,8);
92 : (0,46:4,8);
94 : (0,46:4,0);
119 : (0,46:4,8);
127 : (0,46:4,9);
129 : (0,46:4,9);
133 : (0,46:4,9);
143 : (0,46:21,10);
144 : (0,46:23,11);
148 : (0,46:21,11);
149 : (0,46:23,12);
150 : (0,46:20,12);
151 : (0,46:13,12);
152 : (0,46:15,13);
156 : (0,46:13,13);
157 : (0,46:15,14);
158 : (0,46:12,14);
162 : (0,46:4,14);
163 : (0,46:4,14);
170 : (0,46:4,14);
172 : (0,46:4,14);
176 : (0,46:4,14);
186 : (0,46:4,18);
187 : (0,46:4,18);
188 : (0,46:4,18);
191 : (0,47:11,19);
194 : (0,47:4,0);
195 : (0,47:4,0);
197 : (0,47:4,0);
198 : (0,47:4,19);
199 : (0,47:4,19);
200 : (0,47:11,0);
265 : (0,46:23,0);
266 : (0,46:15,0);
267 : (0,46:4,0);
268 : (0,46:4,0);
292 : (0,46:4,8);
305 : (0,46:4,14);
308 : (0,46:4,8);

