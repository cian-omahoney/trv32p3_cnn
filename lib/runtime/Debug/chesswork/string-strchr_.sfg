
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 15:23:25 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strchr(const char *, int)
Fstrchr : user_defined, called {
    fnm : "strchr" 'char *strchr(const char *, int)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=12 );
}
****
***/

[
    0 : strchr typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : c typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   20 : s typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : d typ=w08 val=8t0 bnd=a sz=1 algn=1 stl=DMb tref=__cchar_DMb
   22 : __rd___sp typ=w32 bnd=m
   23 : __la typ=w32 bnd=p tref=w32__
   24 : __rt typ=w32 bnd=p tref=__P__cchar__
   25 : __arg_s typ=w32 bnd=p tref=__P__cchar__
   26 : __arg_c typ=w32 bnd=p tref=__sint__
   27 : __ct_m12S0 typ=w32 val=-12S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   31 : __ct_0t0 typ=w32 val=0t0 bnd=m
   33 : __adr_c typ=w32 bnd=m adro=19
   35 : __ct_4t0 typ=w32 val=4t0 bnd=m
   37 : __adr_s typ=w32 bnd=m adro=20
   39 : __ct_8t0 typ=w32 val=8t0 bnd=m
   41 : __adr_d typ=w32 bnd=m adro=21
   43 : __fch_s typ=w32 bnd=m
   44 : __ct_1 typ=w32 val=1f bnd=m
   47 : __fch___extDMb typ=w08 bnd=m
   48 : __fch_d typ=w08 bnd=m
   50 : __fch_c typ=w32 bnd=m
   51 : __tmp typ=w08 bnd=m
   53 : __tmp typ=bool bnd=m
   54 : __fch_s typ=w32 bnd=m
   58 : __ct_12s0 typ=w32 val=12s0 bnd=m
   60 : __tmp typ=w32 bnd=m
   61 : __fch_d typ=w08 bnd=m
   63 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   65 : __tmp typ=bool bnd=m
   71 : __tmp typ=w32 bnd=m
   77 : __ct_m1 typ=w32 val=-1f bnd=m
   78 : __shv___fch_s typ=w32 bnd=m
   87 : __either typ=bool bnd=m
   88 : __trgt typ=t13s_s2 val=0j bnd=m
   89 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fstrchr {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (c.18 var=19) source ()  <29>;
    (s.19 var=20) source ()  <30>;
    (d.20 var=21) source ()  <31>;
    (__la.22 var=23 stl=X off=1) inp ()  <33>;
    (__la.23 var=23) deassign (__la.22)  <34>;
    (__arg_s.26 var=25 stl=X off=11) inp ()  <37>;
    (__arg_s.27 var=25) deassign (__arg_s.26)  <38>;
    (__arg_c.29 var=26 stl=X off=12) inp ()  <40>;
    (__arg_c.30 var=26) deassign (__arg_c.29)  <41>;
    (__rd___sp.32 var=22) rd_res_reg (__R_SP.11 __sp.17)  <43>;
    (__ct_m12S0.33 var=27) const ()  <44>;
    (__tmp.35 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.32 __ct_m12S0.33)  <46>;
    (__R_SP.36 var=12 __sp.37 var=18) wr_res_reg (__tmp.35 __sp.17)  <47>;
    (__rd___sp.38 var=22) rd_res_reg (__R_SP.11 __sp.37)  <49>;
    (__ct_0t0.39 var=31) const ()  <50>;
    (__adr_c.41 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.38 __ct_0t0.39)  <52>;
    (__rd___sp.43 var=22) rd_res_reg (__R_SP.11 __sp.37)  <54>;
    (__rd___sp.48 var=22) rd_res_reg (__R_SP.11 __sp.37)  <59>;
    (__M_DMw.54 var=5 c.55 var=19) store (__arg_c.30 __adr_c.41 c.18)  <65>;
    call {
        () chess_separator_scheduler ()  <66>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.44 var=35) const ()  <55>;
    (__adr_s.46 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_4t0.44)  <57>;
    (__M_DMw.56 var=5 s.57 var=20) store (__arg_s.27 __adr_s.46 s.19)  <67>;
    call {
        () chess_separator_scheduler ()  <68>;
    } #6 off=3
    #33 off=4
    (__ct_8t0.49 var=39) const ()  <60>;
    (__adr_d.51 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_8t0.49)  <62>;
    (__ct_1.76 var=44) const ()  <88>;
    (__fch_c.86 var=50) load (__M_DMw.4 __adr_c.41 c.55)  <98>;
    (__tmp.87 var=51) __schar___schar___sint (__fch_c.86)  <99>;
    (__rd___sp.111 var=22) rd_res_reg (__R_SP.11 __sp.37)  <124>;
    (__ct_12s0.112 var=58) const ()  <125>;
    (__tmp.114 var=60) __Pvoid__pl___Pvoid___sint (__rd___sp.111 __ct_12s0.112)  <127>;
    (__ct_0.154 var=63) const ()  <177>;
    (__ct_m1.222 var=77) const ()  <259>;
    (__trgt.230 var=88) const ()  <300>;
    (__trgt.232 var=89) const ()  <305>;
    do {
        {
            (s.65 var=20) entry (s.171 s.57)  <76>;
            (d.66 var=21) entry (d.173 d.20)  <77>;
        } #8
        {
            #10 off=5
            (__fch_s.75 var=43) load (__M_DMw.4 __adr_s.46 s.65)  <86>;
            call {
                () chess_separator_scheduler ()  <87>;
            } #11 off=6
            #12 off=7
            (__M_DMw.79 var=5 s.80 var=20) store (__shv___fch_s.223 __adr_s.46 s.65)  <91>;
            (__shv___fch_s.223 var=78) __Pvoid__pl___Pvoid___sint (__fch_s.75 __ct_1.76)  <261>;
            call {
                () chess_separator_scheduler ()  <92>;
            } #13 off=8
            #14 off=9
            (__fch___extDMb.81 var=47) load (__M_DMb.2 __fch_s.75 __extDMb.16)  <93>;
            (__M_DMb.82 var=3 d.83 var=21) store (__fch___extDMb.81 __adr_d.51 d.66)  <94>;
            call {
                () chess_separator_scheduler ()  <95>;
            } #15 off=10
            #16 off=11
            (__fch_d.84 var=48) load (__M_DMb.2 __adr_d.51 d.83)  <96>;
            (__tmp.89 var=53) bool__eq___sint___sint (__fch_d.84 __tmp.87)  <101>;
            () void_br_bool_t13s_s2 (__tmp.89 __trgt.230)  <301>;
            (__either.231 var=87) undefined ()  <302>;
            if {
                {
                    () if_expr (__either.231)  <119>;
                    () chess_frequent_else ()  <303>;
                    () chess_rear_then ()  <304>;
                } #18
                {
                    (__fch_s.107 var=54) load (__M_DMw.4 __adr_s.46 s.80)  <120>;
                    (__rt.110 var=24) __Pvoid__pl___Pvoid___sint (__fch_s.107 __ct_m1.222)  <123>;
                    (__R_SP.115 var=12 __sp.116 var=18) wr_res_reg (__tmp.114 __sp.37)  <128>;
                    () void___rts_jr_w32 (__la.23)  <129>;
                    (__rt.117 var=24 stl=X off=10) assign (__rt.110)  <130>;
                    () out (__rt.117)  <131>;
                    () sink (__sp.116)  <137>;
                    () sink (c.55)  <138>;
                    () sink (s.80)  <139>;
                    () sink (d.83)  <140>;
                } #22 off=13 nxt=-2
                {
                } #23 off=12
                {
                } #24
            } #17
            #25 off=14
            (__fch_d.152 var=61) load (__M_DMb.2 __adr_d.51 d.83)  <175>;
            (__tmp.156 var=65) bool__ne___sint___sint (__fch_d.152 __ct_0.154)  <179>;
            () void_br_bool_t13s_s2 (__tmp.156 __trgt.232)  <306>;
            (__either.233 var=87) undefined ()  <307>;
        } #9
        {
            () while_expr (__either.233)  <180>;
            (s.171 var=20 s.172 var=20) exit (s.80)  <188>;
            (d.173 var=21 d.174 var=21) exit (d.83)  <189>;
        } #26
    } #7
    #29 off=15 nxt=-2
    (__rd___sp.194 var=22) rd_res_reg (__R_SP.11 __sp.37)  <201>;
    (__tmp.197 var=71) __Pvoid__pl___Pvoid___sint (__rd___sp.194 __ct_12s0.112)  <204>;
    (__R_SP.198 var=12 __sp.199 var=18) wr_res_reg (__tmp.197 __sp.37)  <205>;
    () void___rts_jr_w32 (__la.23)  <206>;
    (__rt.200 var=24 stl=X off=10) assign (__ct_0.154)  <207>;
    () out (__rt.200)  <208>;
    () sink (__sp.199)  <214>;
    () sink (c.55)  <215>;
    () sink (s.172)  <216>;
    () sink (d.174)  <217>;
} #0
0 : 'src/string.c';
----------
0 : (0,148:0,0);
3 : (0,148:28,0);
4 : (0,148:28,0);
5 : (0,148:13,0);
6 : (0,148:13,0);
7 : (0,156:6,4);
9 : (0,152:7,4);
10 : (0,153:14,5);
11 : (0,153:14,5);
12 : (0,153:14,6);
13 : (0,153:14,6);
14 : (0,153:10,7);
15 : (0,153:10,7);
16 : (0,154:14,7);
17 : (0,154:8,7);
22 : (0,155:12,8);
23 : (0,154:8,11);
25 : (0,156:6,15);
29 : (0,157:4,16);
----------
43 : (0,148:6,0);
44 : (0,148:6,0);
46 : (0,148:6,0);
47 : (0,148:6,0);
49 : (0,148:32,0);
50 : (0,148:32,0);
52 : (0,148:32,0);
54 : (0,148:25,0);
55 : (0,148:25,0);
57 : (0,148:25,0);
59 : (0,151:9,0);
60 : (0,151:9,0);
62 : (0,151:9,0);
65 : (0,148:28,0);
66 : (0,148:28,0);
67 : (0,148:13,0);
68 : (0,148:13,0);
76 : (0,156:6,4);
77 : (0,156:6,4);
86 : (0,153:13,4);
87 : (0,153:14,5);
88 : (0,153:14,0);
91 : (0,153:13,5);
92 : (0,153:14,6);
93 : (0,153:12,6);
94 : (0,153:8,6);
95 : (0,153:10,7);
96 : (0,154:12,7);
98 : (0,154:23,7);
99 : (0,154:17,7);
101 : (0,154:14,7);
119 : (0,154:8,7);
120 : (0,155:27,8);
123 : (0,155:28,8);
124 : (0,155:12,0);
125 : (0,155:12,0);
127 : (0,155:12,0);
128 : (0,155:12,8);
129 : (0,155:12,8);
130 : (0,155:19,0);
175 : (0,156:13,15);
177 : (0,156:6,0);
179 : (0,156:6,15);
180 : (0,156:6,15);
188 : (0,156:6,15);
189 : (0,156:6,15);
201 : (0,157:4,0);
204 : (0,157:4,0);
205 : (0,157:4,16);
206 : (0,157:4,16);
207 : (0,157:11,0);
259 : (0,155:28,0);
261 : (0,153:14,0);
301 : (0,154:8,7);
306 : (0,156:6,15);

