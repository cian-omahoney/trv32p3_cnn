
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Feb 16 13:34:04 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float roundf(float)
Froundf : user_defined, called {
    fnm : "roundf" 'float roundf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=16 );
}
****
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : roundf typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : x typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   20 : w typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=u_int32_t_DMb
   21 : exponent_less_127 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   22 : exponent_mask typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb lscp=27 tref=u_int32_t_DMb
   23 : __rd___sp typ=w32 bnd=m
   24 : __la typ=w32 bnd=p tref=w32__
   25 : __rt typ=w32 bnd=p tref=__ffloat__
   26 : __arg_x typ=w32 bnd=p tref=__ffloat__
   27 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   31 : __ct_0t0 typ=w32 val=0t0 bnd=m
   33 : __adr_x typ=w32 bnd=m adro=19
   35 : __ct_4t0 typ=w32 val=4t0 bnd=m
   37 : __adr_w typ=w32 bnd=m adro=20
   39 : __ct_8t0 typ=w32 val=8t0 bnd=m
   41 : __adr_exponent_less_127 typ=w32 bnd=m adro=21
   43 : __ct_12t0 typ=w32 val=12t0 bnd=m
   45 : __adr_exponent_mask typ=w32 bnd=m adro=22
   46 : __fch_x typ=w32 bnd=m
   49 : __fch_w typ=w32 bnd=m
   50 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   52 : __tmp typ=w32 bnd=m
   53 : __ct_23 typ=w32 val=23f bnd=m
   55 : __tmp typ=w32 bnd=m
   59 : __tmp typ=w32 bnd=m
   60 : __fch_exponent_less_127 typ=w32 bnd=m
   63 : __tmp typ=bool bnd=m
   64 : __fch_exponent_less_127 typ=w32 bnd=m
   65 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   67 : __tmp typ=bool bnd=m
   68 : __fch_w typ=w32 bnd=m
   69 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
   71 : __tmp typ=w32 bnd=m
   72 : __fch_exponent_less_127 typ=w32 bnd=m
   73 : __ct_m1 typ=w32 val=-1f bnd=m
   75 : __tmp typ=bool bnd=m
   76 : __fch_w typ=w32 bnd=m
   77 : __ct_1065353216 typ=t20s_rp12 val=260096f bnd=m
   79 : __tmp typ=w32 bnd=m
   80 : __ct_8388607 typ=w32 val=8388607f bnd=m
   82 : __fch_exponent_less_127 typ=w32 bnd=m
   83 : __tmp typ=w32 bnd=m
   84 : __fch_w typ=w32 bnd=m
   85 : __fch_exponent_mask typ=w32 bnd=m
   86 : __tmp typ=w32 bnd=m
   89 : __tmp typ=bool bnd=m
   91 : __ct_16s0 typ=w32 val=16s0 bnd=m
   93 : __tmp typ=w32 bnd=m
   94 : __fch_w typ=w32 bnd=m
   95 : __ct_4194304 typ=t20s_rp12 val=1024f bnd=m
   97 : __fch_exponent_less_127 typ=w32 bnd=m
   98 : __tmp typ=w32 bnd=m
   99 : __tmp typ=w32 bnd=m
  100 : __fch_w typ=w32 bnd=m
  101 : __fch_exponent_mask typ=w32 bnd=m
  102 : __tmp typ=w32 bnd=m
  103 : __tmp typ=w32 bnd=m
  104 : __fch_w typ=w32 bnd=m
  108 : __fch_exponent_less_127 typ=w32 bnd=m
  109 : __ct_128 typ=w32 val=128f bnd=m
  111 : __tmp typ=bool bnd=m
  112 : __fch_x typ=w32 bnd=m
  113 : __fch_x typ=w32 bnd=m
  118 : __tmp typ=w32 bnd=m
  123 : __ct_m127 typ=w32 val=-127f bnd=m
  132 : a typ=w32 bnd=m tref=float32_t__
  133 : b typ=w32 bnd=m tref=float32_t__
  134 : f32_add typ=t21s_s2 val=0r bnd=m
  135 : __link typ=w32 bnd=m
  146 : __either typ=bool bnd=m
  147 : __trgt typ=t13s_s2 val=0j bnd=m
  148 : __trgt typ=t21s_s2 val=0j bnd=m
  149 : __trgt typ=t13s_s2 val=0j bnd=m
  150 : __trgt typ=t13s_s2 val=0j bnd=m
  151 : __trgt typ=t21s_s2 val=0j bnd=m
  152 : __trgt typ=t13s_s2 val=0j bnd=m
  153 : __trgt typ=t21s_s2 val=0j bnd=m
  154 : __trgt typ=t13s_s2 val=0j bnd=m
  155 : __trgt typ=t21s_s2 val=0j bnd=m
]
Froundf {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (x.18 var=19) source ()  <29>;
    (w.19 var=20) source ()  <30>;
    (exponent_less_127.20 var=21) source ()  <31>;
    (exponent_mask.21 var=22) source ()  <32>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (__arg_x.27 var=26 stl=X off=11) inp ()  <38>;
    (__arg_x.28 var=26) deassign (__arg_x.27)  <39>;
    (__rd___sp.30 var=23) rd_res_reg (__R_SP.11 __sp.17)  <41>;
    (__ct_m16S0.31 var=27) const ()  <42>;
    (__tmp.33 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.30 __ct_m16S0.31)  <44>;
    (__R_SP.34 var=12 __sp.35 var=18) wr_res_reg (__tmp.33 __sp.17)  <45>;
    (__rd___sp.36 var=23) rd_res_reg (__R_SP.11 __sp.35)  <47>;
    (__ct_0t0.37 var=31) const ()  <48>;
    (__adr_x.39 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0t0.37)  <50>;
    (__rd___sp.41 var=23) rd_res_reg (__R_SP.11 __sp.35)  <52>;
    (__rd___sp.46 var=23) rd_res_reg (__R_SP.11 __sp.35)  <57>;
    (__rd___sp.51 var=23) rd_res_reg (__R_SP.11 __sp.35)  <62>;
    (__M_DMw.56 var=5 x.57 var=19) store (__arg_x.28 __adr_x.39 x.18)  <67>;
    call {
        () chess_separator_scheduler ()  <68>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.42 var=35) const ()  <53>;
    (__adr_w.44 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_4t0.42)  <55>;
    (__fch_x.58 var=46) load (__M_DMw.4 __adr_x.39 x.57)  <69>;
    (__M_DMw.61 var=5 w.62 var=20) store (__fch_x.58 __adr_w.44 w.19)  <72>;
    call {
        () chess_separator_scheduler ()  <73>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.47 var=39) const ()  <58>;
    (__adr_exponent_less_127.49 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_8t0.47)  <60>;
    (__fch_w.63 var=49) load (__M_DMw.4 __adr_w.44 w.62)  <74>;
    (__ct_2139095040.64 var=50) const ()  <75>;
    (__tmp.66 var=52) __uint__ad___uint___uint (__fch_w.63 __ct_2139095040.64)  <77>;
    (__ct_23.67 var=53) const ()  <78>;
    (__tmp.69 var=55) __uint__rs___uint___sint (__tmp.66 __ct_23.67)  <80>;
    (__tmp.73 var=59) __sint__pl___sint___sint (__tmp.69 __ct_m127.331)  <84>;
    (__M_DMw.74 var=5 exponent_less_127.75 var=21) store (__tmp.73 __adr_exponent_less_127.49 exponent_less_127.20)  <85>;
    (__ct_m127.331 var=123) const ()  <411>;
    call {
        () chess_separator_scheduler ()  <86>;
    } #8 off=5
    #9 off=6
    (__fch_exponent_less_127.76 var=60) load (__M_DMw.4 __adr_exponent_less_127.49 exponent_less_127.75)  <87>;
    (__tmp.79 var=63) bool__lt___sint___sint (__fch_exponent_less_127.76 __ct_23.67)  <90>;
    (__ct_16s0.183 var=91) const ()  <198>;
    (__trgt.368 var=154) const ()  <563>;
    () void_br_bool_t13s_s2 (__tmp.79 __trgt.368)  <564>;
    (__either.369 var=146) undefined ()  <565>;
    if {
        {
            () if_expr (__either.369)  <108>;
        } #11
        {
            #13 off=12
            (__fch_exponent_less_127.97 var=64) load (__M_DMw.4 __adr_exponent_less_127.49 exponent_less_127.75)  <109>;
            (__ct_0.98 var=65) const ()  <110>;
            (__tmp.100 var=67) bool__lt___sint___sint (__fch_exponent_less_127.97 __ct_0.98)  <112>;
            (__ct_m1.125 var=73) const ()  <138>;
            (__trgt.362 var=150) const ()  <553>;
            () void_br_bool_t13s_s2 (__tmp.100 __trgt.362)  <554>;
            (__either.363 var=146) undefined ()  <555>;
            if {
                {
                    () if_expr (__either.363)  <130>;
                } #15
                {
                    #17 off=21
                    (__fch_w.118 var=68) load (__M_DMw.4 __adr_w.44 w.62)  <131>;
                    (__ct_2147483648.119 var=69) const ()  <132>;
                    (__tmp.121 var=71) __uint__ad___uint___uint (__fch_w.118 __ct_2147483648.119)  <134>;
                    (__M_DMw.122 var=5 w.123 var=20) store (__tmp.121 __adr_w.44 w.62)  <135>;
                    call {
                        () chess_separator_scheduler ()  <136>;
                    } #18 off=22
                    #19 off=23
                    (__fch_exponent_less_127.124 var=72) load (__M_DMw.4 __adr_exponent_less_127.49 exponent_less_127.75)  <137>;
                    (__tmp.354 var=75) bool__ne___sint___sint (__fch_exponent_less_127.124 __ct_m1.125)  <522>;
                    (__trgt.357 var=147) const ()  <544>;
                    () void_br_bool_t13s_s2 (__tmp.354 __trgt.357)  <545>;
                    (__either.358 var=146) undefined ()  <546>;
                    if {
                        {
                            () if_expr (__either.358)  <158>;
                        } #21
                        {
                        } #25 off=25
                        {
                            (__fch_w.145 var=76) load (__M_DMw.4 __adr_w.44 w.123)  <159>;
                            (__ct_1065353216.146 var=77) const ()  <160>;
                            (__tmp.148 var=79) __uint__or___uint___uint (__fch_w.145 __ct_1065353216.146)  <162>;
                            (__M_DMw.149 var=5 w.150 var=20) store (__tmp.148 __adr_w.44 w.123)  <163>;
                            (__trgt.359 var=148) const ()  <547>;
                            () void_j_t21s_s2 (__trgt.359)  <548>;
                        } #23 off=24
                        {
                            (w.151 var=20) merge (w.123 w.150)  <165>;
                        } #26
                    } #20
                } #16
                {
                    #28 off=13
                    (__ct_12t0.52 var=43) const ()  <63>;
                    (__adr_exponent_mask.54 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_12t0.52)  <65>;
                    (__ct_8388607.152 var=80) const ()  <166>;
                    (__fch_exponent_less_127.154 var=82) load (__M_DMw.4 __adr_exponent_less_127.49 exponent_less_127.75)  <168>;
                    (__tmp.155 var=83) __uint__rs___uint___sint (__ct_8388607.152 __fch_exponent_less_127.154)  <169>;
                    (__M_DMw.156 var=5 exponent_mask.157 var=22) store (__tmp.155 __adr_exponent_mask.54 exponent_mask.21)  <170>;
                    call {
                        () chess_separator_scheduler ()  <171>;
                    } #29 off=14
                    #30 off=15
                    (__fch_w.158 var=84) load (__M_DMw.4 __adr_w.44 w.62)  <172>;
                    (__fch_exponent_mask.159 var=85) load (__M_DMw.4 __adr_exponent_mask.54 exponent_mask.157)  <173>;
                    (__tmp.160 var=86) __uint__ad___uint___uint (__fch_w.158 __fch_exponent_mask.159)  <174>;
                    (__tmp.163 var=89) bool__eq___uint___uint (__tmp.160 __ct_0.98)  <177>;
                    (__trgt.360 var=149) const ()  <549>;
                    () void_br_bool_t13s_s2 (__tmp.163 __trgt.360)  <550>;
                    (__either.361 var=146) undefined ()  <551>;
                    if {
                        {
                            () if_expr (__either.361)  <195>;
                            () chess_rear_then ()  <552>;
                        } #32
                        {
                            (__rt.181 var=25) load (__M_DMw.4 __adr_x.39 x.57)  <196>;
                            (__rd___sp.182 var=23) rd_res_reg (__R_SP.11 __sp.35)  <197>;
                            (__tmp.185 var=93) __Pvoid__pl___Pvoid___sint (__rd___sp.182 __ct_16s0.183)  <200>;
                            (__R_SP.186 var=12 __sp.187 var=18) wr_res_reg (__tmp.185 __sp.35)  <201>;
                            () void___rts_jr_w32 (__la.24)  <202>;
                            (__rt.188 var=25 stl=X off=10) assign (__rt.181)  <203>;
                            () out (__rt.188)  <204>;
                            () sink (__sp.187)  <210>;
                            () sink (x.57)  <211>;
                            () sink (w.62)  <212>;
                            () sink (exponent_less_127.75)  <213>;
                            () sink (exponent_mask.157)  <214>;
                        } #36 off=17 nxt=-2
                        {
                        } #37 off=16
                        {
                        } #38
                    } #31
                    #39 off=18
                    (__fch_w.223 var=94) load (__M_DMw.4 __adr_w.44 w.62)  <249>;
                    (__ct_4194304.224 var=95) const ()  <250>;
                    (__fch_exponent_less_127.226 var=97) load (__M_DMw.4 __adr_exponent_less_127.49 exponent_less_127.75)  <252>;
                    (__tmp.227 var=98) __uint__rs___uint___sint (__ct_4194304.224 __fch_exponent_less_127.226)  <253>;
                    (__tmp.228 var=99) __uint__pl___uint___uint (__fch_w.223 __tmp.227)  <254>;
                    (__M_DMw.229 var=5 w.230 var=20) store (__tmp.228 __adr_w.44 w.62)  <255>;
                    call {
                        () chess_separator_scheduler ()  <256>;
                    } #40 off=19
                    #67 off=20
                    (__fch_w.231 var=100) load (__M_DMw.4 __adr_w.44 w.230)  <257>;
                    (__fch_exponent_mask.232 var=101) load (__M_DMw.4 __adr_exponent_mask.54 exponent_mask.157)  <258>;
                    (__tmp.234 var=103) __uint__ad___uint___uint (__fch_w.231 __tmp.336)  <260>;
                    (__M_DMw.235 var=5 w.236 var=20) store (__tmp.234 __adr_w.44 w.230)  <261>;
                    (__tmp.336 var=102) __uint__er___uint___uint (__fch_exponent_mask.232 __ct_m1.125)  <437>;
                    (__trgt.364 var=151) const ()  <556>;
                    () void_j_t21s_s2 (__trgt.364)  <557>;
                } #27
                {
                    (w.244 var=20) merge (w.151 w.236)  <270>;
                    (exponent_mask.246 var=22) merge (exponent_mask.21 exponent_mask.157)  <272>;
                } #43
            } #14
            #44 off=27
            (__fch_w.254 var=104) load (__M_DMw.4 __adr_w.44 w.244)  <280>;
            (__M_DMw.257 var=5 x.258 var=19) store (__fch_w.254 __adr_x.39 x.57)  <283>;
            call {
                () chess_separator_scheduler ()  <284>;
            } #45 off=28
            #46 off=29
            (__rt.259 var=25) load (__M_DMw.4 __adr_x.39 x.258)  <285>;
        } #12
        {
            #49 off=7
            (__fch_exponent_less_127.260 var=108) load (__M_DMw.4 __adr_exponent_less_127.49 exponent_less_127.75)  <287>;
            (__ct_128.261 var=109) const ()  <288>;
            (__tmp.263 var=111) bool__eq___sint___sint (__fch_exponent_less_127.260 __ct_128.261)  <290>;
            (__trgt.365 var=152) const ()  <558>;
            () void_br_bool_t13s_s2 (__tmp.263 __trgt.365)  <559>;
            (__either.366 var=146) undefined ()  <560>;
            if {
                {
                    () if_expr (__either.366)  <308>;
                } #51
                {
                    #76 off=9
                    (__fch_x.281 var=112) load (__M_DMw.4 __adr_x.39 x.57)  <309>;
                    (__fch_x.282 var=113) load (__M_DMw.4 __adr_x.39 x.57)  <310>;
                    (f32_add.342 var=134) const ()  <466>;
                    (__link.343 var=135) w32_jal_t21s_s2 (f32_add.342)  <467>;
                    call {
                        (a.344 var=132 stl=X off=11) assign (__fch_x.281)  <468>;
                        (b.345 var=133 stl=X off=12) assign (__fch_x.282)  <469>;
                        (__link.346 var=135 stl=X off=1) assign (__link.343)  <470>;
                        (__rt.347 var=25 stl=X off=10) Ff32_add (__link.346 a.344 b.345)  <471>;
                        (__rt.348 var=25) deassign (__rt.347)  <472>;
                    } #77 off=10
                } #52
                {
                    (__rt.284 var=25) load (__M_DMw.4 __adr_x.39 x.57)  <313>;
                    (__trgt.367 var=153) const ()  <561>;
                    () void_j_t21s_s2 (__trgt.367)  <562>;
                } #56 off=8
                {
                    (__rt.285 var=25) merge (__rt.348 __rt.284)  <315>;
                } #58
            } #50
            #82 off=11
            (__trgt.370 var=155) const ()  <566>;
            () void_j_t21s_s2 (__trgt.370)  <567>;
        } #48
        {
            (x.292 var=19) merge (x.258 x.57)  <323>;
            (w.293 var=20) merge (w.244 w.62)  <324>;
            (exponent_mask.295 var=22) merge (exponent_mask.246 exponent_mask.21)  <326>;
            (__rt.302 var=25) merge (__rt.259 __rt.285)  <333>;
        } #60
    } #10
    #62 off=30 nxt=-2
    (__rd___sp.303 var=23) rd_res_reg (__R_SP.11 __sp.35)  <334>;
    (__tmp.306 var=118) __Pvoid__pl___Pvoid___sint (__rd___sp.303 __ct_16s0.183)  <337>;
    (__R_SP.307 var=12 __sp.308 var=18) wr_res_reg (__tmp.306 __sp.35)  <338>;
    () void___rts_jr_w32 (__la.24)  <339>;
    (__rt.309 var=25 stl=X off=10) assign (__rt.302)  <340>;
    () out (__rt.309)  <341>;
    () sink (__sp.308)  <347>;
    () sink (x.292)  <348>;
    () sink (w.293)  <349>;
    () sink (exponent_less_127.75)  <350>;
    () sink (exponent_mask.295)  <351>;
} #0
0 : 'src/math.c';
----------
0 : (0,281:0,0);
3 : (0,281:13,0);
4 : (0,281:13,0);
5 : (0,287:3,5);
6 : (0,287:3,5);
7 : (0,290:20,7);
8 : (0,290:20,7);
9 : (0,292:24,7);
10 : (0,292:2,7);
12 : (0,314:6,8);
13 : (0,294:28,8);
14 : (0,294:6,8);
16 : (0,295:8,9);
17 : (0,296:12,10);
18 : (0,296:12,10);
19 : (0,297:32,10);
20 : (0,297:10,10);
23 : (0,299:14,12);
25 : (0,297:10,13);
27 : (0,302:8,18);
28 : (0,303:58,18);
29 : (0,303:58,18);
30 : (0,304:34,19);
31 : (0,304:10,19);
36 : (0,306:12,20);
37 : (0,304:10,23);
39 : (0,308:12,27);
40 : (0,308:12,27);
44 : (0,320:3,33);
45 : (0,320:3,33);
46 : (0,321:2,34);
48 : (0,313:4,36);
49 : (0,314:28,36);
50 : (0,314:6,36);
52 : (0,318:8,37);
56 : (0,318:8,41);
62 : (0,321:2,49);
67 : (0,309:10,27);
76 : (0,316:17,37);
77 : (0,316:17,37);
----------
41 : (0,281:6,0);
42 : (0,281:6,0);
44 : (0,281:6,0);
45 : (0,281:6,0);
47 : (0,281:19,0);
48 : (0,281:19,0);
50 : (0,281:19,0);
52 : (0,283:12,0);
53 : (0,283:12,0);
55 : (0,283:12,0);
57 : (0,285:6,0);
58 : (0,285:6,0);
60 : (0,285:6,0);
62 : (0,303:20,0);
63 : (0,303:20,0);
65 : (0,303:20,0);
67 : (0,281:13,0);
68 : (0,281:13,0);
69 : (0,287:14,4);
72 : (0,287:1,4);
73 : (0,287:3,5);
74 : (0,290:29,6);
75 : (0,290:31,0);
77 : (0,290:31,6);
78 : (0,290:48,0);
80 : (0,290:45,6);
84 : (0,290:52,6);
85 : (0,290:2,6);
86 : (0,290:20,7);
87 : (0,292:6,7);
90 : (0,292:24,7);
108 : (0,292:2,7);
109 : (0,294:10,8);
110 : (0,294:30,0);
112 : (0,294:28,8);
130 : (0,294:6,8);
131 : (0,296:10,9);
132 : (0,296:15,0);
134 : (0,296:12,9);
135 : (0,296:10,9);
136 : (0,296:12,10);
137 : (0,297:14,10);
138 : (0,297:35,0);
158 : (0,297:10,10);
159 : (0,299:12,11);
160 : (0,299:33,0);
162 : (0,299:14,11);
163 : (0,299:12,11);
165 : (0,297:10,15);
166 : (0,303:36,0);
168 : (0,303:61,18);
169 : (0,303:58,18);
170 : (0,303:58,18);
171 : (0,303:58,18);
172 : (0,304:15,19);
173 : (0,304:19,19);
174 : (0,304:17,19);
177 : (0,304:34,19);
195 : (0,304:10,19);
196 : (0,306:19,20);
197 : (0,306:12,0);
198 : (0,306:12,0);
200 : (0,306:12,0);
201 : (0,306:12,20);
202 : (0,306:12,20);
203 : (0,306:19,0);
249 : (0,308:10,26);
250 : (0,308:15,0);
252 : (0,308:40,26);
253 : (0,308:37,26);
254 : (0,308:12,26);
255 : (0,308:10,26);
256 : (0,308:12,27);
257 : (0,309:10,27);
258 : (0,309:16,27);
260 : (0,309:12,27);
261 : (0,309:10,27);
270 : (0,294:6,30);
272 : (0,294:6,30);
280 : (0,320:14,32);
283 : (0,320:1,32);
284 : (0,320:3,33);
285 : (0,321:9,33);
287 : (0,314:10,36);
288 : (0,314:31,0);
290 : (0,314:28,36);
308 : (0,314:6,36);
309 : (0,316:15,37);
310 : (0,316:19,37);
313 : (0,318:15,40);
315 : (0,314:6,43);
323 : (0,292:2,47);
324 : (0,292:2,47);
326 : (0,292:2,47);
333 : (0,292:2,47);
334 : (0,321:2,0);
337 : (0,321:2,0);
338 : (0,321:2,49);
339 : (0,321:2,49);
340 : (0,321:2,0);
411 : (0,290:52,0);
437 : (0,309:15,27);
466 : (0,316:17,0);
467 : (0,316:17,37);
468 : (0,316:17,37);
469 : (0,316:17,37);
470 : (0,316:17,37);
471 : (0,316:17,37);
472 : (0,316:17,37);
522 : (0,297:32,10);
545 : (0,297:10,10);
550 : (0,304:10,19);
554 : (0,294:6,8);
559 : (0,314:6,36);
564 : (0,292:2,7);

