
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Feb 16 13:34:04 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! static double kernel_sin(double, double, int)
Fkernel_sin : user_defined, called {
    fnm : "kernel_sin" 'double kernel_sin(double, double, int)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] X[16] );
    frm : ( l=48 );
}
****
!!  long f64_to_i32_r_minMag(float64_t, bool)
Ff64_to_i32_r_minMag : user_defined, called {
    fnm : "f64_to_i32_r_minMag" 'long f64_to_i32_r_minMag(float64_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
}
!!  float64_t f64_mul(float64_t, float64_t)
Ff64_mul : user_defined, called {
    fnm : "f64_mul" 'float64_t f64_mul(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_sub(float64_t, float64_t)
Ff64_sub : user_defined, called {
    fnm : "f64_sub" 'float64_t f64_sub(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : kernel_sin typ=u08 bnd=i stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : iy typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   20 : y typ=w08 val=4t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   21 : x typ=w08 val=12t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   22 : ix typ=w08 val=44t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   23 : z typ=w08 val=20t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   24 : v typ=w08 val=36t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   25 : r typ=w08 val=28t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   26 : y_low typ=w08 bnd=B stl=DMb
   27 : y_high typ=w08 bnd=B stl=DMb
   28 : x_low typ=w08 bnd=B stl=DMb
   29 : x_high typ=w08 bnd=B stl=DMb
   30 : z_low typ=w08 bnd=B stl=DMb
   31 : z_high typ=w08 bnd=B stl=DMb
   32 : v_low typ=w08 bnd=B stl=DMb
   33 : v_high typ=w08 bnd=B stl=DMb
   34 : r_low typ=w08 bnd=B stl=DMb
   35 : r_high typ=w08 bnd=B stl=DMb
   36 : __rd___sp typ=w32 bnd=m
   37 : __la typ=w32 bnd=p tref=w32__
   39 : __rt_low typ=w32 bnd=m tref=__uint__
   40 : __rt_high typ=w32 bnd=m tref=__uint__
   42 : __arg_x_low typ=w32 bnd=m tref=__uint__
   43 : __arg_x_high typ=w32 bnd=m tref=__uint__
   45 : __arg_y_low typ=w32 bnd=m tref=__uint__
   46 : __arg_y_high typ=w32 bnd=m tref=__uint__
   47 : __arg_iy typ=w32 bnd=p tref=__sint__
   48 : __ct_m48S0 typ=w32 val=-48S0 bnd=m
   50 : __tmp typ=w32 bnd=m
   52 : __ct_0t0 typ=w32 val=0t0 bnd=m
   54 : __adr_iy typ=w32 bnd=m adro=19
   56 : __ct_4t0 typ=w32 val=4t0 bnd=m
   58 : __adr_y typ=w32 bnd=m adro=20
   60 : __ct_12t0 typ=w32 val=12t0 bnd=m
   62 : __adr_x typ=w32 bnd=m adro=21
   64 : __ct_44t0 typ=w32 val=44t0 bnd=m
   66 : __adr_ix typ=w32 bnd=m adro=22
   68 : __ct_20t0 typ=w32 val=20t0 bnd=m
   70 : __adr_z typ=w32 bnd=m adro=23
   72 : __ct_36t0 typ=w32 val=36t0 bnd=m
   74 : __adr_v typ=w32 bnd=m adro=24
   76 : __ct_28t0 typ=w32 val=28t0 bnd=m
   78 : __adr_r typ=w32 bnd=m adro=25
   87 : __fch_x_high typ=w32 bnd=m
   93 : __fch_ix typ=w32 bnd=m
   94 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   96 : __tmp typ=w32 bnd=m
   97 : __fch_ix typ=w32 bnd=m
   98 : __ct_1044381696 typ=t20s_rp12 val=254976f bnd=m
  100 : __tmp typ=bool bnd=m
  102 : __fch_x_low typ=w32 bnd=m
  105 : __fch_x_high typ=w32 bnd=m
  106 : __tmp typ=w32 bnd=m
  107 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  109 : __tmp typ=bool bnd=m
  111 : __fch_x_low typ=w32 bnd=m
  114 : __fch_x_high typ=w32 bnd=m
  115 : __ct_48s0 typ=w32 val=48s0 bnd=m
  117 : __tmp typ=w32 bnd=m
  119 : __fch_x_low typ=w32 bnd=m
  122 : __fch_x_high typ=w32 bnd=m
  124 : __fch_x_low typ=w32 bnd=m
  127 : __fch_x_high typ=w32 bnd=m
  134 : __fch_z_low typ=w32 bnd=m
  137 : __fch_z_high typ=w32 bnd=m
  139 : __fch_x_low typ=w32 bnd=m
  142 : __fch_x_high typ=w32 bnd=m
  151 : __fch_z_low typ=w32 bnd=m
  154 : __fch_z_high typ=w32 bnd=m
  158 : __fch_z_low typ=w32 bnd=m
  161 : __fch_z_high typ=w32 bnd=m
  165 : __fch_z_low typ=w32 bnd=m
  168 : __fch_z_high typ=w32 bnd=m
  172 : __fch_z_low typ=w32 bnd=m
  175 : __fch_z_high typ=w32 bnd=m
  190 : __fch_iy typ=w32 bnd=m
  193 : __tmp typ=bool bnd=m
  195 : __fch_x_low typ=w32 bnd=m
  198 : __fch_x_high typ=w32 bnd=m
  200 : __fch_v_low typ=w32 bnd=m
  203 : __fch_v_high typ=w32 bnd=m
  207 : __fch_z_low typ=w32 bnd=m
  210 : __fch_z_high typ=w32 bnd=m
  212 : __fch_r_low typ=w32 bnd=m
  215 : __fch_r_high typ=w32 bnd=m
  221 : __fch_x_low typ=w32 bnd=m
  224 : __fch_x_high typ=w32 bnd=m
  226 : __fch_z_low typ=w32 bnd=m
  229 : __fch_z_high typ=w32 bnd=m
  233 : __fch_y_low typ=w32 bnd=m
  236 : __fch_y_high typ=w32 bnd=m
  239 : __fch_v_low typ=w32 bnd=m
  242 : __fch_v_high typ=w32 bnd=m
  244 : __fch_r_low typ=w32 bnd=m
  247 : __fch_r_high typ=w32 bnd=m
  252 : __fch_y_low typ=w32 bnd=m
  255 : __fch_y_high typ=w32 bnd=m
  258 : __fch_v_low typ=w32 bnd=m
  261 : __fch_v_high typ=w32 bnd=m
  269 : __tmp typ=w32 bnd=m
  306 : __ct_16t0 typ=w32 val=16t0 bnd=m
  307 : __adr_x typ=w32 bnd=m adro=21
  308 : __adr_x typ=w32 bnd=m adro=21
  309 : __adr_x typ=w32 bnd=m adro=21
  310 : __ct_24t0 typ=w32 val=24t0 bnd=m
  311 : __adr_z typ=w32 bnd=m adro=23
  312 : __ct_40t0 typ=w32 val=40t0 bnd=m
  313 : __adr_v typ=w32 bnd=m adro=24
  314 : __ct_32t0 typ=w32 val=32t0 bnd=m
  315 : __adr_r typ=w32 bnd=m adro=25
  316 : __ct_8t0 typ=w32 val=8t0 bnd=m
  317 : __adr_y typ=w32 bnd=m adro=20
  318 : __adr_y typ=w32 bnd=m adro=20
  319 : __adr_x typ=w32 bnd=m adro=21
  320 : __adr_z typ=w32 bnd=m adro=23
  321 : __adr_v typ=w32 bnd=m adro=24
  322 : __adr_v typ=w32 bnd=m adro=24
  323 : __adr_r typ=w32 bnd=m adro=25
  324 : __adr_y typ=w32 bnd=m adro=20
  325 : __adr_x typ=w32 bnd=m adro=21
  326 : __adr_x typ=w32 bnd=m adro=21
  327 : __adr_x typ=w32 bnd=m adro=21
  328 : __adr_x typ=w32 bnd=m adro=21
  329 : __adr_x typ=w32 bnd=m adro=21
  330 : __adr_z typ=w32 bnd=m adro=23
  331 : __adr_z typ=w32 bnd=m adro=23
  332 : __adr_z typ=w32 bnd=m adro=23
  333 : __adr_z typ=w32 bnd=m adro=23
  334 : __adr_z typ=w32 bnd=m adro=23
  335 : __adr_z typ=w32 bnd=m adro=23
  336 : __adr_v typ=w32 bnd=m adro=24
  337 : __adr_r typ=w32 bnd=m adro=25
  376 : a_low typ=w32 bnd=m tref=__uint__
  377 : a_high typ=w32 bnd=m tref=__uint__
  378 : __tmp typ=w32 bnd=m
  379 : f64_to_i32_r_minMag typ=t21s_s2 val=0r bnd=m
  380 : __link typ=w32 bnd=m
  382 : __ct_1 typ=w32 val=1f bnd=m
  387 : a_low typ=w32 bnd=m tref=__uint__
  388 : a_high typ=w32 bnd=m tref=__uint__
  389 : b_low typ=w32 bnd=m tref=__uint__
  390 : b_high typ=w32 bnd=m tref=__uint__
  391 : f64_mul typ=t21s_s2 val=0r bnd=m
  392 : __link typ=w32 bnd=m
  394 : __tmp typ=w32 bnd=m
  395 : __tmp typ=w32 bnd=m
  402 : a_low typ=w32 bnd=m tref=__uint__
  403 : a_high typ=w32 bnd=m tref=__uint__
  404 : b_low typ=w32 bnd=m tref=__uint__
  405 : b_high typ=w32 bnd=m tref=__uint__
  406 : f64_add typ=t21s_s2 val=0r bnd=m
  407 : __link typ=w32 bnd=m
  409 : __tmp typ=w32 bnd=m
  410 : __tmp typ=w32 bnd=m
  427 : a_low typ=w32 bnd=m tref=__uint__
  428 : a_high typ=w32 bnd=m tref=__uint__
  429 : b_low typ=w32 bnd=m tref=__uint__
  430 : b_high typ=w32 bnd=m tref=__uint__
  431 : f64_sub typ=t21s_s2 val=0r bnd=m
  432 : __link typ=w32 bnd=m
  434 : __tmp typ=w32 bnd=m
  435 : __tmp typ=w32 bnd=m
  444 : __ct_1523570044 typ=w32 val=1523570044f bnd=m
  445 : __ct_1038473530 typ=w32 val=1038473530f bnd=m
  446 : __ct_2318114027 typ=w32 val=-1976853269f bnd=m
  447 : __ct_3193628134 typ=w32 val=-1101339162f bnd=m
  448 : __ct_1471282813 typ=w32 val=1471282813f bnd=m
  449 : __ct_1053236707 typ=w32 val=1053236707f bnd=m
  450 : __ct_432103893 typ=w32 val=432103893f bnd=m
  451 : __ct_3207201184 typ=w32 val=-1087766112f bnd=m
  452 : __ct_286324902 typ=w32 val=286324902f bnd=m
  453 : __ct_1065423121 typ=w32 val=1065423121f bnd=m
  454 : __ct_1431655753 typ=w32 val=1431655753f bnd=m
  455 : __ct_3217380693 typ=w32 val=-1077586603f bnd=m
  457 : __ct_1071644672 typ=t20s_rp12 val=261632f bnd=m
  466 : __either typ=bool bnd=m
  467 : __trgt typ=t13s_s2 val=0j bnd=m
  468 : __trgt typ=t13s_s2 val=0j bnd=m
  469 : __trgt typ=t21s_s2 val=0j bnd=m
  470 : __trgt typ=t13s_s2 val=0j bnd=m
  471 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fkernel_sin {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (iy.18 var=19) source ()  <29>;
    (ix.21 var=22) source ()  <32>;
    (y_low.25 var=26) source ()  <36>;
    (y_high.26 var=27) source ()  <37>;
    (x_low.27 var=28) source ()  <38>;
    (x_high.28 var=29) source ()  <39>;
    (z_low.29 var=30) source ()  <40>;
    (z_high.30 var=31) source ()  <41>;
    (v_low.31 var=32) source ()  <42>;
    (v_high.32 var=33) source ()  <43>;
    (r_low.33 var=34) source ()  <44>;
    (r_high.34 var=35) source ()  <45>;
    (__la.36 var=37 stl=X off=1) inp ()  <47>;
    (__la.37 var=37) deassign (__la.36)  <48>;
    (__arg_x_low.45 var=42 stl=X off=12) inp ()  <56>;
    (__arg_x_low.46 var=42) deassign (__arg_x_low.45)  <57>;
    (__arg_x_high.49 var=43 stl=X off=13) inp ()  <60>;
    (__arg_x_high.50 var=43) deassign (__arg_x_high.49)  <61>;
    (__arg_y_low.54 var=45 stl=X off=14) inp ()  <65>;
    (__arg_y_low.55 var=45) deassign (__arg_y_low.54)  <66>;
    (__arg_y_high.58 var=46 stl=X off=15) inp ()  <69>;
    (__arg_y_high.59 var=46) deassign (__arg_y_high.58)  <70>;
    (__arg_iy.62 var=47 stl=X off=16) inp ()  <73>;
    (__arg_iy.63 var=47) deassign (__arg_iy.62)  <74>;
    (__rd___sp.65 var=36) rd_res_reg (__R_SP.11 __sp.17)  <76>;
    (__ct_m48S0.66 var=48) const ()  <77>;
    (__tmp.68 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_m48S0.66)  <79>;
    (__R_SP.69 var=12 __sp.70 var=18) wr_res_reg (__tmp.68 __sp.17)  <80>;
    (__rd___sp.71 var=36) rd_res_reg (__R_SP.11 __sp.70)  <82>;
    (__ct_0t0.72 var=52) const ()  <83>;
    (__adr_iy.74 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.71 __ct_0t0.72)  <85>;
    (__rd___sp.76 var=36) rd_res_reg (__R_SP.11 __sp.70)  <87>;
    (__rd___sp.81 var=36) rd_res_reg (__R_SP.11 __sp.70)  <92>;
    (__rd___sp.86 var=36) rd_res_reg (__R_SP.11 __sp.70)  <97>;
    (__rd___sp.91 var=36) rd_res_reg (__R_SP.11 __sp.70)  <102>;
    (__rd___sp.96 var=36) rd_res_reg (__R_SP.11 __sp.70)  <107>;
    (__rd___sp.101 var=36) rd_res_reg (__R_SP.11 __sp.70)  <112>;
    (__M_DMw.106 var=5 iy.107 var=19) store (__arg_iy.63 __adr_iy.74 iy.18)  <117>;
    call {
        () chess_separator_scheduler ()  <118>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.77 var=56) const ()  <88>;
    (__adr_y.79 var=58) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_4t0.77)  <90>;
    (__M_DMw.109 var=5 y_low.110 var=26) store (__arg_y_low.55 __adr_y.79 y_low.25)  <120>;
    (__M_DMw.115 var=5 y_high.116 var=27) store (__arg_y_high.59 __adr_y.721 y_high.26)  <125>;
    (__ct_8t0.713 var=316) const ()  <824>;
    (__adr_y.721 var=324) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_8t0.713)  <833>;
    call {
        () chess_separator_scheduler ()  <126>;
    } #6 off=3
    #7 off=4
    (__ct_12t0.82 var=60) const ()  <93>;
    (__adr_x.84 var=62) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_12t0.82)  <95>;
    (__M_DMw.118 var=5 x_low.119 var=28) store (__arg_x_low.46 __adr_x.84 x_low.27)  <128>;
    (__M_DMw.124 var=5 x_high.125 var=29) store (__arg_x_high.50 __adr_x.722 x_high.28)  <133>;
    (__ct_16t0.703 var=306) const ()  <810>;
    (__adr_x.722 var=325) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_16t0.703)  <834>;
    call {
        () chess_separator_scheduler ()  <134>;
    } #8 off=5
    #81 off=6
    (__ct_44t0.87 var=64) const ()  <98>;
    (__adr_ix.89 var=66) __Pvoid__pl___Pvoid___sint (__rd___sp.86 __ct_44t0.87)  <100>;
    (__fch_x_high.132 var=87) load (__M_DMw.4 __adr_x.723 x_high.125)  <141>;
    (__M_DMw.139 var=5 ix.140 var=22) store (__fch_x_high.132 __adr_ix.89 ix.21)  <148>;
    (__adr_x.723 var=326) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_16t0.703)  <835>;
    call {
        () chess_separator_scheduler ()  <149>;
    } #10 off=7
    #11 off=8
    (__fch_ix.141 var=93) load (__M_DMw.4 __adr_ix.89 ix.140)  <150>;
    (__ct_2147483647.142 var=94) const ()  <151>;
    (__tmp.144 var=96) __sint__ad___sint___sint (__fch_ix.141 __ct_2147483647.142)  <153>;
    (__M_DMw.145 var=5 ix.146 var=22) store (__tmp.144 __adr_ix.89 ix.140)  <154>;
    call {
        () chess_separator_scheduler ()  <155>;
    } #12 off=9
    #13 off=10
    (__fch_ix.147 var=97) load (__M_DMw.4 __adr_ix.89 ix.146)  <156>;
    (__ct_1044381696.148 var=98) const ()  <157>;
    (__ct_0.195 var=107) const ()  <205>;
    (__ct_48s0.242 var=115) const ()  <253>;
    (__tmp.1271 var=100) bool__ge___sint___sint (__fch_ix.147 __ct_1044381696.148)  <1645>;
    (__trgt.1276 var=468) const ()  <1689>;
    () void_br_bool_t13s_s2 (__tmp.1271 __trgt.1276)  <1690>;
    (__either.1277 var=466) undefined ()  <1691>;
    if {
        {
            () if_expr (__either.1277)  <195>;
        } #15
        {
        } #26 off=17
        {
            #95 off=11
            (__fch_x_low.187 var=102) load (__M_DMw.4 __adr_x.84 x_low.119)  <197>;
            (__fch_x_high.192 var=105) load (__M_DMw.4 __adr_x.705 x_high.125)  <202>;
            (__adr_x.705 var=308) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_16t0.703)  <813>;
            (__ct_1.779 var=382) const ()  <985>;
            (f64_to_i32_r_minMag.780 var=379) const ()  <986>;
            (__link.781 var=380) w32_jal_t21s_s2 (f64_to_i32_r_minMag.780)  <987>;
            call {
                (a_low.782 var=376 stl=X off=11) assign (__fch_x_low.187)  <988>;
                (a_high.783 var=377 stl=X off=12) assign (__fch_x_high.192)  <989>;
                (__tmp.784 var=378 stl=X off=13) assign (__ct_1.779)  <990>;
                (__link.785 var=380 stl=X off=1) assign (__link.781)  <991>;
                (__tmp.786 var=106 stl=X off=10) Ff64_to_i32_r_minMag (__link.785 a_low.782 a_high.783 __tmp.784)  <992>;
                (__tmp.787 var=106) deassign (__tmp.786)  <993>;
            } #96 off=12
            #92 off=13
            (__tmp.197 var=109) bool__eq___sint___sint (__tmp.787 __ct_0.195)  <207>;
            (__trgt.1274 var=467) const ()  <1685>;
            () void_br_bool_t13s_s2 (__tmp.197 __trgt.1274)  <1686>;
            (__either.1275 var=466) undefined ()  <1687>;
            if {
                {
                    () if_expr (__either.1275)  <243>;
                    () chess_rear_then ()  <1688>;
                } #19
                {
                    (__fch_x_low.234 var=111) load (__M_DMw.4 __adr_x.84 x_low.119)  <245>;
                    (__fch_x_high.239 var=114) load (__M_DMw.4 __adr_x.704 x_high.125)  <250>;
                    (__rd___sp.241 var=36) rd_res_reg (__R_SP.11 __sp.70)  <252>;
                    (__tmp.244 var=117) __Pvoid__pl___Pvoid___sint (__rd___sp.241 __ct_48s0.242)  <255>;
                    (__R_SP.245 var=12 __sp.246 var=18) wr_res_reg (__tmp.244 __sp.70)  <256>;
                    () void___rts_jr_w32 (__la.37)  <257>;
                    (__rt_low.248 var=39 stl=X off=10) assign (__fch_x_low.234)  <259>;
                    () out (__rt_low.248)  <260>;
                    (__rt_high.250 var=40 stl=X off=11) assign (__fch_x_high.239)  <262>;
                    () out (__rt_high.250)  <263>;
                    () sink (__sp.246)  <273>;
                    () sink (iy.107)  <274>;
                    () sink (ix.146)  <277>;
                    () sink (y_low.110)  <281>;
                    () sink (y_high.116)  <282>;
                    () sink (x_low.119)  <283>;
                    () sink (x_high.125)  <284>;
                    (__adr_x.704 var=307) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_16t0.703)  <812>;
                } #23 off=15 nxt=-2
                {
                } #24 off=14
                {
                } #25
            } #18
            #383 off=16
            (__trgt.1278 var=469) const ()  <1692>;
            () void_j_t21s_s2 (__trgt.1278)  <1693>;
        } #16
        {
        } #27
    } #14
    #119 off=18
    (__fch_x_low.361 var=119) load (__M_DMw.4 __adr_x.84 x_low.119)  <397>;
    (__fch_x_high.366 var=122) load (__M_DMw.4 __adr_x.724 x_high.125)  <402>;
    (__fch_x_low.369 var=124) load (__M_DMw.4 __adr_x.84 x_low.119)  <405>;
    (__fch_x_high.374 var=127) load (__M_DMw.4 __adr_x.725 x_high.125)  <410>;
    (__adr_x.724 var=327) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_16t0.703)  <836>;
    (__adr_x.725 var=328) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_16t0.703)  <837>;
    (f64_mul.795 var=391) const ()  <1004>;
    (__link.796 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1005>;
    call {
        (a_low.797 var=387 stl=X off=12) assign (__fch_x_low.361)  <1006>;
        (a_high.798 var=388 stl=X off=13) assign (__fch_x_high.366)  <1007>;
        (b_low.799 var=389 stl=X off=14) assign (__fch_x_low.369)  <1008>;
        (b_high.800 var=390 stl=X off=15) assign (__fch_x_high.374)  <1009>;
        (__link.801 var=392 stl=X off=1) assign (__link.796)  <1010>;
        (__tmp.802 var=394 stl=X off=10 __tmp.803 var=395 stl=X off=11) Ff64_mul (__link.801 a_low.797 a_high.798 b_low.799 b_high.800)  <1011>;
        (__tmp.805 var=394) deassign (__tmp.802)  <1013>;
        (__tmp.807 var=395) deassign (__tmp.803)  <1015>;
    } #120 off=19
    #116 off=20
    (__ct_20t0.92 var=68) const ()  <103>;
    (__adr_z.94 var=70) __Pvoid__pl___Pvoid___sint (__rd___sp.91 __ct_20t0.92)  <105>;
    (__M_DMw.378 var=5 z_low.379 var=30) store (__tmp.805 __adr_z.94 z_low.29)  <414>;
    (__M_DMw.384 var=5 z_high.385 var=31) store (__tmp.807 __adr_z.727 z_high.30)  <419>;
    (__ct_24t0.707 var=310) const ()  <815>;
    (__adr_z.727 var=330) __Pvoid__pl___Pvoid___sint (__rd___sp.91 __ct_24t0.707)  <839>;
    call {
        () chess_separator_scheduler ()  <420>;
    } #29 off=21
    #143 off=22
    (__fch_z_low.387 var=134) load (__M_DMw.4 __adr_z.94 z_low.379)  <422>;
    (__fch_z_high.392 var=137) load (__M_DMw.4 __adr_z.728 z_high.385)  <427>;
    (__fch_x_low.395 var=139) load (__M_DMw.4 __adr_x.84 x_low.119)  <430>;
    (__fch_x_high.400 var=142) load (__M_DMw.4 __adr_x.726 x_high.125)  <435>;
    (__adr_x.726 var=329) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_16t0.703)  <838>;
    (__adr_z.728 var=331) __Pvoid__pl___Pvoid___sint (__rd___sp.91 __ct_24t0.707)  <840>;
    (__link.817 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1028>;
    call {
        (a_low.818 var=387 stl=X off=12) assign (__fch_z_low.387)  <1029>;
        (a_high.819 var=388 stl=X off=13) assign (__fch_z_high.392)  <1030>;
        (b_low.820 var=389 stl=X off=14) assign (__fch_x_low.395)  <1031>;
        (b_high.821 var=390 stl=X off=15) assign (__fch_x_high.400)  <1032>;
        (__link.822 var=392 stl=X off=1) assign (__link.817)  <1033>;
        (__tmp.823 var=394 stl=X off=10 __tmp.824 var=395 stl=X off=11) Ff64_mul (__link.822 a_low.818 a_high.819 b_low.820 b_high.821)  <1034>;
        (__tmp.826 var=394) deassign (__tmp.823)  <1036>;
        (__tmp.828 var=395) deassign (__tmp.824)  <1038>;
    } #144 off=23
    #140 off=24
    (__ct_36t0.97 var=72) const ()  <108>;
    (__adr_v.99 var=74) __Pvoid__pl___Pvoid___sint (__rd___sp.96 __ct_36t0.97)  <110>;
    (__M_DMw.404 var=5 v_low.405 var=32) store (__tmp.826 __adr_v.99 v_low.31)  <439>;
    (__M_DMw.410 var=5 v_high.411 var=33) store (__tmp.828 __adr_v.733 v_high.32)  <444>;
    (__ct_40t0.709 var=312) const ()  <818>;
    (__adr_v.733 var=336) __Pvoid__pl___Pvoid___sint (__rd___sp.96 __ct_40t0.709)  <845>;
    call {
        () chess_separator_scheduler ()  <445>;
    } #31 off=25
    #186 off=26
    (__fch_z_low.415 var=151) load (__M_DMw.4 __adr_z.94 z_low.379)  <449>;
    (__fch_z_high.420 var=154) load (__M_DMw.4 __adr_z.729 z_high.385)  <454>;
    (__fch_z_low.425 var=158) load (__M_DMw.4 __adr_z.94 z_low.379)  <459>;
    (__fch_z_high.430 var=161) load (__M_DMw.4 __adr_z.730 z_high.385)  <464>;
    (__fch_z_low.435 var=165) load (__M_DMw.4 __adr_z.94 z_low.379)  <469>;
    (__fch_z_high.440 var=168) load (__M_DMw.4 __adr_z.731 z_high.385)  <474>;
    (__fch_z_low.445 var=172) load (__M_DMw.4 __adr_z.94 z_low.379)  <479>;
    (__fch_z_high.450 var=175) load (__M_DMw.4 __adr_z.732 z_high.385)  <484>;
    (__adr_z.729 var=332) __Pvoid__pl___Pvoid___sint (__rd___sp.91 __ct_24t0.707)  <841>;
    (__adr_z.730 var=333) __Pvoid__pl___Pvoid___sint (__rd___sp.91 __ct_24t0.707)  <842>;
    (__adr_z.731 var=334) __Pvoid__pl___Pvoid___sint (__rd___sp.91 __ct_24t0.707)  <843>;
    (__adr_z.732 var=335) __Pvoid__pl___Pvoid___sint (__rd___sp.91 __ct_24t0.707)  <844>;
    (__link.838 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1051>;
    (__ct_1523570044.1253 var=444) const ()  <1537>;
    (__ct_1038473530.1254 var=445) const ()  <1539>;
    call {
        (a_low.839 var=387 stl=X off=12) assign (__fch_z_low.445)  <1052>;
        (a_high.840 var=388 stl=X off=13) assign (__fch_z_high.450)  <1053>;
        (b_low.841 var=389 stl=X off=14) assign (__ct_1523570044.1253)  <1054>;
        (b_high.842 var=390 stl=X off=15) assign (__ct_1038473530.1254)  <1055>;
        (__link.843 var=392 stl=X off=1) assign (__link.838)  <1056>;
        (__tmp.844 var=394 stl=X off=10 __tmp.845 var=395 stl=X off=11) Ff64_mul (__link.843 a_low.839 a_high.840 b_low.841 b_high.842)  <1057>;
        (__tmp.847 var=394) deassign (__tmp.844)  <1059>;
        (__tmp.849 var=395) deassign (__tmp.845)  <1061>;
    } #187 off=27
    #192 off=28
    (f64_add.858 var=406) const ()  <1073>;
    (__link.859 var=407) w32_jal_t21s_s2 (f64_add.858)  <1074>;
    (__ct_2318114027.1255 var=446) const ()  <1541>;
    (__ct_3193628134.1256 var=447) const ()  <1543>;
    call {
        (a_low.860 var=402 stl=X off=12) assign (__ct_2318114027.1255)  <1075>;
        (a_high.861 var=403 stl=X off=13) assign (__ct_3193628134.1256)  <1076>;
        (b_low.862 var=404 stl=X off=14) assign (__tmp.847)  <1077>;
        (b_high.863 var=405 stl=X off=15) assign (__tmp.849)  <1078>;
        (__link.864 var=407 stl=X off=1) assign (__link.859)  <1079>;
        (__tmp.865 var=409 stl=X off=10 __tmp.866 var=410 stl=X off=11) Ff64_add (__link.864 a_low.860 a_high.861 b_low.862 b_high.863)  <1080>;
        (__tmp.868 var=409) deassign (__tmp.865)  <1082>;
        (__tmp.870 var=410) deassign (__tmp.866)  <1084>;
    } #193 off=29
    #198 off=30
    (__link.880 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1097>;
    call {
        (a_low.881 var=387 stl=X off=12) assign (__fch_z_low.435)  <1098>;
        (a_high.882 var=388 stl=X off=13) assign (__fch_z_high.440)  <1099>;
        (b_low.883 var=389 stl=X off=14) assign (__tmp.868)  <1100>;
        (b_high.884 var=390 stl=X off=15) assign (__tmp.870)  <1101>;
        (__link.885 var=392 stl=X off=1) assign (__link.880)  <1102>;
        (__tmp.886 var=394 stl=X off=10 __tmp.887 var=395 stl=X off=11) Ff64_mul (__link.885 a_low.881 a_high.882 b_low.883 b_high.884)  <1103>;
        (__tmp.889 var=394) deassign (__tmp.886)  <1105>;
        (__tmp.891 var=395) deassign (__tmp.887)  <1107>;
    } #199 off=31
    #204 off=32
    (__link.901 var=407) w32_jal_t21s_s2 (f64_add.858)  <1120>;
    (__ct_1471282813.1257 var=448) const ()  <1545>;
    (__ct_1053236707.1258 var=449) const ()  <1547>;
    call {
        (a_low.902 var=402 stl=X off=12) assign (__ct_1471282813.1257)  <1121>;
        (a_high.903 var=403 stl=X off=13) assign (__ct_1053236707.1258)  <1122>;
        (b_low.904 var=404 stl=X off=14) assign (__tmp.889)  <1123>;
        (b_high.905 var=405 stl=X off=15) assign (__tmp.891)  <1124>;
        (__link.906 var=407 stl=X off=1) assign (__link.901)  <1125>;
        (__tmp.907 var=409 stl=X off=10 __tmp.908 var=410 stl=X off=11) Ff64_add (__link.906 a_low.902 a_high.903 b_low.904 b_high.905)  <1126>;
        (__tmp.910 var=409) deassign (__tmp.907)  <1128>;
        (__tmp.912 var=410) deassign (__tmp.908)  <1130>;
    } #205 off=33
    #210 off=34
    (__link.922 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1143>;
    call {
        (a_low.923 var=387 stl=X off=12) assign (__fch_z_low.425)  <1144>;
        (a_high.924 var=388 stl=X off=13) assign (__fch_z_high.430)  <1145>;
        (b_low.925 var=389 stl=X off=14) assign (__tmp.910)  <1146>;
        (b_high.926 var=390 stl=X off=15) assign (__tmp.912)  <1147>;
        (__link.927 var=392 stl=X off=1) assign (__link.922)  <1148>;
        (__tmp.928 var=394 stl=X off=10 __tmp.929 var=395 stl=X off=11) Ff64_mul (__link.927 a_low.923 a_high.924 b_low.925 b_high.926)  <1149>;
        (__tmp.931 var=394) deassign (__tmp.928)  <1151>;
        (__tmp.933 var=395) deassign (__tmp.929)  <1153>;
    } #211 off=35
    #216 off=36
    (__link.943 var=407) w32_jal_t21s_s2 (f64_add.858)  <1166>;
    (__ct_432103893.1259 var=450) const ()  <1549>;
    (__ct_3207201184.1260 var=451) const ()  <1551>;
    call {
        (a_low.944 var=402 stl=X off=12) assign (__ct_432103893.1259)  <1167>;
        (a_high.945 var=403 stl=X off=13) assign (__ct_3207201184.1260)  <1168>;
        (b_low.946 var=404 stl=X off=14) assign (__tmp.931)  <1169>;
        (b_high.947 var=405 stl=X off=15) assign (__tmp.933)  <1170>;
        (__link.948 var=407 stl=X off=1) assign (__link.943)  <1171>;
        (__tmp.949 var=409 stl=X off=10 __tmp.950 var=410 stl=X off=11) Ff64_add (__link.948 a_low.944 a_high.945 b_low.946 b_high.947)  <1172>;
        (__tmp.952 var=409) deassign (__tmp.949)  <1174>;
        (__tmp.954 var=410) deassign (__tmp.950)  <1176>;
    } #217 off=37
    #222 off=38
    (__link.964 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1189>;
    call {
        (a_low.965 var=387 stl=X off=12) assign (__fch_z_low.415)  <1190>;
        (a_high.966 var=388 stl=X off=13) assign (__fch_z_high.420)  <1191>;
        (b_low.967 var=389 stl=X off=14) assign (__tmp.952)  <1192>;
        (b_high.968 var=390 stl=X off=15) assign (__tmp.954)  <1193>;
        (__link.969 var=392 stl=X off=1) assign (__link.964)  <1194>;
        (__tmp.970 var=394 stl=X off=10 __tmp.971 var=395 stl=X off=11) Ff64_mul (__link.969 a_low.965 a_high.966 b_low.967 b_high.968)  <1195>;
        (__tmp.973 var=394) deassign (__tmp.970)  <1197>;
        (__tmp.975 var=395) deassign (__tmp.971)  <1199>;
    } #223 off=39
    #228 off=40
    (__link.985 var=407) w32_jal_t21s_s2 (f64_add.858)  <1212>;
    (__ct_286324902.1261 var=452) const ()  <1553>;
    (__ct_1065423121.1262 var=453) const ()  <1555>;
    call {
        (a_low.986 var=402 stl=X off=12) assign (__ct_286324902.1261)  <1213>;
        (a_high.987 var=403 stl=X off=13) assign (__ct_1065423121.1262)  <1214>;
        (b_low.988 var=404 stl=X off=14) assign (__tmp.973)  <1215>;
        (b_high.989 var=405 stl=X off=15) assign (__tmp.975)  <1216>;
        (__link.990 var=407 stl=X off=1) assign (__link.985)  <1217>;
        (__tmp.991 var=409 stl=X off=10 __tmp.992 var=410 stl=X off=11) Ff64_add (__link.990 a_low.986 a_high.987 b_low.988 b_high.989)  <1218>;
        (__tmp.994 var=409) deassign (__tmp.991)  <1220>;
        (__tmp.996 var=410) deassign (__tmp.992)  <1222>;
    } #229 off=41
    #183 off=42
    (__ct_28t0.102 var=76) const ()  <113>;
    (__adr_r.104 var=78) __Pvoid__pl___Pvoid___sint (__rd___sp.101 __ct_28t0.102)  <115>;
    (__M_DMw.463 var=5 r_low.464 var=34) store (__tmp.994 __adr_r.104 r_low.33)  <497>;
    (__M_DMw.469 var=5 r_high.470 var=35) store (__tmp.996 __adr_r.734 r_high.34)  <502>;
    (__ct_32t0.711 var=314) const ()  <821>;
    (__adr_r.734 var=337) __Pvoid__pl___Pvoid___sint (__rd___sp.101 __ct_32t0.711)  <846>;
    call {
        () chess_separator_scheduler ()  <503>;
    } #33 off=43
    #34 off=44
    (__fch_iy.471 var=190) load (__M_DMw.4 __adr_iy.74 iy.107)  <504>;
    (__tmp.474 var=193) bool__eq___sint___sint (__fch_iy.471 __ct_0.195)  <507>;
    (__ct_1431655753.1263 var=454) const ()  <1557>;
    (__ct_3217380693.1264 var=455) const ()  <1559>;
    (__trgt.1279 var=470) const ()  <1694>;
    () void_br_bool_t13s_s2 (__tmp.474 __trgt.1279)  <1695>;
    (__either.1280 var=466) undefined ()  <1696>;
    if {
        {
            () if_expr (__either.1280)  <543>;
        } #36
        {
            #262 off=62
            (__fch_x_low.511 var=195) load (__M_DMw.4 __adr_x.84 x_low.119)  <545>;
            (__fch_x_high.516 var=198) load (__M_DMw.4 __adr_x.706 x_high.125)  <550>;
            (__fch_v_low.519 var=200) load (__M_DMw.4 __adr_v.99 v_low.405)  <553>;
            (__fch_v_high.524 var=203) load (__M_DMw.4 __adr_v.710 v_high.411)  <558>;
            (__fch_z_low.529 var=207) load (__M_DMw.4 __adr_z.94 z_low.379)  <563>;
            (__fch_z_high.534 var=210) load (__M_DMw.4 __adr_z.708 z_high.385)  <568>;
            (__fch_r_low.537 var=212) load (__M_DMw.4 __adr_r.104 r_low.464)  <571>;
            (__fch_r_high.542 var=215) load (__M_DMw.4 __adr_r.712 r_high.470)  <576>;
            (__adr_x.706 var=309) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_16t0.703)  <814>;
            (__adr_z.708 var=311) __Pvoid__pl___Pvoid___sint (__rd___sp.91 __ct_24t0.707)  <817>;
            (__adr_v.710 var=313) __Pvoid__pl___Pvoid___sint (__rd___sp.96 __ct_40t0.709)  <820>;
            (__adr_r.712 var=315) __Pvoid__pl___Pvoid___sint (__rd___sp.101 __ct_32t0.711)  <823>;
            (__link.1006 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1235>;
            call {
                (a_low.1007 var=387 stl=X off=12) assign (__fch_z_low.529)  <1236>;
                (a_high.1008 var=388 stl=X off=13) assign (__fch_z_high.534)  <1237>;
                (b_low.1009 var=389 stl=X off=14) assign (__fch_r_low.537)  <1238>;
                (b_high.1010 var=390 stl=X off=15) assign (__fch_r_high.542)  <1239>;
                (__link.1011 var=392 stl=X off=1) assign (__link.1006)  <1240>;
                (__tmp.1012 var=394 stl=X off=10 __tmp.1013 var=395 stl=X off=11) Ff64_mul (__link.1011 a_low.1007 a_high.1008 b_low.1009 b_high.1010)  <1241>;
                (__tmp.1015 var=394) deassign (__tmp.1012)  <1243>;
                (__tmp.1017 var=395) deassign (__tmp.1013)  <1245>;
            } #263 off=63
            #268 off=64
            (__link.1027 var=407) w32_jal_t21s_s2 (f64_add.858)  <1258>;
            call {
                (a_low.1028 var=402 stl=X off=12) assign (__ct_1431655753.1263)  <1259>;
                (a_high.1029 var=403 stl=X off=13) assign (__ct_3217380693.1264)  <1260>;
                (b_low.1030 var=404 stl=X off=14) assign (__tmp.1015)  <1261>;
                (b_high.1031 var=405 stl=X off=15) assign (__tmp.1017)  <1262>;
                (__link.1032 var=407 stl=X off=1) assign (__link.1027)  <1263>;
                (__tmp.1033 var=409 stl=X off=10 __tmp.1034 var=410 stl=X off=11) Ff64_add (__link.1032 a_low.1028 a_high.1029 b_low.1030 b_high.1031)  <1264>;
                (__tmp.1036 var=409) deassign (__tmp.1033)  <1266>;
                (__tmp.1038 var=410) deassign (__tmp.1034)  <1268>;
            } #269 off=65
            #274 off=66
            (__link.1048 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1281>;
            call {
                (a_low.1049 var=387 stl=X off=12) assign (__fch_v_low.519)  <1282>;
                (a_high.1050 var=388 stl=X off=13) assign (__fch_v_high.524)  <1283>;
                (b_low.1051 var=389 stl=X off=14) assign (__tmp.1036)  <1284>;
                (b_high.1052 var=390 stl=X off=15) assign (__tmp.1038)  <1285>;
                (__link.1053 var=392 stl=X off=1) assign (__link.1048)  <1286>;
                (__tmp.1054 var=394 stl=X off=10 __tmp.1055 var=395 stl=X off=11) Ff64_mul (__link.1053 a_low.1049 a_high.1050 b_low.1051 b_high.1052)  <1287>;
                (__tmp.1057 var=394) deassign (__tmp.1054)  <1289>;
                (__tmp.1059 var=395) deassign (__tmp.1055)  <1291>;
            } #275 off=67
            #280 off=68
            (__link.1069 var=407) w32_jal_t21s_s2 (f64_add.858)  <1304>;
            call {
                (a_low.1070 var=402 stl=X off=12) assign (__fch_x_low.511)  <1305>;
                (a_high.1071 var=403 stl=X off=13) assign (__fch_x_high.516)  <1306>;
                (b_low.1072 var=404 stl=X off=14) assign (__tmp.1057)  <1307>;
                (b_high.1073 var=405 stl=X off=15) assign (__tmp.1059)  <1308>;
                (__link.1074 var=407 stl=X off=1) assign (__link.1069)  <1309>;
                (__tmp.1075 var=409 stl=X off=10 __tmp.1076 var=410 stl=X off=11) Ff64_add (__link.1074 a_low.1070 a_high.1071 b_low.1072 b_high.1073)  <1310>;
                (__tmp.1078 var=409) deassign (__tmp.1075)  <1312>;
                (__tmp.1080 var=410) deassign (__tmp.1076)  <1314>;
            } #281 off=69
        } #37
        {
            #336 off=45
            (__fch_x_low.549 var=221) load (__M_DMw.4 __adr_x.84 x_low.119)  <584>;
            (__fch_x_high.554 var=224) load (__M_DMw.4 __adr_x.716 x_high.125)  <589>;
            (__fch_z_low.557 var=226) load (__M_DMw.4 __adr_z.94 z_low.379)  <592>;
            (__fch_z_high.562 var=229) load (__M_DMw.4 __adr_z.717 z_high.385)  <597>;
            (__fch_y_low.567 var=233) load (__M_DMw.4 __adr_y.79 y_low.110)  <602>;
            (__fch_y_high.572 var=236) load (__M_DMw.4 __adr_y.714 y_high.116)  <607>;
            (__adr_y.714 var=317) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_8t0.713)  <826>;
            (__adr_x.716 var=319) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_16t0.703)  <828>;
            (__adr_z.717 var=320) __Pvoid__pl___Pvoid___sint (__rd___sp.91 __ct_24t0.707)  <829>;
            (__link.1090 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1327>;
            (__ct_1071644672.1266 var=457) const ()  <1563>;
            call {
                (a_low.1091 var=387 stl=X off=12) assign (__ct_0.195)  <1328>;
                (a_high.1092 var=388 stl=X off=13) assign (__ct_1071644672.1266)  <1329>;
                (b_low.1093 var=389 stl=X off=14) assign (__fch_y_low.567)  <1330>;
                (b_high.1094 var=390 stl=X off=15) assign (__fch_y_high.572)  <1331>;
                (__link.1095 var=392 stl=X off=1) assign (__link.1090)  <1332>;
                (__tmp.1096 var=394 stl=X off=10 __tmp.1097 var=395 stl=X off=11) Ff64_mul (__link.1095 a_low.1091 a_high.1092 b_low.1093 b_high.1094)  <1333>;
                (__tmp.1099 var=394) deassign (__tmp.1096)  <1335>;
                (__tmp.1101 var=395) deassign (__tmp.1097)  <1337>;
            } #337 off=46
            #342 off=47
            (__fch_v_low.576 var=239) load (__M_DMw.4 __adr_v.99 v_low.405)  <611>;
            (__fch_v_high.581 var=242) load (__M_DMw.4 __adr_v.718 v_high.411)  <616>;
            (__fch_r_low.584 var=244) load (__M_DMw.4 __adr_r.104 r_low.464)  <619>;
            (__fch_r_high.589 var=247) load (__M_DMw.4 __adr_r.720 r_high.470)  <624>;
            (__adr_v.718 var=321) __Pvoid__pl___Pvoid___sint (__rd___sp.96 __ct_40t0.709)  <830>;
            (__adr_r.720 var=323) __Pvoid__pl___Pvoid___sint (__rd___sp.101 __ct_32t0.711)  <832>;
            (__link.1111 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1350>;
            call {
                (a_low.1112 var=387 stl=X off=12) assign (__fch_v_low.576)  <1351>;
                (a_high.1113 var=388 stl=X off=13) assign (__fch_v_high.581)  <1352>;
                (b_low.1114 var=389 stl=X off=14) assign (__fch_r_low.584)  <1353>;
                (b_high.1115 var=390 stl=X off=15) assign (__fch_r_high.589)  <1354>;
                (__link.1116 var=392 stl=X off=1) assign (__link.1111)  <1355>;
                (__tmp.1117 var=394 stl=X off=10 __tmp.1118 var=395 stl=X off=11) Ff64_mul (__link.1116 a_low.1112 a_high.1113 b_low.1114 b_high.1115)  <1356>;
                (__tmp.1120 var=394) deassign (__tmp.1117)  <1358>;
                (__tmp.1122 var=395) deassign (__tmp.1118)  <1360>;
            } #343 off=48
            #348 off=49
            (f64_sub.1131 var=431) const ()  <1372>;
            (__link.1132 var=432) w32_jal_t21s_s2 (f64_sub.1131)  <1373>;
            call {
                (a_low.1133 var=427 stl=X off=12) assign (__tmp.1099)  <1374>;
                (a_high.1134 var=428 stl=X off=13) assign (__tmp.1101)  <1375>;
                (b_low.1135 var=429 stl=X off=14) assign (__tmp.1120)  <1376>;
                (b_high.1136 var=430 stl=X off=15) assign (__tmp.1122)  <1377>;
                (__link.1137 var=432 stl=X off=1) assign (__link.1132)  <1378>;
                (__tmp.1138 var=434 stl=X off=10 __tmp.1139 var=435 stl=X off=11) Ff64_sub (__link.1137 a_low.1133 a_high.1134 b_low.1135 b_high.1136)  <1379>;
                (__tmp.1141 var=434) deassign (__tmp.1138)  <1381>;
                (__tmp.1143 var=435) deassign (__tmp.1139)  <1383>;
            } #349 off=50
            #354 off=51
            (__link.1153 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1396>;
            call {
                (a_low.1154 var=387 stl=X off=12) assign (__fch_z_low.557)  <1397>;
                (a_high.1155 var=388 stl=X off=13) assign (__fch_z_high.562)  <1398>;
                (b_low.1156 var=389 stl=X off=14) assign (__tmp.1141)  <1399>;
                (b_high.1157 var=390 stl=X off=15) assign (__tmp.1143)  <1400>;
                (__link.1158 var=392 stl=X off=1) assign (__link.1153)  <1401>;
                (__tmp.1159 var=394 stl=X off=10 __tmp.1160 var=395 stl=X off=11) Ff64_mul (__link.1158 a_low.1154 a_high.1155 b_low.1156 b_high.1157)  <1402>;
                (__tmp.1162 var=394) deassign (__tmp.1159)  <1404>;
                (__tmp.1164 var=395) deassign (__tmp.1160)  <1406>;
            } #355 off=52
            #360 off=53
            (__fch_y_low.595 var=252) load (__M_DMw.4 __adr_y.79 y_low.110)  <630>;
            (__fch_y_high.600 var=255) load (__M_DMw.4 __adr_y.715 y_high.116)  <635>;
            (__adr_y.715 var=318) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_8t0.713)  <827>;
            (__link.1174 var=432) w32_jal_t21s_s2 (f64_sub.1131)  <1419>;
            call {
                (a_low.1175 var=427 stl=X off=12) assign (__tmp.1162)  <1420>;
                (a_high.1176 var=428 stl=X off=13) assign (__tmp.1164)  <1421>;
                (b_low.1177 var=429 stl=X off=14) assign (__fch_y_low.595)  <1422>;
                (b_high.1178 var=430 stl=X off=15) assign (__fch_y_high.600)  <1423>;
                (__link.1179 var=432 stl=X off=1) assign (__link.1174)  <1424>;
                (__tmp.1180 var=434 stl=X off=10 __tmp.1181 var=435 stl=X off=11) Ff64_sub (__link.1179 a_low.1175 a_high.1176 b_low.1177 b_high.1178)  <1425>;
                (__tmp.1183 var=434) deassign (__tmp.1180)  <1427>;
                (__tmp.1185 var=435) deassign (__tmp.1181)  <1429>;
            } #361 off=54
            #366 off=55
            (__fch_v_low.604 var=258) load (__M_DMw.4 __adr_v.99 v_low.405)  <639>;
            (__fch_v_high.609 var=261) load (__M_DMw.4 __adr_v.719 v_high.411)  <644>;
            (__adr_v.719 var=322) __Pvoid__pl___Pvoid___sint (__rd___sp.96 __ct_40t0.709)  <831>;
            (__link.1195 var=392) w32_jal_t21s_s2 (f64_mul.795)  <1442>;
            call {
                (a_low.1196 var=387 stl=X off=12) assign (__fch_v_low.604)  <1443>;
                (a_high.1197 var=388 stl=X off=13) assign (__fch_v_high.609)  <1444>;
                (b_low.1198 var=389 stl=X off=14) assign (__ct_1431655753.1263)  <1445>;
                (b_high.1199 var=390 stl=X off=15) assign (__ct_3217380693.1264)  <1446>;
                (__link.1200 var=392 stl=X off=1) assign (__link.1195)  <1447>;
                (__tmp.1201 var=394 stl=X off=10 __tmp.1202 var=395 stl=X off=11) Ff64_mul (__link.1200 a_low.1196 a_high.1197 b_low.1198 b_high.1199)  <1448>;
                (__tmp.1204 var=394) deassign (__tmp.1201)  <1450>;
                (__tmp.1206 var=395) deassign (__tmp.1202)  <1452>;
            } #367 off=56
            #372 off=57
            (__link.1216 var=432) w32_jal_t21s_s2 (f64_sub.1131)  <1465>;
            call {
                (a_low.1217 var=427 stl=X off=12) assign (__tmp.1183)  <1466>;
                (a_high.1218 var=428 stl=X off=13) assign (__tmp.1185)  <1467>;
                (b_low.1219 var=429 stl=X off=14) assign (__tmp.1204)  <1468>;
                (b_high.1220 var=430 stl=X off=15) assign (__tmp.1206)  <1469>;
                (__link.1221 var=432 stl=X off=1) assign (__link.1216)  <1470>;
                (__tmp.1222 var=434 stl=X off=10 __tmp.1223 var=435 stl=X off=11) Ff64_sub (__link.1221 a_low.1217 a_high.1218 b_low.1219 b_high.1220)  <1471>;
                (__tmp.1225 var=434) deassign (__tmp.1222)  <1473>;
                (__tmp.1227 var=435) deassign (__tmp.1223)  <1475>;
            } #373 off=58
            #378 off=59
            (__link.1237 var=432) w32_jal_t21s_s2 (f64_sub.1131)  <1488>;
            call {
                (a_low.1238 var=427 stl=X off=12) assign (__fch_x_low.549)  <1489>;
                (a_high.1239 var=428 stl=X off=13) assign (__fch_x_high.554)  <1490>;
                (b_low.1240 var=429 stl=X off=14) assign (__tmp.1225)  <1491>;
                (b_high.1241 var=430 stl=X off=15) assign (__tmp.1227)  <1492>;
                (__link.1242 var=432 stl=X off=1) assign (__link.1237)  <1493>;
                (__tmp.1243 var=434 stl=X off=10 __tmp.1244 var=435 stl=X off=11) Ff64_sub (__link.1242 a_low.1238 a_high.1239 b_low.1240 b_high.1241)  <1494>;
                (__tmp.1246 var=434) deassign (__tmp.1243)  <1496>;
                (__tmp.1248 var=435) deassign (__tmp.1244)  <1498>;
            } #379 off=60
            #384 off=61
            (__trgt.1281 var=471) const ()  <1697>;
            () void_j_t21s_s2 (__trgt.1281)  <1698>;
        } #40
        {
            (__rt_low.672 var=39) merge (__tmp.1078 __tmp.1246)  <779>;
            (__rt_high.675 var=40) merge (__tmp.1080 __tmp.1248)  <782>;
        } #43
    } #35
    #45 off=70 nxt=-2
    (__rd___sp.617 var=36) rd_res_reg (__R_SP.11 __sp.70)  <653>;
    (__tmp.620 var=269) __Pvoid__pl___Pvoid___sint (__rd___sp.617 __ct_48s0.242)  <656>;
    (__R_SP.621 var=12 __sp.622 var=18) wr_res_reg (__tmp.620 __sp.70)  <657>;
    () void___rts_jr_w32 (__la.37)  <658>;
    (__rt_low.624 var=39 stl=X off=10) assign (__rt_low.672)  <660>;
    () out (__rt_low.624)  <661>;
    (__rt_high.626 var=40 stl=X off=11) assign (__rt_high.675)  <663>;
    () out (__rt_high.626)  <664>;
    () sink (__sp.622)  <674>;
    () sink (iy.107)  <675>;
    () sink (ix.146)  <678>;
    () sink (y_low.110)  <682>;
    () sink (y_high.116)  <683>;
    () sink (x_low.119)  <684>;
    () sink (x_high.125)  <685>;
    () sink (z_low.379)  <686>;
    () sink (z_high.385)  <687>;
    () sink (v_low.405)  <688>;
    () sink (v_high.411)  <689>;
    () sink (r_low.464)  <690>;
    () sink (r_high.470)  <691>;
} #0
0 : 'src/math.c';
----------
0 : (0,735:0,0);
3 : (0,735:45,0);
4 : (0,735:45,0);
5 : (0,735:35,0);
6 : (0,735:35,0);
7 : (0,735:25,0);
8 : (0,735:25,0);
10 : (0,748:4,8);
11 : (0,749:7,9);
12 : (0,749:7,9);
13 : (0,750:9,9);
14 : (0,750:4,9);
16 : (0,751:8,10);
18 : (0,751:9,10);
23 : (0,751:23,11);
24 : (0,751:9,14);
26 : (0,750:4,19);
29 : (0,752:8,23);
31 : (0,753:8,24);
33 : (0,754:8,25);
34 : (0,755:9,25);
35 : (0,755:4,25);
37 : (0,756:14,26);
40 : (0,755:14,29);
45 : (0,755:4,33);
81 : (0,748:1,7);
92 : (0,751:18,10);
95 : (0,751:12,10);
96 : (0,751:12,10);
116 : (0,752:4,22);
119 : (0,752:12,22);
120 : (0,752:12,22);
140 : (0,753:4,23);
143 : (0,753:12,23);
144 : (0,753:12,23);
183 : (0,754:4,24);
186 : (0,754:33,24);
187 : (0,754:33,24);
192 : (0,754:31,24);
193 : (0,754:31,24);
198 : (0,754:27,24);
199 : (0,754:27,24);
204 : (0,754:25,24);
205 : (0,754:25,24);
210 : (0,754:21,24);
211 : (0,754:21,24);
216 : (0,754:19,24);
217 : (0,754:19,24);
222 : (0,754:15,24);
223 : (0,754:15,24);
228 : (0,754:13,24);
229 : (0,754:13,24);
262 : (0,755:30,26);
263 : (0,755:30,26);
268 : (0,755:28,26);
269 : (0,755:28,26);
274 : (0,755:24,26);
275 : (0,755:24,26);
280 : (0,755:22,26);
281 : (0,755:22,26);
336 : (0,756:32,29);
337 : (0,756:32,29);
342 : (0,756:36,29);
343 : (0,756:36,29);
348 : (0,756:34,29);
349 : (0,756:34,29);
354 : (0,756:26,29);
355 : (0,756:26,29);
360 : (0,756:39,29);
361 : (0,756:39,29);
366 : (0,756:44,29);
367 : (0,756:44,29);
372 : (0,756:42,29);
373 : (0,756:42,29);
378 : (0,756:22,29);
379 : (0,756:22,29);
----------
76 : (0,735:14,0);
77 : (0,735:14,0);
79 : (0,735:14,0);
80 : (0,735:14,0);
82 : (0,735:49,0);
83 : (0,735:49,0);
85 : (0,735:49,0);
87 : (0,735:42,0);
88 : (0,735:42,0);
90 : (0,735:42,0);
92 : (0,735:32,0);
93 : (0,735:32,0);
95 : (0,735:32,0);
97 : (0,747:12,0);
98 : (0,747:12,0);
100 : (0,747:12,0);
102 : (0,746:11,0);
103 : (0,746:11,0);
105 : (0,746:11,0);
107 : (0,746:15,0);
108 : (0,746:15,0);
110 : (0,746:15,0);
112 : (0,746:13,0);
113 : (0,746:13,0);
115 : (0,746:13,0);
117 : (0,735:45,0);
118 : (0,735:45,0);
120 : (0,735:35,0);
125 : (0,735:35,0);
126 : (0,735:35,0);
128 : (0,735:25,0);
133 : (0,735:25,0);
134 : (0,735:25,0);
141 : (0,748:21,7);
148 : (0,748:1,7);
149 : (0,748:4,8);
150 : (0,749:4,8);
151 : (0,749:10,0);
153 : (0,749:7,8);
154 : (0,749:4,8);
155 : (0,749:7,9);
156 : (0,750:7,9);
157 : (0,750:10,0);
195 : (0,750:4,9);
197 : (0,751:17,10);
202 : (0,751:17,10);
205 : (0,751:20,0);
207 : (0,751:18,10);
243 : (0,751:9,10);
245 : (0,751:30,11);
250 : (0,751:30,11);
252 : (0,751:23,0);
253 : (0,751:23,0);
255 : (0,751:23,0);
256 : (0,751:23,11);
257 : (0,751:23,11);
259 : (0,751:30,0);
262 : (0,751:30,0);
397 : (0,752:11,22);
402 : (0,752:11,22);
405 : (0,752:13,22);
410 : (0,752:13,22);
414 : (0,752:4,22);
419 : (0,752:4,22);
420 : (0,752:8,23);
422 : (0,753:11,23);
427 : (0,753:11,23);
430 : (0,753:13,23);
435 : (0,753:13,23);
439 : (0,753:4,23);
444 : (0,753:4,23);
445 : (0,753:8,24);
449 : (0,754:14,24);
454 : (0,754:14,24);
459 : (0,754:20,24);
464 : (0,754:20,24);
469 : (0,754:26,24);
474 : (0,754:26,24);
479 : (0,754:32,24);
484 : (0,754:32,24);
497 : (0,754:4,24);
502 : (0,754:4,24);
503 : (0,754:8,25);
504 : (0,755:7,25);
507 : (0,755:9,25);
543 : (0,755:4,25);
545 : (0,755:21,26);
550 : (0,755:21,26);
553 : (0,755:23,26);
558 : (0,755:23,26);
563 : (0,755:29,26);
568 : (0,755:29,26);
571 : (0,755:31,26);
576 : (0,755:31,26);
584 : (0,756:21,29);
589 : (0,756:21,29);
592 : (0,756:25,29);
597 : (0,756:25,29);
602 : (0,756:33,29);
607 : (0,756:33,29);
611 : (0,756:35,29);
616 : (0,756:35,29);
619 : (0,756:37,29);
624 : (0,756:37,29);
630 : (0,756:40,29);
635 : (0,756:40,29);
639 : (0,756:43,29);
644 : (0,756:43,29);
653 : (0,755:4,0);
656 : (0,755:4,0);
657 : (0,755:4,33);
658 : (0,755:4,33);
660 : (0,755:4,0);
663 : (0,755:4,0);
810 : (0,735:32,0);
815 : (0,746:11,0);
818 : (0,746:15,0);
821 : (0,746:13,0);
824 : (0,735:42,0);
985 : (0,751:12,0);
986 : (0,751:12,0);
987 : (0,751:12,10);
988 : (0,751:12,10);
989 : (0,751:12,10);
990 : (0,751:12,10);
991 : (0,751:12,10);
992 : (0,751:12,10);
993 : (0,751:12,10);
1004 : (0,752:12,0);
1005 : (0,752:12,22);
1006 : (0,752:12,22);
1007 : (0,752:12,22);
1008 : (0,752:12,22);
1009 : (0,752:12,22);
1010 : (0,752:12,22);
1011 : (0,752:12,22);
1013 : (0,752:12,22);
1015 : (0,752:12,22);
1028 : (0,753:12,23);
1029 : (0,753:12,23);
1030 : (0,753:12,23);
1031 : (0,753:12,23);
1032 : (0,753:12,23);
1033 : (0,753:12,23);
1034 : (0,753:12,23);
1036 : (0,753:12,23);
1038 : (0,753:12,23);
1051 : (0,754:33,24);
1052 : (0,754:33,24);
1053 : (0,754:33,24);
1054 : (0,754:33,24);
1055 : (0,754:33,24);
1056 : (0,754:33,24);
1057 : (0,754:33,24);
1059 : (0,754:33,24);
1061 : (0,754:33,24);
1073 : (0,754:31,0);
1074 : (0,754:31,24);
1075 : (0,754:31,24);
1076 : (0,754:31,24);
1077 : (0,754:31,24);
1078 : (0,754:31,24);
1079 : (0,754:31,24);
1080 : (0,754:31,24);
1082 : (0,754:31,24);
1084 : (0,754:31,24);
1097 : (0,754:27,24);
1098 : (0,754:27,24);
1099 : (0,754:27,24);
1100 : (0,754:27,24);
1101 : (0,754:27,24);
1102 : (0,754:27,24);
1103 : (0,754:27,24);
1105 : (0,754:27,24);
1107 : (0,754:27,24);
1120 : (0,754:25,24);
1121 : (0,754:25,24);
1122 : (0,754:25,24);
1123 : (0,754:25,24);
1124 : (0,754:25,24);
1125 : (0,754:25,24);
1126 : (0,754:25,24);
1128 : (0,754:25,24);
1130 : (0,754:25,24);
1143 : (0,754:21,24);
1144 : (0,754:21,24);
1145 : (0,754:21,24);
1146 : (0,754:21,24);
1147 : (0,754:21,24);
1148 : (0,754:21,24);
1149 : (0,754:21,24);
1151 : (0,754:21,24);
1153 : (0,754:21,24);
1166 : (0,754:19,24);
1167 : (0,754:19,24);
1168 : (0,754:19,24);
1169 : (0,754:19,24);
1170 : (0,754:19,24);
1171 : (0,754:19,24);
1172 : (0,754:19,24);
1174 : (0,754:19,24);
1176 : (0,754:19,24);
1189 : (0,754:15,24);
1190 : (0,754:15,24);
1191 : (0,754:15,24);
1192 : (0,754:15,24);
1193 : (0,754:15,24);
1194 : (0,754:15,24);
1195 : (0,754:15,24);
1197 : (0,754:15,24);
1199 : (0,754:15,24);
1212 : (0,754:13,24);
1213 : (0,754:13,24);
1214 : (0,754:13,24);
1215 : (0,754:13,24);
1216 : (0,754:13,24);
1217 : (0,754:13,24);
1218 : (0,754:13,24);
1220 : (0,754:13,24);
1222 : (0,754:13,24);
1235 : (0,755:30,26);
1236 : (0,755:30,26);
1237 : (0,755:30,26);
1238 : (0,755:30,26);
1239 : (0,755:30,26);
1240 : (0,755:30,26);
1241 : (0,755:30,26);
1243 : (0,755:30,26);
1245 : (0,755:30,26);
1258 : (0,755:28,26);
1259 : (0,755:28,26);
1260 : (0,755:28,26);
1261 : (0,755:28,26);
1262 : (0,755:28,26);
1263 : (0,755:28,26);
1264 : (0,755:28,26);
1266 : (0,755:28,26);
1268 : (0,755:28,26);
1281 : (0,755:24,26);
1282 : (0,755:24,26);
1283 : (0,755:24,26);
1284 : (0,755:24,26);
1285 : (0,755:24,26);
1286 : (0,755:24,26);
1287 : (0,755:24,26);
1289 : (0,755:24,26);
1291 : (0,755:24,26);
1304 : (0,755:22,26);
1305 : (0,755:22,26);
1306 : (0,755:22,26);
1307 : (0,755:22,26);
1308 : (0,755:22,26);
1309 : (0,755:22,26);
1310 : (0,755:22,26);
1312 : (0,755:22,26);
1314 : (0,755:22,26);
1327 : (0,756:32,29);
1328 : (0,756:32,29);
1329 : (0,756:32,29);
1330 : (0,756:32,29);
1331 : (0,756:32,29);
1332 : (0,756:32,29);
1333 : (0,756:32,29);
1335 : (0,756:32,29);
1337 : (0,756:32,29);
1350 : (0,756:36,29);
1351 : (0,756:36,29);
1352 : (0,756:36,29);
1353 : (0,756:36,29);
1354 : (0,756:36,29);
1355 : (0,756:36,29);
1356 : (0,756:36,29);
1358 : (0,756:36,29);
1360 : (0,756:36,29);
1372 : (0,756:34,0);
1373 : (0,756:34,29);
1374 : (0,756:34,29);
1375 : (0,756:34,29);
1376 : (0,756:34,29);
1377 : (0,756:34,29);
1378 : (0,756:34,29);
1379 : (0,756:34,29);
1381 : (0,756:34,29);
1383 : (0,756:34,29);
1396 : (0,756:26,29);
1397 : (0,756:26,29);
1398 : (0,756:26,29);
1399 : (0,756:26,29);
1400 : (0,756:26,29);
1401 : (0,756:26,29);
1402 : (0,756:26,29);
1404 : (0,756:26,29);
1406 : (0,756:26,29);
1419 : (0,756:39,29);
1420 : (0,756:39,29);
1421 : (0,756:39,29);
1422 : (0,756:39,29);
1423 : (0,756:39,29);
1424 : (0,756:39,29);
1425 : (0,756:39,29);
1427 : (0,756:39,29);
1429 : (0,756:39,29);
1442 : (0,756:44,29);
1443 : (0,756:44,29);
1444 : (0,756:44,29);
1445 : (0,756:44,29);
1446 : (0,756:44,29);
1447 : (0,756:44,29);
1448 : (0,756:44,29);
1450 : (0,756:44,29);
1452 : (0,756:44,29);
1465 : (0,756:42,29);
1466 : (0,756:42,29);
1467 : (0,756:42,29);
1468 : (0,756:42,29);
1469 : (0,756:42,29);
1470 : (0,756:42,29);
1471 : (0,756:42,29);
1473 : (0,756:42,29);
1475 : (0,756:42,29);
1488 : (0,756:22,29);
1489 : (0,756:22,29);
1490 : (0,756:22,29);
1491 : (0,756:22,29);
1492 : (0,756:22,29);
1493 : (0,756:22,29);
1494 : (0,756:22,29);
1496 : (0,756:22,29);
1498 : (0,756:22,29);
1537 : (0,754:34,0);
1539 : (0,754:34,0);
1541 : (0,754:29,0);
1543 : (0,754:29,0);
1545 : (0,754:23,0);
1547 : (0,754:23,0);
1549 : (0,754:17,0);
1551 : (0,754:17,0);
1553 : (0,754:11,0);
1555 : (0,754:11,0);
1557 : (0,755:26,0);
1559 : (0,755:26,0);
1563 : (0,756:28,0);
1645 : (0,750:9,9);
1686 : (0,751:9,10);
1690 : (0,750:4,9);
1695 : (0,755:4,25);

