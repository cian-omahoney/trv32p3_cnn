
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:46:44 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/clib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline int toupper(int)
Ftoupper : user_defined, called {
    fnm : "toupper" 'int toupper(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=4 );
}
****
***/

[
    0 : toupper typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : c typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   20 : _ct_code typ=w08 bnd=e algn=1 stl=DMb
   22 : __rd___sp typ=w32 bnd=m
   24 : __ptr__ct_code typ=w32 val=0a bnd=m adro=20
   25 : __la typ=w32 bnd=p tref=w32__
   27 : __arg_c typ=w32 bnd=p tref=__sint__
   28 : __ct_m4S0 typ=w32 val=-4S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   32 : __ct_0t0 typ=w32 val=0t0 bnd=m
   34 : __adr_c typ=w32 bnd=m adro=19
   39 : __tmpb1___sint_islower___sint typ=__uchar bnd=m tref=__uchar__
   41 : __tmpb0_Ftoupper typ=bool bnd=m tref=bool__
   42 : __fch_c typ=w32 bnd=m
   47 : __tmp typ=w32 bnd=m
   48 : __fch__ct_code typ=__uchar bnd=m
   50 : __ct_1 typ=w32 val=1f bnd=m
   52 : __tmp typ=w32 bnd=m
   54 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   57 : __fch_c typ=w32 bnd=m
   60 : __tmp typ=w32 bnd=m
   61 : __ct_65 typ=w32 val=65f bnd=m
   63 : __tmp typ=w32 bnd=m
   64 : __fch_c typ=w32 bnd=m
   65 : __tmp typ=w32 bnd=m
   66 : __ct_4s0 typ=w32 val=4s0 bnd=m
   68 : __tmp typ=w32 bnd=m
   73 : __ct_m97 typ=w32 val=-97f bnd=m
   82 : __either typ=bool bnd=m
   83 : __trgt typ=t13s_s2 val=0j bnd=m
   84 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ftoupper {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (c.18 var=19) source ()  <29>;
    (_ct_code.19 var=20) source ()  <30>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (__arg_c.28 var=27 stl=X off=11) inp ()  <39>;
    (__arg_c.29 var=27) deassign (__arg_c.28)  <40>;
    (__rd___sp.31 var=22) rd_res_reg (__R_SP.11 __sp.17)  <42>;
    (__ct_m4S0.32 var=28) const ()  <43>;
    (__tmp.34 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.31 __ct_m4S0.32)  <45>;
    (__R_SP.35 var=12 __sp.36 var=18) wr_res_reg (__tmp.34 __sp.17)  <46>;
    (__rd___sp.37 var=22) rd_res_reg (__R_SP.11 __sp.36)  <48>;
    (__ct_0t0.38 var=32) const ()  <49>;
    (__adr_c.40 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_0t0.38)  <51>;
    (__M_DMw.49 var=5 c.50 var=19) store (__arg_c.29 __adr_c.40 c.18)  <60>;
    call {
        () chess_separator_scheduler ()  <63>;
    } #6 off=1
    #7 off=2
    (__fch_c.53 var=42) load (__M_DMw.4 __adr_c.40 c.50)  <65>;
    call {
        () chess_separator_scheduler ()  <70>;
    } #12 off=3
    #13 off=4
    (__tmpb1___sint_islower___sint.57 var=39) __uchar___uchar___sint (__fch_c.53)  <72>;
    call {
        () chess_separator_scheduler ()  <75>;
    } #16 off=5
    #21 off=6
    (__ptr__ct_code.22 var=24) const ()  <33>;
    (__tmp.83 var=47) __Pvoid__pl___Pvoid___sint (__ptr__ct_code.22 __tmpb1___sint_islower___sint.57)  <101>;
    (__fch__ct_code.84 var=48) load (__M_DMb.2 __tmp.83 _ct_code.19)  <102>;
    (__ct_1.86 var=50) const ()  <104>;
    (__tmp.88 var=52) __uint__ad___uint___uint (__fch__ct_code.84 __ct_1.86)  <106>;
    call {
        () chess_separator_scheduler ()  <111>;
    } #26 off=7
    #27 off=8
    (__ct_0.92 var=54) const ()  <113>;
    (__tmpb0_Ftoupper.94 var=41) bool__ne___sint___sint (__tmp.88 __ct_0.92)  <115>;
    (__trgt.164 var=83) const ()  <248>;
    () void_br_bool_t13s_s2 (__tmpb0_Ftoupper.94 __trgt.164)  <249>;
    (__either.165 var=82) undefined ()  <250>;
    if {
        {
            () if_expr (__either.165)  <138>;
        } #31
        {
            (__fch_c.116 var=57) load (__M_DMw.4 __adr_c.40 c.50)  <139>;
            (__tmp.119 var=60) __sint__pl___sint___sint (__fch_c.116 __ct_m97.157)  <142>;
            (__ct_65.120 var=61) const ()  <143>;
            (__tmp.122 var=63) __sint__pl___sint___sint (__tmp.119 __ct_65.120)  <145>;
            (__ct_m97.157 var=73) const ()  <210>;
        } #32 off=10
        {
            (__fch_c.123 var=64) load (__M_DMw.4 __adr_c.40 c.50)  <146>;
            (__trgt.166 var=84) const ()  <251>;
            () void_j_t21s_s2 (__trgt.166)  <252>;
        } #33 off=9
        {
            (__tmp.124 var=65) merge (__tmp.122 __fch_c.123)  <147>;
        } #34
    } #30
    #36 off=11 nxt=-2
    (__rd___sp.125 var=22) rd_res_reg (__R_SP.11 __sp.36)  <148>;
    (__ct_4s0.126 var=66) const ()  <149>;
    (__tmp.128 var=68) __Pvoid__pl___Pvoid___sint (__rd___sp.125 __ct_4s0.126)  <151>;
    (__R_SP.129 var=12 __sp.130 var=18) wr_res_reg (__tmp.128 __sp.36)  <152>;
    () void___rts_jr_w32 (__la.25)  <153>;
    (__tmp.131 var=65 stl=X off=10) assign (__tmp.124)  <154>;
    () out (__tmp.131)  <155>;
    () sink (__sp.130)  <161>;
    () sink (c.50)  <162>;
} #0
0 : 'include/ctype.h';
----------
0 : (0,67:19,0);
3 : (0,67:19,0);
6 : (0,67:36,3);
7 : (0,67:44,4);
12 : (0,67:36,7);
13 : (0,67:36,8);
16 : (0,67:36,10);
21 : (0,67:36,14);
26 : (0,67:36,25);
27 : (0,67:47,27);
30 : (0,67:47,28);
32 : (0,67:58,29);
33 : (0,67:67,30);
36 : (0,67:29,32);
----------
42 : (0,67:19,0);
43 : (0,67:19,0);
45 : (0,67:19,0);
46 : (0,67:19,0);
48 : (0,67:23,0);
49 : (0,67:23,0);
51 : (0,67:23,0);
60 : (0,67:19,0);
63 : (0,67:36,3);
65 : (0,67:44,4);
70 : (0,67:36,7);
72 : (0,67:36,8);
75 : (0,67:36,10);
101 : (0,67:36,13);
102 : (0,67:36,13);
104 : (0,67:36,0);
106 : (0,67:36,13);
111 : (0,67:36,25);
113 : (0,67:47,0);
115 : (0,67:47,27);
138 : (0,67:47,28);
139 : (0,67:50,29);
142 : (0,67:52,29);
143 : (0,67:58,0);
145 : (0,67:58,29);
146 : (0,67:67,30);
147 : (0,67:47,31);
148 : (0,67:29,0);
149 : (0,67:29,0);
151 : (0,67:29,0);
152 : (0,67:29,32);
153 : (0,67:29,32);
154 : (0,67:47,0);
210 : (0,67:52,0);
249 : (0,67:47,28);

