
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 16:37:23 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/clib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline int strcoll(const char *, const char *)
Fstrcoll : user_defined, called {
    fnm : "strcoll" 'int strcoll(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=8 );
}
****
!!  int strcmp(const char *, const char *)
Fstrcmp : user_defined, called {
    fnm : "strcmp" 'int strcmp(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : strcoll typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   13 : __vola typ=u08 bnd=b stl=PMb
   16 : __extPMb typ=u08 bnd=b stl=PMb
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s2 typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   20 : s1 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : __extPMb_void typ=u08 bnd=b stl=PMb
   22 : __extDMb_void typ=w08 bnd=b stl=DMb
   23 : __rd___sp typ=w32 bnd=m
   24 : __la typ=w32 bnd=p tref=w32__
   25 : __rt typ=w32 bnd=p tref=__sint__
   26 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   27 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   28 : __ct_m8S0 typ=w32 val=-8S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   32 : __ct_0t0 typ=w32 val=0t0 bnd=m
   34 : __adr_s2 typ=w32 bnd=m adro=19
   36 : __ct_4t0 typ=w32 val=4t0 bnd=m
   38 : __adr_s1 typ=w32 bnd=m adro=20
   39 : __fch_s1 typ=w32 bnd=m
   40 : __fch_s2 typ=w32 bnd=m
   43 : strcmp typ=t21s_s2 val=0r bnd=m
   44 : __link typ=w32 bnd=m
   45 : __tmp typ=w32 bnd=m
   46 : __ct_8s0 typ=w32 val=8s0 bnd=m
   48 : __tmp typ=w32 bnd=m
]
Fstrcoll {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__vola.12 var=13) source ()  <23>;
    (__extPMb.15 var=16) source ()  <26>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (s2.18 var=19) source ()  <29>;
    (s1.19 var=20) source ()  <30>;
    (__extPMb_void.20 var=21) source ()  <31>;
    (__extDMb_void.21 var=22) source ()  <32>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (__arg_s1.27 var=26 stl=X off=11) inp ()  <38>;
    (__arg_s1.28 var=26) deassign (__arg_s1.27)  <39>;
    (__arg_s2.30 var=27 stl=X off=12) inp ()  <41>;
    (__arg_s2.31 var=27) deassign (__arg_s2.30)  <42>;
    (__rd___sp.33 var=23) rd_res_reg (__R_SP.11 __sp.17)  <44>;
    (__ct_m8S0.34 var=28) const ()  <45>;
    (__tmp.36 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_m8S0.34)  <47>;
    (__R_SP.37 var=12 __sp.38 var=18) wr_res_reg (__tmp.36 __sp.17)  <48>;
    (__rd___sp.39 var=23) rd_res_reg (__R_SP.11 __sp.38)  <50>;
    (__ct_0t0.40 var=32) const ()  <51>;
    (__adr_s2.42 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_0t0.40)  <53>;
    (__rd___sp.44 var=23) rd_res_reg (__R_SP.11 __sp.38)  <55>;
    (__M_DMw.49 var=5 s2.50 var=19) store (__arg_s2.31 __adr_s2.42 s2.18)  <60>;
    call {
        () chess_separator_scheduler ()  <61>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.45 var=36) const ()  <56>;
    (__adr_s1.47 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_4t0.45)  <58>;
    (__M_DMw.51 var=5 s1.52 var=20) store (__arg_s1.28 __adr_s1.47 s1.19)  <62>;
    call {
        () chess_separator_scheduler ()  <63>;
    } #6 off=3
    #7 off=4
    (__fch_s1.53 var=39) load (__M_DMw.4 __adr_s1.47 s1.52)  <64>;
    (__fch_s2.55 var=40) load (__M_DMw.4 __adr_s2.42 s2.50)  <66>;
    (strcmp.59 var=43) const ()  <70>;
    (__link.60 var=44) w32_jal_t21s_s2 (strcmp.59)  <71>;
    call {
        (__fch_s1.54 var=39 stl=X off=11) assign (__fch_s1.53)  <65>;
        (__fch_s2.56 var=40 stl=X off=12) assign (__fch_s2.55)  <67>;
        (__link.61 var=44 stl=X off=1) assign (__link.60)  <72>;
        (__tmp.62 var=45 stl=X off=10 __extDMb.65 var=17 __extDMb_void.66 var=22 __extPMb.67 var=16 __extPMb_void.68 var=21 __vola.69 var=13) Fstrcmp (__link.61 __fch_s1.54 __fch_s2.56 __extDMb.16 __extDMb_void.21 __extPMb.15 __extPMb_void.20 __vola.12)  <73>;
        (__tmp.63 var=45) deassign (__tmp.62)  <74>;
    } #8 off=5
    #10 off=6 nxt=-2
    (__rd___sp.70 var=23) rd_res_reg (__R_SP.11 __sp.38)  <76>;
    (__ct_8s0.71 var=46) const ()  <77>;
    (__tmp.73 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.70 __ct_8s0.71)  <79>;
    (__R_SP.74 var=12 __sp.75 var=18) wr_res_reg (__tmp.73 __sp.38)  <80>;
    () void___rts_jr_w32 (__la.24)  <81>;
    (__rt.76 var=25 stl=X off=10) assign (__tmp.63)  <82>;
    () out (__rt.76)  <83>;
    () sink (__vola.69)  <84>;
    () sink (__extPMb.67)  <87>;
    () sink (__extDMb.65)  <88>;
    () sink (__sp.75)  <89>;
    () sink (s2.50)  <90>;
    () sink (s1.52)  <91>;
    () sink (__extPMb_void.68)  <92>;
    () sink (__extDMb_void.66)  <93>;
} #0
0 : 'include/string.h';
----------
0 : (0,39:19,0);
3 : (0,39:35,0);
4 : (0,39:35,0);
5 : (0,39:19,0);
6 : (0,39:19,0);
7 : (0,39:70,3);
8 : (0,39:60,3);
10 : (0,39:53,3);
----------
44 : (0,39:19,0);
45 : (0,39:19,0);
47 : (0,39:19,0);
48 : (0,39:19,0);
50 : (0,39:47,0);
51 : (0,39:47,0);
53 : (0,39:47,0);
55 : (0,39:31,0);
56 : (0,39:31,0);
58 : (0,39:31,0);
60 : (0,39:35,0);
61 : (0,39:35,0);
62 : (0,39:19,0);
63 : (0,39:19,0);
64 : (0,39:67,3);
65 : (0,39:67,0);
66 : (0,39:70,3);
67 : (0,39:70,0);
71 : (0,39:60,3);
72 : (0,39:60,0);
73 : (0,39:60,3);
76 : (0,39:53,0);
77 : (0,39:53,0);
79 : (0,39:53,0);
80 : (0,39:53,3);
81 : (0,39:53,3);
82 : (0,39:66,0);

