
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 13:35:43 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! static float kernel_cosf(float, float)
Fkernel_cosf : user_defined, called {
    fnm : "kernel_cosf" 'float kernel_cosf(float, float)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=32 );
}
****
!!  long f32_to_i32_r_minMag(float32_t, bool)
Ff32_to_i32_r_minMag : user_defined, called {
    fnm : "f32_to_i32_r_minMag" 'long f32_to_i32_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_sub(float32_t, float32_t)
Ff32_sub : user_defined, called {
    fnm : "f32_sub" 'float32_t f32_sub(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : kernel_cosf typ=u08 bnd=i stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : y typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   20 : x typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   21 : ix typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   22 : z typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   23 : r typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   24 : qx typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   25 : hz typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   26 : a typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   27 : __rd___sp typ=w32 bnd=m
   28 : __la typ=w32 bnd=p tref=w32__
   29 : __rt typ=w32 bnd=p tref=__ffloat__
   30 : __arg_x typ=w32 bnd=p tref=__ffloat__
   31 : __arg_y typ=w32 bnd=p tref=__ffloat__
   32 : __ct_m32S0 typ=w32 val=-32S0 bnd=m
   34 : __tmp typ=w32 bnd=m
   36 : __ct_0t0 typ=w32 val=0t0 bnd=m
   38 : __adr_y typ=w32 bnd=m adro=19
   40 : __ct_4t0 typ=w32 val=4t0 bnd=m
   42 : __adr_x typ=w32 bnd=m adro=20
   44 : __ct_28t0 typ=w32 val=28t0 bnd=m
   46 : __adr_ix typ=w32 bnd=m adro=21
   48 : __ct_16t0 typ=w32 val=16t0 bnd=m
   50 : __adr_z typ=w32 bnd=m adro=22
   52 : __ct_20t0 typ=w32 val=20t0 bnd=m
   54 : __adr_r typ=w32 bnd=m adro=23
   56 : __ct_24t0 typ=w32 val=24t0 bnd=m
   58 : __adr_qx typ=w32 bnd=m adro=24
   60 : __ct_12t0 typ=w32 val=12t0 bnd=m
   62 : __adr_hz typ=w32 bnd=m adro=25
   64 : __ct_8t0 typ=w32 val=8t0 bnd=m
   66 : __adr_a typ=w32 bnd=m adro=26
   67 : __fch_x typ=w32 bnd=m
   69 : __fch_ix typ=w32 bnd=m
   70 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   72 : __tmp typ=w32 bnd=m
   73 : __fch_ix typ=w32 bnd=m
   74 : __ct_838860800 typ=t20s_rp12 val=204800f bnd=m
   76 : __tmp typ=bool bnd=m
   77 : __fch_x typ=w32 bnd=m
   78 : __tmp typ=w32 bnd=m
   79 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   81 : __tmp typ=bool bnd=m
   82 : __ct_1065353216 typ=t20s_rp12 val=260096f bnd=m
   84 : __ct_32s0 typ=w32 val=32s0 bnd=m
   86 : __tmp typ=w32 bnd=m
   87 : __fch_x typ=w32 bnd=m
   88 : __fch_x typ=w32 bnd=m
   89 : __tmp typ=w32 bnd=m
   90 : __fch_z typ=w32 bnd=m
   91 : __ct_1026206379 typ=w32 val=1026206379f bnd=m
   93 : __fch_z typ=w32 bnd=m
   94 : __ct_3132492641 typ=w32 val=-1162474655f bnd=m
   96 : __fch_z typ=w32 bnd=m
   97 : __ct_936381697 typ=w32 val=936381697f bnd=m
   99 : __fch_z typ=w32 bnd=m
  100 : __ct_3029594748 typ=w32 val=-1265372548f bnd=m
  102 : __fch_z typ=w32 bnd=m
  103 : __ct_823096566 typ=w32 val=823096566f bnd=m
  105 : __fch_z typ=w32 bnd=m
  106 : __ct_2907166542 typ=w32 val=-1387800754f bnd=m
  108 : __tmp typ=w32 bnd=m
  109 : __tmp typ=w32 bnd=m
  110 : __tmp typ=w32 bnd=m
  111 : __tmp typ=w32 bnd=m
  112 : __tmp typ=w32 bnd=m
  113 : __tmp typ=w32 bnd=m
  114 : __tmp typ=w32 bnd=m
  115 : __tmp typ=w32 bnd=m
  116 : __tmp typ=w32 bnd=m
  117 : __tmp typ=w32 bnd=m
  118 : __tmp typ=w32 bnd=m
  119 : __fch_ix typ=w32 bnd=m
  120 : __ct_1050253722 typ=w32 val=1050253722f bnd=m
  122 : __tmp typ=bool bnd=m
  125 : __ct_1056964608 typ=t20s_rp12 val=258048f bnd=m
  127 : __fch_z typ=w32 bnd=m
  128 : __tmp typ=w32 bnd=m
  129 : __fch_z typ=w32 bnd=m
  130 : __fch_r typ=w32 bnd=m
  131 : __tmp typ=w32 bnd=m
  132 : __fch_x typ=w32 bnd=m
  133 : __fch_y typ=w32 bnd=m
  134 : __tmp typ=w32 bnd=m
  135 : __tmp typ=w32 bnd=m
  136 : __tmp typ=w32 bnd=m
  138 : __fch_ix typ=w32 bnd=m
  139 : __ct_1061683200 typ=t20s_rp12 val=259200f bnd=m
  141 : __tmp typ=bool bnd=m
  142 : __ct_1049624576 typ=t20s_rp12 val=256256f bnd=m
  144 : __fch_ix typ=w32 bnd=m
  147 : __tmp typ=w32 bnd=m
  151 : __fch_z typ=w32 bnd=m
  152 : __tmp typ=w32 bnd=m
  153 : __fch_qx typ=w32 bnd=m
  154 : __tmp typ=w32 bnd=m
  157 : __fch_qx typ=w32 bnd=m
  158 : __tmp typ=w32 bnd=m
  159 : __fch_a typ=w32 bnd=m
  160 : __fch_hz typ=w32 bnd=m
  161 : __fch_z typ=w32 bnd=m
  162 : __fch_r typ=w32 bnd=m
  163 : __tmp typ=w32 bnd=m
  164 : __fch_x typ=w32 bnd=m
  165 : __fch_y typ=w32 bnd=m
  166 : __tmp typ=w32 bnd=m
  167 : __tmp typ=w32 bnd=m
  168 : __tmp typ=w32 bnd=m
  172 : __tmp typ=w32 bnd=m
  177 : __ct_m16777216 typ=t20s_rp12 val=-4096f bnd=m
  186 : a typ=w32 bnd=m tref=float32_t__
  187 : __tmp typ=w32 bnd=m
  188 : f32_to_i32_r_minMag typ=t21s_s2 val=0r bnd=m
  189 : __link typ=w32 bnd=m
  191 : __ct_1 typ=w32 val=1f bnd=m
  193 : a typ=w32 bnd=m tref=float32_t__
  194 : b typ=w32 bnd=m tref=float32_t__
  195 : f32_mul typ=t21s_s2 val=0r bnd=m
  196 : __link typ=w32 bnd=m
  200 : a typ=w32 bnd=m tref=float32_t__
  201 : b typ=w32 bnd=m tref=float32_t__
  202 : f32_add typ=t21s_s2 val=0r bnd=m
  203 : __link typ=w32 bnd=m
  218 : a typ=w32 bnd=m tref=float32_t__
  219 : b typ=w32 bnd=m tref=float32_t__
  220 : f32_sub typ=t21s_s2 val=0r bnd=m
  221 : __link typ=w32 bnd=m
  242 : __either typ=bool bnd=m
  243 : __trgt typ=t13s_s2 val=0j bnd=m
  244 : __trgt typ=t13s_s2 val=0j bnd=m
  245 : __trgt typ=t21s_s2 val=0j bnd=m
  246 : __trgt typ=t13s_s2 val=0j bnd=m
  247 : __trgt typ=t21s_s2 val=0j bnd=m
  248 : __trgt typ=t13s_s2 val=0j bnd=m
  249 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fkernel_cosf {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (y.18 var=19) source ()  <29>;
    (x.19 var=20) source ()  <30>;
    (ix.20 var=21) source ()  <31>;
    (z.21 var=22) source ()  <32>;
    (r.22 var=23) source ()  <33>;
    (qx.23 var=24) source ()  <34>;
    (hz.24 var=25) source ()  <35>;
    (a.25 var=26) source ()  <36>;
    (__la.27 var=28 stl=X off=1) inp ()  <38>;
    (__la.28 var=28) deassign (__la.27)  <39>;
    (__arg_x.31 var=30 stl=X off=11) inp ()  <42>;
    (__arg_x.32 var=30) deassign (__arg_x.31)  <43>;
    (__arg_y.34 var=31 stl=X off=12) inp ()  <45>;
    (__arg_y.35 var=31) deassign (__arg_y.34)  <46>;
    (__rd___sp.37 var=27) rd_res_reg (__R_SP.11 __sp.17)  <48>;
    (__ct_m32S0.38 var=32) const ()  <49>;
    (__tmp.40 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_m32S0.38)  <51>;
    (__R_SP.41 var=12 __sp.42 var=18) wr_res_reg (__tmp.40 __sp.17)  <52>;
    (__rd___sp.43 var=27) rd_res_reg (__R_SP.11 __sp.42)  <54>;
    (__ct_0t0.44 var=36) const ()  <55>;
    (__adr_y.46 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_0t0.44)  <57>;
    (__rd___sp.48 var=27) rd_res_reg (__R_SP.11 __sp.42)  <59>;
    (__rd___sp.53 var=27) rd_res_reg (__R_SP.11 __sp.42)  <64>;
    (__rd___sp.58 var=27) rd_res_reg (__R_SP.11 __sp.42)  <69>;
    (__rd___sp.63 var=27) rd_res_reg (__R_SP.11 __sp.42)  <74>;
    (__rd___sp.68 var=27) rd_res_reg (__R_SP.11 __sp.42)  <79>;
    (__rd___sp.73 var=27) rd_res_reg (__R_SP.11 __sp.42)  <84>;
    (__rd___sp.78 var=27) rd_res_reg (__R_SP.11 __sp.42)  <89>;
    (__M_DMw.83 var=5 y.84 var=19) store (__arg_y.35 __adr_y.46 y.18)  <94>;
    call {
        () chess_separator_scheduler ()  <95>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.49 var=40) const ()  <60>;
    (__adr_x.51 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_4t0.49)  <62>;
    (__M_DMw.85 var=5 x.86 var=20) store (__arg_x.32 __adr_x.51 x.19)  <96>;
    call {
        () chess_separator_scheduler ()  <97>;
    } #6 off=3
    #7 off=4
    (__ct_28t0.54 var=44) const ()  <65>;
    (__adr_ix.56 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_28t0.54)  <67>;
    (__fch_x.87 var=67) load (__M_DMw.4 __adr_x.51 x.86)  <98>;
    (__M_DMw.89 var=5 ix.90 var=21) store (__fch_x.87 __adr_ix.56 ix.20)  <100>;
    call {
        () chess_separator_scheduler ()  <101>;
    } #8 off=5
    #9 off=6
    (__fch_ix.91 var=69) load (__M_DMw.4 __adr_ix.56 ix.90)  <102>;
    (__ct_2147483647.92 var=70) const ()  <103>;
    (__tmp.94 var=72) __sint__ad___sint___sint (__fch_ix.91 __ct_2147483647.92)  <105>;
    (__M_DMw.95 var=5 ix.96 var=21) store (__tmp.94 __adr_ix.56 ix.90)  <106>;
    call {
        () chess_separator_scheduler ()  <107>;
    } #10 off=7
    #11 off=8
    (__fch_ix.97 var=73) load (__M_DMw.4 __adr_ix.56 ix.96)  <108>;
    (__ct_838860800.98 var=74) const ()  <109>;
    (__ct_1065353216.158 var=82) const ()  <171>;
    (__ct_32s0.161 var=84) const ()  <174>;
    (__tmp.717 var=76) bool__ge___sint___sint (__fch_ix.97 __ct_838860800.98)  <1021>;
    (__trgt.722 var=244) const ()  <1060>;
    () void_br_bool_t13s_s2 (__tmp.717 __trgt.722)  <1061>;
    (__either.723 var=242) undefined ()  <1062>;
    if {
        {
            () if_expr (__either.723)  <138>;
        } #13
        {
        } #24 off=15
        {
            #66 off=9
            (__fch_x.127 var=77) load (__M_DMw.4 __adr_x.51 x.86)  <139>;
            (__ct_1.444 var=191) const ()  <604>;
            (f32_to_i32_r_minMag.445 var=188) const ()  <605>;
            (__link.446 var=189) w32_jal_t21s_s2 (f32_to_i32_r_minMag.445)  <606>;
            call {
                (a.447 var=186 stl=X off=11) assign (__fch_x.127)  <607>;
                (__tmp.448 var=187 stl=X off=12) assign (__ct_1.444)  <608>;
                (__link.449 var=189 stl=X off=1) assign (__link.446)  <609>;
                (__tmp.450 var=78 stl=X off=10) Ff32_to_i32_r_minMag (__link.449 a.447 __tmp.448)  <610>;
                (__tmp.451 var=78) deassign (__tmp.450)  <611>;
            } #67 off=10
            #63 off=11
            (__ct_0.129 var=79) const ()  <141>;
            (__tmp.131 var=81) bool__eq___sint___sint (__tmp.451 __ct_0.129)  <143>;
            (__trgt.720 var=243) const ()  <1056>;
            () void_br_bool_t13s_s2 (__tmp.131 __trgt.720)  <1057>;
            (__either.721 var=242) undefined ()  <1058>;
            if {
                {
                    () if_expr (__either.721)  <170>;
                    () chess_rear_then ()  <1059>;
                } #17
                {
                    (__rd___sp.160 var=27) rd_res_reg (__R_SP.11 __sp.42)  <173>;
                    (__tmp.163 var=86) __Pvoid__pl___Pvoid___sint (__rd___sp.160 __ct_32s0.161)  <176>;
                    (__R_SP.164 var=12 __sp.165 var=18) wr_res_reg (__tmp.163 __sp.42)  <177>;
                    () void___rts_jr_w32 (__la.28)  <178>;
                    (__rt.166 var=29 stl=X off=10) assign (__ct_1065353216.158)  <179>;
                    () out (__rt.166)  <180>;
                    () sink (__sp.165)  <186>;
                    () sink (y.84)  <187>;
                    () sink (x.86)  <188>;
                    () sink (ix.96)  <189>;
                } #21 off=13 nxt=-2
                {
                } #22 off=12
                {
                } #23
            } #16
            #280 off=14
            (__trgt.724 var=245) const ()  <1063>;
            () void_j_t21s_s2 (__trgt.724)  <1064>;
        } #14
        {
        } #25
    } #12
    #76 off=16
    (__fch_x.245 var=87) load (__M_DMw.4 __adr_x.51 x.86)  <273>;
    (__fch_x.246 var=88) load (__M_DMw.4 __adr_x.51 x.86)  <274>;
    (f32_mul.455 var=195) const ()  <618>;
    (__link.456 var=196) w32_jal_t21s_s2 (f32_mul.455)  <619>;
    call {
        (a.457 var=193 stl=X off=11) assign (__fch_x.245)  <620>;
        (b.458 var=194 stl=X off=12) assign (__fch_x.246)  <621>;
        (__link.459 var=196 stl=X off=1) assign (__link.456)  <622>;
        (__tmp.460 var=89 stl=X off=10) Ff32_mul (__link.459 a.457 b.458)  <623>;
        (__tmp.461 var=89) deassign (__tmp.460)  <624>;
    } #77 off=17
    #73 off=18
    (__ct_16t0.59 var=48) const ()  <70>;
    (__adr_z.61 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_16t0.59)  <72>;
    (__M_DMw.248 var=5 z.249 var=22) store (__tmp.461 __adr_z.61 z.21)  <276>;
    call {
        () chess_separator_scheduler ()  <277>;
    } #27 off=19
    #100 off=20
    (__fch_z.250 var=90) load (__M_DMw.4 __adr_z.61 z.249)  <278>;
    (__fch_z.253 var=93) load (__M_DMw.4 __adr_z.61 z.249)  <281>;
    (__fch_z.256 var=96) load (__M_DMw.4 __adr_z.61 z.249)  <284>;
    (__fch_z.259 var=99) load (__M_DMw.4 __adr_z.61 z.249)  <287>;
    (__fch_z.262 var=102) load (__M_DMw.4 __adr_z.61 z.249)  <290>;
    (__fch_z.265 var=105) load (__M_DMw.4 __adr_z.61 z.249)  <293>;
    (__ct_2907166542.266 var=106) const ()  <294>;
    (__link.466 var=196) w32_jal_t21s_s2 (f32_mul.455)  <632>;
    call {
        (a.467 var=193 stl=X off=11) assign (__fch_z.265)  <633>;
        (b.468 var=194 stl=X off=12) assign (__ct_2907166542.266)  <634>;
        (__link.469 var=196 stl=X off=1) assign (__link.466)  <635>;
        (__tmp.470 var=108 stl=X off=10) Ff32_mul (__link.469 a.467 b.468)  <636>;
        (__tmp.471 var=108) deassign (__tmp.470)  <637>;
    } #101 off=21
    #106 off=22
    (__ct_823096566.263 var=103) const ()  <291>;
    (f32_add.475 var=202) const ()  <644>;
    (__link.476 var=203) w32_jal_t21s_s2 (f32_add.475)  <645>;
    call {
        (a.477 var=200 stl=X off=11) assign (__ct_823096566.263)  <646>;
        (b.478 var=201 stl=X off=12) assign (__tmp.471)  <647>;
        (__link.479 var=203 stl=X off=1) assign (__link.476)  <648>;
        (__tmp.480 var=109 stl=X off=10) Ff32_add (__link.479 a.477 b.478)  <649>;
        (__tmp.481 var=109) deassign (__tmp.480)  <650>;
    } #107 off=23
    #112 off=24
    (__link.486 var=196) w32_jal_t21s_s2 (f32_mul.455)  <658>;
    call {
        (a.487 var=193 stl=X off=11) assign (__fch_z.262)  <659>;
        (b.488 var=194 stl=X off=12) assign (__tmp.481)  <660>;
        (__link.489 var=196 stl=X off=1) assign (__link.486)  <661>;
        (__tmp.490 var=110 stl=X off=10) Ff32_mul (__link.489 a.487 b.488)  <662>;
        (__tmp.491 var=110) deassign (__tmp.490)  <663>;
    } #113 off=25
    #118 off=26
    (__ct_3029594748.260 var=100) const ()  <288>;
    (__link.496 var=203) w32_jal_t21s_s2 (f32_add.475)  <671>;
    call {
        (a.497 var=200 stl=X off=11) assign (__ct_3029594748.260)  <672>;
        (b.498 var=201 stl=X off=12) assign (__tmp.491)  <673>;
        (__link.499 var=203 stl=X off=1) assign (__link.496)  <674>;
        (__tmp.500 var=111 stl=X off=10) Ff32_add (__link.499 a.497 b.498)  <675>;
        (__tmp.501 var=111) deassign (__tmp.500)  <676>;
    } #119 off=27
    #124 off=28
    (__link.506 var=196) w32_jal_t21s_s2 (f32_mul.455)  <684>;
    call {
        (a.507 var=193 stl=X off=11) assign (__fch_z.259)  <685>;
        (b.508 var=194 stl=X off=12) assign (__tmp.501)  <686>;
        (__link.509 var=196 stl=X off=1) assign (__link.506)  <687>;
        (__tmp.510 var=112 stl=X off=10) Ff32_mul (__link.509 a.507 b.508)  <688>;
        (__tmp.511 var=112) deassign (__tmp.510)  <689>;
    } #125 off=29
    #130 off=30
    (__ct_936381697.257 var=97) const ()  <285>;
    (__link.516 var=203) w32_jal_t21s_s2 (f32_add.475)  <697>;
    call {
        (a.517 var=200 stl=X off=11) assign (__ct_936381697.257)  <698>;
        (b.518 var=201 stl=X off=12) assign (__tmp.511)  <699>;
        (__link.519 var=203 stl=X off=1) assign (__link.516)  <700>;
        (__tmp.520 var=113 stl=X off=10) Ff32_add (__link.519 a.517 b.518)  <701>;
        (__tmp.521 var=113) deassign (__tmp.520)  <702>;
    } #131 off=31
    #136 off=32
    (__link.526 var=196) w32_jal_t21s_s2 (f32_mul.455)  <710>;
    call {
        (a.527 var=193 stl=X off=11) assign (__fch_z.256)  <711>;
        (b.528 var=194 stl=X off=12) assign (__tmp.521)  <712>;
        (__link.529 var=196 stl=X off=1) assign (__link.526)  <713>;
        (__tmp.530 var=114 stl=X off=10) Ff32_mul (__link.529 a.527 b.528)  <714>;
        (__tmp.531 var=114) deassign (__tmp.530)  <715>;
    } #137 off=33
    #142 off=34
    (__ct_3132492641.254 var=94) const ()  <282>;
    (__link.536 var=203) w32_jal_t21s_s2 (f32_add.475)  <723>;
    call {
        (a.537 var=200 stl=X off=11) assign (__ct_3132492641.254)  <724>;
        (b.538 var=201 stl=X off=12) assign (__tmp.531)  <725>;
        (__link.539 var=203 stl=X off=1) assign (__link.536)  <726>;
        (__tmp.540 var=115 stl=X off=10) Ff32_add (__link.539 a.537 b.538)  <727>;
        (__tmp.541 var=115) deassign (__tmp.540)  <728>;
    } #143 off=35
    #148 off=36
    (__link.546 var=196) w32_jal_t21s_s2 (f32_mul.455)  <736>;
    call {
        (a.547 var=193 stl=X off=11) assign (__fch_z.253)  <737>;
        (b.548 var=194 stl=X off=12) assign (__tmp.541)  <738>;
        (__link.549 var=196 stl=X off=1) assign (__link.546)  <739>;
        (__tmp.550 var=116 stl=X off=10) Ff32_mul (__link.549 a.547 b.548)  <740>;
        (__tmp.551 var=116) deassign (__tmp.550)  <741>;
    } #149 off=37
    #154 off=38
    (__ct_1026206379.251 var=91) const ()  <279>;
    (__link.556 var=203) w32_jal_t21s_s2 (f32_add.475)  <749>;
    call {
        (a.557 var=200 stl=X off=11) assign (__ct_1026206379.251)  <750>;
        (b.558 var=201 stl=X off=12) assign (__tmp.551)  <751>;
        (__link.559 var=203 stl=X off=1) assign (__link.556)  <752>;
        (__tmp.560 var=117 stl=X off=10) Ff32_add (__link.559 a.557 b.558)  <753>;
        (__tmp.561 var=117) deassign (__tmp.560)  <754>;
    } #155 off=39
    #160 off=40
    (__link.566 var=196) w32_jal_t21s_s2 (f32_mul.455)  <762>;
    call {
        (a.567 var=193 stl=X off=11) assign (__fch_z.250)  <763>;
        (b.568 var=194 stl=X off=12) assign (__tmp.561)  <764>;
        (__link.569 var=196 stl=X off=1) assign (__link.566)  <765>;
        (__tmp.570 var=118 stl=X off=10) Ff32_mul (__link.569 a.567 b.568)  <766>;
        (__tmp.571 var=118) deassign (__tmp.570)  <767>;
    } #161 off=41
    #97 off=42
    (__ct_20t0.64 var=52) const ()  <75>;
    (__adr_r.66 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_20t0.64)  <77>;
    (__M_DMw.279 var=5 r.280 var=23) store (__tmp.571 __adr_r.66 r.22)  <307>;
    call {
        () chess_separator_scheduler ()  <308>;
    } #29 off=43
    #30 off=44
    (__fch_ix.281 var=119) load (__M_DMw.4 __adr_ix.56 ix.96)  <309>;
    (__ct_1050253722.282 var=120) const ()  <310>;
    (__tmp.284 var=122) bool__lt___sint___sint (__fch_ix.281 __ct_1050253722.282)  <312>;
    (__ct_1056964608.313 var=125) const ()  <342>;
    (f32_sub.605 var=220) const ()  <813>;
    (__trgt.728 var=248) const ()  <1070>;
    () void_br_bool_t13s_s2 (__tmp.284 __trgt.728)  <1071>;
    (__either.729 var=242) undefined ()  <1072>;
    if {
        {
            () if_expr (__either.729)  <339>;
        } #32
        {
            #177 off=69
            (__fch_z.315 var=127) load (__M_DMw.4 __adr_z.61 z.249)  <344>;
            (__link.576 var=196) w32_jal_t21s_s2 (f32_mul.455)  <775>;
            call {
                (a.577 var=193 stl=X off=11) assign (__ct_1056964608.313)  <776>;
                (b.578 var=194 stl=X off=12) assign (__fch_z.315)  <777>;
                (__link.579 var=196 stl=X off=1) assign (__link.576)  <778>;
                (__tmp.580 var=128 stl=X off=10) Ff32_mul (__link.579 a.577 b.578)  <779>;
                (__tmp.581 var=128) deassign (__tmp.580)  <780>;
            } #178 off=70
            #183 off=71
            (__fch_z.317 var=129) load (__M_DMw.4 __adr_z.61 z.249)  <346>;
            (__fch_r.318 var=130) load (__M_DMw.4 __adr_r.66 r.280)  <347>;
            (__link.586 var=196) w32_jal_t21s_s2 (f32_mul.455)  <788>;
            call {
                (a.587 var=193 stl=X off=11) assign (__fch_z.317)  <789>;
                (b.588 var=194 stl=X off=12) assign (__fch_r.318)  <790>;
                (__link.589 var=196 stl=X off=1) assign (__link.586)  <791>;
                (__tmp.590 var=131 stl=X off=10) Ff32_mul (__link.589 a.587 b.588)  <792>;
                (__tmp.591 var=131) deassign (__tmp.590)  <793>;
            } #184 off=72
            #189 off=73
            (__fch_x.320 var=132) load (__M_DMw.4 __adr_x.51 x.86)  <349>;
            (__fch_y.321 var=133) load (__M_DMw.4 __adr_y.46 y.84)  <350>;
            (__link.596 var=196) w32_jal_t21s_s2 (f32_mul.455)  <801>;
            call {
                (a.597 var=193 stl=X off=11) assign (__fch_x.320)  <802>;
                (b.598 var=194 stl=X off=12) assign (__fch_y.321)  <803>;
                (__link.599 var=196 stl=X off=1) assign (__link.596)  <804>;
                (__tmp.600 var=134 stl=X off=10) Ff32_mul (__link.599 a.597 b.598)  <805>;
                (__tmp.601 var=134) deassign (__tmp.600)  <806>;
            } #190 off=74
            #195 off=75
            (__link.606 var=221) w32_jal_t21s_s2 (f32_sub.605)  <814>;
            call {
                (a.607 var=218 stl=X off=11) assign (__tmp.591)  <815>;
                (b.608 var=219 stl=X off=12) assign (__tmp.601)  <816>;
                (__link.609 var=221 stl=X off=1) assign (__link.606)  <817>;
                (__tmp.610 var=135 stl=X off=10) Ff32_sub (__link.609 a.607 b.608)  <818>;
                (__tmp.611 var=135) deassign (__tmp.610)  <819>;
            } #196 off=76
            #201 off=77
            (__link.616 var=221) w32_jal_t21s_s2 (f32_sub.605)  <827>;
            call {
                (a.617 var=218 stl=X off=11) assign (__tmp.581)  <828>;
                (b.618 var=219 stl=X off=12) assign (__tmp.611)  <829>;
                (__link.619 var=221 stl=X off=1) assign (__link.616)  <830>;
                (__tmp.620 var=136 stl=X off=10) Ff32_sub (__link.619 a.617 b.618)  <831>;
                (__tmp.621 var=136) deassign (__tmp.620)  <832>;
            } #202 off=78
            #207 off=79
            (__link.626 var=221) w32_jal_t21s_s2 (f32_sub.605)  <840>;
            call {
                (a.627 var=218 stl=X off=11) assign (__ct_1065353216.158)  <841>;
                (b.628 var=219 stl=X off=12) assign (__tmp.621)  <842>;
                (__link.629 var=221 stl=X off=1) assign (__link.626)  <843>;
                (__rt.630 var=29 stl=X off=10) Ff32_sub (__link.629 a.627 b.628)  <844>;
                (__rt.631 var=29) deassign (__rt.630)  <845>;
            } #208 off=80
        } #33
        {
            #59 off=45
            (__ct_24t0.69 var=56) const ()  <80>;
            (__adr_qx.71 var=58) __Pvoid__pl___Pvoid___sint (__rd___sp.68 __ct_24t0.69)  <82>;
            (__fch_ix.326 var=138) load (__M_DMw.4 __adr_ix.56 ix.96)  <356>;
            (__ct_1061683200.327 var=139) const ()  <357>;
            (__tmp.439 var=141) bool__lt___sint___sint (__ct_1061683200.327 __fch_ix.326)  <569>;
            (__trgt.725 var=246) const ()  <1065>;
            () void_br_bool_t13s_s2 (__tmp.439 __trgt.725)  <1066>;
            (__either.726 var=242) undefined ()  <1067>;
            if {
                {
                    () if_expr (__either.726)  <386>;
                } #39
                {
                    (__ct_1049624576.356 var=142) const ()  <387>;
                    (__M_DMw.358 var=5 qx.359 var=24) store (__ct_1049624576.356 __adr_qx.71 qx.23)  <389>;
                } #41 off=47
                {
                    (__fch_ix.360 var=144) load (__M_DMw.4 __adr_ix.56 ix.96)  <391>;
                    (__tmp.363 var=147) __sint__pl___sint___sint (__fch_ix.360 __ct_m16777216.434)  <394>;
                    (__M_DMw.365 var=5 qx.366 var=24) store (__tmp.363 __adr_qx.71 qx.23)  <396>;
                    (__ct_m16777216.434 var=177) const ()  <535>;
                    (__trgt.727 var=247) const ()  <1068>;
                    () void_j_t21s_s2 (__trgt.727)  <1069>;
                } #44 off=46
                {
                    (qx.367 var=24) merge (qx.359 qx.366)  <398>;
                } #46
            } #38
            #218 off=48
            (__fch_z.370 var=151) load (__M_DMw.4 __adr_z.61 z.249)  <401>;
            (__link.636 var=196) w32_jal_t21s_s2 (f32_mul.455)  <853>;
            call {
                (a.637 var=193 stl=X off=11) assign (__ct_1056964608.313)  <854>;
                (b.638 var=194 stl=X off=12) assign (__fch_z.370)  <855>;
                (__link.639 var=196 stl=X off=1) assign (__link.636)  <856>;
                (__tmp.640 var=152 stl=X off=10) Ff32_mul (__link.639 a.637 b.638)  <857>;
                (__tmp.641 var=152) deassign (__tmp.640)  <858>;
            } #219 off=49
            #224 off=50
            (__fch_qx.372 var=153) load (__M_DMw.4 __adr_qx.71 qx.367)  <403>;
            (__link.646 var=221) w32_jal_t21s_s2 (f32_sub.605)  <866>;
            call {
                (a.647 var=218 stl=X off=11) assign (__tmp.641)  <867>;
                (b.648 var=219 stl=X off=12) assign (__fch_qx.372)  <868>;
                (__link.649 var=221 stl=X off=1) assign (__link.646)  <869>;
                (__tmp.650 var=154 stl=X off=10) Ff32_sub (__link.649 a.647 b.648)  <870>;
                (__tmp.651 var=154) deassign (__tmp.650)  <871>;
            } #225 off=51
            #215 off=52
            (__ct_12t0.74 var=60) const ()  <85>;
            (__adr_hz.76 var=62) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_12t0.74)  <87>;
            (__M_DMw.374 var=5 hz.375 var=25) store (__tmp.651 __adr_hz.76 hz.24)  <405>;
            call {
                () chess_separator_scheduler ()  <406>;
            } #48 off=53
            #233 off=54
            (__fch_qx.378 var=157) load (__M_DMw.4 __adr_qx.71 qx.367)  <409>;
            (__link.656 var=221) w32_jal_t21s_s2 (f32_sub.605)  <879>;
            call {
                (a.657 var=218 stl=X off=11) assign (__ct_1065353216.158)  <880>;
                (b.658 var=219 stl=X off=12) assign (__fch_qx.378)  <881>;
                (__link.659 var=221 stl=X off=1) assign (__link.656)  <882>;
                (__tmp.660 var=158 stl=X off=10) Ff32_sub (__link.659 a.657 b.658)  <883>;
                (__tmp.661 var=158) deassign (__tmp.660)  <884>;
            } #234 off=55
            #230 off=56
            (__ct_8t0.79 var=64) const ()  <90>;
            (__adr_a.81 var=66) __Pvoid__pl___Pvoid___sint (__rd___sp.78 __ct_8t0.79)  <92>;
            (__M_DMw.380 var=5 a.381 var=26) store (__tmp.661 __adr_a.81 a.25)  <411>;
            call {
                () chess_separator_scheduler ()  <412>;
            } #50 off=57
            #250 off=58
            (__fch_a.382 var=159) load (__M_DMw.4 __adr_a.81 a.381)  <413>;
            (__fch_hz.383 var=160) load (__M_DMw.4 __adr_hz.76 hz.375)  <414>;
            (__fch_z.384 var=161) load (__M_DMw.4 __adr_z.61 z.249)  <415>;
            (__fch_r.385 var=162) load (__M_DMw.4 __adr_r.66 r.280)  <416>;
            (__link.666 var=196) w32_jal_t21s_s2 (f32_mul.455)  <892>;
            call {
                (a.667 var=193 stl=X off=11) assign (__fch_z.384)  <893>;
                (b.668 var=194 stl=X off=12) assign (__fch_r.385)  <894>;
                (__link.669 var=196 stl=X off=1) assign (__link.666)  <895>;
                (__tmp.670 var=163 stl=X off=10) Ff32_mul (__link.669 a.667 b.668)  <896>;
                (__tmp.671 var=163) deassign (__tmp.670)  <897>;
            } #251 off=59
            #256 off=60
            (__fch_x.387 var=164) load (__M_DMw.4 __adr_x.51 x.86)  <418>;
            (__fch_y.388 var=165) load (__M_DMw.4 __adr_y.46 y.84)  <419>;
            (__link.676 var=196) w32_jal_t21s_s2 (f32_mul.455)  <905>;
            call {
                (a.677 var=193 stl=X off=11) assign (__fch_x.387)  <906>;
                (b.678 var=194 stl=X off=12) assign (__fch_y.388)  <907>;
                (__link.679 var=196 stl=X off=1) assign (__link.676)  <908>;
                (__tmp.680 var=166 stl=X off=10) Ff32_mul (__link.679 a.677 b.678)  <909>;
                (__tmp.681 var=166) deassign (__tmp.680)  <910>;
            } #257 off=61
            #262 off=62
            (__link.686 var=221) w32_jal_t21s_s2 (f32_sub.605)  <918>;
            call {
                (a.687 var=218 stl=X off=11) assign (__tmp.671)  <919>;
                (b.688 var=219 stl=X off=12) assign (__tmp.681)  <920>;
                (__link.689 var=221 stl=X off=1) assign (__link.686)  <921>;
                (__tmp.690 var=167 stl=X off=10) Ff32_sub (__link.689 a.687 b.688)  <922>;
                (__tmp.691 var=167) deassign (__tmp.690)  <923>;
            } #263 off=63
            #268 off=64
            (__link.696 var=221) w32_jal_t21s_s2 (f32_sub.605)  <931>;
            call {
                (a.697 var=218 stl=X off=11) assign (__fch_hz.383)  <932>;
                (b.698 var=219 stl=X off=12) assign (__tmp.691)  <933>;
                (__link.699 var=221 stl=X off=1) assign (__link.696)  <934>;
                (__tmp.700 var=168 stl=X off=10) Ff32_sub (__link.699 a.697 b.698)  <935>;
                (__tmp.701 var=168) deassign (__tmp.700)  <936>;
            } #269 off=65
            #274 off=66
            (__link.706 var=221) w32_jal_t21s_s2 (f32_sub.605)  <944>;
            call {
                (a.707 var=218 stl=X off=11) assign (__fch_a.382)  <945>;
                (b.708 var=219 stl=X off=12) assign (__tmp.701)  <946>;
                (__link.709 var=221 stl=X off=1) assign (__link.706)  <947>;
                (__rt.710 var=29 stl=X off=10) Ff32_sub (__link.709 a.707 b.708)  <948>;
                (__rt.711 var=29) deassign (__rt.710)  <949>;
            } #275 off=67
            #281 off=68
            (__trgt.730 var=249) const ()  <1073>;
            () void_j_t21s_s2 (__trgt.730)  <1074>;
        } #36
        {
            (qx.393 var=24) merge (qx.23 qx.367)  <425>;
            (hz.394 var=25) merge (hz.24 hz.375)  <426>;
            (a.395 var=26) merge (a.25 a.381)  <427>;
            (__rt.396 var=29) merge (__rt.631 __rt.711)  <428>;
        } #53
    } #31
    #55 off=81 nxt=-2
    (__rd___sp.397 var=27) rd_res_reg (__R_SP.11 __sp.42)  <429>;
    (__tmp.400 var=172) __Pvoid__pl___Pvoid___sint (__rd___sp.397 __ct_32s0.161)  <432>;
    (__R_SP.401 var=12 __sp.402 var=18) wr_res_reg (__tmp.400 __sp.42)  <433>;
    () void___rts_jr_w32 (__la.28)  <434>;
    (__rt.403 var=29 stl=X off=10) assign (__rt.396)  <435>;
    () out (__rt.403)  <436>;
    () sink (__sp.402)  <442>;
    () sink (y.84)  <443>;
    () sink (x.86)  <444>;
    () sink (ix.96)  <445>;
    () sink (z.249)  <446>;
    () sink (r.280)  <447>;
    () sink (qx.393)  <448>;
    () sink (hz.394)  <449>;
    () sink (a.395)  <450>;
} #0
0 : 'src/math.c';
----------
0 : (0,640:0,0);
3 : (0,640:34,0);
4 : (0,640:34,0);
5 : (0,640:25,0);
6 : (0,640:25,0);
7 : (0,653:4,7);
8 : (0,653:4,7);
9 : (0,654:7,9);
10 : (0,654:7,9);
11 : (0,655:9,9);
12 : (0,655:4,9);
14 : (0,655:22,10);
16 : (0,656:8,10);
21 : (0,656:24,11);
22 : (0,656:8,14);
24 : (0,655:4,19);
27 : (0,658:7,23);
29 : (0,659:7,24);
30 : (0,660:10,24);
31 : (0,660:4,24);
33 : (0,670:8,25);
36 : (0,661:8,28);
38 : (0,663:8,28);
41 : (0,664:15,30);
44 : (0,666:4,33);
48 : (0,668:11,38);
50 : (0,669:11,39);
55 : (0,660:4,44);
59 : (0,663:14,28);
63 : (0,656:19,10);
66 : (0,656:12,10);
67 : (0,656:12,10);
73 : (0,658:4,22);
76 : (0,658:10,22);
77 : (0,658:10,22);
97 : (0,659:4,23);
100 : (0,659:40,23);
101 : (0,659:40,23);
106 : (0,659:38,23);
107 : (0,659:38,23);
112 : (0,659:34,23);
113 : (0,659:34,23);
118 : (0,659:32,23);
119 : (0,659:32,23);
124 : (0,659:28,23);
125 : (0,659:28,23);
130 : (0,659:26,23);
131 : (0,659:26,23);
136 : (0,659:22,23);
137 : (0,659:22,23);
142 : (0,659:20,23);
143 : (0,659:20,23);
148 : (0,659:16,23);
149 : (0,659:16,23);
154 : (0,659:14,23);
155 : (0,659:14,23);
160 : (0,659:10,23);
161 : (0,659:10,23);
177 : (0,661:32,25);
178 : (0,661:32,25);
183 : (0,661:39,25);
184 : (0,661:39,25);
189 : (0,661:45,25);
190 : (0,661:45,25);
195 : (0,661:42,25);
196 : (0,661:42,25);
201 : (0,661:35,25);
202 : (0,661:35,25);
207 : (0,661:19,25);
208 : (0,661:19,25);
215 : (0,668:8,37);
218 : (0,668:23,37);
219 : (0,668:23,37);
224 : (0,668:25,37);
225 : (0,668:25,37);
230 : (0,669:8,38);
233 : (0,669:16,38);
234 : (0,669:16,38);
250 : (0,670:27,39);
251 : (0,670:27,39);
256 : (0,670:31,39);
257 : (0,670:31,39);
262 : (0,670:29,39);
263 : (0,670:29,39);
268 : (0,670:23,39);
269 : (0,670:23,39);
274 : (0,670:17,39);
275 : (0,670:17,39);
----------
48 : (0,640:13,0);
49 : (0,640:13,0);
51 : (0,640:13,0);
52 : (0,640:13,0);
54 : (0,640:40,0);
55 : (0,640:40,0);
57 : (0,640:40,0);
59 : (0,640:31,0);
60 : (0,640:31,0);
62 : (0,640:31,0);
64 : (0,652:12,0);
65 : (0,652:12,0);
67 : (0,652:12,0);
69 : (0,651:15,0);
70 : (0,651:15,0);
72 : (0,651:15,0);
74 : (0,651:17,0);
75 : (0,651:17,0);
77 : (0,651:17,0);
79 : (0,651:19,0);
80 : (0,651:19,0);
82 : (0,651:19,0);
84 : (0,651:12,0);
85 : (0,651:12,0);
87 : (0,651:12,0);
89 : (0,651:10,0);
90 : (0,651:10,0);
92 : (0,651:10,0);
94 : (0,640:34,0);
95 : (0,640:34,0);
96 : (0,640:25,0);
97 : (0,640:25,0);
98 : (0,653:15,6);
100 : (0,653:1,6);
101 : (0,653:4,7);
102 : (0,654:4,8);
103 : (0,654:10,0);
105 : (0,654:7,8);
106 : (0,654:4,8);
107 : (0,654:7,9);
108 : (0,655:7,9);
109 : (0,655:10,0);
138 : (0,655:4,9);
139 : (0,656:17,10);
141 : (0,656:21,0);
143 : (0,656:19,10);
170 : (0,656:8,10);
171 : (0,656:31,0);
173 : (0,656:24,0);
174 : (0,656:24,0);
176 : (0,656:24,0);
177 : (0,656:24,11);
178 : (0,656:24,11);
179 : (0,656:31,0);
273 : (0,658:9,22);
274 : (0,658:11,22);
276 : (0,658:4,22);
277 : (0,658:7,23);
278 : (0,659:9,23);
279 : (0,659:12,0);
281 : (0,659:15,23);
282 : (0,659:18,0);
284 : (0,659:21,23);
285 : (0,659:24,0);
287 : (0,659:27,23);
288 : (0,659:30,0);
290 : (0,659:33,23);
291 : (0,659:36,0);
293 : (0,659:39,23);
294 : (0,659:41,0);
307 : (0,659:4,23);
308 : (0,659:7,24);
309 : (0,660:7,24);
310 : (0,660:12,0);
312 : (0,660:10,24);
339 : (0,660:4,24);
342 : (0,661:22,0);
344 : (0,661:33,25);
346 : (0,661:38,25);
347 : (0,661:40,25);
349 : (0,661:44,25);
350 : (0,661:46,25);
356 : (0,663:11,28);
357 : (0,663:16,0);
386 : (0,663:8,28);
387 : (0,664:17,0);
389 : (0,664:12,29);
391 : (0,666:15,32);
394 : (0,666:17,32);
396 : (0,666:1,32);
398 : (0,663:8,36);
401 : (0,668:24,37);
403 : (0,668:26,37);
405 : (0,668:8,37);
406 : (0,668:11,38);
409 : (0,669:17,38);
411 : (0,669:8,38);
412 : (0,669:11,39);
413 : (0,670:15,39);
414 : (0,670:20,39);
415 : (0,670:26,39);
416 : (0,670:28,39);
418 : (0,670:30,39);
419 : (0,670:32,39);
425 : (0,660:4,43);
426 : (0,660:4,43);
427 : (0,660:4,43);
428 : (0,660:4,43);
429 : (0,660:4,0);
432 : (0,660:4,0);
433 : (0,660:4,44);
434 : (0,660:4,44);
435 : (0,660:4,0);
535 : (0,666:17,0);
569 : (0,663:14,28);
604 : (0,656:12,0);
605 : (0,656:12,0);
606 : (0,656:12,10);
607 : (0,656:12,10);
608 : (0,656:12,10);
609 : (0,656:12,10);
610 : (0,656:12,10);
611 : (0,656:12,10);
618 : (0,658:10,0);
619 : (0,658:10,22);
620 : (0,658:10,22);
621 : (0,658:10,22);
622 : (0,658:10,22);
623 : (0,658:10,22);
624 : (0,658:10,22);
632 : (0,659:40,23);
633 : (0,659:40,23);
634 : (0,659:40,23);
635 : (0,659:40,23);
636 : (0,659:40,23);
637 : (0,659:40,23);
644 : (0,659:38,0);
645 : (0,659:38,23);
646 : (0,659:38,23);
647 : (0,659:38,23);
648 : (0,659:38,23);
649 : (0,659:38,23);
650 : (0,659:38,23);
658 : (0,659:34,23);
659 : (0,659:34,23);
660 : (0,659:34,23);
661 : (0,659:34,23);
662 : (0,659:34,23);
663 : (0,659:34,23);
671 : (0,659:32,23);
672 : (0,659:32,23);
673 : (0,659:32,23);
674 : (0,659:32,23);
675 : (0,659:32,23);
676 : (0,659:32,23);
684 : (0,659:28,23);
685 : (0,659:28,23);
686 : (0,659:28,23);
687 : (0,659:28,23);
688 : (0,659:28,23);
689 : (0,659:28,23);
697 : (0,659:26,23);
698 : (0,659:26,23);
699 : (0,659:26,23);
700 : (0,659:26,23);
701 : (0,659:26,23);
702 : (0,659:26,23);
710 : (0,659:22,23);
711 : (0,659:22,23);
712 : (0,659:22,23);
713 : (0,659:22,23);
714 : (0,659:22,23);
715 : (0,659:22,23);
723 : (0,659:20,23);
724 : (0,659:20,23);
725 : (0,659:20,23);
726 : (0,659:20,23);
727 : (0,659:20,23);
728 : (0,659:20,23);
736 : (0,659:16,23);
737 : (0,659:16,23);
738 : (0,659:16,23);
739 : (0,659:16,23);
740 : (0,659:16,23);
741 : (0,659:16,23);
749 : (0,659:14,23);
750 : (0,659:14,23);
751 : (0,659:14,23);
752 : (0,659:14,23);
753 : (0,659:14,23);
754 : (0,659:14,23);
762 : (0,659:10,23);
763 : (0,659:10,23);
764 : (0,659:10,23);
765 : (0,659:10,23);
766 : (0,659:10,23);
767 : (0,659:10,23);
775 : (0,661:32,25);
776 : (0,661:32,25);
777 : (0,661:32,25);
778 : (0,661:32,25);
779 : (0,661:32,25);
780 : (0,661:32,25);
788 : (0,661:39,25);
789 : (0,661:39,25);
790 : (0,661:39,25);
791 : (0,661:39,25);
792 : (0,661:39,25);
793 : (0,661:39,25);
801 : (0,661:45,25);
802 : (0,661:45,25);
803 : (0,661:45,25);
804 : (0,661:45,25);
805 : (0,661:45,25);
806 : (0,661:45,25);
813 : (0,661:42,0);
814 : (0,661:42,25);
815 : (0,661:42,25);
816 : (0,661:42,25);
817 : (0,661:42,25);
818 : (0,661:42,25);
819 : (0,661:42,25);
827 : (0,661:35,25);
828 : (0,661:35,25);
829 : (0,661:35,25);
830 : (0,661:35,25);
831 : (0,661:35,25);
832 : (0,661:35,25);
840 : (0,661:19,25);
841 : (0,661:19,25);
842 : (0,661:19,25);
843 : (0,661:19,25);
844 : (0,661:19,25);
845 : (0,661:19,25);
853 : (0,668:23,37);
854 : (0,668:23,37);
855 : (0,668:23,37);
856 : (0,668:23,37);
857 : (0,668:23,37);
858 : (0,668:23,37);
866 : (0,668:25,37);
867 : (0,668:25,37);
868 : (0,668:25,37);
869 : (0,668:25,37);
870 : (0,668:25,37);
871 : (0,668:25,37);
879 : (0,669:16,38);
880 : (0,669:16,38);
881 : (0,669:16,38);
882 : (0,669:16,38);
883 : (0,669:16,38);
884 : (0,669:16,38);
892 : (0,670:27,39);
893 : (0,670:27,39);
894 : (0,670:27,39);
895 : (0,670:27,39);
896 : (0,670:27,39);
897 : (0,670:27,39);
905 : (0,670:31,39);
906 : (0,670:31,39);
907 : (0,670:31,39);
908 : (0,670:31,39);
909 : (0,670:31,39);
910 : (0,670:31,39);
918 : (0,670:29,39);
919 : (0,670:29,39);
920 : (0,670:29,39);
921 : (0,670:29,39);
922 : (0,670:29,39);
923 : (0,670:29,39);
931 : (0,670:23,39);
932 : (0,670:23,39);
933 : (0,670:23,39);
934 : (0,670:23,39);
935 : (0,670:23,39);
936 : (0,670:23,39);
944 : (0,670:17,39);
945 : (0,670:17,39);
946 : (0,670:17,39);
947 : (0,670:17,39);
948 : (0,670:17,39);
949 : (0,670:17,39);
1021 : (0,655:9,9);
1057 : (0,656:8,10);
1061 : (0,655:4,9);
1066 : (0,663:8,28);
1071 : (0,660:4,24);

