
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 12:20:22 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/clib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline int isprint(int)
Fisprint : user_defined, called {
    fnm : "isprint" 'int isprint(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( l=4 );
}
****
***/

[
    0 : isprint typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : c typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   20 : _ct_code typ=w08 bnd=e algn=1 stl=DMb
   22 : __rd___sp typ=w32 bnd=m
   24 : __ptr__ct_code typ=w32 val=0a bnd=m adro=20
   25 : __la typ=w32 bnd=p tref=w32__
   26 : __rt typ=w32 bnd=p tref=__sint__
   27 : __arg_c typ=w32 bnd=p tref=__sint__
   28 : __ct_m4S0 typ=w32 val=-4S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   32 : __ct_0t0 typ=w32 val=0t0 bnd=m
   34 : __adr_c typ=w32 bnd=m adro=19
   36 : __tmpb2_Fisprint typ=__uchar bnd=m tref=__uchar__
   38 : __tmpb0_Fisprint typ=bool bnd=m tref=bool__
   39 : __fch_c typ=w32 bnd=m
   44 : __tmp typ=w32 bnd=m
   45 : __fch__ct_code typ=__uchar bnd=m
   47 : __ct_151 typ=w32 val=151f bnd=m
   49 : __tmp typ=w32 bnd=m
   51 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   54 : __fch_c typ=w32 bnd=m
   55 : __ct_9 typ=w32 val=9f bnd=m
   57 : __tmp typ=bool bnd=m
   60 : __tmp typ=bool bnd=m
   62 : __ct_4s0 typ=w32 val=4s0 bnd=m
   64 : __tmp typ=w32 bnd=m
   72 : __ct_1 typ=w32 val=1f bnd=m
   83 : __false typ=bool val=0f bnd=m
   84 : __either typ=bool bnd=m
   85 : __trgt typ=t13s_s2 val=0j bnd=m
   86 : __trgt typ=t13s_s2 val=0j bnd=m
   87 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fisprint {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (c.18 var=19) source ()  <29>;
    (_ct_code.19 var=20) source ()  <30>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (__arg_c.28 var=27 stl=X off=11) inp ()  <39>;
    (__arg_c.29 var=27) deassign (__arg_c.28)  <40>;
    (__rd___sp.31 var=22) rd_res_reg (__R_SP.11 __sp.17)  <42>;
    (__ct_m4S0.32 var=28) const ()  <43>;
    (__tmp.34 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.31 __ct_m4S0.32)  <45>;
    (__R_SP.35 var=12 __sp.36 var=18) wr_res_reg (__tmp.34 __sp.17)  <46>;
    (__rd___sp.37 var=22) rd_res_reg (__R_SP.11 __sp.36)  <48>;
    (__ct_0t0.38 var=32) const ()  <49>;
    (__adr_c.40 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_0t0.38)  <51>;
    (__M_DMw.46 var=5 c.47 var=19) store (__arg_c.29 __adr_c.40 c.18)  <57>;
    call {
        () chess_separator_scheduler ()  <60>;
    } #6 off=1
    #7 off=2
    (__fch_c.50 var=39) load (__M_DMw.4 __adr_c.40 c.47)  <62>;
    (__tmpb2_Fisprint.51 var=36) __uchar___uchar___sint (__fch_c.50)  <63>;
    call {
        () chess_separator_scheduler ()  <66>;
    } #10 off=3
    #15 off=4
    (__ptr__ct_code.22 var=24) const ()  <33>;
    (__tmp.74 var=44) __Pvoid__pl___Pvoid___sint (__ptr__ct_code.22 __tmpb2_Fisprint.51)  <89>;
    (__fch__ct_code.75 var=45) load (__M_DMb.2 __tmp.74 _ct_code.19)  <90>;
    (__ct_151.77 var=47) const ()  <92>;
    (__tmp.79 var=49) __uint__ad___uint___uint (__fch__ct_code.75 __ct_151.77)  <94>;
    call {
        () chess_separator_scheduler ()  <98>;
    } #19 off=5
    #43 off=6
    (__ct_0.83 var=51) const ()  <100>;
    (__ct_1.144 var=72) const ()  <201>;
    (__tmpb0_Fisprint.152 var=38) bool__eq___sint___sint (__tmp.79 __ct_0.83)  <232>;
    (__trgt.155 var=85) const ()  <245>;
    () void_br_bool_t13s_s2 (__tmpb0_Fisprint.152 __trgt.155)  <246>;
    (__either.156 var=84) undefined ()  <247>;
    if {
        {
            () if_expr (__either.156)  <122>;
        } #24
        {
            (__false.157 var=83) const ()  <248>;
        } #26
        {
            (__fch_c.104 var=54) load (__M_DMw.4 __adr_c.40 c.47)  <123>;
            (__ct_9.105 var=55) const ()  <124>;
            (__tmp.107 var=57) bool__ne___sint___sint (__fch_c.104 __ct_9.105)  <126>;
            (__trgt.158 var=86) const ()  <249>;
            () void_br_bool_t13s_s2 (__tmp.107 __trgt.158)  <250>;
            (__either.159 var=84) undefined ()  <251>;
        } #25 off=7
        {
            (__tmp.110 var=60) merge (__false.157 __either.159)  <129>;
        } #27
    } #23
    if {
        {
            () if_expr (__tmp.110)  <203>;
        } #35
        {
        } #36 off=9
        {
            (__trgt.160 var=87) const ()  <252>;
            () void_j_t21s_s2 (__trgt.160)  <253>;
        } #37 off=8
        {
            (__rt.146 var=26) merge (__ct_1.144 __ct_0.83)  <204>;
        } #38
    } #34
    #30 off=10 nxt=-2
    (__rd___sp.112 var=22) rd_res_reg (__R_SP.11 __sp.36)  <131>;
    (__ct_4s0.113 var=62) const ()  <132>;
    (__tmp.115 var=64) __Pvoid__pl___Pvoid___sint (__rd___sp.112 __ct_4s0.113)  <134>;
    (__R_SP.116 var=12 __sp.117 var=18) wr_res_reg (__tmp.115 __sp.36)  <135>;
    () void___rts_jr_w32 (__la.25)  <136>;
    (__rt.118 var=26 stl=X off=10) assign (__rt.146)  <137>;
    () out (__rt.118)  <138>;
    () sink (__sp.117)  <144>;
    () sink (c.47)  <145>;
} #0
0 : 'include/ctype.h';
----------
0 : (0,60:19,0);
3 : (0,60:19,0);
6 : (0,60:35,3);
7 : (0,60:45,4);
10 : (0,60:35,6);
15 : (0,60:35,10);
19 : (0,60:35,18);
23 : (0,60:77,21);
25 : (0,60:82,22);
26 : (0,60:77,23);
30 : (0,60:28,25);
34 : (0,60:77,25);
35 : (0,60:77,25);
36 : (0,60:77,25);
37 : (0,60:77,25);
38 : (0,60:77,25);
----------
42 : (0,60:19,0);
43 : (0,60:19,0);
45 : (0,60:19,0);
46 : (0,60:19,0);
48 : (0,60:23,0);
49 : (0,60:23,0);
51 : (0,60:23,0);
57 : (0,60:19,0);
60 : (0,60:35,3);
62 : (0,60:44,4);
63 : (0,60:45,4);
66 : (0,60:35,6);
89 : (0,60:35,9);
90 : (0,60:35,9);
92 : (0,60:35,0);
94 : (0,60:35,9);
98 : (0,60:35,18);
100 : (0,60:77,0);
122 : (0,60:77,21);
123 : (0,60:80,22);
124 : (0,60:82,0);
126 : (0,60:82,22);
129 : (0,60:77,24);
131 : (0,60:28,0);
132 : (0,60:28,0);
134 : (0,60:28,0);
135 : (0,60:28,25);
136 : (0,60:28,25);
137 : (0,60:77,0);
201 : (0,60:77,0);
203 : (0,60:77,25);
204 : (0,60:77,25);
232 : (0,60:77,20);
246 : (0,60:77,21);
250 : (0,60:77,25);

