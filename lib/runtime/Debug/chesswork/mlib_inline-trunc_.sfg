
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:13:53 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/mlib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline double trunc(double)
Ftrunc : user_defined, called {
    fnm : "trunc" 'double trunc(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=8 );
}
****
!! extern double ceil(double)
Fceil : user_defined, called {
    fnm : "ceil" 'double ceil(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
}
!! extern double floor(double)
Ffloor : user_defined, called {
    fnm : "floor" 'double floor(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
}
!!  bool f64_lt(float64_t, float64_t)
Ff64_lt : user_defined, called {
    fnm : "f64_lt" 'bool f64_lt(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
***/

[
    0 : trunc typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : x typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   20 : x_low typ=w08 bnd=B stl=DMb
   21 : x_high typ=w08 bnd=B stl=DMb
   22 : __rd___sp typ=w32 bnd=m
   23 : __la typ=w32 bnd=p tref=w32__
   25 : __rt_low typ=w32 bnd=m tref=__uint__
   26 : __rt_high typ=w32 bnd=m tref=__uint__
   28 : __arg_x_low typ=w32 bnd=m tref=__uint__
   29 : __arg_x_high typ=w32 bnd=m tref=__uint__
   30 : __ct_m8S0 typ=w32 val=-8S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   34 : __ct_0t0 typ=w32 val=0t0 bnd=m
   36 : __adr_x typ=w32 bnd=m adro=19
   40 : __fch_x_low typ=w32 bnd=m
   43 : __fch_x_high typ=w32 bnd=m
   46 : __tmp typ=bool bnd=m
   48 : __fch_x_low typ=w32 bnd=m
   51 : __fch_x_high typ=w32 bnd=m
   52 : __record_low typ=w32 bnd=m tref=__uint__
   53 : __record_high typ=w32 bnd=m tref=__uint__
   56 : ceil typ=t21s_s2 val=0r bnd=m
   57 : __link typ=w32 bnd=m
   59 : __tmp typ=w32 bnd=m
   60 : __tmp typ=w32 bnd=m
   62 : __fch_x_low typ=w32 bnd=m
   65 : __fch_x_high typ=w32 bnd=m
   66 : __record_low typ=w32 bnd=m tref=__uint__
   67 : __record_high typ=w32 bnd=m tref=__uint__
   70 : floor typ=t21s_s2 val=0r bnd=m
   71 : __link typ=w32 bnd=m
   73 : __tmp typ=w32 bnd=m
   74 : __tmp typ=w32 bnd=m
   76 : __ct_8s0 typ=w32 val=8s0 bnd=m
   78 : __tmp typ=w32 bnd=m
   89 : __ct_4t0 typ=w32 val=4t0 bnd=m
   90 : __adr_x typ=w32 bnd=m adro=19
   91 : __adr_x typ=w32 bnd=m adro=19
   92 : __adr_x typ=w32 bnd=m adro=19
   93 : __adr_x typ=w32 bnd=m adro=19
   99 : a_low typ=w32 bnd=m tref=__uint__
  100 : a_high typ=w32 bnd=m tref=__uint__
  101 : b_low typ=w32 bnd=m tref=__uint__
  102 : b_high typ=w32 bnd=m tref=__uint__
  103 : f64_lt typ=t21s_s2 val=0r bnd=m
  104 : __link typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  106 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  119 : __either typ=bool bnd=m
  120 : __trgt typ=t13s_s2 val=0j bnd=m
  121 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ftrunc {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (x_low.19 var=20) source ()  <30>;
    (x_high.20 var=21) source ()  <31>;
    (__la.22 var=23 stl=X off=1) inp ()  <33>;
    (__la.23 var=23) deassign (__la.22)  <34>;
    (__arg_x_low.31 var=28 stl=X off=12) inp ()  <42>;
    (__arg_x_low.32 var=28) deassign (__arg_x_low.31)  <43>;
    (__arg_x_high.35 var=29 stl=X off=13) inp ()  <46>;
    (__arg_x_high.36 var=29) deassign (__arg_x_high.35)  <47>;
    (__rd___sp.39 var=22) rd_res_reg (__R_SP.11 __sp.17)  <50>;
    (__ct_m8S0.40 var=30) const ()  <51>;
    (__tmp.42 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_m8S0.40)  <53>;
    (__R_SP.43 var=12 __sp.44 var=18) wr_res_reg (__tmp.42 __sp.17)  <54>;
    (__rd___sp.45 var=22) rd_res_reg (__R_SP.11 __sp.44)  <56>;
    (__ct_0t0.46 var=34) const ()  <57>;
    (__adr_x.48 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_0t0.46)  <59>;
    (__M_DMw.51 var=5 x_low.52 var=20) store (__arg_x_low.32 __adr_x.48 x_low.19)  <62>;
    (__M_DMw.57 var=5 x_high.58 var=21) store (__arg_x_high.36 __adr_x.178 x_high.20)  <67>;
    (__ct_4t0.175 var=89) const ()  <213>;
    (__adr_x.178 var=92) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_4t0.175)  <217>;
    call {
        () chess_separator_scheduler ()  <68>;
    } #4 off=1
    #28 off=2
    (__fch_x_low.60 var=40) load (__M_DMw.4 __adr_x.48 x_low.52)  <70>;
    (__fch_x_high.65 var=43) load (__M_DMw.4 __adr_x.179 x_high.58)  <75>;
    (__adr_x.179 var=93) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_4t0.175)  <218>;
    (f64_lt.188 var=103) const ()  <237>;
    (__link.189 var=104) w32_jal_t21s_s2 (f64_lt.188)  <238>;
    (__ct_0.190 var=106) const ()  <239>;
    call {
        (a_low.191 var=99 stl=X off=11) assign (__fch_x_low.60)  <240>;
        (a_high.192 var=100 stl=X off=12) assign (__fch_x_high.65)  <241>;
        (b_low.193 var=101 stl=X off=13) assign (__ct_0.190)  <242>;
        (b_high.194 var=102 stl=X off=14) assign (__ct_0.190)  <243>;
        (__link.195 var=104 stl=X off=1) assign (__link.189)  <244>;
        (__tmp.196 var=105 stl=X off=10) Ff64_lt (__link.195 a_low.191 a_high.192 b_low.193 b_high.194)  <245>;
        (__tmp.197 var=105) deassign (__tmp.196)  <246>;
    } #29 off=3
    #30 off=4
    (__tmp.198 var=46) bool__ne___sint___sint (__tmp.197 __ct_0.190)  <247>;
    (__trgt.209 var=120) const ()  <304>;
    () void_br_bool_t13s_s2 (__tmp.198 __trgt.209)  <305>;
    (__either.210 var=119) undefined ()  <306>;
    if {
        {
            () if_expr (__either.210)  <93>;
        } #7
        {
            #9 off=8
            (__fch_x_low.84 var=48) load (__M_DMw.4 __adr_x.48 x_low.52)  <95>;
            (__fch_x_high.89 var=51) load (__M_DMw.4 __adr_x.176 x_high.58)  <100>;
            (ceil.97 var=56) const ()  <108>;
            (__link.98 var=57) w32_jal_t21s_s2 (ceil.97)  <109>;
            (__adr_x.176 var=90) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_4t0.175)  <215>;
            call {
                (__record_low.92 var=52 stl=X off=12) assign (__fch_x_low.84)  <103>;
                (__record_high.94 var=53 stl=X off=13) assign (__fch_x_high.89)  <105>;
                (__link.99 var=57 stl=X off=1) assign (__link.98)  <110>;
                (__tmp.101 var=59 stl=X off=10 __tmp.105 var=60 stl=X off=11) Fceil (__link.99 __record_low.92 __record_high.94)  <111>;
                (__tmp.102 var=59) deassign (__tmp.101)  <113>;
                (__tmp.106 var=60) deassign (__tmp.105)  <116>;
            } #10 off=9
        } #8
        {
            #12 off=5
            (__fch_x_low.110 var=62) load (__M_DMw.4 __adr_x.48 x_low.52)  <120>;
            (__fch_x_high.115 var=65) load (__M_DMw.4 __adr_x.177 x_high.58)  <125>;
            (floor.123 var=70) const ()  <133>;
            (__link.124 var=71) w32_jal_t21s_s2 (floor.123)  <134>;
            (__adr_x.177 var=91) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_4t0.175)  <216>;
            call {
                (__record_low.118 var=66 stl=X off=12) assign (__fch_x_low.110)  <128>;
                (__record_high.120 var=67 stl=X off=13) assign (__fch_x_high.115)  <130>;
                (__link.125 var=71 stl=X off=1) assign (__link.124)  <135>;
                (__tmp.127 var=73 stl=X off=10 __tmp.131 var=74 stl=X off=11) Ffloor (__link.125 __record_low.118 __record_high.120)  <136>;
                (__tmp.128 var=73) deassign (__tmp.127)  <138>;
                (__tmp.132 var=74) deassign (__tmp.131)  <141>;
            } #13 off=6
            #33 off=7
            (__trgt.211 var=121) const ()  <307>;
            () void_j_t21s_s2 (__trgt.211)  <308>;
        } #11
        {
            (__rt_low.167 var=25) merge (__tmp.102 __tmp.128)  <205>;
            (__rt_high.170 var=26) merge (__tmp.106 __tmp.132)  <208>;
        } #14
    } #6
    #16 off=10 nxt=-2
    (__rd___sp.136 var=22) rd_res_reg (__R_SP.11 __sp.44)  <145>;
    (__ct_8s0.137 var=76) const ()  <146>;
    (__tmp.139 var=78) __Pvoid__pl___Pvoid___sint (__rd___sp.136 __ct_8s0.137)  <148>;
    (__R_SP.140 var=12 __sp.141 var=18) wr_res_reg (__tmp.139 __sp.44)  <149>;
    () void___rts_jr_w32 (__la.23)  <150>;
    (__rt_low.143 var=25 stl=X off=10) assign (__rt_low.167)  <152>;
    () out (__rt_low.143)  <153>;
    (__rt_high.145 var=26 stl=X off=11) assign (__rt_high.170)  <155>;
    () out (__rt_high.145)  <156>;
    () sink (__sp.141)  <164>;
    () sink (x_low.52)  <166>;
    () sink (x_high.58)  <167>;
} #0
0 : 'include/math.h';
----------
0 : (0,85:21,0);
3 : (0,85:21,0);
4 : (0,85:21,0);
6 : (0,85:48,2);
8 : (0,85:50,3);
9 : (0,85:56,3);
10 : (0,85:50,3);
11 : (0,85:61,4);
12 : (0,85:68,4);
13 : (0,85:61,4);
16 : (0,85:33,6);
28 : (0,85:42,2);
29 : (0,85:42,2);
30 : (0,85:42,2);
----------
50 : (0,85:21,0);
51 : (0,85:21,0);
53 : (0,85:21,0);
54 : (0,85:21,0);
56 : (0,85:28,0);
57 : (0,85:28,0);
59 : (0,85:28,0);
62 : (0,85:21,0);
67 : (0,85:21,0);
68 : (0,85:21,0);
70 : (0,85:40,2);
75 : (0,85:40,2);
93 : (0,85:48,2);
95 : (0,85:56,3);
100 : (0,85:56,3);
103 : (0,85:56,0);
105 : (0,85:56,0);
109 : (0,85:50,3);
110 : (0,85:50,0);
111 : (0,85:50,3);
120 : (0,85:68,4);
125 : (0,85:68,4);
128 : (0,85:68,0);
130 : (0,85:68,0);
134 : (0,85:61,4);
135 : (0,85:61,0);
136 : (0,85:61,4);
145 : (0,85:33,0);
146 : (0,85:33,0);
148 : (0,85:33,0);
149 : (0,85:33,6);
150 : (0,85:33,6);
152 : (0,85:48,0);
155 : (0,85:48,0);
213 : (0,85:28,0);
237 : (0,85:42,0);
238 : (0,85:42,2);
239 : (0,85:42,0);
240 : (0,85:42,2);
241 : (0,85:42,2);
242 : (0,85:42,2);
243 : (0,85:42,2);
244 : (0,85:42,2);
245 : (0,85:42,2);
246 : (0,85:42,2);
247 : (0,85:42,2);
305 : (0,85:48,2);

