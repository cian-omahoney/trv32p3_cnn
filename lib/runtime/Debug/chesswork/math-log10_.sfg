
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Apr 10 20:00:44 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern double log10(double)
Flog10 : user_defined, called {
    fnm : "log10" 'double log10(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=40 );
}
****
!! extern double log(double)
Flog : user_defined, called {
    fnm : "log" 'double log(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
!!  float64_t f32_to_f64(float32_t)
Ff32_to_f64 : user_defined, called {
    fnm : "f32_to_f64" 'float64_t f32_to_f64(float32_t)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float64_t f64_sub(float64_t, float64_t)
Ff64_sub : user_defined, called {
    fnm : "f64_sub" 'float64_t f64_sub(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_div(float64_t, float64_t)
Ff64_div : user_defined, called {
    fnm : "f64_div" 'float64_t f64_div(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_mul(float64_t, float64_t)
Ff64_mul : user_defined, called {
    fnm : "f64_mul" 'float64_t f64_mul(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t i32_to_f64(int)
Fi32_to_f64 : user_defined, called {
    fnm : "i32_to_f64" 'float64_t i32_to_f64(int)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : log10 typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : x typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   20 : hx typ=w08 val=32t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   21 : lx typ=w08 val=36t0 bnd=a sz=4 algn=4 stl=DMb tref=u_int32_t_DMb
   22 : k typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   23 : i typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   24 : y typ=w08 val=8t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   25 : z typ=w08 val=16t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   26 : x_low typ=w08 bnd=B stl=DMb
   27 : x_high typ=w08 bnd=B stl=DMb
   28 : y_low typ=w08 bnd=B stl=DMb
   29 : y_high typ=w08 bnd=B stl=DMb
   30 : z_low typ=w08 bnd=B stl=DMb
   31 : z_high typ=w08 bnd=B stl=DMb
   32 : __rd___sp typ=w32 bnd=m
   33 : __la typ=w32 bnd=p tref=w32__
   35 : __rt_low typ=w32 bnd=m tref=__uint__
   36 : __rt_high typ=w32 bnd=m tref=__uint__
   38 : __arg_x_low typ=w32 bnd=m tref=__uint__
   39 : __arg_x_high typ=w32 bnd=m tref=__uint__
   40 : __ct_m40S0 typ=w32 val=-40S0 bnd=m
   42 : __tmp typ=w32 bnd=m
   44 : __ct_0t0 typ=w32 val=0t0 bnd=m
   46 : __adr_x typ=w32 bnd=m adro=19
   48 : __ct_32t0 typ=w32 val=32t0 bnd=m
   50 : __adr_hx typ=w32 bnd=m adro=20
   52 : __ct_36t0 typ=w32 val=36t0 bnd=m
   54 : __adr_lx typ=w32 bnd=m adro=21
   56 : __ct_28t0 typ=w32 val=28t0 bnd=m
   58 : __adr_k typ=w32 bnd=m adro=22
   60 : __ct_24t0 typ=w32 val=24t0 bnd=m
   62 : __adr_i typ=w32 bnd=m adro=23
   64 : __ct_8t0 typ=w32 val=8t0 bnd=m
   66 : __adr_y typ=w32 bnd=m adro=24
   68 : __ct_16t0 typ=w32 val=16t0 bnd=m
   70 : __adr_z typ=w32 bnd=m adro=25
   84 : __fch_x_high typ=w32 bnd=m
   91 : __fch_x_low typ=w32 bnd=m
   98 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  100 : __fch_hx typ=w32 bnd=m
  101 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  103 : __tmp typ=bool bnd=m
  104 : __fch_hx typ=w32 bnd=m
  105 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  107 : __tmp typ=w32 bnd=m
  109 : __fch_lx typ=w32 bnd=m
  110 : __tmp typ=w32 bnd=m
  113 : __tmp typ=bool bnd=m
  114 : __ct_4286578688 typ=t20s_rp12 val=-2048f bnd=m
  117 : __ct_40s0 typ=w32 val=40s0 bnd=m
  119 : __tmp typ=w32 bnd=m
  120 : __fch_hx typ=w32 bnd=m
  123 : __tmp typ=bool bnd=m
  125 : __fch_x_low typ=w32 bnd=m
  128 : __fch_x_high typ=w32 bnd=m
  130 : __fch_x_low typ=w32 bnd=m
  133 : __fch_x_high typ=w32 bnd=m
  140 : __tmp typ=w32 bnd=m
  146 : __fch_x_low typ=w32 bnd=m
  149 : __fch_x_high typ=w32 bnd=m
  161 : __fch_x_high typ=w32 bnd=m
  167 : __fch_hx typ=w32 bnd=m
  168 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
  170 : __tmp typ=bool bnd=m
  172 : __fch_x_low typ=w32 bnd=m
  175 : __fch_x_high typ=w32 bnd=m
  177 : __fch_x_low typ=w32 bnd=m
  180 : __fch_x_high typ=w32 bnd=m
  182 : __fch_k typ=w32 bnd=m
  183 : __fch_hx typ=w32 bnd=m
  184 : __ct_20 typ=w32 val=20f bnd=m
  186 : __tmp typ=w32 bnd=m
  187 : __ct_1023 typ=w32 val=1023f bnd=m
  189 : __tmp typ=w32 bnd=m
  190 : __tmp typ=w32 bnd=m
  191 : __fch_k typ=w32 bnd=m
  193 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  195 : __tmp typ=w32 bnd=m
  196 : __ct_31 typ=w32 val=31f bnd=m
  198 : __tmp typ=w32 bnd=m
  200 : __fch_hx typ=w32 bnd=m
  201 : __ct_1048575 typ=w32 val=1048575f bnd=m
  203 : __tmp typ=w32 bnd=m
  206 : __fch_i typ=w32 bnd=m
  207 : __tmp typ=w32 bnd=m
  210 : __tmp typ=w32 bnd=m
  211 : __tmp typ=w32 bnd=m
  212 : __fch_k typ=w32 bnd=m
  213 : __fch_i typ=w32 bnd=m
  214 : __tmp typ=w32 bnd=m
  220 : __fch_hx typ=w32 bnd=m
  223 : __fch_x_low typ=w32 bnd=m
  241 : __fch_y_low typ=w32 bnd=m
  244 : __fch_y_high typ=w32 bnd=m
  251 : __fch_x_low typ=w32 bnd=m
  254 : __fch_x_high typ=w32 bnd=m
  255 : __record_low typ=w32 bnd=m tref=__uint__
  256 : __record_high typ=w32 bnd=m tref=__uint__
  259 : log typ=t21s_s2 val=0r bnd=m
  260 : __link typ=w32 bnd=m
  262 : __tmp typ=w32 bnd=m
  263 : __tmp typ=w32 bnd=m
  271 : __fch_z_low typ=w32 bnd=m
  274 : __fch_z_high typ=w32 bnd=m
  276 : __fch_y_low typ=w32 bnd=m
  279 : __fch_y_high typ=w32 bnd=m
  286 : __tmp typ=w32 bnd=m
  298 : __ct_m54 typ=w32 val=-54f bnd=m
  299 : __ct_m1023 typ=w32 val=-1023f bnd=m
  307 : __ct_4t0 typ=w32 val=4t0 bnd=m
  308 : __adr_x typ=w32 bnd=m adro=19
  309 : __adr_x typ=w32 bnd=m adro=19
  310 : __adr_x typ=w32 bnd=m adro=19
  311 : __adr_x typ=w32 bnd=m adro=19
  312 : __adr_x typ=w32 bnd=m adro=19
  313 : __adr_x typ=w32 bnd=m adro=19
  314 : __adr_x typ=w32 bnd=m adro=19
  316 : __adr_x typ=w32 bnd=m adro=19
  317 : __adr_x typ=w32 bnd=m adro=19
  318 : __ct_12t0 typ=w32 val=12t0 bnd=m
  319 : __adr_y typ=w32 bnd=m adro=24
  320 : __adr_y typ=w32 bnd=m adro=24
  321 : __adr_y typ=w32 bnd=m adro=24
  322 : __ct_20t0 typ=w32 val=20t0 bnd=m
  323 : __adr_z typ=w32 bnd=m adro=25
  324 : __adr_z typ=w32 bnd=m adro=25
  325 : __adr_x typ=w32 bnd=m adro=19
  326 : __adr_x typ=w32 bnd=m adro=19
  410 : a typ=w32 bnd=m tref=float32_t__
  411 : f32_to_f64 typ=t21s_s2 val=0r bnd=m
  412 : __link typ=w32 bnd=m
  414 : __tmp typ=w32 bnd=m
  415 : __tmp typ=w32 bnd=m
  420 : a_low typ=w32 bnd=m tref=__uint__
  421 : a_high typ=w32 bnd=m tref=__uint__
  422 : b_low typ=w32 bnd=m tref=__uint__
  423 : b_high typ=w32 bnd=m tref=__uint__
  424 : f64_sub typ=t21s_s2 val=0r bnd=m
  425 : __link typ=w32 bnd=m
  427 : __tmp typ=w32 bnd=m
  428 : __tmp typ=w32 bnd=m
  433 : a_low typ=w32 bnd=m tref=__uint__
  434 : a_high typ=w32 bnd=m tref=__uint__
  435 : b_low typ=w32 bnd=m tref=__uint__
  436 : b_high typ=w32 bnd=m tref=__uint__
  437 : f64_div typ=t21s_s2 val=0r bnd=m
  438 : __link typ=w32 bnd=m
  440 : __tmp typ=w32 bnd=m
  441 : __tmp typ=w32 bnd=m
  446 : a_low typ=w32 bnd=m tref=__uint__
  447 : a_high typ=w32 bnd=m tref=__uint__
  448 : b_low typ=w32 bnd=m tref=__uint__
  449 : b_high typ=w32 bnd=m tref=__uint__
  450 : f64_mul typ=t21s_s2 val=0r bnd=m
  451 : __link typ=w32 bnd=m
  453 : __tmp typ=w32 bnd=m
  454 : __tmp typ=w32 bnd=m
  462 : a_low typ=w32 bnd=m tref=__uint__
  463 : a_high typ=w32 bnd=m tref=__uint__
  464 : b_low typ=w32 bnd=m tref=__uint__
  465 : b_high typ=w32 bnd=m tref=__uint__
  466 : f64_add typ=t21s_s2 val=0r bnd=m
  467 : __link typ=w32 bnd=m
  469 : __tmp typ=w32 bnd=m
  470 : __tmp typ=w32 bnd=m
  473 : a typ=w32 bnd=m tref=__sint__
  474 : i32_to_f64 typ=t21s_s2 val=0r bnd=m
  475 : __link typ=w32 bnd=m
  477 : __tmp typ=w32 bnd=m
  478 : __tmp typ=w32 bnd=m
  500 : __ct_1129316352 typ=t20s_rp12 val=275712f bnd=m
  501 : __ct_301017910 typ=w32 val=301017910f bnd=m
  502 : __ct_1029308147 typ=w32 val=1029308147f bnd=m
  503 : __ct_354870542 typ=w32 val=354870542f bnd=m
  504 : __ct_1071369083 typ=w32 val=1071369083f bnd=m
  505 : __ct_1352622080 typ=t20s_rp12 val=330230f bnd=m
  506 : __ct_1070810131 typ=w32 val=1070810131f bnd=m
  515 : __either typ=bool bnd=m
  516 : __trgt typ=t13s_s2 val=0j bnd=m
  517 : __trgt typ=t13s_s2 val=0j bnd=m
  518 : __trgt typ=t13s_s2 val=0j bnd=m
  519 : __trgt typ=t21s_s2 val=0j bnd=m
  520 : __trgt typ=t13s_s2 val=0j bnd=m
  521 : __trgt typ=t21s_s2 val=0j bnd=m
]
Flog10 {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (hx.19 var=20) source ()  <30>;
    (lx.20 var=21) source ()  <31>;
    (k.21 var=22) source ()  <32>;
    (i.22 var=23) source ()  <33>;
    (x_low.25 var=26) source ()  <36>;
    (x_high.26 var=27) source ()  <37>;
    (y_low.27 var=28) source ()  <38>;
    (y_high.28 var=29) source ()  <39>;
    (z_low.29 var=30) source ()  <40>;
    (z_high.30 var=31) source ()  <41>;
    (__la.32 var=33 stl=X off=1) inp ()  <43>;
    (__la.33 var=33) deassign (__la.32)  <44>;
    (__arg_x_low.41 var=38 stl=X off=12) inp ()  <52>;
    (__arg_x_low.42 var=38) deassign (__arg_x_low.41)  <53>;
    (__arg_x_high.45 var=39 stl=X off=13) inp ()  <56>;
    (__arg_x_high.46 var=39) deassign (__arg_x_high.45)  <57>;
    (__rd___sp.49 var=32) rd_res_reg (__R_SP.11 __sp.17)  <60>;
    (__ct_m40S0.50 var=40) const ()  <61>;
    (__tmp.52 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.49 __ct_m40S0.50)  <63>;
    (__R_SP.53 var=12 __sp.54 var=18) wr_res_reg (__tmp.52 __sp.17)  <64>;
    (__rd___sp.55 var=32) rd_res_reg (__R_SP.11 __sp.54)  <66>;
    (__ct_0t0.56 var=44) const ()  <67>;
    (__adr_x.58 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_0t0.56)  <69>;
    (__rd___sp.60 var=32) rd_res_reg (__R_SP.11 __sp.54)  <71>;
    (__rd___sp.65 var=32) rd_res_reg (__R_SP.11 __sp.54)  <76>;
    (__rd___sp.70 var=32) rd_res_reg (__R_SP.11 __sp.54)  <81>;
    (__rd___sp.75 var=32) rd_res_reg (__R_SP.11 __sp.54)  <86>;
    (__rd___sp.80 var=32) rd_res_reg (__R_SP.11 __sp.54)  <91>;
    (__rd___sp.85 var=32) rd_res_reg (__R_SP.11 __sp.54)  <96>;
    (__M_DMw.98 var=5 x_low.99 var=26) store (__arg_x_low.42 __adr_x.58 x_low.25)  <109>;
    (__M_DMw.104 var=5 x_high.105 var=27) store (__arg_x_high.46 __adr_x.854 x_high.26)  <114>;
    (__ct_4t0.836 var=307) const ()  <983>;
    (__adr_x.854 var=325) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <1004>;
    call {
        () chess_separator_scheduler ()  <115>;
    } #4 off=1
    #169 off=2
    (__ct_32t0.61 var=48) const ()  <72>;
    (__adr_hx.63 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_32t0.61)  <74>;
    (__fch_x_high.112 var=84) load (__M_DMw.4 __adr_x.855 x_high.105)  <122>;
    (__M_DMw.119 var=5 hx.120 var=20) store (__fch_x_high.112 __adr_hx.63 hx.19)  <129>;
    (__adr_x.855 var=326) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <1005>;
    call {
        () chess_separator_scheduler ()  <130>;
    } #6 off=3
    #181 off=4
    (__ct_36t0.66 var=52) const ()  <77>;
    (__adr_lx.68 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_36t0.66)  <79>;
    (__fch_x_low.122 var=91) load (__M_DMw.4 __adr_x.58 x_low.99)  <132>;
    (__M_DMw.132 var=5 lx.133 var=21) store (__fch_x_low.122 __adr_lx.68 lx.20)  <142>;
    call {
        () chess_separator_scheduler ()  <143>;
    } #8 off=5
    #9 off=6
    (__ct_28t0.71 var=56) const ()  <82>;
    (__adr_k.73 var=58) __Pvoid__pl___Pvoid___sint (__rd___sp.70 __ct_28t0.71)  <84>;
    (__ct_0.134 var=98) const ()  <144>;
    (__M_DMw.136 var=5 k.137 var=22) store (__ct_0.134 __adr_k.73 k.21)  <146>;
    call {
        () chess_separator_scheduler ()  <147>;
    } #10 off=7
    #11 off=8
    (__fch_hx.138 var=100) load (__M_DMw.4 __adr_hx.63 hx.120)  <148>;
    (__ct_1048576.139 var=101) const ()  <149>;
    (__ct_40s0.230 var=117) const ()  <245>;
    (f64_mul.1037 var=450) const ()  <1324>;
    (__tmp.1232 var=103) bool__ge___sint___sint (__fch_hx.138 __ct_1048576.139)  <1676>;
    (__trgt.1239 var=518) const ()  <1727>;
    () void_br_bool_t13s_s2 (__tmp.1232 __trgt.1239)  <1728>;
    (__either.1240 var=515) undefined ()  <1729>;
    if {
        {
            () if_expr (__either.1240)  <188>;
        } #13
        {
        } #44 off=28
        {
            #15 off=9
            (__fch_hx.178 var=104) load (__M_DMw.4 __adr_hx.63 hx.120)  <189>;
            (__ct_2147483647.179 var=105) const ()  <190>;
            (__tmp.181 var=107) __sint__ad___sint___sint (__fch_hx.178 __ct_2147483647.179)  <192>;
            (__fch_lx.183 var=109) load (__M_DMw.4 __adr_lx.68 lx.133)  <194>;
            (__tmp.184 var=110) __uint__or___uint___uint (__tmp.181 __fch_lx.183)  <195>;
            (__tmp.187 var=113) bool__eq___uint___uint (__tmp.184 __ct_0.134)  <198>;
            (__trgt.1235 var=516) const ()  <1719>;
            () void_br_bool_t13s_s2 (__tmp.187 __trgt.1235)  <1720>;
            (__either.1236 var=515) undefined ()  <1721>;
            if {
                {
                    () if_expr (__either.1236)  <235>;
                    () chess_rear_then ()  <1722>;
                } #17
                {
                    #187 off=11
                    (__ct_4286578688.226 var=114) const ()  <239>;
                    (f32_to_f64.977 var=411) const ()  <1258>;
                    (__link.978 var=412) w32_jal_t21s_s2 (f32_to_f64.977)  <1259>;
                    call {
                        (a.979 var=410 stl=X off=12) assign (__ct_4286578688.226)  <1260>;
                        (__link.980 var=412 stl=X off=1) assign (__link.978)  <1261>;
                        (__tmp.981 var=414 stl=X off=10 __tmp.982 var=415 stl=X off=11) Ff32_to_f64 (__link.980 a.979)  <1262>;
                        (__tmp.984 var=414) deassign (__tmp.981)  <1264>;
                        (__tmp.986 var=415) deassign (__tmp.982)  <1266>;
                    } #188 off=12
                    #26 off=13 nxt=-2
                    (__rd___sp.229 var=32) rd_res_reg (__R_SP.11 __sp.54)  <244>;
                    (__tmp.232 var=119) __Pvoid__pl___Pvoid___sint (__rd___sp.229 __ct_40s0.230)  <247>;
                    (__R_SP.233 var=12 __sp.234 var=18) wr_res_reg (__tmp.232 __sp.54)  <248>;
                    () void___rts_jr_w32 (__la.33)  <249>;
                    (__rt_low.236 var=35 stl=X off=10) assign (__tmp.984)  <251>;
                    () out (__rt_low.236)  <252>;
                    (__rt_high.238 var=36 stl=X off=11) assign (__tmp.986)  <254>;
                    () out (__rt_high.238)  <255>;
                    () sink (__sp.234)  <263>;
                    () sink (hx.120)  <265>;
                    () sink (lx.133)  <266>;
                    () sink (k.137)  <267>;
                    () sink (x_low.99)  <271>;
                    () sink (x_high.105)  <272>;
                } #18
                {
                } #27 off=10
                {
                } #28
            } #16
            #29 off=14
            (__fch_hx.313 var=120) load (__M_DMw.4 __adr_hx.63 hx.120)  <349>;
            (__tmp.316 var=123) bool__lt___sint___sint (__fch_hx.313 __ct_0.134)  <352>;
            (__trgt.1237 var=517) const ()  <1723>;
            () void_br_bool_t13s_s2 (__tmp.316 __trgt.1237)  <1724>;
            (__either.1238 var=515) undefined ()  <1725>;
            if {
                {
                    () if_expr (__either.1238)  <389>;
                    () chess_rear_then ()  <1726>;
                } #31
                {
                    #207 off=16
                    (__fch_x_low.354 var=125) load (__M_DMw.4 __adr_x.58 x_low.99)  <391>;
                    (__fch_x_high.359 var=128) load (__M_DMw.4 __adr_x.837 x_high.105)  <396>;
                    (__fch_x_low.362 var=130) load (__M_DMw.4 __adr_x.58 x_low.99)  <399>;
                    (__fch_x_high.367 var=133) load (__M_DMw.4 __adr_x.838 x_high.105)  <404>;
                    (__adr_x.837 var=308) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <985>;
                    (__adr_x.838 var=309) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <986>;
                    (f64_sub.995 var=424) const ()  <1278>;
                    (__link.996 var=425) w32_jal_t21s_s2 (f64_sub.995)  <1279>;
                    call {
                        (a_low.997 var=420 stl=X off=12) assign (__fch_x_low.354)  <1280>;
                        (a_high.998 var=421 stl=X off=13) assign (__fch_x_high.359)  <1281>;
                        (b_low.999 var=422 stl=X off=14) assign (__fch_x_low.362)  <1282>;
                        (b_high.1000 var=423 stl=X off=15) assign (__fch_x_high.367)  <1283>;
                        (__link.1001 var=425 stl=X off=1) assign (__link.996)  <1284>;
                        (__tmp.1002 var=427 stl=X off=10 __tmp.1003 var=428 stl=X off=11) Ff64_sub (__link.1001 a_low.997 a_high.998 b_low.999 b_high.1000)  <1285>;
                        (__tmp.1005 var=427) deassign (__tmp.1002)  <1287>;
                        (__tmp.1007 var=428) deassign (__tmp.1003)  <1289>;
                    } #208 off=17
                    #213 off=18
                    (f64_div.1016 var=437) const ()  <1301>;
                    (__link.1017 var=438) w32_jal_t21s_s2 (f64_div.1016)  <1302>;
                    call {
                        (a_low.1018 var=433 stl=X off=12) assign (__tmp.1005)  <1303>;
                        (a_high.1019 var=434 stl=X off=13) assign (__tmp.1007)  <1304>;
                        (b_low.1020 var=435 stl=X off=14) assign (__ct_0.134)  <1305>;
                        (b_high.1021 var=436 stl=X off=15) assign (__ct_0.134)  <1306>;
                        (__link.1022 var=438 stl=X off=1) assign (__link.1017)  <1307>;
                        (__tmp.1023 var=440 stl=X off=10 __tmp.1024 var=441 stl=X off=11) Ff64_div (__link.1022 a_low.1018 a_high.1019 b_low.1020 b_high.1021)  <1308>;
                        (__tmp.1026 var=440) deassign (__tmp.1023)  <1310>;
                        (__tmp.1028 var=441) deassign (__tmp.1024)  <1312>;
                    } #214 off=19
                    #35 off=20 nxt=-2
                    (__rd___sp.373 var=32) rd_res_reg (__R_SP.11 __sp.54)  <410>;
                    (__tmp.376 var=140) __Pvoid__pl___Pvoid___sint (__rd___sp.373 __ct_40s0.230)  <413>;
                    (__R_SP.377 var=12 __sp.378 var=18) wr_res_reg (__tmp.376 __sp.54)  <414>;
                    () void___rts_jr_w32 (__la.33)  <415>;
                    (__rt_low.380 var=35 stl=X off=10) assign (__tmp.1026)  <417>;
                    () out (__rt_low.380)  <418>;
                    (__rt_high.382 var=36 stl=X off=11) assign (__tmp.1028)  <420>;
                    () out (__rt_high.382)  <421>;
                    () sink (__sp.378)  <429>;
                    () sink (hx.120)  <431>;
                    () sink (lx.133)  <432>;
                    () sink (k.137)  <433>;
                    () sink (x_low.99)  <437>;
                    () sink (x_high.105)  <438>;
                } #32
                {
                } #36 off=15
                {
                } #37
            } #30
            #38 off=21
            (__M_DMw.461 var=5 k.462 var=22) store (__ct_m54.816 __adr_k.73 k.137)  <519>;
            (__ct_m54.816 var=298) const ()  <961>;
            call {
                () chess_separator_scheduler ()  <520>;
            } #39 off=22
            #231 off=23
            (__fch_x_low.464 var=146) load (__M_DMw.4 __adr_x.58 x_low.99)  <522>;
            (__fch_x_high.469 var=149) load (__M_DMw.4 __adr_x.839 x_high.105)  <527>;
            (__adr_x.839 var=310) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <987>;
            (__link.1038 var=451) w32_jal_t21s_s2 (f64_mul.1037)  <1325>;
            (__ct_1129316352.1221 var=500) const ()  <1576>;
            call {
                (a_low.1039 var=446 stl=X off=12) assign (__fch_x_low.464)  <1326>;
                (a_high.1040 var=447 stl=X off=13) assign (__fch_x_high.469)  <1327>;
                (b_low.1041 var=448 stl=X off=14) assign (__ct_0.134)  <1328>;
                (b_high.1042 var=449 stl=X off=15) assign (__ct_1129316352.1221)  <1329>;
                (__link.1043 var=451 stl=X off=1) assign (__link.1038)  <1330>;
                (__tmp.1044 var=453 stl=X off=10 __tmp.1045 var=454 stl=X off=11) Ff64_mul (__link.1043 a_low.1039 a_high.1040 b_low.1041 b_high.1042)  <1331>;
                (__tmp.1047 var=453) deassign (__tmp.1044)  <1333>;
                (__tmp.1049 var=454) deassign (__tmp.1045)  <1335>;
            } #232 off=24
            #228 off=25
            (__M_DMw.475 var=5 x_low.476 var=26) store (__tmp.1047 __adr_x.58 x_low.99)  <533>;
            (__M_DMw.481 var=5 x_high.482 var=27) store (__tmp.1049 __adr_x.840 x_high.105)  <538>;
            (__adr_x.840 var=311) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <988>;
            call {
                () chess_separator_scheduler ()  <539>;
            } #41 off=26
            #242 off=27
            (__fch_x_high.489 var=161) load (__M_DMw.4 __adr_x.841 x_high.482)  <546>;
            (__M_DMw.496 var=5 hx.497 var=20) store (__fch_x_high.489 __adr_hx.63 hx.120)  <553>;
            (__adr_x.841 var=312) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <989>;
            (__trgt.1241 var=519) const ()  <1730>;
            () void_j_t21s_s2 (__trgt.1241)  <1731>;
        } #14
        {
            (hx.505 var=20) merge (hx.120 hx.497)  <562>;
            (k.507 var=22) merge (k.137 k.462)  <564>;
            (x_low.511 var=26) merge (x_low.99 x_low.476)  <568>;
            (x_high.512 var=27) merge (x_high.105 x_high.482)  <569>;
        } #45
    } #12
    #46 off=29
    (__fch_hx.534 var=167) load (__M_DMw.4 __adr_hx.63 hx.505)  <591>;
    (__ct_2146435072.535 var=168) const ()  <592>;
    (__tmp.537 var=170) bool__ge___sint___sint (__fch_hx.534 __ct_2146435072.535)  <594>;
    (f64_add.1063 var=466) const ()  <1355>;
    (__trgt.1242 var=520) const ()  <1732>;
    () void_br_bool_t13s_s2 (__tmp.537 __trgt.1242)  <1733>;
    (__either.1243 var=515) undefined ()  <1734>;
    if {
        {
            () if_expr (__either.1243)  <631>;
        } #48
        {
            #261 off=61
            (__fch_x_low.575 var=172) load (__M_DMw.4 __adr_x.58 x_low.511)  <633>;
            (__fch_x_high.580 var=175) load (__M_DMw.4 __adr_x.842 x_high.512)  <638>;
            (__fch_x_low.583 var=177) load (__M_DMw.4 __adr_x.58 x_low.511)  <641>;
            (__fch_x_high.588 var=180) load (__M_DMw.4 __adr_x.843 x_high.512)  <646>;
            (__adr_x.842 var=313) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <990>;
            (__adr_x.843 var=314) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <991>;
            (__link.1064 var=467) w32_jal_t21s_s2 (f64_add.1063)  <1356>;
            call {
                (a_low.1065 var=462 stl=X off=12) assign (__fch_x_low.575)  <1357>;
                (a_high.1066 var=463 stl=X off=13) assign (__fch_x_high.580)  <1358>;
                (b_low.1067 var=464 stl=X off=14) assign (__fch_x_low.583)  <1359>;
                (b_high.1068 var=465 stl=X off=15) assign (__fch_x_high.588)  <1360>;
                (__link.1069 var=467 stl=X off=1) assign (__link.1064)  <1361>;
                (__tmp.1070 var=469 stl=X off=10 __tmp.1071 var=470 stl=X off=11) Ff64_add (__link.1069 a_low.1065 a_high.1066 b_low.1067 b_high.1068)  <1362>;
                (__tmp.1073 var=469) deassign (__tmp.1070)  <1364>;
                (__tmp.1075 var=470) deassign (__tmp.1071)  <1366>;
            } #262 off=62
        } #49
        {
            #53 off=30
            (__fch_k.591 var=182) load (__M_DMw.4 __adr_k.73 k.507)  <650>;
            (__fch_hx.592 var=183) load (__M_DMw.4 __adr_hx.63 hx.505)  <651>;
            (__ct_20.593 var=184) const ()  <652>;
            (__tmp.595 var=186) __sint__rs___sint___sint (__fch_hx.592 __ct_20.593)  <654>;
            (__tmp.598 var=189) __sint__pl___sint___sint (__tmp.595 __ct_m1023.817)  <657>;
            (__tmp.599 var=190) __sint__pl___sint___sint (__fch_k.591 __tmp.598)  <658>;
            (__M_DMw.600 var=5 k.601 var=22) store (__tmp.599 __adr_k.73 k.507)  <659>;
            (__ct_m1023.817 var=299) const ()  <963>;
            call {
                () chess_separator_scheduler ()  <660>;
            } #54 off=31
            #55 off=32
            (__ct_24t0.76 var=60) const ()  <87>;
            (__adr_i.78 var=62) __Pvoid__pl___Pvoid___sint (__rd___sp.75 __ct_24t0.76)  <89>;
            (__fch_k.602 var=191) load (__M_DMw.4 __adr_k.73 k.601)  <661>;
            (__ct_2147483648.604 var=193) const ()  <663>;
            (__tmp.606 var=195) __uint__ad___uint___uint (__fch_k.602 __ct_2147483648.604)  <665>;
            (__ct_31.607 var=196) const ()  <666>;
            (__tmp.609 var=198) __uint__rs___uint___sint (__tmp.606 __ct_31.607)  <668>;
            (__M_DMw.611 var=5 i.612 var=23) store (__tmp.609 __adr_i.78 i.22)  <670>;
            call {
                () chess_separator_scheduler ()  <671>;
            } #56 off=33
            #57 off=34
            (__ct_1023.596 var=187) const ()  <655>;
            (__fch_hx.613 var=200) load (__M_DMw.4 __adr_hx.63 hx.505)  <672>;
            (__ct_1048575.614 var=201) const ()  <673>;
            (__tmp.616 var=203) __sint__ad___sint___sint (__fch_hx.613 __ct_1048575.614)  <675>;
            (__fch_i.619 var=206) load (__M_DMw.4 __adr_i.78 i.612)  <678>;
            (__tmp.620 var=207) __sint__mi___sint___sint (__ct_1023.596 __fch_i.619)  <679>;
            (__tmp.623 var=210) __sint__ls___sint___sint (__tmp.620 __ct_20.593)  <682>;
            (__tmp.624 var=211) __sint__or___sint___sint (__tmp.616 __tmp.623)  <683>;
            (__M_DMw.625 var=5 hx.626 var=20) store (__tmp.624 __adr_hx.63 hx.505)  <684>;
            call {
                () chess_separator_scheduler ()  <685>;
            } #58 off=35
            #276 off=36
            (__fch_k.627 var=212) load (__M_DMw.4 __adr_k.73 k.601)  <686>;
            (__fch_i.628 var=213) load (__M_DMw.4 __adr_i.78 i.612)  <687>;
            (__tmp.629 var=214) __sint__pl___sint___sint (__fch_k.627 __fch_i.628)  <688>;
            (i32_to_f64.1079 var=474) const ()  <1373>;
            (__link.1080 var=475) w32_jal_t21s_s2 (i32_to_f64.1079)  <1374>;
            call {
                (a.1081 var=473 stl=X off=12) assign (__tmp.629)  <1375>;
                (__link.1082 var=475 stl=X off=1) assign (__link.1080)  <1376>;
                (__tmp.1083 var=477 stl=X off=10 __tmp.1084 var=478 stl=X off=11) Fi32_to_f64 (__link.1082 a.1081)  <1377>;
                (__tmp.1086 var=477) deassign (__tmp.1083)  <1379>;
                (__tmp.1088 var=478) deassign (__tmp.1084)  <1381>;
            } #277 off=37
            #273 off=38
            (__ct_8t0.81 var=64) const ()  <92>;
            (__adr_y.83 var=66) __Pvoid__pl___Pvoid___sint (__rd___sp.80 __ct_8t0.81)  <94>;
            (__M_DMw.632 var=5 y_low.633 var=28) store (__tmp.1086 __adr_y.83 y_low.27)  <691>;
            (__M_DMw.638 var=5 y_high.639 var=29) store (__tmp.1088 __adr_y.848 y_high.28)  <696>;
            (__ct_12t0.847 var=318) const ()  <995>;
            (__adr_y.848 var=319) __Pvoid__pl___Pvoid___sint (__rd___sp.80 __ct_12t0.847)  <997>;
            call {
                () chess_separator_scheduler ()  <699>;
            } #62 off=39
            #63 off=40
            (__fch_hx.642 var=220) load (__M_DMw.4 __adr_hx.63 hx.626)  <701>;
            call {
                () chess_separator_scheduler ()  <703>;
            } #64 off=41
            #286 off=42
            (__fch_x_low.646 var=223) load (__M_DMw.4 __adr_x.58 x_low.511)  <706>;
            call {
                () chess_separator_scheduler ()  <726>;
            } #72 off=43
            #73 off=44
            (__M_DMw.665 var=5 x_low.666 var=26) store (__fch_x_low.646 __adr_x.58 x_low.511)  <729>;
            (__M_DMw.671 var=5 x_high.672 var=27) store (__fch_hx.642 __adr_x.845 x_high.512)  <734>;
            (__adr_x.845 var=316) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <993>;
            call {
                () chess_separator_scheduler ()  <735>;
            } #74 off=45
            #322 off=46
            (__fch_y_low.674 var=241) load (__M_DMw.4 __adr_y.83 y_low.633)  <737>;
            (__fch_y_high.679 var=244) load (__M_DMw.4 __adr_y.849 y_high.639)  <742>;
            (__adr_y.849 var=320) __Pvoid__pl___Pvoid___sint (__rd___sp.80 __ct_12t0.847)  <998>;
            (__link.1121 var=451) w32_jal_t21s_s2 (f64_mul.1037)  <1428>;
            (__ct_301017910.1222 var=501) const ()  <1578>;
            (__ct_1029308147.1223 var=502) const ()  <1580>;
            call {
                (a_low.1122 var=446 stl=X off=12) assign (__fch_y_low.674)  <1429>;
                (a_high.1123 var=447 stl=X off=13) assign (__fch_y_high.679)  <1430>;
                (b_low.1124 var=448 stl=X off=14) assign (__ct_301017910.1222)  <1431>;
                (b_high.1125 var=449 stl=X off=15) assign (__ct_1029308147.1223)  <1432>;
                (__link.1126 var=451 stl=X off=1) assign (__link.1121)  <1433>;
                (__tmp.1127 var=453 stl=X off=10 __tmp.1128 var=454 stl=X off=11) Ff64_mul (__link.1126 a_low.1122 a_high.1123 b_low.1124 b_high.1125)  <1434>;
                (__tmp.1130 var=453) deassign (__tmp.1127)  <1436>;
                (__tmp.1132 var=454) deassign (__tmp.1128)  <1438>;
            } #323 off=47
            #319 off=48
            (__fch_x_low.687 var=251) load (__M_DMw.4 __adr_x.58 x_low.666)  <750>;
            (__fch_x_high.692 var=254) load (__M_DMw.4 __adr_x.846 x_high.672)  <755>;
            (log.700 var=259) const ()  <763>;
            (__link.701 var=260) w32_jal_t21s_s2 (log.700)  <764>;
            (__adr_x.846 var=317) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.836)  <994>;
            call {
                (__record_low.695 var=255 stl=X off=12) assign (__fch_x_low.687)  <758>;
                (__record_high.697 var=256 stl=X off=13) assign (__fch_x_high.692)  <760>;
                (__link.702 var=260 stl=X off=1) assign (__link.701)  <765>;
                (__tmp.704 var=262 stl=X off=10 __tmp.708 var=263 stl=X off=11) Flog (__link.702 __record_low.695 __record_high.697)  <766>;
                (__tmp.705 var=262) deassign (__tmp.704)  <768>;
                (__tmp.709 var=263) deassign (__tmp.708)  <771>;
            } #76 off=49
            #335 off=50
            (__link.1142 var=451) w32_jal_t21s_s2 (f64_mul.1037)  <1451>;
            (__ct_354870542.1224 var=503) const ()  <1582>;
            (__ct_1071369083.1225 var=504) const ()  <1584>;
            call {
                (a_low.1143 var=446 stl=X off=12) assign (__ct_354870542.1224)  <1452>;
                (a_high.1144 var=447 stl=X off=13) assign (__ct_1071369083.1225)  <1453>;
                (b_low.1145 var=448 stl=X off=14) assign (__tmp.705)  <1454>;
                (b_high.1146 var=449 stl=X off=15) assign (__tmp.709)  <1455>;
                (__link.1147 var=451 stl=X off=1) assign (__link.1142)  <1456>;
                (__tmp.1148 var=453 stl=X off=10 __tmp.1149 var=454 stl=X off=11) Ff64_mul (__link.1147 a_low.1143 a_high.1144 b_low.1145 b_high.1146)  <1457>;
                (__tmp.1151 var=453) deassign (__tmp.1148)  <1459>;
                (__tmp.1153 var=454) deassign (__tmp.1149)  <1461>;
            } #336 off=51
            #341 off=52
            (__link.1163 var=467) w32_jal_t21s_s2 (f64_add.1063)  <1474>;
            call {
                (a_low.1164 var=462 stl=X off=12) assign (__tmp.1130)  <1475>;
                (a_high.1165 var=463 stl=X off=13) assign (__tmp.1132)  <1476>;
                (b_low.1166 var=464 stl=X off=14) assign (__tmp.1151)  <1477>;
                (b_high.1167 var=465 stl=X off=15) assign (__tmp.1153)  <1478>;
                (__link.1168 var=467 stl=X off=1) assign (__link.1163)  <1479>;
                (__tmp.1169 var=469 stl=X off=10 __tmp.1170 var=470 stl=X off=11) Ff64_add (__link.1168 a_low.1164 a_high.1165 b_low.1166 b_high.1167)  <1480>;
                (__tmp.1172 var=469) deassign (__tmp.1169)  <1482>;
                (__tmp.1174 var=470) deassign (__tmp.1170)  <1484>;
            } #342 off=53
            #332 off=54
            (__ct_16t0.86 var=68) const ()  <97>;
            (__adr_z.88 var=70) __Pvoid__pl___Pvoid___sint (__rd___sp.85 __ct_16t0.86)  <99>;
            (__M_DMw.715 var=5 z_low.716 var=30) store (__tmp.1172 __adr_z.88 z_low.29)  <777>;
            (__M_DMw.721 var=5 z_high.722 var=31) store (__tmp.1174 __adr_z.852 z_high.30)  <782>;
            (__ct_20t0.851 var=322) const ()  <1000>;
            (__adr_z.852 var=323) __Pvoid__pl___Pvoid___sint (__rd___sp.85 __ct_20t0.851)  <1002>;
            call {
                () chess_separator_scheduler ()  <783>;
            } #78 off=55
            #361 off=56
            (__fch_z_low.724 var=271) load (__M_DMw.4 __adr_z.88 z_low.716)  <785>;
            (__fch_z_high.729 var=274) load (__M_DMw.4 __adr_z.853 z_high.722)  <790>;
            (__fch_y_low.732 var=276) load (__M_DMw.4 __adr_y.83 y_low.633)  <793>;
            (__fch_y_high.737 var=279) load (__M_DMw.4 __adr_y.850 y_high.639)  <798>;
            (__adr_y.850 var=321) __Pvoid__pl___Pvoid___sint (__rd___sp.80 __ct_12t0.847)  <999>;
            (__adr_z.853 var=324) __Pvoid__pl___Pvoid___sint (__rd___sp.85 __ct_20t0.851)  <1003>;
            (__link.1184 var=451) w32_jal_t21s_s2 (f64_mul.1037)  <1497>;
            (__ct_1352622080.1226 var=505) const ()  <1586>;
            (__ct_1070810131.1227 var=506) const ()  <1588>;
            call {
                (a_low.1185 var=446 stl=X off=12) assign (__fch_y_low.732)  <1498>;
                (a_high.1186 var=447 stl=X off=13) assign (__fch_y_high.737)  <1499>;
                (b_low.1187 var=448 stl=X off=14) assign (__ct_1352622080.1226)  <1500>;
                (b_high.1188 var=449 stl=X off=15) assign (__ct_1070810131.1227)  <1501>;
                (__link.1189 var=451 stl=X off=1) assign (__link.1184)  <1502>;
                (__tmp.1190 var=453 stl=X off=10 __tmp.1191 var=454 stl=X off=11) Ff64_mul (__link.1189 a_low.1185 a_high.1186 b_low.1187 b_high.1188)  <1503>;
                (__tmp.1193 var=453) deassign (__tmp.1190)  <1505>;
                (__tmp.1195 var=454) deassign (__tmp.1191)  <1507>;
            } #362 off=57
            #367 off=58
            (__link.1205 var=467) w32_jal_t21s_s2 (f64_add.1063)  <1520>;
            call {
                (a_low.1206 var=462 stl=X off=12) assign (__fch_z_low.724)  <1521>;
                (a_high.1207 var=463 stl=X off=13) assign (__fch_z_high.729)  <1522>;
                (b_low.1208 var=464 stl=X off=14) assign (__tmp.1193)  <1523>;
                (b_high.1209 var=465 stl=X off=15) assign (__tmp.1195)  <1524>;
                (__link.1210 var=467 stl=X off=1) assign (__link.1205)  <1525>;
                (__tmp.1211 var=469 stl=X off=10 __tmp.1212 var=470 stl=X off=11) Ff64_add (__link.1210 a_low.1206 a_high.1207 b_low.1208 b_high.1209)  <1526>;
                (__tmp.1214 var=469) deassign (__tmp.1211)  <1528>;
                (__tmp.1216 var=470) deassign (__tmp.1212)  <1530>;
            } #368 off=59
            #374 off=60
            (__trgt.1244 var=521) const ()  <1735>;
            () void_j_t21s_s2 (__trgt.1244)  <1736>;
        } #52
        {
            (hx.743 var=20) merge (hx.505 hx.626)  <805>;
            (k.744 var=22) merge (k.507 k.601)  <806>;
            (i.745 var=23) merge (i.22 i.612)  <807>;
            (x_low.746 var=26) merge (x_low.511 x_low.666)  <808>;
            (x_high.747 var=27) merge (x_high.512 x_high.672)  <809>;
            (y_low.748 var=28) merge (y_low.27 y_low.633)  <810>;
            (y_high.749 var=29) merge (y_high.28 y_high.639)  <811>;
            (z_low.750 var=30) merge (z_low.29 z_low.716)  <812>;
            (z_high.751 var=31) merge (z_high.30 z_high.722)  <813>;
            (__rt_low.812 var=35) merge (__tmp.1073 __tmp.1214)  <957>;
            (__rt_high.815 var=36) merge (__tmp.1075 __tmp.1216)  <960>;
        } #81
    } #47
    #83 off=63 nxt=-2
    (__rd___sp.758 var=32) rd_res_reg (__R_SP.11 __sp.54)  <820>;
    (__tmp.761 var=286) __Pvoid__pl___Pvoid___sint (__rd___sp.758 __ct_40s0.230)  <823>;
    (__R_SP.762 var=12 __sp.763 var=18) wr_res_reg (__tmp.761 __sp.54)  <824>;
    () void___rts_jr_w32 (__la.33)  <825>;
    (__rt_low.765 var=35 stl=X off=10) assign (__rt_low.812)  <827>;
    () out (__rt_low.765)  <828>;
    (__rt_high.767 var=36 stl=X off=11) assign (__rt_high.815)  <830>;
    () out (__rt_high.767)  <831>;
    () sink (__sp.763)  <839>;
    () sink (hx.743)  <841>;
    () sink (lx.133)  <842>;
    () sink (k.744)  <843>;
    () sink (i.745)  <844>;
    () sink (x_low.746)  <847>;
    () sink (x_high.747)  <848>;
    () sink (y_low.748)  <849>;
    () sink (y_high.749)  <850>;
    () sink (z_low.750)  <851>;
    () sink (z_high.751)  <852>;
} #0
0 : 'src/math.c';
----------
0 : (0,1194:0,0);
3 : (0,1194:13,0);
4 : (0,1194:13,0);
6 : (0,1207:4,7);
8 : (0,1207:28,8);
9 : (0,1209:5,9);
10 : (0,1209:5,9);
11 : (0,1210:11,9);
12 : (0,1210:4,9);
14 : (0,1210:25,10);
15 : (0,1211:32,10);
16 : (0,1211:8,10);
18 : (0,1212:19,11);
26 : (0,1212:12,19);
27 : (0,1211:8,23);
29 : (0,1213:14,26);
30 : (0,1213:8,26);
32 : (0,1213:18,27);
35 : (0,1213:18,27);
36 : (0,1213:8,30);
38 : (0,1214:10,34);
39 : (0,1214:10,34);
41 : (0,1214:19,35);
44 : (0,1210:4,38);
46 : (0,1217:11,41);
47 : (0,1217:4,41);
49 : (0,1217:26,42);
52 : (0,1217:26,44);
53 : (0,1218:6,46);
54 : (0,1218:6,46);
55 : (0,1219:7,47);
56 : (0,1219:7,47);
57 : (0,1220:7,48);
58 : (0,1220:7,48);
62 : (0,1222:15,50);
63 : (0,1222:28,51);
64 : (0,1222:28,51);
72 : (0,1222:15,56);
73 : (0,1222:3,59);
74 : (0,1222:3,59);
76 : (0,1223:30,59);
78 : (0,1223:7,60);
83 : (0,1224:4,64);
169 : (0,1207:1,6);
181 : (0,1207:30,7);
187 : (0,1212:32,19);
188 : (0,1212:32,19);
207 : (0,1213:27,27);
208 : (0,1213:27,27);
213 : (0,1213:30,27);
214 : (0,1213:30,27);
228 : (0,1214:17,34);
231 : (0,1214:19,34);
232 : (0,1214:19,34);
242 : (0,1215:1,35);
261 : (0,1217:34,42);
262 : (0,1217:34,42);
273 : (0,1221:4,48);
276 : (0,1221:9,48);
277 : (0,1221:9,48);
319 : (0,1223:30,59);
322 : (0,1223:10,59);
323 : (0,1223:10,59);
332 : (0,1223:4,59);
335 : (0,1223:29,59);
336 : (0,1223:29,59);
341 : (0,1223:21,59);
342 : (0,1223:21,59);
361 : (0,1224:15,60);
362 : (0,1224:15,60);
367 : (0,1224:13,60);
368 : (0,1224:13,60);
----------
60 : (0,1194:7,0);
61 : (0,1194:7,0);
63 : (0,1194:7,0);
64 : (0,1194:7,0);
66 : (0,1194:20,0);
67 : (0,1194:20,0);
69 : (0,1194:20,0);
71 : (0,1204:16,0);
72 : (0,1204:16,0);
74 : (0,1204:16,0);
76 : (0,1205:14,0);
77 : (0,1205:14,0);
79 : (0,1205:14,0);
81 : (0,1204:14,0);
82 : (0,1204:14,0);
84 : (0,1204:14,0);
86 : (0,1204:12,0);
87 : (0,1204:12,0);
89 : (0,1204:12,0);
91 : (0,1203:11,0);
92 : (0,1203:11,0);
94 : (0,1203:11,0);
96 : (0,1203:13,0);
97 : (0,1203:13,0);
99 : (0,1203:13,0);
109 : (0,1194:13,0);
114 : (0,1194:13,0);
115 : (0,1194:13,0);
122 : (0,1207:21,6);
129 : (0,1207:1,6);
130 : (0,1207:4,7);
132 : (0,1207:50,7);
142 : (0,1207:30,7);
143 : (0,1207:28,8);
144 : (0,1209:6,0);
146 : (0,1209:4,8);
147 : (0,1209:5,9);
148 : (0,1210:8,9);
149 : (0,1210:13,0);
188 : (0,1210:4,9);
189 : (0,1211:14,10);
190 : (0,1211:17,0);
192 : (0,1211:16,10);
194 : (0,1211:29,10);
195 : (0,1211:28,10);
198 : (0,1211:32,10);
235 : (0,1211:8,10);
239 : (0,1212:19,0);
244 : (0,1212:12,0);
245 : (0,1212:12,0);
247 : (0,1212:12,0);
248 : (0,1212:12,19);
249 : (0,1212:12,19);
251 : (0,1212:32,0);
254 : (0,1212:32,0);
349 : (0,1213:12,26);
352 : (0,1213:14,26);
389 : (0,1213:8,26);
391 : (0,1213:26,27);
396 : (0,1213:26,27);
399 : (0,1213:28,27);
404 : (0,1213:28,27);
410 : (0,1213:18,0);
413 : (0,1213:18,0);
414 : (0,1213:18,27);
415 : (0,1213:18,27);
417 : (0,1213:30,0);
420 : (0,1213:30,0);
519 : (0,1214:8,33);
520 : (0,1214:10,34);
522 : (0,1214:17,34);
527 : (0,1214:17,34);
533 : (0,1214:17,34);
538 : (0,1214:17,34);
539 : (0,1214:19,35);
546 : (0,1215:21,35);
553 : (0,1215:1,35);
562 : (0,1210:4,40);
564 : (0,1210:4,40);
568 : (0,1210:4,40);
569 : (0,1210:4,40);
591 : (0,1217:8,41);
592 : (0,1217:14,0);
594 : (0,1217:11,41);
631 : (0,1217:4,41);
633 : (0,1217:33,42);
638 : (0,1217:33,42);
641 : (0,1217:35,42);
646 : (0,1217:35,42);
650 : (0,1218:4,45);
651 : (0,1218:10,45);
652 : (0,1218:14,0);
654 : (0,1218:12,45);
655 : (0,1218:18,0);
657 : (0,1218:17,45);
658 : (0,1218:6,45);
659 : (0,1218:4,45);
660 : (0,1218:6,46);
661 : (0,1219:21,46);
663 : (0,1219:23,0);
665 : (0,1219:22,46);
666 : (0,1219:36,0);
668 : (0,1219:34,46);
670 : (0,1219:4,46);
671 : (0,1219:7,47);
672 : (0,1220:10,47);
673 : (0,1220:13,0);
675 : (0,1220:12,47);
678 : (0,1220:33,47);
679 : (0,1220:32,47);
682 : (0,1220:35,47);
683 : (0,1220:24,47);
684 : (0,1220:4,47);
685 : (0,1220:7,48);
686 : (0,1221:18,48);
687 : (0,1221:20,48);
688 : (0,1221:19,48);
691 : (0,1221:4,48);
696 : (0,1221:4,48);
699 : (0,1222:15,50);
701 : (0,1222:26,51);
703 : (0,1222:28,51);
706 : (0,1222:49,52);
726 : (0,1222:15,56);
729 : (0,1222:1,58);
734 : (0,1222:1,58);
735 : (0,1222:3,59);
737 : (0,1223:9,59);
742 : (0,1223:9,59);
750 : (0,1223:34,59);
755 : (0,1223:34,59);
758 : (0,1223:34,0);
760 : (0,1223:34,0);
764 : (0,1223:30,59);
765 : (0,1223:30,0);
766 : (0,1223:30,59);
777 : (0,1223:4,59);
782 : (0,1223:4,59);
783 : (0,1223:7,60);
785 : (0,1224:12,60);
790 : (0,1224:12,60);
793 : (0,1224:14,60);
798 : (0,1224:14,60);
805 : (0,1217:4,63);
806 : (0,1217:4,63);
807 : (0,1217:4,63);
808 : (0,1217:4,63);
809 : (0,1217:4,63);
810 : (0,1217:4,63);
811 : (0,1217:4,63);
812 : (0,1217:4,63);
813 : (0,1217:4,63);
820 : (0,1224:4,0);
823 : (0,1224:4,0);
824 : (0,1224:4,64);
825 : (0,1224:4,64);
827 : (0,1224:4,0);
830 : (0,1224:4,0);
961 : (0,1214:10,0);
963 : (0,1218:17,0);
983 : (0,1194:20,0);
995 : (0,1203:11,0);
1000 : (0,1203:13,0);
1258 : (0,1212:32,0);
1259 : (0,1212:32,19);
1260 : (0,1212:32,19);
1261 : (0,1212:32,19);
1262 : (0,1212:32,19);
1264 : (0,1212:32,19);
1266 : (0,1212:32,19);
1278 : (0,1213:27,0);
1279 : (0,1213:27,27);
1280 : (0,1213:27,27);
1281 : (0,1213:27,27);
1282 : (0,1213:27,27);
1283 : (0,1213:27,27);
1284 : (0,1213:27,27);
1285 : (0,1213:27,27);
1287 : (0,1213:27,27);
1289 : (0,1213:27,27);
1301 : (0,1213:30,0);
1302 : (0,1213:30,27);
1303 : (0,1213:30,27);
1304 : (0,1213:30,27);
1305 : (0,1213:30,27);
1306 : (0,1213:30,27);
1307 : (0,1213:30,27);
1308 : (0,1213:30,27);
1310 : (0,1213:30,27);
1312 : (0,1213:30,27);
1324 : (0,1214:19,0);
1325 : (0,1214:19,34);
1326 : (0,1214:19,34);
1327 : (0,1214:19,34);
1328 : (0,1214:19,34);
1329 : (0,1214:19,34);
1330 : (0,1214:19,34);
1331 : (0,1214:19,34);
1333 : (0,1214:19,34);
1335 : (0,1214:19,34);
1355 : (0,1217:34,0);
1356 : (0,1217:34,42);
1357 : (0,1217:34,42);
1358 : (0,1217:34,42);
1359 : (0,1217:34,42);
1360 : (0,1217:34,42);
1361 : (0,1217:34,42);
1362 : (0,1217:34,42);
1364 : (0,1217:34,42);
1366 : (0,1217:34,42);
1373 : (0,1221:9,0);
1374 : (0,1221:9,48);
1375 : (0,1221:9,48);
1376 : (0,1221:9,48);
1377 : (0,1221:9,48);
1379 : (0,1221:9,48);
1381 : (0,1221:9,48);
1428 : (0,1223:10,59);
1429 : (0,1223:10,59);
1430 : (0,1223:10,59);
1431 : (0,1223:10,59);
1432 : (0,1223:10,59);
1433 : (0,1223:10,59);
1434 : (0,1223:10,59);
1436 : (0,1223:10,59);
1438 : (0,1223:10,59);
1451 : (0,1223:29,59);
1452 : (0,1223:29,59);
1453 : (0,1223:29,59);
1454 : (0,1223:29,59);
1455 : (0,1223:29,59);
1456 : (0,1223:29,59);
1457 : (0,1223:29,59);
1459 : (0,1223:29,59);
1461 : (0,1223:29,59);
1474 : (0,1223:21,59);
1475 : (0,1223:21,59);
1476 : (0,1223:21,59);
1477 : (0,1223:21,59);
1478 : (0,1223:21,59);
1479 : (0,1223:21,59);
1480 : (0,1223:21,59);
1482 : (0,1223:21,59);
1484 : (0,1223:21,59);
1497 : (0,1224:15,60);
1498 : (0,1224:15,60);
1499 : (0,1224:15,60);
1500 : (0,1224:15,60);
1501 : (0,1224:15,60);
1502 : (0,1224:15,60);
1503 : (0,1224:15,60);
1505 : (0,1224:15,60);
1507 : (0,1224:15,60);
1520 : (0,1224:13,60);
1521 : (0,1224:13,60);
1522 : (0,1224:13,60);
1523 : (0,1224:13,60);
1524 : (0,1224:13,60);
1525 : (0,1224:13,60);
1526 : (0,1224:13,60);
1528 : (0,1224:13,60);
1530 : (0,1224:13,60);
1576 : (0,1214:22,0);
1578 : (0,1223:11,0);
1580 : (0,1223:11,0);
1582 : (0,1223:23,0);
1584 : (0,1223:23,0);
1586 : (0,1224:16,0);
1588 : (0,1224:16,0);
1676 : (0,1210:11,9);
1720 : (0,1211:8,10);
1724 : (0,1213:8,26);
1728 : (0,1210:4,9);
1733 : (0,1217:4,41);

