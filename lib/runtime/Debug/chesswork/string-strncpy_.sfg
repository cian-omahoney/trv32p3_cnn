
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:30:47 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strncpy(char * restrict, const char * restrict, size_t)
Fstrncpy : user_defined, called {
    fnm : "strncpy" 'char *strncpy(char * restrict, const char * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=20 );
}
****
***/

[
    0 : strncpy typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : n typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   20 : s2 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : __arg_s2__rstr typ=w08 bnd=b stl=DMb
   22 : s1 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   23 : __arg_s1__rstr typ=w08 bnd=b stl=DMb
   24 : result typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   25 : ns typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=ptrdiff_t_DMb
   26 : __rd___sp typ=w32 bnd=m
   27 : __la typ=w32 bnd=p tref=w32__
   28 : __rt typ=w32 bnd=p tref=__P__cchar__
   29 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   30 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   31 : __arg_n typ=w32 bnd=p tref=size_t__
   32 : __ct_m20S0 typ=w32 val=-20S0 bnd=m
   34 : __tmp typ=w32 bnd=m
   36 : __ct_0t0 typ=w32 val=0t0 bnd=m
   38 : __adr_n typ=w32 bnd=m adro=19
   40 : __ct_4t0 typ=w32 val=4t0 bnd=m
   42 : __adr_s2 typ=w32 bnd=m adro=20
   44 : __ct_8t0 typ=w32 val=8t0 bnd=m
   46 : __adr_s1 typ=w32 bnd=m adro=22
   48 : __ct_12t0 typ=w32 val=12t0 bnd=m
   50 : __adr_result typ=w32 bnd=m adro=24
   52 : __ct_16t0 typ=w32 val=16t0 bnd=m
   54 : __adr_ns typ=w32 bnd=m adro=25
   60 : s2__rstr typ=w08 bnd=b stl=DMb
   61 : s1__rstr typ=w08 bnd=b stl=DMb
   62 : __fch_s1 typ=w32 bnd=m
   63 : __fch_n typ=w32 bnd=m
   65 : __fch_ns typ=w32 bnd=m
   66 : __ct_1 typ=w32 val=1f bnd=m
   69 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   71 : __tmp typ=bool bnd=m
   72 : __fch_s2 typ=w32 bnd=m
   76 : __fch_s2__rstr typ=w08 bnd=m
   77 : __fch_s1 typ=w32 bnd=m
   84 : __tmp typ=bool bnd=m
   87 : __tmp typ=bool bnd=m
   88 : __fch_ns typ=w32 bnd=m
   94 : __tmp typ=bool bnd=m
   95 : __fch_s2 typ=w32 bnd=m
   99 : __fch_s2__rstr typ=w08 bnd=m
  100 : __fch_s1 typ=w32 bnd=m
  107 : __tmp typ=bool bnd=m
  110 : __tmp typ=bool bnd=m
  111 : __fch_ns typ=w32 bnd=m
  117 : __tmp typ=bool bnd=m
  118 : __ct_0 typ=w08 val=0f bnd=m
  120 : __fch_s1 typ=w32 bnd=m
  124 : __fch_ns typ=w32 bnd=m
  130 : __tmp typ=bool bnd=m
  132 : __ct_20s0 typ=w32 val=20s0 bnd=m
  134 : __tmp typ=w32 bnd=m
  148 : __ct_m1 typ=w32 val=-1f bnd=m
  149 : __shv___fch_s2 typ=w32 bnd=m
  150 : __shv___fch_s1 typ=w32 bnd=m
  151 : __shv___fch_s2 typ=w32 bnd=m
  152 : __shv___fch_s1 typ=w32 bnd=m
  153 : __shv___fch_ns typ=w32 bnd=m
  154 : __shv___fch_s1 typ=w32 bnd=m
  155 : __shv___fch_ns typ=w32 bnd=m
  156 : __shv___fch_ns typ=w32 bnd=m
  157 : __shv___fch_ns typ=w32 bnd=m
  171 : __true typ=bool val=1f bnd=m
  172 : __false typ=bool val=0f bnd=m
  173 : __either typ=bool bnd=m
  174 : __trgt typ=t13s_s2 val=0j bnd=m
  175 : __trgt typ=t13s_s2 val=0j bnd=m
  176 : __trgt typ=t13s_s2 val=0j bnd=m
  177 : __trgt typ=t13s_s2 val=0j bnd=m
  178 : __trgt typ=t21s_s2 val=0j bnd=m
  179 : __trgt typ=t13s_s2 val=0j bnd=m
  180 : __trgt typ=t13s_s2 val=0j bnd=m
  181 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrncpy {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (n.18 var=19) source ()  <29>;
    (s2.19 var=20) source ()  <30>;
    (__arg_s2__rstr.20 var=21) source ()  <31>;
    (s1.21 var=22) source ()  <32>;
    (__arg_s1__rstr.22 var=23) source ()  <33>;
    (result.23 var=24) source ()  <34>;
    (ns.24 var=25) source ()  <35>;
    (__la.26 var=27 stl=X off=1) inp ()  <37>;
    (__la.27 var=27) deassign (__la.26)  <38>;
    (__arg_s1.30 var=29 stl=X off=11) inp ()  <41>;
    (__arg_s1.31 var=29) deassign (__arg_s1.30)  <42>;
    (__arg_s2.33 var=30 stl=X off=12) inp ()  <44>;
    (__arg_s2.34 var=30) deassign (__arg_s2.33)  <45>;
    (__arg_n.36 var=31 stl=X off=13) inp ()  <47>;
    (__arg_n.37 var=31) deassign (__arg_n.36)  <48>;
    (__rd___sp.39 var=26) rd_res_reg (__R_SP.11 __sp.17)  <50>;
    (__ct_m20S0.40 var=32) const ()  <51>;
    (__tmp.42 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_m20S0.40)  <53>;
    (__R_SP.43 var=12 __sp.44 var=18) wr_res_reg (__tmp.42 __sp.17)  <54>;
    (__rd___sp.45 var=26) rd_res_reg (__R_SP.11 __sp.44)  <56>;
    (__ct_0t0.46 var=36) const ()  <57>;
    (__adr_n.48 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_0t0.46)  <59>;
    (__rd___sp.50 var=26) rd_res_reg (__R_SP.11 __sp.44)  <61>;
    (__rd___sp.55 var=26) rd_res_reg (__R_SP.11 __sp.44)  <66>;
    (__rd___sp.60 var=26) rd_res_reg (__R_SP.11 __sp.44)  <71>;
    (__rd___sp.65 var=26) rd_res_reg (__R_SP.11 __sp.44)  <76>;
    (__M_DMw.75 var=5 n.76 var=19) store (__arg_n.37 __adr_n.48 n.18)  <86>;
    call {
        () chess_separator_scheduler ()  <87>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.51 var=40) const ()  <62>;
    (__adr_s2.53 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.51)  <64>;
    (s2__rstr.77 var=60 __arg_s2__rstr.78 var=21) chain_tie (__arg_s2__rstr.20)  <88>;
    (__M_DMw.79 var=5 s2.80 var=20) store (__arg_s2.34 __adr_s2.53 s2.19)  <89>;
    call {
        () chess_separator_scheduler ()  <90>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.56 var=44) const ()  <67>;
    (__adr_s1.58 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.56)  <69>;
    (s1__rstr.81 var=61 __arg_s1__rstr.82 var=23) chain_tie (__arg_s1__rstr.22)  <91>;
    (__M_DMw.83 var=5 s1.84 var=22) store (__arg_s1.31 __adr_s1.58 s1.21)  <92>;
    call {
        () chess_separator_scheduler ()  <93>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.61 var=48) const ()  <72>;
    (__adr_result.63 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_12t0.61)  <74>;
    (__fch_s1.85 var=62) load (__M_DMw.4 __adr_s1.58 s1.84)  <94>;
    (__M_DMw.86 var=5 result.87 var=24) store (__fch_s1.85 __adr_result.63 result.23)  <95>;
    call {
        () chess_separator_scheduler ()  <96>;
    } #10 off=7
    #11 off=8
    (__ct_16t0.66 var=52) const ()  <77>;
    (__adr_ns.68 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_16t0.66)  <79>;
    (__fch_n.88 var=63) load (__M_DMw.4 __adr_n.48 n.76)  <97>;
    (__M_DMw.90 var=5 ns.91 var=25) store (__fch_n.88 __adr_ns.68 ns.24)  <99>;
    call {
        () chess_separator_scheduler ()  <100>;
    } #12 off=9
    #13 off=10
    (__fch_ns.92 var=65) load (__M_DMw.4 __adr_ns.68 ns.91)  <101>;
    call {
        () chess_separator_scheduler ()  <102>;
    } #14 off=11
    #15 off=12
    (__M_DMw.96 var=5 ns.97 var=25) store (__shv___fch_ns.558 __adr_ns.68 ns.91)  <106>;
    (__ct_m1.550 var=148) const ()  <558>;
    (__shv___fch_ns.558 var=156) __sint__pl___sint___sint (__fch_ns.92 __ct_m1.550)  <567>;
    call {
        () chess_separator_scheduler ()  <107>;
    } #16 off=13
    #17 off=14
    (__ct_1.93 var=66) const ()  <103>;
    (__ct_0.98 var=69) const ()  <108>;
    (__tmp.579 var=71) bool__eq___sint___sint (__fch_ns.92 __ct_0.98)  <633>;
    (__trgt.583 var=174) const ()  <650>;
    () void_br_bool_t13s_s2 (__tmp.579 __trgt.583)  <651>;
    (__either.584 var=173) undefined ()  <652>;
    if {
        {
            () if_expr (__either.584)  <141>;
        } #19
        {
            (__true.590 var=171) const ()  <660>;
        } #30
        {
            #21 off=15
            (__fch_s2.131 var=72) load (__M_DMw.4 __adr_s2.53 s2.80)  <142>;
            call {
                () chess_separator_scheduler ()  <143>;
            } #22 off=16
            #23 off=17
            (__M_DMw.135 var=5 s2.136 var=20) store (__shv___fch_s2.551 __adr_s2.53 s2.80)  <147>;
            (__shv___fch_s2.551 var=149) __Pvoid__pl___Pvoid___sint (__fch_s2.131 __ct_1.93)  <560>;
            call {
                () chess_separator_scheduler ()  <148>;
            } #24 off=18
            #25 off=19
            (__fch_s2__rstr.137 var=76) load (__M_DMb.2 __fch_s2.131 s2__rstr.77)  <149>;
            (__fch_s1.138 var=77) load (__M_DMw.4 __adr_s1.58 s1.84)  <150>;
            call {
                () chess_separator_scheduler ()  <151>;
            } #26 off=20
            #27 off=21
            (__M_DMw.142 var=5 s1.143 var=22) store (__shv___fch_s1.552 __adr_s1.58 s1.84)  <155>;
            (__shv___fch_s1.552 var=150) __Pvoid__pl___Pvoid___sint (__fch_s1.138 __ct_1.93)  <561>;
            call {
                () chess_separator_scheduler ()  <156>;
            } #28 off=22
            #29 off=23
            (__M_DMb.144 var=3 s1__rstr.145 var=61) store (__fch_s2__rstr.137 __fch_s1.138 s1__rstr.81)  <157>;
            (__tmp.577 var=84) bool__eq___sint___sint (__fch_s2__rstr.137 __ct_0.98)  <631>;
            (__trgt.591 var=177) const ()  <661>;
            () void_br_bool_t13s_s2 (__tmp.577 __trgt.591)  <662>;
            (__either.592 var=173) undefined ()  <663>;
        } #20
        {
            (s2.153 var=20) merge (s2.80 s2.136)  <165>;
            (s1.154 var=22) merge (s1.84 s1.143)  <166>;
            (s1__rstr.155 var=61) merge (s1__rstr.81 s1__rstr.145)  <167>;
            (__tmp.578 var=87) merge (__true.590 __either.592)  <632>;
        } #31
    } #18
    if {
        {
            () if_expr (__tmp.578)  <200>;
            () chess_frequent_else ()  <201>;
            () chess_rear_then ()  <664>;
        } #34
        {
            (__trgt.593 var=178) const ()  <665>;
            () void_j_t21s_s2 (__trgt.593)  <666>;
        } #59 off=40
        {
            #241 off=24
            (__trgt.585 var=175) const ()  <653>;
            (__trgt.588 var=176) const ()  <657>;
            do {
                {
                    (s2.195 var=20) entry (s2.298 s2.153)  <209>;
                    (s1.197 var=22) entry (s1.302 s1.154)  <211>;
                    (ns.200 var=25) entry (ns.308 ns.97)  <214>;
                    (s1__rstr.202 var=61) entry (s1__rstr.312 s1__rstr.155)  <216>;
                } #37
                {
                    #39 off=25
                    (__fch_ns.218 var=88) load (__M_DMw.4 __adr_ns.68 ns.200)  <232>;
                    call {
                        () chess_separator_scheduler ()  <233>;
                    } #40 off=26
                    #41 off=27
                    (__M_DMw.222 var=5 ns.223 var=25) store (__shv___fch_ns.555 __adr_ns.68 ns.200)  <237>;
                    (__shv___fch_ns.555 var=153) __sint__pl___sint___sint (__fch_ns.218 __ct_m1.550)  <564>;
                    call {
                        () chess_separator_scheduler ()  <238>;
                    } #42 off=28
                    #43 off=29
                    (__tmp.580 var=94) bool__eq___sint___sint (__fch_ns.218 __ct_0.98)  <634>;
                    () void_br_bool_t13s_s2 (__tmp.580 __trgt.585)  <654>;
                    (__either.586 var=173) undefined ()  <655>;
                    if {
                        {
                            () if_expr (__either.586)  <272>;
                        } #45
                        {
                            (__false.587 var=172) const ()  <656>;
                        } #56
                        {
                            #47 off=30
                            (__fch_s2.257 var=95) load (__M_DMw.4 __adr_s2.53 s2.195)  <273>;
                            call {
                                () chess_separator_scheduler ()  <274>;
                            } #48 off=31
                            #49 off=32
                            (__M_DMw.261 var=5 s2.262 var=20) store (__shv___fch_s2.553 __adr_s2.53 s2.195)  <278>;
                            (__shv___fch_s2.553 var=151) __Pvoid__pl___Pvoid___sint (__fch_s2.257 __ct_1.93)  <562>;
                            call {
                                () chess_separator_scheduler ()  <279>;
                            } #50 off=33
                            #51 off=34
                            (__fch_s2__rstr.263 var=99) load (__M_DMb.2 __fch_s2.257 s2__rstr.77)  <280>;
                            (__fch_s1.264 var=100) load (__M_DMw.4 __adr_s1.58 s1.197)  <281>;
                            call {
                                () chess_separator_scheduler ()  <282>;
                            } #52 off=35
                            #53 off=36
                            (__M_DMw.268 var=5 s1.269 var=22) store (__shv___fch_s1.554 __adr_s1.58 s1.197)  <286>;
                            (__shv___fch_s1.554 var=152) __Pvoid__pl___Pvoid___sint (__fch_s1.264 __ct_1.93)  <563>;
                            call {
                                () chess_separator_scheduler ()  <287>;
                            } #54 off=37
                            #55 off=38
                            (__M_DMb.270 var=3 s1__rstr.271 var=61) store (__fch_s2__rstr.263 __fch_s1.264 s1__rstr.202)  <288>;
                            (__tmp.275 var=107) bool__ne___sint___sint (__fch_s2__rstr.263 __ct_0.98)  <292>;
                            () void_br_bool_t13s_s2 (__tmp.275 __trgt.588)  <658>;
                            (__either.589 var=173) undefined ()  <659>;
                        } #46
                        {
                            (__tmp.278 var=110) merge (__false.587 __either.589)  <295>;
                            (s2.279 var=20) merge (s2.195 s2.262)  <296>;
                            (s1.280 var=22) merge (s1.197 s1.269)  <297>;
                            (s1__rstr.281 var=61) merge (s1__rstr.202 s1__rstr.271)  <298>;
                        } #57
                    } #44
                } #38
                {
                    () while_expr (__tmp.278)  <301>;
                    (s2.298 var=20 s2.299 var=20) exit (s2.279)  <309>;
                    (s1.302 var=22 s1.303 var=22) exit (s1.280)  <311>;
                    (ns.308 var=25 ns.309 var=25) exit (ns.223)  <314>;
                    (s1__rstr.312 var=61 s1__rstr.313 var=61) exit (s1__rstr.281)  <316>;
                } #58
            } #36 rng=[1,2147483647]
        } #35
        {
            (s2.344 var=20) merge (s2.153 s2.299)  <332>;
            (s1.345 var=22) merge (s1.154 s1.303)  <333>;
            (ns.346 var=25) merge (ns.97 ns.309)  <334>;
            (s1__rstr.347 var=61) merge (s1__rstr.155 s1__rstr.313)  <335>;
        } #60
    } #33
    #61 off=41
    (__fch_ns.351 var=111) load (__M_DMw.4 __adr_ns.68 ns.346)  <339>;
    call {
        () chess_separator_scheduler ()  <340>;
    } #62 off=42
    #63 off=43
    (__M_DMw.355 var=5 ns.356 var=25) store (__shv___fch_ns.559 __adr_ns.68 ns.346)  <344>;
    (__shv___fch_ns.559 var=157) __sint__pl___sint___sint (__fch_ns.351 __ct_m1.550)  <568>;
    call {
        () chess_separator_scheduler ()  <345>;
    } #64 off=44
    #183 off=45
    (__tmp.576 var=117) bool__ge___sint___sint (__ct_0.98 __fch_ns.351)  <630>;
    (__trgt.596 var=180) const ()  <670>;
    () void_br_bool_t13s_s2 (__tmp.576 __trgt.596)  <671>;
    (__either.597 var=173) undefined ()  <672>;
    if {
        {
            () if_expr (__either.597)  <379>;
            () chess_frequent_else ()  <380>;
            () chess_rear_then ()  <673>;
        } #67
        {
            (__trgt.598 var=181) const ()  <674>;
            () void_j_t21s_s2 (__trgt.598)  <675>;
        } #84 off=59
        {
            #242 off=46
            (__ct_0.420 var=118) const ()  <411>;
            (__trgt.594 var=179) const ()  <667>;
            do {
                {
                    (s1.399 var=22) entry (s1.457 s1.345)  <390>;
                    (ns.402 var=25) entry (ns.463 ns.356)  <393>;
                    (s1__rstr.404 var=61) entry (s1__rstr.467 s1__rstr.347)  <395>;
                } #70
                {
                    #72 off=47
                    (__fch_s1.422 var=120) load (__M_DMw.4 __adr_s1.58 s1.399)  <413>;
                    call {
                        () chess_separator_scheduler ()  <414>;
                    } #73 off=48
                    #74 off=49
                    (__M_DMw.426 var=5 s1.427 var=22) store (__shv___fch_s1.556 __adr_s1.58 s1.399)  <418>;
                    (__shv___fch_s1.556 var=154) __Pvoid__pl___Pvoid___sint (__fch_s1.422 __ct_1.93)  <565>;
                    call {
                        () chess_separator_scheduler ()  <419>;
                    } #75 off=50
                    #76 off=51
                    (__M_DMb.428 var=3 s1__rstr.429 var=61) store (__ct_0.420 __fch_s1.422 s1__rstr.404)  <420>;
                    call {
                        () chess_separator_scheduler ()  <421>;
                    } #77 off=52
                    #78 off=53
                    (__fch_ns.430 var=124) load (__M_DMw.4 __adr_ns.68 ns.402)  <422>;
                    call {
                        () chess_separator_scheduler ()  <423>;
                    } #79 off=54
                    #80 off=55
                    (__M_DMw.434 var=5 ns.435 var=25) store (__shv___fch_ns.557 __adr_ns.68 ns.402)  <427>;
                    (__shv___fch_ns.557 var=155) __sint__pl___sint___sint (__fch_ns.430 __ct_m1.550)  <566>;
                    call {
                        () chess_separator_scheduler ()  <428>;
                    } #81 off=56
                    #186 off=57
                    (__tmp.568 var=130) bool__lt___sint___sint (__ct_0.98 __fch_ns.430)  <594>;
                    () void_br_bool_t13s_s2 (__tmp.568 __trgt.594)  <668>;
                    (__either.595 var=173) undefined ()  <669>;
                } #71
                {
                    () while_expr (__either.595)  <432>;
                    (s1.457 var=22 s1.458 var=22) exit (s1.427)  <442>;
                    (ns.463 var=25 ns.464 var=25) exit (ns.435)  <445>;
                    (s1__rstr.467 var=61 s1__rstr.468 var=61) exit (s1__rstr.429)  <447>;
                } #83
            } #69 rng=[1,2147483647]
        } #68
        {
            (s1.499 var=22) merge (s1.345 s1.458)  <463>;
            (ns.500 var=25) merge (ns.356 ns.464)  <464>;
            (s1__rstr.501 var=61) merge (s1__rstr.347 s1__rstr.468)  <465>;
        } #85
    } #66
    #88 off=60 nxt=-2
    (__rt.504 var=28) load (__M_DMw.4 __adr_result.63 result.87)  <468>;
    (__rd___sp.507 var=26) rd_res_reg (__R_SP.11 __sp.44)  <471>;
    (__ct_20s0.508 var=132) const ()  <472>;
    (__tmp.510 var=134) __Pvoid__pl___Pvoid___sint (__rd___sp.507 __ct_20s0.508)  <474>;
    (__R_SP.511 var=12 __sp.512 var=18) wr_res_reg (__tmp.510 __sp.44)  <475>;
    () void___rts_jr_w32 (__la.27)  <476>;
    (__rt.513 var=28 stl=X off=10) assign (__rt.504)  <477>;
    () out (__rt.513)  <478>;
    () sink (__sp.512)  <484>;
    () sink (n.76)  <485>;
    () sink (s2.344)  <486>;
    () sink (s1.499)  <488>;
    () sink (result.87)  <490>;
    () sink (ns.500)  <491>;
    () sink (s2__rstr.77)  <525>;
    () sink (s1__rstr.501)  <527>;
} #0
0 : 'src/string.c';
----------
0 : (0,50:0,0);
3 : (0,50:60,0);
4 : (0,50:60,0);
5 : (0,50:34,0);
6 : (0,50:34,0);
7 : (0,50:14,0);
8 : (0,50:14,0);
9 : (0,53:19,4);
10 : (0,53:19,4);
11 : (0,54:20,5);
12 : (0,54:20,5);
13 : (0,55:4,7);
14 : (0,55:4,7);
15 : (0,55:4,8);
16 : (0,55:4,8);
17 : (0,55:4,8);
18 : (0,55:4,8);
20 : (0,55:4,9);
21 : (0,55:4,10);
22 : (0,55:4,10);
23 : (0,55:4,11);
24 : (0,55:4,11);
25 : (0,55:4,12);
26 : (0,55:4,12);
27 : (0,55:4,13);
28 : (0,55:4,13);
29 : (0,55:4,13);
30 : (0,55:4,14);
33 : (0,55:4,16);
35 : (0,55:4,17);
36 : (0,55:4,17);
38 : (0,55:35,17);
39 : (0,55:13,19);
40 : (0,55:13,19);
41 : (0,55:13,20);
42 : (0,55:13,20);
43 : (0,55:16,20);
44 : (0,55:16,20);
46 : (0,55:16,21);
47 : (0,55:31,22);
48 : (0,55:31,22);
49 : (0,55:31,23);
50 : (0,55:31,23);
51 : (0,55:23,24);
52 : (0,55:23,24);
53 : (0,55:23,25);
54 : (0,55:23,25);
55 : (0,55:16,25);
56 : (0,55:16,26);
59 : (0,55:4,30);
61 : (0,56:4,34);
62 : (0,56:4,34);
63 : (0,56:4,35);
64 : (0,56:4,35);
66 : (0,56:4,35);
68 : (0,56:4,36);
69 : (0,56:4,36);
71 : (0,57:14,36);
72 : (0,57:11,37);
73 : (0,57:11,37);
74 : (0,57:11,38);
75 : (0,57:11,38);
76 : (0,57:14,39);
77 : (0,57:14,39);
78 : (0,56:13,40);
79 : (0,56:13,40);
80 : (0,56:13,41);
81 : (0,56:13,41);
84 : (0,56:4,43);
88 : (0,58:4,46);
183 : (0,56:4,35);
186 : (0,56:16,41);
----------
50 : (0,50:6,0);
51 : (0,50:6,0);
53 : (0,50:6,0);
54 : (0,50:6,0);
56 : (0,50:67,0);
57 : (0,50:67,0);
59 : (0,50:67,0);
61 : (0,50:56,0);
62 : (0,50:56,0);
64 : (0,50:56,0);
66 : (0,50:30,0);
67 : (0,50:30,0);
69 : (0,50:30,0);
71 : (0,53:10,0);
72 : (0,53:10,0);
74 : (0,53:10,0);
76 : (0,54:14,0);
77 : (0,54:14,0);
79 : (0,54:14,0);
86 : (0,50:60,0);
87 : (0,50:60,0);
89 : (0,50:34,0);
90 : (0,50:34,0);
92 : (0,50:14,0);
93 : (0,50:14,0);
94 : (0,53:19,4);
95 : (0,53:19,4);
96 : (0,53:19,4);
97 : (0,54:19,5);
99 : (0,54:20,5);
100 : (0,54:20,5);
101 : (0,55:4,6);
102 : (0,55:4,7);
103 : (0,55:4,0);
106 : (0,55:4,7);
107 : (0,55:4,8);
108 : (0,55:4,0);
141 : (0,55:4,8);
142 : (0,55:4,9);
143 : (0,55:4,10);
147 : (0,55:4,10);
148 : (0,55:4,11);
149 : (0,55:4,11);
150 : (0,55:4,11);
151 : (0,55:4,12);
155 : (0,55:4,12);
156 : (0,55:4,13);
157 : (0,55:4,13);
165 : (0,55:4,15);
166 : (0,55:4,15);
167 : (0,55:4,15);
200 : (0,55:4,16);
209 : (0,55:4,17);
211 : (0,55:4,17);
214 : (0,55:4,17);
216 : (0,55:4,17);
232 : (0,55:11,18);
233 : (0,55:13,19);
237 : (0,55:11,19);
238 : (0,55:13,20);
272 : (0,55:16,20);
273 : (0,55:29,21);
274 : (0,55:31,22);
278 : (0,55:29,22);
279 : (0,55:31,23);
280 : (0,55:28,23);
281 : (0,55:21,23);
282 : (0,55:23,24);
286 : (0,55:21,24);
287 : (0,55:23,25);
288 : (0,55:20,25);
292 : (0,55:16,25);
295 : (0,55:16,27);
296 : (0,55:16,27);
297 : (0,55:16,27);
298 : (0,55:16,27);
301 : (0,55:4,28);
309 : (0,55:4,28);
311 : (0,55:4,28);
314 : (0,55:4,28);
316 : (0,55:4,28);
332 : (0,55:4,32);
333 : (0,55:4,32);
334 : (0,55:4,32);
335 : (0,55:4,32);
339 : (0,56:4,33);
340 : (0,56:4,34);
344 : (0,56:4,34);
345 : (0,56:4,35);
379 : (0,56:4,35);
390 : (0,56:4,36);
393 : (0,56:4,36);
395 : (0,56:4,36);
411 : (0,57:14,0);
413 : (0,57:9,36);
414 : (0,57:11,37);
418 : (0,57:9,37);
419 : (0,57:11,38);
420 : (0,57:8,38);
421 : (0,57:14,39);
422 : (0,56:11,39);
423 : (0,56:13,40);
427 : (0,56:11,40);
428 : (0,56:13,41);
432 : (0,56:4,41);
442 : (0,56:4,41);
445 : (0,56:4,41);
447 : (0,56:4,41);
463 : (0,56:4,45);
464 : (0,56:4,45);
465 : (0,56:4,45);
468 : (0,58:11,46);
471 : (0,58:4,0);
472 : (0,58:4,0);
474 : (0,58:4,0);
475 : (0,58:4,46);
476 : (0,58:4,46);
477 : (0,58:11,0);
558 : (0,55:4,0);
560 : (0,55:4,0);
561 : (0,55:4,0);
562 : (0,55:31,0);
563 : (0,55:23,0);
564 : (0,55:13,0);
565 : (0,57:11,0);
566 : (0,56:13,0);
567 : (0,55:4,0);
568 : (0,56:4,0);
594 : (0,56:16,41);
630 : (0,56:4,35);
631 : (0,55:4,13);
632 : (0,55:4,15);
633 : (0,55:4,8);
634 : (0,55:16,20);
651 : (0,55:4,8);
654 : (0,55:16,20);
658 : (0,55:4,28);
662 : (0,55:4,16);
668 : (0,56:4,41);
671 : (0,56:4,35);

