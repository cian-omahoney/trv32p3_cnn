
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:34:16 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/mlib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline double frexp(double, int *)
Ffrexp : user_defined, called {
    fnm : "frexp" 'double frexp(double, int *)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
    frm : ( l=12 );
}
****
!! extern double ldexp(double, int)
Fldexp : user_defined, called {
    fnm : "ldexp" 'double ldexp(double, int)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
!!  bool f64_eq(float64_t, float64_t)
Ff64_eq : user_defined, called {
    fnm : "f64_eq" 'bool f64_eq(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
***/

[
    0 : frexp typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : e typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__sint_DMb
   20 : x typ=w08 val=4t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   21 : __extDMb_w32 typ=w08 bnd=b stl=DMb
   22 : x_low typ=w08 bnd=B stl=DMb
   23 : x_high typ=w08 bnd=B stl=DMb
   24 : __rd___sp typ=w32 bnd=m
   25 : __la typ=w32 bnd=p tref=w32__
   27 : __rt_low typ=w32 bnd=m tref=__uint__
   28 : __rt_high typ=w32 bnd=m tref=__uint__
   30 : __arg_x_low typ=w32 bnd=m tref=__uint__
   31 : __arg_x_high typ=w32 bnd=m tref=__uint__
   32 : __arg_e typ=w32 bnd=p tref=__P__sint__
   33 : __ct_m12S0 typ=w32 val=-12S0 bnd=m
   35 : __tmp typ=w32 bnd=m
   37 : __ct_0t0 typ=w32 val=0t0 bnd=m
   39 : __adr_e typ=w32 bnd=m adro=19
   41 : __ct_4t0 typ=w32 val=4t0 bnd=m
   43 : __adr_x typ=w32 bnd=m adro=20
   47 : __fch_x_low typ=w32 bnd=m
   50 : __fch_x_high typ=w32 bnd=m
   53 : __tmp typ=bool bnd=m
   54 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   56 : __fch_e typ=w32 bnd=m
   61 : __fch_x_high typ=w32 bnd=m
   67 : __ct_2047 typ=w32 val=2047f bnd=m
   69 : __tmp typ=w32 bnd=m
   72 : __tmp typ=w32 bnd=m
   73 : __fch_e typ=w32 bnd=m
   75 : __fch_x_low typ=w32 bnd=m
   78 : __fch_x_high typ=w32 bnd=m
   79 : __record_low typ=w32 bnd=m tref=__uint__
   80 : __record_high typ=w32 bnd=m tref=__uint__
   83 : __fch_e typ=w32 bnd=m
   84 : __fch___extDMb_w32 typ=w32 bnd=m
   85 : __tmp typ=w32 bnd=m
   88 : ldexp typ=t21s_s2 val=0r bnd=m
   89 : __link typ=w32 bnd=m
   91 : __tmp typ=w32 bnd=m
   92 : __tmp typ=w32 bnd=m
   98 : __fch_x_low typ=w32 bnd=m
  101 : __fch_x_high typ=w32 bnd=m
  102 : __ct_12s0 typ=w32 val=12s0 bnd=m
  104 : __tmp typ=w32 bnd=m
  111 : __ct_m1022 typ=w32 val=-1022f bnd=m
  114 : __ct_8t0 typ=w32 val=8t0 bnd=m
  115 : __adr_x typ=w32 bnd=m adro=20
  116 : __adr_x typ=w32 bnd=m adro=20
  117 : __adr_x typ=w32 bnd=m adro=20
  118 : __adr_x typ=w32 bnd=m adro=20
  119 : __adr_x typ=w32 bnd=m adro=20
  120 : __adr_x typ=w32 bnd=m adro=20
  126 : a_low typ=w32 bnd=m tref=__uint__
  127 : a_high typ=w32 bnd=m tref=__uint__
  128 : b_low typ=w32 bnd=m tref=__uint__
  129 : b_high typ=w32 bnd=m tref=__uint__
  130 : f64_eq typ=t21s_s2 val=0r bnd=m
  131 : __link typ=w32 bnd=m
  132 : __tmp typ=w32 bnd=m
  149 : __tmp typ=w32 bnd=m
  162 : __ct_20 typ=w32 val=20f bnd=m
  182 : __either typ=bool bnd=m
  183 : __trgt typ=t13s_s2 val=0j bnd=m
  184 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ffrexp {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (e.18 var=19) source ()  <29>;
    (__extDMb_w32.20 var=21) source ()  <31>;
    (x_low.21 var=22) source ()  <32>;
    (x_high.22 var=23) source ()  <33>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (__arg_x_low.33 var=30 stl=X off=12) inp ()  <44>;
    (__arg_x_low.34 var=30) deassign (__arg_x_low.33)  <45>;
    (__arg_x_high.37 var=31 stl=X off=13) inp ()  <48>;
    (__arg_x_high.38 var=31) deassign (__arg_x_high.37)  <49>;
    (__arg_e.41 var=32 stl=X off=14) inp ()  <52>;
    (__arg_e.42 var=32) deassign (__arg_e.41)  <53>;
    (__rd___sp.44 var=24) rd_res_reg (__R_SP.11 __sp.17)  <55>;
    (__ct_m12S0.45 var=33) const ()  <56>;
    (__tmp.47 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_m12S0.45)  <58>;
    (__R_SP.48 var=12 __sp.49 var=18) wr_res_reg (__tmp.47 __sp.17)  <59>;
    (__rd___sp.50 var=24) rd_res_reg (__R_SP.11 __sp.49)  <61>;
    (__ct_0t0.51 var=37) const ()  <62>;
    (__adr_e.53 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_0t0.51)  <64>;
    (__rd___sp.55 var=24) rd_res_reg (__R_SP.11 __sp.49)  <66>;
    (__M_DMw.60 var=5 e.61 var=19) store (__arg_e.42 __adr_e.53 e.18)  <71>;
    call {
        () chess_separator_scheduler ()  <72>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.56 var=41) const ()  <67>;
    (__adr_x.58 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_4t0.56)  <69>;
    (__M_DMw.63 var=5 x_low.64 var=22) store (__arg_x_low.34 __adr_x.58 x_low.21)  <74>;
    (__M_DMw.69 var=5 x_high.70 var=23) store (__arg_x_high.38 __adr_x.222 x_high.22)  <79>;
    (__ct_8t0.218 var=114) const ()  <267>;
    (__adr_x.222 var=118) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.218)  <272>;
    call {
        () chess_separator_scheduler ()  <80>;
    } #6 off=3
    #33 off=4
    (__fch_x_low.72 var=47) load (__M_DMw.4 __adr_x.58 x_low.64)  <82>;
    (__fch_x_high.77 var=50) load (__M_DMw.4 __adr_x.223 x_high.70)  <87>;
    (__ct_0.99 var=54) const ()  <110>;
    (__adr_x.223 var=119) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.218)  <273>;
    (f64_eq.233 var=130) const ()  <297>;
    (__link.234 var=131) w32_jal_t21s_s2 (f64_eq.233)  <298>;
    call {
        (a_low.236 var=126 stl=X off=11) assign (__fch_x_low.72)  <300>;
        (a_high.237 var=127 stl=X off=12) assign (__fch_x_high.77)  <301>;
        (b_low.238 var=128 stl=X off=13) assign (__ct_0.99)  <302>;
        (b_high.239 var=129 stl=X off=14) assign (__ct_0.99)  <303>;
        (__link.240 var=131 stl=X off=1) assign (__link.234)  <304>;
        (__tmp.241 var=132 stl=X off=10) Ff64_eq (__link.240 a_low.236 a_high.237 b_low.238 b_high.239)  <305>;
        (__tmp.242 var=132) deassign (__tmp.241)  <306>;
    } #34 off=5
    #35 off=6
    (__tmp.243 var=53) bool__ne___sint___sint (__tmp.242 __ct_0.99)  <307>;
    (__trgt.294 var=183) const ()  <459>;
    () void_br_bool_t13s_s2 (__tmp.243 __trgt.294)  <460>;
    (__either.295 var=182) undefined ()  <461>;
    if {
        {
            () if_expr (__either.295)  <109>;
        } #9
        {
            (__fch_e.101 var=56) load (__M_DMw.4 __adr_e.53 e.61)  <112>;
            (__M_DMw.102 var=5 __extDMb_w32.103 var=21) store (__ct_0.99 __fch_e.101 __extDMb_w32.20)  <113>;
        } #11 off=12
        {
            #77 off=7
            (__fch_x_high.110 var=61) load (__M_DMw.4 __adr_x.219 x_high.70)  <121>;
            (__ct_2047.117 var=67) const ()  <128>;
            (__tmp.119 var=69) __sint__ad___sint___sint (__tmp.259 __ct_2047.117)  <130>;
            (__tmp.122 var=72) __sint__pl___sint___sint (__tmp.119 __ct_m1022.211)  <133>;
            (__fch_e.123 var=73) load (__M_DMw.4 __adr_e.53 e.61)  <134>;
            (__M_DMw.124 var=5 __extDMb_w32.125 var=21) store (__tmp.122 __fch_e.123 __extDMb_w32.20)  <135>;
            (__ct_m1022.211 var=111) const ()  <259>;
            (__adr_x.219 var=115) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.218)  <269>;
            (__tmp.259 var=149) __sint__rs___sint___sint (__fch_x_high.110 __ct_20.276)  <328>;
            (__ct_20.276 var=162) const ()  <364>;
            call {
                () chess_separator_scheduler ()  <136>;
            } #15 off=8
            #16 off=9
            (__fch_x_low.127 var=75) load (__M_DMw.4 __adr_x.58 x_low.64)  <138>;
            (__fch_x_high.132 var=78) load (__M_DMw.4 __adr_x.220 x_high.70)  <143>;
            (__fch_e.140 var=83) load (__M_DMw.4 __adr_e.53 e.61)  <151>;
            (__fch___extDMb_w32.141 var=84) load (__M_DMw.4 __fch_e.140 __extDMb_w32.125)  <152>;
            (__tmp.142 var=85) __sint__mi___sint___sint (__ct_0.99 __fch___extDMb_w32.141)  <153>;
            (ldexp.146 var=88) const ()  <157>;
            (__link.147 var=89) w32_jal_t21s_s2 (ldexp.146)  <158>;
            (__adr_x.220 var=116) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.218)  <270>;
            call {
                (__record_low.135 var=79 stl=X off=12) assign (__fch_x_low.127)  <146>;
                (__record_high.137 var=80 stl=X off=13) assign (__fch_x_high.132)  <148>;
                (__tmp.143 var=85 stl=X off=14) assign (__tmp.142)  <154>;
                (__link.148 var=89 stl=X off=1) assign (__link.147)  <159>;
                (__tmp.150 var=91 stl=X off=10 __tmp.154 var=92 stl=X off=11) Fldexp (__link.148 __record_low.135 __record_high.137 __tmp.143)  <160>;
                (__tmp.151 var=91) deassign (__tmp.150)  <162>;
                (__tmp.155 var=92) deassign (__tmp.154)  <165>;
            } #17 off=10
            #18 off=11
            (__M_DMw.159 var=5 x_low.160 var=22) store (__tmp.151 __adr_x.58 x_low.64)  <169>;
            (__M_DMw.165 var=5 x_high.166 var=23) store (__tmp.155 __adr_x.221 x_high.70)  <174>;
            (__adr_x.221 var=117) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.218)  <271>;
            (__trgt.296 var=184) const ()  <462>;
            () void_j_t21s_s2 (__trgt.296)  <463>;
        } #13
        {
            (__extDMb_w32.167 var=21) merge (__extDMb_w32.103 __extDMb_w32.125)  <176>;
            (x_low.168 var=22) merge (x_low.64 x_low.160)  <177>;
            (x_high.169 var=23) merge (x_high.70 x_high.166)  <178>;
        } #20
    } #8
    #23 off=13 nxt=-2
    (__fch_x_low.171 var=98) load (__M_DMw.4 __adr_x.58 x_low.168)  <180>;
    (__fch_x_high.176 var=101) load (__M_DMw.4 __adr_x.224 x_high.169)  <185>;
    (__rd___sp.178 var=24) rd_res_reg (__R_SP.11 __sp.49)  <187>;
    (__ct_12s0.179 var=102) const ()  <188>;
    (__tmp.181 var=104) __Pvoid__pl___Pvoid___sint (__rd___sp.178 __ct_12s0.179)  <190>;
    (__R_SP.182 var=12 __sp.183 var=18) wr_res_reg (__tmp.181 __sp.49)  <191>;
    () void___rts_jr_w32 (__la.25)  <192>;
    (__rt_low.185 var=27 stl=X off=10) assign (__fch_x_low.171)  <194>;
    () out (__rt_low.185)  <195>;
    (__rt_high.187 var=28 stl=X off=11) assign (__fch_x_high.176)  <197>;
    () out (__rt_high.187)  <198>;
    () sink (__sp.183)  <206>;
    () sink (e.61)  <207>;
    () sink (__extDMb_w32.167)  <209>;
    () sink (x_low.168)  <210>;
    () sink (x_high.169)  <211>;
    (__adr_x.224 var=120) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.218)  <274>;
} #0
0 : 'include/math.h';
----------
0 : (0,99:21,0);
3 : (0,99:31,0);
4 : (0,99:31,0);
5 : (0,99:21,0);
6 : (0,99:21,0);
8 : (0,101:4,3);
11 : (0,102:11,5);
13 : (0,103:9,6);
15 : (0,104:11,7);
16 : (0,105:20,7);
17 : (0,105:12,7);
18 : (0,105:10,8);
23 : (0,107:4,11);
33 : (0,101:10,3);
34 : (0,101:10,3);
35 : (0,101:10,3);
77 : (0,104:8,6);
----------
55 : (0,99:21,0);
56 : (0,99:21,0);
58 : (0,99:21,0);
59 : (0,99:21,0);
61 : (0,99:36,0);
62 : (0,99:36,0);
64 : (0,99:36,0);
66 : (0,99:28,0);
67 : (0,99:28,0);
69 : (0,99:28,0);
71 : (0,99:31,0);
72 : (0,99:31,0);
74 : (0,99:21,0);
79 : (0,99:21,0);
80 : (0,99:21,0);
82 : (0,101:8,3);
87 : (0,101:8,3);
109 : (0,101:4,3);
110 : (0,102:13,0);
112 : (0,102:9,4);
113 : (0,102:8,4);
121 : (0,104:29,6);
128 : (0,104:41,0);
130 : (0,104:39,6);
133 : (0,104:48,6);
134 : (0,104:9,6);
135 : (0,104:8,6);
136 : (0,104:11,7);
138 : (0,105:18,7);
143 : (0,105:18,7);
146 : (0,105:18,0);
148 : (0,105:18,0);
151 : (0,105:22,7);
152 : (0,105:21,7);
153 : (0,105:20,7);
154 : (0,105:20,0);
158 : (0,105:12,7);
159 : (0,105:12,0);
160 : (0,105:12,7);
169 : (0,105:8,7);
174 : (0,105:8,7);
176 : (0,101:4,10);
177 : (0,101:4,10);
178 : (0,101:4,10);
180 : (0,107:11,11);
185 : (0,107:11,11);
187 : (0,107:4,0);
188 : (0,107:4,0);
190 : (0,107:4,0);
191 : (0,107:4,11);
192 : (0,107:4,11);
194 : (0,107:11,0);
197 : (0,107:11,0);
259 : (0,104:48,0);
267 : (0,99:28,0);
297 : (0,101:10,0);
298 : (0,101:10,3);
300 : (0,101:10,3);
301 : (0,101:10,3);
302 : (0,101:10,3);
303 : (0,101:10,3);
304 : (0,101:10,3);
305 : (0,101:10,3);
306 : (0,101:10,3);
307 : (0,101:10,3);
328 : (0,104:32,6);
364 : (0,104:32,0);
460 : (0,101:4,3);

