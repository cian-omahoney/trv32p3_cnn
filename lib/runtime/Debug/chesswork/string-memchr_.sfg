
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:30:47 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  void *memchr(const void *, int, size_t)
Fmemchr : user_defined, called {
    fnm : "memchr" 'void *memchr(const void *, int, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=20 );
}
****
***/

[
    0 : memchr typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : n typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   20 : c typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   21 : s typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__Pvoid_DMb
   22 : r typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__uchar_DMb
   23 : d typ=w08 val=16t0 bnd=a sz=1 algn=1 stl=DMb lscp=21 tref=__uchar_DMb
   24 : __extPMb_void typ=u08 bnd=b stl=PMb
   25 : __rd___sp typ=w32 bnd=m
   26 : __la typ=w32 bnd=p tref=w32__
   27 : __rt typ=w32 bnd=p tref=__Pvoid__
   28 : __arg_s typ=w32 bnd=p tref=__Pvoid__
   29 : __arg_c typ=w32 bnd=p tref=__sint__
   30 : __arg_n typ=w32 bnd=p tref=size_t__
   31 : __ct_m20S0 typ=w32 val=-20S0 bnd=m
   33 : __tmp typ=w32 bnd=m
   35 : __ct_0t0 typ=w32 val=0t0 bnd=m
   37 : __adr_n typ=w32 bnd=m adro=19
   39 : __ct_4t0 typ=w32 val=4t0 bnd=m
   41 : __adr_c typ=w32 bnd=m adro=20
   43 : __ct_8t0 typ=w32 val=8t0 bnd=m
   45 : __adr_s typ=w32 bnd=m adro=21
   47 : __ct_12t0 typ=w32 val=12t0 bnd=m
   49 : __adr_r typ=w32 bnd=m adro=22
   51 : __ct_16t0 typ=w32 val=16t0 bnd=m
   53 : __adr_d typ=w32 bnd=m adro=23
   56 : __fch_s typ=w32 bnd=m
   57 : __fch_n typ=w32 bnd=m
   61 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   63 : __tmp typ=bool bnd=m
   64 : __fch_r typ=w32 bnd=m
   65 : __ct_1 typ=w32 val=1f bnd=m
   68 : __fchtmp typ=__uchar bnd=m
   69 : __fch_d typ=__uchar bnd=m
   71 : __fch_c typ=w32 bnd=m
   72 : __tmp typ=__uchar bnd=m
   74 : __tmp typ=bool bnd=m
   75 : __fch_r typ=w32 bnd=m
   79 : __ct_20s0 typ=w32 val=20s0 bnd=m
   81 : __tmp typ=w32 bnd=m
   82 : __fch_n typ=w32 bnd=m
   88 : __tmp typ=bool bnd=m
   94 : __tmp typ=w32 bnd=m
  102 : __ct_4294967295 typ=w32 val=-1f bnd=m
  104 : __shv___fch_r typ=w32 bnd=m
  105 : __shv___fch_n typ=w32 bnd=m
  106 : __shv___fch_n typ=w32 bnd=m
  115 : __either typ=bool bnd=m
  116 : __trgt typ=t13s_s2 val=0j bnd=m
  117 : __trgt typ=t13s_s2 val=0j bnd=m
  118 : __trgt typ=t13s_s2 val=0j bnd=m
  119 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fmemchr {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (n.18 var=19) source ()  <29>;
    (c.19 var=20) source ()  <30>;
    (s.20 var=21) source ()  <31>;
    (r.21 var=22) source ()  <32>;
    (d.22 var=23) source ()  <33>;
    (__extPMb_void.23 var=24) source ()  <34>;
    (__la.25 var=26 stl=X off=1) inp ()  <36>;
    (__la.26 var=26) deassign (__la.25)  <37>;
    (__arg_s.29 var=28 stl=X off=11) inp ()  <40>;
    (__arg_s.30 var=28) deassign (__arg_s.29)  <41>;
    (__arg_c.32 var=29 stl=X off=12) inp ()  <43>;
    (__arg_c.33 var=29) deassign (__arg_c.32)  <44>;
    (__arg_n.35 var=30 stl=X off=13) inp ()  <46>;
    (__arg_n.36 var=30) deassign (__arg_n.35)  <47>;
    (__rd___sp.38 var=25) rd_res_reg (__R_SP.11 __sp.17)  <49>;
    (__ct_m20S0.39 var=31) const ()  <50>;
    (__tmp.41 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.38 __ct_m20S0.39)  <52>;
    (__R_SP.42 var=12 __sp.43 var=18) wr_res_reg (__tmp.41 __sp.17)  <53>;
    (__rd___sp.44 var=25) rd_res_reg (__R_SP.11 __sp.43)  <55>;
    (__ct_0t0.45 var=35) const ()  <56>;
    (__adr_n.47 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_0t0.45)  <58>;
    (__rd___sp.49 var=25) rd_res_reg (__R_SP.11 __sp.43)  <60>;
    (__rd___sp.54 var=25) rd_res_reg (__R_SP.11 __sp.43)  <65>;
    (__rd___sp.59 var=25) rd_res_reg (__R_SP.11 __sp.43)  <70>;
    (__rd___sp.64 var=25) rd_res_reg (__R_SP.11 __sp.43)  <75>;
    (__M_DMw.71 var=5 n.72 var=19) store (__arg_n.36 __adr_n.47 n.18)  <82>;
    call {
        () chess_separator_scheduler ()  <83>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.50 var=39) const ()  <61>;
    (__adr_c.52 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.49 __ct_4t0.50)  <63>;
    (__M_DMw.73 var=5 c.74 var=20) store (__arg_c.33 __adr_c.52 c.19)  <84>;
    call {
        () chess_separator_scheduler ()  <85>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.55 var=43) const ()  <66>;
    (__adr_s.57 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.54 __ct_8t0.55)  <68>;
    (__M_DMw.75 var=5 s.76 var=21) store (__arg_s.30 __adr_s.57 s.20)  <86>;
    call {
        () chess_separator_scheduler ()  <87>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.60 var=47) const ()  <71>;
    (__adr_r.62 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.59 __ct_12t0.60)  <73>;
    (__fch_s.77 var=56) load (__M_DMw.4 __adr_s.57 s.76)  <88>;
    (__M_DMw.78 var=5 r.79 var=22) store (__fch_s.77 __adr_r.62 r.21)  <89>;
    call {
        () chess_separator_scheduler ()  <90>;
    } #10 off=7
    #11 off=8
    (__fch_n.80 var=57) load (__M_DMw.4 __adr_n.47 n.72)  <91>;
    call {
        () chess_separator_scheduler ()  <92>;
    } #12 off=9
    #13 off=10
    (__M_DMw.84 var=5 n.85 var=19) store (__shv___fch_n.358 __adr_n.47 n.72)  <96>;
    (__ct_4294967295.354 var=102) const ()  <400>;
    (__shv___fch_n.358 var=106) __uint__pl___uint___uint (__fch_n.80 __ct_4294967295.354)  <406>;
    call {
        () chess_separator_scheduler ()  <97>;
    } #14 off=11
    #15 off=12
    (__ct_0.86 var=61) const ()  <98>;
    (__ct_20s0.181 var=79) const ()  <197>;
    (__tmp.364 var=63) bool__eq___uint___uint (__fch_n.80 __ct_0.86)  <440>;
    (__trgt.371 var=118) const ()  <463>;
    () void_br_bool_t13s_s2 (__tmp.364 __trgt.371)  <464>;
    (__either.372 var=115) undefined ()  <465>;
    if {
        {
            () if_expr (__either.372)  <125>;
            () chess_frequent_else ()  <126>;
            () chess_rear_then ()  <466>;
        } #17
        {
            (__trgt.373 var=119) const ()  <467>;
            () void_j_t21s_s2 (__trgt.373)  <468>;
        } #43 off=29
        {
            #51 off=13
            (__ct_16t0.65 var=51) const ()  <76>;
            (__adr_d.67 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.64 __ct_16t0.65)  <78>;
            (__ct_1.138 var=65) const ()  <153>;
            (__fch_c.148 var=71) load (__M_DMw.4 __adr_c.52 c.74)  <163>;
            (__tmp.149 var=72) __uchar___uchar___sint (__fch_c.148)  <164>;
            (__rd___sp.180 var=25) rd_res_reg (__R_SP.11 __sp.43)  <196>;
            (__tmp.183 var=81) __Pvoid__pl___Pvoid___sint (__rd___sp.180 __ct_20s0.181)  <199>;
            (__trgt.367 var=116) const ()  <455>;
            (__trgt.369 var=117) const ()  <460>;
            do {
                {
                    (n.119 var=19) entry (n.256 n.85)  <133>;
                    (r.122 var=22) entry (r.262 r.79)  <136>;
                    (d.123 var=23) entry (d.264 d.22)  <137>;
                } #20
                {
                    #22 off=14
                    (__fch_r.137 var=64) load (__M_DMw.4 __adr_r.62 r.122)  <151>;
                    call {
                        () chess_separator_scheduler ()  <152>;
                    } #23 off=15
                    #24 off=16
                    (__M_DMw.141 var=5 r.142 var=22) store (__shv___fch_r.356 __adr_r.62 r.122)  <156>;
                    (__shv___fch_r.356 var=104) __Pvoid__pl___Pvoid___sint (__fch_r.137 __ct_1.138)  <404>;
                    call {
                        () chess_separator_scheduler ()  <157>;
                    } #25 off=17
                    #26 off=18
                    (__fchtmp.143 var=68) load (__M_DMb.2 __fch_r.137 __extDMb.16 __extPMb_void.23)  <158>;
                    (__M_DMb.144 var=3 d.145 var=23) store (__fchtmp.143 __adr_d.67 d.123)  <159>;
                    call {
                        () chess_separator_scheduler ()  <160>;
                    } #27 off=19
                    #28 off=20
                    (__fch_d.146 var=69) load (__M_DMb.2 __adr_d.67 d.145)  <161>;
                    (__tmp.151 var=74) bool__eq___sint___sint (__fch_d.146 __tmp.149)  <166>;
                    () void_br_bool_t13s_s2 (__tmp.151 __trgt.367)  <456>;
                    (__either.368 var=115) undefined ()  <457>;
                    if {
                        {
                            () if_expr (__either.368)  <191>;
                            () chess_frequent_else ()  <458>;
                            () chess_rear_then ()  <459>;
                        } #30
                        {
                            (__fch_r.176 var=75) load (__M_DMw.4 __adr_r.62 r.142)  <192>;
                            (__rt.179 var=27) __Pvoid__pl___Pvoid___sint (__fch_r.176 __ct_4294967295.354)  <195>;
                            (__R_SP.184 var=12 __sp.185 var=18) wr_res_reg (__tmp.183 __sp.43)  <200>;
                            () void___rts_jr_w32 (__la.26)  <201>;
                            (__rt.186 var=27 stl=X off=10) assign (__rt.179)  <202>;
                            () out (__rt.186)  <203>;
                            () sink (__sp.185)  <209>;
                            () sink (n.119)  <210>;
                            () sink (c.74)  <211>;
                            () sink (s.76)  <212>;
                            () sink (r.142)  <213>;
                            () sink (d.145)  <214>;
                        } #34 off=22 nxt=-2
                        {
                        } #35 off=21
                        {
                        } #36
                    } #29
                    #37 off=23
                    (__fch_n.235 var=82) load (__M_DMw.4 __adr_n.47 n.119)  <264>;
                    call {
                        () chess_separator_scheduler ()  <265>;
                    } #38 off=24
                    #39 off=25
                    (__M_DMw.239 var=5 n.240 var=19) store (__shv___fch_n.357 __adr_n.47 n.119)  <269>;
                    (__shv___fch_n.357 var=105) __uint__pl___uint___uint (__fch_n.235 __ct_4294967295.354)  <405>;
                    call {
                        () chess_separator_scheduler ()  <270>;
                    } #40 off=26
                    #41 off=27
                    (__tmp.243 var=88) bool__ne___uint___uint (__fch_n.235 __ct_0.86)  <273>;
                    () void_br_bool_t13s_s2 (__tmp.243 __trgt.369)  <461>;
                    (__either.370 var=115) undefined ()  <462>;
                } #21
                {
                    () while_expr (__either.370)  <274>;
                    (n.256 var=19 n.257 var=19) exit (n.240)  <281>;
                    (r.262 var=22 r.263 var=22) exit (r.142)  <284>;
                    (d.264 var=23 d.265 var=23) exit (d.145)  <285>;
                } #42
            } #19 rng=[1,2147483647]
        } #18
        {
            (n.298 var=19) merge (n.85 n.257)  <305>;
            (r.301 var=22) merge (r.79 r.263)  <308>;
            (d.302 var=23) merge (d.22 d.265)  <309>;
        } #44
    } #16
    #47 off=30 nxt=-2
    (__rd___sp.319 var=25) rd_res_reg (__R_SP.11 __sp.43)  <326>;
    (__tmp.322 var=94) __Pvoid__pl___Pvoid___sint (__rd___sp.319 __ct_20s0.181)  <329>;
    (__R_SP.323 var=12 __sp.324 var=18) wr_res_reg (__tmp.322 __sp.43)  <330>;
    () void___rts_jr_w32 (__la.26)  <331>;
    (__rt.325 var=27 stl=X off=10) assign (__ct_0.86)  <332>;
    () out (__rt.325)  <333>;
    () sink (__sp.324)  <339>;
    () sink (n.298)  <340>;
    () sink (c.74)  <341>;
    () sink (s.76)  <342>;
    () sink (r.301)  <343>;
    () sink (d.302)  <344>;
} #0
0 : 'src/string.c';
----------
0 : (0,136:0,0);
3 : (0,136:35,0);
4 : (0,136:35,0);
5 : (0,136:28,0);
6 : (0,136:28,0);
7 : (0,136:13,0);
8 : (0,136:13,0);
9 : (0,139:23,4);
10 : (0,139:23,4);
11 : (0,140:4,6);
12 : (0,140:4,6);
13 : (0,140:4,7);
14 : (0,140:4,7);
15 : (0,140:4,7);
16 : (0,140:4,7);
18 : (0,140:4,8);
19 : (0,140:4,8);
21 : (0,140:16,8);
22 : (0,141:28,9);
23 : (0,141:28,9);
24 : (0,141:28,10);
25 : (0,141:28,10);
26 : (0,141:26,10);
27 : (0,141:26,10);
28 : (0,142:14,11);
29 : (0,142:8,11);
34 : (0,143:12,12);
35 : (0,142:8,15);
37 : (0,140:12,20);
38 : (0,140:12,20);
39 : (0,140:12,21);
40 : (0,140:12,21);
41 : (0,140:4,21);
43 : (0,140:4,23);
47 : (0,145:4,26);
----------
49 : (0,136:6,0);
50 : (0,136:6,0);
52 : (0,136:6,0);
53 : (0,136:6,0);
55 : (0,136:42,0);
56 : (0,136:42,0);
58 : (0,136:42,0);
60 : (0,136:32,0);
61 : (0,136:32,0);
63 : (0,136:32,0);
65 : (0,136:25,0);
66 : (0,136:25,0);
68 : (0,136:25,0);
70 : (0,139:19,0);
71 : (0,139:19,0);
73 : (0,139:19,0);
75 : (0,141:22,0);
76 : (0,141:22,0);
78 : (0,141:22,0);
82 : (0,136:35,0);
83 : (0,136:35,0);
84 : (0,136:28,0);
85 : (0,136:28,0);
86 : (0,136:13,0);
87 : (0,136:13,0);
88 : (0,139:39,4);
89 : (0,139:23,4);
90 : (0,139:23,4);
91 : (0,140:4,5);
92 : (0,140:4,6);
96 : (0,140:4,6);
97 : (0,140:4,7);
98 : (0,140:4,0);
125 : (0,140:4,7);
133 : (0,140:4,8);
136 : (0,140:4,8);
137 : (0,140:4,8);
151 : (0,141:27,8);
152 : (0,141:28,9);
153 : (0,141:28,0);
156 : (0,141:27,9);
157 : (0,141:28,10);
158 : (0,141:26,10);
159 : (0,141:26,10);
160 : (0,141:26,10);
161 : (0,142:12,11);
163 : (0,142:32,11);
164 : (0,142:17,11);
166 : (0,142:14,11);
191 : (0,142:8,11);
192 : (0,143:19,12);
195 : (0,143:20,12);
196 : (0,143:12,0);
197 : (0,143:12,0);
199 : (0,143:12,0);
200 : (0,143:12,12);
201 : (0,143:12,12);
202 : (0,143:20,0);
264 : (0,140:11,19);
265 : (0,140:12,20);
269 : (0,140:11,20);
270 : (0,140:12,21);
273 : (0,140:4,21);
274 : (0,140:4,21);
281 : (0,140:4,21);
284 : (0,140:4,21);
285 : (0,140:4,21);
305 : (0,140:4,25);
308 : (0,140:4,25);
309 : (0,140:4,25);
326 : (0,145:4,0);
329 : (0,145:4,0);
330 : (0,145:4,26);
331 : (0,145:4,26);
332 : (0,145:11,0);
400 : (0,140:4,0);
404 : (0,141:28,0);
405 : (0,140:12,0);
406 : (0,140:4,0);
440 : (0,140:4,7);
456 : (0,142:8,11);
461 : (0,140:4,21);
464 : (0,140:4,7);

