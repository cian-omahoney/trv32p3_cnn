
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:58:59 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern double floor(double)
Ffloor : user_defined, called {
    fnm : "floor" 'double floor(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=28 );
}
****
!!  bool f64_lt(float64_t, float64_t)
Ff64_lt : user_defined, called {
    fnm : "f64_lt" 'bool f64_lt(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : floor typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : x typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   20 : i0 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   21 : i1 typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   22 : j0 typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   23 : i typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=u_int32_t_DMb
   24 : j typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=u_int32_t_DMb
   25 : x_low typ=w08 bnd=B stl=DMb
   26 : x_high typ=w08 bnd=B stl=DMb
   27 : __rd___sp typ=w32 bnd=m
   28 : __la typ=w32 bnd=p tref=w32__
   30 : __rt_low typ=w32 bnd=m tref=__uint__
   31 : __rt_high typ=w32 bnd=m tref=__uint__
   33 : __arg_x_low typ=w32 bnd=m tref=__uint__
   34 : __arg_x_high typ=w32 bnd=m tref=__uint__
   35 : __ct_m28S0 typ=w32 val=-28S0 bnd=m
   37 : __tmp typ=w32 bnd=m
   39 : __ct_0t0 typ=w32 val=0t0 bnd=m
   41 : __adr_x typ=w32 bnd=m adro=19
   43 : __ct_8t0 typ=w32 val=8t0 bnd=m
   45 : __adr_i0 typ=w32 bnd=m adro=20
   47 : __ct_12t0 typ=w32 val=12t0 bnd=m
   49 : __adr_i1 typ=w32 bnd=m adro=21
   51 : __ct_16t0 typ=w32 val=16t0 bnd=m
   53 : __adr_j0 typ=w32 bnd=m adro=22
   55 : __ct_20t0 typ=w32 val=20t0 bnd=m
   57 : __adr_i typ=w32 bnd=m adro=23
   59 : __ct_24t0 typ=w32 val=24t0 bnd=m
   61 : __adr_j typ=w32 bnd=m adro=24
   73 : __fch_x_high typ=w32 bnd=m
   80 : __fch_x_low typ=w32 bnd=m
   86 : __fch_i0 typ=w32 bnd=m
   87 : __ct_20 typ=w32 val=20f bnd=m
   89 : __tmp typ=w32 bnd=m
   90 : __ct_2047 typ=w32 val=2047f bnd=m
   92 : __tmp typ=w32 bnd=m
   95 : __tmp typ=w32 bnd=m
   96 : __fch_j0 typ=w32 bnd=m
   99 : __tmp typ=bool bnd=m
  100 : __fch_j0 typ=w32 bnd=m
  101 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  103 : __tmp typ=bool bnd=m
  107 : __fch_x_low typ=w32 bnd=m
  110 : __fch_x_high typ=w32 bnd=m
  114 : __tmp typ=bool bnd=m
  115 : __fch_i0 typ=w32 bnd=m
  118 : __tmp typ=bool bnd=m
  121 : __fch_i0 typ=w32 bnd=m
  122 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  124 : __tmp typ=w32 bnd=m
  125 : __fch_i1 typ=w32 bnd=m
  126 : __tmp typ=w32 bnd=m
  129 : __tmp typ=bool bnd=m
  130 : __ct_m1074790400 typ=t20s_rp12 val=-262400f bnd=m
  134 : __ct_1048575 typ=w32 val=1048575f bnd=m
  136 : __fch_j0 typ=w32 bnd=m
  137 : __tmp typ=w32 bnd=m
  138 : __fch_i0 typ=w32 bnd=m
  140 : __fch_i typ=w32 bnd=m
  141 : __tmp typ=w32 bnd=m
  142 : __fch_i1 typ=w32 bnd=m
  144 : __tmp typ=w32 bnd=m
  147 : __tmp typ=bool bnd=m
  149 : __fch_x_low typ=w32 bnd=m
  152 : __fch_x_high typ=w32 bnd=m
  153 : __ct_28s0 typ=w32 val=28s0 bnd=m
  155 : __tmp typ=w32 bnd=m
  159 : __fch_x_low typ=w32 bnd=m
  162 : __fch_x_high typ=w32 bnd=m
  166 : __tmp typ=bool bnd=m
  167 : __fch_i0 typ=w32 bnd=m
  170 : __tmp typ=bool bnd=m
  171 : __fch_i0 typ=w32 bnd=m
  173 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  175 : __fch_j0 typ=w32 bnd=m
  176 : __tmp typ=w32 bnd=m
  177 : __tmp typ=w32 bnd=m
  179 : __fch_i0 typ=w32 bnd=m
  181 : __fch_i typ=w32 bnd=m
  182 : __tmp typ=w32 bnd=m
  183 : __tmp typ=w32 bnd=m
  187 : __fch_j0 typ=w32 bnd=m
  188 : __ct_51 typ=w32 val=51f bnd=m
  190 : __tmp typ=bool bnd=m
  191 : __fch_j0 typ=w32 bnd=m
  192 : __ct_1024 typ=w32 val=1024f bnd=m
  194 : __tmp typ=bool bnd=m
  196 : __fch_x_low typ=w32 bnd=m
  199 : __fch_x_high typ=w32 bnd=m
  201 : __fch_x_low typ=w32 bnd=m
  204 : __fch_x_high typ=w32 bnd=m
  207 : __fch_x_low typ=w32 bnd=m
  210 : __fch_x_high typ=w32 bnd=m
  213 : __tmp typ=w32 bnd=m
  214 : __ct_4294967295 typ=w32 val=-1f bnd=m
  216 : __fch_j0 typ=w32 bnd=m
  219 : __tmp typ=w32 bnd=m
  220 : __tmp typ=w32 bnd=m
  221 : __fch_i1 typ=w32 bnd=m
  223 : __fch_i typ=w32 bnd=m
  224 : __tmp typ=w32 bnd=m
  227 : __tmp typ=bool bnd=m
  229 : __fch_x_low typ=w32 bnd=m
  232 : __fch_x_high typ=w32 bnd=m
  235 : __tmp typ=w32 bnd=m
  239 : __fch_x_low typ=w32 bnd=m
  242 : __fch_x_high typ=w32 bnd=m
  246 : __tmp typ=bool bnd=m
  247 : __fch_i0 typ=w32 bnd=m
  250 : __tmp typ=bool bnd=m
  251 : __fch_j0 typ=w32 bnd=m
  254 : __tmp typ=bool bnd=m
  255 : __fch_i0 typ=w32 bnd=m
  256 : __ct_1 typ=w32 val=1f bnd=m
  258 : __tmp typ=w32 bnd=m
  259 : __fch_i1 typ=w32 bnd=m
  263 : __ct_52 typ=w32 val=52f bnd=m
  265 : __fch_j0 typ=w32 bnd=m
  266 : __tmp typ=w32 bnd=m
  267 : __tmp typ=w32 bnd=m
  268 : __tmp typ=w32 bnd=m
  269 : __fch_j typ=w32 bnd=m
  270 : __fch_i1 typ=w32 bnd=m
  272 : __tmp typ=bool bnd=m
  273 : __fch_i0 typ=w32 bnd=m
  276 : __tmp typ=w32 bnd=m
  277 : __fch_j typ=w32 bnd=m
  279 : __fch_i1 typ=w32 bnd=m
  281 : __fch_i typ=w32 bnd=m
  282 : __tmp typ=w32 bnd=m
  283 : __tmp typ=w32 bnd=m
  285 : __fch_i0 typ=w32 bnd=m
  287 : __fch_i1 typ=w32 bnd=m
  301 : __fch_x_low typ=w32 bnd=m
  304 : __fch_x_high typ=w32 bnd=m
  307 : __tmp typ=w32 bnd=m
  320 : __ct_m1023 typ=w32 val=-1023f bnd=m
  321 : __ct_m20 typ=w32 val=-20f bnd=m
  330 : __ct_4t0 typ=w32 val=4t0 bnd=m
  331 : __adr_x typ=w32 bnd=m adro=19
  332 : __adr_x typ=w32 bnd=m adro=19
  333 : __adr_x typ=w32 bnd=m adro=19
  334 : __adr_x typ=w32 bnd=m adro=19
  335 : __adr_x typ=w32 bnd=m adro=19
  336 : __adr_x typ=w32 bnd=m adro=19
  337 : __adr_x typ=w32 bnd=m adro=19
  338 : __adr_x typ=w32 bnd=m adro=19
  339 : __adr_x typ=w32 bnd=m adro=19
  340 : __adr_x typ=w32 bnd=m adro=19
  342 : __adr_x typ=w32 bnd=m adro=19
  343 : __adr_x typ=w32 bnd=m adro=19
  429 : a_low typ=w32 bnd=m tref=__uint__
  430 : a_high typ=w32 bnd=m tref=__uint__
  431 : b_low typ=w32 bnd=m tref=__uint__
  432 : b_high typ=w32 bnd=m tref=__uint__
  433 : f64_lt typ=t21s_s2 val=0r bnd=m
  434 : __link typ=w32 bnd=m
  435 : __tmp typ=w32 bnd=m
  455 : a_low typ=w32 bnd=m tref=__uint__
  456 : a_high typ=w32 bnd=m tref=__uint__
  457 : b_low typ=w32 bnd=m tref=__uint__
  458 : b_high typ=w32 bnd=m tref=__uint__
  459 : f64_add typ=t21s_s2 val=0r bnd=m
  460 : __link typ=w32 bnd=m
  462 : __tmp typ=w32 bnd=m
  463 : __tmp typ=w32 bnd=m
  480 : __ct_2281731484 typ=w32 val=-2013235812f bnd=m
  481 : __ct_2117592124 typ=w32 val=2117592124f bnd=m
  490 : __either typ=bool bnd=m
  491 : __trgt typ=t13s_s2 val=0j bnd=m
  492 : __trgt typ=t21s_s2 val=0j bnd=m
  493 : __trgt typ=t13s_s2 val=0j bnd=m
  494 : __trgt typ=t21s_s2 val=0j bnd=m
  495 : __trgt typ=t13s_s2 val=0j bnd=m
  496 : __trgt typ=t21s_s2 val=0j bnd=m
  497 : __trgt typ=t13s_s2 val=0j bnd=m
  498 : __trgt typ=t13s_s2 val=0j bnd=m
  499 : __trgt typ=t21s_s2 val=0j bnd=m
  500 : __trgt typ=t13s_s2 val=0j bnd=m
  501 : __trgt typ=t21s_s2 val=0j bnd=m
  502 : __trgt typ=t13s_s2 val=0j bnd=m
  503 : __trgt typ=t21s_s2 val=0j bnd=m
  504 : __trgt typ=t13s_s2 val=0j bnd=m
  505 : __trgt typ=t21s_s2 val=0j bnd=m
  506 : __trgt typ=t13s_s2 val=0j bnd=m
  507 : __trgt typ=t13s_s2 val=0j bnd=m
  508 : __trgt typ=t21s_s2 val=0j bnd=m
  509 : __trgt typ=t13s_s2 val=0j bnd=m
  510 : __trgt typ=t21s_s2 val=0j bnd=m
  511 : __trgt typ=t13s_s2 val=0j bnd=m
  512 : __trgt typ=t21s_s2 val=0j bnd=m
  513 : __trgt typ=t13s_s2 val=0j bnd=m
  514 : __trgt typ=t21s_s2 val=0j bnd=m
  515 : __trgt typ=t13s_s2 val=0j bnd=m
  516 : __trgt typ=t13s_s2 val=0j bnd=m
  517 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ffloor {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (i0.19 var=20) source ()  <30>;
    (i1.20 var=21) source ()  <31>;
    (j0.21 var=22) source ()  <32>;
    (i.22 var=23) source ()  <33>;
    (j.23 var=24) source ()  <34>;
    (x_low.24 var=25) source ()  <35>;
    (x_high.25 var=26) source ()  <36>;
    (__la.27 var=28 stl=X off=1) inp ()  <38>;
    (__la.28 var=28) deassign (__la.27)  <39>;
    (__arg_x_low.36 var=33 stl=X off=12) inp ()  <47>;
    (__arg_x_low.37 var=33) deassign (__arg_x_low.36)  <48>;
    (__arg_x_high.40 var=34 stl=X off=13) inp ()  <51>;
    (__arg_x_high.41 var=34) deassign (__arg_x_high.40)  <52>;
    (__rd___sp.44 var=27) rd_res_reg (__R_SP.11 __sp.17)  <55>;
    (__ct_m28S0.45 var=35) const ()  <56>;
    (__tmp.47 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_m28S0.45)  <58>;
    (__R_SP.48 var=12 __sp.49 var=18) wr_res_reg (__tmp.47 __sp.17)  <59>;
    (__rd___sp.50 var=27) rd_res_reg (__R_SP.11 __sp.49)  <61>;
    (__ct_0t0.51 var=39) const ()  <62>;
    (__adr_x.53 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_0t0.51)  <64>;
    (__rd___sp.55 var=27) rd_res_reg (__R_SP.11 __sp.49)  <66>;
    (__rd___sp.60 var=27) rd_res_reg (__R_SP.11 __sp.49)  <71>;
    (__rd___sp.65 var=27) rd_res_reg (__R_SP.11 __sp.49)  <76>;
    (__rd___sp.70 var=27) rd_res_reg (__R_SP.11 __sp.49)  <81>;
    (__rd___sp.75 var=27) rd_res_reg (__R_SP.11 __sp.49)  <86>;
    (__M_DMw.86 var=5 x_low.87 var=25) store (__arg_x_low.37 __adr_x.53 x_low.24)  <97>;
    (__M_DMw.92 var=5 x_high.93 var=26) store (__arg_x_high.41 __adr_x.1172 x_high.25)  <102>;
    (__ct_4t0.1163 var=330) const ()  <1318>;
    (__adr_x.1172 var=339) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1328>;
    call {
        () chess_separator_scheduler ()  <103>;
    } #4 off=1
    #311 off=2
    (__ct_8t0.56 var=43) const ()  <67>;
    (__adr_i0.58 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.56)  <69>;
    (__fch_x_high.100 var=73) load (__M_DMw.4 __adr_x.1173 x_high.93)  <110>;
    (__M_DMw.107 var=5 i0.108 var=20) store (__fch_x_high.100 __adr_i0.58 i0.19)  <117>;
    (__adr_x.1173 var=340) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1329>;
    call {
        () chess_separator_scheduler ()  <118>;
    } #6 off=3
    #323 off=4
    (__ct_12t0.61 var=47) const ()  <72>;
    (__adr_i1.63 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_12t0.61)  <74>;
    (__fch_x_low.110 var=80) load (__M_DMw.4 __adr_x.53 x_low.87)  <120>;
    (__M_DMw.119 var=5 i1.120 var=21) store (__fch_x_low.110 __adr_i1.63 i1.20)  <129>;
    call {
        () chess_separator_scheduler ()  <130>;
    } #8 off=5
    #9 off=6
    (__ct_16t0.66 var=51) const ()  <77>;
    (__adr_j0.68 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_16t0.66)  <79>;
    (__fch_i0.121 var=86) load (__M_DMw.4 __adr_i0.58 i0.108)  <131>;
    (__ct_20.122 var=87) const ()  <132>;
    (__tmp.124 var=89) __sint__rs___sint___sint (__fch_i0.121 __ct_20.122)  <134>;
    (__ct_2047.125 var=90) const ()  <135>;
    (__tmp.127 var=92) __sint__ad___sint___sint (__tmp.124 __ct_2047.125)  <137>;
    (__tmp.130 var=95) __sint__pl___sint___sint (__tmp.127 __ct_m1023.1148)  <140>;
    (__M_DMw.131 var=5 j0.132 var=22) store (__tmp.130 __adr_j0.68 j0.21)  <141>;
    (__ct_m1023.1148 var=320) const ()  <1301>;
    call {
        () chess_separator_scheduler ()  <142>;
    } #10 off=7
    #11 off=8
    (__ct_20t0.71 var=55) const ()  <82>;
    (__adr_i.73 var=57) __Pvoid__pl___Pvoid___sint (__rd___sp.70 __ct_20t0.71)  <84>;
    (__fch_j0.133 var=96) load (__M_DMw.4 __adr_j0.68 j0.132)  <143>;
    (__tmp.136 var=99) bool__lt___sint___sint (__fch_j0.133 __ct_20.122)  <146>;
    (__ct_0.166 var=101) const ()  <177>;
    (__ct_28s0.381 var=153) const ()  <396>;
    (__ct_4294967295.705 var=214) const ()  <758>;
    (f64_lt.1287 var=433) const ()  <1570>;
    (f64_add.1355 var=459) const ()  <1714>;
    (__ct_2281731484.1453 var=480) const ()  <1858>;
    (__ct_2117592124.1454 var=481) const ()  <1860>;
    (__trgt.1507 var=516) const ()  <2033>;
    () void_br_bool_t13s_s2 (__tmp.136 __trgt.1507)  <2034>;
    (__either.1508 var=490) undefined ()  <2035>;
    if {
        {
            () if_expr (__either.1508)  <175>;
        } #13
        {
            #15 off=40
            (__fch_j0.165 var=100) load (__M_DMw.4 __adr_j0.68 j0.132)  <176>;
            (__tmp.168 var=103) bool__lt___sint___sint (__fch_j0.165 __ct_0.166)  <179>;
            (__trgt.1485 var=502) const ()  <1995>;
            () void_br_bool_t13s_s2 (__tmp.168 __trgt.1485)  <1996>;
            (__either.1486 var=490) undefined ()  <1997>;
            if {
                {
                    () if_expr (__either.1486)  <208>;
                } #17
                {
                    #339 off=59
                    (__fch_x_low.200 var=107) load (__M_DMw.4 __adr_x.53 x_low.87)  <212>;
                    (__fch_x_high.205 var=110) load (__M_DMw.4 __adr_x.1164 x_high.93)  <217>;
                    (__adr_x.1164 var=331) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1320>;
                    (__link.1356 var=460) w32_jal_t21s_s2 (f64_add.1355)  <1715>;
                    call {
                        (a_low.1357 var=455 stl=X off=12) assign (__ct_2281731484.1453)  <1716>;
                        (a_high.1358 var=456 stl=X off=13) assign (__ct_2117592124.1454)  <1717>;
                        (b_low.1359 var=457 stl=X off=14) assign (__fch_x_low.200)  <1718>;
                        (b_high.1360 var=458 stl=X off=15) assign (__fch_x_high.205)  <1719>;
                        (__link.1361 var=460 stl=X off=1) assign (__link.1356)  <1720>;
                        (__tmp.1362 var=462 stl=X off=10 __tmp.1363 var=463 stl=X off=11) Ff64_add (__link.1361 a_low.1357 a_high.1358 b_low.1359 b_high.1360)  <1721>;
                        (__tmp.1365 var=462) deassign (__tmp.1362)  <1723>;
                        (__tmp.1367 var=463) deassign (__tmp.1363)  <1725>;
                    } #340 off=60
                    #336 off=61
                    (__link.1288 var=434) w32_jal_t21s_s2 (f64_lt.1287)  <1571>;
                    call {
                        (a_low.1290 var=429 stl=X off=11) assign (__ct_0.166)  <1573>;
                        (a_high.1291 var=430 stl=X off=12) assign (__ct_0.166)  <1574>;
                        (b_low.1292 var=431 stl=X off=13) assign (__tmp.1365)  <1575>;
                        (b_high.1293 var=432 stl=X off=14) assign (__tmp.1367)  <1576>;
                        (__link.1294 var=434 stl=X off=1) assign (__link.1288)  <1577>;
                        (__tmp.1295 var=435 stl=X off=10) Ff64_lt (__link.1294 a_low.1290 a_high.1291 b_low.1292 b_high.1293)  <1578>;
                        (__tmp.1296 var=435) deassign (__tmp.1295)  <1579>;
                    } #273 off=62
                    #274 off=63
                    (__tmp.1460 var=114) bool__eq___sint___sint (__tmp.1296 __ct_0.166)  <1929>;
                    (__trgt.1474 var=495) const ()  <1976>;
                    () void_br_bool_t13s_s2 (__tmp.1460 __trgt.1474)  <1977>;
                    (__either.1475 var=490) undefined ()  <1978>;
                    if {
                        {
                            () if_expr (__either.1475)  <251>;
                        } #21
                        {
                        } #41 off=73
                        {
                            #23 off=64
                            (__fch_i0.239 var=115) load (__M_DMw.4 __adr_i0.58 i0.108)  <252>;
                            (__tmp.242 var=118) bool__ge___sint___sint (__fch_i0.239 __ct_0.166)  <255>;
                            (__trgt.1471 var=493) const ()  <1971>;
                            () void_br_bool_t13s_s2 (__tmp.242 __trgt.1471)  <1972>;
                            (__either.1472 var=490) undefined ()  <1973>;
                            if {
                                {
                                    () if_expr (__either.1472)  <284>;
                                } #25
                                {
                                    (__M_DMw.273 var=5 i1.274 var=21) store (__ct_0.166 __adr_i1.63 i1.120)  <287>;
                                    (__M_DMw.275 var=5 i0.276 var=20) store (__ct_0.166 __adr_i0.58 i0.108)  <288>;
                                } #27 off=71
                                {
                                    #30 off=65
                                    (__fch_i0.277 var=121) load (__M_DMw.4 __adr_i0.58 i0.108)  <290>;
                                    (__ct_2147483647.278 var=122) const ()  <291>;
                                    (__tmp.280 var=124) __sint__ad___sint___sint (__fch_i0.277 __ct_2147483647.278)  <293>;
                                    (__fch_i1.281 var=125) load (__M_DMw.4 __adr_i1.63 i1.120)  <294>;
                                    (__tmp.282 var=126) __sint__or___sint___sint (__tmp.280 __fch_i1.281)  <295>;
                                    (__tmp.1459 var=129) bool__eq___sint___sint (__tmp.282 __ct_0.166)  <1928>;
                                    (__trgt.1468 var=491) const ()  <1966>;
                                    () void_br_bool_t13s_s2 (__tmp.1459 __trgt.1468)  <1967>;
                                    (__either.1469 var=490) undefined ()  <1968>;
                                    if {
                                        {
                                            () if_expr (__either.1469)  <327>;
                                        } #32
                                        {
                                        } #38 off=69
                                        {
                                            #34 off=66
                                            (__ct_m1074790400.314 var=130) const ()  <328>;
                                            (__M_DMw.316 var=5 i0.317 var=20) store (__ct_m1074790400.314 __adr_i0.58 i0.108)  <330>;
                                            call {
                                                () chess_separator_scheduler ()  <331>;
                                            } #35 off=67
                                            #36 off=68
                                            (__M_DMw.320 var=5 i1.321 var=21) store (__ct_0.166 __adr_i1.63 i1.120)  <334>;
                                            (__trgt.1470 var=492) const ()  <1969>;
                                            () void_j_t21s_s2 (__trgt.1470)  <1970>;
                                        } #33
                                        {
                                            (i0.322 var=20) merge (i0.108 i0.317)  <336>;
                                            (i1.323 var=21) merge (i1.120 i1.321)  <337>;
                                        } #39
                                    } #31
                                    #413 off=70
                                    (__trgt.1473 var=494) const ()  <1974>;
                                    () void_j_t21s_s2 (__trgt.1473)  <1975>;
                                } #29
                                {
                                    (i0.324 var=20) merge (i0.276 i0.322)  <338>;
                                    (i1.325 var=21) merge (i1.274 i1.323)  <339>;
                                } #40
                            } #24
                            #414 off=72
                            (__trgt.1476 var=496) const ()  <1979>;
                            () void_j_t21s_s2 (__trgt.1476)  <1980>;
                        } #22
                        {
                            (i0.326 var=20) merge (i0.108 i0.324)  <340>;
                            (i1.327 var=21) merge (i1.120 i1.325)  <341>;
                        } #42
                    } #20
                } #18
                {
                    #44 off=41
                    (__ct_1048575.328 var=134) const ()  <342>;
                    (__fch_j0.330 var=136) load (__M_DMw.4 __adr_j0.68 j0.132)  <344>;
                    (__tmp.331 var=137) __uint__rs___uint___sint (__ct_1048575.328 __fch_j0.330)  <345>;
                    (__M_DMw.332 var=5 i.333 var=23) store (__tmp.331 __adr_i.73 i.22)  <346>;
                    call {
                        () chess_separator_scheduler ()  <347>;
                    } #45 off=42
                    #46 off=43
                    (__fch_i0.334 var=138) load (__M_DMw.4 __adr_i0.58 i0.108)  <348>;
                    (__fch_i.336 var=140) load (__M_DMw.4 __adr_i.73 i.333)  <350>;
                    (__tmp.337 var=141) __uint__ad___uint___uint (__fch_i0.334 __fch_i.336)  <351>;
                    (__fch_i1.338 var=142) load (__M_DMw.4 __adr_i1.63 i1.120)  <352>;
                    (__tmp.340 var=144) __uint__or___uint___uint (__tmp.337 __fch_i1.338)  <354>;
                    (__tmp.343 var=147) bool__eq___uint___uint (__tmp.340 __ct_0.166)  <357>;
                    (__trgt.1477 var=497) const ()  <1981>;
                    () void_br_bool_t13s_s2 (__tmp.343 __trgt.1477)  <1982>;
                    (__either.1478 var=490) undefined ()  <1983>;
                    if {
                        {
                            () if_expr (__either.1478)  <386>;
                            () chess_rear_then ()  <1984>;
                        } #48
                        {
                            (__fch_x_low.373 var=149) load (__M_DMw.4 __adr_x.53 x_low.87)  <388>;
                            (__fch_x_high.378 var=152) load (__M_DMw.4 __adr_x.1165 x_high.93)  <393>;
                            (__rd___sp.380 var=27) rd_res_reg (__R_SP.11 __sp.49)  <395>;
                            (__tmp.383 var=155) __Pvoid__pl___Pvoid___sint (__rd___sp.380 __ct_28s0.381)  <398>;
                            (__R_SP.384 var=12 __sp.385 var=18) wr_res_reg (__tmp.383 __sp.49)  <399>;
                            () void___rts_jr_w32 (__la.28)  <400>;
                            (__rt_low.387 var=30 stl=X off=10) assign (__fch_x_low.373)  <402>;
                            () out (__rt_low.387)  <403>;
                            (__rt_high.389 var=31 stl=X off=11) assign (__fch_x_high.378)  <405>;
                            () out (__rt_high.389)  <406>;
                            () sink (__sp.385)  <414>;
                            () sink (i0.108)  <416>;
                            () sink (i1.120)  <417>;
                            () sink (j0.132)  <418>;
                            () sink (i.333)  <419>;
                            () sink (x_low.87)  <421>;
                            () sink (x_high.93)  <422>;
                            (__adr_x.1165 var=332) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1321>;
                        } #52 off=45 nxt=-2
                        {
                        } #53 off=44
                        {
                        } #54
                    } #47
                    #355 off=46
                    (__fch_x_low.451 var=159) load (__M_DMw.4 __adr_x.53 x_low.87)  <482>;
                    (__fch_x_high.456 var=162) load (__M_DMw.4 __adr_x.1166 x_high.93)  <487>;
                    (__adr_x.1166 var=333) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1322>;
                    (__link.1377 var=460) w32_jal_t21s_s2 (f64_add.1355)  <1738>;
                    call {
                        (a_low.1378 var=455 stl=X off=12) assign (__ct_2281731484.1453)  <1739>;
                        (a_high.1379 var=456 stl=X off=13) assign (__ct_2117592124.1454)  <1740>;
                        (b_low.1380 var=457 stl=X off=14) assign (__fch_x_low.451)  <1741>;
                        (b_high.1381 var=458 stl=X off=15) assign (__fch_x_high.456)  <1742>;
                        (__link.1382 var=460 stl=X off=1) assign (__link.1377)  <1743>;
                        (__tmp.1383 var=462 stl=X off=10 __tmp.1384 var=463 stl=X off=11) Ff64_add (__link.1382 a_low.1378 a_high.1379 b_low.1380 b_high.1381)  <1744>;
                        (__tmp.1386 var=462) deassign (__tmp.1383)  <1746>;
                        (__tmp.1388 var=463) deassign (__tmp.1384)  <1748>;
                    } #356 off=47
                    #352 off=48
                    (__link.1306 var=434) w32_jal_t21s_s2 (f64_lt.1287)  <1592>;
                    call {
                        (a_low.1308 var=429 stl=X off=11) assign (__ct_0.166)  <1594>;
                        (a_high.1309 var=430 stl=X off=12) assign (__ct_0.166)  <1595>;
                        (b_low.1310 var=431 stl=X off=13) assign (__tmp.1386)  <1596>;
                        (b_high.1311 var=432 stl=X off=14) assign (__tmp.1388)  <1597>;
                        (__link.1312 var=434 stl=X off=1) assign (__link.1306)  <1598>;
                        (__tmp.1313 var=435 stl=X off=10) Ff64_lt (__link.1312 a_low.1308 a_high.1309 b_low.1310 b_high.1311)  <1599>;
                        (__tmp.1314 var=435) deassign (__tmp.1313)  <1600>;
                    } #287 off=49
                    #288 off=50
                    (__tmp.1462 var=166) bool__eq___sint___sint (__tmp.1314 __ct_0.166)  <1931>;
                    (__trgt.1482 var=500) const ()  <1990>;
                    () void_br_bool_t13s_s2 (__tmp.1462 __trgt.1482)  <1991>;
                    (__either.1483 var=490) undefined ()  <1992>;
                    if {
                        {
                            () if_expr (__either.1483)  <521>;
                        } #57
                        {
                        } #71 off=57
                        {
                            #59 off=51
                            (__fch_i0.490 var=167) load (__M_DMw.4 __adr_i0.58 i0.108)  <522>;
                            (__tmp.1461 var=170) bool__ge___sint___sint (__fch_i0.490 __ct_0.166)  <1930>;
                            (__trgt.1479 var=498) const ()  <1985>;
                            () void_br_bool_t13s_s2 (__tmp.1461 __trgt.1479)  <1986>;
                            (__either.1480 var=490) undefined ()  <1987>;
                            if {
                                {
                                    () if_expr (__either.1480)  <554>;
                                } #61
                                {
                                } #65 off=53
                                {
                                    (__fch_i0.522 var=171) load (__M_DMw.4 __adr_i0.58 i0.108)  <555>;
                                    (__ct_1048576.524 var=173) const ()  <557>;
                                    (__fch_j0.526 var=175) load (__M_DMw.4 __adr_j0.68 j0.132)  <559>;
                                    (__tmp.527 var=176) __uint__rs___uint___sint (__ct_1048576.524 __fch_j0.526)  <560>;
                                    (__tmp.528 var=177) __uint__pl___uint___uint (__fch_i0.522 __tmp.527)  <561>;
                                    (__M_DMw.530 var=5 i0.531 var=20) store (__tmp.528 __adr_i0.58 i0.108)  <563>;
                                    (__trgt.1481 var=499) const ()  <1988>;
                                    () void_j_t21s_s2 (__trgt.1481)  <1989>;
                                } #63 off=52
                                {
                                    (i0.532 var=20) merge (i0.108 i0.531)  <565>;
                                } #66
                            } #60
                            #210 off=54
                            (__fch_i0.533 var=179) load (__M_DMw.4 __adr_i0.58 i0.532)  <566>;
                            (__fch_i.535 var=181) load (__M_DMw.4 __adr_i.73 i.333)  <568>;
                            (__tmp.537 var=183) __uint__ad___uint___uint (__fch_i0.533 __tmp.1218)  <570>;
                            (__M_DMw.539 var=5 i0.540 var=20) store (__tmp.537 __adr_i0.58 i0.532)  <572>;
                            (__tmp.1218 var=182) __uint__er___uint___uint (__fch_i.535 __ct_4294967295.705)  <1417>;
                            call {
                                () chess_separator_scheduler ()  <573>;
                            } #68 off=55
                            #69 off=56
                            (__M_DMw.543 var=5 i1.544 var=21) store (__ct_0.166 __adr_i1.63 i1.120)  <576>;
                            (__trgt.1484 var=501) const ()  <1993>;
                            () void_j_t21s_s2 (__trgt.1484)  <1994>;
                        } #58
                        {
                            (i0.545 var=20) merge (i0.108 i0.540)  <578>;
                            (i1.546 var=21) merge (i1.120 i1.544)  <579>;
                        } #72
                    } #56
                    #416 off=58
                    (__trgt.1487 var=503) const ()  <1998>;
                    () void_j_t21s_s2 (__trgt.1487)  <1999>;
                } #43
                {
                    (i0.554 var=20) merge (i0.326 i0.545)  <587>;
                    (i1.555 var=21) merge (i1.327 i1.546)  <588>;
                    (i.557 var=23) merge (i.22 i.333)  <590>;
                } #73
            } #16
        } #14
        {
            #217 off=9
            (__fch_j0.575 var=187) load (__M_DMw.4 __adr_j0.68 j0.132)  <608>;
            (__ct_51.576 var=188) const ()  <609>;
            (__tmp.1222 var=190) bool__lt___sint___sint (__ct_51.576 __fch_j0.575)  <1424>;
            (__trgt.1505 var=515) const ()  <2029>;
            () void_br_bool_t13s_s2 (__tmp.1222 __trgt.1505)  <2030>;
            (__either.1506 var=490) undefined ()  <2031>;
            if {
                {
                    () if_expr (__either.1506)  <640>;
                    () chess_rear_then ()  <2032>;
                } #77
                {
                    #79 off=34
                    (__fch_j0.607 var=191) load (__M_DMw.4 __adr_j0.68 j0.132)  <641>;
                    (__ct_1024.608 var=192) const ()  <642>;
                    (__tmp.610 var=194) bool__eq___sint___sint (__fch_j0.607 __ct_1024.608)  <644>;
                    (__trgt.1488 var=504) const ()  <2000>;
                    () void_br_bool_t13s_s2 (__tmp.610 __trgt.1488)  <2001>;
                    (__either.1489 var=490) undefined ()  <2002>;
                    if {
                        {
                            () if_expr (__either.1489)  <673>;
                        } #81
                        {
                            #374 off=36
                            (__fch_x_low.640 var=196) load (__M_DMw.4 __adr_x.53 x_low.87)  <675>;
                            (__fch_x_high.645 var=199) load (__M_DMw.4 __adr_x.1167 x_high.93)  <680>;
                            (__fch_x_low.648 var=201) load (__M_DMw.4 __adr_x.53 x_low.87)  <683>;
                            (__fch_x_high.653 var=204) load (__M_DMw.4 __adr_x.1168 x_high.93)  <688>;
                            (__adr_x.1167 var=334) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1323>;
                            (__adr_x.1168 var=335) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1324>;
                            (__link.1398 var=460) w32_jal_t21s_s2 (f64_add.1355)  <1761>;
                            call {
                                (a_low.1399 var=455 stl=X off=12) assign (__fch_x_low.640)  <1762>;
                                (a_high.1400 var=456 stl=X off=13) assign (__fch_x_high.645)  <1763>;
                                (b_low.1401 var=457 stl=X off=14) assign (__fch_x_low.648)  <1764>;
                                (b_high.1402 var=458 stl=X off=15) assign (__fch_x_high.653)  <1765>;
                                (__link.1403 var=460 stl=X off=1) assign (__link.1398)  <1766>;
                                (__tmp.1404 var=462 stl=X off=10 __tmp.1405 var=463 stl=X off=11) Ff64_add (__link.1403 a_low.1399 a_high.1400 b_low.1401 b_high.1402)  <1767>;
                                (__tmp.1407 var=462) deassign (__tmp.1404)  <1769>;
                                (__tmp.1409 var=463) deassign (__tmp.1405)  <1771>;
                            } #375 off=37
                        } #82
                        {
                            (__fch_x_low.657 var=207) load (__M_DMw.4 __adr_x.53 x_low.87)  <693>;
                            (__fch_x_high.662 var=210) load (__M_DMw.4 __adr_x.1169 x_high.93)  <698>;
                            (__adr_x.1169 var=336) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1325>;
                            (__trgt.1490 var=505) const ()  <2003>;
                            () void_j_t21s_s2 (__trgt.1490)  <2004>;
                        } #86 off=35
                        {
                            (__rt_low.1144 var=30) merge (__tmp.1407 __fch_x_low.657)  <1297>;
                            (__rt_high.1147 var=31) merge (__tmp.1409 __fch_x_high.662)  <1300>;
                        } #88
                    } #80
                    #90 off=38 nxt=-2
                    (__rd___sp.665 var=27) rd_res_reg (__R_SP.11 __sp.49)  <702>;
                    (__tmp.668 var=213) __Pvoid__pl___Pvoid___sint (__rd___sp.665 __ct_28s0.381)  <705>;
                    (__R_SP.669 var=12 __sp.670 var=18) wr_res_reg (__tmp.668 __sp.49)  <706>;
                    () void___rts_jr_w32 (__la.28)  <707>;
                    (__rt_low.672 var=30 stl=X off=10) assign (__rt_low.1144)  <709>;
                    () out (__rt_low.672)  <710>;
                    (__rt_high.674 var=31 stl=X off=11) assign (__rt_high.1147)  <712>;
                    () out (__rt_high.674)  <713>;
                    () sink (__sp.670)  <721>;
                    () sink (i0.108)  <723>;
                    () sink (i1.120)  <724>;
                    () sink (j0.132)  <725>;
                    () sink (x_low.87)  <728>;
                    () sink (x_high.93)  <729>;
                    (i0.684 var=20) never ()  <737>;
                    (i1.685 var=21) never ()  <738>;
                    (i.687 var=23) never ()  <740>;
                    (j.688 var=24) never ()  <741>;
                } #78
                {
                    #92 off=10
                    (__fch_j0.707 var=216) load (__M_DMw.4 __adr_j0.68 j0.132)  <760>;
                    (__tmp.710 var=219) __sint__pl___sint___sint (__fch_j0.707 __ct_m20.1149)  <763>;
                    (__tmp.711 var=220) __uint__rs___uint___sint (__ct_4294967295.705 __tmp.710)  <764>;
                    (__M_DMw.712 var=5 i.713 var=23) store (__tmp.711 __adr_i.73 i.22)  <765>;
                    (__ct_m20.1149 var=321) const ()  <1303>;
                    call {
                        () chess_separator_scheduler ()  <766>;
                    } #93 off=11
                    #94 off=12
                    (__fch_i1.714 var=221) load (__M_DMw.4 __adr_i1.63 i1.120)  <767>;
                    (__fch_i.716 var=223) load (__M_DMw.4 __adr_i.73 i.713)  <769>;
                    (__tmp.717 var=224) __uint__ad___uint___uint (__fch_i1.714 __fch_i.716)  <770>;
                    (__tmp.720 var=227) bool__eq___uint___uint (__tmp.717 __ct_0.166)  <773>;
                    (__trgt.1491 var=506) const ()  <2005>;
                    () void_br_bool_t13s_s2 (__tmp.720 __trgt.1491)  <2006>;
                    (__either.1492 var=490) undefined ()  <2007>;
                    if {
                        {
                            () if_expr (__either.1492)  <802>;
                            () chess_rear_then ()  <2008>;
                        } #96
                        {
                            (__fch_x_low.750 var=229) load (__M_DMw.4 __adr_x.53 x_low.87)  <804>;
                            (__fch_x_high.755 var=232) load (__M_DMw.4 __adr_x.1170 x_high.93)  <809>;
                            (__rd___sp.757 var=27) rd_res_reg (__R_SP.11 __sp.49)  <811>;
                            (__tmp.760 var=235) __Pvoid__pl___Pvoid___sint (__rd___sp.757 __ct_28s0.381)  <814>;
                            (__R_SP.761 var=12 __sp.762 var=18) wr_res_reg (__tmp.760 __sp.49)  <815>;
                            () void___rts_jr_w32 (__la.28)  <816>;
                            (__rt_low.764 var=30 stl=X off=10) assign (__fch_x_low.750)  <818>;
                            () out (__rt_low.764)  <819>;
                            (__rt_high.766 var=31 stl=X off=11) assign (__fch_x_high.755)  <821>;
                            () out (__rt_high.766)  <822>;
                            () sink (__sp.762)  <830>;
                            () sink (i0.108)  <832>;
                            () sink (i1.120)  <833>;
                            () sink (j0.132)  <834>;
                            () sink (i.713)  <835>;
                            () sink (x_low.87)  <837>;
                            () sink (x_high.93)  <838>;
                            (__adr_x.1170 var=337) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1326>;
                        } #100 off=14 nxt=-2
                        {
                        } #101 off=13
                        {
                        } #102
                    } #95
                    #390 off=15
                    (__fch_x_low.828 var=239) load (__M_DMw.4 __adr_x.53 x_low.87)  <898>;
                    (__fch_x_high.833 var=242) load (__M_DMw.4 __adr_x.1171 x_high.93)  <903>;
                    (__adr_x.1171 var=338) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1327>;
                    (__link.1419 var=460) w32_jal_t21s_s2 (f64_add.1355)  <1784>;
                    call {
                        (a_low.1420 var=455 stl=X off=12) assign (__ct_2281731484.1453)  <1785>;
                        (a_high.1421 var=456 stl=X off=13) assign (__ct_2117592124.1454)  <1786>;
                        (b_low.1422 var=457 stl=X off=14) assign (__fch_x_low.828)  <1787>;
                        (b_high.1423 var=458 stl=X off=15) assign (__fch_x_high.833)  <1788>;
                        (__link.1424 var=460 stl=X off=1) assign (__link.1419)  <1789>;
                        (__tmp.1425 var=462 stl=X off=10 __tmp.1426 var=463 stl=X off=11) Ff64_add (__link.1424 a_low.1420 a_high.1421 b_low.1422 b_high.1423)  <1790>;
                        (__tmp.1428 var=462) deassign (__tmp.1425)  <1792>;
                        (__tmp.1430 var=463) deassign (__tmp.1426)  <1794>;
                    } #391 off=16
                    #387 off=17
                    (__link.1324 var=434) w32_jal_t21s_s2 (f64_lt.1287)  <1613>;
                    call {
                        (a_low.1326 var=429 stl=X off=11) assign (__ct_0.166)  <1615>;
                        (a_high.1327 var=430 stl=X off=12) assign (__ct_0.166)  <1616>;
                        (b_low.1328 var=431 stl=X off=13) assign (__tmp.1428)  <1617>;
                        (b_high.1329 var=432 stl=X off=14) assign (__tmp.1430)  <1618>;
                        (__link.1330 var=434 stl=X off=1) assign (__link.1324)  <1619>;
                        (__tmp.1331 var=435 stl=X off=10) Ff64_lt (__link.1330 a_low.1326 a_high.1327 b_low.1328 b_high.1329)  <1620>;
                        (__tmp.1332 var=435) deassign (__tmp.1331)  <1621>;
                    } #301 off=18
                    #302 off=19
                    (__tmp.1465 var=246) bool__eq___sint___sint (__tmp.1332 __ct_0.166)  <1934>;
                    (__trgt.1502 var=513) const ()  <2024>;
                    () void_br_bool_t13s_s2 (__tmp.1465 __trgt.1502)  <2025>;
                    (__either.1503 var=490) undefined ()  <2026>;
                    if {
                        {
                            () if_expr (__either.1503)  <937>;
                        } #105
                        {
                        } #135 off=32
                        {
                            #107 off=20
                            (__fch_i0.867 var=247) load (__M_DMw.4 __adr_i0.58 i0.108)  <938>;
                            (__tmp.1464 var=250) bool__ge___sint___sint (__fch_i0.867 __ct_0.166)  <1933>;
                            (__trgt.1499 var=511) const ()  <2019>;
                            () void_br_bool_t13s_s2 (__tmp.1464 __trgt.1499)  <2020>;
                            (__either.1500 var=490) undefined ()  <2021>;
                            if {
                                {
                                    () if_expr (__either.1500)  <970>;
                                } #109
                                {
                                } #131 off=30
                                {
                                    #111 off=21
                                    (__fch_j0.899 var=251) load (__M_DMw.4 __adr_j0.68 j0.132)  <971>;
                                    (__tmp.902 var=254) bool__eq___sint___sint (__fch_j0.899 __ct_20.122)  <974>;
                                    (__ct_1.932 var=256) const ()  <1005>;
                                    (__trgt.1496 var=509) const ()  <2014>;
                                    () void_br_bool_t13s_s2 (__tmp.902 __trgt.1496)  <2015>;
                                    (__either.1497 var=490) undefined ()  <2016>;
                                    if {
                                        {
                                            () if_expr (__either.1497)  <1003>;
                                        } #113
                                        {
                                            (__fch_i0.931 var=255) load (__M_DMw.4 __adr_i0.58 i0.108)  <1004>;
                                            (__tmp.934 var=258) __sint__pl___sint___sint (__fch_i0.931 __ct_1.932)  <1007>;
                                            (__M_DMw.935 var=5 i0.936 var=20) store (__tmp.934 __adr_i0.58 i0.108)  <1008>;
                                        } #115 off=28
                                        {
                                            #118 off=22
                                            (__ct_24t0.76 var=59) const ()  <87>;
                                            (__adr_j.78 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.75 __ct_24t0.76)  <89>;
                                            (__fch_i1.937 var=259) load (__M_DMw.4 __adr_i1.63 i1.120)  <1010>;
                                            (__ct_52.941 var=263) const ()  <1014>;
                                            (__fch_j0.943 var=265) load (__M_DMw.4 __adr_j0.68 j0.132)  <1016>;
                                            (__tmp.944 var=266) __sint__mi___sint___sint (__ct_52.941 __fch_j0.943)  <1017>;
                                            (__tmp.945 var=267) __uint__ls___uint___sint (__ct_1.932 __tmp.944)  <1018>;
                                            (__tmp.946 var=268) __uint__pl___uint___uint (__fch_i1.937 __tmp.945)  <1019>;
                                            (__M_DMw.947 var=5 j.948 var=24) store (__tmp.946 __adr_j.78 j.23)  <1020>;
                                            call {
                                                () chess_separator_scheduler ()  <1021>;
                                            } #119 off=23
                                            #120 off=24
                                            (__fch_j.949 var=269) load (__M_DMw.4 __adr_j.78 j.948)  <1022>;
                                            (__fch_i1.950 var=270) load (__M_DMw.4 __adr_i1.63 i1.120)  <1023>;
                                            (__tmp.1463 var=272) bool__ge___uint___uint (__fch_j.949 __fch_i1.950)  <1932>;
                                            (__trgt.1493 var=507) const ()  <2009>;
                                            () void_br_bool_t13s_s2 (__tmp.1463 __trgt.1493)  <2010>;
                                            (__either.1494 var=490) undefined ()  <2011>;
                                            if {
                                                {
                                                    () if_expr (__either.1494)  <1054>;
                                                } #122
                                                {
                                                } #126 off=26
                                                {
                                                    (__fch_i0.981 var=273) load (__M_DMw.4 __adr_i0.58 i0.108)  <1055>;
                                                    (__tmp.984 var=276) __sint__pl___sint___sint (__fch_i0.981 __ct_1.932)  <1058>;
                                                    (__M_DMw.985 var=5 i0.986 var=20) store (__tmp.984 __adr_i0.58 i0.108)  <1059>;
                                                    (__trgt.1495 var=508) const ()  <2012>;
                                                    () void_j_t21s_s2 (__trgt.1495)  <2013>;
                                                } #124 off=25
                                                {
                                                    (i0.987 var=20) merge (i0.108 i0.986)  <1061>;
                                                } #127
                                            } #121
                                            #128 off=27
                                            (__fch_j.988 var=277) load (__M_DMw.4 __adr_j.78 j.948)  <1062>;
                                            (__M_DMw.990 var=5 i1.991 var=21) store (__fch_j.988 __adr_i1.63 i1.120)  <1064>;
                                            (__trgt.1498 var=510) const ()  <2017>;
                                            () void_j_t21s_s2 (__trgt.1498)  <2018>;
                                        } #117
                                        {
                                            (i0.992 var=20) merge (i0.936 i0.987)  <1066>;
                                            (i1.993 var=21) merge (i1.120 i1.991)  <1067>;
                                            (j.994 var=24) merge (j.23 j.948)  <1068>;
                                        } #130
                                    } #112
                                    #418 off=29
                                    (__trgt.1501 var=512) const ()  <2022>;
                                    () void_j_t21s_s2 (__trgt.1501)  <2023>;
                                } #110
                                {
                                    (i0.995 var=20) merge (i0.108 i0.992)  <1069>;
                                    (i1.996 var=21) merge (i1.120 i1.993)  <1070>;
                                    (j.997 var=24) merge (j.23 j.994)  <1071>;
                                } #132
                            } #108
                            #234 off=31
                            (__fch_i1.998 var=279) load (__M_DMw.4 __adr_i1.63 i1.996)  <1072>;
                            (__fch_i.1000 var=281) load (__M_DMw.4 __adr_i.73 i.713)  <1074>;
                            (__tmp.1002 var=283) __uint__ad___uint___uint (__fch_i1.998 __tmp.1230)  <1076>;
                            (__M_DMw.1004 var=5 i1.1005 var=21) store (__tmp.1002 __adr_i1.63 i1.996)  <1078>;
                            (__tmp.1230 var=282) __uint__er___uint___uint (__fch_i.1000 __ct_4294967295.705)  <1438>;
                            (__trgt.1504 var=514) const ()  <2027>;
                            () void_j_t21s_s2 (__trgt.1504)  <2028>;
                        } #106
                        {
                            (i0.1006 var=20) merge (i0.108 i0.995)  <1080>;
                            (i1.1007 var=21) merge (i1.120 i1.1005)  <1081>;
                            (j.1008 var=24) merge (j.23 j.997)  <1082>;
                        } #136
                    } #104
                } #91
                {
                    (i0.1016 var=20) merge (i0.684 i0.1006)  <1090>;
                    (i1.1017 var=21) merge (i1.685 i1.1007)  <1091>;
                    (i.1019 var=23) merge (i.687 i.713)  <1093>;
                    (j.1020 var=24) merge (j.688 j.1008)  <1094>;
                } #137
            } #76
            #420 off=39
            (__trgt.1509 var=517) const ()  <2036>;
            () void_j_t21s_s2 (__trgt.1509)  <2037>;
        } #74
        {
            (i0.1044 var=20) merge (i0.554 i0.1016)  <1118>;
            (i1.1045 var=21) merge (i1.555 i1.1017)  <1119>;
            (i.1047 var=23) merge (i.557 i.1019)  <1121>;
            (j.1048 var=24) merge (j.23 j.1020)  <1122>;
        } #138
    } #12
    #141 off=76
    (__fch_i0.1067 var=285) load (__M_DMw.4 __adr_i0.58 i0.1044)  <1142>;
    call {
        () chess_separator_scheduler ()  <1144>;
    } #142 off=77
    #143 off=78
    (__fch_i1.1070 var=287) load (__M_DMw.4 __adr_i1.63 i1.1045)  <1146>;
    call {
        () chess_separator_scheduler ()  <1159>;
    } #150 off=79
    #151 off=80
    (__M_DMw.1082 var=5 x_low.1083 var=25) store (__fch_i1.1070 __adr_x.53 x_low.87)  <1162>;
    (__M_DMw.1088 var=5 x_high.1089 var=26) store (__fch_i0.1067 __adr_x.1175 x_high.93)  <1167>;
    (__adr_x.1175 var=342) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1331>;
    call {
        () chess_separator_scheduler ()  <1168>;
    } #152 off=81
    #155 off=82 nxt=-2
    (__fch_x_low.1091 var=301) load (__M_DMw.4 __adr_x.53 x_low.1083)  <1170>;
    (__fch_x_high.1096 var=304) load (__M_DMw.4 __adr_x.1176 x_high.1089)  <1175>;
    (__rd___sp.1098 var=27) rd_res_reg (__R_SP.11 __sp.49)  <1177>;
    (__tmp.1101 var=307) __Pvoid__pl___Pvoid___sint (__rd___sp.1098 __ct_28s0.381)  <1180>;
    (__R_SP.1102 var=12 __sp.1103 var=18) wr_res_reg (__tmp.1101 __sp.49)  <1181>;
    () void___rts_jr_w32 (__la.28)  <1182>;
    (__rt_low.1105 var=30 stl=X off=10) assign (__fch_x_low.1091)  <1184>;
    () out (__rt_low.1105)  <1185>;
    (__rt_high.1107 var=31 stl=X off=11) assign (__fch_x_high.1096)  <1187>;
    () out (__rt_high.1107)  <1188>;
    () sink (__sp.1103)  <1196>;
    () sink (i0.1044)  <1198>;
    () sink (i1.1045)  <1199>;
    () sink (j0.132)  <1200>;
    () sink (i.1047)  <1201>;
    () sink (j.1048)  <1202>;
    () sink (x_low.1083)  <1203>;
    () sink (x_high.1089)  <1204>;
    (__adr_x.1176 var=343) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1163)  <1332>;
} #0
0 : 'src/math.c';
----------
0 : (0,235:0,0);
3 : (0,235:13,0);
4 : (0,235:13,0);
6 : (0,241:4,6);
8 : (0,241:28,7);
9 : (0,242:7,8);
10 : (0,242:7,8);
11 : (0,243:9,8);
12 : (0,243:4,8);
14 : (0,243:14,9);
15 : (0,244:13,9);
16 : (0,244:8,9);
18 : (0,244:17,10);
20 : (0,245:12,10);
22 : (0,245:27,11);
23 : (0,246:21,11);
24 : (0,246:16,11);
27 : (0,246:29,13);
29 : (0,247:21,15);
30 : (0,247:44,15);
31 : (0,247:21,15);
33 : (0,248:20,16);
34 : (0,248:24,17);
35 : (0,248:24,17);
36 : (0,248:38,18);
38 : (0,247:21,20);
41 : (0,245:12,27);
43 : (0,250:15,32);
44 : (0,251:14,33);
45 : (0,251:14,33);
46 : (0,252:26,33);
47 : (0,252:12,33);
52 : (0,252:31,34);
53 : (0,252:12,37);
56 : (0,253:12,40);
58 : (0,253:27,41);
59 : (0,254:21,41);
60 : (0,254:16,41);
63 : (0,254:28,43);
65 : (0,254:16,44);
68 : (0,255:19,48);
69 : (0,255:30,49);
71 : (0,253:12,51);
74 : (0,258:11,59);
76 : (0,258:11,59);
78 : (0,258:22,60);
79 : (0,259:13,60);
80 : (0,259:8,60);
82 : (0,260:13,61);
86 : (0,260:13,65);
90 : (0,259:8,68);
91 : (0,261:11,72);
92 : (0,262:10,73);
93 : (0,262:10,73);
94 : (0,263:17,73);
95 : (0,263:8,73);
100 : (0,263:22,74);
101 : (0,263:8,77);
104 : (0,264:8,80);
106 : (0,264:23,81);
107 : (0,265:17,81);
108 : (0,265:12,81);
110 : (0,265:21,82);
111 : (0,266:21,82);
112 : (0,266:16,82);
115 : (0,266:29,84);
117 : (0,267:21,85);
118 : (0,268:22,86);
119 : (0,268:22,86);
120 : (0,269:24,86);
121 : (0,269:20,86);
124 : (0,269:43,88);
126 : (0,269:20,89);
128 : (0,270:22,93);
131 : (0,265:12,98);
135 : (0,264:8,104);
141 : (0,276:28,114);
142 : (0,276:28,114);
143 : (0,276:28,115);
150 : (0,276:15,119);
151 : (0,276:3,122);
152 : (0,276:3,122);
155 : (0,277:4,122);
210 : (0,255:16,47);
217 : (0,258:17,59);
234 : (0,273:12,101);
273 : (0,245:21,10);
274 : (0,245:21,10);
287 : (0,253:21,40);
288 : (0,253:21,40);
301 : (0,264:17,80);
302 : (0,264:17,80);
311 : (0,241:1,5);
323 : (0,241:30,6);
336 : (0,245:21,10);
339 : (0,245:19,10);
340 : (0,245:19,10);
352 : (0,253:21,40);
355 : (0,253:19,40);
356 : (0,253:19,40);
374 : (0,259:30,61);
375 : (0,259:30,61);
387 : (0,264:17,80);
390 : (0,264:15,80);
391 : (0,264:15,80);
----------
55 : (0,235:7,0);
56 : (0,235:7,0);
58 : (0,235:7,0);
59 : (0,235:7,0);
61 : (0,235:20,0);
62 : (0,235:20,0);
64 : (0,235:20,0);
66 : (0,239:12,0);
67 : (0,239:12,0);
69 : (0,239:12,0);
71 : (0,239:15,0);
72 : (0,239:15,0);
74 : (0,239:15,0);
76 : (0,239:18,0);
77 : (0,239:18,0);
79 : (0,239:18,0);
81 : (0,240:14,0);
82 : (0,240:14,0);
84 : (0,240:14,0);
86 : (0,240:16,0);
87 : (0,240:16,0);
89 : (0,240:16,0);
97 : (0,235:13,0);
102 : (0,235:13,0);
103 : (0,235:13,0);
110 : (0,241:21,5);
117 : (0,241:1,5);
118 : (0,241:4,6);
120 : (0,241:50,6);
129 : (0,241:30,6);
130 : (0,241:28,7);
131 : (0,242:11,7);
132 : (0,242:15,0);
134 : (0,242:13,7);
135 : (0,242:19,0);
137 : (0,242:18,7);
140 : (0,242:25,7);
141 : (0,242:4,7);
142 : (0,242:7,8);
143 : (0,243:7,8);
146 : (0,243:9,8);
175 : (0,243:4,8);
176 : (0,244:11,9);
177 : (0,244:14,0);
179 : (0,244:13,9);
208 : (0,244:8,9);
212 : (0,245:20,10);
217 : (0,245:20,10);
251 : (0,245:12,10);
252 : (0,246:19,11);
255 : (0,246:21,11);
284 : (0,246:16,11);
287 : (0,246:30,12);
288 : (0,246:27,12);
290 : (0,247:26,15);
291 : (0,247:29,0);
293 : (0,247:28,15);
294 : (0,247:41,15);
295 : (0,247:40,15);
327 : (0,247:21,15);
328 : (0,248:24,0);
330 : (0,248:22,16);
331 : (0,248:24,17);
334 : (0,248:36,17);
336 : (0,247:21,22);
337 : (0,247:21,22);
338 : (0,246:16,24);
339 : (0,246:16,24);
340 : (0,245:12,29);
341 : (0,245:12,29);
342 : (0,251:16,0);
344 : (0,251:41,32);
345 : (0,251:39,32);
346 : (0,251:12,32);
347 : (0,251:14,33);
348 : (0,252:17,33);
350 : (0,252:20,33);
351 : (0,252:19,33);
352 : (0,252:23,33);
354 : (0,252:22,33);
357 : (0,252:26,33);
386 : (0,252:12,33);
388 : (0,252:38,34);
393 : (0,252:38,34);
395 : (0,252:31,0);
396 : (0,252:31,0);
398 : (0,252:31,0);
399 : (0,252:31,34);
400 : (0,252:31,34);
402 : (0,252:38,0);
405 : (0,252:38,0);
482 : (0,253:20,40);
487 : (0,253:20,40);
521 : (0,253:12,40);
522 : (0,254:19,41);
554 : (0,254:16,41);
555 : (0,254:25,42);
557 : (0,254:31,0);
559 : (0,254:56,42);
560 : (0,254:54,42);
561 : (0,254:28,42);
563 : (0,254:25,42);
565 : (0,254:16,46);
566 : (0,255:16,47);
568 : (0,255:24,47);
570 : (0,255:19,47);
572 : (0,255:16,47);
573 : (0,255:19,48);
576 : (0,255:28,48);
578 : (0,253:12,53);
579 : (0,253:12,53);
587 : (0,244:8,56);
588 : (0,244:8,56);
590 : (0,244:8,56);
608 : (0,258:15,59);
609 : (0,258:18,0);
640 : (0,258:11,59);
641 : (0,259:11,60);
642 : (0,259:15,0);
644 : (0,259:13,60);
673 : (0,259:8,60);
675 : (0,259:29,61);
680 : (0,259:29,61);
683 : (0,259:31,61);
688 : (0,259:31,61);
693 : (0,260:20,64);
698 : (0,260:20,64);
702 : (0,259:8,0);
705 : (0,259:8,0);
706 : (0,259:8,68);
707 : (0,259:8,68);
709 : (0,259:8,0);
712 : (0,259:8,0);
758 : (0,262:13,0);
760 : (0,262:40,72);
763 : (0,262:42,72);
764 : (0,262:37,72);
765 : (0,262:8,72);
766 : (0,262:10,73);
767 : (0,263:12,73);
769 : (0,263:15,73);
770 : (0,263:14,73);
773 : (0,263:17,73);
802 : (0,263:8,73);
804 : (0,263:29,74);
809 : (0,263:29,74);
811 : (0,263:22,0);
814 : (0,263:22,0);
815 : (0,263:22,74);
816 : (0,263:22,74);
818 : (0,263:29,0);
821 : (0,263:29,0);
898 : (0,264:16,80);
903 : (0,264:16,80);
937 : (0,264:8,80);
938 : (0,265:15,81);
970 : (0,265:12,81);
971 : (0,266:19,82);
974 : (0,266:21,82);
1003 : (0,266:16,82);
1004 : (0,266:27,83);
1005 : (0,266:31,0);
1007 : (0,266:29,83);
1008 : (0,266:27,83);
1010 : (0,268:24,85);
1014 : (0,268:43,0);
1016 : (0,268:46,85);
1017 : (0,268:45,85);
1018 : (0,268:40,85);
1019 : (0,268:26,85);
1020 : (0,268:20,85);
1021 : (0,268:22,86);
1022 : (0,269:23,86);
1023 : (0,269:36,86);
1054 : (0,269:20,86);
1055 : (0,269:40,87);
1058 : (0,269:43,87);
1059 : (0,269:40,87);
1061 : (0,269:20,91);
1062 : (0,270:23,92);
1064 : (0,270:20,92);
1066 : (0,266:16,95);
1067 : (0,266:16,95);
1068 : (0,266:16,95);
1069 : (0,265:12,100);
1070 : (0,265:12,100);
1071 : (0,265:12,100);
1072 : (0,273:12,101);
1074 : (0,273:20,101);
1076 : (0,273:15,101);
1078 : (0,273:12,101);
1080 : (0,264:8,106);
1081 : (0,264:8,106);
1082 : (0,264:8,106);
1090 : (0,258:11,109);
1091 : (0,258:11,109);
1093 : (0,258:11,109);
1094 : (0,258:11,109);
1118 : (0,243:4,111);
1119 : (0,243:4,111);
1121 : (0,243:4,111);
1122 : (0,243:4,111);
1142 : (0,276:26,114);
1144 : (0,276:28,114);
1146 : (0,276:29,115);
1159 : (0,276:15,119);
1162 : (0,276:1,121);
1167 : (0,276:1,121);
1168 : (0,276:3,122);
1170 : (0,277:11,122);
1175 : (0,277:11,122);
1177 : (0,277:4,0);
1180 : (0,277:4,0);
1181 : (0,277:4,122);
1182 : (0,277:4,122);
1184 : (0,277:11,0);
1187 : (0,277:11,0);
1301 : (0,242:25,0);
1303 : (0,262:42,0);
1318 : (0,235:20,0);
1417 : (0,255:23,47);
1424 : (0,258:17,59);
1438 : (0,273:19,101);
1570 : (0,245:21,0);
1571 : (0,245:21,10);
1573 : (0,245:21,10);
1574 : (0,245:21,10);
1575 : (0,245:21,10);
1576 : (0,245:21,10);
1577 : (0,245:21,10);
1578 : (0,245:21,10);
1579 : (0,245:21,10);
1592 : (0,253:21,40);
1594 : (0,253:21,40);
1595 : (0,253:21,40);
1596 : (0,253:21,40);
1597 : (0,253:21,40);
1598 : (0,253:21,40);
1599 : (0,253:21,40);
1600 : (0,253:21,40);
1613 : (0,264:17,80);
1615 : (0,264:17,80);
1616 : (0,264:17,80);
1617 : (0,264:17,80);
1618 : (0,264:17,80);
1619 : (0,264:17,80);
1620 : (0,264:17,80);
1621 : (0,264:17,80);
1714 : (0,245:19,0);
1715 : (0,245:19,10);
1716 : (0,245:19,10);
1717 : (0,245:19,10);
1718 : (0,245:19,10);
1719 : (0,245:19,10);
1720 : (0,245:19,10);
1721 : (0,245:19,10);
1723 : (0,245:19,10);
1725 : (0,245:19,10);
1738 : (0,253:19,40);
1739 : (0,253:19,40);
1740 : (0,253:19,40);
1741 : (0,253:19,40);
1742 : (0,253:19,40);
1743 : (0,253:19,40);
1744 : (0,253:19,40);
1746 : (0,253:19,40);
1748 : (0,253:19,40);
1761 : (0,259:30,61);
1762 : (0,259:30,61);
1763 : (0,259:30,61);
1764 : (0,259:30,61);
1765 : (0,259:30,61);
1766 : (0,259:30,61);
1767 : (0,259:30,61);
1769 : (0,259:30,61);
1771 : (0,259:30,61);
1784 : (0,264:15,80);
1785 : (0,264:15,80);
1786 : (0,264:15,80);
1787 : (0,264:15,80);
1788 : (0,264:15,80);
1789 : (0,264:15,80);
1790 : (0,264:15,80);
1792 : (0,264:15,80);
1794 : (0,264:15,80);
1858 : (0,245:15,0);
1860 : (0,245:15,0);
1928 : (0,247:44,15);
1929 : (0,245:21,10);
1930 : (0,254:21,41);
1931 : (0,253:21,40);
1932 : (0,269:24,86);
1933 : (0,265:17,81);
1934 : (0,264:17,80);
1967 : (0,247:21,15);
1972 : (0,246:16,11);
1977 : (0,245:12,10);
1982 : (0,252:12,33);
1986 : (0,254:16,41);
1991 : (0,253:12,40);
1996 : (0,244:8,9);
2001 : (0,259:8,60);
2006 : (0,263:8,73);
2010 : (0,269:20,86);
2015 : (0,266:16,82);
2020 : (0,265:12,81);
2025 : (0,264:8,80);
2030 : (0,258:11,59);
2034 : (0,243:4,8);

