
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:34:13 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern double ceil(double)
Fceil : user_defined, called {
    fnm : "ceil" 'double ceil(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=28 );
}
****
!!  bool f64_lt(float64_t, float64_t)
Ff64_lt : user_defined, called {
    fnm : "f64_lt" 'bool f64_lt(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : ceil typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : x typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   20 : i0 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   21 : i1 typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   22 : j0 typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   23 : i typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=u_int32_t_DMb
   24 : j typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=u_int32_t_DMb
   25 : x_low typ=w08 bnd=B stl=DMb
   26 : x_high typ=w08 bnd=B stl=DMb
   27 : __rd___sp typ=w32 bnd=m
   28 : __la typ=w32 bnd=p tref=w32__
   30 : __rt_low typ=w32 bnd=m tref=__uint__
   31 : __rt_high typ=w32 bnd=m tref=__uint__
   33 : __arg_x_low typ=w32 bnd=m tref=__uint__
   34 : __arg_x_high typ=w32 bnd=m tref=__uint__
   35 : __ct_m28S0 typ=w32 val=-28S0 bnd=m
   37 : __tmp typ=w32 bnd=m
   39 : __ct_0t0 typ=w32 val=0t0 bnd=m
   41 : __adr_x typ=w32 bnd=m adro=19
   43 : __ct_8t0 typ=w32 val=8t0 bnd=m
   45 : __adr_i0 typ=w32 bnd=m adro=20
   47 : __ct_12t0 typ=w32 val=12t0 bnd=m
   49 : __adr_i1 typ=w32 bnd=m adro=21
   51 : __ct_16t0 typ=w32 val=16t0 bnd=m
   53 : __adr_j0 typ=w32 bnd=m adro=22
   55 : __ct_20t0 typ=w32 val=20t0 bnd=m
   57 : __adr_i typ=w32 bnd=m adro=23
   59 : __ct_24t0 typ=w32 val=24t0 bnd=m
   61 : __adr_j typ=w32 bnd=m adro=24
   73 : __fch_x_high typ=w32 bnd=m
   80 : __fch_x_low typ=w32 bnd=m
   86 : __fch_i0 typ=w32 bnd=m
   87 : __ct_20 typ=w32 val=20f bnd=m
   89 : __tmp typ=w32 bnd=m
   90 : __ct_2047 typ=w32 val=2047f bnd=m
   92 : __tmp typ=w32 bnd=m
   95 : __tmp typ=w32 bnd=m
   96 : __fch_j0 typ=w32 bnd=m
   99 : __tmp typ=bool bnd=m
  100 : __fch_j0 typ=w32 bnd=m
  101 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  103 : __tmp typ=bool bnd=m
  107 : __fch_x_low typ=w32 bnd=m
  110 : __fch_x_high typ=w32 bnd=m
  114 : __tmp typ=bool bnd=m
  115 : __fch_i0 typ=w32 bnd=m
  118 : __tmp typ=bool bnd=m
  119 : __ct_m2147483648 typ=t20s_rp12 val=-524288f bnd=m
  123 : __fch_i0 typ=w32 bnd=m
  124 : __fch_i1 typ=w32 bnd=m
  125 : __tmp typ=w32 bnd=m
  128 : __tmp typ=bool bnd=m
  129 : __ct_1072693248 typ=t20s_rp12 val=261888f bnd=m
  133 : __ct_1048575 typ=w32 val=1048575f bnd=m
  135 : __fch_j0 typ=w32 bnd=m
  136 : __tmp typ=w32 bnd=m
  137 : __fch_i0 typ=w32 bnd=m
  139 : __fch_i typ=w32 bnd=m
  140 : __tmp typ=w32 bnd=m
  141 : __fch_i1 typ=w32 bnd=m
  143 : __tmp typ=w32 bnd=m
  146 : __tmp typ=bool bnd=m
  148 : __fch_x_low typ=w32 bnd=m
  151 : __fch_x_high typ=w32 bnd=m
  152 : __ct_28s0 typ=w32 val=28s0 bnd=m
  154 : __tmp typ=w32 bnd=m
  158 : __fch_x_low typ=w32 bnd=m
  161 : __fch_x_high typ=w32 bnd=m
  165 : __tmp typ=bool bnd=m
  166 : __fch_i0 typ=w32 bnd=m
  169 : __tmp typ=bool bnd=m
  170 : __fch_i0 typ=w32 bnd=m
  172 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  174 : __fch_j0 typ=w32 bnd=m
  175 : __tmp typ=w32 bnd=m
  176 : __tmp typ=w32 bnd=m
  178 : __fch_i0 typ=w32 bnd=m
  180 : __fch_i typ=w32 bnd=m
  181 : __tmp typ=w32 bnd=m
  182 : __tmp typ=w32 bnd=m
  186 : __fch_j0 typ=w32 bnd=m
  187 : __ct_51 typ=w32 val=51f bnd=m
  189 : __tmp typ=bool bnd=m
  190 : __fch_j0 typ=w32 bnd=m
  191 : __ct_1024 typ=w32 val=1024f bnd=m
  193 : __tmp typ=bool bnd=m
  195 : __fch_x_low typ=w32 bnd=m
  198 : __fch_x_high typ=w32 bnd=m
  200 : __fch_x_low typ=w32 bnd=m
  203 : __fch_x_high typ=w32 bnd=m
  206 : __fch_x_low typ=w32 bnd=m
  209 : __fch_x_high typ=w32 bnd=m
  212 : __tmp typ=w32 bnd=m
  213 : __ct_4294967295 typ=w32 val=-1f bnd=m
  215 : __fch_j0 typ=w32 bnd=m
  218 : __tmp typ=w32 bnd=m
  219 : __tmp typ=w32 bnd=m
  220 : __fch_i1 typ=w32 bnd=m
  222 : __fch_i typ=w32 bnd=m
  223 : __tmp typ=w32 bnd=m
  226 : __tmp typ=bool bnd=m
  228 : __fch_x_low typ=w32 bnd=m
  231 : __fch_x_high typ=w32 bnd=m
  234 : __tmp typ=w32 bnd=m
  238 : __fch_x_low typ=w32 bnd=m
  241 : __fch_x_high typ=w32 bnd=m
  245 : __tmp typ=bool bnd=m
  246 : __fch_i0 typ=w32 bnd=m
  249 : __tmp typ=bool bnd=m
  250 : __fch_j0 typ=w32 bnd=m
  253 : __tmp typ=bool bnd=m
  254 : __fch_i0 typ=w32 bnd=m
  255 : __ct_1 typ=w32 val=1f bnd=m
  257 : __tmp typ=w32 bnd=m
  258 : __fch_i1 typ=w32 bnd=m
  262 : __ct_52 typ=w32 val=52f bnd=m
  264 : __fch_j0 typ=w32 bnd=m
  265 : __tmp typ=w32 bnd=m
  266 : __tmp typ=w32 bnd=m
  267 : __tmp typ=w32 bnd=m
  268 : __fch_j typ=w32 bnd=m
  269 : __fch_i1 typ=w32 bnd=m
  271 : __tmp typ=bool bnd=m
  272 : __fch_i0 typ=w32 bnd=m
  275 : __tmp typ=w32 bnd=m
  276 : __fch_j typ=w32 bnd=m
  278 : __fch_i1 typ=w32 bnd=m
  280 : __fch_i typ=w32 bnd=m
  281 : __tmp typ=w32 bnd=m
  282 : __tmp typ=w32 bnd=m
  284 : __fch_i0 typ=w32 bnd=m
  286 : __fch_i1 typ=w32 bnd=m
  300 : __fch_x_low typ=w32 bnd=m
  303 : __fch_x_high typ=w32 bnd=m
  306 : __tmp typ=w32 bnd=m
  319 : __ct_m1023 typ=w32 val=-1023f bnd=m
  320 : __ct_m20 typ=w32 val=-20f bnd=m
  329 : __ct_4t0 typ=w32 val=4t0 bnd=m
  330 : __adr_x typ=w32 bnd=m adro=19
  331 : __adr_x typ=w32 bnd=m adro=19
  332 : __adr_x typ=w32 bnd=m adro=19
  333 : __adr_x typ=w32 bnd=m adro=19
  334 : __adr_x typ=w32 bnd=m adro=19
  335 : __adr_x typ=w32 bnd=m adro=19
  336 : __adr_x typ=w32 bnd=m adro=19
  337 : __adr_x typ=w32 bnd=m adro=19
  338 : __adr_x typ=w32 bnd=m adro=19
  339 : __adr_x typ=w32 bnd=m adro=19
  341 : __adr_x typ=w32 bnd=m adro=19
  342 : __adr_x typ=w32 bnd=m adro=19
  430 : a_low typ=w32 bnd=m tref=__uint__
  431 : a_high typ=w32 bnd=m tref=__uint__
  432 : b_low typ=w32 bnd=m tref=__uint__
  433 : b_high typ=w32 bnd=m tref=__uint__
  434 : f64_lt typ=t21s_s2 val=0r bnd=m
  435 : __link typ=w32 bnd=m
  436 : __tmp typ=w32 bnd=m
  456 : a_low typ=w32 bnd=m tref=__uint__
  457 : a_high typ=w32 bnd=m tref=__uint__
  458 : b_low typ=w32 bnd=m tref=__uint__
  459 : b_high typ=w32 bnd=m tref=__uint__
  460 : f64_add typ=t21s_s2 val=0r bnd=m
  461 : __link typ=w32 bnd=m
  463 : __tmp typ=w32 bnd=m
  464 : __tmp typ=w32 bnd=m
  481 : __ct_2281731484 typ=w32 val=-2013235812f bnd=m
  482 : __ct_2117592124 typ=w32 val=2117592124f bnd=m
  491 : __either typ=bool bnd=m
  492 : __trgt typ=t13s_s2 val=0j bnd=m
  493 : __trgt typ=t21s_s2 val=0j bnd=m
  494 : __trgt typ=t13s_s2 val=0j bnd=m
  495 : __trgt typ=t21s_s2 val=0j bnd=m
  496 : __trgt typ=t13s_s2 val=0j bnd=m
  497 : __trgt typ=t21s_s2 val=0j bnd=m
  498 : __trgt typ=t13s_s2 val=0j bnd=m
  499 : __trgt typ=t13s_s2 val=0j bnd=m
  500 : __trgt typ=t21s_s2 val=0j bnd=m
  501 : __trgt typ=t13s_s2 val=0j bnd=m
  502 : __trgt typ=t21s_s2 val=0j bnd=m
  503 : __trgt typ=t13s_s2 val=0j bnd=m
  504 : __trgt typ=t21s_s2 val=0j bnd=m
  505 : __trgt typ=t13s_s2 val=0j bnd=m
  506 : __trgt typ=t21s_s2 val=0j bnd=m
  507 : __trgt typ=t13s_s2 val=0j bnd=m
  508 : __trgt typ=t13s_s2 val=0j bnd=m
  509 : __trgt typ=t21s_s2 val=0j bnd=m
  510 : __trgt typ=t13s_s2 val=0j bnd=m
  511 : __trgt typ=t21s_s2 val=0j bnd=m
  512 : __trgt typ=t13s_s2 val=0j bnd=m
  513 : __trgt typ=t21s_s2 val=0j bnd=m
  514 : __trgt typ=t13s_s2 val=0j bnd=m
  515 : __trgt typ=t21s_s2 val=0j bnd=m
  516 : __trgt typ=t13s_s2 val=0j bnd=m
  517 : __trgt typ=t13s_s2 val=0j bnd=m
  518 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fceil {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (i0.19 var=20) source ()  <30>;
    (i1.20 var=21) source ()  <31>;
    (j0.21 var=22) source ()  <32>;
    (i.22 var=23) source ()  <33>;
    (j.23 var=24) source ()  <34>;
    (x_low.24 var=25) source ()  <35>;
    (x_high.25 var=26) source ()  <36>;
    (__la.27 var=28 stl=X off=1) inp ()  <38>;
    (__la.28 var=28) deassign (__la.27)  <39>;
    (__arg_x_low.36 var=33 stl=X off=12) inp ()  <47>;
    (__arg_x_low.37 var=33) deassign (__arg_x_low.36)  <48>;
    (__arg_x_high.40 var=34 stl=X off=13) inp ()  <51>;
    (__arg_x_high.41 var=34) deassign (__arg_x_high.40)  <52>;
    (__rd___sp.44 var=27) rd_res_reg (__R_SP.11 __sp.17)  <55>;
    (__ct_m28S0.45 var=35) const ()  <56>;
    (__tmp.47 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_m28S0.45)  <58>;
    (__R_SP.48 var=12 __sp.49 var=18) wr_res_reg (__tmp.47 __sp.17)  <59>;
    (__rd___sp.50 var=27) rd_res_reg (__R_SP.11 __sp.49)  <61>;
    (__ct_0t0.51 var=39) const ()  <62>;
    (__adr_x.53 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_0t0.51)  <64>;
    (__rd___sp.55 var=27) rd_res_reg (__R_SP.11 __sp.49)  <66>;
    (__rd___sp.60 var=27) rd_res_reg (__R_SP.11 __sp.49)  <71>;
    (__rd___sp.65 var=27) rd_res_reg (__R_SP.11 __sp.49)  <76>;
    (__rd___sp.70 var=27) rd_res_reg (__R_SP.11 __sp.49)  <81>;
    (__rd___sp.75 var=27) rd_res_reg (__R_SP.11 __sp.49)  <86>;
    (__M_DMw.86 var=5 x_low.87 var=25) store (__arg_x_low.37 __adr_x.53 x_low.24)  <97>;
    (__M_DMw.92 var=5 x_high.93 var=26) store (__arg_x_high.41 __adr_x.1171 x_high.25)  <102>;
    (__ct_4t0.1162 var=329) const ()  <1318>;
    (__adr_x.1171 var=338) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1328>;
    call {
        () chess_separator_scheduler ()  <103>;
    } #4 off=1
    #323 off=2
    (__ct_8t0.56 var=43) const ()  <67>;
    (__adr_i0.58 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.56)  <69>;
    (__fch_x_high.100 var=73) load (__M_DMw.4 __adr_x.1172 x_high.93)  <110>;
    (__M_DMw.107 var=5 i0.108 var=20) store (__fch_x_high.100 __adr_i0.58 i0.19)  <117>;
    (__adr_x.1172 var=339) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1329>;
    call {
        () chess_separator_scheduler ()  <118>;
    } #6 off=3
    #335 off=4
    (__ct_12t0.61 var=47) const ()  <72>;
    (__adr_i1.63 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_12t0.61)  <74>;
    (__fch_x_low.110 var=80) load (__M_DMw.4 __adr_x.53 x_low.87)  <120>;
    (__M_DMw.119 var=5 i1.120 var=21) store (__fch_x_low.110 __adr_i1.63 i1.20)  <129>;
    call {
        () chess_separator_scheduler ()  <130>;
    } #8 off=5
    #9 off=6
    (__ct_16t0.66 var=51) const ()  <77>;
    (__adr_j0.68 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_16t0.66)  <79>;
    (__fch_i0.121 var=86) load (__M_DMw.4 __adr_i0.58 i0.108)  <131>;
    (__ct_20.122 var=87) const ()  <132>;
    (__tmp.124 var=89) __sint__rs___sint___sint (__fch_i0.121 __ct_20.122)  <134>;
    (__ct_2047.125 var=90) const ()  <135>;
    (__tmp.127 var=92) __sint__ad___sint___sint (__tmp.124 __ct_2047.125)  <137>;
    (__tmp.130 var=95) __sint__pl___sint___sint (__tmp.127 __ct_m1023.1147)  <140>;
    (__M_DMw.131 var=5 j0.132 var=22) store (__tmp.130 __adr_j0.68 j0.21)  <141>;
    (__ct_m1023.1147 var=319) const ()  <1301>;
    call {
        () chess_separator_scheduler ()  <142>;
    } #10 off=7
    #11 off=8
    (__ct_20t0.71 var=55) const ()  <82>;
    (__adr_i.73 var=57) __Pvoid__pl___Pvoid___sint (__rd___sp.70 __ct_20t0.71)  <84>;
    (__fch_j0.133 var=96) load (__M_DMw.4 __adr_j0.68 j0.132)  <143>;
    (__tmp.136 var=99) bool__lt___sint___sint (__fch_j0.133 __ct_20.122)  <146>;
    (__ct_0.166 var=101) const ()  <177>;
    (__ct_28s0.380 var=152) const ()  <396>;
    (__ct_4294967295.704 var=213) const ()  <758>;
    (f64_lt.1294 var=434) const ()  <1584>;
    (f64_add.1362 var=460) const ()  <1728>;
    (__ct_2281731484.1460 var=481) const ()  <1872>;
    (__ct_2117592124.1461 var=482) const ()  <1874>;
    (__trgt.1514 var=517) const ()  <2047>;
    () void_br_bool_t13s_s2 (__tmp.136 __trgt.1514)  <2048>;
    (__either.1515 var=491) undefined ()  <2049>;
    if {
        {
            () if_expr (__either.1515)  <175>;
        } #13
        {
            #15 off=40
            (__fch_j0.165 var=100) load (__M_DMw.4 __adr_j0.68 j0.132)  <176>;
            (__tmp.168 var=103) bool__lt___sint___sint (__fch_j0.165 __ct_0.166)  <179>;
            (__trgt.1492 var=503) const ()  <2009>;
            () void_br_bool_t13s_s2 (__tmp.168 __trgt.1492)  <2010>;
            (__either.1493 var=491) undefined ()  <2011>;
            if {
                {
                    () if_expr (__either.1493)  <208>;
                } #17
                {
                    #351 off=59
                    (__fch_x_low.200 var=107) load (__M_DMw.4 __adr_x.53 x_low.87)  <212>;
                    (__fch_x_high.205 var=110) load (__M_DMw.4 __adr_x.1163 x_high.93)  <217>;
                    (__adr_x.1163 var=330) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1320>;
                    (__link.1363 var=461) w32_jal_t21s_s2 (f64_add.1362)  <1729>;
                    call {
                        (a_low.1364 var=456 stl=X off=12) assign (__ct_2281731484.1460)  <1730>;
                        (a_high.1365 var=457 stl=X off=13) assign (__ct_2117592124.1461)  <1731>;
                        (b_low.1366 var=458 stl=X off=14) assign (__fch_x_low.200)  <1732>;
                        (b_high.1367 var=459 stl=X off=15) assign (__fch_x_high.205)  <1733>;
                        (__link.1368 var=461 stl=X off=1) assign (__link.1363)  <1734>;
                        (__tmp.1369 var=463 stl=X off=10 __tmp.1370 var=464 stl=X off=11) Ff64_add (__link.1368 a_low.1364 a_high.1365 b_low.1366 b_high.1367)  <1735>;
                        (__tmp.1372 var=463) deassign (__tmp.1369)  <1737>;
                        (__tmp.1374 var=464) deassign (__tmp.1370)  <1739>;
                    } #352 off=60
                    #348 off=61
                    (__link.1295 var=435) w32_jal_t21s_s2 (f64_lt.1294)  <1585>;
                    call {
                        (a_low.1297 var=430 stl=X off=11) assign (__ct_0.166)  <1587>;
                        (a_high.1298 var=431 stl=X off=12) assign (__ct_0.166)  <1588>;
                        (b_low.1299 var=432 stl=X off=13) assign (__tmp.1372)  <1589>;
                        (b_high.1300 var=433 stl=X off=14) assign (__tmp.1374)  <1590>;
                        (__link.1301 var=435 stl=X off=1) assign (__link.1295)  <1591>;
                        (__tmp.1302 var=436 stl=X off=10) Ff64_lt (__link.1301 a_low.1297 a_high.1298 b_low.1299 b_high.1300)  <1592>;
                        (__tmp.1303 var=436) deassign (__tmp.1302)  <1593>;
                    } #285 off=62
                    #286 off=63
                    (__tmp.1467 var=114) bool__eq___sint___sint (__tmp.1303 __ct_0.166)  <1943>;
                    (__trgt.1481 var=496) const ()  <1990>;
                    () void_br_bool_t13s_s2 (__tmp.1467 __trgt.1481)  <1991>;
                    (__either.1482 var=491) undefined ()  <1992>;
                    if {
                        {
                            () if_expr (__either.1482)  <251>;
                        } #21
                        {
                        } #43 off=75
                        {
                            #23 off=64
                            (__fch_i0.239 var=115) load (__M_DMw.4 __adr_i0.58 i0.108)  <252>;
                            (__tmp.242 var=118) bool__lt___sint___sint (__fch_i0.239 __ct_0.166)  <255>;
                            (__trgt.1478 var=494) const ()  <1985>;
                            () void_br_bool_t13s_s2 (__tmp.242 __trgt.1478)  <1986>;
                            (__either.1479 var=491) undefined ()  <1987>;
                            if {
                                {
                                    () if_expr (__either.1479)  <284>;
                                } #25
                                {
                                    #27 off=71
                                    (__ct_m2147483648.271 var=119) const ()  <285>;
                                    (__M_DMw.273 var=5 i0.274 var=20) store (__ct_m2147483648.271 __adr_i0.58 i0.108)  <287>;
                                    call {
                                        () chess_separator_scheduler ()  <288>;
                                    } #28 off=72
                                    #29 off=73
                                    (__M_DMw.277 var=5 i1.278 var=21) store (__ct_0.166 __adr_i1.63 i1.120)  <291>;
                                } #26
                                {
                                    #32 off=65
                                    (__fch_i0.279 var=123) load (__M_DMw.4 __adr_i0.58 i0.108)  <293>;
                                    (__fch_i1.280 var=124) load (__M_DMw.4 __adr_i1.63 i1.120)  <294>;
                                    (__tmp.281 var=125) __sint__or___sint___sint (__fch_i0.279 __fch_i1.280)  <295>;
                                    (__tmp.1466 var=128) bool__eq___sint___sint (__tmp.281 __ct_0.166)  <1942>;
                                    (__trgt.1475 var=492) const ()  <1980>;
                                    () void_br_bool_t13s_s2 (__tmp.1466 __trgt.1475)  <1981>;
                                    (__either.1476 var=491) undefined ()  <1982>;
                                    if {
                                        {
                                            () if_expr (__either.1476)  <327>;
                                        } #34
                                        {
                                        } #40 off=69
                                        {
                                            #36 off=66
                                            (__ct_1072693248.313 var=129) const ()  <328>;
                                            (__M_DMw.315 var=5 i0.316 var=20) store (__ct_1072693248.313 __adr_i0.58 i0.108)  <330>;
                                            call {
                                                () chess_separator_scheduler ()  <331>;
                                            } #37 off=67
                                            #38 off=68
                                            (__M_DMw.319 var=5 i1.320 var=21) store (__ct_0.166 __adr_i1.63 i1.120)  <334>;
                                            (__trgt.1477 var=493) const ()  <1983>;
                                            () void_j_t21s_s2 (__trgt.1477)  <1984>;
                                        } #35
                                        {
                                            (i0.321 var=20) merge (i0.108 i0.316)  <336>;
                                            (i1.322 var=21) merge (i1.120 i1.320)  <337>;
                                        } #41
                                    } #33
                                    #425 off=70
                                    (__trgt.1480 var=495) const ()  <1988>;
                                    () void_j_t21s_s2 (__trgt.1480)  <1989>;
                                } #31
                                {
                                    (i0.323 var=20) merge (i0.274 i0.321)  <338>;
                                    (i1.324 var=21) merge (i1.278 i1.322)  <339>;
                                } #42
                            } #24
                            #426 off=74
                            (__trgt.1483 var=497) const ()  <1993>;
                            () void_j_t21s_s2 (__trgt.1483)  <1994>;
                        } #22
                        {
                            (i0.325 var=20) merge (i0.108 i0.323)  <340>;
                            (i1.326 var=21) merge (i1.120 i1.324)  <341>;
                        } #44
                    } #20
                } #18
                {
                    #46 off=41
                    (__ct_1048575.327 var=133) const ()  <342>;
                    (__fch_j0.329 var=135) load (__M_DMw.4 __adr_j0.68 j0.132)  <344>;
                    (__tmp.330 var=136) __uint__rs___uint___sint (__ct_1048575.327 __fch_j0.329)  <345>;
                    (__M_DMw.331 var=5 i.332 var=23) store (__tmp.330 __adr_i.73 i.22)  <346>;
                    call {
                        () chess_separator_scheduler ()  <347>;
                    } #47 off=42
                    #48 off=43
                    (__fch_i0.333 var=137) load (__M_DMw.4 __adr_i0.58 i0.108)  <348>;
                    (__fch_i.335 var=139) load (__M_DMw.4 __adr_i.73 i.332)  <350>;
                    (__tmp.336 var=140) __uint__ad___uint___uint (__fch_i0.333 __fch_i.335)  <351>;
                    (__fch_i1.337 var=141) load (__M_DMw.4 __adr_i1.63 i1.120)  <352>;
                    (__tmp.339 var=143) __uint__or___uint___uint (__tmp.336 __fch_i1.337)  <354>;
                    (__tmp.342 var=146) bool__eq___uint___uint (__tmp.339 __ct_0.166)  <357>;
                    (__trgt.1484 var=498) const ()  <1995>;
                    () void_br_bool_t13s_s2 (__tmp.342 __trgt.1484)  <1996>;
                    (__either.1485 var=491) undefined ()  <1997>;
                    if {
                        {
                            () if_expr (__either.1485)  <386>;
                            () chess_rear_then ()  <1998>;
                        } #50
                        {
                            (__fch_x_low.372 var=148) load (__M_DMw.4 __adr_x.53 x_low.87)  <388>;
                            (__fch_x_high.377 var=151) load (__M_DMw.4 __adr_x.1164 x_high.93)  <393>;
                            (__rd___sp.379 var=27) rd_res_reg (__R_SP.11 __sp.49)  <395>;
                            (__tmp.382 var=154) __Pvoid__pl___Pvoid___sint (__rd___sp.379 __ct_28s0.380)  <398>;
                            (__R_SP.383 var=12 __sp.384 var=18) wr_res_reg (__tmp.382 __sp.49)  <399>;
                            () void___rts_jr_w32 (__la.28)  <400>;
                            (__rt_low.386 var=30 stl=X off=10) assign (__fch_x_low.372)  <402>;
                            () out (__rt_low.386)  <403>;
                            (__rt_high.388 var=31 stl=X off=11) assign (__fch_x_high.377)  <405>;
                            () out (__rt_high.388)  <406>;
                            () sink (__sp.384)  <414>;
                            () sink (i0.108)  <416>;
                            () sink (i1.120)  <417>;
                            () sink (j0.132)  <418>;
                            () sink (i.332)  <419>;
                            () sink (x_low.87)  <421>;
                            () sink (x_high.93)  <422>;
                            (__adr_x.1164 var=331) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1321>;
                        } #54 off=45 nxt=-2
                        {
                        } #55 off=44
                        {
                        } #56
                    } #49
                    #367 off=46
                    (__fch_x_low.450 var=158) load (__M_DMw.4 __adr_x.53 x_low.87)  <482>;
                    (__fch_x_high.455 var=161) load (__M_DMw.4 __adr_x.1165 x_high.93)  <487>;
                    (__adr_x.1165 var=332) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1322>;
                    (__link.1384 var=461) w32_jal_t21s_s2 (f64_add.1362)  <1752>;
                    call {
                        (a_low.1385 var=456 stl=X off=12) assign (__ct_2281731484.1460)  <1753>;
                        (a_high.1386 var=457 stl=X off=13) assign (__ct_2117592124.1461)  <1754>;
                        (b_low.1387 var=458 stl=X off=14) assign (__fch_x_low.450)  <1755>;
                        (b_high.1388 var=459 stl=X off=15) assign (__fch_x_high.455)  <1756>;
                        (__link.1389 var=461 stl=X off=1) assign (__link.1384)  <1757>;
                        (__tmp.1390 var=463 stl=X off=10 __tmp.1391 var=464 stl=X off=11) Ff64_add (__link.1389 a_low.1385 a_high.1386 b_low.1387 b_high.1388)  <1758>;
                        (__tmp.1393 var=463) deassign (__tmp.1390)  <1760>;
                        (__tmp.1395 var=464) deassign (__tmp.1391)  <1762>;
                    } #368 off=47
                    #364 off=48
                    (__link.1313 var=435) w32_jal_t21s_s2 (f64_lt.1294)  <1606>;
                    call {
                        (a_low.1315 var=430 stl=X off=11) assign (__ct_0.166)  <1608>;
                        (a_high.1316 var=431 stl=X off=12) assign (__ct_0.166)  <1609>;
                        (b_low.1317 var=432 stl=X off=13) assign (__tmp.1393)  <1610>;
                        (b_high.1318 var=433 stl=X off=14) assign (__tmp.1395)  <1611>;
                        (__link.1319 var=435 stl=X off=1) assign (__link.1313)  <1612>;
                        (__tmp.1320 var=436 stl=X off=10) Ff64_lt (__link.1319 a_low.1315 a_high.1316 b_low.1317 b_high.1318)  <1613>;
                        (__tmp.1321 var=436) deassign (__tmp.1320)  <1614>;
                    } #299 off=49
                    #300 off=50
                    (__tmp.1469 var=165) bool__eq___sint___sint (__tmp.1321 __ct_0.166)  <1945>;
                    (__trgt.1489 var=501) const ()  <2004>;
                    () void_br_bool_t13s_s2 (__tmp.1469 __trgt.1489)  <2005>;
                    (__either.1490 var=491) undefined ()  <2006>;
                    if {
                        {
                            () if_expr (__either.1490)  <521>;
                        } #59
                        {
                        } #73 off=57
                        {
                            #211 off=51
                            (__fch_i0.489 var=166) load (__M_DMw.4 __adr_i0.58 i0.108)  <522>;
                            (__tmp.1468 var=169) bool__ge___sint___sint (__ct_0.166 __fch_i0.489)  <1944>;
                            (__trgt.1486 var=499) const ()  <1999>;
                            () void_br_bool_t13s_s2 (__tmp.1468 __trgt.1486)  <2000>;
                            (__either.1487 var=491) undefined ()  <2001>;
                            if {
                                {
                                    () if_expr (__either.1487)  <554>;
                                } #63
                                {
                                } #67 off=53
                                {
                                    (__fch_i0.521 var=170) load (__M_DMw.4 __adr_i0.58 i0.108)  <555>;
                                    (__ct_1048576.523 var=172) const ()  <557>;
                                    (__fch_j0.525 var=174) load (__M_DMw.4 __adr_j0.68 j0.132)  <559>;
                                    (__tmp.526 var=175) __uint__rs___uint___sint (__ct_1048576.523 __fch_j0.525)  <560>;
                                    (__tmp.527 var=176) __uint__pl___uint___uint (__fch_i0.521 __tmp.526)  <561>;
                                    (__M_DMw.529 var=5 i0.530 var=20) store (__tmp.527 __adr_i0.58 i0.108)  <563>;
                                    (__trgt.1488 var=500) const ()  <2002>;
                                    () void_j_t21s_s2 (__trgt.1488)  <2003>;
                                } #65 off=52
                                {
                                    (i0.531 var=20) merge (i0.108 i0.530)  <565>;
                                } #68
                            } #62
                            #217 off=54
                            (__fch_i0.532 var=178) load (__M_DMw.4 __adr_i0.58 i0.531)  <566>;
                            (__fch_i.534 var=180) load (__M_DMw.4 __adr_i.73 i.332)  <568>;
                            (__tmp.536 var=182) __uint__ad___uint___uint (__fch_i0.532 __tmp.1221)  <570>;
                            (__M_DMw.538 var=5 i0.539 var=20) store (__tmp.536 __adr_i0.58 i0.531)  <572>;
                            (__tmp.1221 var=181) __uint__er___uint___uint (__fch_i.534 __ct_4294967295.704)  <1424>;
                            call {
                                () chess_separator_scheduler ()  <573>;
                            } #70 off=55
                            #71 off=56
                            (__M_DMw.542 var=5 i1.543 var=21) store (__ct_0.166 __adr_i1.63 i1.120)  <576>;
                            (__trgt.1491 var=502) const ()  <2007>;
                            () void_j_t21s_s2 (__trgt.1491)  <2008>;
                        } #60
                        {
                            (i0.544 var=20) merge (i0.108 i0.539)  <578>;
                            (i1.545 var=21) merge (i1.120 i1.543)  <579>;
                        } #74
                    } #58
                    #428 off=58
                    (__trgt.1494 var=504) const ()  <2012>;
                    () void_j_t21s_s2 (__trgt.1494)  <2013>;
                } #45
                {
                    (i0.553 var=20) merge (i0.325 i0.544)  <587>;
                    (i1.554 var=21) merge (i1.326 i1.545)  <588>;
                    (i.556 var=23) merge (i.22 i.332)  <590>;
                } #75
            } #16
        } #14
        {
            #224 off=9
            (__fch_j0.574 var=186) load (__M_DMw.4 __adr_j0.68 j0.132)  <608>;
            (__ct_51.575 var=187) const ()  <609>;
            (__tmp.1225 var=189) bool__lt___sint___sint (__ct_51.575 __fch_j0.574)  <1431>;
            (__trgt.1512 var=516) const ()  <2043>;
            () void_br_bool_t13s_s2 (__tmp.1225 __trgt.1512)  <2044>;
            (__either.1513 var=491) undefined ()  <2045>;
            if {
                {
                    () if_expr (__either.1513)  <640>;
                    () chess_rear_then ()  <2046>;
                } #79
                {
                    #81 off=34
                    (__fch_j0.606 var=190) load (__M_DMw.4 __adr_j0.68 j0.132)  <641>;
                    (__ct_1024.607 var=191) const ()  <642>;
                    (__tmp.609 var=193) bool__eq___sint___sint (__fch_j0.606 __ct_1024.607)  <644>;
                    (__trgt.1495 var=505) const ()  <2014>;
                    () void_br_bool_t13s_s2 (__tmp.609 __trgt.1495)  <2015>;
                    (__either.1496 var=491) undefined ()  <2016>;
                    if {
                        {
                            () if_expr (__either.1496)  <673>;
                        } #83
                        {
                            #386 off=36
                            (__fch_x_low.639 var=195) load (__M_DMw.4 __adr_x.53 x_low.87)  <675>;
                            (__fch_x_high.644 var=198) load (__M_DMw.4 __adr_x.1166 x_high.93)  <680>;
                            (__fch_x_low.647 var=200) load (__M_DMw.4 __adr_x.53 x_low.87)  <683>;
                            (__fch_x_high.652 var=203) load (__M_DMw.4 __adr_x.1167 x_high.93)  <688>;
                            (__adr_x.1166 var=333) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1323>;
                            (__adr_x.1167 var=334) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1324>;
                            (__link.1405 var=461) w32_jal_t21s_s2 (f64_add.1362)  <1775>;
                            call {
                                (a_low.1406 var=456 stl=X off=12) assign (__fch_x_low.639)  <1776>;
                                (a_high.1407 var=457 stl=X off=13) assign (__fch_x_high.644)  <1777>;
                                (b_low.1408 var=458 stl=X off=14) assign (__fch_x_low.647)  <1778>;
                                (b_high.1409 var=459 stl=X off=15) assign (__fch_x_high.652)  <1779>;
                                (__link.1410 var=461 stl=X off=1) assign (__link.1405)  <1780>;
                                (__tmp.1411 var=463 stl=X off=10 __tmp.1412 var=464 stl=X off=11) Ff64_add (__link.1410 a_low.1406 a_high.1407 b_low.1408 b_high.1409)  <1781>;
                                (__tmp.1414 var=463) deassign (__tmp.1411)  <1783>;
                                (__tmp.1416 var=464) deassign (__tmp.1412)  <1785>;
                            } #387 off=37
                        } #84
                        {
                            (__fch_x_low.656 var=206) load (__M_DMw.4 __adr_x.53 x_low.87)  <693>;
                            (__fch_x_high.661 var=209) load (__M_DMw.4 __adr_x.1168 x_high.93)  <698>;
                            (__adr_x.1168 var=335) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1325>;
                            (__trgt.1497 var=506) const ()  <2017>;
                            () void_j_t21s_s2 (__trgt.1497)  <2018>;
                        } #88 off=35
                        {
                            (__rt_low.1143 var=30) merge (__tmp.1414 __fch_x_low.656)  <1297>;
                            (__rt_high.1146 var=31) merge (__tmp.1416 __fch_x_high.661)  <1300>;
                        } #90
                    } #82
                    #92 off=38 nxt=-2
                    (__rd___sp.664 var=27) rd_res_reg (__R_SP.11 __sp.49)  <702>;
                    (__tmp.667 var=212) __Pvoid__pl___Pvoid___sint (__rd___sp.664 __ct_28s0.380)  <705>;
                    (__R_SP.668 var=12 __sp.669 var=18) wr_res_reg (__tmp.667 __sp.49)  <706>;
                    () void___rts_jr_w32 (__la.28)  <707>;
                    (__rt_low.671 var=30 stl=X off=10) assign (__rt_low.1143)  <709>;
                    () out (__rt_low.671)  <710>;
                    (__rt_high.673 var=31 stl=X off=11) assign (__rt_high.1146)  <712>;
                    () out (__rt_high.673)  <713>;
                    () sink (__sp.669)  <721>;
                    () sink (i0.108)  <723>;
                    () sink (i1.120)  <724>;
                    () sink (j0.132)  <725>;
                    () sink (x_low.87)  <728>;
                    () sink (x_high.93)  <729>;
                    (i0.683 var=20) never ()  <737>;
                    (i1.684 var=21) never ()  <738>;
                    (i.686 var=23) never ()  <740>;
                    (j.687 var=24) never ()  <741>;
                } #80
                {
                    #94 off=10
                    (__fch_j0.706 var=215) load (__M_DMw.4 __adr_j0.68 j0.132)  <760>;
                    (__tmp.709 var=218) __sint__pl___sint___sint (__fch_j0.706 __ct_m20.1148)  <763>;
                    (__tmp.710 var=219) __uint__rs___uint___sint (__ct_4294967295.704 __tmp.709)  <764>;
                    (__M_DMw.711 var=5 i.712 var=23) store (__tmp.710 __adr_i.73 i.22)  <765>;
                    (__ct_m20.1148 var=320) const ()  <1303>;
                    call {
                        () chess_separator_scheduler ()  <766>;
                    } #95 off=11
                    #96 off=12
                    (__fch_i1.713 var=220) load (__M_DMw.4 __adr_i1.63 i1.120)  <767>;
                    (__fch_i.715 var=222) load (__M_DMw.4 __adr_i.73 i.712)  <769>;
                    (__tmp.716 var=223) __uint__ad___uint___uint (__fch_i1.713 __fch_i.715)  <770>;
                    (__tmp.719 var=226) bool__eq___uint___uint (__tmp.716 __ct_0.166)  <773>;
                    (__trgt.1498 var=507) const ()  <2019>;
                    () void_br_bool_t13s_s2 (__tmp.719 __trgt.1498)  <2020>;
                    (__either.1499 var=491) undefined ()  <2021>;
                    if {
                        {
                            () if_expr (__either.1499)  <802>;
                            () chess_rear_then ()  <2022>;
                        } #98
                        {
                            (__fch_x_low.749 var=228) load (__M_DMw.4 __adr_x.53 x_low.87)  <804>;
                            (__fch_x_high.754 var=231) load (__M_DMw.4 __adr_x.1169 x_high.93)  <809>;
                            (__rd___sp.756 var=27) rd_res_reg (__R_SP.11 __sp.49)  <811>;
                            (__tmp.759 var=234) __Pvoid__pl___Pvoid___sint (__rd___sp.756 __ct_28s0.380)  <814>;
                            (__R_SP.760 var=12 __sp.761 var=18) wr_res_reg (__tmp.759 __sp.49)  <815>;
                            () void___rts_jr_w32 (__la.28)  <816>;
                            (__rt_low.763 var=30 stl=X off=10) assign (__fch_x_low.749)  <818>;
                            () out (__rt_low.763)  <819>;
                            (__rt_high.765 var=31 stl=X off=11) assign (__fch_x_high.754)  <821>;
                            () out (__rt_high.765)  <822>;
                            () sink (__sp.761)  <830>;
                            () sink (i0.108)  <832>;
                            () sink (i1.120)  <833>;
                            () sink (j0.132)  <834>;
                            () sink (i.712)  <835>;
                            () sink (x_low.87)  <837>;
                            () sink (x_high.93)  <838>;
                            (__adr_x.1169 var=336) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1326>;
                        } #102 off=14 nxt=-2
                        {
                        } #103 off=13
                        {
                        } #104
                    } #97
                    #402 off=15
                    (__fch_x_low.827 var=238) load (__M_DMw.4 __adr_x.53 x_low.87)  <898>;
                    (__fch_x_high.832 var=241) load (__M_DMw.4 __adr_x.1170 x_high.93)  <903>;
                    (__adr_x.1170 var=337) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1327>;
                    (__link.1426 var=461) w32_jal_t21s_s2 (f64_add.1362)  <1798>;
                    call {
                        (a_low.1427 var=456 stl=X off=12) assign (__ct_2281731484.1460)  <1799>;
                        (a_high.1428 var=457 stl=X off=13) assign (__ct_2117592124.1461)  <1800>;
                        (b_low.1429 var=458 stl=X off=14) assign (__fch_x_low.827)  <1801>;
                        (b_high.1430 var=459 stl=X off=15) assign (__fch_x_high.832)  <1802>;
                        (__link.1431 var=461 stl=X off=1) assign (__link.1426)  <1803>;
                        (__tmp.1432 var=463 stl=X off=10 __tmp.1433 var=464 stl=X off=11) Ff64_add (__link.1431 a_low.1427 a_high.1428 b_low.1429 b_high.1430)  <1804>;
                        (__tmp.1435 var=463) deassign (__tmp.1432)  <1806>;
                        (__tmp.1437 var=464) deassign (__tmp.1433)  <1808>;
                    } #403 off=16
                    #399 off=17
                    (__link.1331 var=435) w32_jal_t21s_s2 (f64_lt.1294)  <1627>;
                    call {
                        (a_low.1333 var=430 stl=X off=11) assign (__ct_0.166)  <1629>;
                        (a_high.1334 var=431 stl=X off=12) assign (__ct_0.166)  <1630>;
                        (b_low.1335 var=432 stl=X off=13) assign (__tmp.1435)  <1631>;
                        (b_high.1336 var=433 stl=X off=14) assign (__tmp.1437)  <1632>;
                        (__link.1337 var=435 stl=X off=1) assign (__link.1331)  <1633>;
                        (__tmp.1338 var=436 stl=X off=10) Ff64_lt (__link.1337 a_low.1333 a_high.1334 b_low.1335 b_high.1336)  <1634>;
                        (__tmp.1339 var=436) deassign (__tmp.1338)  <1635>;
                    } #313 off=18
                    #314 off=19
                    (__tmp.1472 var=245) bool__eq___sint___sint (__tmp.1339 __ct_0.166)  <1948>;
                    (__trgt.1509 var=514) const ()  <2038>;
                    () void_br_bool_t13s_s2 (__tmp.1472 __trgt.1509)  <2039>;
                    (__either.1510 var=491) undefined ()  <2040>;
                    if {
                        {
                            () if_expr (__either.1510)  <937>;
                        } #107
                        {
                        } #137 off=32
                        {
                            #240 off=20
                            (__fch_i0.866 var=246) load (__M_DMw.4 __adr_i0.58 i0.108)  <938>;
                            (__tmp.1471 var=249) bool__ge___sint___sint (__ct_0.166 __fch_i0.866)  <1947>;
                            (__trgt.1506 var=512) const ()  <2033>;
                            () void_br_bool_t13s_s2 (__tmp.1471 __trgt.1506)  <2034>;
                            (__either.1507 var=491) undefined ()  <2035>;
                            if {
                                {
                                    () if_expr (__either.1507)  <970>;
                                } #111
                                {
                                } #133 off=30
                                {
                                    #113 off=21
                                    (__fch_j0.898 var=250) load (__M_DMw.4 __adr_j0.68 j0.132)  <971>;
                                    (__tmp.901 var=253) bool__eq___sint___sint (__fch_j0.898 __ct_20.122)  <974>;
                                    (__ct_1.931 var=255) const ()  <1005>;
                                    (__trgt.1503 var=510) const ()  <2028>;
                                    () void_br_bool_t13s_s2 (__tmp.901 __trgt.1503)  <2029>;
                                    (__either.1504 var=491) undefined ()  <2030>;
                                    if {
                                        {
                                            () if_expr (__either.1504)  <1003>;
                                        } #115
                                        {
                                            (__fch_i0.930 var=254) load (__M_DMw.4 __adr_i0.58 i0.108)  <1004>;
                                            (__tmp.933 var=257) __sint__pl___sint___sint (__fch_i0.930 __ct_1.931)  <1007>;
                                            (__M_DMw.934 var=5 i0.935 var=20) store (__tmp.933 __adr_i0.58 i0.108)  <1008>;
                                        } #117 off=28
                                        {
                                            #120 off=22
                                            (__ct_24t0.76 var=59) const ()  <87>;
                                            (__adr_j.78 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.75 __ct_24t0.76)  <89>;
                                            (__fch_i1.936 var=258) load (__M_DMw.4 __adr_i1.63 i1.120)  <1010>;
                                            (__ct_52.940 var=262) const ()  <1014>;
                                            (__fch_j0.942 var=264) load (__M_DMw.4 __adr_j0.68 j0.132)  <1016>;
                                            (__tmp.943 var=265) __sint__mi___sint___sint (__ct_52.940 __fch_j0.942)  <1017>;
                                            (__tmp.944 var=266) __uint__ls___uint___sint (__ct_1.931 __tmp.943)  <1018>;
                                            (__tmp.945 var=267) __uint__pl___uint___uint (__fch_i1.936 __tmp.944)  <1019>;
                                            (__M_DMw.946 var=5 j.947 var=24) store (__tmp.945 __adr_j.78 j.23)  <1020>;
                                            call {
                                                () chess_separator_scheduler ()  <1021>;
                                            } #121 off=23
                                            #122 off=24
                                            (__fch_j.948 var=268) load (__M_DMw.4 __adr_j.78 j.947)  <1022>;
                                            (__fch_i1.949 var=269) load (__M_DMw.4 __adr_i1.63 i1.120)  <1023>;
                                            (__tmp.1470 var=271) bool__ge___uint___uint (__fch_j.948 __fch_i1.949)  <1946>;
                                            (__trgt.1500 var=508) const ()  <2023>;
                                            () void_br_bool_t13s_s2 (__tmp.1470 __trgt.1500)  <2024>;
                                            (__either.1501 var=491) undefined ()  <2025>;
                                            if {
                                                {
                                                    () if_expr (__either.1501)  <1054>;
                                                } #124
                                                {
                                                } #128 off=26
                                                {
                                                    (__fch_i0.980 var=272) load (__M_DMw.4 __adr_i0.58 i0.108)  <1055>;
                                                    (__tmp.983 var=275) __sint__pl___sint___sint (__fch_i0.980 __ct_1.931)  <1058>;
                                                    (__M_DMw.984 var=5 i0.985 var=20) store (__tmp.983 __adr_i0.58 i0.108)  <1059>;
                                                    (__trgt.1502 var=509) const ()  <2026>;
                                                    () void_j_t21s_s2 (__trgt.1502)  <2027>;
                                                } #126 off=25
                                                {
                                                    (i0.986 var=20) merge (i0.108 i0.985)  <1061>;
                                                } #129
                                            } #123
                                            #130 off=27
                                            (__fch_j.987 var=276) load (__M_DMw.4 __adr_j.78 j.947)  <1062>;
                                            (__M_DMw.989 var=5 i1.990 var=21) store (__fch_j.987 __adr_i1.63 i1.120)  <1064>;
                                            (__trgt.1505 var=511) const ()  <2031>;
                                            () void_j_t21s_s2 (__trgt.1505)  <2032>;
                                        } #119
                                        {
                                            (i0.991 var=20) merge (i0.935 i0.986)  <1066>;
                                            (i1.992 var=21) merge (i1.120 i1.990)  <1067>;
                                            (j.993 var=24) merge (j.23 j.947)  <1068>;
                                        } #132
                                    } #114
                                    #430 off=29
                                    (__trgt.1508 var=513) const ()  <2036>;
                                    () void_j_t21s_s2 (__trgt.1508)  <2037>;
                                } #112
                                {
                                    (i0.994 var=20) merge (i0.108 i0.991)  <1069>;
                                    (i1.995 var=21) merge (i1.120 i1.992)  <1070>;
                                    (j.996 var=24) merge (j.23 j.993)  <1071>;
                                } #134
                            } #110
                            #246 off=31
                            (__fch_i1.997 var=278) load (__M_DMw.4 __adr_i1.63 i1.995)  <1072>;
                            (__fch_i.999 var=280) load (__M_DMw.4 __adr_i.73 i.712)  <1074>;
                            (__tmp.1001 var=282) __uint__ad___uint___uint (__fch_i1.997 __tmp.1237)  <1076>;
                            (__M_DMw.1003 var=5 i1.1004 var=21) store (__tmp.1001 __adr_i1.63 i1.995)  <1078>;
                            (__tmp.1237 var=281) __uint__er___uint___uint (__fch_i.999 __ct_4294967295.704)  <1452>;
                            (__trgt.1511 var=515) const ()  <2041>;
                            () void_j_t21s_s2 (__trgt.1511)  <2042>;
                        } #108
                        {
                            (i0.1005 var=20) merge (i0.108 i0.994)  <1080>;
                            (i1.1006 var=21) merge (i1.120 i1.1004)  <1081>;
                            (j.1007 var=24) merge (j.23 j.996)  <1082>;
                        } #138
                    } #106
                } #93
                {
                    (i0.1015 var=20) merge (i0.683 i0.1005)  <1090>;
                    (i1.1016 var=21) merge (i1.684 i1.1006)  <1091>;
                    (i.1018 var=23) merge (i.686 i.712)  <1093>;
                    (j.1019 var=24) merge (j.687 j.1007)  <1094>;
                } #139
            } #78
            #432 off=39
            (__trgt.1516 var=518) const ()  <2050>;
            () void_j_t21s_s2 (__trgt.1516)  <2051>;
        } #76
        {
            (i0.1043 var=20) merge (i0.553 i0.1015)  <1118>;
            (i1.1044 var=21) merge (i1.554 i1.1016)  <1119>;
            (i.1046 var=23) merge (i.556 i.1018)  <1121>;
            (j.1047 var=24) merge (j.23 j.1019)  <1122>;
        } #140
    } #12
    #143 off=78
    (__fch_i0.1066 var=284) load (__M_DMw.4 __adr_i0.58 i0.1043)  <1142>;
    call {
        () chess_separator_scheduler ()  <1144>;
    } #144 off=79
    #145 off=80
    (__fch_i1.1069 var=286) load (__M_DMw.4 __adr_i1.63 i1.1044)  <1146>;
    call {
        () chess_separator_scheduler ()  <1159>;
    } #152 off=81
    #153 off=82
    (__M_DMw.1081 var=5 x_low.1082 var=25) store (__fch_i1.1069 __adr_x.53 x_low.87)  <1162>;
    (__M_DMw.1087 var=5 x_high.1088 var=26) store (__fch_i0.1066 __adr_x.1174 x_high.93)  <1167>;
    (__adr_x.1174 var=341) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1331>;
    call {
        () chess_separator_scheduler ()  <1168>;
    } #154 off=83
    #157 off=84 nxt=-2
    (__fch_x_low.1090 var=300) load (__M_DMw.4 __adr_x.53 x_low.1082)  <1170>;
    (__fch_x_high.1095 var=303) load (__M_DMw.4 __adr_x.1175 x_high.1088)  <1175>;
    (__rd___sp.1097 var=27) rd_res_reg (__R_SP.11 __sp.49)  <1177>;
    (__tmp.1100 var=306) __Pvoid__pl___Pvoid___sint (__rd___sp.1097 __ct_28s0.380)  <1180>;
    (__R_SP.1101 var=12 __sp.1102 var=18) wr_res_reg (__tmp.1100 __sp.49)  <1181>;
    () void___rts_jr_w32 (__la.28)  <1182>;
    (__rt_low.1104 var=30 stl=X off=10) assign (__fch_x_low.1090)  <1184>;
    () out (__rt_low.1104)  <1185>;
    (__rt_high.1106 var=31 stl=X off=11) assign (__fch_x_high.1095)  <1187>;
    () out (__rt_high.1106)  <1188>;
    () sink (__sp.1102)  <1196>;
    () sink (i0.1043)  <1198>;
    () sink (i1.1044)  <1199>;
    () sink (j0.132)  <1200>;
    () sink (i.1046)  <1201>;
    () sink (j.1047)  <1202>;
    () sink (x_low.1082)  <1203>;
    () sink (x_high.1088)  <1204>;
    (__adr_x.1175 var=342) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.1162)  <1332>;
} #0
0 : 'src/math.c';
----------
0 : (0,159:0,0);
3 : (0,159:12,0);
4 : (0,159:12,0);
6 : (0,165:4,6);
8 : (0,165:28,7);
9 : (0,166:7,8);
10 : (0,166:7,8);
11 : (0,167:9,8);
12 : (0,167:4,8);
14 : (0,167:14,9);
15 : (0,168:13,9);
16 : (0,168:8,9);
18 : (0,168:17,10);
20 : (0,169:12,10);
22 : (0,169:27,11);
23 : (0,170:21,11);
24 : (0,170:16,11);
26 : (0,170:25,12);
27 : (0,170:28,13);
28 : (0,170:28,13);
29 : (0,170:42,14);
31 : (0,171:21,16);
32 : (0,171:31,16);
33 : (0,171:21,16);
35 : (0,171:36,17);
36 : (0,171:40,18);
37 : (0,171:40,18);
38 : (0,171:54,19);
40 : (0,171:21,21);
43 : (0,169:12,28);
45 : (0,173:15,33);
46 : (0,174:14,34);
47 : (0,174:14,34);
48 : (0,175:26,34);
49 : (0,175:12,34);
54 : (0,175:31,35);
55 : (0,175:12,38);
58 : (0,176:12,41);
60 : (0,176:27,42);
62 : (0,177:16,42);
65 : (0,177:28,44);
67 : (0,177:16,45);
70 : (0,178:19,49);
71 : (0,178:30,50);
73 : (0,176:12,52);
76 : (0,181:11,60);
78 : (0,181:11,60);
80 : (0,181:22,61);
81 : (0,182:13,61);
82 : (0,182:8,61);
84 : (0,183:13,62);
88 : (0,183:13,66);
92 : (0,182:8,69);
93 : (0,184:11,73);
94 : (0,185:10,74);
95 : (0,185:10,74);
96 : (0,186:17,74);
97 : (0,186:8,74);
102 : (0,186:22,75);
103 : (0,186:8,78);
106 : (0,187:8,81);
108 : (0,187:23,82);
110 : (0,188:12,82);
112 : (0,188:21,83);
113 : (0,189:21,83);
114 : (0,189:16,83);
117 : (0,189:29,85);
119 : (0,190:21,86);
120 : (0,191:22,87);
121 : (0,191:22,87);
122 : (0,192:24,87);
123 : (0,192:20,87);
126 : (0,192:42,89);
128 : (0,192:20,90);
130 : (0,193:23,94);
133 : (0,188:12,99);
137 : (0,187:8,105);
143 : (0,199:28,115);
144 : (0,199:28,115);
145 : (0,199:28,116);
152 : (0,199:15,120);
153 : (0,199:3,123);
154 : (0,199:3,123);
157 : (0,200:4,123);
211 : (0,177:21,42);
217 : (0,178:16,48);
224 : (0,181:17,60);
240 : (0,188:17,82);
246 : (0,196:12,102);
285 : (0,169:21,10);
286 : (0,169:21,10);
299 : (0,176:21,41);
300 : (0,176:21,41);
313 : (0,187:17,81);
314 : (0,187:17,81);
323 : (0,165:1,5);
335 : (0,165:30,6);
348 : (0,169:21,10);
351 : (0,169:19,10);
352 : (0,169:19,10);
364 : (0,176:21,41);
367 : (0,176:19,41);
368 : (0,176:19,41);
386 : (0,182:30,62);
387 : (0,182:30,62);
399 : (0,187:17,81);
402 : (0,187:15,81);
403 : (0,187:15,81);
----------
55 : (0,159:7,0);
56 : (0,159:7,0);
58 : (0,159:7,0);
59 : (0,159:7,0);
61 : (0,159:19,0);
62 : (0,159:19,0);
64 : (0,159:19,0);
66 : (0,163:12,0);
67 : (0,163:12,0);
69 : (0,163:12,0);
71 : (0,163:15,0);
72 : (0,163:15,0);
74 : (0,163:15,0);
76 : (0,163:18,0);
77 : (0,163:18,0);
79 : (0,163:18,0);
81 : (0,164:14,0);
82 : (0,164:14,0);
84 : (0,164:14,0);
86 : (0,164:16,0);
87 : (0,164:16,0);
89 : (0,164:16,0);
97 : (0,159:12,0);
102 : (0,159:12,0);
103 : (0,159:12,0);
110 : (0,165:21,5);
117 : (0,165:1,5);
118 : (0,165:4,6);
120 : (0,165:50,6);
129 : (0,165:30,6);
130 : (0,165:28,7);
131 : (0,166:11,7);
132 : (0,166:15,0);
134 : (0,166:13,7);
135 : (0,166:19,0);
137 : (0,166:18,7);
140 : (0,166:25,7);
141 : (0,166:4,7);
142 : (0,166:7,8);
143 : (0,167:7,8);
146 : (0,167:9,8);
175 : (0,167:4,8);
176 : (0,168:11,9);
177 : (0,168:14,0);
179 : (0,168:13,9);
208 : (0,168:8,9);
212 : (0,169:20,10);
217 : (0,169:20,10);
251 : (0,169:12,10);
252 : (0,170:19,11);
255 : (0,170:21,11);
284 : (0,170:16,11);
285 : (0,170:28,0);
287 : (0,170:26,12);
288 : (0,170:28,13);
291 : (0,170:40,13);
293 : (0,171:25,16);
294 : (0,171:28,16);
295 : (0,171:27,16);
327 : (0,171:21,16);
328 : (0,171:41,0);
330 : (0,171:38,17);
331 : (0,171:40,18);
334 : (0,171:52,18);
336 : (0,171:21,23);
337 : (0,171:21,23);
338 : (0,170:16,25);
339 : (0,170:16,25);
340 : (0,169:12,30);
341 : (0,169:12,30);
342 : (0,174:16,0);
344 : (0,174:41,33);
345 : (0,174:39,33);
346 : (0,174:12,33);
347 : (0,174:14,34);
348 : (0,175:17,34);
350 : (0,175:20,34);
351 : (0,175:19,34);
352 : (0,175:23,34);
354 : (0,175:22,34);
357 : (0,175:26,34);
386 : (0,175:12,34);
388 : (0,175:38,35);
393 : (0,175:38,35);
395 : (0,175:31,0);
396 : (0,175:31,0);
398 : (0,175:31,0);
399 : (0,175:31,35);
400 : (0,175:31,35);
402 : (0,175:38,0);
405 : (0,175:38,0);
482 : (0,176:20,41);
487 : (0,176:20,41);
521 : (0,176:12,41);
522 : (0,177:19,42);
554 : (0,177:16,42);
555 : (0,177:25,43);
557 : (0,177:31,0);
559 : (0,177:56,43);
560 : (0,177:54,43);
561 : (0,177:28,43);
563 : (0,177:25,43);
565 : (0,177:16,47);
566 : (0,178:16,48);
568 : (0,178:24,48);
570 : (0,178:19,48);
572 : (0,178:16,48);
573 : (0,178:19,49);
576 : (0,178:28,49);
578 : (0,176:12,54);
579 : (0,176:12,54);
587 : (0,168:8,57);
588 : (0,168:8,57);
590 : (0,168:8,57);
608 : (0,181:15,60);
609 : (0,181:18,0);
640 : (0,181:11,60);
641 : (0,182:11,61);
642 : (0,182:15,0);
644 : (0,182:13,61);
673 : (0,182:8,61);
675 : (0,182:29,62);
680 : (0,182:29,62);
683 : (0,182:31,62);
688 : (0,182:31,62);
693 : (0,183:20,65);
698 : (0,183:20,65);
702 : (0,182:8,0);
705 : (0,182:8,0);
706 : (0,182:8,69);
707 : (0,182:8,69);
709 : (0,182:8,0);
712 : (0,182:8,0);
758 : (0,185:13,0);
760 : (0,185:40,73);
763 : (0,185:42,73);
764 : (0,185:37,73);
765 : (0,185:8,73);
766 : (0,185:10,74);
767 : (0,186:12,74);
769 : (0,186:15,74);
770 : (0,186:14,74);
773 : (0,186:17,74);
802 : (0,186:8,74);
804 : (0,186:29,75);
809 : (0,186:29,75);
811 : (0,186:22,0);
814 : (0,186:22,0);
815 : (0,186:22,75);
816 : (0,186:22,75);
818 : (0,186:29,0);
821 : (0,186:29,0);
898 : (0,187:16,81);
903 : (0,187:16,81);
937 : (0,187:8,81);
938 : (0,188:15,82);
970 : (0,188:12,82);
971 : (0,189:19,83);
974 : (0,189:21,83);
1003 : (0,189:16,83);
1004 : (0,189:27,84);
1005 : (0,189:31,0);
1007 : (0,189:29,84);
1008 : (0,189:27,84);
1010 : (0,191:24,86);
1014 : (0,191:45,0);
1016 : (0,191:48,86);
1017 : (0,191:47,86);
1018 : (0,191:42,86);
1019 : (0,191:27,86);
1020 : (0,191:20,86);
1021 : (0,191:22,87);
1022 : (0,192:23,87);
1023 : (0,192:36,87);
1054 : (0,192:20,87);
1055 : (0,192:40,88);
1058 : (0,192:42,88);
1059 : (0,192:40,88);
1061 : (0,192:20,92);
1062 : (0,193:25,93);
1064 : (0,193:20,93);
1066 : (0,189:16,96);
1067 : (0,189:16,96);
1068 : (0,189:16,96);
1069 : (0,188:12,101);
1070 : (0,188:12,101);
1071 : (0,188:12,101);
1072 : (0,196:12,102);
1074 : (0,196:20,102);
1076 : (0,196:15,102);
1078 : (0,196:12,102);
1080 : (0,187:8,107);
1081 : (0,187:8,107);
1082 : (0,187:8,107);
1090 : (0,181:11,110);
1091 : (0,181:11,110);
1093 : (0,181:11,110);
1094 : (0,181:11,110);
1118 : (0,167:4,112);
1119 : (0,167:4,112);
1121 : (0,167:4,112);
1122 : (0,167:4,112);
1142 : (0,199:26,115);
1144 : (0,199:28,115);
1146 : (0,199:29,116);
1159 : (0,199:15,120);
1162 : (0,199:1,122);
1167 : (0,199:1,122);
1168 : (0,199:3,123);
1170 : (0,200:11,123);
1175 : (0,200:11,123);
1177 : (0,200:4,0);
1180 : (0,200:4,0);
1181 : (0,200:4,123);
1182 : (0,200:4,123);
1184 : (0,200:11,0);
1187 : (0,200:11,0);
1301 : (0,166:25,0);
1303 : (0,185:42,0);
1318 : (0,159:19,0);
1424 : (0,178:23,48);
1431 : (0,181:17,60);
1452 : (0,196:19,102);
1584 : (0,169:21,0);
1585 : (0,169:21,10);
1587 : (0,169:21,10);
1588 : (0,169:21,10);
1589 : (0,169:21,10);
1590 : (0,169:21,10);
1591 : (0,169:21,10);
1592 : (0,169:21,10);
1593 : (0,169:21,10);
1606 : (0,176:21,41);
1608 : (0,176:21,41);
1609 : (0,176:21,41);
1610 : (0,176:21,41);
1611 : (0,176:21,41);
1612 : (0,176:21,41);
1613 : (0,176:21,41);
1614 : (0,176:21,41);
1627 : (0,187:17,81);
1629 : (0,187:17,81);
1630 : (0,187:17,81);
1631 : (0,187:17,81);
1632 : (0,187:17,81);
1633 : (0,187:17,81);
1634 : (0,187:17,81);
1635 : (0,187:17,81);
1728 : (0,169:19,0);
1729 : (0,169:19,10);
1730 : (0,169:19,10);
1731 : (0,169:19,10);
1732 : (0,169:19,10);
1733 : (0,169:19,10);
1734 : (0,169:19,10);
1735 : (0,169:19,10);
1737 : (0,169:19,10);
1739 : (0,169:19,10);
1752 : (0,176:19,41);
1753 : (0,176:19,41);
1754 : (0,176:19,41);
1755 : (0,176:19,41);
1756 : (0,176:19,41);
1757 : (0,176:19,41);
1758 : (0,176:19,41);
1760 : (0,176:19,41);
1762 : (0,176:19,41);
1775 : (0,182:30,62);
1776 : (0,182:30,62);
1777 : (0,182:30,62);
1778 : (0,182:30,62);
1779 : (0,182:30,62);
1780 : (0,182:30,62);
1781 : (0,182:30,62);
1783 : (0,182:30,62);
1785 : (0,182:30,62);
1798 : (0,187:15,81);
1799 : (0,187:15,81);
1800 : (0,187:15,81);
1801 : (0,187:15,81);
1802 : (0,187:15,81);
1803 : (0,187:15,81);
1804 : (0,187:15,81);
1806 : (0,187:15,81);
1808 : (0,187:15,81);
1872 : (0,169:15,0);
1874 : (0,169:15,0);
1942 : (0,171:31,16);
1943 : (0,169:21,10);
1944 : (0,177:21,42);
1945 : (0,176:21,41);
1946 : (0,192:24,87);
1947 : (0,188:17,82);
1948 : (0,187:17,81);
1981 : (0,171:21,16);
1986 : (0,170:16,11);
1991 : (0,169:12,10);
1996 : (0,175:12,34);
2000 : (0,177:16,42);
2005 : (0,176:12,41);
2010 : (0,168:8,9);
2015 : (0,182:8,61);
2020 : (0,186:8,74);
2024 : (0,192:20,87);
2029 : (0,189:16,83);
2034 : (0,188:12,82);
2039 : (0,187:8,81);
2044 : (0,181:11,60);
2048 : (0,167:4,8);

