
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:33:50 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strpbrk(const char *, const char *)
Fstrpbrk : user_defined, called {
    fnm : "strpbrk" 'char *strpbrk(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=20 );
}
****
***/

[
    0 : strpbrk typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s2 typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   20 : s1 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : c typ=w08 val=8t0 bnd=a sz=1 algn=1 stl=DMb tref=__cchar_DMb
   22 : r2 typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb lscp=17 tref=__P__cchar_DMb
   23 : d typ=w08 val=16t0 bnd=a sz=1 algn=1 stl=DMb lscp=17 tref=__cchar_DMb
   24 : __rd___sp typ=w32 bnd=m
   25 : __la typ=w32 bnd=p tref=w32__
   26 : __rt typ=w32 bnd=p tref=__P__cchar__
   27 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   28 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   29 : __ct_m20S0 typ=w32 val=-20S0 bnd=m
   31 : __tmp typ=w32 bnd=m
   33 : __ct_0t0 typ=w32 val=0t0 bnd=m
   35 : __adr_s2 typ=w32 bnd=m adro=19
   37 : __ct_4t0 typ=w32 val=4t0 bnd=m
   39 : __adr_s1 typ=w32 bnd=m adro=20
   41 : __ct_8t0 typ=w32 val=8t0 bnd=m
   43 : __adr_c typ=w32 bnd=m adro=21
   45 : __ct_12t0 typ=w32 val=12t0 bnd=m
   47 : __adr_r2 typ=w32 bnd=m adro=22
   49 : __ct_16t0 typ=w32 val=16t0 bnd=m
   51 : __adr_d typ=w32 bnd=m adro=23
   54 : __fch_s1 typ=w32 bnd=m
   55 : __ct_1 typ=w32 val=1f bnd=m
   58 : __fch___extDMb typ=w08 bnd=m
   60 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   62 : __tmp typ=bool bnd=m
   63 : __fch_s2 typ=w32 bnd=m
   64 : __fch_r2 typ=w32 bnd=m
   68 : __fch___extDMb typ=w08 bnd=m
   69 : __fch_c typ=w08 bnd=m
   71 : __fch_d typ=w08 bnd=m
   73 : __tmp typ=bool bnd=m
   74 : __fch_s1 typ=w32 bnd=m
   78 : __ct_20s0 typ=w32 val=20s0 bnd=m
   80 : __tmp typ=w32 bnd=m
   81 : __fch_d typ=w08 bnd=m
   85 : __tmp typ=bool bnd=m
   86 : __fch_s1 typ=w32 bnd=m
   90 : __fch___extDMb typ=w08 bnd=m
   94 : __tmp typ=bool bnd=m
  100 : __tmp typ=w32 bnd=m
  108 : __ct_m1 typ=w32 val=-1f bnd=m
  109 : __shv___fch_r2 typ=w32 bnd=m
  110 : __shv___fch_s1 typ=w32 bnd=m
  111 : __shv___fch_s1 typ=w32 bnd=m
  120 : __either typ=bool bnd=m
  121 : __trgt typ=t13s_s2 val=0j bnd=m
  122 : __trgt typ=t13s_s2 val=0j bnd=m
  123 : __trgt typ=t13s_s2 val=0j bnd=m
  124 : __trgt typ=t13s_s2 val=0j bnd=m
  125 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrpbrk {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (s2.18 var=19) source ()  <29>;
    (s1.19 var=20) source ()  <30>;
    (c.20 var=21) source ()  <31>;
    (r2.21 var=22) source ()  <32>;
    (d.22 var=23) source ()  <33>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (__arg_s1.28 var=27 stl=X off=11) inp ()  <39>;
    (__arg_s1.29 var=27) deassign (__arg_s1.28)  <40>;
    (__arg_s2.31 var=28 stl=X off=12) inp ()  <42>;
    (__arg_s2.32 var=28) deassign (__arg_s2.31)  <43>;
    (__rd___sp.34 var=24) rd_res_reg (__R_SP.11 __sp.17)  <45>;
    (__ct_m20S0.35 var=29) const ()  <46>;
    (__tmp.37 var=31) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_m20S0.35)  <48>;
    (__R_SP.38 var=12 __sp.39 var=18) wr_res_reg (__tmp.37 __sp.17)  <49>;
    (__rd___sp.40 var=24) rd_res_reg (__R_SP.11 __sp.39)  <51>;
    (__ct_0t0.41 var=33) const ()  <52>;
    (__adr_s2.43 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_0t0.41)  <54>;
    (__rd___sp.45 var=24) rd_res_reg (__R_SP.11 __sp.39)  <56>;
    (__rd___sp.50 var=24) rd_res_reg (__R_SP.11 __sp.39)  <61>;
    (__rd___sp.55 var=24) rd_res_reg (__R_SP.11 __sp.39)  <66>;
    (__rd___sp.60 var=24) rd_res_reg (__R_SP.11 __sp.39)  <71>;
    (__M_DMw.67 var=5 s2.68 var=19) store (__arg_s2.32 __adr_s2.43 s2.18)  <78>;
    call {
        () chess_separator_scheduler ()  <79>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.46 var=37) const ()  <57>;
    (__adr_s1.48 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_4t0.46)  <59>;
    (__M_DMw.69 var=5 s1.70 var=20) store (__arg_s1.29 __adr_s1.48 s1.19)  <80>;
    call {
        () chess_separator_scheduler ()  <81>;
    } #6 off=3
    #7 off=4
    (__fch_s1.71 var=54) load (__M_DMw.4 __adr_s1.48 s1.70)  <82>;
    call {
        () chess_separator_scheduler ()  <83>;
    } #8 off=5
    #9 off=6
    (__ct_1.72 var=55) const ()  <84>;
    (__M_DMw.75 var=5 s1.76 var=20) store (__shv___fch_s1.411 __adr_s1.48 s1.70)  <87>;
    (__shv___fch_s1.411 var=111) __Pvoid__pl___Pvoid___sint (__fch_s1.71 __ct_1.72)  <433>;
    call {
        () chess_separator_scheduler ()  <88>;
    } #10 off=7
    #11 off=8
    (__ct_8t0.51 var=41) const ()  <62>;
    (__adr_c.53 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_8t0.51)  <64>;
    (__fch___extDMb.77 var=58) load (__M_DMb.2 __fch_s1.71 __extDMb.16)  <89>;
    (__M_DMb.78 var=3 c.79 var=21) store (__fch___extDMb.77 __adr_c.53 c.20)  <90>;
    (__ct_0.81 var=60) const ()  <92>;
    (__ct_20s0.194 var=78) const ()  <209>;
    (__tmp.417 var=62) bool__eq___sint___sint (__fch___extDMb.77 __ct_0.81)  <465>;
    (__trgt.426 var=124) const ()  <491>;
    () void_br_bool_t13s_s2 (__tmp.417 __trgt.426)  <492>;
    (__either.427 var=120) undefined ()  <493>;
    if {
        {
            () if_expr (__either.427)  <117>;
            () chess_frequent_else ()  <118>;
            () chess_rear_then ()  <494>;
        } #13
        {
            (__trgt.428 var=125) const ()  <495>;
            () void_j_t21s_s2 (__trgt.428)  <496>;
        } #46 off=29
        {
            #57 off=9
            (__ct_12t0.56 var=45) const ()  <67>;
            (__adr_r2.58 var=47) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_12t0.56)  <69>;
            (__ct_16t0.61 var=49) const ()  <72>;
            (__adr_d.63 var=51) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_16t0.61)  <74>;
            (__fch_s2.128 var=63) load (__M_DMw.4 __adr_s2.43 s2.68)  <141>;
            (__rd___sp.193 var=24) rd_res_reg (__R_SP.11 __sp.39)  <208>;
            (__tmp.196 var=80) __Pvoid__pl___Pvoid___sint (__rd___sp.193 __ct_20s0.194)  <211>;
            (__ct_m1.408 var=108) const ()  <429>;
            (__trgt.420 var=121) const ()  <480>;
            (__trgt.422 var=122) const ()  <485>;
            (__trgt.424 var=123) const ()  <488>;
            do {
                {
                    (s1.113 var=20) entry (s1.320 s1.76)  <126>;
                    (c.114 var=21) entry (c.322 c.79)  <127>;
                    (r2.115 var=22) entry (r2.324 r2.21)  <128>;
                    (d.116 var=23) entry (d.326 d.22)  <129>;
                } #16
                {
                    #18 off=10
                    (__M_DMw.129 var=5 r2.130 var=22) store (__fch_s2.128 __adr_r2.58 r2.115)  <142>;
                    call {
                        () chess_separator_scheduler ()  <143>;
                    } #19 off=11
                    #58 off=12
                    (__fch_c.162 var=69) load (__M_DMb.2 __adr_c.53 c.114)  <176>;
                    (__fch_s1.189 var=74) load (__M_DMw.4 __adr_s1.48 s1.113)  <204>;
                    (__rt.192 var=26) __Pvoid__pl___Pvoid___sint (__fch_s1.189 __ct_m1.408)  <207>;
                    do {
                        {
                            (r2.140 var=22) entry (r2.267 r2.130)  <153>;
                            (d.141 var=23) entry (d.269 d.116)  <154>;
                        } #21
                        {
                            #23 off=13
                            (__fch_r2.153 var=64) load (__M_DMw.4 __adr_r2.58 r2.140)  <166>;
                            call {
                                () chess_separator_scheduler ()  <167>;
                            } #24 off=14
                            #25 off=15
                            (__M_DMw.157 var=5 r2.158 var=22) store (__shv___fch_r2.409 __adr_r2.58 r2.140)  <171>;
                            (__shv___fch_r2.409 var=109) __Pvoid__pl___Pvoid___sint (__fch_r2.153 __ct_1.72)  <431>;
                            call {
                                () chess_separator_scheduler ()  <172>;
                            } #26 off=16
                            #27 off=17
                            (__fch___extDMb.159 var=68) load (__M_DMb.2 __fch_r2.153 __extDMb.16)  <173>;
                            (__M_DMb.160 var=3 d.161 var=23) store (__fch___extDMb.159 __adr_d.63 d.141)  <174>;
                            call {
                                () chess_separator_scheduler ()  <175>;
                            } #28 off=18
                            #29 off=19
                            (__fch_d.164 var=71) load (__M_DMb.2 __adr_d.63 d.161)  <178>;
                            (__tmp.166 var=73) bool__eq___sint___sint (__fch_c.162 __fch_d.164)  <180>;
                            () void_br_bool_t13s_s2 (__tmp.166 __trgt.420)  <481>;
                            (__either.421 var=120) undefined ()  <482>;
                            if {
                                {
                                    () if_expr (__either.421)  <203>;
                                    () chess_frequent_else ()  <483>;
                                    () chess_rear_then ()  <484>;
                                } #31
                                {
                                    (__R_SP.197 var=12 __sp.198 var=18) wr_res_reg (__tmp.196 __sp.39)  <212>;
                                    () void___rts_jr_w32 (__la.25)  <213>;
                                    (__rt.199 var=26 stl=X off=10) assign (__rt.192)  <214>;
                                    () out (__rt.199)  <215>;
                                    () sink (__sp.198)  <221>;
                                    () sink (s2.68)  <222>;
                                    () sink (s1.113)  <223>;
                                    () sink (c.114)  <224>;
                                    () sink (r2.158)  <225>;
                                    () sink (d.161)  <226>;
                                } #35 off=21 nxt=-2
                                {
                                } #36 off=20
                                {
                                } #37
                            } #30
                            #38 off=22
                            (__fch_d.244 var=81) load (__M_DMb.2 __adr_d.63 d.161)  <271>;
                            (__tmp.248 var=85) bool__ne___sint___sint (__fch_d.244 __ct_0.81)  <275>;
                            () void_br_bool_t13s_s2 (__tmp.248 __trgt.422)  <486>;
                            (__either.423 var=120) undefined ()  <487>;
                        } #22
                        {
                            () while_expr (__either.423)  <276>;
                            (r2.267 var=22 r2.268 var=22) exit (r2.158)  <286>;
                            (d.269 var=23 d.270 var=23) exit (d.161)  <287>;
                        } #39
                    } #20
                    #40 off=23
                    (__fch_s1.293 var=86) load (__M_DMw.4 __adr_s1.48 s1.113)  <299>;
                    call {
                        () chess_separator_scheduler ()  <300>;
                    } #41 off=24
                    #42 off=25
                    (__M_DMw.297 var=5 s1.298 var=20) store (__shv___fch_s1.410 __adr_s1.48 s1.113)  <304>;
                    (__shv___fch_s1.410 var=110) __Pvoid__pl___Pvoid___sint (__fch_s1.293 __ct_1.72)  <432>;
                    call {
                        () chess_separator_scheduler ()  <305>;
                    } #43 off=26
                    #44 off=27
                    (__fch___extDMb.299 var=90) load (__M_DMb.2 __fch_s1.293 __extDMb.16)  <306>;
                    (__M_DMb.300 var=3 c.301 var=21) store (__fch___extDMb.299 __adr_c.53 c.114)  <307>;
                    (__tmp.305 var=94) bool__ne___sint___sint (__fch___extDMb.299 __ct_0.81)  <311>;
                    () void_br_bool_t13s_s2 (__tmp.305 __trgt.424)  <489>;
                    (__either.425 var=120) undefined ()  <490>;
                } #17
                {
                    () while_expr (__either.425)  <312>;
                    (s1.320 var=20 s1.321 var=20) exit (s1.298)  <320>;
                    (c.322 var=21 c.323 var=21) exit (c.301)  <321>;
                    (r2.324 var=22 r2.325 var=22) exit (r2.268)  <322>;
                    (d.326 var=23 d.327 var=23) exit (d.270)  <323>;
                } #45
            } #15 rng=[1,2147483647]
        } #14
        {
            (s1.357 var=20) merge (s1.76 s1.321)  <342>;
            (c.358 var=21) merge (c.79 c.323)  <343>;
            (r2.359 var=22) merge (r2.21 r2.325)  <344>;
            (d.360 var=23) merge (d.22 d.327)  <345>;
        } #47
    } #12
    #50 off=30 nxt=-2
    (__rd___sp.375 var=24) rd_res_reg (__R_SP.11 __sp.39)  <360>;
    (__tmp.378 var=100) __Pvoid__pl___Pvoid___sint (__rd___sp.375 __ct_20s0.194)  <363>;
    (__R_SP.379 var=12 __sp.380 var=18) wr_res_reg (__tmp.378 __sp.39)  <364>;
    () void___rts_jr_w32 (__la.25)  <365>;
    (__rt.381 var=26 stl=X off=10) assign (__ct_0.81)  <366>;
    () out (__rt.381)  <367>;
    () sink (__sp.380)  <373>;
    () sink (s2.68)  <374>;
    () sink (s1.357)  <375>;
    () sink (c.358)  <376>;
    () sink (r2.359)  <377>;
    () sink (d.360)  <378>;
} #0
0 : 'src/string.c';
----------
0 : (0,176:0,0);
3 : (0,176:30,0);
4 : (0,176:30,0);
5 : (0,176:14,0);
6 : (0,176:14,0);
7 : (0,180:4,5);
8 : (0,180:4,5);
9 : (0,180:4,6);
10 : (0,180:4,6);
11 : (0,180:4,6);
12 : (0,180:4,6);
14 : (0,180:4,7);
15 : (0,180:4,7);
17 : (0,180:24,7);
18 : (0,181:25,7);
19 : (0,181:25,7);
20 : (0,187:10,9);
22 : (0,183:11,9);
23 : (0,184:19,10);
24 : (0,184:19,10);
25 : (0,184:19,11);
26 : (0,184:19,11);
27 : (0,184:14,12);
28 : (0,184:14,12);
29 : (0,185:18,12);
30 : (0,185:12,12);
35 : (0,186:16,13);
36 : (0,185:12,16);
38 : (0,187:10,20);
40 : (0,180:19,23);
41 : (0,180:19,23);
42 : (0,180:19,24);
43 : (0,180:19,24);
44 : (0,180:4,24);
46 : (0,180:4,26);
50 : (0,189:4,29);
----------
45 : (0,176:6,0);
46 : (0,176:6,0);
48 : (0,176:6,0);
49 : (0,176:6,0);
51 : (0,176:42,0);
52 : (0,176:42,0);
54 : (0,176:42,0);
56 : (0,176:26,0);
57 : (0,176:26,0);
59 : (0,176:26,0);
61 : (0,179:9,0);
62 : (0,179:9,0);
64 : (0,179:9,0);
66 : (0,181:20,0);
67 : (0,181:20,0);
69 : (0,181:20,0);
71 : (0,182:13,0);
72 : (0,182:13,0);
74 : (0,182:13,0);
78 : (0,176:30,0);
79 : (0,176:30,0);
80 : (0,176:14,0);
81 : (0,176:14,0);
82 : (0,180:4,4);
83 : (0,180:4,5);
84 : (0,180:4,0);
87 : (0,180:4,5);
88 : (0,180:4,6);
89 : (0,180:4,6);
90 : (0,180:4,6);
92 : (0,180:4,0);
117 : (0,180:4,6);
126 : (0,180:4,7);
127 : (0,180:4,7);
128 : (0,180:4,7);
129 : (0,180:4,7);
141 : (0,181:25,7);
142 : (0,181:25,7);
143 : (0,181:25,7);
153 : (0,187:10,9);
154 : (0,187:10,9);
166 : (0,184:17,9);
167 : (0,184:19,10);
171 : (0,184:17,10);
172 : (0,184:19,11);
173 : (0,184:16,11);
174 : (0,184:12,11);
175 : (0,184:14,12);
176 : (0,185:16,12);
178 : (0,185:21,12);
180 : (0,185:18,12);
203 : (0,185:12,12);
204 : (0,186:31,13);
207 : (0,186:33,13);
208 : (0,186:16,0);
209 : (0,186:16,0);
211 : (0,186:16,0);
212 : (0,186:16,13);
213 : (0,186:16,13);
214 : (0,186:23,0);
271 : (0,187:17,20);
275 : (0,187:10,20);
276 : (0,187:10,20);
286 : (0,187:10,20);
287 : (0,187:10,20);
299 : (0,180:17,22);
300 : (0,180:19,23);
304 : (0,180:17,23);
305 : (0,180:19,24);
306 : (0,180:16,24);
307 : (0,180:12,24);
311 : (0,180:4,24);
312 : (0,180:4,24);
320 : (0,180:4,24);
321 : (0,180:4,24);
322 : (0,180:4,24);
323 : (0,180:4,24);
342 : (0,180:4,28);
343 : (0,180:4,28);
344 : (0,180:4,28);
345 : (0,180:4,28);
360 : (0,189:4,0);
363 : (0,189:4,0);
364 : (0,189:4,29);
365 : (0,189:4,29);
366 : (0,189:11,0);
429 : (0,186:33,0);
431 : (0,184:19,0);
432 : (0,180:19,0);
433 : (0,180:4,0);
465 : (0,180:4,6);
481 : (0,185:12,12);
486 : (0,187:10,20);
489 : (0,180:4,24);
492 : (0,180:4,6);

