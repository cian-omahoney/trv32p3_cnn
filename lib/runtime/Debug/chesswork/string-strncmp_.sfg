
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Feb 16 13:34:00 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  int strncmp(const char *, const char *, size_t)
Fstrncmp : user_defined, called {
    fnm : "strncmp" 'int strncmp(const char *, const char *, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=16 );
}
****
***/

[
    0 : strncmp typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : n typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   20 : s2 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : s1 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   22 : c1 typ=w08 val=12t0 bnd=a sz=1 algn=1 stl=DMb lscp=19 tref=__cchar_DMb
   23 : c2 typ=w08 val=13t0 bnd=a sz=1 algn=1 stl=DMb lscp=19 tref=__cchar_DMb
   24 : __rd___sp typ=w32 bnd=m
   25 : __la typ=w32 bnd=p tref=w32__
   26 : __rt typ=w32 bnd=p tref=__sint__
   27 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   28 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   29 : __arg_n typ=w32 bnd=p tref=size_t__
   30 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   34 : __ct_0t0 typ=w32 val=0t0 bnd=m
   36 : __adr_n typ=w32 bnd=m adro=19
   38 : __ct_4t0 typ=w32 val=4t0 bnd=m
   40 : __adr_s2 typ=w32 bnd=m adro=20
   42 : __ct_8t0 typ=w32 val=8t0 bnd=m
   44 : __adr_s1 typ=w32 bnd=m adro=21
   46 : __ct_12t0 typ=w32 val=12t0 bnd=m
   48 : __adr_c1 typ=w32 bnd=m adro=22
   50 : __ct_13t0 typ=w32 val=13t0 bnd=m
   52 : __adr_c2 typ=w32 bnd=m adro=23
   56 : __fch_n typ=w32 bnd=m
   60 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   62 : __tmp typ=bool bnd=m
   63 : __fch_s1 typ=w32 bnd=m
   64 : __ct_1 typ=w32 val=1f bnd=m
   67 : __fch___extDMb typ=w08 bnd=m
   68 : __fch_s2 typ=w32 bnd=m
   72 : __fch___extDMb typ=w08 bnd=m
   73 : __fch_c1 typ=w08 bnd=m
   75 : __fch_c2 typ=w08 bnd=m
   77 : __tmp typ=bool bnd=m
   80 : __fch_c1 typ=w08 bnd=m
   84 : __tmp typ=bool bnd=m
   85 : __tmp typ=bool bnd=m
   87 : __tmp typ=__uchar bnd=m
   90 : __tmp typ=__uchar bnd=m
   93 : __ct_16s0 typ=w32 val=16s0 bnd=m
   95 : __tmp typ=w32 bnd=m
   96 : __fch_n typ=w32 bnd=m
  102 : __tmp typ=bool bnd=m
  107 : __tmp typ=w32 bnd=m
  116 : __ct_4294967295 typ=w32 val=-1f bnd=m
  117 : __shv___fch_s1 typ=w32 bnd=m
  118 : __shv___fch_s2 typ=w32 bnd=m
  119 : __shv___fch_n typ=w32 bnd=m
  120 : __shv___fch_n typ=w32 bnd=m
  127 : __true typ=bool val=1f bnd=m
  129 : __either typ=bool bnd=m
  130 : __trgt typ=t13s_s2 val=0j bnd=m
  131 : __trgt typ=t13s_s2 val=0j bnd=m
  132 : __trgt typ=t13s_s2 val=0j bnd=m
  133 : __trgt typ=t13s_s2 val=0j bnd=m
  134 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrncmp {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (n.18 var=19) source ()  <29>;
    (s2.19 var=20) source ()  <30>;
    (s1.20 var=21) source ()  <31>;
    (c1.21 var=22) source ()  <32>;
    (c2.22 var=23) source ()  <33>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (__arg_s1.28 var=27 stl=X off=11) inp ()  <39>;
    (__arg_s1.29 var=27) deassign (__arg_s1.28)  <40>;
    (__arg_s2.31 var=28 stl=X off=12) inp ()  <42>;
    (__arg_s2.32 var=28) deassign (__arg_s2.31)  <43>;
    (__arg_n.34 var=29 stl=X off=13) inp ()  <45>;
    (__arg_n.35 var=29) deassign (__arg_n.34)  <46>;
    (__rd___sp.37 var=24) rd_res_reg (__R_SP.11 __sp.17)  <48>;
    (__ct_m16S0.38 var=30) const ()  <49>;
    (__tmp.40 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.37 __ct_m16S0.38)  <51>;
    (__R_SP.41 var=12 __sp.42 var=18) wr_res_reg (__tmp.40 __sp.17)  <52>;
    (__rd___sp.43 var=24) rd_res_reg (__R_SP.11 __sp.42)  <54>;
    (__ct_0t0.44 var=34) const ()  <55>;
    (__adr_n.46 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.43 __ct_0t0.44)  <57>;
    (__rd___sp.48 var=24) rd_res_reg (__R_SP.11 __sp.42)  <59>;
    (__rd___sp.53 var=24) rd_res_reg (__R_SP.11 __sp.42)  <64>;
    (__rd___sp.58 var=24) rd_res_reg (__R_SP.11 __sp.42)  <69>;
    (__rd___sp.63 var=24) rd_res_reg (__R_SP.11 __sp.42)  <74>;
    (__M_DMw.71 var=5 n.72 var=19) store (__arg_n.35 __adr_n.46 n.18)  <82>;
    call {
        () chess_separator_scheduler ()  <83>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.49 var=38) const ()  <60>;
    (__adr_s2.51 var=40) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_4t0.49)  <62>;
    (__M_DMw.73 var=5 s2.74 var=20) store (__arg_s2.32 __adr_s2.51 s2.19)  <84>;
    call {
        () chess_separator_scheduler ()  <85>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.54 var=42) const ()  <65>;
    (__adr_s1.56 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.53 __ct_8t0.54)  <67>;
    (__M_DMw.75 var=5 s1.76 var=21) store (__arg_s1.29 __adr_s1.56 s1.20)  <86>;
    call {
        () chess_separator_scheduler ()  <87>;
    } #8 off=5
    #9 off=6
    (__fch_n.77 var=56) load (__M_DMw.4 __adr_n.46 n.72)  <88>;
    call {
        () chess_separator_scheduler ()  <89>;
    } #10 off=7
    #11 off=8
    (__M_DMw.81 var=5 n.82 var=19) store (__shv___fch_n.397 __adr_n.46 n.72)  <93>;
    (__ct_4294967295.393 var=116) const ()  <439>;
    (__shv___fch_n.397 var=120) __uint__pl___uint___uint (__fch_n.77 __ct_4294967295.393)  <444>;
    call {
        () chess_separator_scheduler ()  <94>;
    } #12 off=9
    #13 off=10
    (__ct_0.83 var=60) const ()  <95>;
    (__ct_16s0.221 var=93) const ()  <239>;
    (__tmp.403 var=62) bool__eq___uint___uint (__fch_n.77 __ct_0.83)  <476>;
    (__trgt.413 var=133) const ()  <503>;
    () void_br_bool_t13s_s2 (__tmp.403 __trgt.413)  <504>;
    (__either.414 var=129) undefined ()  <505>;
    if {
        {
            () if_expr (__either.414)  <122>;
            () chess_frequent_else ()  <123>;
            () chess_rear_then ()  <506>;
        } #15
        {
            (__trgt.415 var=134) const ()  <507>;
            () void_j_t21s_s2 (__trgt.415)  <508>;
        } #53 off=34
        {
            #61 off=11
            (__ct_12t0.59 var=46) const ()  <70>;
            (__adr_c1.61 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.58 __ct_12t0.59)  <72>;
            (__ct_13t0.64 var=50) const ()  <75>;
            (__adr_c2.66 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.63 __ct_13t0.64)  <77>;
            (__ct_1.135 var=64) const ()  <150>;
            (__rd___sp.220 var=24) rd_res_reg (__R_SP.11 __sp.42)  <238>;
            (__tmp.223 var=95) __Pvoid__pl___Pvoid___sint (__rd___sp.220 __ct_16s0.221)  <241>;
            (__trgt.406 var=130) const ()  <491>;
            (__trgt.409 var=131) const ()  <495>;
            (__trgt.411 var=132) const ()  <500>;
            do {
                {
                    (n.116 var=19) entry (n.296 n.82)  <130>;
                    (s2.117 var=20) entry (s2.298 s2.74)  <131>;
                    (s1.118 var=21) entry (s1.300 s1.76)  <132>;
                    (c1.119 var=22) entry (c1.302 c1.21)  <133>;
                    (c2.120 var=23) entry (c2.304 c2.22)  <134>;
                } #18
                {
                    #20 off=12
                    (__fch_s1.134 var=63) load (__M_DMw.4 __adr_s1.56 s1.118)  <148>;
                    call {
                        () chess_separator_scheduler ()  <149>;
                    } #21 off=13
                    #22 off=14
                    (__M_DMw.138 var=5 s1.139 var=21) store (__shv___fch_s1.394 __adr_s1.56 s1.118)  <153>;
                    (__shv___fch_s1.394 var=117) __Pvoid__pl___Pvoid___sint (__fch_s1.134 __ct_1.135)  <441>;
                    call {
                        () chess_separator_scheduler ()  <154>;
                    } #23 off=15
                    #24 off=16
                    (__fch___extDMb.140 var=67) load (__M_DMb.2 __fch_s1.134 __extDMb.16)  <155>;
                    (__M_DMb.141 var=3 c1.142 var=22) store (__fch___extDMb.140 __adr_c1.61 c1.119)  <156>;
                    call {
                        () chess_separator_scheduler ()  <157>;
                    } #25 off=17
                    #26 off=18
                    (__fch_s2.143 var=68) load (__M_DMw.4 __adr_s2.51 s2.117)  <158>;
                    call {
                        () chess_separator_scheduler ()  <159>;
                    } #27 off=19
                    #28 off=20
                    (__M_DMw.147 var=5 s2.148 var=20) store (__shv___fch_s2.395 __adr_s2.51 s2.117)  <163>;
                    (__shv___fch_s2.395 var=118) __Pvoid__pl___Pvoid___sint (__fch_s2.143 __ct_1.135)  <442>;
                    call {
                        () chess_separator_scheduler ()  <164>;
                    } #29 off=21
                    #30 off=22
                    (__fch___extDMb.149 var=72) load (__M_DMb.2 __fch_s2.143 __extDMb.16)  <165>;
                    (__M_DMb.150 var=3 c2.151 var=23) store (__fch___extDMb.149 __adr_c2.66 c2.120)  <166>;
                    call {
                        () chess_separator_scheduler ()  <167>;
                    } #31 off=23
                    #32 off=24
                    (__fch_c1.152 var=73) load (__M_DMb.2 __adr_c1.61 c1.142)  <168>;
                    (__fch_c2.154 var=75) load (__M_DMb.2 __adr_c2.66 c2.151)  <170>;
                    (__tmp.156 var=77) bool__ne___sint___sint (__fch_c1.152 __fch_c2.154)  <172>;
                    () void_br_bool_t13s_s2 (__tmp.156 __trgt.406)  <492>;
                    (__either.407 var=129) undefined ()  <493>;
                    if {
                        {
                            () if_expr (__either.407)  <197>;
                        } #34
                        {
                            (__true.408 var=127) const ()  <494>;
                        } #35
                        {
                            (__fch_c1.183 var=80) load (__M_DMb.2 __adr_c1.61 c1.142)  <200>;
                            (__tmp.187 var=84) bool__eq___sint___sint (__fch_c1.183 __ct_0.83)  <204>;
                            () void_br_bool_t13s_s2 (__tmp.187 __trgt.409)  <496>;
                            (__either.410 var=129) undefined ()  <497>;
                        } #36 off=25
                        {
                            (__tmp.188 var=85) merge (__true.408 __either.410)  <205>;
                        } #37
                    } #33
                    if {
                        {
                            () if_expr (__tmp.188)  <230>;
                            () chess_frequent_else ()  <498>;
                            () chess_rear_then ()  <499>;
                        } #40
                        {
                            (__tmp.213 var=87) load (__M_DMb.2 __adr_c1.61 c1.142)  <231>;
                            (__tmp.216 var=90) load (__M_DMb.2 __adr_c2.66 c2.151)  <234>;
                            (__rt.219 var=26) __sint__mi___sint___sint (__tmp.213 __tmp.216)  <237>;
                            (__R_SP.224 var=12 __sp.225 var=18) wr_res_reg (__tmp.223 __sp.42)  <242>;
                            () void___rts_jr_w32 (__la.25)  <243>;
                            (__rt.226 var=26 stl=X off=10) assign (__rt.219)  <244>;
                            () out (__rt.226)  <245>;
                            () sink (__sp.225)  <251>;
                            () sink (n.116)  <252>;
                            () sink (s2.148)  <253>;
                            () sink (s1.139)  <254>;
                            () sink (c1.142)  <255>;
                            () sink (c2.151)  <256>;
                        } #44 off=27 nxt=-2
                        {
                        } #45 off=26
                        {
                        } #46
                    } #39
                    #47 off=28
                    (__fch_n.275 var=96) load (__M_DMw.4 __adr_n.46 n.116)  <305>;
                    call {
                        () chess_separator_scheduler ()  <306>;
                    } #48 off=29
                    #49 off=30
                    (__M_DMw.279 var=5 n.280 var=19) store (__shv___fch_n.396 __adr_n.46 n.116)  <310>;
                    (__shv___fch_n.396 var=119) __uint__pl___uint___uint (__fch_n.275 __ct_4294967295.393)  <443>;
                    call {
                        () chess_separator_scheduler ()  <311>;
                    } #50 off=31
                    #51 off=32
                    (__tmp.283 var=102) bool__ne___uint___uint (__fch_n.275 __ct_0.83)  <314>;
                    () void_br_bool_t13s_s2 (__tmp.283 __trgt.411)  <501>;
                    (__either.412 var=129) undefined ()  <502>;
                } #19
                {
                    () while_expr (__either.412)  <315>;
                    (n.296 var=19 n.297 var=19) exit (n.280)  <322>;
                    (s2.298 var=20 s2.299 var=20) exit (s2.148)  <323>;
                    (s1.300 var=21 s1.301 var=21) exit (s1.139)  <324>;
                    (c1.302 var=22 c1.303 var=22) exit (c1.142)  <325>;
                    (c2.304 var=23 c2.305 var=23) exit (c2.151)  <326>;
                } #52
            } #17 rng=[1,2147483647]
        } #16
        {
            (n.338 var=19) merge (n.82 n.297)  <346>;
            (s2.339 var=20) merge (s2.74 s2.299)  <347>;
            (s1.340 var=21) merge (s1.76 s1.301)  <348>;
            (c1.341 var=22) merge (c1.21 c1.303)  <349>;
            (c2.342 var=23) merge (c2.22 c2.305)  <350>;
        } #54
    } #14
    #57 off=35 nxt=-2
    (__rd___sp.358 var=24) rd_res_reg (__R_SP.11 __sp.42)  <366>;
    (__tmp.361 var=107) __Pvoid__pl___Pvoid___sint (__rd___sp.358 __ct_16s0.221)  <369>;
    (__R_SP.362 var=12 __sp.363 var=18) wr_res_reg (__tmp.361 __sp.42)  <370>;
    () void___rts_jr_w32 (__la.25)  <371>;
    (__rt.364 var=26 stl=X off=10) assign (__ct_0.83)  <372>;
    () out (__rt.364)  <373>;
    () sink (__sp.363)  <379>;
    () sink (n.338)  <380>;
    () sink (s2.339)  <381>;
    () sink (s1.340)  <382>;
    () sink (c1.341)  <383>;
    () sink (c2.342)  <384>;
} #0
0 : 'src/string.c';
----------
0 : (0,112:0,0);
3 : (0,112:44,0);
4 : (0,112:44,0);
5 : (0,112:28,0);
6 : (0,112:28,0);
7 : (0,112:12,0);
8 : (0,112:12,0);
9 : (0,115:4,5);
10 : (0,115:4,5);
11 : (0,115:4,6);
12 : (0,115:4,6);
13 : (0,115:4,6);
14 : (0,115:4,6);
16 : (0,115:4,7);
17 : (0,115:4,7);
19 : (0,115:16,7);
20 : (0,116:21,8);
21 : (0,116:21,8);
22 : (0,116:21,9);
23 : (0,116:21,9);
24 : (0,116:18,9);
25 : (0,116:18,9);
26 : (0,117:21,11);
27 : (0,117:21,11);
28 : (0,117:21,12);
29 : (0,117:21,12);
30 : (0,117:18,12);
31 : (0,117:18,12);
32 : (0,118:15,13);
33 : (0,118:21,13);
35 : (0,118:21,14);
36 : (0,118:27,15);
39 : (0,118:8,17);
44 : (0,119:12,18);
45 : (0,118:8,21);
47 : (0,115:12,26);
48 : (0,115:12,26);
49 : (0,115:12,27);
50 : (0,115:12,27);
51 : (0,115:4,27);
53 : (0,115:4,29);
57 : (0,121:4,32);
----------
48 : (0,112:4,0);
49 : (0,112:4,0);
51 : (0,112:4,0);
52 : (0,112:4,0);
54 : (0,112:51,0);
55 : (0,112:51,0);
57 : (0,112:51,0);
59 : (0,112:40,0);
60 : (0,112:40,0);
62 : (0,112:40,0);
64 : (0,112:24,0);
65 : (0,112:24,0);
67 : (0,112:24,0);
69 : (0,116:13,0);
70 : (0,116:13,0);
72 : (0,116:13,0);
74 : (0,117:13,0);
75 : (0,117:13,0);
77 : (0,117:13,0);
82 : (0,112:44,0);
83 : (0,112:44,0);
84 : (0,112:28,0);
85 : (0,112:28,0);
86 : (0,112:12,0);
87 : (0,112:12,0);
88 : (0,115:4,4);
89 : (0,115:4,5);
93 : (0,115:4,5);
94 : (0,115:4,6);
95 : (0,115:4,0);
122 : (0,115:4,6);
130 : (0,115:4,7);
131 : (0,115:4,7);
132 : (0,115:4,7);
133 : (0,115:4,7);
134 : (0,115:4,7);
148 : (0,116:19,7);
149 : (0,116:21,8);
150 : (0,116:21,0);
153 : (0,116:19,8);
154 : (0,116:21,9);
155 : (0,116:18,9);
156 : (0,116:18,9);
157 : (0,116:18,9);
158 : (0,117:19,10);
159 : (0,117:21,11);
163 : (0,117:19,11);
164 : (0,117:21,12);
165 : (0,117:18,12);
166 : (0,117:18,12);
167 : (0,117:18,12);
168 : (0,118:12,13);
170 : (0,118:18,13);
172 : (0,118:15,13);
197 : (0,118:21,13);
200 : (0,118:24,15);
204 : (0,118:27,15);
205 : (0,118:21,16);
230 : (0,118:8,17);
231 : (0,119:34,18);
234 : (0,119:54,18);
237 : (0,119:37,18);
238 : (0,119:12,0);
239 : (0,119:12,0);
241 : (0,119:12,0);
242 : (0,119:12,18);
243 : (0,119:12,18);
244 : (0,119:37,0);
305 : (0,115:11,25);
306 : (0,115:12,26);
310 : (0,115:11,26);
311 : (0,115:12,27);
314 : (0,115:4,27);
315 : (0,115:4,27);
322 : (0,115:4,27);
323 : (0,115:4,27);
324 : (0,115:4,27);
325 : (0,115:4,27);
326 : (0,115:4,27);
346 : (0,115:4,31);
347 : (0,115:4,31);
348 : (0,115:4,31);
349 : (0,115:4,31);
350 : (0,115:4,31);
366 : (0,121:4,0);
369 : (0,121:4,0);
370 : (0,121:4,32);
371 : (0,121:4,32);
372 : (0,121:11,0);
439 : (0,115:4,0);
441 : (0,116:21,0);
442 : (0,117:21,0);
443 : (0,115:12,0);
444 : (0,115:4,0);
476 : (0,115:4,6);
492 : (0,118:21,13);
496 : (0,118:8,17);
501 : (0,115:4,27);
504 : (0,115:4,6);

