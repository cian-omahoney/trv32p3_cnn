
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:46:41 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strrchr(const char *, int)
Fstrrchr : user_defined, called {
    fnm : "strrchr" 'char *strrchr(const char *, int)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=16 );
}
****
***/

[
    0 : strrchr typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : c typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   20 : s typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : result typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   22 : d typ=w08 val=12t0 bnd=a sz=1 algn=1 stl=DMb tref=__cchar_DMb
   23 : __rd___sp typ=w32 bnd=m
   24 : __la typ=w32 bnd=p tref=w32__
   25 : __rt typ=w32 bnd=p tref=__P__cchar__
   26 : __arg_s typ=w32 bnd=p tref=__P__cchar__
   27 : __arg_c typ=w32 bnd=p tref=__sint__
   28 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   32 : __ct_0t0 typ=w32 val=0t0 bnd=m
   34 : __adr_c typ=w32 bnd=m adro=19
   36 : __ct_4t0 typ=w32 val=4t0 bnd=m
   38 : __adr_s typ=w32 bnd=m adro=20
   40 : __ct_8t0 typ=w32 val=8t0 bnd=m
   42 : __adr_result typ=w32 bnd=m adro=21
   44 : __ct_12t0 typ=w32 val=12t0 bnd=m
   46 : __adr_d typ=w32 bnd=m adro=22
   48 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   51 : __fch_s typ=w32 bnd=m
   52 : __ct_1 typ=w32 val=1f bnd=m
   55 : __fch___extDMb typ=w08 bnd=m
   56 : __fch_d typ=w08 bnd=m
   58 : __fch_c typ=w32 bnd=m
   59 : __tmp typ=w08 bnd=m
   61 : __tmp typ=bool bnd=m
   62 : __fch_s typ=w32 bnd=m
   65 : __tmp typ=w32 bnd=m
   66 : __fch_d typ=w08 bnd=m
   70 : __tmp typ=bool bnd=m
   72 : __ct_16s0 typ=w32 val=16s0 bnd=m
   74 : __tmp typ=w32 bnd=m
   80 : __ct_m1 typ=w32 val=-1f bnd=m
   81 : __shv___fch_s typ=w32 bnd=m
   90 : __either typ=bool bnd=m
   91 : __trgt typ=t13s_s2 val=0j bnd=m
   92 : __trgt typ=t21s_s2 val=0j bnd=m
   93 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fstrrchr {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (c.18 var=19) source ()  <29>;
    (s.19 var=20) source ()  <30>;
    (result.20 var=21) source ()  <31>;
    (d.21 var=22) source ()  <32>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (__arg_s.27 var=26 stl=X off=11) inp ()  <38>;
    (__arg_s.28 var=26) deassign (__arg_s.27)  <39>;
    (__arg_c.30 var=27 stl=X off=12) inp ()  <41>;
    (__arg_c.31 var=27) deassign (__arg_c.30)  <42>;
    (__rd___sp.33 var=23) rd_res_reg (__R_SP.11 __sp.17)  <44>;
    (__ct_m16S0.34 var=28) const ()  <45>;
    (__tmp.36 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_m16S0.34)  <47>;
    (__R_SP.37 var=12 __sp.38 var=18) wr_res_reg (__tmp.36 __sp.17)  <48>;
    (__rd___sp.39 var=23) rd_res_reg (__R_SP.11 __sp.38)  <50>;
    (__ct_0t0.40 var=32) const ()  <51>;
    (__adr_c.42 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_0t0.40)  <53>;
    (__rd___sp.44 var=23) rd_res_reg (__R_SP.11 __sp.38)  <55>;
    (__rd___sp.49 var=23) rd_res_reg (__R_SP.11 __sp.38)  <60>;
    (__rd___sp.54 var=23) rd_res_reg (__R_SP.11 __sp.38)  <65>;
    (__M_DMw.60 var=5 c.61 var=19) store (__arg_c.31 __adr_c.42 c.18)  <71>;
    call {
        () chess_separator_scheduler ()  <72>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.45 var=36) const ()  <56>;
    (__adr_s.47 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_4t0.45)  <58>;
    (__M_DMw.62 var=5 s.63 var=20) store (__arg_s.28 __adr_s.47 s.19)  <73>;
    call {
        () chess_separator_scheduler ()  <74>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.50 var=40) const ()  <61>;
    (__adr_result.52 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.49 __ct_8t0.50)  <63>;
    (__ct_0.64 var=48) const ()  <75>;
    (__M_DMw.67 var=5 result.68 var=21) store (__ct_0.64 __adr_result.52 result.20)  <78>;
    call {
        () chess_separator_scheduler ()  <79>;
    } #8 off=5
    #34 off=6
    (__ct_12t0.55 var=44) const ()  <66>;
    (__adr_d.57 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.54 __ct_12t0.55)  <68>;
    (__ct_1.89 var=52) const ()  <101>;
    (__fch_c.99 var=58) load (__M_DMw.4 __adr_c.42 c.61)  <111>;
    (__tmp.100 var=59) __schar___schar___sint (__fch_c.99)  <112>;
    (__ct_m1.203 var=80) const ()  <231>;
    (__trgt.212 var=91) const ()  <276>;
    (__trgt.214 var=92) const ()  <279>;
    (__trgt.215 var=93) const ()  <281>;
    do {
        {
            (s.76 var=20) entry (s.148 s.63)  <87>;
            (result.77 var=21) entry (result.150 result.68)  <88>;
            (d.78 var=22) entry (d.152 d.21)  <89>;
        } #10
        {
            #12 off=7
            (__fch_s.88 var=51) load (__M_DMw.4 __adr_s.47 s.76)  <99>;
            call {
                () chess_separator_scheduler ()  <100>;
            } #13 off=8
            #14 off=9
            (__M_DMw.92 var=5 s.93 var=20) store (__shv___fch_s.204 __adr_s.47 s.76)  <104>;
            (__shv___fch_s.204 var=81) __Pvoid__pl___Pvoid___sint (__fch_s.88 __ct_1.89)  <233>;
            call {
                () chess_separator_scheduler ()  <105>;
            } #15 off=10
            #16 off=11
            (__fch___extDMb.94 var=55) load (__M_DMb.2 __fch_s.88 __extDMb.16)  <106>;
            (__M_DMb.95 var=3 d.96 var=22) store (__fch___extDMb.94 __adr_d.57 d.78)  <107>;
            call {
                () chess_separator_scheduler ()  <108>;
            } #17 off=12
            #18 off=13
            (__fch_d.97 var=56) load (__M_DMb.2 __adr_d.57 d.96)  <109>;
            (__tmp.209 var=61) bool__ne___sint___sint (__fch_d.97 __tmp.100)  <262>;
            () void_br_bool_t13s_s2 (__tmp.209 __trgt.212)  <277>;
            (__either.213 var=90) undefined ()  <278>;
            if {
                {
                    () if_expr (__either.213)  <134>;
                } #20
                {
                } #24 off=15
                {
                    (__fch_s.122 var=62) load (__M_DMw.4 __adr_s.47 s.93)  <135>;
                    (__tmp.125 var=65) __Pvoid__pl___Pvoid___sint (__fch_s.122 __ct_m1.203)  <138>;
                    (__M_DMw.126 var=5 result.127 var=21) store (__tmp.125 __adr_result.52 result.77)  <139>;
                    () void_j_t21s_s2 (__trgt.214)  <280>;
                } #22 off=14
                {
                    (result.128 var=21) merge (result.77 result.127)  <141>;
                } #25
            } #19
            #26 off=16
            (__fch_d.129 var=66) load (__M_DMb.2 __adr_d.57 d.96)  <142>;
            (__tmp.133 var=70) bool__ne___sint___sint (__fch_d.129 __ct_0.64)  <146>;
            () void_br_bool_t13s_s2 (__tmp.133 __trgt.215)  <282>;
            (__either.216 var=90) undefined ()  <283>;
        } #11
        {
            () while_expr (__either.216)  <147>;
            (s.148 var=20 s.149 var=20) exit (s.93)  <155>;
            (result.150 var=21 result.151 var=21) exit (result.128)  <156>;
            (d.152 var=22 d.153 var=22) exit (d.96)  <157>;
        } #27
    } #9
    #30 off=17 nxt=-2
    (__rt.172 var=25) load (__M_DMw.4 __adr_result.52 result.151)  <167>;
    (__rd___sp.173 var=23) rd_res_reg (__R_SP.11 __sp.38)  <168>;
    (__ct_16s0.174 var=72) const ()  <169>;
    (__tmp.176 var=74) __Pvoid__pl___Pvoid___sint (__rd___sp.173 __ct_16s0.174)  <171>;
    (__R_SP.177 var=12 __sp.178 var=18) wr_res_reg (__tmp.176 __sp.38)  <172>;
    () void___rts_jr_w32 (__la.24)  <173>;
    (__rt.179 var=25 stl=X off=10) assign (__rt.172)  <174>;
    () out (__rt.179)  <175>;
    () sink (__sp.178)  <181>;
    () sink (c.61)  <182>;
    () sink (s.149)  <183>;
    () sink (result.151)  <184>;
    () sink (d.153)  <185>;
} #0
0 : 'src/string.c';
----------
0 : (0,192:0,0);
3 : (0,192:29,0);
4 : (0,192:29,0);
5 : (0,192:14,0);
6 : (0,192:14,0);
7 : (0,195:20,3);
8 : (0,195:20,3);
9 : (0,201:6,5);
11 : (0,197:7,5);
12 : (0,198:14,6);
13 : (0,198:14,6);
14 : (0,198:14,7);
15 : (0,198:14,7);
16 : (0,198:10,8);
17 : (0,198:10,8);
18 : (0,199:14,8);
19 : (0,199:8,8);
22 : (0,200:19,10);
24 : (0,199:8,11);
26 : (0,201:6,15);
30 : (0,202:4,16);
----------
44 : (0,192:6,0);
45 : (0,192:6,0);
47 : (0,192:6,0);
48 : (0,192:6,0);
50 : (0,192:33,0);
51 : (0,192:33,0);
53 : (0,192:33,0);
55 : (0,192:26,0);
56 : (0,192:26,0);
58 : (0,192:26,0);
60 : (0,195:10,0);
61 : (0,195:10,0);
63 : (0,195:10,0);
65 : (0,196:9,0);
66 : (0,196:9,0);
68 : (0,196:9,0);
71 : (0,192:29,0);
72 : (0,192:29,0);
73 : (0,192:14,0);
74 : (0,192:14,0);
75 : (0,195:20,0);
78 : (0,195:20,3);
79 : (0,195:20,3);
87 : (0,201:6,5);
88 : (0,201:6,5);
89 : (0,201:6,5);
99 : (0,198:13,5);
100 : (0,198:14,6);
101 : (0,198:14,0);
104 : (0,198:13,6);
105 : (0,198:14,7);
106 : (0,198:12,7);
107 : (0,198:8,7);
108 : (0,198:10,8);
109 : (0,199:12,8);
111 : (0,199:23,8);
112 : (0,199:17,8);
134 : (0,199:8,8);
135 : (0,200:29,9);
138 : (0,200:30,9);
139 : (0,200:12,9);
141 : (0,199:8,13);
142 : (0,201:13,15);
146 : (0,201:6,15);
147 : (0,201:6,15);
155 : (0,201:6,15);
156 : (0,201:6,15);
157 : (0,201:6,15);
167 : (0,202:11,16);
168 : (0,202:4,0);
169 : (0,202:4,0);
171 : (0,202:4,0);
172 : (0,202:4,16);
173 : (0,202:4,16);
174 : (0,202:11,0);
231 : (0,200:30,0);
233 : (0,198:14,0);
262 : (0,199:14,8);
277 : (0,199:8,8);
282 : (0,201:6,15);

