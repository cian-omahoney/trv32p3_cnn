
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:58:54 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  void *memcpy(void * restrict, const void * restrict, size_t)
Fmemcpy : user_defined, called {
    fnm : "memcpy" 'void *memcpy(void * restrict, const void * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=24 );
}
****
***/

[
    0 : memcpy typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : n typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   20 : s2 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__Pvoid_DMb
   21 : __arg_s2__rstr typ=w08 bnd=b stl=DMb
   22 : s1 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__Pvoid_DMb
   23 : __arg_s1__rstr typ=w08 bnd=b stl=DMb
   24 : ll typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   25 : rr typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   26 : i typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   28 : __rd___sp typ=w32 bnd=m
   29 : __la typ=w32 bnd=p tref=w32__
   30 : __rt typ=w32 bnd=p tref=__Pvoid__
   31 : __arg_s1 typ=w32 bnd=p tref=__Pvoid__
   32 : __arg_s2 typ=w32 bnd=p tref=__Pvoid__
   33 : __arg_n typ=w32 bnd=p tref=size_t__
   34 : __ct_m24S0 typ=w32 val=-24S0 bnd=m
   36 : __tmp typ=w32 bnd=m
   38 : __ct_0t0 typ=w32 val=0t0 bnd=m
   40 : __adr_n typ=w32 bnd=m adro=19
   42 : __ct_4t0 typ=w32 val=4t0 bnd=m
   44 : __adr_s2 typ=w32 bnd=m adro=20
   46 : __ct_8t0 typ=w32 val=8t0 bnd=m
   48 : __adr_s1 typ=w32 bnd=m adro=22
   50 : __ct_12t0 typ=w32 val=12t0 bnd=m
   52 : __adr_ll typ=w32 bnd=m adro=24
   54 : __ct_16t0 typ=w32 val=16t0 bnd=m
   56 : __adr_rr typ=w32 bnd=m adro=25
   58 : __ct_20t0 typ=w32 val=20t0 bnd=m
   60 : __adr_i typ=w32 bnd=m adro=26
   62 : s2__rstr typ=w08 bnd=b stl=DMb
   63 : s1__rstr typ=w08 bnd=b stl=DMb
   64 : __fch_s1 typ=w32 bnd=m
   65 : __fch_s2 typ=w32 bnd=m
   66 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   69 : __fch_n typ=w32 bnd=m
   70 : __tmp typ=bool bnd=m
   71 : __fch_rr typ=w32 bnd=m
   72 : __fch_i typ=w32 bnd=m
   74 : __tmp typ=w32 bnd=m
   75 : __fch_s2__rstr typ=w08 bnd=m
   76 : __fch_ll typ=w32 bnd=m
   77 : __fch_i typ=w32 bnd=m
   79 : __tmp typ=w32 bnd=m
   80 : __fch_i typ=w32 bnd=m
   81 : __ct_1 typ=w32 val=1f bnd=m
   83 : __tmp typ=w32 bnd=m
   84 : __fch_i typ=w32 bnd=m
   85 : __fch_n typ=w32 bnd=m
   86 : __tmp typ=bool bnd=m
   88 : __ct_24s0 typ=w32 val=24s0 bnd=m
   90 : __tmp typ=w32 bnd=m
  103 : __either typ=bool bnd=m
  104 : __trgt typ=t13s_s2 val=0j bnd=m
  105 : __trgt typ=t13s_s2 val=0j bnd=m
  106 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fmemcpy {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (n.18 var=19) source ()  <29>;
    (s2.19 var=20) source ()  <30>;
    (__arg_s2__rstr.20 var=21) source ()  <31>;
    (s1.21 var=22) source ()  <32>;
    (__arg_s1__rstr.22 var=23) source ()  <33>;
    (ll.23 var=24) source ()  <34>;
    (rr.24 var=25) source ()  <35>;
    (i.25 var=26) source ()  <36>;
    (__la.28 var=29 stl=X off=1) inp ()  <39>;
    (__la.29 var=29) deassign (__la.28)  <40>;
    (__arg_s1.32 var=31 stl=X off=11) inp ()  <43>;
    (__arg_s1.33 var=31) deassign (__arg_s1.32)  <44>;
    (__arg_s2.35 var=32 stl=X off=12) inp ()  <46>;
    (__arg_s2.36 var=32) deassign (__arg_s2.35)  <47>;
    (__arg_n.38 var=33 stl=X off=13) inp ()  <49>;
    (__arg_n.39 var=33) deassign (__arg_n.38)  <50>;
    (__rd___sp.41 var=28) rd_res_reg (__R_SP.11 __sp.17)  <52>;
    (__ct_m24S0.42 var=34) const ()  <53>;
    (__tmp.44 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.41 __ct_m24S0.42)  <55>;
    (__R_SP.45 var=12 __sp.46 var=18) wr_res_reg (__tmp.44 __sp.17)  <56>;
    (__rd___sp.47 var=28) rd_res_reg (__R_SP.11 __sp.46)  <58>;
    (__ct_0t0.48 var=38) const ()  <59>;
    (__adr_n.50 var=40) __Pvoid__pl___Pvoid___sint (__rd___sp.47 __ct_0t0.48)  <61>;
    (__rd___sp.52 var=28) rd_res_reg (__R_SP.11 __sp.46)  <63>;
    (__rd___sp.57 var=28) rd_res_reg (__R_SP.11 __sp.46)  <68>;
    (__rd___sp.62 var=28) rd_res_reg (__R_SP.11 __sp.46)  <73>;
    (__rd___sp.67 var=28) rd_res_reg (__R_SP.11 __sp.46)  <78>;
    (__rd___sp.72 var=28) rd_res_reg (__R_SP.11 __sp.46)  <83>;
    (__M_DMw.78 var=5 n.79 var=19) store (__arg_n.39 __adr_n.50 n.18)  <89>;
    call {
        () chess_separator_scheduler ()  <90>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.53 var=42) const ()  <64>;
    (__adr_s2.55 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.52 __ct_4t0.53)  <66>;
    (s2__rstr.80 var=62 __arg_s2__rstr.81 var=21) chain_tie (__arg_s2__rstr.20)  <91>;
    (__M_DMw.82 var=5 s2.83 var=20) store (__arg_s2.36 __adr_s2.55 s2.19)  <92>;
    call {
        () chess_separator_scheduler ()  <93>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.58 var=46) const ()  <69>;
    (__adr_s1.60 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.57 __ct_8t0.58)  <71>;
    (s1__rstr.84 var=63 __arg_s1__rstr.85 var=23) chain_tie (__arg_s1__rstr.22)  <94>;
    (__M_DMw.86 var=5 s1.87 var=22) store (__arg_s1.33 __adr_s1.60 s1.21)  <95>;
    call {
        () chess_separator_scheduler ()  <96>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.63 var=50) const ()  <74>;
    (__adr_ll.65 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.62 __ct_12t0.63)  <76>;
    (__fch_s1.88 var=64) load (__M_DMw.4 __adr_s1.60 s1.87)  <97>;
    (__M_DMw.89 var=5 ll.90 var=24) store (__fch_s1.88 __adr_ll.65 ll.23)  <98>;
    call {
        () chess_separator_scheduler ()  <99>;
    } #10 off=7
    #11 off=8
    (__ct_16t0.68 var=54) const ()  <79>;
    (__adr_rr.70 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.67 __ct_16t0.68)  <81>;
    (__fch_s2.91 var=65) load (__M_DMw.4 __adr_s2.55 s2.83)  <100>;
    (__M_DMw.92 var=5 rr.93 var=25) store (__fch_s2.91 __adr_rr.70 rr.24)  <101>;
    call {
        () chess_separator_scheduler ()  <102>;
    } #12 off=9
    #13 off=10
    (__ct_20t0.73 var=58) const ()  <84>;
    (__adr_i.75 var=60) __Pvoid__pl___Pvoid___sint (__rd___sp.72 __ct_20t0.73)  <86>;
    (__ct_0.94 var=66) const ()  <103>;
    (__M_DMw.96 var=5 i.97 var=26) store (__ct_0.94 __adr_i.75 i.25)  <105>;
    call {
        () chess_separator_scheduler ()  <106>;
    } #14 off=11
    #15 off=12
    (__fch_n.99 var=69) load (__M_DMw.4 __adr_n.50 n.79)  <108>;
    (__tmp.290 var=70) bool__eq___uint___uint (__fch_n.99 __ct_0.94)  <345>;
    (__trgt.295 var=105) const ()  <363>;
    () void_br_bool_t13s_s2 (__tmp.290 __trgt.295)  <364>;
    (__either.296 var=103) undefined ()  <365>;
    if {
        {
            () if_expr (__either.296)  <139>;
            () chess_frequent_else ()  <140>;
            () chess_rear_then ()  <366>;
        } #17
        {
            (__trgt.297 var=106) const ()  <367>;
            () void_j_t21s_s2 (__trgt.297)  <368>;
        } #31 off=22
        {
            #40 off=13
            (__fch_rr.159 var=71) load (__M_DMw.4 __adr_rr.70 rr.93)  <170>;
            (__fch_ll.164 var=76) load (__M_DMw.4 __adr_ll.65 ll.90)  <175>;
            (__ct_1.171 var=81) const ()  <183>;
            (__fch_n.177 var=85) load (__M_DMw.4 __adr_n.50 n.79)  <190>;
            (__trgt.293 var=104) const ()  <360>;
            do {
                {
                    (i.143 var=26) entry (i.205 i.97)  <154>;
                    (s1__rstr.146 var=63) entry (s1__rstr.211 s1__rstr.84)  <157>;
                } #20
                {
                    #22 off=14
                    (__fch_i.160 var=72) load (__M_DMw.4 __adr_i.75 i.143)  <171>;
                    (__tmp.162 var=74) __Pvoid__pl___Pvoid___sint (__fch_rr.159 __fch_i.160)  <173>;
                    (__fch_s2__rstr.163 var=75) load (__M_DMb.2 __tmp.162 s2__rstr.80)  <174>;
                    (__fch_i.165 var=77) load (__M_DMw.4 __adr_i.75 i.143)  <176>;
                    (__tmp.167 var=79) __Pvoid__pl___Pvoid___sint (__fch_ll.164 __fch_i.165)  <178>;
                    (__M_DMb.168 var=3 s1__rstr.169 var=63) store (__fch_s2__rstr.163 __tmp.167 s1__rstr.146)  <179>;
                    call {
                        () chess_separator_scheduler ()  <180>;
                    } #23 off=15
                    #24 off=16
                    (__fch_i.170 var=80) load (__M_DMw.4 __adr_i.75 i.143)  <181>;
                    call {
                        () chess_separator_scheduler ()  <182>;
                    } #25 off=17
                    #26 off=18
                    (__tmp.173 var=83) __uint__pl___uint___uint (__fch_i.170 __ct_1.171)  <185>;
                    (__M_DMw.174 var=5 i.175 var=26) store (__tmp.173 __adr_i.75 i.143)  <186>;
                    call {
                        () chess_separator_scheduler ()  <188>;
                    } #28 off=19
                    #29 off=20
                    (__fch_i.176 var=84) load (__M_DMw.4 __adr_i.75 i.175)  <189>;
                    (__tmp.178 var=86) bool__lt___uint___uint (__fch_i.176 __fch_n.177)  <191>;
                    () void_br_bool_t13s_s2 (__tmp.178 __trgt.293)  <361>;
                    (__either.294 var=103) undefined ()  <362>;
                } #21
                {
                    () while_expr (__either.294)  <192>;
                    (i.205 var=26 i.206 var=26) exit (i.175)  <206>;
                    (s1__rstr.211 var=63 s1__rstr.212 var=63) exit (s1__rstr.169)  <209>;
                } #30
            } #19 rng=[1,2147483647]
        } #18
        {
            (i.237 var=26) merge (i.97 i.206)  <222>;
            (s1__rstr.238 var=63) merge (s1__rstr.84 s1__rstr.212)  <223>;
        } #32
    } #16
    #35 off=23 nxt=-2
    (__rt.240 var=30) load (__M_DMw.4 __adr_s1.60 s1.87)  <225>;
    (__rd___sp.243 var=28) rd_res_reg (__R_SP.11 __sp.46)  <228>;
    (__ct_24s0.244 var=88) const ()  <229>;
    (__tmp.246 var=90) __Pvoid__pl___Pvoid___sint (__rd___sp.243 __ct_24s0.244)  <231>;
    (__R_SP.247 var=12 __sp.248 var=18) wr_res_reg (__tmp.246 __sp.46)  <232>;
    () void___rts_jr_w32 (__la.29)  <233>;
    (__rt.249 var=30 stl=X off=10) assign (__rt.240)  <234>;
    () out (__rt.249)  <235>;
    () sink (__sp.248)  <241>;
    () sink (n.79)  <242>;
    () sink (s2.83)  <243>;
    () sink (s1.87)  <245>;
    () sink (ll.90)  <247>;
    () sink (rr.93)  <248>;
    () sink (i.237)  <249>;
    () sink (s2__rstr.80)  <283>;
    () sink (s1__rstr.238)  <285>;
} #0
0 : 'src/string.c';
----------
0 : (0,23:0,0);
3 : (0,23:59,0);
4 : (0,23:59,0);
5 : (0,23:33,0);
6 : (0,23:33,0);
7 : (0,23:13,0);
8 : (0,23:13,0);
9 : (0,25:15,4);
10 : (0,25:15,4);
11 : (0,26:15,5);
12 : (0,26:15,5);
13 : (0,27:21,6);
14 : (0,27:21,6);
15 : (0,27:4,7);
16 : (0,27:4,7);
18 : (0,27:4,8);
19 : (0,27:4,8);
21 : (0,27:4,8);
22 : (0,27:41,9);
23 : (0,27:41,9);
24 : (0,27:31,0);
25 : (0,27:31,0);
26 : (0,27:31,0);
28 : (0,27:4,12);
29 : (0,27:25,13);
31 : (0,27:4,15);
35 : (0,28:4,18);
----------
52 : (0,23:6,0);
53 : (0,23:6,0);
55 : (0,23:6,0);
56 : (0,23:6,0);
58 : (0,23:66,0);
59 : (0,23:66,0);
61 : (0,23:66,0);
63 : (0,23:55,0);
64 : (0,23:55,0);
66 : (0,23:55,0);
68 : (0,23:29,0);
69 : (0,23:29,0);
71 : (0,23:29,0);
73 : (0,25:10,0);
74 : (0,25:10,0);
76 : (0,25:10,0);
78 : (0,26:10,0);
79 : (0,26:10,0);
81 : (0,26:10,0);
83 : (0,27:16,0);
84 : (0,27:16,0);
86 : (0,27:16,0);
89 : (0,23:59,0);
90 : (0,23:59,0);
92 : (0,23:33,0);
93 : (0,23:33,0);
95 : (0,23:13,0);
96 : (0,23:13,0);
97 : (0,25:22,4);
98 : (0,25:15,4);
99 : (0,25:15,4);
100 : (0,26:22,5);
101 : (0,26:15,5);
102 : (0,26:15,5);
103 : (0,27:21,0);
105 : (0,27:21,6);
106 : (0,27:21,6);
108 : (0,27:4,7);
139 : (0,27:4,7);
154 : (0,27:4,8);
157 : (0,27:4,8);
170 : (0,27:43,8);
171 : (0,27:46,8);
173 : (0,27:45,8);
174 : (0,27:45,8);
175 : (0,27:35,8);
176 : (0,27:38,8);
178 : (0,27:37,8);
179 : (0,27:37,8);
180 : (0,27:41,9);
181 : (0,27:30,0);
182 : (0,27:31,0);
183 : (0,27:31,0);
185 : (0,27:31,0);
186 : (0,27:30,0);
188 : (0,27:4,12);
189 : (0,27:23,13);
190 : (0,27:27,13);
191 : (0,27:25,13);
192 : (0,27:4,13);
206 : (0,27:4,13);
209 : (0,27:4,13);
222 : (0,27:4,17);
223 : (0,27:4,17);
225 : (0,28:11,18);
228 : (0,28:4,0);
229 : (0,28:4,0);
231 : (0,28:4,0);
232 : (0,28:4,18);
233 : (0,28:4,18);
234 : (0,28:11,0);
345 : (0,27:4,7);
361 : (0,27:4,13);
364 : (0,27:4,7);

