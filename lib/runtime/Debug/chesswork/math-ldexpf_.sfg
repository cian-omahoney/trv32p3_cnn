
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 16:33:42 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float ldexpf(float, int)
Fldexpf : user_defined, called {
    fnm : "ldexpf" 'float ldexpf(float, int)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=16 );
}
****
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : ldexpf typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : n typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   20 : x typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   21 : ix typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   22 : k typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   23 : __rd___sp typ=w32 bnd=m
   24 : __la typ=w32 bnd=p tref=w32__
   25 : __rt typ=w32 bnd=p tref=__ffloat__
   26 : __arg_x typ=w32 bnd=p tref=__ffloat__
   27 : __arg_n typ=w32 bnd=p tref=__sint__
   28 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   32 : __ct_0t0 typ=w32 val=0t0 bnd=m
   34 : __adr_n typ=w32 bnd=m adro=19
   36 : __ct_4t0 typ=w32 val=4t0 bnd=m
   38 : __adr_x typ=w32 bnd=m adro=20
   40 : __ct_12t0 typ=w32 val=12t0 bnd=m
   42 : __adr_ix typ=w32 bnd=m adro=21
   44 : __ct_8t0 typ=w32 val=8t0 bnd=m
   46 : __adr_k typ=w32 bnd=m adro=22
   56 : __fch_x typ=w32 bnd=m
   58 : __fch_ix typ=w32 bnd=m
   59 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   61 : __tmp typ=w32 bnd=m
   62 : __ct_23 typ=w32 val=23f bnd=m
   64 : __tmp typ=w32 bnd=m
   65 : __fch_k typ=w32 bnd=m
   66 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   68 : __tmp typ=bool bnd=m
   69 : __fch_ix typ=w32 bnd=m
   70 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   72 : __tmp typ=w32 bnd=m
   75 : __tmp typ=bool bnd=m
   77 : __ct_16s0 typ=w32 val=16s0 bnd=m
   79 : __tmp typ=w32 bnd=m
   80 : __fch_x typ=w32 bnd=m
   81 : __ct_1275068416 typ=t20s_rp12 val=311296f bnd=m
   83 : __tmp typ=w32 bnd=m
   84 : __fch_x typ=w32 bnd=m
   86 : __fch_ix typ=w32 bnd=m
   89 : __tmp typ=w32 bnd=m
   92 : __tmp typ=w32 bnd=m
   93 : __ct_25 typ=w32 val=25f bnd=m
   95 : __tmp typ=w32 bnd=m
   96 : __fch_n typ=w32 bnd=m
   97 : __ct_m50000 typ=w32 val=-50000f bnd=m
   99 : __tmp typ=bool bnd=m
  100 : __ct_228737632 typ=w32 val=228737632f bnd=m
  102 : __fch_x typ=w32 bnd=m
  106 : __tmp typ=w32 bnd=m
  107 : __fch_k typ=w32 bnd=m
  108 : __ct_255 typ=w32 val=255f bnd=m
  110 : __tmp typ=bool bnd=m
  111 : __fch_x typ=w32 bnd=m
  112 : __fch_x typ=w32 bnd=m
  114 : __fch_k typ=w32 bnd=m
  115 : __fch_n typ=w32 bnd=m
  116 : __tmp typ=w32 bnd=m
  117 : __fch_k typ=w32 bnd=m
  118 : __ct_254 typ=w32 val=254f bnd=m
  120 : __tmp typ=bool bnd=m
  121 : __fch_x typ=w32 bnd=m
  122 : __ct_1900671690 typ=w32 val=1900671690f bnd=m
  126 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  128 : __tmp typ=w32 bnd=m
  129 : __tmp typ=w32 bnd=m
  135 : __fch_k typ=w32 bnd=m
  138 : __tmp typ=bool bnd=m
  139 : __fch_ix typ=w32 bnd=m
  141 : __ct_2155872255 typ=w32 val=-2139095041f bnd=m
  143 : __tmp typ=w32 bnd=m
  144 : __fch_k typ=w32 bnd=m
  147 : __tmp typ=w32 bnd=m
  149 : __tmp typ=w32 bnd=m
  153 : __fch_k typ=w32 bnd=m
  154 : __ct_m25 typ=w32 val=-25f bnd=m
  156 : __tmp typ=bool bnd=m
  157 : __fch_n typ=w32 bnd=m
  158 : __ct_50000 typ=w32 val=50000f bnd=m
  160 : __tmp typ=bool bnd=m
  161 : __fch_x typ=w32 bnd=m
  168 : __tmp typ=w32 bnd=m
  169 : __tmp typ=w32 bnd=m
  175 : __fch_x typ=w32 bnd=m
  182 : __tmp typ=w32 bnd=m
  183 : __tmp typ=w32 bnd=m
  189 : __fch_k typ=w32 bnd=m
  192 : __tmp typ=w32 bnd=m
  193 : __fch_ix typ=w32 bnd=m
  197 : __tmp typ=w32 bnd=m
  198 : __fch_k typ=w32 bnd=m
  201 : __tmp typ=w32 bnd=m
  203 : __tmp typ=w32 bnd=m
  206 : __fch_x typ=w32 bnd=m
  207 : __ct_855638016 typ=t20s_rp12 val=208896f bnd=m
  212 : __tmp typ=w32 bnd=m
  231 : a typ=w32 bnd=m tref=float32_t__
  232 : b typ=w32 bnd=m tref=float32_t__
  233 : f32_mul typ=t21s_s2 val=0r bnd=m
  234 : __link typ=w32 bnd=m
  238 : a typ=w32 bnd=m tref=float32_t__
  239 : b typ=w32 bnd=m tref=float32_t__
  240 : f32_add typ=t21s_s2 val=0r bnd=m
  241 : __link typ=w32 bnd=m
  256 : __either typ=bool bnd=m
  257 : __trgt typ=t13s_s2 val=0j bnd=m
  258 : __trgt typ=t13s_s2 val=0j bnd=m
  259 : __trgt typ=t13s_s2 val=0j bnd=m
  260 : __trgt typ=t21s_s2 val=0j bnd=m
  261 : __trgt typ=t13s_s2 val=0j bnd=m
  262 : __trgt typ=t21s_s2 val=0j bnd=m
  263 : __trgt typ=t13s_s2 val=0j bnd=m
  264 : __trgt typ=t21s_s2 val=0j bnd=m
  265 : __trgt typ=t13s_s2 val=0j bnd=m
  266 : __trgt typ=t21s_s2 val=0j bnd=m
  267 : __trgt typ=t13s_s2 val=0j bnd=m
  268 : __trgt typ=t21s_s2 val=0j bnd=m
  269 : __trgt typ=t13s_s2 val=0j bnd=m
  270 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fldexpf {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (n.18 var=19) source ()  <29>;
    (x.19 var=20) source ()  <30>;
    (ix.20 var=21) source ()  <31>;
    (k.21 var=22) source ()  <32>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (__arg_x.27 var=26 stl=X off=11) inp ()  <38>;
    (__arg_x.28 var=26) deassign (__arg_x.27)  <39>;
    (__arg_n.30 var=27 stl=X off=12) inp ()  <41>;
    (__arg_n.31 var=27) deassign (__arg_n.30)  <42>;
    (__rd___sp.33 var=23) rd_res_reg (__R_SP.11 __sp.17)  <44>;
    (__ct_m16S0.34 var=28) const ()  <45>;
    (__tmp.36 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_m16S0.34)  <47>;
    (__R_SP.37 var=12 __sp.38 var=18) wr_res_reg (__tmp.36 __sp.17)  <48>;
    (__rd___sp.39 var=23) rd_res_reg (__R_SP.11 __sp.38)  <50>;
    (__ct_0t0.40 var=32) const ()  <51>;
    (__adr_n.42 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_0t0.40)  <53>;
    (__rd___sp.44 var=23) rd_res_reg (__R_SP.11 __sp.38)  <55>;
    (__rd___sp.49 var=23) rd_res_reg (__R_SP.11 __sp.38)  <60>;
    (__rd___sp.54 var=23) rd_res_reg (__R_SP.11 __sp.38)  <65>;
    (__M_DMw.68 var=5 n.69 var=19) store (__arg_n.31 __adr_n.42 n.18)  <79>;
    call {
        () chess_separator_scheduler ()  <80>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.45 var=36) const ()  <56>;
    (__adr_x.47 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_4t0.45)  <58>;
    (__M_DMw.70 var=5 x.71 var=20) store (__arg_x.28 __adr_x.47 x.19)  <81>;
    call {
        () chess_separator_scheduler ()  <82>;
    } #6 off=3
    #7 off=4
    (__ct_12t0.50 var=40) const ()  <61>;
    (__adr_ix.52 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.49 __ct_12t0.50)  <63>;
    (__fch_x.72 var=56) load (__M_DMw.4 __adr_x.47 x.71)  <83>;
    (__M_DMw.74 var=5 ix.75 var=21) store (__fch_x.72 __adr_ix.52 ix.20)  <85>;
    call {
        () chess_separator_scheduler ()  <86>;
    } #8 off=5
    #9 off=6
    (__ct_8t0.55 var=44) const ()  <66>;
    (__adr_k.57 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.54 __ct_8t0.55)  <68>;
    (__fch_ix.76 var=58) load (__M_DMw.4 __adr_ix.52 ix.75)  <87>;
    (__ct_2139095040.77 var=59) const ()  <88>;
    (__tmp.79 var=61) __sint__ad___sint___sint (__fch_ix.76 __ct_2139095040.77)  <90>;
    (__ct_23.80 var=62) const ()  <91>;
    (__tmp.82 var=64) __sint__rs___sint___sint (__tmp.79 __ct_23.80)  <93>;
    (__M_DMw.83 var=5 k.84 var=22) store (__tmp.82 __adr_k.57 k.21)  <94>;
    call {
        () chess_separator_scheduler ()  <95>;
    } #10 off=7
    #11 off=8
    (__fch_k.85 var=65) load (__M_DMw.4 __adr_k.57 k.84)  <96>;
    (__ct_0.86 var=66) const ()  <97>;
    (__ct_16s0.152 var=77) const ()  <165>;
    (__ct_228737632.265 var=100) const ()  <290>;
    (__ct_m25.492 var=154) const ()  <538>;
    (f32_mul.721 var=233) const ()  <909>;
    (__tmp.793 var=68) bool__ne___sint___sint (__fch_k.85 __ct_0.86)  <1057>;
    (__trgt.800 var=259) const ()  <1094>;
    () void_br_bool_t13s_s2 (__tmp.793 __trgt.800)  <1095>;
    (__either.801 var=256) undefined ()  <1096>;
    if {
        {
            () if_expr (__either.801)  <127>;
        } #13
        {
        } #39 off=26
        {
            #15 off=9
            (__fch_ix.116 var=69) load (__M_DMw.4 __adr_ix.52 ix.75)  <128>;
            (__ct_2147483647.117 var=70) const ()  <129>;
            (__tmp.119 var=72) __sint__ad___sint___sint (__fch_ix.116 __ct_2147483647.117)  <131>;
            (__tmp.122 var=75) bool__eq___sint___sint (__tmp.119 __ct_0.86)  <134>;
            (__trgt.796 var=257) const ()  <1086>;
            () void_br_bool_t13s_s2 (__tmp.122 __trgt.796)  <1087>;
            (__either.797 var=256) undefined ()  <1088>;
            if {
                {
                    () if_expr (__either.797)  <162>;
                    () chess_rear_then ()  <1089>;
                } #17
                {
                    (__rt.150 var=25) load (__M_DMw.4 __adr_x.47 x.71)  <163>;
                    (__rd___sp.151 var=23) rd_res_reg (__R_SP.11 __sp.38)  <164>;
                    (__tmp.154 var=79) __Pvoid__pl___Pvoid___sint (__rd___sp.151 __ct_16s0.152)  <167>;
                    (__R_SP.155 var=12 __sp.156 var=18) wr_res_reg (__tmp.154 __sp.38)  <168>;
                    () void___rts_jr_w32 (__la.24)  <169>;
                    (__rt.157 var=25 stl=X off=10) assign (__rt.150)  <170>;
                    () out (__rt.157)  <171>;
                    () sink (__sp.156)  <177>;
                    () sink (n.69)  <178>;
                    () sink (x.71)  <179>;
                    () sink (ix.75)  <180>;
                    () sink (k.84)  <181>;
                } #21 off=11 nxt=-2
                {
                } #22 off=10
                {
                } #23
            } #16
            #143 off=12
            (__fch_x.212 var=80) load (__M_DMw.4 __adr_x.47 x.71)  <236>;
            (__ct_1275068416.213 var=81) const ()  <237>;
            (__link.722 var=234) w32_jal_t21s_s2 (f32_mul.721)  <910>;
            call {
                (a.723 var=231 stl=X off=11) assign (__fch_x.212)  <911>;
                (b.724 var=232 stl=X off=12) assign (__ct_1275068416.213)  <912>;
                (__link.725 var=234 stl=X off=1) assign (__link.722)  <913>;
                (__tmp.726 var=83 stl=X off=10) Ff32_mul (__link.725 a.723 b.724)  <914>;
                (__tmp.727 var=83) deassign (__tmp.726)  <915>;
            } #144 off=13
            #140 off=14
            (__M_DMw.216 var=5 x.217 var=20) store (__tmp.727 __adr_x.47 x.71)  <240>;
            call {
                () chess_separator_scheduler ()  <241>;
            } #25 off=15
            #26 off=16
            (__fch_x.218 var=84) load (__M_DMw.4 __adr_x.47 x.217)  <242>;
            (__M_DMw.220 var=5 ix.221 var=21) store (__fch_x.218 __adr_ix.52 ix.75)  <244>;
            call {
                () chess_separator_scheduler ()  <245>;
            } #27 off=17
            #28 off=18
            (__fch_ix.222 var=86) load (__M_DMw.4 __adr_ix.52 ix.221)  <246>;
            (__tmp.225 var=89) __sint__ad___sint___sint (__fch_ix.222 __ct_2139095040.77)  <249>;
            (__tmp.228 var=92) __sint__rs___sint___sint (__tmp.225 __ct_23.80)  <252>;
            (__tmp.231 var=95) __sint__pl___sint___sint (__tmp.228 __ct_m25.492)  <255>;
            (__M_DMw.232 var=5 k.233 var=22) store (__tmp.231 __adr_k.57 k.84)  <256>;
            call {
                () chess_separator_scheduler ()  <257>;
            } #29 off=19
            #30 off=20
            (__fch_n.234 var=96) load (__M_DMw.4 __adr_n.42 n.69)  <258>;
            (__ct_m50000.235 var=97) const ()  <259>;
            (__tmp.237 var=99) bool__lt___sint___sint (__fch_n.234 __ct_m50000.235)  <261>;
            (__trgt.798 var=258) const ()  <1090>;
            () void_br_bool_t13s_s2 (__tmp.237 __trgt.798)  <1091>;
            (__either.799 var=256) undefined ()  <1092>;
            if {
                {
                    () if_expr (__either.799)  <289>;
                    () chess_rear_then ()  <1093>;
                } #32
                {
                    #151 off=22
                    (__fch_x.267 var=102) load (__M_DMw.4 __adr_x.47 x.217)  <292>;
                    (__link.732 var=234) w32_jal_t21s_s2 (f32_mul.721)  <923>;
                    call {
                        (a.733 var=231 stl=X off=11) assign (__ct_228737632.265)  <924>;
                        (b.734 var=232 stl=X off=12) assign (__fch_x.267)  <925>;
                        (__link.735 var=234 stl=X off=1) assign (__link.732)  <926>;
                        (__rt.736 var=25 stl=X off=10) Ff32_mul (__link.735 a.733 b.734)  <927>;
                        (__rt.737 var=25) deassign (__rt.736)  <928>;
                    } #152 off=23
                    #36 off=24 nxt=-2
                    (__rd___sp.269 var=23) rd_res_reg (__R_SP.11 __sp.38)  <294>;
                    (__tmp.272 var=106) __Pvoid__pl___Pvoid___sint (__rd___sp.269 __ct_16s0.152)  <297>;
                    (__R_SP.273 var=12 __sp.274 var=18) wr_res_reg (__tmp.272 __sp.38)  <298>;
                    () void___rts_jr_w32 (__la.24)  <299>;
                    (__rt.275 var=25 stl=X off=10) assign (__rt.737)  <300>;
                    () out (__rt.275)  <301>;
                    () sink (__sp.274)  <307>;
                    () sink (n.69)  <308>;
                    () sink (x.217)  <309>;
                    () sink (ix.221)  <310>;
                    () sink (k.233)  <311>;
                } #33
                {
                } #37 off=21
                {
                } #38
            } #31
            #192 off=25
            (__trgt.802 var=260) const ()  <1097>;
            () void_j_t21s_s2 (__trgt.802)  <1098>;
        } #14
        {
            (x.337 var=20) merge (x.71 x.217)  <373>;
            (ix.338 var=21) merge (ix.75 ix.221)  <374>;
            (k.339 var=22) merge (k.84 k.233)  <375>;
        } #40
    } #12
    #41 off=27
    (__fch_k.357 var=107) load (__M_DMw.4 __adr_k.57 k.339)  <393>;
    (__ct_255.358 var=108) const ()  <394>;
    (__tmp.360 var=110) bool__eq___sint___sint (__fch_k.357 __ct_255.358)  <396>;
    (__trgt.815 var=269) const ()  <1119>;
    () void_br_bool_t13s_s2 (__tmp.360 __trgt.815)  <1120>;
    (__either.816 var=256) undefined ()  <1121>;
    if {
        {
            () if_expr (__either.816)  <424>;
        } #43
        {
            #160 off=67
            (__fch_x.388 var=111) load (__M_DMw.4 __adr_x.47 x.337)  <425>;
            (__fch_x.389 var=112) load (__M_DMw.4 __adr_x.47 x.337)  <426>;
            (f32_add.741 var=240) const ()  <935>;
            (__link.742 var=241) w32_jal_t21s_s2 (f32_add.741)  <936>;
            call {
                (a.743 var=238 stl=X off=11) assign (__fch_x.388)  <937>;
                (b.744 var=239 stl=X off=12) assign (__fch_x.389)  <938>;
                (__link.745 var=241 stl=X off=1) assign (__link.742)  <939>;
                (__rt.746 var=25 stl=X off=10) Ff32_add (__link.745 a.743 b.744)  <940>;
                (__rt.747 var=25) deassign (__rt.746)  <941>;
            } #161 off=68
        } #44
        {
            #48 off=28
            (__fch_k.391 var=114) load (__M_DMw.4 __adr_k.57 k.339)  <429>;
            (__fch_n.392 var=115) load (__M_DMw.4 __adr_n.42 n.69)  <430>;
            (__tmp.393 var=116) __sint__pl___sint___sint (__fch_k.391 __fch_n.392)  <431>;
            (__M_DMw.394 var=5 k.395 var=22) store (__tmp.393 __adr_k.57 k.339)  <432>;
            call {
                () chess_separator_scheduler ()  <433>;
            } #49 off=29
            #121 off=30
            (__fch_k.396 var=117) load (__M_DMw.4 __adr_k.57 k.395)  <434>;
            (__ct_254.397 var=118) const ()  <435>;
            (__ct_1900671690.431 var=122) const ()  <473>;
            (__ct_2147483648.435 var=126) const ()  <477>;
            (__tmp.703 var=120) bool__lt___sint___sint (__ct_254.397 __fch_k.396)  <853>;
            (__trgt.812 var=267) const ()  <1114>;
            () void_br_bool_t13s_s2 (__tmp.703 __trgt.812)  <1115>;
            (__either.813 var=256) undefined ()  <1116>;
            if {
                {
                    () if_expr (__either.813)  <465>;
                } #52
                {
                    #56 off=60
                    (__fch_x.429 var=121) load (__M_DMw.4 __adr_x.47 x.337)  <469>;
                    call {
                        () chess_separator_scheduler ()  <472>;
                    } #59 off=61
                    #60 off=62
                    (__tmp.437 var=128) __uint__ad___uint___uint (__fch_x.429 __ct_2147483648.435)  <479>;
                    (__tmp.438 var=129) __uint__or___uint___uint (__tmp.437 __ct_1900671690.431)  <480>;
                    call {
                        () chess_separator_scheduler ()  <483>;
                    } #61 off=63
                    #166 off=64
                    (__link.752 var=234) w32_jal_t21s_s2 (f32_mul.721)  <949>;
                    call {
                        (a.753 var=231 stl=X off=11) assign (__ct_1900671690.431)  <950>;
                        (b.754 var=232 stl=X off=12) assign (__tmp.438)  <951>;
                        (__link.755 var=234 stl=X off=1) assign (__link.752)  <952>;
                        (__rt.756 var=25 stl=X off=10) Ff32_mul (__link.755 a.753 b.754)  <953>;
                        (__rt.757 var=25) deassign (__rt.756)  <954>;
                    } #167 off=65
                } #53
                {
                    #126 off=31
                    (__fch_k.444 var=135) load (__M_DMw.4 __adr_k.57 k.395)  <488>;
                    (__ct_2155872255.477 var=141) const ()  <522>;
                    (__tmp.707 var=138) bool__lt___sint___sint (__ct_0.86 __fch_k.444)  <860>;
                    (__trgt.809 var=265) const ()  <1109>;
                    () void_br_bool_t13s_s2 (__tmp.707 __trgt.809)  <1110>;
                    (__either.810 var=256) undefined ()  <1111>;
                    if {
                        {
                            () if_expr (__either.810)  <519>;
                        } #67
                        {
                            #69 off=56
                            (__fch_ix.475 var=139) load (__M_DMw.4 __adr_ix.52 ix.338)  <520>;
                            (__tmp.479 var=143) __uint__ad___uint___uint (__fch_ix.475 __ct_2155872255.477)  <524>;
                            (__fch_k.480 var=144) load (__M_DMw.4 __adr_k.57 k.395)  <525>;
                            (__tmp.483 var=147) __sint__ls___sint___sint (__fch_k.480 __ct_23.80)  <528>;
                            (__tmp.485 var=149) __uint__or___uint___uint (__tmp.479 __tmp.483)  <530>;
                            (__M_DMw.488 var=5 x.489 var=20) store (__tmp.485 __adr_x.47 x.337)  <533>;
                            call {
                                () chess_separator_scheduler ()  <534>;
                            } #70 off=57
                            #71 off=58
                            (__rt.490 var=25) load (__M_DMw.4 __adr_x.47 x.489)  <535>;
                        } #68
                        {
                            #131 off=32
                            (__fch_k.491 var=153) load (__M_DMw.4 __adr_k.57 k.395)  <537>;
                            (__tmp.711 var=156) bool__ge___sint___sint (__ct_m25.492 __fch_k.491)  <867>;
                            (__trgt.806 var=263) const ()  <1104>;
                            () void_br_bool_t13s_s2 (__tmp.711 __trgt.806)  <1105>;
                            (__either.807 var=256) undefined ()  <1106>;
                            if {
                                {
                                    () if_expr (__either.807)  <568>;
                                } #76
                                {
                                    #136 off=40
                                    (__fch_n.522 var=157) load (__M_DMw.4 __adr_n.42 n.69)  <569>;
                                    (__ct_50000.523 var=158) const ()  <570>;
                                    (__tmp.715 var=160) bool__lt___sint___sint (__ct_50000.523 __fch_n.522)  <874>;
                                    (__trgt.803 var=261) const ()  <1099>;
                                    () void_br_bool_t13s_s2 (__tmp.715 __trgt.803)  <1100>;
                                    (__either.804 var=256) undefined ()  <1101>;
                                    if {
                                        {
                                            () if_expr (__either.804)  <600>;
                                        } #80
                                        {
                                            #84 off=48
                                            (__fch_x.555 var=161) load (__M_DMw.4 __adr_x.47 x.337)  <604>;
                                            call {
                                                () chess_separator_scheduler ()  <607>;
                                            } #87 off=49
                                            #88 off=50
                                            (__tmp.563 var=168) __uint__ad___uint___uint (__fch_x.555 __ct_2147483648.435)  <614>;
                                            (__tmp.564 var=169) __uint__or___uint___uint (__tmp.563 __ct_1900671690.431)  <615>;
                                            call {
                                                () chess_separator_scheduler ()  <618>;
                                            } #89 off=51
                                            #172 off=52
                                            (__link.762 var=234) w32_jal_t21s_s2 (f32_mul.721)  <962>;
                                            call {
                                                (a.763 var=231 stl=X off=11) assign (__ct_1900671690.431)  <963>;
                                                (b.764 var=232 stl=X off=12) assign (__tmp.564)  <964>;
                                                (__link.765 var=234 stl=X off=1) assign (__link.762)  <965>;
                                                (__rt.766 var=25 stl=X off=10) Ff32_mul (__link.765 a.763 b.764)  <966>;
                                                (__rt.767 var=25) deassign (__rt.766)  <967>;
                                            } #173 off=53
                                        } #81
                                        {
                                            #95 off=41
                                            (__fch_x.572 var=175) load (__M_DMw.4 __adr_x.47 x.337)  <626>;
                                            call {
                                                () chess_separator_scheduler ()  <629>;
                                            } #98 off=42
                                            #99 off=43
                                            (__tmp.580 var=182) __uint__ad___uint___uint (__fch_x.572 __ct_2147483648.435)  <636>;
                                            (__tmp.581 var=183) __uint__or___uint___uint (__tmp.580 __ct_228737632.265)  <637>;
                                            call {
                                                () chess_separator_scheduler ()  <640>;
                                            } #100 off=44
                                            #178 off=45
                                            (__link.772 var=234) w32_jal_t21s_s2 (f32_mul.721)  <975>;
                                            call {
                                                (a.773 var=231 stl=X off=11) assign (__ct_228737632.265)  <976>;
                                                (b.774 var=232 stl=X off=12) assign (__tmp.581)  <977>;
                                                (__link.775 var=234 stl=X off=1) assign (__link.772)  <978>;
                                                (__rt.776 var=25 stl=X off=10) Ff32_mul (__link.775 a.773 b.774)  <979>;
                                                (__rt.777 var=25) deassign (__rt.776)  <980>;
                                            } #179 off=46
                                            #193 off=47
                                            (__trgt.805 var=262) const ()  <1102>;
                                            () void_j_t21s_s2 (__trgt.805)  <1103>;
                                        } #92
                                        {
                                            (__rt.587 var=25) merge (__rt.767 __rt.777)  <645>;
                                        } #103
                                    } #79
                                } #77
                                {
                                    #106 off=33
                                    (__ct_25.229 var=93) const ()  <253>;
                                    (__fch_k.594 var=189) load (__M_DMw.4 __adr_k.57 k.395)  <653>;
                                    (__tmp.597 var=192) __sint__pl___sint___sint (__fch_k.594 __ct_25.229)  <656>;
                                    (__M_DMw.598 var=5 k.599 var=22) store (__tmp.597 __adr_k.57 k.395)  <657>;
                                    call {
                                        () chess_separator_scheduler ()  <658>;
                                    } #107 off=34
                                    #108 off=35
                                    (__fch_ix.600 var=193) load (__M_DMw.4 __adr_ix.52 ix.338)  <659>;
                                    (__tmp.604 var=197) __uint__ad___uint___uint (__fch_ix.600 __ct_2155872255.477)  <663>;
                                    (__fch_k.605 var=198) load (__M_DMw.4 __adr_k.57 k.599)  <664>;
                                    (__tmp.608 var=201) __sint__ls___sint___sint (__fch_k.605 __ct_23.80)  <667>;
                                    (__tmp.610 var=203) __uint__or___uint___uint (__tmp.604 __tmp.608)  <669>;
                                    (__M_DMw.613 var=5 x.614 var=20) store (__tmp.610 __adr_x.47 x.337)  <672>;
                                    call {
                                        () chess_separator_scheduler ()  <673>;
                                    } #109 off=36
                                    #186 off=37
                                    (__fch_x.615 var=206) load (__M_DMw.4 __adr_x.47 x.614)  <674>;
                                    (__ct_855638016.616 var=207) const ()  <675>;
                                    (__link.782 var=234) w32_jal_t21s_s2 (f32_mul.721)  <988>;
                                    call {
                                        (a.783 var=231 stl=X off=11) assign (__fch_x.615)  <989>;
                                        (b.784 var=232 stl=X off=12) assign (__ct_855638016.616)  <990>;
                                        (__link.785 var=234 stl=X off=1) assign (__link.782)  <991>;
                                        (__rt.786 var=25 stl=X off=10) Ff32_mul (__link.785 a.783 b.784)  <992>;
                                        (__rt.787 var=25) deassign (__rt.786)  <993>;
                                    } #187 off=38
                                    #195 off=39
                                    (__trgt.808 var=264) const ()  <1107>;
                                    () void_j_t21s_s2 (__trgt.808)  <1108>;
                                } #105
                                {
                                    (x.619 var=20) merge (x.337 x.614)  <679>;
                                    (k.620 var=22) merge (k.395 k.599)  <680>;
                                    (__rt.621 var=25) merge (__rt.587 __rt.787)  <681>;
                                } #112
                            } #75
                            #196 off=55
                            (__trgt.811 var=266) const ()  <1112>;
                            () void_j_t21s_s2 (__trgt.811)  <1113>;
                        } #73
                        {
                            (x.628 var=20) merge (x.489 x.619)  <688>;
                            (k.629 var=22) merge (k.395 k.620)  <689>;
                            (__rt.630 var=25) merge (__rt.490 __rt.621)  <690>;
                        } #113
                    } #66
                    #197 off=59
                    (__trgt.814 var=268) const ()  <1117>;
                    () void_j_t21s_s2 (__trgt.814)  <1118>;
                } #64
                {
                    (x.637 var=20) merge (x.337 x.628)  <697>;
                    (k.638 var=22) merge (k.395 k.629)  <698>;
                    (__rt.639 var=25) merge (__rt.757 __rt.630)  <699>;
                } #114
            } #51
            #198 off=66
            (__trgt.817 var=270) const ()  <1122>;
            () void_j_t21s_s2 (__trgt.817)  <1123>;
        } #47
        {
            (x.649 var=20) merge (x.337 x.637)  <709>;
            (k.650 var=22) merge (k.339 k.638)  <710>;
            (__rt.651 var=25) merge (__rt.747 __rt.639)  <711>;
        } #115
    } #42
    #117 off=69 nxt=-2
    (__rd___sp.661 var=23) rd_res_reg (__R_SP.11 __sp.38)  <721>;
    (__tmp.664 var=212) __Pvoid__pl___Pvoid___sint (__rd___sp.661 __ct_16s0.152)  <724>;
    (__R_SP.665 var=12 __sp.666 var=18) wr_res_reg (__tmp.664 __sp.38)  <725>;
    () void___rts_jr_w32 (__la.24)  <726>;
    (__rt.667 var=25 stl=X off=10) assign (__rt.651)  <727>;
    () out (__rt.667)  <728>;
    () sink (__sp.666)  <734>;
    () sink (n.69)  <735>;
    () sink (x.649)  <736>;
    () sink (ix.338)  <737>;
    () sink (k.650)  <738>;
} #0
0 : 'src/math.c';
----------
0 : (0,59:0,0);
3 : (0,59:22,0);
4 : (0,59:22,0);
5 : (0,59:13,0);
6 : (0,59:13,0);
7 : (0,68:4,6);
8 : (0,68:4,6);
9 : (0,69:6,8);
10 : (0,69:6,8);
11 : (0,70:9,8);
12 : (0,70:4,8);
14 : (0,70:14,9);
15 : (0,71:27,9);
16 : (0,71:8,9);
21 : (0,71:32,10);
22 : (0,71:8,13);
25 : (0,72:10,17);
26 : (0,73:4,18);
27 : (0,73:4,18);
28 : (0,74:10,20);
29 : (0,74:10,20);
30 : (0,75:13,20);
31 : (0,75:8,20);
33 : (0,75:23,21);
36 : (0,75:23,21);
37 : (0,75:8,24);
39 : (0,70:4,29);
41 : (0,77:9,32);
42 : (0,77:4,32);
44 : (0,77:17,33);
47 : (0,77:17,35);
48 : (0,78:6,37);
49 : (0,78:6,37);
51 : (0,79:4,37);
53 : (0,79:31,38);
56 : (0,79:46,41);
59 : (0,79:31,43);
60 : (0,79:31,45);
61 : (0,79:31,45);
64 : (0,79:19,50);
66 : (0,80:4,51);
68 : (0,81:8,52);
69 : (0,81:11,53);
70 : (0,81:11,53);
71 : (0,81:49,55);
73 : (0,81:49,57);
75 : (0,82:4,58);
77 : (0,82:18,59);
79 : (0,83:8,59);
81 : (0,85:15,60);
84 : (0,84:39,63);
87 : (0,84:24,65);
88 : (0,84:24,67);
89 : (0,84:24,67);
92 : (0,84:12,72);
95 : (0,85:42,75);
98 : (0,85:27,77);
99 : (0,85:27,79);
100 : (0,85:27,79);
105 : (0,83:8,89);
106 : (0,87:6,91);
107 : (0,87:6,91);
108 : (0,88:3,92);
109 : (0,88:3,92);
117 : (0,89:4,106);
121 : (0,79:10,37);
126 : (0,80:10,51);
131 : (0,82:10,58);
136 : (0,83:14,59);
140 : (0,72:8,16);
143 : (0,72:10,16);
144 : (0,72:10,16);
151 : (0,75:34,21);
152 : (0,75:34,21);
160 : (0,77:25,33);
161 : (0,77:25,33);
166 : (0,79:19,48);
167 : (0,79:19,48);
172 : (0,84:12,70);
173 : (0,84:12,70);
178 : (0,85:15,82);
179 : (0,85:15,82);
186 : (0,89:12,92);
187 : (0,89:12,92);
----------
44 : (0,59:6,0);
45 : (0,59:6,0);
47 : (0,59:6,0);
48 : (0,59:6,0);
50 : (0,59:26,0);
51 : (0,59:26,0);
53 : (0,59:26,0);
55 : (0,59:19,0);
56 : (0,59:19,0);
58 : (0,59:19,0);
60 : (0,67:14,0);
61 : (0,67:14,0);
63 : (0,67:14,0);
65 : (0,67:12,0);
66 : (0,67:12,0);
68 : (0,67:12,0);
79 : (0,59:22,0);
80 : (0,59:22,0);
81 : (0,59:13,0);
82 : (0,59:13,0);
83 : (0,68:15,5);
85 : (0,68:1,5);
86 : (0,68:4,6);
87 : (0,69:9,7);
88 : (0,69:12,0);
90 : (0,69:11,7);
91 : (0,69:25,0);
93 : (0,69:23,7);
94 : (0,69:4,7);
95 : (0,69:6,8);
96 : (0,70:8,8);
97 : (0,70:11,0);
127 : (0,70:4,8);
128 : (0,71:13,9);
129 : (0,71:16,0);
131 : (0,71:15,9);
134 : (0,71:27,9);
162 : (0,71:8,9);
163 : (0,71:39,10);
164 : (0,71:32,0);
165 : (0,71:32,0);
167 : (0,71:32,0);
168 : (0,71:32,10);
169 : (0,71:32,10);
170 : (0,71:39,0);
236 : (0,72:8,16);
237 : (0,72:13,0);
240 : (0,72:8,16);
241 : (0,72:10,17);
242 : (0,73:15,17);
244 : (0,73:1,17);
245 : (0,73:4,18);
246 : (0,74:14,19);
249 : (0,74:16,19);
252 : (0,74:28,19);
253 : (0,74:36,0);
255 : (0,74:34,19);
256 : (0,74:8,19);
257 : (0,74:10,20);
258 : (0,75:12,20);
259 : (0,75:15,0);
261 : (0,75:13,20);
289 : (0,75:8,20);
290 : (0,75:30,0);
292 : (0,75:35,21);
294 : (0,75:23,0);
297 : (0,75:23,0);
298 : (0,75:23,21);
299 : (0,75:23,21);
300 : (0,75:34,0);
373 : (0,70:4,31);
374 : (0,70:4,31);
375 : (0,70:4,31);
393 : (0,77:8,32);
394 : (0,77:11,0);
396 : (0,77:9,32);
424 : (0,77:4,32);
425 : (0,77:24,33);
426 : (0,77:26,33);
429 : (0,78:8,36);
430 : (0,78:10,36);
431 : (0,78:9,36);
432 : (0,78:4,36);
433 : (0,78:6,37);
434 : (0,79:8,37);
435 : (0,79:13,0);
465 : (0,79:4,37);
469 : (0,79:46,41);
472 : (0,79:31,43);
473 : (0,79:31,0);
477 : (0,79:31,0);
479 : (0,79:31,44);
480 : (0,79:31,44);
483 : (0,79:31,45);
488 : (0,80:8,51);
519 : (0,80:4,51);
520 : (0,81:23,52);
522 : (0,81:25,0);
524 : (0,81:25,52);
525 : (0,81:39,52);
528 : (0,81:40,52);
530 : (0,81:37,52);
533 : (0,81:9,52);
534 : (0,81:11,53);
535 : (0,81:56,54);
537 : (0,82:8,58);
538 : (0,82:13,0);
568 : (0,82:4,58);
569 : (0,83:12,59);
570 : (0,83:16,0);
600 : (0,83:8,59);
604 : (0,84:39,63);
607 : (0,84:24,65);
614 : (0,84:24,66);
615 : (0,84:24,66);
618 : (0,84:24,67);
626 : (0,85:42,75);
629 : (0,85:27,77);
636 : (0,85:27,78);
637 : (0,85:27,78);
640 : (0,85:27,79);
645 : (0,83:8,85);
653 : (0,87:4,90);
656 : (0,87:6,90);
657 : (0,87:4,90);
658 : (0,87:6,91);
659 : (0,88:15,91);
663 : (0,88:17,91);
664 : (0,88:31,91);
667 : (0,88:32,91);
669 : (0,88:29,91);
672 : (0,88:1,91);
673 : (0,88:3,92);
674 : (0,89:11,92);
675 : (0,89:13,0);
679 : (0,82:4,95);
680 : (0,82:4,95);
681 : (0,82:4,95);
688 : (0,80:4,98);
689 : (0,80:4,98);
690 : (0,80:4,98);
697 : (0,79:4,101);
698 : (0,79:4,101);
699 : (0,79:4,101);
709 : (0,77:4,104);
710 : (0,77:4,104);
711 : (0,77:4,104);
721 : (0,89:4,0);
724 : (0,89:4,0);
725 : (0,89:4,106);
726 : (0,89:4,106);
727 : (0,89:4,0);
853 : (0,79:10,37);
860 : (0,80:10,51);
867 : (0,82:10,58);
874 : (0,83:14,59);
909 : (0,72:10,0);
910 : (0,72:10,16);
911 : (0,72:10,16);
912 : (0,72:10,16);
913 : (0,72:10,16);
914 : (0,72:10,16);
915 : (0,72:10,16);
923 : (0,75:34,21);
924 : (0,75:34,21);
925 : (0,75:34,21);
926 : (0,75:34,21);
927 : (0,75:34,21);
928 : (0,75:34,21);
935 : (0,77:25,0);
936 : (0,77:25,33);
937 : (0,77:25,33);
938 : (0,77:25,33);
939 : (0,77:25,33);
940 : (0,77:25,33);
941 : (0,77:25,33);
949 : (0,79:30,47);
950 : (0,79:30,47);
951 : (0,79:30,47);
952 : (0,79:30,47);
953 : (0,79:30,47);
954 : (0,79:30,47);
962 : (0,84:23,69);
963 : (0,84:23,69);
964 : (0,84:23,69);
965 : (0,84:23,69);
966 : (0,84:23,69);
967 : (0,84:23,69);
975 : (0,85:26,81);
976 : (0,85:26,81);
977 : (0,85:26,81);
978 : (0,85:26,81);
979 : (0,85:26,81);
980 : (0,85:26,81);
988 : (0,89:12,92);
989 : (0,89:12,92);
990 : (0,89:12,92);
991 : (0,89:12,92);
992 : (0,89:12,92);
993 : (0,89:12,92);
1057 : (0,70:9,8);
1087 : (0,71:8,9);
1091 : (0,75:8,20);
1095 : (0,70:4,8);
1100 : (0,83:8,59);
1105 : (0,82:4,58);
1110 : (0,80:4,51);
1115 : (0,79:4,37);
1120 : (0,77:4,32);

