
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 13:35:43 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! static float kernel_sinf(float, float, int)
Fkernel_sinf : user_defined, called {
    fnm : "kernel_sinf" 'float kernel_sinf(float, float, int)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=28 );
}
****
!!  long f32_to_i32_r_minMag(float32_t, bool)
Ff32_to_i32_r_minMag : user_defined, called {
    fnm : "f32_to_i32_r_minMag" 'long f32_to_i32_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_sub(float32_t, float32_t)
Ff32_sub : user_defined, called {
    fnm : "f32_sub" 'float32_t f32_sub(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : kernel_sinf typ=u08 bnd=i stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : iy typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   20 : y typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   21 : x typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   22 : ix typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   23 : z typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   24 : v typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   25 : r typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=__ffloat_DMb
   26 : __rd___sp typ=w32 bnd=m
   27 : __la typ=w32 bnd=p tref=w32__
   28 : __rt typ=w32 bnd=p tref=__ffloat__
   29 : __arg_x typ=w32 bnd=p tref=__ffloat__
   30 : __arg_y typ=w32 bnd=p tref=__ffloat__
   31 : __arg_iy typ=w32 bnd=p tref=__sint__
   32 : __ct_m28S0 typ=w32 val=-28S0 bnd=m
   34 : __tmp typ=w32 bnd=m
   36 : __ct_0t0 typ=w32 val=0t0 bnd=m
   38 : __adr_iy typ=w32 bnd=m adro=19
   40 : __ct_4t0 typ=w32 val=4t0 bnd=m
   42 : __adr_y typ=w32 bnd=m adro=20
   44 : __ct_8t0 typ=w32 val=8t0 bnd=m
   46 : __adr_x typ=w32 bnd=m adro=21
   48 : __ct_24t0 typ=w32 val=24t0 bnd=m
   50 : __adr_ix typ=w32 bnd=m adro=22
   52 : __ct_12t0 typ=w32 val=12t0 bnd=m
   54 : __adr_z typ=w32 bnd=m adro=23
   56 : __ct_20t0 typ=w32 val=20t0 bnd=m
   58 : __adr_v typ=w32 bnd=m adro=24
   60 : __ct_16t0 typ=w32 val=16t0 bnd=m
   62 : __adr_r typ=w32 bnd=m adro=25
   63 : __fch_x typ=w32 bnd=m
   65 : __fch_ix typ=w32 bnd=m
   66 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   68 : __tmp typ=w32 bnd=m
   69 : __fch_ix typ=w32 bnd=m
   70 : __ct_838860800 typ=t20s_rp12 val=204800f bnd=m
   72 : __tmp typ=bool bnd=m
   73 : __fch_x typ=w32 bnd=m
   74 : __tmp typ=w32 bnd=m
   75 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   77 : __tmp typ=bool bnd=m
   79 : __ct_28s0 typ=w32 val=28s0 bnd=m
   81 : __tmp typ=w32 bnd=m
   82 : __fch_x typ=w32 bnd=m
   83 : __fch_x typ=w32 bnd=m
   84 : __tmp typ=w32 bnd=m
   85 : __fch_z typ=w32 bnd=m
   86 : __fch_x typ=w32 bnd=m
   87 : __tmp typ=w32 bnd=m
   88 : __ct_1007192201 typ=w32 val=1007192201f bnd=m
   90 : __fch_z typ=w32 bnd=m
   91 : __ct_3109031169 typ=w32 val=-1185936127f bnd=m
   93 : __fch_z typ=w32 bnd=m
   94 : __ct_909700891 typ=w32 val=909700891f bnd=m
   96 : __fch_z typ=w32 bnd=m
   97 : __ct_3000446772 typ=w32 val=-1294520524f bnd=m
   99 : __fch_z typ=w32 bnd=m
  100 : __ct_791595475 typ=w32 val=791595475f bnd=m
  102 : __tmp typ=w32 bnd=m
  103 : __tmp typ=w32 bnd=m
  104 : __tmp typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  106 : __tmp typ=w32 bnd=m
  107 : __tmp typ=w32 bnd=m
  108 : __tmp typ=w32 bnd=m
  109 : __tmp typ=w32 bnd=m
  110 : __fch_iy typ=w32 bnd=m
  113 : __tmp typ=bool bnd=m
  114 : __fch_x typ=w32 bnd=m
  115 : __fch_v typ=w32 bnd=m
  116 : __ct_3190467243 typ=w32 val=-1104500053f bnd=m
  118 : __fch_z typ=w32 bnd=m
  119 : __fch_r typ=w32 bnd=m
  120 : __tmp typ=w32 bnd=m
  121 : __tmp typ=w32 bnd=m
  122 : __tmp typ=w32 bnd=m
  124 : __fch_x typ=w32 bnd=m
  125 : __fch_z typ=w32 bnd=m
  126 : __ct_1056964608 typ=t20s_rp12 val=258048f bnd=m
  128 : __fch_y typ=w32 bnd=m
  129 : __tmp typ=w32 bnd=m
  130 : __fch_v typ=w32 bnd=m
  131 : __fch_r typ=w32 bnd=m
  132 : __tmp typ=w32 bnd=m
  133 : __tmp typ=w32 bnd=m
  134 : __tmp typ=w32 bnd=m
  135 : __fch_y typ=w32 bnd=m
  136 : __tmp typ=w32 bnd=m
  137 : __fch_v typ=w32 bnd=m
  140 : __tmp typ=w32 bnd=m
  141 : __tmp typ=w32 bnd=m
  145 : __tmp typ=w32 bnd=m
  152 : a typ=w32 bnd=m tref=float32_t__
  153 : __tmp typ=w32 bnd=m
  154 : f32_to_i32_r_minMag typ=t21s_s2 val=0r bnd=m
  155 : __link typ=w32 bnd=m
  157 : __ct_1 typ=w32 val=1f bnd=m
  159 : a typ=w32 bnd=m tref=float32_t__
  160 : b typ=w32 bnd=m tref=float32_t__
  161 : f32_mul typ=t21s_s2 val=0r bnd=m
  162 : __link typ=w32 bnd=m
  167 : a typ=w32 bnd=m tref=float32_t__
  168 : b typ=w32 bnd=m tref=float32_t__
  169 : f32_add typ=t21s_s2 val=0r bnd=m
  170 : __link typ=w32 bnd=m
  185 : a typ=w32 bnd=m tref=float32_t__
  186 : b typ=w32 bnd=m tref=float32_t__
  187 : f32_sub typ=t21s_s2 val=0r bnd=m
  188 : __link typ=w32 bnd=m
  204 : __either typ=bool bnd=m
  205 : __trgt typ=t13s_s2 val=0j bnd=m
  206 : __trgt typ=t13s_s2 val=0j bnd=m
  207 : __trgt typ=t21s_s2 val=0j bnd=m
  208 : __trgt typ=t13s_s2 val=0j bnd=m
  209 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fkernel_sinf {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (iy.18 var=19) source ()  <29>;
    (y.19 var=20) source ()  <30>;
    (x.20 var=21) source ()  <31>;
    (ix.21 var=22) source ()  <32>;
    (z.22 var=23) source ()  <33>;
    (v.23 var=24) source ()  <34>;
    (r.24 var=25) source ()  <35>;
    (__la.26 var=27 stl=X off=1) inp ()  <37>;
    (__la.27 var=27) deassign (__la.26)  <38>;
    (__arg_x.30 var=29 stl=X off=11) inp ()  <41>;
    (__arg_x.31 var=29) deassign (__arg_x.30)  <42>;
    (__arg_y.33 var=30 stl=X off=12) inp ()  <44>;
    (__arg_y.34 var=30) deassign (__arg_y.33)  <45>;
    (__arg_iy.36 var=31 stl=X off=13) inp ()  <47>;
    (__arg_iy.37 var=31) deassign (__arg_iy.36)  <48>;
    (__rd___sp.39 var=26) rd_res_reg (__R_SP.11 __sp.17)  <50>;
    (__ct_m28S0.40 var=32) const ()  <51>;
    (__tmp.42 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_m28S0.40)  <53>;
    (__R_SP.43 var=12 __sp.44 var=18) wr_res_reg (__tmp.42 __sp.17)  <54>;
    (__rd___sp.45 var=26) rd_res_reg (__R_SP.11 __sp.44)  <56>;
    (__ct_0t0.46 var=36) const ()  <57>;
    (__adr_iy.48 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_0t0.46)  <59>;
    (__rd___sp.50 var=26) rd_res_reg (__R_SP.11 __sp.44)  <61>;
    (__rd___sp.55 var=26) rd_res_reg (__R_SP.11 __sp.44)  <66>;
    (__rd___sp.60 var=26) rd_res_reg (__R_SP.11 __sp.44)  <71>;
    (__rd___sp.65 var=26) rd_res_reg (__R_SP.11 __sp.44)  <76>;
    (__rd___sp.70 var=26) rd_res_reg (__R_SP.11 __sp.44)  <81>;
    (__rd___sp.75 var=26) rd_res_reg (__R_SP.11 __sp.44)  <86>;
    (__M_DMw.80 var=5 iy.81 var=19) store (__arg_iy.37 __adr_iy.48 iy.18)  <91>;
    call {
        () chess_separator_scheduler ()  <92>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.51 var=40) const ()  <62>;
    (__adr_y.53 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.51)  <64>;
    (__M_DMw.82 var=5 y.83 var=20) store (__arg_y.34 __adr_y.53 y.19)  <93>;
    call {
        () chess_separator_scheduler ()  <94>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.56 var=44) const ()  <67>;
    (__adr_x.58 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.56)  <69>;
    (__M_DMw.84 var=5 x.85 var=21) store (__arg_x.31 __adr_x.58 x.20)  <95>;
    call {
        () chess_separator_scheduler ()  <96>;
    } #8 off=5
    #9 off=6
    (__ct_24t0.61 var=48) const ()  <72>;
    (__adr_ix.63 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_24t0.61)  <74>;
    (__fch_x.86 var=63) load (__M_DMw.4 __adr_x.58 x.85)  <97>;
    (__M_DMw.88 var=5 ix.89 var=22) store (__fch_x.86 __adr_ix.63 ix.21)  <99>;
    call {
        () chess_separator_scheduler ()  <100>;
    } #10 off=7
    #11 off=8
    (__fch_ix.90 var=65) load (__M_DMw.4 __adr_ix.63 ix.89)  <101>;
    (__ct_2147483647.91 var=66) const ()  <102>;
    (__tmp.93 var=68) __sint__ad___sint___sint (__fch_ix.90 __ct_2147483647.91)  <104>;
    (__M_DMw.94 var=5 ix.95 var=22) store (__tmp.93 __adr_ix.63 ix.89)  <105>;
    call {
        () chess_separator_scheduler ()  <106>;
    } #12 off=9
    #13 off=10
    (__fch_ix.96 var=69) load (__M_DMw.4 __adr_ix.63 ix.95)  <107>;
    (__ct_838860800.97 var=70) const ()  <108>;
    (__ct_0.127 var=75) const ()  <139>;
    (__ct_28s0.157 var=79) const ()  <170>;
    (__tmp.603 var=72) bool__ge___sint___sint (__fch_ix.96 __ct_838860800.97)  <831>;
    (__trgt.608 var=206) const ()  <864>;
    () void_br_bool_t13s_s2 (__tmp.603 __trgt.608)  <865>;
    (__either.609 var=204) undefined ()  <866>;
    if {
        {
            () if_expr (__either.609)  <136>;
        } #15
        {
        } #26 off=17
        {
            #51 off=11
            (__fch_x.125 var=73) load (__M_DMw.4 __adr_x.58 x.85)  <137>;
            (__ct_1.370 var=157) const ()  <478>;
            (f32_to_i32_r_minMag.371 var=154) const ()  <479>;
            (__link.372 var=155) w32_jal_t21s_s2 (f32_to_i32_r_minMag.371)  <480>;
            call {
                (a.373 var=152 stl=X off=11) assign (__fch_x.125)  <481>;
                (__tmp.374 var=153 stl=X off=12) assign (__ct_1.370)  <482>;
                (__link.375 var=155 stl=X off=1) assign (__link.372)  <483>;
                (__tmp.376 var=74 stl=X off=10) Ff32_to_i32_r_minMag (__link.375 a.373 __tmp.374)  <484>;
                (__tmp.377 var=74) deassign (__tmp.376)  <485>;
            } #52 off=12
            #48 off=13
            (__tmp.129 var=77) bool__eq___sint___sint (__tmp.377 __ct_0.127)  <141>;
            (__trgt.606 var=205) const ()  <860>;
            () void_br_bool_t13s_s2 (__tmp.129 __trgt.606)  <861>;
            (__either.607 var=204) undefined ()  <862>;
            if {
                {
                    () if_expr (__either.607)  <167>;
                    () chess_rear_then ()  <863>;
                } #19
                {
                    (__rt.155 var=28) load (__M_DMw.4 __adr_x.58 x.85)  <168>;
                    (__rd___sp.156 var=26) rd_res_reg (__R_SP.11 __sp.44)  <169>;
                    (__tmp.159 var=81) __Pvoid__pl___Pvoid___sint (__rd___sp.156 __ct_28s0.157)  <172>;
                    (__R_SP.160 var=12 __sp.161 var=18) wr_res_reg (__tmp.159 __sp.44)  <173>;
                    () void___rts_jr_w32 (__la.27)  <174>;
                    (__rt.162 var=28 stl=X off=10) assign (__rt.155)  <175>;
                    () out (__rt.162)  <176>;
                    () sink (__sp.161)  <182>;
                    () sink (iy.81)  <183>;
                    () sink (y.83)  <184>;
                    () sink (x.85)  <185>;
                    () sink (ix.95)  <186>;
                } #23 off=15 nxt=-2
                {
                } #24 off=14
                {
                } #25
            } #18
            #232 off=16
            (__trgt.610 var=207) const ()  <867>;
            () void_j_t21s_s2 (__trgt.610)  <868>;
        } #16
        {
        } #27
    } #14
    #61 off=18
    (__fch_x.238 var=82) load (__M_DMw.4 __adr_x.58 x.85)  <265>;
    (__fch_x.239 var=83) load (__M_DMw.4 __adr_x.58 x.85)  <266>;
    (f32_mul.381 var=161) const ()  <492>;
    (__link.382 var=162) w32_jal_t21s_s2 (f32_mul.381)  <493>;
    call {
        (a.383 var=159 stl=X off=11) assign (__fch_x.238)  <494>;
        (b.384 var=160 stl=X off=12) assign (__fch_x.239)  <495>;
        (__link.385 var=162 stl=X off=1) assign (__link.382)  <496>;
        (__tmp.386 var=84 stl=X off=10) Ff32_mul (__link.385 a.383 b.384)  <497>;
        (__tmp.387 var=84) deassign (__tmp.386)  <498>;
    } #62 off=19
    #58 off=20
    (__ct_12t0.66 var=52) const ()  <77>;
    (__adr_z.68 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.65 __ct_12t0.66)  <79>;
    (__M_DMw.241 var=5 z.242 var=23) store (__tmp.387 __adr_z.68 z.22)  <268>;
    call {
        () chess_separator_scheduler ()  <269>;
    } #29 off=21
    #71 off=22
    (__fch_z.243 var=85) load (__M_DMw.4 __adr_z.68 z.242)  <270>;
    (__fch_x.244 var=86) load (__M_DMw.4 __adr_x.58 x.85)  <271>;
    (__link.392 var=162) w32_jal_t21s_s2 (f32_mul.381)  <506>;
    call {
        (a.393 var=159 stl=X off=11) assign (__fch_z.243)  <507>;
        (b.394 var=160 stl=X off=12) assign (__fch_x.244)  <508>;
        (__link.395 var=162 stl=X off=1) assign (__link.392)  <509>;
        (__tmp.396 var=87 stl=X off=10) Ff32_mul (__link.395 a.393 b.394)  <510>;
        (__tmp.397 var=87) deassign (__tmp.396)  <511>;
    } #72 off=23
    #68 off=24
    (__ct_20t0.71 var=56) const ()  <82>;
    (__adr_v.73 var=58) __Pvoid__pl___Pvoid___sint (__rd___sp.70 __ct_20t0.71)  <84>;
    (__M_DMw.246 var=5 v.247 var=24) store (__tmp.397 __adr_v.73 v.23)  <273>;
    call {
        () chess_separator_scheduler ()  <274>;
    } #31 off=25
    #90 off=26
    (__fch_z.250 var=90) load (__M_DMw.4 __adr_z.68 z.242)  <277>;
    (__fch_z.253 var=93) load (__M_DMw.4 __adr_z.68 z.242)  <280>;
    (__fch_z.256 var=96) load (__M_DMw.4 __adr_z.68 z.242)  <283>;
    (__fch_z.259 var=99) load (__M_DMw.4 __adr_z.68 z.242)  <286>;
    (__ct_791595475.260 var=100) const ()  <287>;
    (__link.402 var=162) w32_jal_t21s_s2 (f32_mul.381)  <519>;
    call {
        (a.403 var=159 stl=X off=11) assign (__fch_z.259)  <520>;
        (b.404 var=160 stl=X off=12) assign (__ct_791595475.260)  <521>;
        (__link.405 var=162 stl=X off=1) assign (__link.402)  <522>;
        (__tmp.406 var=102 stl=X off=10) Ff32_mul (__link.405 a.403 b.404)  <523>;
        (__tmp.407 var=102) deassign (__tmp.406)  <524>;
    } #91 off=27
    #96 off=28
    (__ct_3000446772.257 var=97) const ()  <284>;
    (f32_add.411 var=169) const ()  <531>;
    (__link.412 var=170) w32_jal_t21s_s2 (f32_add.411)  <532>;
    call {
        (a.413 var=167 stl=X off=11) assign (__ct_3000446772.257)  <533>;
        (b.414 var=168 stl=X off=12) assign (__tmp.407)  <534>;
        (__link.415 var=170 stl=X off=1) assign (__link.412)  <535>;
        (__tmp.416 var=103 stl=X off=10) Ff32_add (__link.415 a.413 b.414)  <536>;
        (__tmp.417 var=103) deassign (__tmp.416)  <537>;
    } #97 off=29
    #102 off=30
    (__link.422 var=162) w32_jal_t21s_s2 (f32_mul.381)  <545>;
    call {
        (a.423 var=159 stl=X off=11) assign (__fch_z.256)  <546>;
        (b.424 var=160 stl=X off=12) assign (__tmp.417)  <547>;
        (__link.425 var=162 stl=X off=1) assign (__link.422)  <548>;
        (__tmp.426 var=104 stl=X off=10) Ff32_mul (__link.425 a.423 b.424)  <549>;
        (__tmp.427 var=104) deassign (__tmp.426)  <550>;
    } #103 off=31
    #108 off=32
    (__ct_909700891.254 var=94) const ()  <281>;
    (__link.432 var=170) w32_jal_t21s_s2 (f32_add.411)  <558>;
    call {
        (a.433 var=167 stl=X off=11) assign (__ct_909700891.254)  <559>;
        (b.434 var=168 stl=X off=12) assign (__tmp.427)  <560>;
        (__link.435 var=170 stl=X off=1) assign (__link.432)  <561>;
        (__tmp.436 var=105 stl=X off=10) Ff32_add (__link.435 a.433 b.434)  <562>;
        (__tmp.437 var=105) deassign (__tmp.436)  <563>;
    } #109 off=33
    #114 off=34
    (__link.442 var=162) w32_jal_t21s_s2 (f32_mul.381)  <571>;
    call {
        (a.443 var=159 stl=X off=11) assign (__fch_z.253)  <572>;
        (b.444 var=160 stl=X off=12) assign (__tmp.437)  <573>;
        (__link.445 var=162 stl=X off=1) assign (__link.442)  <574>;
        (__tmp.446 var=106 stl=X off=10) Ff32_mul (__link.445 a.443 b.444)  <575>;
        (__tmp.447 var=106) deassign (__tmp.446)  <576>;
    } #115 off=35
    #120 off=36
    (__ct_3109031169.251 var=91) const ()  <278>;
    (__link.452 var=170) w32_jal_t21s_s2 (f32_add.411)  <584>;
    call {
        (a.453 var=167 stl=X off=11) assign (__ct_3109031169.251)  <585>;
        (b.454 var=168 stl=X off=12) assign (__tmp.447)  <586>;
        (__link.455 var=170 stl=X off=1) assign (__link.452)  <587>;
        (__tmp.456 var=107 stl=X off=10) Ff32_add (__link.455 a.453 b.454)  <588>;
        (__tmp.457 var=107) deassign (__tmp.456)  <589>;
    } #121 off=37
    #126 off=38
    (__link.462 var=162) w32_jal_t21s_s2 (f32_mul.381)  <597>;
    call {
        (a.463 var=159 stl=X off=11) assign (__fch_z.250)  <598>;
        (b.464 var=160 stl=X off=12) assign (__tmp.457)  <599>;
        (__link.465 var=162 stl=X off=1) assign (__link.462)  <600>;
        (__tmp.466 var=108 stl=X off=10) Ff32_mul (__link.465 a.463 b.464)  <601>;
        (__tmp.467 var=108) deassign (__tmp.466)  <602>;
    } #127 off=39
    #132 off=40
    (__ct_1007192201.248 var=88) const ()  <275>;
    (__link.472 var=170) w32_jal_t21s_s2 (f32_add.411)  <610>;
    call {
        (a.473 var=167 stl=X off=11) assign (__ct_1007192201.248)  <611>;
        (b.474 var=168 stl=X off=12) assign (__tmp.467)  <612>;
        (__link.475 var=170 stl=X off=1) assign (__link.472)  <613>;
        (__tmp.476 var=109 stl=X off=10) Ff32_add (__link.475 a.473 b.474)  <614>;
        (__tmp.477 var=109) deassign (__tmp.476)  <615>;
    } #133 off=41
    #87 off=42
    (__ct_16t0.76 var=60) const ()  <87>;
    (__adr_r.78 var=62) __Pvoid__pl___Pvoid___sint (__rd___sp.75 __ct_16t0.76)  <89>;
    (__M_DMw.270 var=5 r.271 var=25) store (__tmp.477 __adr_r.78 r.24)  <297>;
    call {
        () chess_separator_scheduler ()  <298>;
    } #33 off=43
    #34 off=44
    (__fch_iy.272 var=110) load (__M_DMw.4 __adr_iy.48 iy.81)  <299>;
    (__tmp.275 var=113) bool__eq___sint___sint (__fch_iy.272 __ct_0.127)  <302>;
    (__ct_3190467243.303 var=116) const ()  <331>;
    (__trgt.611 var=208) const ()  <869>;
    () void_br_bool_t13s_s2 (__tmp.275 __trgt.611)  <870>;
    (__either.612 var=204) undefined ()  <871>;
    if {
        {
            () if_expr (__either.612)  <328>;
        } #36
        {
            #146 off=62
            (__fch_x.301 var=114) load (__M_DMw.4 __adr_x.58 x.85)  <329>;
            (__fch_v.302 var=115) load (__M_DMw.4 __adr_v.73 v.247)  <330>;
            (__fch_z.305 var=118) load (__M_DMw.4 __adr_z.68 z.242)  <333>;
            (__fch_r.306 var=119) load (__M_DMw.4 __adr_r.78 r.271)  <334>;
            (__link.482 var=162) w32_jal_t21s_s2 (f32_mul.381)  <623>;
            call {
                (a.483 var=159 stl=X off=11) assign (__fch_z.305)  <624>;
                (b.484 var=160 stl=X off=12) assign (__fch_r.306)  <625>;
                (__link.485 var=162 stl=X off=1) assign (__link.482)  <626>;
                (__tmp.486 var=120 stl=X off=10) Ff32_mul (__link.485 a.483 b.484)  <627>;
                (__tmp.487 var=120) deassign (__tmp.486)  <628>;
            } #147 off=63
            #152 off=64
            (__link.492 var=170) w32_jal_t21s_s2 (f32_add.411)  <636>;
            call {
                (a.493 var=167 stl=X off=11) assign (__ct_3190467243.303)  <637>;
                (b.494 var=168 stl=X off=12) assign (__tmp.487)  <638>;
                (__link.495 var=170 stl=X off=1) assign (__link.492)  <639>;
                (__tmp.496 var=121 stl=X off=10) Ff32_add (__link.495 a.493 b.494)  <640>;
                (__tmp.497 var=121) deassign (__tmp.496)  <641>;
            } #153 off=65
            #158 off=66
            (__link.502 var=162) w32_jal_t21s_s2 (f32_mul.381)  <649>;
            call {
                (a.503 var=159 stl=X off=11) assign (__fch_v.302)  <650>;
                (b.504 var=160 stl=X off=12) assign (__tmp.497)  <651>;
                (__link.505 var=162 stl=X off=1) assign (__link.502)  <652>;
                (__tmp.506 var=122 stl=X off=10) Ff32_mul (__link.505 a.503 b.504)  <653>;
                (__tmp.507 var=122) deassign (__tmp.506)  <654>;
            } #159 off=67
            #164 off=68
            (__link.512 var=170) w32_jal_t21s_s2 (f32_add.411)  <662>;
            call {
                (a.513 var=167 stl=X off=11) assign (__fch_x.301)  <663>;
                (b.514 var=168 stl=X off=12) assign (__tmp.507)  <664>;
                (__link.515 var=170 stl=X off=1) assign (__link.512)  <665>;
                (__rt.516 var=28 stl=X off=10) Ff32_add (__link.515 a.513 b.514)  <666>;
                (__rt.517 var=28) deassign (__rt.516)  <667>;
            } #165 off=69
        } #37
        {
            #185 off=45
            (__fch_x.311 var=124) load (__M_DMw.4 __adr_x.58 x.85)  <340>;
            (__fch_z.312 var=125) load (__M_DMw.4 __adr_z.68 z.242)  <341>;
            (__ct_1056964608.313 var=126) const ()  <342>;
            (__fch_y.315 var=128) load (__M_DMw.4 __adr_y.53 y.83)  <344>;
            (__link.522 var=162) w32_jal_t21s_s2 (f32_mul.381)  <675>;
            call {
                (a.523 var=159 stl=X off=11) assign (__ct_1056964608.313)  <676>;
                (b.524 var=160 stl=X off=12) assign (__fch_y.315)  <677>;
                (__link.525 var=162 stl=X off=1) assign (__link.522)  <678>;
                (__tmp.526 var=129 stl=X off=10) Ff32_mul (__link.525 a.523 b.524)  <679>;
                (__tmp.527 var=129) deassign (__tmp.526)  <680>;
            } #186 off=46
            #191 off=47
            (__fch_v.317 var=130) load (__M_DMw.4 __adr_v.73 v.247)  <346>;
            (__fch_r.318 var=131) load (__M_DMw.4 __adr_r.78 r.271)  <347>;
            (__link.532 var=162) w32_jal_t21s_s2 (f32_mul.381)  <688>;
            call {
                (a.533 var=159 stl=X off=11) assign (__fch_v.317)  <689>;
                (b.534 var=160 stl=X off=12) assign (__fch_r.318)  <690>;
                (__link.535 var=162 stl=X off=1) assign (__link.532)  <691>;
                (__tmp.536 var=132 stl=X off=10) Ff32_mul (__link.535 a.533 b.534)  <692>;
                (__tmp.537 var=132) deassign (__tmp.536)  <693>;
            } #192 off=48
            #197 off=49
            (f32_sub.541 var=187) const ()  <700>;
            (__link.542 var=188) w32_jal_t21s_s2 (f32_sub.541)  <701>;
            call {
                (a.543 var=185 stl=X off=11) assign (__tmp.527)  <702>;
                (b.544 var=186 stl=X off=12) assign (__tmp.537)  <703>;
                (__link.545 var=188 stl=X off=1) assign (__link.542)  <704>;
                (__tmp.546 var=133 stl=X off=10) Ff32_sub (__link.545 a.543 b.544)  <705>;
                (__tmp.547 var=133) deassign (__tmp.546)  <706>;
            } #198 off=50
            #203 off=51
            (__link.552 var=162) w32_jal_t21s_s2 (f32_mul.381)  <714>;
            call {
                (a.553 var=159 stl=X off=11) assign (__fch_z.312)  <715>;
                (b.554 var=160 stl=X off=12) assign (__tmp.547)  <716>;
                (__link.555 var=162 stl=X off=1) assign (__link.552)  <717>;
                (__tmp.556 var=134 stl=X off=10) Ff32_mul (__link.555 a.553 b.554)  <718>;
                (__tmp.557 var=134) deassign (__tmp.556)  <719>;
            } #204 off=52
            #209 off=53
            (__fch_y.322 var=135) load (__M_DMw.4 __adr_y.53 y.83)  <351>;
            (__link.562 var=188) w32_jal_t21s_s2 (f32_sub.541)  <727>;
            call {
                (a.563 var=185 stl=X off=11) assign (__tmp.557)  <728>;
                (b.564 var=186 stl=X off=12) assign (__fch_y.322)  <729>;
                (__link.565 var=188 stl=X off=1) assign (__link.562)  <730>;
                (__tmp.566 var=136 stl=X off=10) Ff32_sub (__link.565 a.563 b.564)  <731>;
                (__tmp.567 var=136) deassign (__tmp.566)  <732>;
            } #210 off=54
            #215 off=55
            (__fch_v.324 var=137) load (__M_DMw.4 __adr_v.73 v.247)  <353>;
            (__link.572 var=162) w32_jal_t21s_s2 (f32_mul.381)  <740>;
            call {
                (a.573 var=159 stl=X off=11) assign (__fch_v.324)  <741>;
                (b.574 var=160 stl=X off=12) assign (__ct_3190467243.303)  <742>;
                (__link.575 var=162 stl=X off=1) assign (__link.572)  <743>;
                (__tmp.576 var=140 stl=X off=10) Ff32_mul (__link.575 a.573 b.574)  <744>;
                (__tmp.577 var=140) deassign (__tmp.576)  <745>;
            } #216 off=56
            #221 off=57
            (__link.582 var=188) w32_jal_t21s_s2 (f32_sub.541)  <753>;
            call {
                (a.583 var=185 stl=X off=11) assign (__tmp.567)  <754>;
                (b.584 var=186 stl=X off=12) assign (__tmp.577)  <755>;
                (__link.585 var=188 stl=X off=1) assign (__link.582)  <756>;
                (__tmp.586 var=141 stl=X off=10) Ff32_sub (__link.585 a.583 b.584)  <757>;
                (__tmp.587 var=141) deassign (__tmp.586)  <758>;
            } #222 off=58
            #227 off=59
            (__link.592 var=188) w32_jal_t21s_s2 (f32_sub.541)  <766>;
            call {
                (a.593 var=185 stl=X off=11) assign (__fch_x.311)  <767>;
                (b.594 var=186 stl=X off=12) assign (__tmp.587)  <768>;
                (__link.595 var=188 stl=X off=1) assign (__link.592)  <769>;
                (__rt.596 var=28 stl=X off=10) Ff32_sub (__link.595 a.593 b.594)  <770>;
                (__rt.597 var=28) deassign (__rt.596)  <771>;
            } #228 off=60
            #233 off=61
            (__trgt.613 var=209) const ()  <872>;
            () void_j_t21s_s2 (__trgt.613)  <873>;
        } #40
        {
            (__rt.330 var=28) merge (__rt.517 __rt.597)  <360>;
        } #43
    } #35
    #45 off=70 nxt=-2
    (__rd___sp.331 var=26) rd_res_reg (__R_SP.11 __sp.44)  <361>;
    (__tmp.334 var=145) __Pvoid__pl___Pvoid___sint (__rd___sp.331 __ct_28s0.157)  <364>;
    (__R_SP.335 var=12 __sp.336 var=18) wr_res_reg (__tmp.334 __sp.44)  <365>;
    () void___rts_jr_w32 (__la.27)  <366>;
    (__rt.337 var=28 stl=X off=10) assign (__rt.330)  <367>;
    () out (__rt.337)  <368>;
    () sink (__sp.336)  <374>;
    () sink (iy.81)  <375>;
    () sink (y.83)  <376>;
    () sink (x.85)  <377>;
    () sink (ix.95)  <378>;
    () sink (z.242)  <379>;
    () sink (v.247)  <380>;
    () sink (r.271)  <381>;
} #0
0 : 'src/math.c';
----------
0 : (0,710:0,0);
3 : (0,710:43,0);
4 : (0,710:43,0);
5 : (0,710:34,0);
6 : (0,710:34,0);
7 : (0,710:25,0);
8 : (0,710:25,0);
9 : (0,723:4,8);
10 : (0,723:4,8);
11 : (0,724:7,10);
12 : (0,724:7,10);
13 : (0,725:9,10);
14 : (0,725:4,10);
16 : (0,726:8,11);
18 : (0,726:9,11);
23 : (0,726:23,12);
24 : (0,726:9,15);
26 : (0,725:4,20);
29 : (0,727:8,24);
31 : (0,728:8,25);
33 : (0,729:8,26);
34 : (0,730:9,26);
35 : (0,730:4,26);
37 : (0,731:14,27);
40 : (0,730:14,30);
45 : (0,730:4,34);
48 : (0,726:18,11);
51 : (0,726:12,11);
52 : (0,726:12,11);
58 : (0,727:4,23);
61 : (0,727:12,23);
62 : (0,727:12,23);
68 : (0,728:4,24);
71 : (0,728:12,24);
72 : (0,728:12,24);
87 : (0,729:4,25);
90 : (0,729:33,25);
91 : (0,729:33,25);
96 : (0,729:31,25);
97 : (0,729:31,25);
102 : (0,729:27,25);
103 : (0,729:27,25);
108 : (0,729:25,25);
109 : (0,729:25,25);
114 : (0,729:21,25);
115 : (0,729:21,25);
120 : (0,729:19,25);
121 : (0,729:19,25);
126 : (0,729:15,25);
127 : (0,729:15,25);
132 : (0,729:13,25);
133 : (0,729:13,25);
146 : (0,730:30,27);
147 : (0,730:30,27);
152 : (0,730:28,27);
153 : (0,730:28,27);
158 : (0,730:24,27);
159 : (0,730:24,27);
164 : (0,730:22,27);
165 : (0,730:22,27);
185 : (0,731:32,30);
186 : (0,731:32,30);
191 : (0,731:36,30);
192 : (0,731:36,30);
197 : (0,731:34,30);
198 : (0,731:34,30);
203 : (0,731:26,30);
204 : (0,731:26,30);
209 : (0,731:39,30);
210 : (0,731:39,30);
215 : (0,731:44,30);
216 : (0,731:44,30);
221 : (0,731:42,30);
222 : (0,731:42,30);
227 : (0,731:22,30);
228 : (0,731:22,30);
----------
50 : (0,710:13,0);
51 : (0,710:13,0);
53 : (0,710:13,0);
54 : (0,710:13,0);
56 : (0,710:47,0);
57 : (0,710:47,0);
59 : (0,710:47,0);
61 : (0,710:40,0);
62 : (0,710:40,0);
64 : (0,710:40,0);
66 : (0,710:31,0);
67 : (0,710:31,0);
69 : (0,710:31,0);
71 : (0,722:12,0);
72 : (0,722:12,0);
74 : (0,722:12,0);
76 : (0,721:10,0);
77 : (0,721:10,0);
79 : (0,721:10,0);
81 : (0,721:14,0);
82 : (0,721:14,0);
84 : (0,721:14,0);
86 : (0,721:12,0);
87 : (0,721:12,0);
89 : (0,721:12,0);
91 : (0,710:43,0);
92 : (0,710:43,0);
93 : (0,710:34,0);
94 : (0,710:34,0);
95 : (0,710:25,0);
96 : (0,710:25,0);
97 : (0,723:15,7);
99 : (0,723:1,7);
100 : (0,723:4,8);
101 : (0,724:4,9);
102 : (0,724:10,0);
104 : (0,724:7,9);
105 : (0,724:4,9);
106 : (0,724:7,10);
107 : (0,725:7,10);
108 : (0,725:10,0);
136 : (0,725:4,10);
137 : (0,726:17,11);
139 : (0,726:20,0);
141 : (0,726:18,11);
167 : (0,726:9,11);
168 : (0,726:30,12);
169 : (0,726:23,0);
170 : (0,726:23,0);
172 : (0,726:23,0);
173 : (0,726:23,12);
174 : (0,726:23,12);
175 : (0,726:30,0);
265 : (0,727:11,23);
266 : (0,727:13,23);
268 : (0,727:4,23);
269 : (0,727:8,24);
270 : (0,728:11,24);
271 : (0,728:13,24);
273 : (0,728:4,24);
274 : (0,728:8,25);
275 : (0,729:11,0);
277 : (0,729:14,25);
278 : (0,729:17,0);
280 : (0,729:20,25);
281 : (0,729:23,0);
283 : (0,729:26,25);
284 : (0,729:29,0);
286 : (0,729:32,25);
287 : (0,729:34,0);
297 : (0,729:4,25);
298 : (0,729:8,26);
299 : (0,730:7,26);
302 : (0,730:9,26);
328 : (0,730:4,26);
329 : (0,730:21,27);
330 : (0,730:23,27);
331 : (0,730:26,0);
333 : (0,730:29,27);
334 : (0,730:31,27);
340 : (0,731:21,30);
341 : (0,731:25,30);
342 : (0,731:28,0);
344 : (0,731:33,30);
346 : (0,731:35,30);
347 : (0,731:37,30);
351 : (0,731:40,30);
353 : (0,731:43,30);
360 : (0,730:4,33);
361 : (0,730:4,0);
364 : (0,730:4,0);
365 : (0,730:4,34);
366 : (0,730:4,34);
367 : (0,730:4,0);
478 : (0,726:12,0);
479 : (0,726:12,0);
480 : (0,726:12,11);
481 : (0,726:12,11);
482 : (0,726:12,11);
483 : (0,726:12,11);
484 : (0,726:12,11);
485 : (0,726:12,11);
492 : (0,727:12,0);
493 : (0,727:12,23);
494 : (0,727:12,23);
495 : (0,727:12,23);
496 : (0,727:12,23);
497 : (0,727:12,23);
498 : (0,727:12,23);
506 : (0,728:12,24);
507 : (0,728:12,24);
508 : (0,728:12,24);
509 : (0,728:12,24);
510 : (0,728:12,24);
511 : (0,728:12,24);
519 : (0,729:33,25);
520 : (0,729:33,25);
521 : (0,729:33,25);
522 : (0,729:33,25);
523 : (0,729:33,25);
524 : (0,729:33,25);
531 : (0,729:31,0);
532 : (0,729:31,25);
533 : (0,729:31,25);
534 : (0,729:31,25);
535 : (0,729:31,25);
536 : (0,729:31,25);
537 : (0,729:31,25);
545 : (0,729:27,25);
546 : (0,729:27,25);
547 : (0,729:27,25);
548 : (0,729:27,25);
549 : (0,729:27,25);
550 : (0,729:27,25);
558 : (0,729:25,25);
559 : (0,729:25,25);
560 : (0,729:25,25);
561 : (0,729:25,25);
562 : (0,729:25,25);
563 : (0,729:25,25);
571 : (0,729:21,25);
572 : (0,729:21,25);
573 : (0,729:21,25);
574 : (0,729:21,25);
575 : (0,729:21,25);
576 : (0,729:21,25);
584 : (0,729:19,25);
585 : (0,729:19,25);
586 : (0,729:19,25);
587 : (0,729:19,25);
588 : (0,729:19,25);
589 : (0,729:19,25);
597 : (0,729:15,25);
598 : (0,729:15,25);
599 : (0,729:15,25);
600 : (0,729:15,25);
601 : (0,729:15,25);
602 : (0,729:15,25);
610 : (0,729:13,25);
611 : (0,729:13,25);
612 : (0,729:13,25);
613 : (0,729:13,25);
614 : (0,729:13,25);
615 : (0,729:13,25);
623 : (0,730:30,27);
624 : (0,730:30,27);
625 : (0,730:30,27);
626 : (0,730:30,27);
627 : (0,730:30,27);
628 : (0,730:30,27);
636 : (0,730:28,27);
637 : (0,730:28,27);
638 : (0,730:28,27);
639 : (0,730:28,27);
640 : (0,730:28,27);
641 : (0,730:28,27);
649 : (0,730:24,27);
650 : (0,730:24,27);
651 : (0,730:24,27);
652 : (0,730:24,27);
653 : (0,730:24,27);
654 : (0,730:24,27);
662 : (0,730:22,27);
663 : (0,730:22,27);
664 : (0,730:22,27);
665 : (0,730:22,27);
666 : (0,730:22,27);
667 : (0,730:22,27);
675 : (0,731:32,30);
676 : (0,731:32,30);
677 : (0,731:32,30);
678 : (0,731:32,30);
679 : (0,731:32,30);
680 : (0,731:32,30);
688 : (0,731:36,30);
689 : (0,731:36,30);
690 : (0,731:36,30);
691 : (0,731:36,30);
692 : (0,731:36,30);
693 : (0,731:36,30);
700 : (0,731:34,0);
701 : (0,731:34,30);
702 : (0,731:34,30);
703 : (0,731:34,30);
704 : (0,731:34,30);
705 : (0,731:34,30);
706 : (0,731:34,30);
714 : (0,731:26,30);
715 : (0,731:26,30);
716 : (0,731:26,30);
717 : (0,731:26,30);
718 : (0,731:26,30);
719 : (0,731:26,30);
727 : (0,731:39,30);
728 : (0,731:39,30);
729 : (0,731:39,30);
730 : (0,731:39,30);
731 : (0,731:39,30);
732 : (0,731:39,30);
740 : (0,731:44,30);
741 : (0,731:44,30);
742 : (0,731:44,30);
743 : (0,731:44,30);
744 : (0,731:44,30);
745 : (0,731:44,30);
753 : (0,731:42,30);
754 : (0,731:42,30);
755 : (0,731:42,30);
756 : (0,731:42,30);
757 : (0,731:42,30);
758 : (0,731:42,30);
766 : (0,731:22,30);
767 : (0,731:22,30);
768 : (0,731:22,30);
769 : (0,731:22,30);
770 : (0,731:22,30);
771 : (0,731:22,30);
831 : (0,725:9,10);
861 : (0,726:9,11);
865 : (0,725:4,10);
870 : (0,730:4,26);

