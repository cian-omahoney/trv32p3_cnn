
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:55:24 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  int memcmp(const void *, const void *, size_t)
Fmemcmp : user_defined, called {
    fnm : "memcmp" 'int memcmp(const void *, const void *, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=24 );
}
****
***/

[
    0 : memcmp typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : n typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   20 : s2 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__Pvoid_DMb
   21 : s1 typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__Pvoid_DMb
   22 : r1 typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   23 : r2 typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   24 : c1 typ=w08 val=20t0 bnd=a sz=1 algn=1 stl=DMb lscp=23 tref=__cchar_DMb
   25 : c2 typ=w08 val=21t0 bnd=a sz=1 algn=1 stl=DMb lscp=23 tref=__cchar_DMb
   26 : __extPMb_void typ=u08 bnd=b stl=PMb
   27 : __rd___sp typ=w32 bnd=m
   28 : __la typ=w32 bnd=p tref=w32__
   29 : __rt typ=w32 bnd=p tref=__sint__
   30 : __arg_s1 typ=w32 bnd=p tref=__Pvoid__
   31 : __arg_s2 typ=w32 bnd=p tref=__Pvoid__
   32 : __arg_n typ=w32 bnd=p tref=size_t__
   33 : __ct_m24S0 typ=w32 val=-24S0 bnd=m
   35 : __tmp typ=w32 bnd=m
   37 : __ct_0t0 typ=w32 val=0t0 bnd=m
   39 : __adr_n typ=w32 bnd=m adro=19
   41 : __ct_4t0 typ=w32 val=4t0 bnd=m
   43 : __adr_s2 typ=w32 bnd=m adro=20
   45 : __ct_8t0 typ=w32 val=8t0 bnd=m
   47 : __adr_s1 typ=w32 bnd=m adro=21
   49 : __ct_12t0 typ=w32 val=12t0 bnd=m
   51 : __adr_r1 typ=w32 bnd=m adro=22
   53 : __ct_16t0 typ=w32 val=16t0 bnd=m
   55 : __adr_r2 typ=w32 bnd=m adro=23
   57 : __ct_20t0 typ=w32 val=20t0 bnd=m
   59 : __adr_c1 typ=w32 bnd=m adro=24
   61 : __ct_21t0 typ=w32 val=21t0 bnd=m
   63 : __adr_c2 typ=w32 bnd=m adro=25
   67 : __fch_s1 typ=w32 bnd=m
   68 : __fch_s2 typ=w32 bnd=m
   69 : __fch_n typ=w32 bnd=m
   73 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   75 : __tmp typ=bool bnd=m
   76 : __fch_r1 typ=w32 bnd=m
   77 : __ct_1 typ=w32 val=1f bnd=m
   80 : __fchtmp typ=w08 bnd=m
   81 : __fch_r2 typ=w32 bnd=m
   85 : __fchtmp typ=w08 bnd=m
   86 : __fch_c1 typ=w08 bnd=m
   88 : __fch_c2 typ=w08 bnd=m
   90 : __tmp typ=bool bnd=m
   92 : __tmp typ=__uchar bnd=m
   95 : __tmp typ=__uchar bnd=m
   98 : __ct_24s0 typ=w32 val=24s0 bnd=m
  100 : __tmp typ=w32 bnd=m
  101 : __fch_n typ=w32 bnd=m
  107 : __tmp typ=bool bnd=m
  112 : __tmp typ=w32 bnd=m
  121 : __ct_4294967295 typ=w32 val=-1f bnd=m
  122 : __shv___fch_r1 typ=w32 bnd=m
  123 : __shv___fch_r2 typ=w32 bnd=m
  124 : __shv___fch_n typ=w32 bnd=m
  125 : __shv___fch_n typ=w32 bnd=m
  134 : __either typ=bool bnd=m
  135 : __trgt typ=t13s_s2 val=0j bnd=m
  136 : __trgt typ=t13s_s2 val=0j bnd=m
  137 : __trgt typ=t13s_s2 val=0j bnd=m
  138 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fmemcmp {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (n.18 var=19) source ()  <29>;
    (s2.19 var=20) source ()  <30>;
    (s1.20 var=21) source ()  <31>;
    (r1.21 var=22) source ()  <32>;
    (r2.22 var=23) source ()  <33>;
    (c1.23 var=24) source ()  <34>;
    (c2.24 var=25) source ()  <35>;
    (__extPMb_void.25 var=26) source ()  <36>;
    (__la.27 var=28 stl=X off=1) inp ()  <38>;
    (__la.28 var=28) deassign (__la.27)  <39>;
    (__arg_s1.31 var=30 stl=X off=11) inp ()  <42>;
    (__arg_s1.32 var=30) deassign (__arg_s1.31)  <43>;
    (__arg_s2.34 var=31 stl=X off=12) inp ()  <45>;
    (__arg_s2.35 var=31) deassign (__arg_s2.34)  <46>;
    (__arg_n.37 var=32 stl=X off=13) inp ()  <48>;
    (__arg_n.38 var=32) deassign (__arg_n.37)  <49>;
    (__rd___sp.40 var=27) rd_res_reg (__R_SP.11 __sp.17)  <51>;
    (__ct_m24S0.41 var=33) const ()  <52>;
    (__tmp.43 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_m24S0.41)  <54>;
    (__R_SP.44 var=12 __sp.45 var=18) wr_res_reg (__tmp.43 __sp.17)  <55>;
    (__rd___sp.46 var=27) rd_res_reg (__R_SP.11 __sp.45)  <57>;
    (__ct_0t0.47 var=37) const ()  <58>;
    (__adr_n.49 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.46 __ct_0t0.47)  <60>;
    (__rd___sp.51 var=27) rd_res_reg (__R_SP.11 __sp.45)  <62>;
    (__rd___sp.56 var=27) rd_res_reg (__R_SP.11 __sp.45)  <67>;
    (__rd___sp.61 var=27) rd_res_reg (__R_SP.11 __sp.45)  <72>;
    (__rd___sp.66 var=27) rd_res_reg (__R_SP.11 __sp.45)  <77>;
    (__rd___sp.71 var=27) rd_res_reg (__R_SP.11 __sp.45)  <82>;
    (__rd___sp.76 var=27) rd_res_reg (__R_SP.11 __sp.45)  <87>;
    (__M_DMw.84 var=5 n.85 var=19) store (__arg_n.38 __adr_n.49 n.18)  <95>;
    call {
        () chess_separator_scheduler ()  <96>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.52 var=41) const ()  <63>;
    (__adr_s2.54 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.52)  <65>;
    (__M_DMw.86 var=5 s2.87 var=20) store (__arg_s2.35 __adr_s2.54 s2.19)  <97>;
    call {
        () chess_separator_scheduler ()  <98>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.57 var=45) const ()  <68>;
    (__adr_s1.59 var=47) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_8t0.57)  <70>;
    (__M_DMw.88 var=5 s1.89 var=21) store (__arg_s1.32 __adr_s1.59 s1.20)  <99>;
    call {
        () chess_separator_scheduler ()  <100>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.62 var=49) const ()  <73>;
    (__adr_r1.64 var=51) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_12t0.62)  <75>;
    (__fch_s1.90 var=67) load (__M_DMw.4 __adr_s1.59 s1.89)  <101>;
    (__M_DMw.91 var=5 r1.92 var=22) store (__fch_s1.90 __adr_r1.64 r1.21)  <102>;
    call {
        () chess_separator_scheduler ()  <103>;
    } #10 off=7
    #11 off=8
    (__ct_16t0.67 var=53) const ()  <78>;
    (__adr_r2.69 var=55) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_16t0.67)  <80>;
    (__fch_s2.93 var=68) load (__M_DMw.4 __adr_s2.54 s2.87)  <104>;
    (__M_DMw.94 var=5 r2.95 var=23) store (__fch_s2.93 __adr_r2.69 r2.22)  <105>;
    call {
        () chess_separator_scheduler ()  <106>;
    } #12 off=9
    #13 off=10
    (__fch_n.96 var=69) load (__M_DMw.4 __adr_n.49 n.85)  <107>;
    call {
        () chess_separator_scheduler ()  <108>;
    } #14 off=11
    #15 off=12
    (__M_DMw.100 var=5 n.101 var=19) store (__shv___fch_n.429 __adr_n.49 n.85)  <112>;
    (__ct_4294967295.425 var=121) const ()  <475>;
    (__shv___fch_n.429 var=125) __uint__pl___uint___uint (__fch_n.96 __ct_4294967295.425)  <480>;
    call {
        () chess_separator_scheduler ()  <113>;
    } #16 off=13
    #17 off=14
    (__ct_0.102 var=73) const ()  <114>;
    (__ct_24s0.223 var=98) const ()  <240>;
    (__tmp.435 var=75) bool__eq___uint___uint (__fch_n.96 __ct_0.102)  <516>;
    (__trgt.442 var=137) const ()  <541>;
    () void_br_bool_t13s_s2 (__tmp.435 __trgt.442)  <542>;
    (__either.443 var=134) undefined ()  <543>;
    if {
        {
            () if_expr (__either.443)  <146>;
            () chess_frequent_else ()  <147>;
            () chess_rear_then ()  <544>;
        } #19
        {
            (__trgt.444 var=138) const ()  <545>;
            () void_j_t21s_s2 (__trgt.444)  <546>;
        } #51 off=37
        {
            #59 off=15
            (__ct_20t0.72 var=57) const ()  <83>;
            (__adr_c1.74 var=59) __Pvoid__pl___Pvoid___sint (__rd___sp.71 __ct_20t0.72)  <85>;
            (__ct_21t0.77 var=61) const ()  <88>;
            (__adr_c2.79 var=63) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_21t0.77)  <90>;
            (__ct_1.164 var=77) const ()  <179>;
            (__rd___sp.222 var=27) rd_res_reg (__R_SP.11 __sp.45)  <239>;
            (__tmp.225 var=100) __Pvoid__pl___Pvoid___sint (__rd___sp.222 __ct_24s0.223)  <242>;
            (__trgt.438 var=135) const ()  <533>;
            (__trgt.440 var=136) const ()  <538>;
            do {
                {
                    (n.140 var=19) entry (n.308 n.101)  <154>;
                    (r1.143 var=22) entry (r1.314 r1.92)  <157>;
                    (r2.144 var=23) entry (r2.316 r2.95)  <158>;
                    (c1.145 var=24) entry (c1.318 c1.23)  <159>;
                    (c2.146 var=25) entry (c2.320 c2.24)  <160>;
                } #22
                {
                    #24 off=16
                    (__fch_r1.163 var=76) load (__M_DMw.4 __adr_r1.64 r1.143)  <177>;
                    call {
                        () chess_separator_scheduler ()  <178>;
                    } #25 off=17
                    #26 off=18
                    (__M_DMw.167 var=5 r1.168 var=22) store (__shv___fch_r1.426 __adr_r1.64 r1.143)  <182>;
                    (__shv___fch_r1.426 var=122) __Pvoid__pl___Pvoid___sint (__fch_r1.163 __ct_1.164)  <477>;
                    call {
                        () chess_separator_scheduler ()  <183>;
                    } #27 off=19
                    #28 off=20
                    (__fchtmp.169 var=80) load (__M_DMb.2 __fch_r1.163 __extDMb.16 __extPMb_void.25)  <184>;
                    (__M_DMb.170 var=3 c1.171 var=24) store (__fchtmp.169 __adr_c1.74 c1.145)  <185>;
                    call {
                        () chess_separator_scheduler ()  <186>;
                    } #29 off=21
                    #30 off=22
                    (__fch_r2.172 var=81) load (__M_DMw.4 __adr_r2.69 r2.144)  <187>;
                    call {
                        () chess_separator_scheduler ()  <188>;
                    } #31 off=23
                    #32 off=24
                    (__M_DMw.176 var=5 r2.177 var=23) store (__shv___fch_r2.427 __adr_r2.69 r2.144)  <192>;
                    (__shv___fch_r2.427 var=123) __Pvoid__pl___Pvoid___sint (__fch_r2.172 __ct_1.164)  <478>;
                    call {
                        () chess_separator_scheduler ()  <193>;
                    } #33 off=25
                    #34 off=26
                    (__fchtmp.178 var=85) load (__M_DMb.2 __fch_r2.172 __extDMb.16 __extPMb_void.25)  <194>;
                    (__M_DMb.179 var=3 c2.180 var=25) store (__fchtmp.178 __adr_c2.79 c2.146)  <195>;
                    call {
                        () chess_separator_scheduler ()  <196>;
                    } #35 off=27
                    #36 off=28
                    (__fch_c1.181 var=86) load (__M_DMb.2 __adr_c1.74 c1.171)  <197>;
                    (__fch_c2.183 var=88) load (__M_DMb.2 __adr_c2.79 c2.180)  <199>;
                    (__tmp.185 var=90) bool__ne___sint___sint (__fch_c1.181 __fch_c2.183)  <201>;
                    () void_br_bool_t13s_s2 (__tmp.185 __trgt.438)  <534>;
                    (__either.439 var=134) undefined ()  <535>;
                    if {
                        {
                            () if_expr (__either.439)  <231>;
                            () chess_frequent_else ()  <536>;
                            () chess_rear_then ()  <537>;
                        } #38
                        {
                            (__tmp.215 var=92) load (__M_DMb.2 __adr_c1.74 c1.171)  <232>;
                            (__tmp.218 var=95) load (__M_DMb.2 __adr_c2.79 c2.180)  <235>;
                            (__rt.221 var=29) __sint__mi___sint___sint (__tmp.215 __tmp.218)  <238>;
                            (__R_SP.226 var=12 __sp.227 var=18) wr_res_reg (__tmp.225 __sp.45)  <243>;
                            () void___rts_jr_w32 (__la.28)  <244>;
                            (__rt.228 var=29 stl=X off=10) assign (__rt.221)  <245>;
                            () out (__rt.228)  <246>;
                            () sink (__sp.227)  <252>;
                            () sink (n.140)  <253>;
                            () sink (s2.87)  <254>;
                            () sink (s1.89)  <255>;
                            () sink (r1.168)  <256>;
                            () sink (r2.177)  <257>;
                            () sink (c1.171)  <258>;
                            () sink (c2.180)  <259>;
                        } #42 off=30 nxt=-2
                        {
                        } #43 off=29
                        {
                        } #44
                    } #37
                    #45 off=31
                    (__fch_n.287 var=101) load (__M_DMw.4 __adr_n.49 n.140)  <319>;
                    call {
                        () chess_separator_scheduler ()  <320>;
                    } #46 off=32
                    #47 off=33
                    (__M_DMw.291 var=5 n.292 var=19) store (__shv___fch_n.428 __adr_n.49 n.140)  <324>;
                    (__shv___fch_n.428 var=124) __uint__pl___uint___uint (__fch_n.287 __ct_4294967295.425)  <479>;
                    call {
                        () chess_separator_scheduler ()  <325>;
                    } #48 off=34
                    #49 off=35
                    (__tmp.295 var=107) bool__ne___uint___uint (__fch_n.287 __ct_0.102)  <328>;
                    () void_br_bool_t13s_s2 (__tmp.295 __trgt.440)  <539>;
                    (__either.441 var=134) undefined ()  <540>;
                } #23
                {
                    () while_expr (__either.441)  <329>;
                    (n.308 var=19 n.309 var=19) exit (n.292)  <336>;
                    (r1.314 var=22 r1.315 var=22) exit (r1.168)  <339>;
                    (r2.316 var=23 r2.317 var=23) exit (r2.177)  <340>;
                    (c1.318 var=24 c1.319 var=24) exit (c1.171)  <341>;
                    (c2.320 var=25 c2.321 var=25) exit (c2.180)  <342>;
                } #50
            } #21 rng=[1,2147483647]
        } #20
        {
            (n.360 var=19) merge (n.101 n.309)  <365>;
            (r1.363 var=22) merge (r1.92 r1.315)  <368>;
            (r2.364 var=23) merge (r2.95 r2.317)  <369>;
            (c1.365 var=24) merge (c1.23 c1.319)  <370>;
            (c2.366 var=25) merge (c2.24 c2.321)  <371>;
        } #52
    } #18
    #55 off=38 nxt=-2
    (__rd___sp.385 var=27) rd_res_reg (__R_SP.11 __sp.45)  <390>;
    (__tmp.388 var=112) __Pvoid__pl___Pvoid___sint (__rd___sp.385 __ct_24s0.223)  <393>;
    (__R_SP.389 var=12 __sp.390 var=18) wr_res_reg (__tmp.388 __sp.45)  <394>;
    () void___rts_jr_w32 (__la.28)  <395>;
    (__rt.391 var=29 stl=X off=10) assign (__ct_0.102)  <396>;
    () out (__rt.391)  <397>;
    () sink (__sp.390)  <403>;
    () sink (n.360)  <404>;
    () sink (s2.87)  <405>;
    () sink (s1.89)  <406>;
    () sink (r1.363)  <407>;
    () sink (r2.364)  <408>;
    () sink (c1.365)  <409>;
    () sink (c2.366)  <410>;
} #0
0 : 'src/string.c';
----------
0 : (0,89:0,0);
3 : (0,89:43,0);
4 : (0,89:43,0);
5 : (0,89:27,0);
6 : (0,89:27,0);
7 : (0,89:11,0);
8 : (0,89:11,0);
9 : (0,91:15,4);
10 : (0,91:15,4);
11 : (0,92:15,5);
12 : (0,92:15,5);
13 : (0,93:4,7);
14 : (0,93:4,7);
15 : (0,93:4,8);
16 : (0,93:4,8);
17 : (0,93:4,8);
18 : (0,93:4,8);
20 : (0,93:4,9);
21 : (0,93:4,9);
23 : (0,93:16,9);
24 : (0,94:21,10);
25 : (0,94:21,10);
26 : (0,94:21,11);
27 : (0,94:21,11);
28 : (0,94:18,11);
29 : (0,94:18,11);
30 : (0,95:21,13);
31 : (0,95:21,13);
32 : (0,95:21,14);
33 : (0,95:21,14);
34 : (0,95:18,14);
35 : (0,95:18,14);
36 : (0,96:15,15);
37 : (0,96:8,15);
42 : (0,97:12,16);
43 : (0,96:8,19);
45 : (0,93:12,24);
46 : (0,93:12,24);
47 : (0,93:12,25);
48 : (0,93:12,25);
49 : (0,93:4,25);
51 : (0,93:4,27);
55 : (0,99:4,30);
----------
51 : (0,89:4,0);
52 : (0,89:4,0);
54 : (0,89:4,0);
55 : (0,89:4,0);
57 : (0,89:50,0);
58 : (0,89:50,0);
60 : (0,89:50,0);
62 : (0,89:39,0);
63 : (0,89:39,0);
65 : (0,89:39,0);
67 : (0,89:23,0);
68 : (0,89:23,0);
70 : (0,89:23,0);
72 : (0,91:10,0);
73 : (0,91:10,0);
75 : (0,91:10,0);
77 : (0,92:10,0);
78 : (0,92:10,0);
80 : (0,92:10,0);
82 : (0,94:13,0);
83 : (0,94:13,0);
85 : (0,94:13,0);
87 : (0,95:13,0);
88 : (0,95:13,0);
90 : (0,95:13,0);
95 : (0,89:43,0);
96 : (0,89:43,0);
97 : (0,89:27,0);
98 : (0,89:27,0);
99 : (0,89:11,0);
100 : (0,89:11,0);
101 : (0,91:23,4);
102 : (0,91:15,4);
103 : (0,91:15,4);
104 : (0,92:23,5);
105 : (0,92:15,5);
106 : (0,92:15,5);
107 : (0,93:4,6);
108 : (0,93:4,7);
112 : (0,93:4,7);
113 : (0,93:4,8);
114 : (0,93:4,0);
146 : (0,93:4,8);
154 : (0,93:4,9);
157 : (0,93:4,9);
158 : (0,93:4,9);
159 : (0,93:4,9);
160 : (0,93:4,9);
177 : (0,94:19,9);
178 : (0,94:21,10);
179 : (0,94:21,0);
182 : (0,94:19,10);
183 : (0,94:21,11);
184 : (0,94:18,11);
185 : (0,94:18,11);
186 : (0,94:18,11);
187 : (0,95:19,12);
188 : (0,95:21,13);
192 : (0,95:19,13);
193 : (0,95:21,14);
194 : (0,95:18,14);
195 : (0,95:18,14);
196 : (0,95:18,14);
197 : (0,96:12,15);
199 : (0,96:18,15);
201 : (0,96:15,15);
231 : (0,96:8,15);
232 : (0,97:34,16);
235 : (0,97:54,16);
238 : (0,97:37,16);
239 : (0,97:12,0);
240 : (0,97:12,0);
242 : (0,97:12,0);
243 : (0,97:12,16);
244 : (0,97:12,16);
245 : (0,97:37,0);
319 : (0,93:11,23);
320 : (0,93:12,24);
324 : (0,93:11,24);
325 : (0,93:12,25);
328 : (0,93:4,25);
329 : (0,93:4,25);
336 : (0,93:4,25);
339 : (0,93:4,25);
340 : (0,93:4,25);
341 : (0,93:4,25);
342 : (0,93:4,25);
365 : (0,93:4,29);
368 : (0,93:4,29);
369 : (0,93:4,29);
370 : (0,93:4,29);
371 : (0,93:4,29);
390 : (0,99:4,0);
393 : (0,99:4,0);
394 : (0,99:4,30);
395 : (0,99:4,30);
396 : (0,99:11,0);
475 : (0,93:4,0);
477 : (0,94:21,0);
478 : (0,95:21,0);
479 : (0,93:12,0);
480 : (0,93:4,0);
516 : (0,93:4,8);
534 : (0,96:8,15);
539 : (0,93:4,25);
542 : (0,93:4,8);

