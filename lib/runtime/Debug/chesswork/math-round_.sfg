
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 13:35:43 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern double round(double)
Fround : user_defined, called {
    fnm : "round" 'double round(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=32 );
}
****
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : round typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : x typ=w08 val=0t0 bnd=a sz=8 algn=4 stl=DMb tref=__fdouble_DMb
   20 : msw typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   21 : lsw typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=u_int32_t_DMb
   22 : exponent_less_1023 typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=int32_t_DMb
   23 : exponent_mask typ=w08 val=28t0 bnd=a sz=4 algn=4 stl=DMb lscp=31 tref=u_int32_t_DMb
   24 : exponent_mask typ=w08 val=20t0 bnd=a sz=4 algn=4 stl=DMb lscp=73 tref=u_int32_t_DMb
   25 : tmp typ=w08 val=24t0 bnd=a sz=4 algn=4 stl=DMb lscp=73 tref=u_int32_t_DMb
   26 : x_low typ=w08 bnd=B stl=DMb
   27 : x_high typ=w08 bnd=B stl=DMb
   28 : __rd___sp typ=w32 bnd=m
   29 : __la typ=w32 bnd=p tref=w32__
   31 : __rt_low typ=w32 bnd=m tref=__uint__
   32 : __rt_high typ=w32 bnd=m tref=__uint__
   34 : __arg_x_low typ=w32 bnd=m tref=__uint__
   35 : __arg_x_high typ=w32 bnd=m tref=__uint__
   36 : __ct_m32S0 typ=w32 val=-32S0 bnd=m
   38 : __tmp typ=w32 bnd=m
   40 : __ct_0t0 typ=w32 val=0t0 bnd=m
   42 : __adr_x typ=w32 bnd=m adro=19
   44 : __ct_8t0 typ=w32 val=8t0 bnd=m
   46 : __adr_msw typ=w32 bnd=m adro=20
   48 : __ct_16t0 typ=w32 val=16t0 bnd=m
   50 : __adr_lsw typ=w32 bnd=m adro=21
   52 : __ct_12t0 typ=w32 val=12t0 bnd=m
   54 : __adr_exponent_less_1023 typ=w32 bnd=m adro=22
   56 : __ct_28t0 typ=w32 val=28t0 bnd=m
   58 : __adr_exponent_mask typ=w32 bnd=m adro=23
   60 : __ct_20t0 typ=w32 val=20t0 bnd=m
   62 : __adr_exponent_mask typ=w32 bnd=m adro=24
   64 : __ct_24t0 typ=w32 val=24t0 bnd=m
   66 : __adr_tmp typ=w32 bnd=m adro=25
   78 : __fch_x_high typ=w32 bnd=m
   85 : __fch_x_low typ=w32 bnd=m
   92 : __fch_msw typ=w32 bnd=m
   93 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
   95 : __tmp typ=w32 bnd=m
   96 : __ct_20 typ=w32 val=20f bnd=m
   98 : __tmp typ=w32 bnd=m
  101 : __tmp typ=w32 bnd=m
  102 : __fch_exponent_less_1023 typ=w32 bnd=m
  105 : __tmp typ=bool bnd=m
  106 : __fch_exponent_less_1023 typ=w32 bnd=m
  107 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  109 : __tmp typ=bool bnd=m
  110 : __fch_msw typ=w32 bnd=m
  112 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  114 : __tmp typ=w32 bnd=m
  116 : __fch_exponent_less_1023 typ=w32 bnd=m
  117 : __ct_m1 typ=w32 val=-1f bnd=m
  119 : __tmp typ=bool bnd=m
  120 : __fch_msw typ=w32 bnd=m
  122 : __ct_1072693248 typ=t20s_rp12 val=261888f bnd=m
  124 : __tmp typ=w32 bnd=m
  128 : __ct_1048575 typ=w32 val=1048575f bnd=m
  130 : __fch_exponent_less_1023 typ=w32 bnd=m
  131 : __tmp typ=w32 bnd=m
  132 : __fch_msw typ=w32 bnd=m
  134 : __fch_exponent_mask typ=w32 bnd=m
  135 : __tmp typ=w32 bnd=m
  138 : __tmp typ=bool bnd=m
  139 : __fch_lsw typ=w32 bnd=m
  142 : __tmp typ=bool bnd=m
  145 : __tmp typ=bool bnd=m
  147 : __fch_x_low typ=w32 bnd=m
  150 : __fch_x_high typ=w32 bnd=m
  151 : __ct_32s0 typ=w32 val=32s0 bnd=m
  153 : __tmp typ=w32 bnd=m
  154 : __fch_msw typ=w32 bnd=m
  156 : __ct_524288 typ=t20s_rp12 val=128f bnd=m
  158 : __fch_exponent_less_1023 typ=w32 bnd=m
  159 : __tmp typ=w32 bnd=m
  160 : __tmp typ=w32 bnd=m
  162 : __fch_msw typ=w32 bnd=m
  164 : __fch_exponent_mask typ=w32 bnd=m
  165 : __tmp typ=w32 bnd=m
  166 : __tmp typ=w32 bnd=m
  170 : __fch_exponent_less_1023 typ=w32 bnd=m
  171 : __ct_51 typ=w32 val=51f bnd=m
  173 : __tmp typ=bool bnd=m
  174 : __fch_exponent_less_1023 typ=w32 bnd=m
  175 : __ct_1024 typ=w32 val=1024f bnd=m
  177 : __tmp typ=bool bnd=m
  179 : __fch_x_low typ=w32 bnd=m
  182 : __fch_x_high typ=w32 bnd=m
  184 : __fch_x_low typ=w32 bnd=m
  187 : __fch_x_high typ=w32 bnd=m
  190 : __fch_x_low typ=w32 bnd=m
  193 : __fch_x_high typ=w32 bnd=m
  196 : __tmp typ=w32 bnd=m
  199 : __fch_exponent_less_1023 typ=w32 bnd=m
  202 : __tmp typ=w32 bnd=m
  203 : __tmp typ=w32 bnd=m
  204 : __fch_lsw typ=w32 bnd=m
  205 : __fch_exponent_mask typ=w32 bnd=m
  206 : __tmp typ=w32 bnd=m
  209 : __tmp typ=bool bnd=m
  211 : __fch_x_low typ=w32 bnd=m
  214 : __fch_x_high typ=w32 bnd=m
  217 : __tmp typ=w32 bnd=m
  218 : __fch_lsw typ=w32 bnd=m
  219 : __ct_1 typ=w32 val=1f bnd=m
  223 : __fch_exponent_less_1023 typ=w32 bnd=m
  224 : __tmp typ=w32 bnd=m
  225 : __tmp typ=w32 bnd=m
  226 : __tmp typ=w32 bnd=m
  227 : __fch_tmp typ=w32 bnd=m
  228 : __fch_lsw typ=w32 bnd=m
  229 : __tmp typ=bool bnd=m
  230 : __fch_msw typ=w32 bnd=m
  233 : __tmp typ=w32 bnd=m
  234 : __fch_tmp typ=w32 bnd=m
  235 : __fch_lsw typ=w32 bnd=m
  236 : __fch_exponent_mask typ=w32 bnd=m
  237 : __tmp typ=w32 bnd=m
  238 : __tmp typ=w32 bnd=m
  239 : __fch_msw typ=w32 bnd=m
  241 : __fch_lsw typ=w32 bnd=m
  254 : __fch_x_low typ=w32 bnd=m
  257 : __fch_x_high typ=w32 bnd=m
  260 : __tmp typ=w32 bnd=m
  270 : __ct_m1023 typ=w32 val=-1023f bnd=m
  271 : __ct_m20 typ=w32 val=-20f bnd=m
  277 : __ct_4t0 typ=w32 val=4t0 bnd=m
  278 : __adr_x typ=w32 bnd=m adro=19
  279 : __adr_x typ=w32 bnd=m adro=19
  280 : __adr_x typ=w32 bnd=m adro=19
  281 : __adr_x typ=w32 bnd=m adro=19
  282 : __adr_x typ=w32 bnd=m adro=19
  283 : __adr_x typ=w32 bnd=m adro=19
  284 : __adr_x typ=w32 bnd=m adro=19
  286 : __adr_x typ=w32 bnd=m adro=19
  287 : __adr_x typ=w32 bnd=m adro=19
  375 : a_low typ=w32 bnd=m tref=__uint__
  376 : a_high typ=w32 bnd=m tref=__uint__
  377 : b_low typ=w32 bnd=m tref=__uint__
  378 : b_high typ=w32 bnd=m tref=__uint__
  379 : f64_add typ=t21s_s2 val=0r bnd=m
  380 : __link typ=w32 bnd=m
  382 : __tmp typ=w32 bnd=m
  383 : __tmp typ=w32 bnd=m
  404 : __false typ=bool val=0f bnd=m
  405 : __either typ=bool bnd=m
  406 : __trgt typ=t13s_s2 val=0j bnd=m
  407 : __trgt typ=t21s_s2 val=0j bnd=m
  408 : __trgt typ=t13s_s2 val=0j bnd=m
  409 : __trgt typ=t13s_s2 val=0j bnd=m
  410 : __trgt typ=t13s_s2 val=0j bnd=m
  411 : __trgt typ=t21s_s2 val=0j bnd=m
  412 : __trgt typ=t13s_s2 val=0j bnd=m
  413 : __trgt typ=t21s_s2 val=0j bnd=m
  414 : __trgt typ=t13s_s2 val=0j bnd=m
  415 : __trgt typ=t13s_s2 val=0j bnd=m
  416 : __trgt typ=t21s_s2 val=0j bnd=m
  417 : __trgt typ=t13s_s2 val=0j bnd=m
  418 : __trgt typ=t13s_s2 val=0j bnd=m
  419 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fround {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (msw.19 var=20) source ()  <30>;
    (lsw.20 var=21) source ()  <31>;
    (exponent_less_1023.21 var=22) source ()  <32>;
    (exponent_mask.22 var=23) source ()  <33>;
    (exponent_mask.23 var=24) source ()  <34>;
    (tmp.24 var=25) source ()  <35>;
    (x_low.25 var=26) source ()  <36>;
    (x_high.26 var=27) source ()  <37>;
    (__la.28 var=29 stl=X off=1) inp ()  <39>;
    (__la.29 var=29) deassign (__la.28)  <40>;
    (__arg_x_low.37 var=34 stl=X off=12) inp ()  <48>;
    (__arg_x_low.38 var=34) deassign (__arg_x_low.37)  <49>;
    (__arg_x_high.41 var=35 stl=X off=13) inp ()  <52>;
    (__arg_x_high.42 var=35) deassign (__arg_x_high.41)  <53>;
    (__rd___sp.45 var=28) rd_res_reg (__R_SP.11 __sp.17)  <56>;
    (__ct_m32S0.46 var=36) const ()  <57>;
    (__tmp.48 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_m32S0.46)  <59>;
    (__R_SP.49 var=12 __sp.50 var=18) wr_res_reg (__tmp.48 __sp.17)  <60>;
    (__rd___sp.51 var=28) rd_res_reg (__R_SP.11 __sp.50)  <62>;
    (__ct_0t0.52 var=40) const ()  <63>;
    (__adr_x.54 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_0t0.52)  <65>;
    (__rd___sp.56 var=28) rd_res_reg (__R_SP.11 __sp.50)  <67>;
    (__rd___sp.61 var=28) rd_res_reg (__R_SP.11 __sp.50)  <72>;
    (__rd___sp.66 var=28) rd_res_reg (__R_SP.11 __sp.50)  <77>;
    (__rd___sp.71 var=28) rd_res_reg (__R_SP.11 __sp.50)  <82>;
    (__rd___sp.76 var=28) rd_res_reg (__R_SP.11 __sp.50)  <87>;
    (__rd___sp.81 var=28) rd_res_reg (__R_SP.11 __sp.50)  <92>;
    (__M_DMw.92 var=5 x_low.93 var=26) store (__arg_x_low.38 __adr_x.54 x_low.25)  <103>;
    (__M_DMw.98 var=5 x_high.99 var=27) store (__arg_x_high.42 __adr_x.958 x_high.26)  <108>;
    (__ct_4t0.952 var=277) const ()  <1104>;
    (__adr_x.958 var=283) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.952)  <1111>;
    call {
        () chess_separator_scheduler ()  <109>;
    } #4 off=1
    #198 off=2
    (__ct_8t0.57 var=44) const ()  <68>;
    (__adr_msw.59 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.56 __ct_8t0.57)  <70>;
    (__fch_x_high.106 var=78) load (__M_DMw.4 __adr_x.959 x_high.99)  <116>;
    (__M_DMw.113 var=5 msw.114 var=20) store (__fch_x_high.106 __adr_msw.59 msw.19)  <123>;
    (__adr_x.959 var=284) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.952)  <1112>;
    call {
        () chess_separator_scheduler ()  <124>;
    } #6 off=3
    #210 off=4
    (__ct_16t0.62 var=48) const ()  <73>;
    (__adr_lsw.64 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.61 __ct_16t0.62)  <75>;
    (__fch_x_low.116 var=85) load (__M_DMw.4 __adr_x.54 x_low.93)  <126>;
    (__M_DMw.126 var=5 lsw.127 var=21) store (__fch_x_low.116 __adr_lsw.64 lsw.20)  <136>;
    call {
        () chess_separator_scheduler ()  <137>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.67 var=52) const ()  <78>;
    (__adr_exponent_less_1023.69 var=54) __Pvoid__pl___Pvoid___sint (__rd___sp.66 __ct_12t0.67)  <80>;
    (__fch_msw.128 var=92) load (__M_DMw.4 __adr_msw.59 msw.114)  <138>;
    (__ct_2146435072.129 var=93) const ()  <139>;
    (__tmp.131 var=95) __sint__ad___sint___sint (__fch_msw.128 __ct_2146435072.129)  <141>;
    (__ct_20.132 var=96) const ()  <142>;
    (__tmp.134 var=98) __sint__rs___sint___sint (__tmp.131 __ct_20.132)  <144>;
    (__tmp.137 var=101) __sint__pl___sint___sint (__tmp.134 __ct_m1023.940)  <147>;
    (__M_DMw.138 var=5 exponent_less_1023.139 var=22) store (__tmp.137 __adr_exponent_less_1023.69 exponent_less_1023.21)  <148>;
    (__ct_m1023.940 var=270) const ()  <1090>;
    call {
        () chess_separator_scheduler ()  <149>;
    } #10 off=7
    #11 off=8
    (__fch_exponent_less_1023.140 var=102) load (__M_DMw.4 __adr_exponent_less_1023.69 exponent_less_1023.139)  <150>;
    (__tmp.143 var=105) bool__lt___sint___sint (__fch_exponent_less_1023.140 __ct_20.132)  <153>;
    (__ct_0.175 var=107) const ()  <186>;
    (__ct_m1.217 var=117) const ()  <229>;
    (__ct_32s0.352 var=151) const ()  <367>;
    (__trgt.1136 var=418) const ()  <1548>;
    () void_br_bool_t13s_s2 (__tmp.143 __trgt.1136)  <1549>;
    (__either.1137 var=405) undefined ()  <1550>;
    if {
        {
            () if_expr (__either.1137)  <184>;
        } #13
        {
            #15 off=29
            (__fch_exponent_less_1023.174 var=106) load (__M_DMw.4 __adr_exponent_less_1023.69 exponent_less_1023.139)  <185>;
            (__tmp.177 var=109) bool__lt___sint___sint (__fch_exponent_less_1023.174 __ct_0.175)  <188>;
            (__trgt.1123 var=410) const ()  <1525>;
            () void_br_bool_t13s_s2 (__tmp.177 __trgt.1123)  <1526>;
            (__either.1124 var=405) undefined ()  <1527>;
            if {
                {
                    () if_expr (__either.1124)  <219>;
                } #17
                {
                    #19 off=41
                    (__fch_msw.208 var=110) load (__M_DMw.4 __adr_msw.59 msw.114)  <220>;
                    (__ct_2147483648.210 var=112) const ()  <222>;
                    (__tmp.212 var=114) __uint__ad___uint___uint (__fch_msw.208 __ct_2147483648.210)  <224>;
                    (__M_DMw.214 var=5 msw.215 var=20) store (__tmp.212 __adr_msw.59 msw.114)  <226>;
                    call {
                        () chess_separator_scheduler ()  <227>;
                    } #20 off=42
                    #21 off=43
                    (__fch_exponent_less_1023.216 var=116) load (__M_DMw.4 __adr_exponent_less_1023.69 exponent_less_1023.139)  <228>;
                    (__tmp.1110 var=119) bool__ne___sint___sint (__fch_exponent_less_1023.216 __ct_m1.217)  <1481>;
                    (__trgt.1115 var=406) const ()  <1512>;
                    () void_br_bool_t13s_s2 (__tmp.1110 __trgt.1115)  <1513>;
                    (__either.1116 var=405) undefined ()  <1514>;
                    if {
                        {
                            () if_expr (__either.1116)  <262>;
                        } #23
                        {
                        } #27 off=45
                        {
                            (__fch_msw.250 var=120) load (__M_DMw.4 __adr_msw.59 msw.215)  <263>;
                            (__ct_1072693248.252 var=122) const ()  <265>;
                            (__tmp.254 var=124) __uint__or___uint___uint (__fch_msw.250 __ct_1072693248.252)  <267>;
                            (__M_DMw.256 var=5 msw.257 var=20) store (__tmp.254 __adr_msw.59 msw.215)  <269>;
                            (__trgt.1117 var=407) const ()  <1515>;
                            () void_j_t21s_s2 (__trgt.1117)  <1516>;
                        } #25 off=44
                        {
                            (msw.258 var=20) merge (msw.215 msw.257)  <271>;
                        } #28
                    } #22
                    #29 off=46
                    (__M_DMw.261 var=5 lsw.262 var=21) store (__ct_0.175 __adr_lsw.64 lsw.127)  <274>;
                } #18
                {
                    #32 off=30
                    (__ct_28t0.72 var=56) const ()  <83>;
                    (__adr_exponent_mask.74 var=58) __Pvoid__pl___Pvoid___sint (__rd___sp.71 __ct_28t0.72)  <85>;
                    (__ct_1048575.263 var=128) const ()  <276>;
                    (__fch_exponent_less_1023.265 var=130) load (__M_DMw.4 __adr_exponent_less_1023.69 exponent_less_1023.139)  <278>;
                    (__tmp.266 var=131) __uint__rs___uint___sint (__ct_1048575.263 __fch_exponent_less_1023.265)  <279>;
                    (__M_DMw.267 var=5 exponent_mask.268 var=23) store (__tmp.266 __adr_exponent_mask.74 exponent_mask.22)  <280>;
                    call {
                        () chess_separator_scheduler ()  <281>;
                    } #33 off=31
                    #34 off=32
                    (__fch_msw.269 var=132) load (__M_DMw.4 __adr_msw.59 msw.114)  <282>;
                    (__fch_exponent_mask.271 var=134) load (__M_DMw.4 __adr_exponent_mask.74 exponent_mask.268)  <284>;
                    (__tmp.272 var=135) __uint__ad___uint___uint (__fch_msw.269 __fch_exponent_mask.271)  <285>;
                    (__tmp.1111 var=138) bool__ne___uint___uint (__tmp.272 __ct_0.175)  <1482>;
                    (__trgt.1118 var=408) const ()  <1517>;
                    () void_br_bool_t13s_s2 (__tmp.1111 __trgt.1118)  <1518>;
                    (__either.1119 var=405) undefined ()  <1519>;
                    if {
                        {
                            () if_expr (__either.1119)  <319>;
                        } #36
                        {
                            (__false.1120 var=404) const ()  <1520>;
                        } #38
                        {
                            (__fch_lsw.306 var=139) load (__M_DMw.4 __adr_lsw.64 lsw.127)  <320>;
                            (__tmp.309 var=142) bool__eq___uint___uint (__fch_lsw.306 __ct_0.175)  <323>;
                            (__trgt.1121 var=409) const ()  <1521>;
                            () void_br_bool_t13s_s2 (__tmp.309 __trgt.1121)  <1522>;
                            (__either.1122 var=405) undefined ()  <1523>;
                        } #37 off=33
                        {
                            (__tmp.312 var=145) merge (__false.1120 __either.1122)  <326>;
                        } #39
                    } #35
                    if {
                        {
                            () if_expr (__tmp.312)  <357>;
                            () chess_rear_then ()  <1524>;
                        } #42
                        {
                            (__fch_x_low.344 var=147) load (__M_DMw.4 __adr_x.54 x_low.93)  <359>;
                            (__fch_x_high.349 var=150) load (__M_DMw.4 __adr_x.953 x_high.99)  <364>;
                            (__rd___sp.351 var=28) rd_res_reg (__R_SP.11 __sp.50)  <366>;
                            (__tmp.354 var=153) __Pvoid__pl___Pvoid___sint (__rd___sp.351 __ct_32s0.352)  <369>;
                            (__R_SP.355 var=12 __sp.356 var=18) wr_res_reg (__tmp.354 __sp.50)  <370>;
                            () void___rts_jr_w32 (__la.29)  <371>;
                            (__rt_low.358 var=31 stl=X off=10) assign (__fch_x_low.344)  <373>;
                            () out (__rt_low.358)  <374>;
                            (__rt_high.360 var=32 stl=X off=11) assign (__fch_x_high.349)  <376>;
                            () out (__rt_high.360)  <377>;
                            () sink (__sp.356)  <385>;
                            () sink (msw.114)  <387>;
                            () sink (lsw.127)  <388>;
                            () sink (exponent_less_1023.139)  <389>;
                            () sink (exponent_mask.268)  <390>;
                            () sink (x_low.93)  <393>;
                            () sink (x_high.99)  <394>;
                            (__adr_x.953 var=278) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.952)  <1106>;
                        } #46 off=35 nxt=-2
                        {
                        } #47 off=34
                        {
                        } #48
                    } #41
                    #49 off=36
                    (__fch_msw.423 var=154) load (__M_DMw.4 __adr_msw.59 msw.114)  <455>;
                    (__ct_524288.425 var=156) const ()  <457>;
                    (__fch_exponent_less_1023.427 var=158) load (__M_DMw.4 __adr_exponent_less_1023.69 exponent_less_1023.139)  <459>;
                    (__tmp.428 var=159) __uint__rs___uint___sint (__ct_524288.425 __fch_exponent_less_1023.427)  <460>;
                    (__tmp.429 var=160) __uint__pl___uint___uint (__fch_msw.423 __tmp.428)  <461>;
                    (__M_DMw.431 var=5 msw.432 var=20) store (__tmp.429 __adr_msw.59 msw.114)  <463>;
                    call {
                        () chess_separator_scheduler ()  <464>;
                    } #50 off=37
                    #150 off=38
                    (__fch_msw.433 var=162) load (__M_DMw.4 __adr_msw.59 msw.432)  <465>;
                    (__fch_exponent_mask.435 var=164) load (__M_DMw.4 __adr_exponent_mask.74 exponent_mask.268)  <467>;
                    (__tmp.437 var=166) __uint__ad___uint___uint (__fch_msw.433 __tmp.996)  <469>;
                    (__M_DMw.439 var=5 msw.440 var=20) store (__tmp.437 __adr_msw.59 msw.432)  <471>;
                    (__tmp.996 var=165) __uint__er___uint___uint (__fch_exponent_mask.435 __ct_m1.217)  <1185>;
                    call {
                        () chess_separator_scheduler ()  <472>;
                    } #52 off=39
                    #53 off=40
                    (__M_DMw.443 var=5 lsw.444 var=21) store (__ct_0.175 __adr_lsw.64 lsw.127)  <475>;
                    (__trgt.1125 var=411) const ()  <1528>;
                    () void_j_t21s_s2 (__trgt.1125)  <1529>;
                } #31
                {
                    (msw.452 var=20) merge (msw.258 msw.440)  <484>;
                    (lsw.453 var=21) merge (lsw.262 lsw.444)  <485>;
                    (exponent_mask.455 var=23) merge (exponent_mask.22 exponent_mask.268)  <487>;
                } #55
            } #16
        } #14
        {
            #157 off=9
            (__fch_exponent_less_1023.475 var=170) load (__M_DMw.4 __adr_exponent_less_1023.69 exponent_less_1023.139)  <507>;
            (__ct_51.476 var=171) const ()  <508>;
            (__tmp.1000 var=173) bool__lt___sint___sint (__ct_51.476 __fch_exponent_less_1023.475)  <1192>;
            (__trgt.1134 var=417) const ()  <1544>;
            () void_br_bool_t13s_s2 (__tmp.1000 __trgt.1134)  <1545>;
            (__either.1135 var=405) undefined ()  <1546>;
            if {
                {
                    () if_expr (__either.1135)  <541>;
                    () chess_rear_then ()  <1547>;
                } #59
                {
                    #61 off=23
                    (__fch_exponent_less_1023.509 var=174) load (__M_DMw.4 __adr_exponent_less_1023.69 exponent_less_1023.139)  <542>;
                    (__ct_1024.510 var=175) const ()  <543>;
                    (__tmp.512 var=177) bool__eq___sint___sint (__fch_exponent_less_1023.509 __ct_1024.510)  <545>;
                    (__trgt.1126 var=412) const ()  <1530>;
                    () void_br_bool_t13s_s2 (__tmp.512 __trgt.1126)  <1531>;
                    (__either.1127 var=405) undefined ()  <1532>;
                    if {
                        {
                            () if_expr (__either.1127)  <576>;
                        } #63
                        {
                            #229 off=25
                            (__fch_x_low.544 var=179) load (__M_DMw.4 __adr_x.54 x_low.93)  <578>;
                            (__fch_x_high.549 var=182) load (__M_DMw.4 __adr_x.954 x_high.99)  <583>;
                            (__fch_x_low.552 var=184) load (__M_DMw.4 __adr_x.54 x_low.93)  <586>;
                            (__fch_x_high.557 var=187) load (__M_DMw.4 __adr_x.955 x_high.99)  <591>;
                            (__adr_x.954 var=279) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.952)  <1107>;
                            (__adr_x.955 var=280) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.952)  <1108>;
                            (f64_add.1071 var=379) const ()  <1345>;
                            (__link.1072 var=380) w32_jal_t21s_s2 (f64_add.1071)  <1346>;
                            call {
                                (a_low.1073 var=375 stl=X off=12) assign (__fch_x_low.544)  <1347>;
                                (a_high.1074 var=376 stl=X off=13) assign (__fch_x_high.549)  <1348>;
                                (b_low.1075 var=377 stl=X off=14) assign (__fch_x_low.552)  <1349>;
                                (b_high.1076 var=378 stl=X off=15) assign (__fch_x_high.557)  <1350>;
                                (__link.1077 var=380 stl=X off=1) assign (__link.1072)  <1351>;
                                (__tmp.1078 var=382 stl=X off=10 __tmp.1079 var=383 stl=X off=11) Ff64_add (__link.1077 a_low.1073 a_high.1074 b_low.1075 b_high.1076)  <1352>;
                                (__tmp.1081 var=382) deassign (__tmp.1078)  <1354>;
                                (__tmp.1083 var=383) deassign (__tmp.1079)  <1356>;
                            } #230 off=26
                        } #64
                        {
                            (__fch_x_low.561 var=190) load (__M_DMw.4 __adr_x.54 x_low.93)  <596>;
                            (__fch_x_high.566 var=193) load (__M_DMw.4 __adr_x.956 x_high.99)  <601>;
                            (__adr_x.956 var=281) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.952)  <1109>;
                            (__trgt.1128 var=413) const ()  <1533>;
                            () void_j_t21s_s2 (__trgt.1128)  <1534>;
                        } #68 off=24
                        {
                            (__rt_low.936 var=31) merge (__tmp.1081 __fch_x_low.561)  <1086>;
                            (__rt_high.939 var=32) merge (__tmp.1083 __fch_x_high.566)  <1089>;
                        } #70
                    } #62
                    #72 off=27 nxt=-2
                    (__rd___sp.569 var=28) rd_res_reg (__R_SP.11 __sp.50)  <605>;
                    (__tmp.572 var=196) __Pvoid__pl___Pvoid___sint (__rd___sp.569 __ct_32s0.352)  <608>;
                    (__R_SP.573 var=12 __sp.574 var=18) wr_res_reg (__tmp.572 __sp.50)  <609>;
                    () void___rts_jr_w32 (__la.29)  <610>;
                    (__rt_low.576 var=31 stl=X off=10) assign (__rt_low.936)  <612>;
                    () out (__rt_low.576)  <613>;
                    (__rt_high.578 var=32 stl=X off=11) assign (__rt_high.939)  <615>;
                    () out (__rt_high.578)  <616>;
                    () sink (__sp.574)  <624>;
                    () sink (msw.114)  <626>;
                    () sink (lsw.127)  <627>;
                    () sink (exponent_less_1023.139)  <628>;
                    () sink (x_low.93)  <632>;
                    () sink (x_high.99)  <633>;
                    (msw.588 var=20) never ()  <641>;
                    (lsw.589 var=21) never ()  <642>;
                    (exponent_mask.592 var=24) never ()  <645>;
                    (tmp.593 var=25) never ()  <646>;
                } #60
                {
                    #74 off=10
                    (__ct_20t0.77 var=60) const ()  <88>;
                    (__adr_exponent_mask.79 var=62) __Pvoid__pl___Pvoid___sint (__rd___sp.76 __ct_20t0.77)  <90>;
                    (__fch_exponent_less_1023.613 var=199) load (__M_DMw.4 __adr_exponent_less_1023.69 exponent_less_1023.139)  <666>;
                    (__tmp.616 var=202) __sint__pl___sint___sint (__fch_exponent_less_1023.613 __ct_m20.941)  <669>;
                    (__tmp.617 var=203) __uint__rs___uint___sint (__ct_m1.217 __tmp.616)  <670>;
                    (__M_DMw.618 var=5 exponent_mask.619 var=24) store (__tmp.617 __adr_exponent_mask.79 exponent_mask.23)  <671>;
                    (__ct_m20.941 var=271) const ()  <1092>;
                    call {
                        () chess_separator_scheduler ()  <672>;
                    } #75 off=11
                    #76 off=12
                    (__fch_lsw.620 var=204) load (__M_DMw.4 __adr_lsw.64 lsw.127)  <673>;
                    (__fch_exponent_mask.621 var=205) load (__M_DMw.4 __adr_exponent_mask.79 exponent_mask.619)  <674>;
                    (__tmp.622 var=206) __uint__ad___uint___uint (__fch_lsw.620 __fch_exponent_mask.621)  <675>;
                    (__tmp.625 var=209) bool__eq___uint___uint (__tmp.622 __ct_0.175)  <678>;
                    (__trgt.1129 var=414) const ()  <1535>;
                    () void_br_bool_t13s_s2 (__tmp.625 __trgt.1129)  <1536>;
                    (__either.1130 var=405) undefined ()  <1537>;
                    if {
                        {
                            () if_expr (__either.1130)  <709>;
                            () chess_rear_then ()  <1538>;
                        } #78
                        {
                            (__fch_x_low.657 var=211) load (__M_DMw.4 __adr_x.54 x_low.93)  <711>;
                            (__fch_x_high.662 var=214) load (__M_DMw.4 __adr_x.957 x_high.99)  <716>;
                            (__rd___sp.664 var=28) rd_res_reg (__R_SP.11 __sp.50)  <718>;
                            (__tmp.667 var=217) __Pvoid__pl___Pvoid___sint (__rd___sp.664 __ct_32s0.352)  <721>;
                            (__R_SP.668 var=12 __sp.669 var=18) wr_res_reg (__tmp.667 __sp.50)  <722>;
                            () void___rts_jr_w32 (__la.29)  <723>;
                            (__rt_low.671 var=31 stl=X off=10) assign (__fch_x_low.657)  <725>;
                            () out (__rt_low.671)  <726>;
                            (__rt_high.673 var=32 stl=X off=11) assign (__fch_x_high.662)  <728>;
                            () out (__rt_high.673)  <729>;
                            () sink (__sp.669)  <737>;
                            () sink (msw.114)  <739>;
                            () sink (lsw.127)  <740>;
                            () sink (exponent_less_1023.139)  <741>;
                            () sink (exponent_mask.619)  <743>;
                            () sink (x_low.93)  <745>;
                            () sink (x_high.99)  <746>;
                            (__adr_x.957 var=282) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.952)  <1110>;
                        } #82 off=14 nxt=-2
                        {
                        } #83 off=13
                        {
                        } #84
                    } #77
                    #85 off=15
                    (__ct_24t0.82 var=64) const ()  <93>;
                    (__adr_tmp.84 var=66) __Pvoid__pl___Pvoid___sint (__rd___sp.81 __ct_24t0.82)  <95>;
                    (__fch_lsw.736 var=218) load (__M_DMw.4 __adr_lsw.64 lsw.127)  <807>;
                    (__ct_1.737 var=219) const ()  <808>;
                    (__fch_exponent_less_1023.741 var=223) load (__M_DMw.4 __adr_exponent_less_1023.69 exponent_less_1023.139)  <812>;
                    (__tmp.742 var=224) __sint__mi___sint___sint (__ct_51.476 __fch_exponent_less_1023.741)  <813>;
                    (__tmp.743 var=225) __uint__ls___uint___sint (__ct_1.737 __tmp.742)  <814>;
                    (__tmp.744 var=226) __uint__pl___uint___uint (__fch_lsw.736 __tmp.743)  <815>;
                    (__M_DMw.745 var=5 tmp.746 var=25) store (__tmp.744 __adr_tmp.84 tmp.24)  <816>;
                    call {
                        () chess_separator_scheduler ()  <817>;
                    } #86 off=16
                    #87 off=17
                    (__fch_tmp.747 var=227) load (__M_DMw.4 __adr_tmp.84 tmp.746)  <818>;
                    (__fch_lsw.748 var=228) load (__M_DMw.4 __adr_lsw.64 lsw.127)  <819>;
                    (__tmp.1112 var=229) bool__ge___uint___uint (__fch_tmp.747 __fch_lsw.748)  <1483>;
                    (__trgt.1131 var=415) const ()  <1539>;
                    () void_br_bool_t13s_s2 (__tmp.1112 __trgt.1131)  <1540>;
                    (__either.1132 var=405) undefined ()  <1541>;
                    if {
                        {
                            () if_expr (__either.1132)  <851>;
                        } #89
                        {
                        } #93 off=19
                        {
                            (__fch_msw.780 var=230) load (__M_DMw.4 __adr_msw.59 msw.114)  <852>;
                            (__tmp.783 var=233) __sint__pl___sint___sint (__fch_msw.780 __ct_1.737)  <855>;
                            (__M_DMw.784 var=5 msw.785 var=20) store (__tmp.783 __adr_msw.59 msw.114)  <856>;
                            (__trgt.1133 var=416) const ()  <1542>;
                            () void_j_t21s_s2 (__trgt.1133)  <1543>;
                        } #91 off=18
                        {
                            (msw.786 var=20) merge (msw.114 msw.785)  <858>;
                        } #94
                    } #88
                    #95 off=20
                    (__fch_tmp.787 var=234) load (__M_DMw.4 __adr_tmp.84 tmp.746)  <859>;
                    (__M_DMw.788 var=5 lsw.789 var=21) store (__fch_tmp.787 __adr_lsw.64 lsw.127)  <860>;
                    call {
                        () chess_separator_scheduler ()  <861>;
                    } #96 off=21
                    #163 off=22
                    (__fch_lsw.790 var=235) load (__M_DMw.4 __adr_lsw.64 lsw.789)  <862>;
                    (__fch_exponent_mask.791 var=236) load (__M_DMw.4 __adr_exponent_mask.79 exponent_mask.619)  <863>;
                    (__tmp.793 var=238) __uint__ad___uint___uint (__fch_lsw.790 __tmp.1004)  <865>;
                    (__M_DMw.794 var=5 lsw.795 var=21) store (__tmp.793 __adr_lsw.64 lsw.789)  <866>;
                    (__tmp.1004 var=237) __uint__er___uint___uint (__fch_exponent_mask.791 __ct_m1.217)  <1199>;
                } #73
                {
                    (msw.803 var=20) merge (msw.588 msw.786)  <875>;
                    (lsw.804 var=21) merge (lsw.589 lsw.795)  <876>;
                    (exponent_mask.807 var=24) merge (exponent_mask.592 exponent_mask.619)  <879>;
                    (tmp.808 var=25) merge (tmp.593 tmp.746)  <880>;
                } #99
            } #58
            #254 off=28
            (__trgt.1138 var=419) const ()  <1551>;
            () void_j_t21s_s2 (__trgt.1138)  <1552>;
        } #56
        {
            (msw.833 var=20) merge (msw.452 msw.803)  <905>;
            (lsw.834 var=21) merge (lsw.453 lsw.804)  <906>;
            (exponent_mask.836 var=23) merge (exponent_mask.455 exponent_mask.22)  <908>;
            (exponent_mask.837 var=24) merge (exponent_mask.23 exponent_mask.807)  <909>;
            (tmp.838 var=25) merge (tmp.24 tmp.808)  <910>;
        } #100
    } #12
    #103 off=48
    (__fch_msw.858 var=239) load (__M_DMw.4 __adr_msw.59 msw.833)  <931>;
    call {
        () chess_separator_scheduler ()  <933>;
    } #104 off=49
    #105 off=50
    (__fch_lsw.861 var=241) load (__M_DMw.4 __adr_lsw.64 lsw.834)  <935>;
    call {
        () chess_separator_scheduler ()  <947>;
    } #112 off=51
    #113 off=52
    (__M_DMw.872 var=5 x_low.873 var=26) store (__fch_lsw.861 __adr_x.54 x_low.93)  <950>;
    (__M_DMw.878 var=5 x_high.879 var=27) store (__fch_msw.858 __adr_x.961 x_high.99)  <955>;
    (__adr_x.961 var=286) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.952)  <1114>;
    call {
        () chess_separator_scheduler ()  <956>;
    } #114 off=53
    #117 off=54 nxt=-2
    (__fch_x_low.881 var=254) load (__M_DMw.4 __adr_x.54 x_low.873)  <958>;
    (__fch_x_high.886 var=257) load (__M_DMw.4 __adr_x.962 x_high.879)  <963>;
    (__rd___sp.888 var=28) rd_res_reg (__R_SP.11 __sp.50)  <965>;
    (__tmp.891 var=260) __Pvoid__pl___Pvoid___sint (__rd___sp.888 __ct_32s0.352)  <968>;
    (__R_SP.892 var=12 __sp.893 var=18) wr_res_reg (__tmp.891 __sp.50)  <969>;
    () void___rts_jr_w32 (__la.29)  <970>;
    (__rt_low.895 var=31 stl=X off=10) assign (__fch_x_low.881)  <972>;
    () out (__rt_low.895)  <973>;
    (__rt_high.897 var=32 stl=X off=11) assign (__fch_x_high.886)  <975>;
    () out (__rt_high.897)  <976>;
    () sink (__sp.893)  <984>;
    () sink (msw.833)  <986>;
    () sink (lsw.834)  <987>;
    () sink (exponent_less_1023.139)  <988>;
    () sink (exponent_mask.836)  <989>;
    () sink (exponent_mask.837)  <990>;
    () sink (tmp.838)  <991>;
    () sink (x_low.873)  <992>;
    () sink (x_high.879)  <993>;
    (__adr_x.962 var=287) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_4t0.952)  <1115>;
} #0
0 : 'src/math.c';
----------
0 : (0,325:0,0);
3 : (0,325:13,0);
4 : (0,325:13,0);
6 : (0,331:5,5);
8 : (0,331:29,6);
9 : (0,334:21,7);
10 : (0,334:21,7);
11 : (0,336:25,7);
12 : (0,336:2,7);
14 : (0,337:4,8);
15 : (0,338:29,8);
16 : (0,338:6,8);
18 : (0,339:8,9);
19 : (0,340:14,10);
20 : (0,340:14,10);
21 : (0,341:33,10);
22 : (0,341:10,10);
25 : (0,343:16,12);
27 : (0,341:10,13);
29 : (0,344:14,17);
31 : (0,347:8,19);
32 : (0,348:58,19);
33 : (0,348:58,19);
34 : (0,349:36,20);
35 : (0,349:41,20);
37 : (0,349:48,21);
38 : (0,349:41,22);
41 : (0,349:10,24);
46 : (0,351:12,25);
47 : (0,349:10,28);
49 : (0,353:14,32);
50 : (0,353:14,32);
52 : (0,354:14,33);
53 : (0,355:14,34);
56 : (0,358:7,39);
58 : (0,358:7,39);
60 : (0,359:4,40);
61 : (0,360:29,40);
62 : (0,360:6,40);
64 : (0,364:8,41);
68 : (0,364:8,45);
72 : (0,360:6,48);
73 : (0,367:4,52);
74 : (0,368:43,52);
75 : (0,368:43,52);
76 : (0,371:32,54);
77 : (0,371:6,54);
82 : (0,373:8,55);
83 : (0,371:6,58);
85 : (0,375:10,62);
86 : (0,375:10,62);
87 : (0,376:14,62);
88 : (0,376:6,62);
91 : (0,377:12,64);
93 : (0,376:6,65);
95 : (0,378:10,69);
96 : (0,378:10,69);
103 : (0,382:29,77);
104 : (0,382:29,77);
105 : (0,382:30,78);
112 : (0,382:15,82);
113 : (0,382:3,85);
114 : (0,382:3,85);
117 : (0,384:2,85);
150 : (0,354:10,32);
157 : (0,358:30,39);
163 : (0,380:6,69);
198 : (0,331:1,4);
210 : (0,331:31,5);
229 : (0,362:17,41);
230 : (0,362:17,41);
----------
56 : (0,325:7,0);
57 : (0,325:7,0);
59 : (0,325:7,0);
60 : (0,325:7,0);
62 : (0,325:20,0);
63 : (0,325:20,0);
65 : (0,325:20,0);
67 : (0,328:10,0);
68 : (0,328:10,0);
70 : (0,328:10,0);
72 : (0,329:12,0);
73 : (0,329:12,0);
75 : (0,329:12,0);
77 : (0,328:15,0);
78 : (0,328:15,0);
80 : (0,328:15,0);
82 : (0,348:20,0);
83 : (0,348:20,0);
85 : (0,348:20,0);
87 : (0,368:16,0);
88 : (0,368:16,0);
90 : (0,368:16,0);
92 : (0,369:16,0);
93 : (0,369:16,0);
95 : (0,369:16,0);
103 : (0,325:13,0);
108 : (0,325:13,0);
109 : (0,325:13,0);
116 : (0,331:22,4);
123 : (0,331:1,4);
124 : (0,331:5,5);
126 : (0,331:52,5);
136 : (0,331:31,5);
137 : (0,331:29,6);
138 : (0,334:25,6);
139 : (0,334:31,0);
141 : (0,334:29,6);
142 : (0,334:46,0);
144 : (0,334:43,6);
147 : (0,334:50,6);
148 : (0,334:2,6);
149 : (0,334:21,7);
150 : (0,336:6,7);
153 : (0,336:25,7);
184 : (0,336:2,7);
185 : (0,338:10,8);
186 : (0,338:31,0);
188 : (0,338:29,8);
219 : (0,338:6,8);
220 : (0,340:10,9);
222 : (0,340:14,0);
224 : (0,340:14,9);
226 : (0,340:10,9);
227 : (0,340:14,10);
228 : (0,341:14,10);
229 : (0,341:36,0);
262 : (0,341:10,10);
263 : (0,343:12,11);
265 : (0,343:16,0);
267 : (0,343:16,11);
269 : (0,343:12,11);
271 : (0,341:10,15);
274 : (0,344:10,16);
276 : (0,348:36,0);
278 : (0,348:61,19);
279 : (0,348:58,19);
280 : (0,348:58,19);
281 : (0,348:58,19);
282 : (0,349:15,20);
284 : (0,349:21,20);
285 : (0,349:19,20);
319 : (0,349:41,20);
320 : (0,349:44,21);
323 : (0,349:48,21);
326 : (0,349:41,23);
357 : (0,349:10,24);
359 : (0,351:19,25);
364 : (0,351:19,25);
366 : (0,351:12,0);
367 : (0,351:12,0);
369 : (0,351:12,0);
370 : (0,351:12,25);
371 : (0,351:12,25);
373 : (0,351:19,0);
376 : (0,351:19,0);
455 : (0,353:10,31);
457 : (0,353:17,0);
459 : (0,353:42,31);
460 : (0,353:39,31);
461 : (0,353:14,31);
463 : (0,353:10,31);
464 : (0,353:14,32);
465 : (0,354:10,32);
467 : (0,354:18,32);
469 : (0,354:14,32);
471 : (0,354:10,32);
472 : (0,354:14,33);
475 : (0,355:10,33);
484 : (0,338:6,36);
485 : (0,338:6,36);
487 : (0,338:6,36);
507 : (0,358:11,39);
508 : (0,358:32,0);
541 : (0,358:7,39);
542 : (0,360:10,40);
543 : (0,360:32,0);
545 : (0,360:29,40);
576 : (0,360:6,40);
578 : (0,362:15,41);
583 : (0,362:15,41);
586 : (0,362:19,41);
591 : (0,362:19,41);
596 : (0,364:15,44);
601 : (0,364:15,44);
605 : (0,360:6,0);
608 : (0,360:6,0);
609 : (0,360:6,48);
610 : (0,360:6,48);
612 : (0,360:6,0);
615 : (0,360:6,0);
666 : (0,368:47,52);
669 : (0,368:66,52);
670 : (0,368:43,52);
671 : (0,368:43,52);
672 : (0,368:43,52);
673 : (0,371:11,54);
674 : (0,371:17,54);
675 : (0,371:15,54);
678 : (0,371:32,54);
709 : (0,371:6,54);
711 : (0,373:15,55);
716 : (0,373:15,55);
718 : (0,373:8,0);
721 : (0,373:8,0);
722 : (0,373:8,55);
723 : (0,373:8,55);
725 : (0,373:15,0);
728 : (0,373:15,0);
807 : (0,375:12,61);
808 : (0,375:19,0);
812 : (0,375:41,61);
813 : (0,375:39,61);
814 : (0,375:32,61);
815 : (0,375:16,61);
816 : (0,375:6,61);
817 : (0,375:10,62);
818 : (0,376:10,62);
819 : (0,376:16,62);
851 : (0,376:6,62);
852 : (0,377:8,63);
855 : (0,377:12,63);
856 : (0,377:8,63);
858 : (0,376:6,67);
859 : (0,378:12,68);
860 : (0,378:6,68);
861 : (0,378:10,69);
862 : (0,380:6,69);
863 : (0,380:14,69);
865 : (0,380:10,69);
866 : (0,380:6,69);
875 : (0,358:7,72);
876 : (0,358:7,72);
879 : (0,358:7,72);
880 : (0,358:7,72);
905 : (0,336:2,74);
906 : (0,336:2,74);
908 : (0,336:2,74);
909 : (0,336:2,74);
910 : (0,336:2,74);
931 : (0,382:26,77);
933 : (0,382:29,77);
935 : (0,382:30,78);
947 : (0,382:15,82);
950 : (0,382:1,84);
955 : (0,382:1,84);
956 : (0,382:3,85);
958 : (0,384:9,85);
963 : (0,384:9,85);
965 : (0,384:2,0);
968 : (0,384:2,0);
969 : (0,384:2,85);
970 : (0,384:2,85);
972 : (0,384:9,0);
975 : (0,384:9,0);
1090 : (0,334:50,0);
1092 : (0,368:66,0);
1104 : (0,325:20,0);
1185 : (0,354:17,32);
1192 : (0,358:30,39);
1199 : (0,380:13,69);
1345 : (0,362:17,0);
1346 : (0,362:17,41);
1347 : (0,362:17,41);
1348 : (0,362:17,41);
1349 : (0,362:17,41);
1350 : (0,362:17,41);
1351 : (0,362:17,41);
1352 : (0,362:17,41);
1354 : (0,362:17,41);
1356 : (0,362:17,41);
1481 : (0,341:33,10);
1482 : (0,349:36,20);
1483 : (0,376:14,62);
1513 : (0,341:10,10);
1518 : (0,349:41,20);
1522 : (0,349:10,24);
1526 : (0,338:6,8);
1531 : (0,360:6,40);
1536 : (0,371:6,54);
1540 : (0,376:6,62);
1545 : (0,358:7,39);
1549 : (0,336:2,7);

