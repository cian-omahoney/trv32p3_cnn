
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:30:49 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/malloc.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  void *calloc(size_t, size_t)
Fcalloc : user_defined, called {
    fnm : "calloc" 'void *calloc(size_t, size_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=12 );
}
****
!!  void *malloc(size_t)
Fmalloc : user_defined, called {
    fnm : "malloc" 'void *malloc(size_t)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    llv : 0 0 0 0 0 ;
}
!!  void *memset(void *, int, size_t)
Fmemset : user_defined, called {
    fnm : "memset" 'void *memset(void *, int, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
}
***/

[
    0 : calloc typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   13 : __vola typ=u08 bnd=b stl=PMb
   16 : __extPMb typ=u08 bnd=b stl=PMb
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : size typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   20 : nmemb typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   21 : p typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__Pvoid_DMb
   22 : __extPMb_void typ=u08 bnd=b stl=PMb
   23 : __extDMb_void typ=w08 bnd=b stl=DMb
   24 : __rd___sp typ=w32 bnd=m
   25 : __la typ=w32 bnd=p tref=w32__
   26 : __rt typ=w32 bnd=p tref=__Pvoid__
   27 : __arg_nmemb typ=w32 bnd=p tref=size_t__
   28 : __arg_size typ=w32 bnd=p tref=size_t__
   29 : __ct_m12S0 typ=w32 val=-12S0 bnd=m
   31 : __tmp typ=w32 bnd=m
   33 : __ct_0t0 typ=w32 val=0t0 bnd=m
   35 : __adr_size typ=w32 bnd=m adro=19
   37 : __ct_4t0 typ=w32 val=4t0 bnd=m
   39 : __adr_nmemb typ=w32 bnd=m adro=20
   41 : __ct_8t0 typ=w32 val=8t0 bnd=m
   43 : __adr_p typ=w32 bnd=m adro=21
   44 : __fch_nmemb typ=w32 bnd=m
   45 : __fch_size typ=w32 bnd=m
   46 : __tmp typ=w32 bnd=m
   49 : malloc typ=t21s_s2 val=0r bnd=m
   50 : __link typ=w32 bnd=m
   51 : __tmp typ=w32 bnd=m
   52 : __fch_p typ=w32 bnd=m
   53 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   56 : __tmp typ=bool bnd=m
   57 : __fch_p typ=w32 bnd=m
   59 : __ct typ=w32 bnd=m
   60 : __fch_nmemb typ=w32 bnd=m
   61 : __fch_size typ=w32 bnd=m
   62 : __tmp typ=w32 bnd=m
   65 : memset typ=t21s_s2 val=0r bnd=m
   66 : __link typ=w32 bnd=m
   67 : __tmp typ=w32 bnd=m
   69 : __ct_12s0 typ=w32 val=12s0 bnd=m
   71 : __tmp typ=w32 bnd=m
   84 : __either typ=bool bnd=m
   85 : __trgt typ=t13s_s2 val=0j bnd=m
   86 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fcalloc {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__vola.12 var=13) source ()  <23>;
    (__extPMb.15 var=16) source ()  <26>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (size.18 var=19) source ()  <29>;
    (nmemb.19 var=20) source ()  <30>;
    (p.20 var=21) source ()  <31>;
    (__extPMb_void.21 var=22) source ()  <32>;
    (__extDMb_void.22 var=23) source ()  <33>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (__arg_nmemb.28 var=27 stl=X off=11) inp ()  <39>;
    (__arg_nmemb.29 var=27) deassign (__arg_nmemb.28)  <40>;
    (__arg_size.31 var=28 stl=X off=12) inp ()  <42>;
    (__arg_size.32 var=28) deassign (__arg_size.31)  <43>;
    (__rd___sp.34 var=24) rd_res_reg (__R_SP.11 __sp.17)  <45>;
    (__ct_m12S0.35 var=29) const ()  <46>;
    (__tmp.37 var=31) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_m12S0.35)  <48>;
    (__R_SP.38 var=12 __sp.39 var=18) wr_res_reg (__tmp.37 __sp.17)  <49>;
    (__rd___sp.40 var=24) rd_res_reg (__R_SP.11 __sp.39)  <51>;
    (__ct_0t0.41 var=33) const ()  <52>;
    (__adr_size.43 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_0t0.41)  <54>;
    (__rd___sp.45 var=24) rd_res_reg (__R_SP.11 __sp.39)  <56>;
    (__rd___sp.50 var=24) rd_res_reg (__R_SP.11 __sp.39)  <61>;
    (__M_DMw.55 var=5 size.56 var=19) store (__arg_size.32 __adr_size.43 size.18)  <66>;
    call {
        () chess_separator_scheduler ()  <67>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.46 var=37) const ()  <57>;
    (__adr_nmemb.48 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_4t0.46)  <59>;
    (__M_DMw.57 var=5 nmemb.58 var=20) store (__arg_nmemb.29 __adr_nmemb.48 nmemb.19)  <68>;
    call {
        () chess_separator_scheduler ()  <69>;
    } #6 off=3
    #7 off=4
    (__fch_nmemb.59 var=44) load (__M_DMw.4 __adr_nmemb.48 nmemb.58)  <70>;
    (__fch_size.60 var=45) load (__M_DMw.4 __adr_size.43 size.56)  <71>;
    (__tmp.61 var=46) __uint__ml___uint___uint (__fch_nmemb.59 __fch_size.60)  <72>;
    (malloc.65 var=49) const ()  <76>;
    (__link.66 var=50) w32_jal_t21s_s2 (malloc.65)  <77>;
    call {
        (__tmp.62 var=46 stl=X off=11) assign (__tmp.61)  <73>;
        (__link.67 var=50 stl=X off=1) assign (__link.66)  <78>;
        (__tmp.68 var=51 stl=X off=10 __extDMb.71 var=17 __extDMb_void.72 var=23 __extPMb.73 var=16 __extPMb_void.74 var=22 __vola.75 var=13) Fmalloc (__link.67 __tmp.62 __extDMb.16 __extDMb_void.22 __extPMb.15 __extPMb_void.21 __vola.12)  <79>;
        (__tmp.69 var=51) deassign (__tmp.68)  <80>;
    } #8 off=5
    #9 off=6
    (__ct_8t0.51 var=41) const ()  <62>;
    (__adr_p.53 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_8t0.51)  <64>;
    (__M_DMw.76 var=5 p.77 var=21) store (__tmp.69 __adr_p.53 p.20)  <82>;
    call {
        () chess_separator_scheduler ()  <83>;
    } #10 off=7
    #11 off=8
    (__fch_p.78 var=52) load (__M_DMw.4 __adr_p.53 p.77)  <84>;
    (__ct_0.79 var=53) const ()  <85>;
    (__tmp.162 var=56) bool__eq___Pvoid___Pvoid (__fch_p.78 __ct_0.79)  <221>;
    (__trgt.165 var=85) const ()  <234>;
    () void_br_bool_t13s_s2 (__tmp.162 __trgt.165)  <235>;
    (__either.166 var=84) undefined ()  <236>;
    if {
        {
            () if_expr (__either.166)  <107>;
        } #13
        {
        } #18 off=12
        {
            #15 off=9
            (__fch_p.101 var=57) load (__M_DMw.4 __adr_p.53 p.77)  <108>;
            (__fch_nmemb.106 var=60) load (__M_DMw.4 __adr_nmemb.48 nmemb.58)  <113>;
            (__fch_size.107 var=61) load (__M_DMw.4 __adr_size.43 size.56)  <114>;
            (__tmp.108 var=62) __uint__ml___uint___uint (__fch_nmemb.106 __fch_size.107)  <115>;
            (memset.112 var=65) const ()  <119>;
            (__link.113 var=66) w32_jal_t21s_s2 (memset.112)  <120>;
            call {
                (__fch_p.102 var=57 stl=X off=11) assign (__fch_p.101)  <109>;
                (__ct.105 var=59 stl=X off=12) assign (__ct_0.79)  <112>;
                (__tmp.109 var=62 stl=X off=13) assign (__tmp.108)  <116>;
                (__link.114 var=66 stl=X off=1) assign (__link.113)  <121>;
                (__tmp.115 var=67 stl=X off=10 __extDMb.118 var=17 __extDMb_void.119 var=23 __extPMb.120 var=16 __extPMb_void.121 var=22 __vola.122 var=13) Fmemset (__link.114 __fch_p.102 __ct.105 __tmp.109 __extDMb.71 __extDMb_void.72 __extPMb.73 __extPMb_void.74 __vola.75)  <122>;
            } #16 off=10
            #23 off=11
            (__trgt.167 var=86) const ()  <237>;
            () void_j_t21s_s2 (__trgt.167)  <238>;
        } #14
        {
            (__vola.123 var=13) merge (__vola.75 __vola.122)  <126>;
            (__extPMb.124 var=16) merge (__extPMb.73 __extPMb.120)  <127>;
            (__extDMb.125 var=17) merge (__extDMb.71 __extDMb.118)  <128>;
            (__extPMb_void.126 var=22) merge (__extPMb_void.74 __extPMb_void.121)  <129>;
            (__extDMb_void.127 var=23) merge (__extDMb_void.72 __extDMb_void.119)  <130>;
        } #19
    } #12
    #22 off=13 nxt=-2
    (__rt.128 var=26) load (__M_DMw.4 __adr_p.53 p.77)  <131>;
    (__rd___sp.129 var=24) rd_res_reg (__R_SP.11 __sp.39)  <132>;
    (__ct_12s0.130 var=69) const ()  <133>;
    (__tmp.132 var=71) __Pvoid__pl___Pvoid___sint (__rd___sp.129 __ct_12s0.130)  <135>;
    (__R_SP.133 var=12 __sp.134 var=18) wr_res_reg (__tmp.132 __sp.39)  <136>;
    () void___rts_jr_w32 (__la.25)  <137>;
    (__rt.135 var=26 stl=X off=10) assign (__rt.128)  <138>;
    () out (__rt.135)  <139>;
    () sink (__vola.123)  <140>;
    () sink (__extPMb.124)  <143>;
    () sink (__extDMb.125)  <144>;
    () sink (__sp.134)  <145>;
    () sink (size.56)  <146>;
    () sink (nmemb.58)  <147>;
    () sink (p.77)  <148>;
    () sink (__extPMb_void.126)  <149>;
    () sink (__extDMb_void.127)  <150>;
} #0
0 : 'src/malloc.c';
----------
0 : (0,195:0,0);
3 : (0,195:27,0);
4 : (0,195:27,0);
5 : (0,195:13,0);
6 : (0,195:13,0);
7 : (0,198:21,4);
8 : (0,198:8,4);
9 : (0,198:6,5);
10 : (0,198:6,5);
11 : (0,199:4,5);
12 : (0,199:4,5);
14 : (0,200:14,6);
15 : (0,200:24,6);
16 : (0,200:8,6);
18 : (0,199:4,8);
22 : (0,201:4,11);
----------
45 : (0,195:6,0);
46 : (0,195:6,0);
48 : (0,195:6,0);
49 : (0,195:6,0);
51 : (0,195:34,0);
52 : (0,195:34,0);
54 : (0,195:34,0);
56 : (0,195:20,0);
57 : (0,195:20,0);
59 : (0,195:20,0);
61 : (0,197:10,0);
62 : (0,197:10,0);
64 : (0,197:10,0);
66 : (0,195:27,0);
67 : (0,195:27,0);
68 : (0,195:13,0);
69 : (0,195:13,0);
70 : (0,198:15,4);
71 : (0,198:23,4);
72 : (0,198:21,4);
73 : (0,198:21,0);
77 : (0,198:8,4);
78 : (0,198:8,0);
79 : (0,198:8,4);
82 : (0,198:4,4);
83 : (0,198:6,5);
84 : (0,199:8,5);
85 : (0,199:4,0);
107 : (0,199:4,5);
108 : (0,200:15,6);
109 : (0,200:15,0);
112 : (0,200:17,0);
113 : (0,200:19,6);
114 : (0,200:25,6);
115 : (0,200:24,6);
116 : (0,200:24,0);
120 : (0,200:8,6);
121 : (0,200:8,0);
122 : (0,200:8,6);
126 : (0,199:4,10);
127 : (0,199:4,10);
128 : (0,199:4,10);
129 : (0,199:4,10);
130 : (0,199:4,10);
131 : (0,201:11,11);
132 : (0,201:4,0);
133 : (0,201:4,0);
135 : (0,201:4,0);
136 : (0,201:4,11);
137 : (0,201:4,11);
138 : (0,201:11,0);
221 : (0,199:4,5);
235 : (0,199:4,5);

