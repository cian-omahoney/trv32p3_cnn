
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:33:53 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/malloc.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  void *realloc(void *, size_t)
Frealloc : user_defined, called {
    fnm : "realloc" 'void *realloc(void *, size_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=16 );
}
****
!!  void free(void *)
Ffree : user_defined, called {
    fnm : "free" 'void free(void *)';
    arg : ( w32:i w32:i );
    loc : ( X[1] X[10] );
    llv : 0 0 0 0 0 ;
}
!!  void *malloc(size_t)
Fmalloc : user_defined, called {
    fnm : "malloc" 'void *malloc(size_t)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    llv : 0 0 0 0 0 ;
}
!!  void *memcpy(void * restrict, const void * restrict, size_t)
Fmemcpy : user_defined, called {
    fnm : "memcpy" 'void *memcpy(void * restrict, const void * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
}
***/

[
    0 : realloc typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   13 : __vola typ=u08 bnd=b stl=PMb
   16 : __extPMb typ=u08 bnd=b stl=PMb
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : size typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   20 : ptr typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__Pvoid_DMb
   21 : p typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb lscp=20 tref=__Pvoid_DMb
   22 : old_size typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb lscp=28 tref=size_t_DMb
   23 : __extPMb_void typ=u08 bnd=b stl=PMb
   24 : __extDMb_void typ=w08 bnd=b stl=DMb
   25 : __extDMb_MBlock_ typ=w08 bnd=b stl=DMb
   26 : __extDMb_head typ=w08 bnd=b stl=DMb
   27 : __extDMb_w32 typ=w08 bnd=b stl=DMb
   28 : __extDMb_MBlock__head typ=w08 bnd=b stl=DMb
   29 : __rd___sp typ=w32 bnd=m
   30 : __la typ=w32 bnd=p tref=w32__
   31 : __rt typ=w32 bnd=p tref=__Pvoid__
   32 : __arg_ptr typ=w32 bnd=p tref=__Pvoid__
   33 : __arg_size typ=w32 bnd=p tref=size_t__
   34 : __ct_m16S0 typ=w32 val=-16S0 bnd=m
   36 : __tmp typ=w32 bnd=m
   38 : __ct_0t0 typ=w32 val=0t0 bnd=m
   40 : __adr_size typ=w32 bnd=m adro=19
   42 : __ct_4t0 typ=w32 val=4t0 bnd=m
   44 : __adr_ptr typ=w32 bnd=m adro=20
   46 : __ct_8t0 typ=w32 val=8t0 bnd=m
   48 : __adr_p typ=w32 bnd=m adro=21
   50 : __ct_12t0 typ=w32 val=12t0 bnd=m
   52 : __adr_old_size typ=w32 bnd=m adro=22
   53 : __tmpb0_Frealloc typ=w32 bnd=m lscp=28 tref=word_type__
   56 : __inl_block typ=w32 bnd=m lscp=28 tref=__PMBlock___
   57 : __tmpb0___ulong_block_size___Pvoid typ=w32 bnd=m lscp=28 tref=word_type__
   60 : __fch_ptr typ=w32 bnd=m
   61 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   64 : __tmp typ=bool bnd=m
   65 : __fch_size typ=w32 bnd=m
   68 : __tmp typ=bool bnd=m
   69 : __fch_ptr typ=w32 bnd=m
   72 : free typ=t21s_s2 val=0r bnd=m
   73 : __link typ=w32 bnd=m
   77 : __fch_size typ=w32 bnd=m
   80 : malloc typ=t21s_s2 val=0r bnd=m
   81 : __link typ=w32 bnd=m
   82 : __tmp typ=w32 bnd=m
   83 : __fch_p typ=w32 bnd=m
   87 : __tmp typ=bool bnd=m
   88 : __fch_ptr typ=w32 bnd=m
   92 : __ct_4 typ=w32 val=4f bnd=m
  101 : __fchtmp typ=w32 bnd=m
  102 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
  107 : __tmp typ=w32 bnd=m
  111 : __fch_p typ=w32 bnd=m
  112 : __fch_ptr typ=w32 bnd=m
  113 : __fch_old_size typ=w32 bnd=m
  114 : __fch_size typ=w32 bnd=m
  115 : __tmp typ=bool bnd=m
  116 : __fch_old_size typ=w32 bnd=m
  117 : __fch_size typ=w32 bnd=m
  118 : __tmp typ=w32 bnd=m
  121 : memcpy typ=t21s_s2 val=0r bnd=m
  122 : __link typ=w32 bnd=m
  123 : __tmp typ=w32 bnd=m
  124 : __fch_ptr typ=w32 bnd=m
  128 : __link typ=w32 bnd=m
  130 : __fch_size typ=w32 bnd=m
  134 : __link typ=w32 bnd=m
  135 : __tmp typ=w32 bnd=m
  136 : __ct_16s0 typ=w32 val=16s0 bnd=m
  138 : __tmp typ=w32 bnd=m
  143 : __ct_4294967292 typ=w32 val=-4f bnd=m
  154 : __either typ=bool bnd=m
  155 : __trgt typ=t13s_s2 val=0j bnd=m
  156 : __trgt typ=t21s_s2 val=0j bnd=m
  157 : __trgt typ=t13s_s2 val=0j bnd=m
  158 : __trgt typ=t21s_s2 val=0j bnd=m
  159 : __trgt typ=t13s_s2 val=0j bnd=m
  160 : __trgt typ=t21s_s2 val=0j bnd=m
  161 : __trgt typ=t13s_s2 val=0j bnd=m
  162 : __trgt typ=t21s_s2 val=0j bnd=m
]
Frealloc {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__vola.12 var=13) source ()  <23>;
    (__extPMb.15 var=16) source ()  <26>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (size.18 var=19) source ()  <29>;
    (ptr.19 var=20) source ()  <30>;
    (p.20 var=21) source ()  <31>;
    (old_size.21 var=22) source ()  <32>;
    (__extPMb_void.22 var=23) source ()  <33>;
    (__extDMb_void.23 var=24) source ()  <34>;
    (__extDMb_MBlock_.24 var=25) source ()  <35>;
    (__extDMb_head.25 var=26) source ()  <36>;
    (__extDMb_w32.26 var=27) source ()  <37>;
    (__extDMb_MBlock__head.27 var=28) source ()  <38>;
    (__la.29 var=30 stl=X off=1) inp ()  <40>;
    (__la.30 var=30) deassign (__la.29)  <41>;
    (__arg_ptr.33 var=32 stl=X off=11) inp ()  <44>;
    (__arg_ptr.34 var=32) deassign (__arg_ptr.33)  <45>;
    (__arg_size.36 var=33 stl=X off=12) inp ()  <47>;
    (__arg_size.37 var=33) deassign (__arg_size.36)  <48>;
    (__rd___sp.39 var=29) rd_res_reg (__R_SP.11 __sp.17)  <50>;
    (__ct_m16S0.40 var=34) const ()  <51>;
    (__tmp.42 var=36) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_m16S0.40)  <53>;
    (__R_SP.43 var=12 __sp.44 var=18) wr_res_reg (__tmp.42 __sp.17)  <54>;
    (__rd___sp.45 var=29) rd_res_reg (__R_SP.11 __sp.44)  <56>;
    (__ct_0t0.46 var=38) const ()  <57>;
    (__adr_size.48 var=40) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_0t0.46)  <59>;
    (__rd___sp.50 var=29) rd_res_reg (__R_SP.11 __sp.44)  <61>;
    (__rd___sp.55 var=29) rd_res_reg (__R_SP.11 __sp.44)  <66>;
    (__rd___sp.60 var=29) rd_res_reg (__R_SP.11 __sp.44)  <71>;
    (__M_DMw.72 var=5 size.73 var=19) store (__arg_size.37 __adr_size.48 size.18)  <83>;
    call {
        () chess_separator_scheduler ()  <84>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.51 var=42) const ()  <62>;
    (__adr_ptr.53 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_4t0.51)  <64>;
    (__M_DMw.74 var=5 ptr.75 var=20) store (__arg_ptr.34 __adr_ptr.53 ptr.19)  <85>;
    call {
        () chess_separator_scheduler ()  <86>;
    } #6 off=3
    #7 off=4
    (__fch_ptr.76 var=60) load (__M_DMw.4 __adr_ptr.53 ptr.75)  <87>;
    (__ct_0.77 var=61) const ()  <88>;
    (__tmp.80 var=64) bool__ne___Pvoid___Pvoid (__fch_ptr.76 __ct_0.77)  <91>;
    (malloc.170 var=80) const ()  <177>;
    (__trgt.466 var=161) const ()  <565>;
    () void_br_bool_t13s_s2 (__tmp.80 __trgt.466)  <566>;
    (__either.467 var=154) undefined ()  <567>;
    if {
        {
            () if_expr (__either.467)  <123>;
        } #9
        {
            #11 off=8
            (__fch_size.112 var=65) load (__M_DMw.4 __adr_size.48 size.73)  <124>;
            (__tmp.115 var=68) bool__eq___uint___uint (__fch_size.112 __ct_0.77)  <127>;
            (free.151 var=72) const ()  <164>;
            (__trgt.463 var=159) const ()  <560>;
            () void_br_bool_t13s_s2 (__tmp.115 __trgt.463)  <561>;
            (__either.464 var=154) undefined ()  <562>;
            if {
                {
                    () if_expr (__either.464)  <159>;
                } #13
                {
                    #15 off=32
                    (__fch_ptr.147 var=69) load (__M_DMw.4 __adr_ptr.53 ptr.75)  <160>;
                    (__link.152 var=73) w32_jal_t21s_s2 (free.151)  <165>;
                    call {
                        (__fch_ptr.148 var=69 stl=X off=10) assign (__fch_ptr.147)  <161>;
                        (__link.153 var=73 stl=X off=1) assign (__link.152)  <166>;
                        (__extDMb.154 var=17 __extDMb_MBlock_.155 var=25 __extDMb_MBlock__head.156 var=28 __extDMb_head.157 var=26 __extDMb_void.158 var=24 __extDMb_w32.159 var=27 __extPMb.160 var=16 __extPMb_void.161 var=23 __vola.162 var=13) Ffree (__link.153 __fch_ptr.148 __extDMb.16 __extDMb_MBlock_.24 __extDMb_MBlock__head.27 __extDMb_head.25 __extDMb_void.23 __extDMb_w32.26 __extPMb.15 __extPMb_void.22 __vola.12)  <167>;
                    } #16 off=33
                } #14
                {
                    #21 off=9
                    (__fch_size.166 var=77) load (__M_DMw.4 __adr_size.48 size.73)  <173>;
                    (__link.171 var=81) w32_jal_t21s_s2 (malloc.170)  <178>;
                    call {
                        (__fch_size.167 var=77 stl=X off=11) assign (__fch_size.166)  <174>;
                        (__link.172 var=81 stl=X off=1) assign (__link.171)  <179>;
                        (__tmp.173 var=82 stl=X off=10 __extDMb.176 var=17 __extDMb_MBlock_.177 var=25 __extDMb_MBlock__head.178 var=28 __extDMb_head.179 var=26 __extDMb_void.180 var=24 __extDMb_w32.181 var=27 __extPMb.182 var=16 __extPMb_void.183 var=23 __vola.184 var=13) Fmalloc (__link.172 __fch_size.167 __extDMb.16 __extDMb_MBlock_.24 __extDMb_MBlock__head.27 __extDMb_head.25 __extDMb_void.23 __extDMb_w32.26 __extPMb.15 __extPMb_void.22 __vola.12)  <180>;
                        (__tmp.174 var=82) deassign (__tmp.173)  <181>;
                    } #22 off=10
                    #23 off=11
                    (__ct_8t0.56 var=46) const ()  <67>;
                    (__adr_p.58 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.55 __ct_8t0.56)  <69>;
                    (__M_DMw.185 var=5 p.186 var=21) store (__tmp.174 __adr_p.58 p.20)  <183>;
                    call {
                        () chess_separator_scheduler ()  <184>;
                    } #24 off=12
                    #25 off=13
                    (__fch_p.187 var=83) load (__M_DMw.4 __adr_p.58 p.186)  <185>;
                    (__tmp.454 var=87) bool__eq___Pvoid___Pvoid (__fch_p.187 __ct_0.77)  <532>;
                    (__trgt.460 var=157) const ()  <555>;
                    () void_br_bool_t13s_s2 (__tmp.454 __trgt.460)  <556>;
                    (__either.461 var=154) undefined ()  <557>;
                    if {
                        {
                            () if_expr (__either.461)  <221>;
                        } #27
                        {
                        } #61 off=30
                        {
                            #31 off=14
                            (__fch_ptr.225 var=88) load (__M_DMw.4 __adr_ptr.53 ptr.75)  <225>;
                            call {
                                () chess_separator_scheduler ()  <245>;
                            } #42 off=15
                            #43 off=16
                            (__inl_block.236 var=56) __Pvoid__pl___Pvoid___sint (__fch_ptr.225 __ct_4294967292.447)  <238>;
                            (__fchtmp.243 var=101) load (__M_DMw.4 __inl_block.236 __extDMb_MBlock__head.178 __extDMb_head.179 __extDMb_void.180 __extDMb_w32.181 __extPMb_void.183)  <249>;
                            (__ct_2147483647.244 var=102) const ()  <250>;
                            (__tmpb0___ulong_block_size___Pvoid.246 var=57) __uint__ad___uint___uint (__fchtmp.243 __ct_2147483647.244)  <252>;
                            (__ct_4294967292.447 var=143) const ()  <488>;
                            call {
                                () chess_separator_scheduler ()  <253>;
                            } #44 off=17
                            #45 off=18
                            (__ct_4.231 var=92) const ()  <233>;
                            (__tmp.249 var=107) __uint__ls___uint___sint (__tmpb0___ulong_block_size___Pvoid.246 __ct_4.231)  <256>;
                            (__tmpb0_Frealloc.252 var=53) __uint__pl___uint___uint (__tmp.249 __ct_4294967292.447)  <259>;
                            call {
                                () chess_separator_scheduler ()  <260>;
                            } #46 off=19
                            #47 off=20
                            (__ct_12t0.61 var=50) const ()  <72>;
                            (__adr_old_size.63 var=52) __Pvoid__pl___Pvoid___sint (__rd___sp.60 __ct_12t0.61)  <74>;
                            (__M_DMw.253 var=5 old_size.254 var=22) store (__tmpb0_Frealloc.252 __adr_old_size.63 old_size.21)  <261>;
                            call {
                                () chess_separator_scheduler ()  <262>;
                            } #48 off=21
                            #49 off=22
                            (__fch_p.255 var=111) load (__M_DMw.4 __adr_p.58 p.186)  <263>;
                            (__fch_ptr.257 var=112) load (__M_DMw.4 __adr_ptr.53 ptr.75)  <265>;
                            (__fch_old_size.259 var=113) load (__M_DMw.4 __adr_old_size.63 old_size.254)  <267>;
                            (__fch_size.260 var=114) load (__M_DMw.4 __adr_size.48 size.73)  <268>;
                            (__tmp.261 var=115) bool__lt___uint___uint (__fch_old_size.259 __fch_size.260)  <269>;
                            (__trgt.457 var=155) const ()  <550>;
                            () void_br_bool_t13s_s2 (__tmp.261 __trgt.457)  <551>;
                            (__either.458 var=154) undefined ()  <552>;
                            if {
                                {
                                    () if_expr (__either.458)  <301>;
                                } #51
                                {
                                    (__fch_old_size.293 var=116) load (__M_DMw.4 __adr_old_size.63 old_size.254)  <302>;
                                } #52 off=24
                                {
                                    (__fch_size.294 var=117) load (__M_DMw.4 __adr_size.48 size.73)  <303>;
                                    (__trgt.459 var=156) const ()  <553>;
                                    () void_j_t21s_s2 (__trgt.459)  <554>;
                                } #53 off=23
                                {
                                    (__tmp.295 var=118) merge (__fch_old_size.293 __fch_size.294)  <304>;
                                } #54
                            } #50
                            #55 off=25
                            (memcpy.299 var=121) const ()  <308>;
                            (__link.300 var=122) w32_jal_t21s_s2 (memcpy.299)  <309>;
                            call {
                                (__fch_p.256 var=111 stl=X off=11) assign (__fch_p.255)  <264>;
                                (__fch_ptr.258 var=112 stl=X off=12) assign (__fch_ptr.257)  <266>;
                                (__tmp.296 var=118 stl=X off=13) assign (__tmp.295)  <305>;
                                (__link.301 var=122 stl=X off=1) assign (__link.300)  <310>;
                                (__tmp.302 var=123 stl=X off=10 __extDMb.305 var=17 __extDMb_MBlock_.306 var=25 __extDMb_MBlock__head.307 var=28 __extDMb_head.308 var=26 __extDMb_void.309 var=24 __extDMb_w32.310 var=27 __extPMb.311 var=16 __extPMb_void.312 var=23 __vola.313 var=13) Fmemcpy (__link.301 __fch_p.256 __fch_ptr.258 __tmp.296 __extDMb.176 __extDMb_MBlock_.177 __extDMb_MBlock__head.178 __extDMb_head.179 __extDMb_void.180 __extDMb_w32.181 __extPMb.182 __extPMb_void.183 __vola.184)  <311>;
                            } #56 off=26
                            #58 off=27
                            (__fch_ptr.314 var=124) load (__M_DMw.4 __adr_ptr.53 ptr.75)  <315>;
                            (__link.319 var=128) w32_jal_t21s_s2 (free.151)  <320>;
                            call {
                                (__fch_ptr.315 var=124 stl=X off=10) assign (__fch_ptr.314)  <316>;
                                (__link.320 var=128 stl=X off=1) assign (__link.319)  <321>;
                                (__extDMb.321 var=17 __extDMb_MBlock_.322 var=25 __extDMb_MBlock__head.323 var=28 __extDMb_head.324 var=26 __extDMb_void.325 var=24 __extDMb_w32.326 var=27 __extPMb.327 var=16 __extPMb_void.328 var=23 __vola.329 var=13) Ffree (__link.320 __fch_ptr.315 __extDMb.305 __extDMb_MBlock_.306 __extDMb_MBlock__head.307 __extDMb_head.308 __extDMb_void.309 __extDMb_w32.310 __extPMb.311 __extPMb_void.312 __vola.313)  <322>;
                            } #59 off=28
                            #77 off=29
                            (__trgt.462 var=158) const ()  <558>;
                            () void_j_t21s_s2 (__trgt.462)  <559>;
                        } #28
                        {
                            (__vola.330 var=13) merge (__vola.184 __vola.329)  <324>;
                            (__extPMb.331 var=16) merge (__extPMb.182 __extPMb.327)  <325>;
                            (__extDMb.332 var=17) merge (__extDMb.176 __extDMb.321)  <326>;
                            (old_size.333 var=22) merge (old_size.21 old_size.254)  <327>;
                            (__extPMb_void.334 var=23) merge (__extPMb_void.183 __extPMb_void.328)  <328>;
                            (__extDMb_void.335 var=24) merge (__extDMb_void.180 __extDMb_void.325)  <329>;
                            (__extDMb_MBlock_.336 var=25) merge (__extDMb_MBlock_.177 __extDMb_MBlock_.322)  <330>;
                            (__extDMb_head.337 var=26) merge (__extDMb_head.179 __extDMb_head.324)  <331>;
                            (__extDMb_w32.338 var=27) merge (__extDMb_w32.181 __extDMb_w32.326)  <332>;
                            (__extDMb_MBlock__head.339 var=28) merge (__extDMb_MBlock__head.178 __extDMb_MBlock__head.323)  <333>;
                        } #62
                    } #26
                    #63 off=31
                    (__rt.347 var=31) load (__M_DMw.4 __adr_p.58 p.186)  <341>;
                    (__trgt.465 var=160) const ()  <563>;
                    () void_j_t21s_s2 (__trgt.465)  <564>;
                } #20
                {
                    (__vola.348 var=13) merge (__vola.162 __vola.330)  <343>;
                    (__extPMb.349 var=16) merge (__extPMb.160 __extPMb.331)  <344>;
                    (__extDMb.350 var=17) merge (__extDMb.154 __extDMb.332)  <345>;
                    (p.351 var=21) merge (p.20 p.186)  <346>;
                    (old_size.352 var=22) merge (old_size.21 old_size.333)  <347>;
                    (__extPMb_void.353 var=23) merge (__extPMb_void.161 __extPMb_void.334)  <348>;
                    (__extDMb_void.354 var=24) merge (__extDMb_void.158 __extDMb_void.335)  <349>;
                    (__extDMb_MBlock_.355 var=25) merge (__extDMb_MBlock_.155 __extDMb_MBlock_.336)  <350>;
                    (__extDMb_head.356 var=26) merge (__extDMb_head.157 __extDMb_head.337)  <351>;
                    (__extDMb_w32.357 var=27) merge (__extDMb_w32.159 __extDMb_w32.338)  <352>;
                    (__extDMb_MBlock__head.358 var=28) merge (__extDMb_MBlock__head.156 __extDMb_MBlock__head.339)  <353>;
                    (__rt.359 var=31) merge (__ct_0.77 __rt.347)  <354>;
                } #65
            } #12
        } #10
        {
            #68 off=5
            (__fch_size.367 var=130) load (__M_DMw.4 __adr_size.48 size.73)  <363>;
            (__link.372 var=134) w32_jal_t21s_s2 (malloc.170)  <368>;
            call {
                (__fch_size.368 var=130 stl=X off=11) assign (__fch_size.367)  <364>;
                (__link.373 var=134 stl=X off=1) assign (__link.372)  <369>;
                (__tmp.374 var=135 stl=X off=10 __extDMb.377 var=17 __extDMb_MBlock_.378 var=25 __extDMb_MBlock__head.379 var=28 __extDMb_head.380 var=26 __extDMb_void.381 var=24 __extDMb_w32.382 var=27 __extPMb.383 var=16 __extPMb_void.384 var=23 __vola.385 var=13) Fmalloc (__link.373 __fch_size.368 __extDMb.16 __extDMb_MBlock_.24 __extDMb_MBlock__head.27 __extDMb_head.25 __extDMb_void.23 __extDMb_w32.26 __extPMb.15 __extPMb_void.22 __vola.12)  <370>;
                (__tmp.375 var=135) deassign (__tmp.374)  <371>;
            } #69 off=6
            #79 off=7
            (__trgt.468 var=162) const ()  <568>;
            () void_j_t21s_s2 (__trgt.468)  <569>;
        } #67
        {
            (__vola.386 var=13) merge (__vola.348 __vola.385)  <374>;
            (__extPMb.387 var=16) merge (__extPMb.349 __extPMb.383)  <375>;
            (__extDMb.388 var=17) merge (__extDMb.350 __extDMb.377)  <376>;
            (p.389 var=21) merge (p.351 p.20)  <377>;
            (old_size.390 var=22) merge (old_size.352 old_size.21)  <378>;
            (__extPMb_void.391 var=23) merge (__extPMb_void.353 __extPMb_void.384)  <379>;
            (__extDMb_void.392 var=24) merge (__extDMb_void.354 __extDMb_void.381)  <380>;
            (__extDMb_MBlock_.393 var=25) merge (__extDMb_MBlock_.355 __extDMb_MBlock_.378)  <381>;
            (__extDMb_head.394 var=26) merge (__extDMb_head.356 __extDMb_head.380)  <382>;
            (__extDMb_w32.395 var=27) merge (__extDMb_w32.357 __extDMb_w32.382)  <383>;
            (__extDMb_MBlock__head.396 var=28) merge (__extDMb_MBlock__head.358 __extDMb_MBlock__head.379)  <384>;
            (__rt.397 var=31) merge (__rt.359 __tmp.375)  <385>;
        } #71
    } #8
    #73 off=35 nxt=-2
    (__rd___sp.405 var=29) rd_res_reg (__R_SP.11 __sp.44)  <393>;
    (__ct_16s0.406 var=136) const ()  <394>;
    (__tmp.408 var=138) __Pvoid__pl___Pvoid___sint (__rd___sp.405 __ct_16s0.406)  <396>;
    (__R_SP.409 var=12 __sp.410 var=18) wr_res_reg (__tmp.408 __sp.44)  <397>;
    () void___rts_jr_w32 (__la.30)  <398>;
    (__rt.411 var=31 stl=X off=10) assign (__rt.397)  <399>;
    () out (__rt.411)  <400>;
    () sink (__vola.386)  <401>;
    () sink (__extPMb.387)  <404>;
    () sink (__extDMb.388)  <405>;
    () sink (__sp.410)  <406>;
    () sink (size.73)  <407>;
    () sink (ptr.75)  <408>;
    () sink (p.389)  <409>;
    () sink (old_size.390)  <410>;
    () sink (__extPMb_void.391)  <411>;
    () sink (__extDMb_void.392)  <412>;
    () sink (__extDMb_MBlock_.393)  <413>;
    () sink (__extDMb_head.394)  <414>;
    () sink (__extDMb_w32.395)  <415>;
    () sink (__extDMb_MBlock__head.396)  <416>;
} #0
0 : 'src/malloc.c';
----------
0 : (0,204:0,0);
3 : (0,204:25,0);
4 : (0,204:25,0);
5 : (0,204:14,0);
6 : (0,204:14,0);
7 : (0,206:4,3);
8 : (0,206:4,3);
10 : (0,220:8,4);
11 : (0,207:17,4);
12 : (0,207:8,4);
14 : (0,207:24,5);
15 : (0,208:17,5);
16 : (0,208:12,5);
20 : (0,209:12,9);
21 : (0,211:25,10);
22 : (0,211:18,10);
23 : (0,211:18,10);
24 : (0,211:18,10);
25 : (0,212:8,11);
26 : (0,212:8,11);
28 : (0,212:15,12);
31 : (0,213:41,15);
42 : (0,213:30,21);
43 : (0,213:30,23);
44 : (0,213:30,23);
45 : (0,213:30,26);
46 : (0,213:30,26);
47 : (0,213:28,29);
48 : (0,213:28,29);
49 : (0,214:36,29);
50 : (0,214:43,29);
52 : (0,214:45,30);
53 : (0,214:56,31);
55 : (0,214:43,33);
56 : (0,214:12,33);
58 : (0,215:17,34);
59 : (0,215:12,34);
61 : (0,212:8,37);
63 : (0,217:8,41);
67 : (0,217:8,48);
68 : (0,220:22,48);
69 : (0,220:15,48);
73 : (0,206:4,52);
----------
50 : (0,204:6,0);
51 : (0,204:6,0);
53 : (0,204:6,0);
54 : (0,204:6,0);
56 : (0,204:32,0);
57 : (0,204:32,0);
59 : (0,204:32,0);
61 : (0,204:20,0);
62 : (0,204:20,0);
64 : (0,204:20,0);
66 : (0,211:14,0);
67 : (0,211:14,0);
69 : (0,211:14,0);
71 : (0,213:19,0);
72 : (0,213:19,0);
74 : (0,213:19,0);
83 : (0,204:25,0);
84 : (0,204:25,0);
85 : (0,204:14,0);
86 : (0,204:14,0);
87 : (0,206:8,3);
88 : (0,206:4,0);
91 : (0,206:4,3);
123 : (0,206:4,3);
124 : (0,207:12,4);
127 : (0,207:17,4);
159 : (0,207:8,4);
160 : (0,208:17,5);
161 : (0,208:17,0);
165 : (0,208:12,5);
166 : (0,208:12,0);
167 : (0,208:12,5);
173 : (0,211:25,10);
174 : (0,211:25,0);
178 : (0,211:18,10);
179 : (0,211:18,0);
180 : (0,211:18,10);
183 : (0,211:18,10);
184 : (0,211:18,10);
185 : (0,212:12,11);
221 : (0,212:8,11);
225 : (0,213:41,15);
233 : (0,213:30,0);
238 : (0,213:30,17);
245 : (0,213:30,21);
249 : (0,213:30,22);
250 : (0,213:30,0);
252 : (0,213:30,22);
253 : (0,213:30,23);
256 : (0,213:30,25);
259 : (0,213:30,25);
260 : (0,213:30,26);
261 : (0,213:45,28);
262 : (0,213:28,29);
263 : (0,214:19,29);
264 : (0,214:19,0);
265 : (0,214:22,29);
266 : (0,214:22,0);
267 : (0,214:27,29);
268 : (0,214:38,29);
269 : (0,214:36,29);
301 : (0,214:43,29);
302 : (0,214:45,30);
303 : (0,214:56,31);
304 : (0,214:43,32);
305 : (0,214:43,0);
309 : (0,214:12,33);
310 : (0,214:12,0);
311 : (0,214:12,33);
315 : (0,215:17,34);
316 : (0,215:17,0);
320 : (0,215:12,34);
321 : (0,215:12,0);
322 : (0,215:12,34);
324 : (0,212:8,39);
325 : (0,212:8,39);
326 : (0,212:8,39);
327 : (0,212:8,39);
328 : (0,212:8,39);
329 : (0,212:8,39);
330 : (0,212:8,39);
331 : (0,212:8,39);
332 : (0,212:8,39);
333 : (0,212:8,39);
341 : (0,217:15,40);
343 : (0,207:8,43);
344 : (0,207:8,43);
345 : (0,207:8,43);
346 : (0,207:8,43);
347 : (0,207:8,43);
348 : (0,207:8,43);
349 : (0,207:8,43);
350 : (0,207:8,43);
351 : (0,207:8,43);
352 : (0,207:8,43);
353 : (0,207:8,43);
354 : (0,207:8,43);
363 : (0,220:22,48);
364 : (0,220:22,0);
368 : (0,220:15,48);
369 : (0,220:15,0);
370 : (0,220:15,48);
374 : (0,206:4,51);
375 : (0,206:4,51);
376 : (0,206:4,51);
377 : (0,206:4,51);
378 : (0,206:4,51);
379 : (0,206:4,51);
380 : (0,206:4,51);
381 : (0,206:4,51);
382 : (0,206:4,51);
383 : (0,206:4,51);
384 : (0,206:4,51);
385 : (0,206:4,51);
393 : (0,206:4,0);
394 : (0,206:4,0);
396 : (0,206:4,0);
397 : (0,206:4,52);
398 : (0,206:4,52);
399 : (0,206:4,0);
488 : (0,213:30,0);
532 : (0,212:8,11);
551 : (0,214:43,29);
556 : (0,212:8,11);
561 : (0,207:8,4);
566 : (0,206:4,3);

