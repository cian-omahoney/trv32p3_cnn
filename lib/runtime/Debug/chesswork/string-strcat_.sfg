
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:55:24 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strcat(char * restrict, const char * restrict)
Fstrcat : user_defined, called {
    fnm : "strcat" 'char *strcat(char * restrict, const char * restrict)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=12 );
}
****
***/

[
    0 : strcat typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s2 typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   20 : __arg_s2__rstr typ=w08 bnd=b stl=DMb
   21 : s1 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   22 : __arg_s1__rstr typ=w08 bnd=b stl=DMb
   23 : result typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   24 : __rd___sp typ=w32 bnd=m
   25 : __la typ=w32 bnd=p tref=w32__
   26 : __rt typ=w32 bnd=p tref=__P__cchar__
   27 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   28 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   29 : __ct_m12S0 typ=w32 val=-12S0 bnd=m
   31 : __tmp typ=w32 bnd=m
   33 : __ct_0t0 typ=w32 val=0t0 bnd=m
   35 : __adr_s2 typ=w32 bnd=m adro=19
   37 : __ct_4t0 typ=w32 val=4t0 bnd=m
   39 : __adr_s1 typ=w32 bnd=m adro=21
   41 : __ct_8t0 typ=w32 val=8t0 bnd=m
   43 : __adr_result typ=w32 bnd=m adro=23
   48 : s2__rstr typ=w08 bnd=b stl=DMb
   49 : s1__rstr typ=w08 bnd=b stl=DMb
   50 : __fch_s1 typ=w32 bnd=m
   51 : __fch_s1 typ=w32 bnd=m
   52 : __ct_1 typ=w32 val=1f bnd=m
   55 : __fch_s1__rstr typ=w08 bnd=m
   57 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   59 : __tmp typ=bool bnd=m
   60 : __fch_s1 typ=w32 bnd=m
   64 : __fch_s1__rstr typ=w08 bnd=m
   68 : __tmp typ=bool bnd=m
   69 : __fch_s1 typ=w32 bnd=m
   72 : __tmp typ=w32 bnd=m
   73 : __fch_s2 typ=w32 bnd=m
   77 : __fch_s2__rstr typ=w08 bnd=m
   78 : __fch_s1 typ=w32 bnd=m
   85 : __tmp typ=bool bnd=m
   86 : __fch_s2 typ=w32 bnd=m
   90 : __fch_s2__rstr typ=w08 bnd=m
   91 : __fch_s1 typ=w32 bnd=m
   98 : __tmp typ=bool bnd=m
  100 : __ct_12s0 typ=w32 val=12s0 bnd=m
  102 : __tmp typ=w32 bnd=m
  113 : __ct_m1 typ=w32 val=-1f bnd=m
  114 : __shv___fch_s1 typ=w32 bnd=m
  115 : __shv___fch_s2 typ=w32 bnd=m
  116 : __shv___fch_s1 typ=w32 bnd=m
  117 : __shv___fch_s1 typ=w32 bnd=m
  118 : __shv___fch_s2 typ=w32 bnd=m
  119 : __shv___fch_s1 typ=w32 bnd=m
  128 : __either typ=bool bnd=m
  129 : __trgt typ=t13s_s2 val=0j bnd=m
  130 : __trgt typ=t13s_s2 val=0j bnd=m
  131 : __trgt typ=t21s_s2 val=0j bnd=m
  132 : __trgt typ=t13s_s2 val=0j bnd=m
  133 : __trgt typ=t13s_s2 val=0j bnd=m
  134 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrcat {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (s2.18 var=19) source ()  <29>;
    (__arg_s2__rstr.19 var=20) source ()  <30>;
    (s1.20 var=21) source ()  <31>;
    (__arg_s1__rstr.21 var=22) source ()  <32>;
    (result.22 var=23) source ()  <33>;
    (__la.24 var=25 stl=X off=1) inp ()  <35>;
    (__la.25 var=25) deassign (__la.24)  <36>;
    (__arg_s1.28 var=27 stl=X off=11) inp ()  <39>;
    (__arg_s1.29 var=27) deassign (__arg_s1.28)  <40>;
    (__arg_s2.31 var=28 stl=X off=12) inp ()  <42>;
    (__arg_s2.32 var=28) deassign (__arg_s2.31)  <43>;
    (__rd___sp.34 var=24) rd_res_reg (__R_SP.11 __sp.17)  <45>;
    (__ct_m12S0.35 var=29) const ()  <46>;
    (__tmp.37 var=31) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_m12S0.35)  <48>;
    (__R_SP.38 var=12 __sp.39 var=18) wr_res_reg (__tmp.37 __sp.17)  <49>;
    (__rd___sp.40 var=24) rd_res_reg (__R_SP.11 __sp.39)  <51>;
    (__ct_0t0.41 var=33) const ()  <52>;
    (__adr_s2.43 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_0t0.41)  <54>;
    (__rd___sp.45 var=24) rd_res_reg (__R_SP.11 __sp.39)  <56>;
    (__rd___sp.50 var=24) rd_res_reg (__R_SP.11 __sp.39)  <61>;
    (s2__rstr.59 var=48 __arg_s2__rstr.60 var=20) chain_tie (__arg_s2__rstr.19)  <70>;
    (__M_DMw.61 var=5 s2.62 var=19) store (__arg_s2.32 __adr_s2.43 s2.18)  <71>;
    call {
        () chess_separator_scheduler ()  <72>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.46 var=37) const ()  <57>;
    (__adr_s1.48 var=39) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_4t0.46)  <59>;
    (s1__rstr.63 var=49 __arg_s1__rstr.64 var=22) chain_tie (__arg_s1__rstr.21)  <73>;
    (__M_DMw.65 var=5 s1.66 var=21) store (__arg_s1.29 __adr_s1.48 s1.20)  <74>;
    call {
        () chess_separator_scheduler ()  <75>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.51 var=41) const ()  <62>;
    (__adr_result.53 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_8t0.51)  <64>;
    (__fch_s1.67 var=50) load (__M_DMw.4 __adr_s1.48 s1.66)  <76>;
    (__M_DMw.68 var=5 result.69 var=23) store (__fch_s1.67 __adr_result.53 result.22)  <77>;
    call {
        () chess_separator_scheduler ()  <78>;
    } #8 off=5
    #9 off=6
    (__fch_s1.70 var=51) load (__M_DMw.4 __adr_s1.48 s1.66)  <79>;
    call {
        () chess_separator_scheduler ()  <80>;
    } #10 off=7
    #11 off=8
    (__ct_1.71 var=52) const ()  <81>;
    (__M_DMw.74 var=5 s1.75 var=21) store (__shv___fch_s1.379 __adr_s1.48 s1.66)  <84>;
    (__shv___fch_s1.379 var=117) __Pvoid__pl___Pvoid___sint (__fch_s1.70 __ct_1.71)  <389>;
    call {
        () chess_separator_scheduler ()  <85>;
    } #12 off=9
    #13 off=10
    (__fch_s1__rstr.76 var=55) load (__M_DMb.2 __fch_s1.70 s1__rstr.63)  <86>;
    (__ct_0.78 var=57) const ()  <88>;
    (__tmp.389 var=59) bool__eq___sint___sint (__fch_s1__rstr.76 __ct_0.78)  <419>;
    (__trgt.394 var=130) const ()  <435>;
    () void_br_bool_t13s_s2 (__tmp.389 __trgt.394)  <436>;
    (__either.395 var=128) undefined ()  <437>;
    if {
        {
            () if_expr (__either.395)  <115>;
            () chess_frequent_else ()  <116>;
            () chess_rear_then ()  <438>;
        } #15
        {
            (__trgt.396 var=131) const ()  <439>;
            () void_j_t21s_s2 (__trgt.396)  <440>;
        } #26 off=18
        {
            #206 off=11
            (__trgt.392 var=129) const ()  <432>;
            do {
                {
                    (s1.113 var=21) entry (s1.156 s1.75)  <125>;
                } #18
                {
                    #20 off=12
                    (__fch_s1.129 var=60) load (__M_DMw.4 __adr_s1.48 s1.113)  <141>;
                    call {
                        () chess_separator_scheduler ()  <142>;
                    } #21 off=13
                    #22 off=14
                    (__M_DMw.133 var=5 s1.134 var=21) store (__shv___fch_s1.376 __adr_s1.48 s1.113)  <146>;
                    (__shv___fch_s1.376 var=114) __Pvoid__pl___Pvoid___sint (__fch_s1.129 __ct_1.71)  <386>;
                    call {
                        () chess_separator_scheduler ()  <147>;
                    } #23 off=15
                    #24 off=16
                    (__fch_s1__rstr.135 var=64) load (__M_DMb.2 __fch_s1.129 s1__rstr.63)  <148>;
                    (__tmp.139 var=68) bool__ne___sint___sint (__fch_s1__rstr.135 __ct_0.78)  <152>;
                    () void_br_bool_t13s_s2 (__tmp.139 __trgt.392)  <433>;
                    (__either.393 var=128) undefined ()  <434>;
                } #19
                {
                    () while_expr (__either.393)  <153>;
                    (s1.156 var=21 s1.157 var=21) exit (s1.134)  <162>;
                } #25
            } #17 rng=[1,2147483647]
        } #16
        {
            (s1.188 var=21) merge (s1.75 s1.157)  <178>;
        } #27
    } #14
    #28 off=19
    (__fch_s1.190 var=69) load (__M_DMw.4 __adr_s1.48 s1.188)  <180>;
    call {
        () chess_separator_scheduler ()  <181>;
    } #29 off=20
    #30 off=21
    (__tmp.193 var=72) __Pvoid__pl___Pvoid___sint (__fch_s1.190 __ct_m1.375)  <184>;
    (__M_DMw.194 var=5 s1.195 var=21) store (__tmp.193 __adr_s1.48 s1.188)  <185>;
    (__ct_m1.375 var=113) const ()  <384>;
    call {
        () chess_separator_scheduler ()  <187>;
    } #32 off=22
    #33 off=23
    (__fch_s2.196 var=73) load (__M_DMw.4 __adr_s2.43 s2.62)  <188>;
    call {
        () chess_separator_scheduler ()  <189>;
    } #34 off=24
    #35 off=25
    (__M_DMw.200 var=5 s2.201 var=19) store (__shv___fch_s2.380 __adr_s2.43 s2.62)  <193>;
    (__shv___fch_s2.380 var=118) __Pvoid__pl___Pvoid___sint (__fch_s2.196 __ct_1.71)  <390>;
    call {
        () chess_separator_scheduler ()  <194>;
    } #36 off=26
    #37 off=27
    (__fch_s2__rstr.202 var=77) load (__M_DMb.2 __fch_s2.196 s2__rstr.59)  <195>;
    (__fch_s1.203 var=78) load (__M_DMw.4 __adr_s1.48 s1.195)  <196>;
    call {
        () chess_separator_scheduler ()  <197>;
    } #38 off=28
    #39 off=29
    (__M_DMw.207 var=5 s1.208 var=21) store (__shv___fch_s1.381 __adr_s1.48 s1.195)  <201>;
    (__shv___fch_s1.381 var=119) __Pvoid__pl___Pvoid___sint (__fch_s1.203 __ct_1.71)  <391>;
    call {
        () chess_separator_scheduler ()  <202>;
    } #40 off=30
    #41 off=31
    (__M_DMb.209 var=3 s1__rstr.210 var=49) store (__fch_s2__rstr.202 __fch_s1.203 s1__rstr.63)  <203>;
    (__tmp.388 var=85) bool__eq___sint___sint (__fch_s2__rstr.202 __ct_0.78)  <418>;
    (__trgt.399 var=133) const ()  <444>;
    () void_br_bool_t13s_s2 (__tmp.388 __trgt.399)  <445>;
    (__either.400 var=128) undefined ()  <446>;
    if {
        {
            () if_expr (__either.400)  <232>;
            () chess_frequent_else ()  <233>;
            () chess_rear_then ()  <447>;
        } #43
        {
            (__trgt.401 var=134) const ()  <448>;
            () void_j_t21s_s2 (__trgt.401)  <449>;
        } #58 off=43
        {
            #207 off=32
            (__trgt.397 var=132) const ()  <441>;
            do {
                {
                    (s2.245 var=19) entry (s2.294 s2.201)  <240>;
                    (s1.247 var=21) entry (s1.298 s1.208)  <242>;
                    (s1__rstr.251 var=49) entry (s1__rstr.306 s1__rstr.210)  <246>;
                } #46
                {
                    #48 off=33
                    (__fch_s2.263 var=86) load (__M_DMw.4 __adr_s2.43 s2.245)  <258>;
                    call {
                        () chess_separator_scheduler ()  <259>;
                    } #49 off=34
                    #50 off=35
                    (__M_DMw.267 var=5 s2.268 var=19) store (__shv___fch_s2.377 __adr_s2.43 s2.245)  <263>;
                    (__shv___fch_s2.377 var=115) __Pvoid__pl___Pvoid___sint (__fch_s2.263 __ct_1.71)  <387>;
                    call {
                        () chess_separator_scheduler ()  <264>;
                    } #51 off=36
                    #52 off=37
                    (__fch_s2__rstr.269 var=90) load (__M_DMb.2 __fch_s2.263 s2__rstr.59)  <265>;
                    (__fch_s1.270 var=91) load (__M_DMw.4 __adr_s1.48 s1.247)  <266>;
                    call {
                        () chess_separator_scheduler ()  <267>;
                    } #53 off=38
                    #54 off=39
                    (__M_DMw.274 var=5 s1.275 var=21) store (__shv___fch_s1.378 __adr_s1.48 s1.247)  <271>;
                    (__shv___fch_s1.378 var=116) __Pvoid__pl___Pvoid___sint (__fch_s1.270 __ct_1.71)  <388>;
                    call {
                        () chess_separator_scheduler ()  <272>;
                    } #55 off=40
                    #56 off=41
                    (__M_DMb.276 var=3 s1__rstr.277 var=49) store (__fch_s2__rstr.269 __fch_s1.270 s1__rstr.251)  <273>;
                    (__tmp.281 var=98) bool__ne___sint___sint (__fch_s2__rstr.269 __ct_0.78)  <277>;
                    () void_br_bool_t13s_s2 (__tmp.281 __trgt.397)  <442>;
                    (__either.398 var=128) undefined ()  <443>;
                } #47
                {
                    () while_expr (__either.398)  <278>;
                    (s2.294 var=19 s2.295 var=19) exit (s2.268)  <285>;
                    (s1.298 var=21 s1.299 var=21) exit (s1.275)  <287>;
                    (s1__rstr.306 var=49 s1__rstr.307 var=49) exit (s1__rstr.277)  <291>;
                } #57
            } #45 rng=[1,2147483647]
        } #44
        {
            (s2.330 var=19) merge (s2.201 s2.295)  <303>;
            (s1.331 var=21) merge (s1.208 s1.299)  <304>;
            (s1__rstr.332 var=49) merge (s1__rstr.210 s1__rstr.307)  <305>;
        } #59
    } #42
    #62 off=44 nxt=-2
    (__rt.335 var=26) load (__M_DMw.4 __adr_result.53 result.69)  <308>;
    (__rd___sp.338 var=24) rd_res_reg (__R_SP.11 __sp.39)  <311>;
    (__ct_12s0.339 var=100) const ()  <312>;
    (__tmp.341 var=102) __Pvoid__pl___Pvoid___sint (__rd___sp.338 __ct_12s0.339)  <314>;
    (__R_SP.342 var=12 __sp.343 var=18) wr_res_reg (__tmp.341 __sp.39)  <315>;
    () void___rts_jr_w32 (__la.25)  <316>;
    (__rt.344 var=26 stl=X off=10) assign (__rt.335)  <317>;
    () out (__rt.344)  <318>;
    () sink (__sp.343)  <324>;
    () sink (s2.330)  <325>;
    () sink (s1.331)  <327>;
    () sink (result.69)  <329>;
    () sink (s2__rstr.59)  <357>;
    () sink (s1__rstr.332)  <359>;
} #0
0 : 'src/string.c';
----------
0 : (0,63:0,0);
3 : (0,63:33,0);
4 : (0,63:33,0);
5 : (0,63:13,0);
6 : (0,63:13,0);
7 : (0,65:19,3);
8 : (0,65:19,3);
9 : (0,66:4,5);
10 : (0,66:4,5);
11 : (0,66:4,6);
12 : (0,66:4,6);
13 : (0,66:4,6);
14 : (0,66:4,6);
16 : (0,66:4,7);
17 : (0,66:4,7);
19 : (0,67:6,7);
20 : (0,66:14,9);
21 : (0,66:14,9);
22 : (0,66:14,10);
23 : (0,66:14,10);
24 : (0,66:4,10);
26 : (0,66:4,12);
28 : (0,68:6,16);
29 : (0,68:6,16);
30 : (0,68:6,17);
32 : (0,68:6,18);
33 : (0,69:4,19);
34 : (0,69:4,19);
35 : (0,69:4,20);
36 : (0,69:4,20);
37 : (0,69:4,21);
38 : (0,69:4,21);
39 : (0,69:4,22);
40 : (0,69:4,22);
41 : (0,69:4,22);
42 : (0,69:4,22);
44 : (0,69:4,23);
45 : (0,69:4,23);
47 : (0,69:27,23);
48 : (0,69:23,25);
49 : (0,69:23,25);
50 : (0,69:23,26);
51 : (0,69:23,26);
52 : (0,69:15,27);
53 : (0,69:15,27);
54 : (0,69:15,28);
55 : (0,69:15,28);
56 : (0,69:4,28);
58 : (0,69:4,30);
62 : (0,70:4,33);
----------
45 : (0,63:6,0);
46 : (0,63:6,0);
48 : (0,63:6,0);
49 : (0,63:6,0);
51 : (0,63:55,0);
52 : (0,63:55,0);
54 : (0,63:55,0);
56 : (0,63:29,0);
57 : (0,63:29,0);
59 : (0,63:29,0);
61 : (0,65:10,0);
62 : (0,65:10,0);
64 : (0,65:10,0);
71 : (0,63:33,0);
72 : (0,63:33,0);
74 : (0,63:13,0);
75 : (0,63:13,0);
76 : (0,65:19,3);
77 : (0,65:19,3);
78 : (0,65:19,3);
79 : (0,66:4,4);
80 : (0,66:4,5);
81 : (0,66:4,0);
84 : (0,66:4,5);
85 : (0,66:4,6);
86 : (0,66:4,6);
88 : (0,66:4,0);
115 : (0,66:4,6);
125 : (0,66:4,7);
141 : (0,66:12,8);
142 : (0,66:14,9);
146 : (0,66:12,9);
147 : (0,66:14,10);
148 : (0,66:11,10);
152 : (0,66:4,10);
153 : (0,66:4,10);
162 : (0,66:4,10);
178 : (0,66:4,14);
180 : (0,68:4,15);
181 : (0,68:6,16);
184 : (0,68:6,16);
185 : (0,68:4,16);
187 : (0,68:6,18);
188 : (0,69:4,18);
189 : (0,69:4,19);
193 : (0,69:4,19);
194 : (0,69:4,20);
195 : (0,69:4,20);
196 : (0,69:4,20);
197 : (0,69:4,21);
201 : (0,69:4,21);
202 : (0,69:4,22);
203 : (0,69:4,22);
232 : (0,69:4,22);
240 : (0,69:4,23);
242 : (0,69:4,23);
246 : (0,69:4,23);
258 : (0,69:21,24);
259 : (0,69:23,25);
263 : (0,69:21,25);
264 : (0,69:23,26);
265 : (0,69:20,26);
266 : (0,69:13,26);
267 : (0,69:15,27);
271 : (0,69:13,27);
272 : (0,69:15,28);
273 : (0,69:12,28);
277 : (0,69:4,28);
278 : (0,69:4,28);
285 : (0,69:4,28);
287 : (0,69:4,28);
291 : (0,69:4,28);
303 : (0,69:4,32);
304 : (0,69:4,32);
305 : (0,69:4,32);
308 : (0,70:11,33);
311 : (0,70:4,0);
312 : (0,70:4,0);
314 : (0,70:4,0);
315 : (0,70:4,33);
316 : (0,70:4,33);
317 : (0,70:11,0);
384 : (0,68:6,0);
386 : (0,66:14,0);
387 : (0,69:23,0);
388 : (0,69:15,0);
389 : (0,66:4,0);
390 : (0,69:4,0);
391 : (0,69:4,0);
418 : (0,69:4,22);
419 : (0,66:4,6);
433 : (0,66:4,10);
436 : (0,66:4,6);
442 : (0,69:4,28);
445 : (0,69:4,22);

