
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:30:47 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  int strcmp(const char *, const char *)
Fstrcmp : user_defined, called {
    fnm : "strcmp" 'int strcmp(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( l=12 );
}
****
***/

[
    0 : strcmp typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s2 typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   20 : s1 typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__cchar_DMb
   21 : c1 typ=w08 val=8t0 bnd=a sz=1 algn=1 stl=DMb lscp=13 tref=__cchar_DMb
   22 : c2 typ=w08 val=9t0 bnd=a sz=1 algn=1 stl=DMb lscp=13 tref=__cchar_DMb
   23 : __rd___sp typ=w32 bnd=m
   24 : __la typ=w32 bnd=p tref=w32__
   25 : __rt typ=w32 bnd=p tref=__sint__
   26 : __arg_s1 typ=w32 bnd=p tref=__P__cchar__
   27 : __arg_s2 typ=w32 bnd=p tref=__P__cchar__
   28 : __ct_m12S0 typ=w32 val=-12S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   32 : __ct_0t0 typ=w32 val=0t0 bnd=m
   34 : __adr_s2 typ=w32 bnd=m adro=19
   36 : __ct_4t0 typ=w32 val=4t0 bnd=m
   38 : __adr_s1 typ=w32 bnd=m adro=20
   40 : __ct_8t0 typ=w32 val=8t0 bnd=m
   42 : __adr_c1 typ=w32 bnd=m adro=21
   44 : __ct_9t0 typ=w32 val=9t0 bnd=m
   46 : __adr_c2 typ=w32 bnd=m adro=22
   51 : __fch_s1 typ=w32 bnd=m
   52 : __ct_1 typ=w32 val=1f bnd=m
   55 : __fch___extDMb typ=w08 bnd=m
   56 : __fch_s2 typ=w32 bnd=m
   60 : __fch___extDMb typ=w08 bnd=m
   61 : __fch_c1 typ=w08 bnd=m
   63 : __fch_c2 typ=w08 bnd=m
   65 : __tmp typ=bool bnd=m
   68 : __fch_c1 typ=w08 bnd=m
   70 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   72 : __tmp typ=bool bnd=m
   73 : __tmp typ=bool bnd=m
   75 : __tmp typ=__uchar bnd=m
   78 : __tmp typ=__uchar bnd=m
   81 : __ct_12s0 typ=w32 val=12s0 bnd=m
   83 : __tmp typ=w32 bnd=m
   95 : __shv___fch_s1 typ=w32 bnd=m
   96 : __shv___fch_s2 typ=w32 bnd=m
  103 : __true typ=bool val=1f bnd=m
  104 : __false typ=bool val=0f bnd=m
  105 : __either typ=bool bnd=m
  106 : __trgt typ=t13s_s2 val=0j bnd=m
  107 : __trgt typ=t13s_s2 val=0j bnd=m
  108 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrcmp {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (s2.18 var=19) source ()  <29>;
    (s1.19 var=20) source ()  <30>;
    (c1.20 var=21) source ()  <31>;
    (c2.21 var=22) source ()  <32>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (__arg_s1.27 var=26 stl=X off=11) inp ()  <38>;
    (__arg_s1.28 var=26) deassign (__arg_s1.27)  <39>;
    (__arg_s2.30 var=27 stl=X off=12) inp ()  <41>;
    (__arg_s2.31 var=27) deassign (__arg_s2.30)  <42>;
    (__rd___sp.33 var=23) rd_res_reg (__R_SP.11 __sp.17)  <44>;
    (__ct_m12S0.34 var=28) const ()  <45>;
    (__tmp.36 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_m12S0.34)  <47>;
    (__R_SP.37 var=12 __sp.38 var=18) wr_res_reg (__tmp.36 __sp.17)  <48>;
    (__rd___sp.39 var=23) rd_res_reg (__R_SP.11 __sp.38)  <50>;
    (__ct_0t0.40 var=32) const ()  <51>;
    (__adr_s2.42 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_0t0.40)  <53>;
    (__rd___sp.44 var=23) rd_res_reg (__R_SP.11 __sp.38)  <55>;
    (__rd___sp.49 var=23) rd_res_reg (__R_SP.11 __sp.38)  <60>;
    (__rd___sp.54 var=23) rd_res_reg (__R_SP.11 __sp.38)  <65>;
    (__M_DMw.61 var=5 s2.62 var=19) store (__arg_s2.31 __adr_s2.42 s2.18)  <72>;
    call {
        () chess_separator_scheduler ()  <73>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.45 var=36) const ()  <56>;
    (__adr_s1.47 var=38) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_4t0.45)  <58>;
    (__M_DMw.63 var=5 s1.64 var=20) store (__arg_s1.28 __adr_s1.47 s1.19)  <74>;
    call {
        () chess_separator_scheduler ()  <75>;
    } #6 off=3
    #53 off=4
    (__ct_8t0.50 var=40) const ()  <61>;
    (__adr_c1.52 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.49 __ct_8t0.50)  <63>;
    (__ct_9t0.55 var=44) const ()  <66>;
    (__adr_c2.57 var=46) __Pvoid__pl___Pvoid___sint (__rd___sp.54 __ct_9t0.55)  <68>;
    (__ct_1.108 var=52) const ()  <122>;
    (__ct_0.154 var=70) const ()  <170>;
    (__rd___sp.185 var=23) rd_res_reg (__R_SP.11 __sp.38)  <202>;
    (__ct_12s0.186 var=81) const ()  <203>;
    (__tmp.188 var=83) __Pvoid__pl___Pvoid___sint (__rd___sp.185 __ct_12s0.186)  <205>;
    (__trgt.344 var=106) const ()  <421>;
    (__trgt.347 var=107) const ()  <425>;
    (__trgt.349 var=108) const ()  <429>;
    do {
        {
            (s2.93 var=19) entry (s2.246 s2.62)  <106>;
            (s1.94 var=20) entry (s1.248 s1.64)  <107>;
            (c1.95 var=21) entry (c1.250 c1.20)  <108>;
            (c2.96 var=22) entry (c2.252 c2.21)  <109>;
        } #12
        {
            #14 off=5
            (__fch_s1.107 var=51) load (__M_DMw.4 __adr_s1.47 s1.94)  <120>;
            call {
                () chess_separator_scheduler ()  <121>;
            } #15 off=6
            #16 off=7
            (__M_DMw.111 var=5 s1.112 var=20) store (__shv___fch_s1.334 __adr_s1.47 s1.94)  <125>;
            (__shv___fch_s1.334 var=95) __Pvoid__pl___Pvoid___sint (__fch_s1.107 __ct_1.108)  <381>;
            call {
                () chess_separator_scheduler ()  <126>;
            } #17 off=8
            #18 off=9
            (__fch___extDMb.113 var=55) load (__M_DMb.2 __fch_s1.107 __extDMb.16)  <127>;
            (__M_DMb.114 var=3 c1.115 var=21) store (__fch___extDMb.113 __adr_c1.52 c1.95)  <128>;
            call {
                () chess_separator_scheduler ()  <129>;
            } #19 off=10
            #20 off=11
            (__fch_s2.116 var=56) load (__M_DMw.4 __adr_s2.42 s2.93)  <130>;
            call {
                () chess_separator_scheduler ()  <131>;
            } #21 off=12
            #22 off=13
            (__M_DMw.120 var=5 s2.121 var=19) store (__shv___fch_s2.335 __adr_s2.42 s2.93)  <135>;
            (__shv___fch_s2.335 var=96) __Pvoid__pl___Pvoid___sint (__fch_s2.116 __ct_1.108)  <382>;
            call {
                () chess_separator_scheduler ()  <136>;
            } #23 off=14
            #24 off=15
            (__fch___extDMb.122 var=60) load (__M_DMb.2 __fch_s2.116 __extDMb.16)  <137>;
            (__M_DMb.123 var=3 c2.124 var=22) store (__fch___extDMb.122 __adr_c2.57 c2.96)  <138>;
            call {
                () chess_separator_scheduler ()  <139>;
            } #25 off=16
            #26 off=17
            (__fch_c1.125 var=61) load (__M_DMb.2 __adr_c1.52 c1.115)  <140>;
            (__fch_c2.127 var=63) load (__M_DMb.2 __adr_c2.57 c2.124)  <142>;
            (__tmp.129 var=65) bool__ne___sint___sint (__fch_c1.125 __fch_c2.127)  <144>;
            () void_br_bool_t13s_s2 (__tmp.129 __trgt.344)  <422>;
            (__either.345 var=105) undefined ()  <423>;
            if {
                {
                    () if_expr (__either.345)  <165>;
                } #28
                {
                    (__false.346 var=104) const ()  <424>;
                } #29
                {
                    (__fch_c1.152 var=68) load (__M_DMb.2 __adr_c1.52 c1.115)  <168>;
                    (__tmp.340 var=72) bool__ne___sint___sint (__fch_c1.152 __ct_0.154)  <407>;
                    () void_br_bool_t13s_s2 (__tmp.340 __trgt.347)  <426>;
                    (__either.348 var=105) undefined ()  <427>;
                } #30 off=18
                {
                    (__tmp.341 var=73) merge (__false.346 __either.348)  <408>;
                } #31
            } #27
            if {
                {
                    () if_expr (__tmp.341)  <194>;
                    () chess_frequent_then ()  <428>;
                } #34
                {
                } #39 off=20
                {
                    (__tmp.178 var=75) load (__M_DMb.2 __adr_c1.52 c1.115)  <195>;
                    (__tmp.181 var=78) load (__M_DMb.2 __adr_c2.57 c2.124)  <198>;
                    (__rt.184 var=25) __sint__mi___sint___sint (__tmp.178 __tmp.181)  <201>;
                    (__R_SP.189 var=12 __sp.190 var=18) wr_res_reg (__tmp.188 __sp.38)  <206>;
                    () void___rts_jr_w32 (__la.24)  <207>;
                    (__rt.191 var=25 stl=X off=10) assign (__rt.184)  <208>;
                    () out (__rt.191)  <209>;
                    () sink (__sp.190)  <215>;
                    () sink (s2.121)  <216>;
                    () sink (s1.112)  <217>;
                    () sink (c1.115)  <218>;
                    () sink (c2.124)  <219>;
                } #38 off=19 nxt=-2
                {
                } #40
            } #33
            #56 off=21
            () void_j_t21s_s2 (__trgt.349)  <430>;
            (__true.350 var=103) const ()  <431>;
        } #13
        {
            () while_expr (__true.350)  <262>;
            (s2.246 var=19 s2.247 var=19) exit (s2.121)  <269>;
            (s1.248 var=20 s1.249 var=20) exit (s1.112)  <270>;
            (c1.250 var=21 c1.251 var=21) exit (c1.115)  <271>;
            (c2.252 var=22 c2.253 var=22) exit (c2.124)  <272>;
        } #42
    } #11 rng=[1,2147483647]
    #51 off=22 nxt=-4
    () sink (__sp.38)  <371>;
    () sink (s2.247)  <372>;
    () sink (s1.249)  <373>;
    () sink (c1.251)  <374>;
    () sink (c2.253)  <375>;
} #0
0 : 'src/string.c';
----------
0 : (0,102:0,0);
3 : (0,102:27,0);
4 : (0,102:27,0);
5 : (0,102:11,0);
6 : (0,102:11,0);
11 : (0,104:4,4);
13 : (0,104:14,4);
14 : (0,105:21,5);
15 : (0,105:21,5);
16 : (0,105:21,6);
17 : (0,105:21,6);
18 : (0,105:18,6);
19 : (0,105:18,6);
20 : (0,106:21,8);
21 : (0,106:21,8);
22 : (0,106:21,9);
23 : (0,106:21,9);
24 : (0,106:18,9);
25 : (0,106:18,9);
26 : (0,107:15,10);
27 : (0,107:21,10);
29 : (0,107:21,11);
30 : (0,107:27,12);
33 : (0,107:8,14);
38 : (0,108:12,15);
39 : (0,107:8,18);
----------
44 : (0,102:4,0);
45 : (0,102:4,0);
47 : (0,102:4,0);
48 : (0,102:4,0);
50 : (0,102:39,0);
51 : (0,102:39,0);
53 : (0,102:39,0);
55 : (0,102:23,0);
56 : (0,102:23,0);
58 : (0,102:23,0);
60 : (0,105:13,0);
61 : (0,105:13,0);
63 : (0,105:13,0);
65 : (0,106:13,0);
66 : (0,106:13,0);
68 : (0,106:13,0);
72 : (0,102:27,0);
73 : (0,102:27,0);
74 : (0,102:11,0);
75 : (0,102:11,0);
106 : (0,104:4,4);
107 : (0,104:4,4);
108 : (0,104:4,4);
109 : (0,104:4,4);
120 : (0,105:19,4);
121 : (0,105:21,5);
122 : (0,105:21,0);
125 : (0,105:19,5);
126 : (0,105:21,6);
127 : (0,105:18,6);
128 : (0,105:18,6);
129 : (0,105:18,6);
130 : (0,106:19,7);
131 : (0,106:21,8);
135 : (0,106:19,8);
136 : (0,106:21,9);
137 : (0,106:18,9);
138 : (0,106:18,9);
139 : (0,106:18,9);
140 : (0,107:12,10);
142 : (0,107:18,10);
144 : (0,107:15,10);
165 : (0,107:21,10);
168 : (0,107:24,12);
170 : (0,107:30,0);
194 : (0,107:8,14);
195 : (0,108:34,15);
198 : (0,108:54,15);
201 : (0,108:37,15);
202 : (0,108:12,0);
203 : (0,108:12,0);
205 : (0,108:12,0);
206 : (0,108:12,15);
207 : (0,108:12,15);
208 : (0,108:37,0);
262 : (0,104:4,22);
269 : (0,104:4,22);
270 : (0,104:4,22);
271 : (0,104:4,22);
272 : (0,104:4,22);
381 : (0,105:21,0);
382 : (0,106:21,0);
407 : (0,107:27,12);
408 : (0,107:21,13);
422 : (0,107:21,10);
426 : (0,107:8,14);
430 : (0,104:4,22);

