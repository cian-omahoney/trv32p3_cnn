
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 16:37:20 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +Sal +Sca +Osps -Wflla +NOtcr +NOcse +NOlsw +NOifv +NOrle +NOrlt +wDebug/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  void *memset(void *, int, size_t)
Fmemset : user_defined, called {
    fnm : "memset" 'void *memset(void *, int, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( l=20 );
}
****
***/

[
    0 : memset typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : n typ=w08 val=0t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   20 : c typ=w08 val=4t0 bnd=a sz=4 algn=4 stl=DMb tref=__sint_DMb
   21 : s typ=w08 val=8t0 bnd=a sz=4 algn=4 stl=DMb tref=__Pvoid_DMb
   22 : ll typ=w08 val=12t0 bnd=a sz=4 algn=4 stl=DMb tref=__P__uchar_DMb
   23 : i typ=w08 val=16t0 bnd=a sz=4 algn=4 stl=DMb tref=size_t_DMb
   24 : __extPMb_void typ=u08 bnd=b stl=PMb
   25 : __rd___sp typ=w32 bnd=m
   26 : __la typ=w32 bnd=p tref=w32__
   27 : __rt typ=w32 bnd=p tref=__Pvoid__
   28 : __arg_s typ=w32 bnd=p tref=__Pvoid__
   29 : __arg_c typ=w32 bnd=p tref=__sint__
   30 : __arg_n typ=w32 bnd=p tref=size_t__
   31 : __ct_m20S0 typ=w32 val=-20S0 bnd=m
   33 : __tmp typ=w32 bnd=m
   35 : __ct_0t0 typ=w32 val=0t0 bnd=m
   37 : __adr_n typ=w32 bnd=m adro=19
   39 : __ct_4t0 typ=w32 val=4t0 bnd=m
   41 : __adr_c typ=w32 bnd=m adro=20
   43 : __ct_8t0 typ=w32 val=8t0 bnd=m
   45 : __adr_s typ=w32 bnd=m adro=21
   47 : __ct_12t0 typ=w32 val=12t0 bnd=m
   49 : __adr_ll typ=w32 bnd=m adro=22
   51 : __ct_16t0 typ=w32 val=16t0 bnd=m
   53 : __adr_i typ=w32 bnd=m adro=23
   55 : __fch_s typ=w32 bnd=m
   56 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   59 : __fch_n typ=w32 bnd=m
   60 : __tmp typ=bool bnd=m
   61 : __fch_c typ=w32 bnd=m
   62 : __tmp typ=__uchar bnd=m
   63 : __fch_ll typ=w32 bnd=m
   64 : __fch_i typ=w32 bnd=m
   66 : __tmp typ=w32 bnd=m
   67 : __fch_i typ=w32 bnd=m
   68 : __ct_1 typ=w32 val=1f bnd=m
   70 : __tmp typ=w32 bnd=m
   71 : __fch_i typ=w32 bnd=m
   72 : __fch_n typ=w32 bnd=m
   73 : __tmp typ=bool bnd=m
   75 : __ct_20s0 typ=w32 val=20s0 bnd=m
   77 : __tmp typ=w32 bnd=m
   90 : __either typ=bool bnd=m
   91 : __trgt typ=t13s_s2 val=0j bnd=m
   92 : __trgt typ=t13s_s2 val=0j bnd=m
   93 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fmemset {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (n.18 var=19) source ()  <29>;
    (c.19 var=20) source ()  <30>;
    (s.20 var=21) source ()  <31>;
    (ll.21 var=22) source ()  <32>;
    (i.22 var=23) source ()  <33>;
    (__extPMb_void.23 var=24) source ()  <34>;
    (__la.25 var=26 stl=X off=1) inp ()  <36>;
    (__la.26 var=26) deassign (__la.25)  <37>;
    (__arg_s.29 var=28 stl=X off=11) inp ()  <40>;
    (__arg_s.30 var=28) deassign (__arg_s.29)  <41>;
    (__arg_c.32 var=29 stl=X off=12) inp ()  <43>;
    (__arg_c.33 var=29) deassign (__arg_c.32)  <44>;
    (__arg_n.35 var=30 stl=X off=13) inp ()  <46>;
    (__arg_n.36 var=30) deassign (__arg_n.35)  <47>;
    (__rd___sp.38 var=25) rd_res_reg (__R_SP.11 __sp.17)  <49>;
    (__ct_m20S0.39 var=31) const ()  <50>;
    (__tmp.41 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.38 __ct_m20S0.39)  <52>;
    (__R_SP.42 var=12 __sp.43 var=18) wr_res_reg (__tmp.41 __sp.17)  <53>;
    (__rd___sp.44 var=25) rd_res_reg (__R_SP.11 __sp.43)  <55>;
    (__ct_0t0.45 var=35) const ()  <56>;
    (__adr_n.47 var=37) __Pvoid__pl___Pvoid___sint (__rd___sp.44 __ct_0t0.45)  <58>;
    (__rd___sp.49 var=25) rd_res_reg (__R_SP.11 __sp.43)  <60>;
    (__rd___sp.54 var=25) rd_res_reg (__R_SP.11 __sp.43)  <65>;
    (__rd___sp.59 var=25) rd_res_reg (__R_SP.11 __sp.43)  <70>;
    (__rd___sp.64 var=25) rd_res_reg (__R_SP.11 __sp.43)  <75>;
    (__M_DMw.70 var=5 n.71 var=19) store (__arg_n.36 __adr_n.47 n.18)  <81>;
    call {
        () chess_separator_scheduler ()  <82>;
    } #4 off=1
    #5 off=2
    (__ct_4t0.50 var=39) const ()  <61>;
    (__adr_c.52 var=41) __Pvoid__pl___Pvoid___sint (__rd___sp.49 __ct_4t0.50)  <63>;
    (__M_DMw.72 var=5 c.73 var=20) store (__arg_c.33 __adr_c.52 c.19)  <83>;
    call {
        () chess_separator_scheduler ()  <84>;
    } #6 off=3
    #7 off=4
    (__ct_8t0.55 var=43) const ()  <66>;
    (__adr_s.57 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.54 __ct_8t0.55)  <68>;
    (__M_DMw.74 var=5 s.75 var=21) store (__arg_s.30 __adr_s.57 s.20)  <85>;
    call {
        () chess_separator_scheduler ()  <86>;
    } #8 off=5
    #9 off=6
    (__ct_12t0.60 var=47) const ()  <71>;
    (__adr_ll.62 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.59 __ct_12t0.60)  <73>;
    (__fch_s.76 var=55) load (__M_DMw.4 __adr_s.57 s.75)  <87>;
    (__M_DMw.77 var=5 ll.78 var=22) store (__fch_s.76 __adr_ll.62 ll.21)  <88>;
    call {
        () chess_separator_scheduler ()  <89>;
    } #10 off=7
    #11 off=8
    (__ct_16t0.65 var=51) const ()  <76>;
    (__adr_i.67 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.64 __ct_16t0.65)  <78>;
    (__ct_0.79 var=56) const ()  <90>;
    (__M_DMw.81 var=5 i.82 var=23) store (__ct_0.79 __adr_i.67 i.22)  <92>;
    call {
        () chess_separator_scheduler ()  <93>;
    } #12 off=9
    #13 off=10
    (__fch_n.84 var=59) load (__M_DMw.4 __adr_n.47 n.71)  <95>;
    (__tmp.240 var=60) bool__eq___uint___uint (__fch_n.84 __ct_0.79)  <289>;
    (__trgt.245 var=92) const ()  <306>;
    () void_br_bool_t13s_s2 (__tmp.240 __trgt.245)  <307>;
    (__either.246 var=90) undefined ()  <308>;
    if {
        {
            () if_expr (__either.246)  <120>;
            () chess_frequent_else ()  <121>;
            () chess_rear_then ()  <309>;
        } #15
        {
            (__trgt.247 var=93) const ()  <310>;
            () void_j_t21s_s2 (__trgt.247)  <311>;
        } #29 off=20
        {
            #37 off=11
            (__fch_c.132 var=61) load (__M_DMw.4 __adr_c.52 c.73)  <145>;
            (__tmp.133 var=62) __uchar___uchar___sint (__fch_c.132)  <146>;
            (__fch_ll.134 var=63) load (__M_DMw.4 __adr_ll.62 ll.78)  <147>;
            (__ct_1.142 var=68) const ()  <155>;
            (__fch_n.148 var=72) load (__M_DMw.4 __adr_n.47 n.71)  <162>;
            (__trgt.243 var=91) const ()  <303>;
            do {
                {
                    (__extDMb.113 var=17) entry (__extDMb.158 __extDMb.16)  <126>;
                    (i.119 var=23) entry (i.170 i.82)  <132>;
                    (__extPMb_void.120 var=24) entry (__extPMb_void.172 __extPMb_void.23)  <133>;
                } #18
                {
                    #20 off=12
                    (__fch_i.135 var=64) load (__M_DMw.4 __adr_i.67 i.119)  <148>;
                    (__tmp.137 var=66) __Pvoid__pl___Pvoid___sint (__fch_ll.134 __fch_i.135)  <150>;
                    (__M_DMb.138 var=3 __extDMb.139 var=17 __extPMb_void.140 var=24) store (__tmp.133 __tmp.137 __extDMb.113 __extPMb_void.120)  <151>;
                    call {
                        () chess_separator_scheduler ()  <152>;
                    } #21 off=13
                    #22 off=14
                    (__fch_i.141 var=67) load (__M_DMw.4 __adr_i.67 i.119)  <153>;
                    call {
                        () chess_separator_scheduler ()  <154>;
                    } #23 off=15
                    #24 off=16
                    (__tmp.144 var=70) __uint__pl___uint___uint (__fch_i.141 __ct_1.142)  <157>;
                    (__M_DMw.145 var=5 i.146 var=23) store (__tmp.144 __adr_i.67 i.119)  <158>;
                    call {
                        () chess_separator_scheduler ()  <160>;
                    } #26 off=17
                    #27 off=18
                    (__fch_i.147 var=71) load (__M_DMw.4 __adr_i.67 i.146)  <161>;
                    (__tmp.149 var=73) bool__lt___uint___uint (__fch_i.147 __fch_n.148)  <163>;
                    () void_br_bool_t13s_s2 (__tmp.149 __trgt.243)  <304>;
                    (__either.244 var=90) undefined ()  <305>;
                } #19
                {
                    () while_expr (__either.244)  <164>;
                    (__extDMb.158 var=17 __extDMb.159 var=17) exit (__extDMb.139)  <169>;
                    (i.170 var=23 i.171 var=23) exit (i.146)  <175>;
                    (__extPMb_void.172 var=24 __extPMb_void.173 var=24) exit (__extPMb_void.140)  <176>;
                } #28
            } #17 rng=[1,2147483647]
        } #16
        {
            (__extDMb.196 var=17) merge (__extDMb.16 __extDMb.159)  <188>;
            (i.197 var=23) merge (i.82 i.171)  <189>;
            (__extPMb_void.198 var=24) merge (__extPMb_void.23 __extPMb_void.173)  <190>;
        } #30
    } #14
    #33 off=21 nxt=-2
    (__rt.200 var=27) load (__M_DMw.4 __adr_s.57 s.75)  <192>;
    (__rd___sp.201 var=25) rd_res_reg (__R_SP.11 __sp.43)  <193>;
    (__ct_20s0.202 var=75) const ()  <194>;
    (__tmp.204 var=77) __Pvoid__pl___Pvoid___sint (__rd___sp.201 __ct_20s0.202)  <196>;
    (__R_SP.205 var=12 __sp.206 var=18) wr_res_reg (__tmp.204 __sp.43)  <197>;
    () void___rts_jr_w32 (__la.26)  <198>;
    (__rt.207 var=27 stl=X off=10) assign (__rt.200)  <199>;
    () out (__rt.207)  <200>;
    () sink (__extDMb.196)  <205>;
    () sink (__sp.206)  <206>;
    () sink (n.71)  <207>;
    () sink (c.73)  <208>;
    () sink (s.75)  <209>;
    () sink (ll.78)  <210>;
    () sink (i.197)  <211>;
    () sink (__extPMb_void.198)  <212>;
} #0
0 : 'src/string.c';
----------
0 : (0,321:0,0);
3 : (0,321:29,0);
4 : (0,321:29,0);
5 : (0,321:22,0);
6 : (0,321:22,0);
7 : (0,321:13,0);
8 : (0,321:13,0);
9 : (0,323:24,4);
10 : (0,323:24,4);
11 : (0,324:21,5);
12 : (0,324:21,5);
13 : (0,324:4,6);
14 : (0,324:4,6);
16 : (0,324:4,7);
17 : (0,324:4,7);
19 : (0,324:4,7);
20 : (0,325:14,8);
21 : (0,325:14,8);
22 : (0,324:31,0);
23 : (0,324:31,0);
24 : (0,324:31,0);
26 : (0,324:4,11);
27 : (0,324:25,12);
29 : (0,324:4,14);
33 : (0,326:4,17);
----------
49 : (0,321:6,0);
50 : (0,321:6,0);
52 : (0,321:6,0);
53 : (0,321:6,0);
55 : (0,321:36,0);
56 : (0,321:36,0);
58 : (0,321:36,0);
60 : (0,321:26,0);
61 : (0,321:26,0);
63 : (0,321:26,0);
65 : (0,321:19,0);
66 : (0,321:19,0);
68 : (0,321:19,0);
70 : (0,323:19,0);
71 : (0,323:19,0);
73 : (0,323:19,0);
75 : (0,324:16,0);
76 : (0,324:16,0);
78 : (0,324:16,0);
81 : (0,321:29,0);
82 : (0,321:29,0);
83 : (0,321:22,0);
84 : (0,321:22,0);
85 : (0,321:13,0);
86 : (0,321:13,0);
87 : (0,323:40,4);
88 : (0,323:24,4);
89 : (0,323:24,4);
90 : (0,324:21,0);
92 : (0,324:21,5);
93 : (0,324:21,5);
95 : (0,324:4,6);
120 : (0,324:4,6);
126 : (0,324:4,7);
132 : (0,324:4,7);
133 : (0,324:4,7);
145 : (0,325:31,7);
146 : (0,325:16,7);
147 : (0,325:8,7);
148 : (0,325:11,7);
150 : (0,325:10,7);
151 : (0,325:10,7);
152 : (0,325:14,8);
153 : (0,324:30,0);
154 : (0,324:31,0);
155 : (0,324:31,0);
157 : (0,324:31,0);
158 : (0,324:30,0);
160 : (0,324:4,11);
161 : (0,324:23,12);
162 : (0,324:27,12);
163 : (0,324:25,12);
164 : (0,324:4,12);
169 : (0,324:4,12);
175 : (0,324:4,12);
176 : (0,324:4,12);
188 : (0,324:4,16);
189 : (0,324:4,16);
190 : (0,324:4,16);
192 : (0,326:11,17);
193 : (0,326:4,0);
194 : (0,326:4,0);
196 : (0,326:4,0);
197 : (0,326:4,17);
198 : (0,326:4,17);
199 : (0,326:11,0);
289 : (0,324:4,6);
304 : (0,324:4,12);
307 : (0,324:4,6);

