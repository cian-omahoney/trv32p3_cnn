
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:12:47 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  void *memmove(void *, const void *, size_t)
Fmemmove : user_defined, called {
    fnm : "memmove" 'void *memmove(void *, const void *, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
***/

[
    0 : memmove typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __extPMb_void typ=u08 bnd=b stl=PMb
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   22 : __rt typ=w32 bnd=p tref=__Pvoid__
   23 : s1 typ=w32 bnd=p tref=__Pvoid__
   24 : s2 typ=w32 bnd=p tref=__Pvoid__
   25 : n typ=w32 bnd=p tref=size_t__
   26 : __ct_0S0 typ=w32 val=0S0 bnd=m
   28 : __tmp typ=w32 bnd=m
   31 : i typ=w32 bnd=m lscp=6 tref=size_t__
   33 : i typ=w32 bnd=m lscp=17 tref=__sint__
   35 : __tmp typ=bool bnd=m
   36 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   38 : __tmp typ=bool bnd=m
   41 : __fchtmp typ=w08 bnd=m
   44 : __ct_1 typ=w32 val=1f bnd=m
   47 : __tmp typ=bool bnd=m
   50 : __tmp typ=w32 bnd=m
   54 : __tmp typ=bool bnd=m
   56 : __fchtmp typ=w08 bnd=m
   63 : __tmp typ=bool bnd=m
   64 : __ct_0s0 typ=w32 val=0s0 bnd=m
   66 : __tmp typ=w32 bnd=m
   73 : __iv0_i typ=w32 bnd=m
   74 : __iv1_i typ=w32 bnd=m
   76 : __ct_4294967295 typ=w32 val=-1f bnd=m
   77 : __iv2_i typ=w32 bnd=m
   78 : __iv3_i typ=w32 bnd=m
   82 : __shv___iv0_i typ=w32 bnd=m
   83 : __shv___iv1_i typ=w32 bnd=m
   85 : __shv___iv2_i typ=w32 bnd=m
   86 : __shv___iv3_i typ=w32 bnd=m
  102 : __either typ=bool bnd=m
  103 : __trgt typ=t13s_s2 val=0j bnd=m
  104 : __trgt typ=t13s_s2 val=0j bnd=m
  105 : __trgt typ=t21s_s2 val=0j bnd=m
  106 : __trgt typ=t13s_s2 val=0j bnd=m
  107 : __trgt typ=t13s_s2 val=0j bnd=m
  108 : __trgt typ=t21s_s2 val=0j bnd=m
  109 : __trgt typ=t13s_s2 val=0j bnd=m
  110 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fmemmove {
    #88 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (__extPMb_void.18 var=19) source ()  <29>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (s1.24 var=23 stl=X off=11) inp ()  <35>;
    (s1.25 var=23) deassign (s1.24)  <36>;
    (s2.27 var=24 stl=X off=12) inp ()  <38>;
    (s2.28 var=24) deassign (s2.27)  <39>;
    (n.30 var=25 stl=X off=13) inp ()  <41>;
    (n.31 var=25) deassign (n.30)  <42>;
    (__rd___sp.33 var=20) rd_res_reg (__R_SP.11 __sp.17)  <44>;
    (__ct_0S0.34 var=26) const ()  <45>;
    (__tmp.36 var=28) __Pvoid__pl___Pvoid___sint (__rd___sp.33 __ct_0S0.34)  <47>;
    (__R_SP.37 var=12 __sp.38 var=18) wr_res_reg (__tmp.36 __sp.17)  <48>;
    (__ct_0.67 var=36) const ()  <79>;
    (__tmp.328 var=35) bool__ge___Pvoid___Pvoid (s2.28 s1.25)  <339>;
    (__trgt.350 var=109) const ()  <398>;
    () void_br_bool_t13s_s2 (__tmp.328 __trgt.350)  <399>;
    (__either.351 var=102) undefined ()  <400>;
    if {
        {
            () if_expr (__either.351)  <77>;
        } #5
        {
            #7 off=7
            (__tmp.337 var=38) bool__eq___uint___uint (n.31 __ct_0.67)  <370>;
            (__trgt.342 var=104) const ()  <383>;
            () void_br_bool_t13s_s2 (__tmp.337 __trgt.342)  <384>;
            (__either.343 var=102) undefined ()  <385>;
            if {
                {
                    () if_expr (__either.343)  <100>;
                    () chess_frequent_else ()  <101>;
                    () chess_rear_then ()  <386>;
                } #9
                {
                    (__trgt.344 var=105) const ()  <387>;
                    () void_j_t21s_s2 (__trgt.344)  <388>;
                } #15 off=11
                {
                    #116 off=8
                    (__ct_1.114 var=44) const ()  <126>;
                    (__trgt.340 var=103) const ()  <380>;
                    do {
                        {
                            (__extDMb.92 var=17) entry (__extDMb.126 __extDMb.16)  <106>;
                            (__extPMb_void.94 var=19) entry (__extPMb_void.130 __extPMb_void.18)  <108>;
                            (i.100 var=31) entry (i.142 __ct_0.67)  <114>;
                            (__iv0_i.289 var=73) entry (__iv0_i.290 s2.28)  <291>;
                            (__iv1_i.294 var=74) entry (__iv1_i.295 s1.25)  <295>;
                        } #12
                        {
                            (__fchtmp.108 var=41) load (__M_DMb.2 __iv0_i.289 __extDMb.92 __extPMb_void.94)  <122>;
                            (__M_DMb.111 var=3 __extDMb.112 var=17 __extPMb_void.113 var=19) store (__fchtmp.108 __iv1_i.294 __extDMb.92 __extPMb_void.94)  <125>;
                            (i.116 var=31) __uint__pl___uint___uint (i.100 __ct_1.114)  <128>;
                            (__tmp.117 var=47) bool__lt___uint___uint (i.116 n.31)  <129>;
                            (__shv___iv0_i.320 var=82) __Pvoid__pl___Pvoid___sint (__iv0_i.289 __ct_1.114)  <320>;
                            (__shv___iv1_i.321 var=83) __Pvoid__pl___Pvoid___sint (__iv1_i.294 __ct_1.114)  <321>;
                            () void_br_bool_t13s_s2 (__tmp.117 __trgt.340)  <381>;
                            (__either.341 var=102) undefined ()  <382>;
                        } #13 off=9
                        {
                            () while_expr (__either.341)  <130>;
                            (__extDMb.126 var=17 __extDMb.127 var=17) exit (__extDMb.112)  <135>;
                            (__extPMb_void.130 var=19 __extPMb_void.131 var=19) exit (__extPMb_void.113)  <137>;
                            (i.142 var=31 i.143 var=31) exit (i.116)  <143>;
                            (__iv0_i.290 var=73 __iv0_i.291 var=73) exit (__shv___iv0_i.320)  <292>;
                            (__iv1_i.295 var=74 __iv1_i.296 var=74) exit (__shv___iv1_i.321)  <296>;
                        } #14
                    } #11 rng=[1,2147483647]
                } #10
                {
                    (__extDMb.154 var=17) merge (__extDMb.16 __extDMb.127)  <149>;
                    (__extPMb_void.155 var=19) merge (__extPMb_void.18 __extPMb_void.131)  <150>;
                } #16
            } #8
        } #6
        {
            #18 off=1
            (__tmp.161 var=50) __uint__pl___uint___uint (n.31 __ct_4294967295.300)  <156>;
            (__ct_4294967295.300 var=76) const ()  <300>;
            (__tmp.336 var=54) bool__lt___sint___sint (__tmp.161 __ct_0.67)  <369>;
            (__trgt.347 var=107) const ()  <392>;
            () void_br_bool_t13s_s2 (__tmp.336 __trgt.347)  <393>;
            (__either.348 var=102) undefined ()  <394>;
            if {
                {
                    () if_expr (__either.348)  <179>;
                    () chess_frequent_else ()  <180>;
                    () chess_rear_then ()  <395>;
                } #20
                {
                    (__trgt.349 var=108) const ()  <396>;
                    () void_j_t21s_s2 (__trgt.349)  <397>;
                } #26 off=5
                {
                    #50 off=2
                    (__iv2_i.307 var=77) __Pvoid__pl___Pvoid___sint (s2.28 __tmp.161)  <307>;
                    (__iv3_i.312 var=78) __Pvoid__pl___Pvoid___sint (s1.25 __tmp.161)  <311>;
                    (__trgt.345 var=106) const ()  <389>;
                    do {
                        {
                            (__extDMb.188 var=17) entry (__extDMb.222 __extDMb.16)  <185>;
                            (__extPMb_void.190 var=19) entry (__extPMb_void.226 __extPMb_void.18)  <187>;
                            (i.199 var=33) entry (i.244 __tmp.161)  <196>;
                            (__iv2_i.303 var=77) entry (__iv2_i.304 __iv2_i.307)  <304>;
                            (__iv3_i.308 var=78) entry (__iv3_i.309 __iv3_i.312)  <308>;
                        } #23
                        {
                            (__fchtmp.203 var=56) load (__M_DMb.2 __iv2_i.303 __extDMb.188 __extPMb_void.190)  <200>;
                            (__M_DMb.205 var=3 __extDMb.206 var=17 __extPMb_void.207 var=19) store (__fchtmp.203 __iv3_i.308 __extDMb.188 __extPMb_void.190)  <202>;
                            (i.210 var=33) __sint__pl___sint___sint (i.199 __ct_4294967295.300)  <205>;
                            (__tmp.213 var=63) bool__ge___sint___sint (i.210 __ct_0.67)  <208>;
                            (__shv___iv2_i.322 var=85) __Pvoid__pl___Pvoid___sint (__iv2_i.303 __ct_4294967295.300)  <322>;
                            (__shv___iv3_i.323 var=86) __Pvoid__pl___Pvoid___sint (__iv3_i.308 __ct_4294967295.300)  <323>;
                            () void_br_bool_t13s_s2 (__tmp.213 __trgt.345)  <390>;
                            (__either.346 var=102) undefined ()  <391>;
                        } #24 off=3
                        {
                            () while_expr (__either.346)  <209>;
                            (__extDMb.222 var=17 __extDMb.223 var=17) exit (__extDMb.206)  <214>;
                            (__extPMb_void.226 var=19 __extPMb_void.227 var=19) exit (__extPMb_void.207)  <216>;
                            (i.244 var=33 i.245 var=33) exit (i.210)  <225>;
                            (__iv2_i.304 var=77 __iv2_i.305 var=77) exit (__shv___iv2_i.322)  <305>;
                            (__iv3_i.309 var=78 __iv3_i.310 var=78) exit (__shv___iv3_i.323)  <309>;
                        } #25
                    } #22 rng=[1,2147483647]
                } #21
                {
                    (__extDMb.250 var=17) merge (__extDMb.16 __extDMb.223)  <228>;
                    (__extPMb_void.251 var=19) merge (__extPMb_void.18 __extPMb_void.227)  <229>;
                } #27
            } #19
            #122 off=6
            (__trgt.352 var=110) const ()  <401>;
            () void_j_t21s_s2 (__trgt.352)  <402>;
        } #17
        {
            (__extDMb.254 var=17) merge (__extDMb.154 __extDMb.250)  <232>;
            (__extPMb_void.255 var=19) merge (__extPMb_void.155 __extPMb_void.251)  <233>;
        } #28
    } #4
    #30 off=13 nxt=-2
    (__rd___sp.260 var=20) rd_res_reg (__R_SP.11 __sp.38)  <238>;
    (__ct_0s0.261 var=64) const ()  <239>;
    (__tmp.263 var=66) __Pvoid__pl___Pvoid___sint (__rd___sp.260 __ct_0s0.261)  <241>;
    (__R_SP.264 var=12 __sp.265 var=18) wr_res_reg (__tmp.263 __sp.38)  <242>;
    () void___rts_jr_w32 (__la.21)  <243>;
    (__rt.266 var=22 stl=X off=10) assign (s1.25)  <244>;
    () out (__rt.266)  <245>;
    () sink (__extDMb.254)  <250>;
    () sink (__sp.265)  <251>;
    () sink (__extPMb_void.255)  <252>;
} #0
0 : 'src/string.c';
----------
0 : (0,31:0,0);
4 : (0,36:4,3);
6 : (0,37:8,4);
7 : (0,37:8,5);
8 : (0,37:8,5);
10 : (0,37:8,6);
11 : (0,37:8,6);
13 : (0,37:8,6);
15 : (0,37:8,13);
17 : (0,39:8,18);
18 : (0,39:8,19);
19 : (0,39:8,19);
21 : (0,39:8,20);
22 : (0,39:8,20);
24 : (0,39:8,20);
26 : (0,39:8,27);
30 : (0,40:4,33);
88 : (0,36:11,3);
----------
44 : (0,31:6,0);
45 : (0,31:6,0);
47 : (0,31:6,0);
48 : (0,31:6,0);
77 : (0,36:4,3);
79 : (0,37:25,0);
100 : (0,37:8,5);
106 : (0,37:8,6);
108 : (0,37:8,6);
114 : (0,37:8,6);
122 : (0,37:49,6);
125 : (0,37:41,6);
126 : (0,37:35,0);
128 : (0,37:35,0);
129 : (0,37:29,11);
130 : (0,37:8,11);
135 : (0,37:8,11);
137 : (0,37:8,11);
143 : (0,37:8,11);
149 : (0,37:8,15);
150 : (0,37:8,15);
156 : (0,39:22,18);
179 : (0,39:8,19);
185 : (0,39:8,20);
187 : (0,39:8,20);
196 : (0,39:8,20);
200 : (0,39:49,20);
202 : (0,39:41,20);
205 : (0,39:35,0);
208 : (0,39:28,25);
209 : (0,39:8,25);
214 : (0,39:8,25);
216 : (0,39:8,25);
225 : (0,39:8,25);
228 : (0,39:8,29);
229 : (0,39:8,29);
232 : (0,36:4,32);
233 : (0,36:4,32);
238 : (0,40:4,0);
239 : (0,40:4,0);
241 : (0,40:4,0);
242 : (0,40:4,33);
243 : (0,40:4,33);
244 : (0,40:11,0);
339 : (0,36:11,3);
369 : (0,39:8,19);
370 : (0,37:8,5);
381 : (0,37:8,11);
384 : (0,37:8,5);
390 : (0,39:8,25);
393 : (0,39:8,19);
399 : (0,36:4,3);

