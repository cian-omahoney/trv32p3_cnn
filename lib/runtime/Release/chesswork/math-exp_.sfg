
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 16:32:44 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern double exp(double)
Fexp : user_defined, called {
    fnm : "exp" 'double exp(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
!!  bool f64_lt(float64_t, float64_t)
Ff64_lt : user_defined, called {
    fnm : "f64_lt" 'bool f64_lt(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_sub(float64_t, float64_t)
Ff64_sub : user_defined, called {
    fnm : "f64_sub" 'float64_t f64_sub(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_mul(float64_t, float64_t)
Ff64_mul : user_defined, called {
    fnm : "f64_mul" 'float64_t f64_mul(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  long f64_to_i32_r_minMag(float64_t, bool)
Ff64_to_i32_r_minMag : user_defined, called {
    fnm : "f64_to_i32_r_minMag" 'long f64_to_i32_r_minMag(float64_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
}
!!  float64_t i32_to_f64(int)
Fi32_to_f64 : user_defined, called {
    fnm : "i32_to_f64" 'float64_t i32_to_f64(int)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float64_t f64_div(float64_t, float64_t)
Ff64_div : user_defined, called {
    fnm : "f64_div" 'float64_t f64_div(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : exp typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : _ZZ3expdE5ln2HI typ=w08 bnd=i sz=16 algn=4 stl=DMb tref=__A2__fdouble_DMb
   20 : _ZZ3expdE5ln2LO typ=w08 bnd=i sz=16 algn=4 stl=DMb tref=__A2__fdouble_DMb
   21 : _ZZ3expdE4halF typ=w08 bnd=i sz=16 algn=4 stl=DMb tref=__A2__fdouble_DMb
   22 : _ZZ3expdE4halF_low typ=w08 bnd=b stl=DMb
   23 : _ZZ3expdE4halF_high typ=w08 bnd=b stl=DMb
   24 : _ZZ3expdE5ln2HI_low typ=w08 bnd=b stl=DMb
   25 : _ZZ3expdE5ln2HI_high typ=w08 bnd=b stl=DMb
   26 : _ZZ3expdE5ln2LO_low typ=w08 bnd=b stl=DMb
   27 : _ZZ3expdE5ln2LO_high typ=w08 bnd=b stl=DMb
   28 : __rd___sp typ=w32 bnd=m
   30 : __ptr_ln2HI typ=w32 val=0a bnd=m adro=19
   32 : __ptr_ln2LO typ=w32 val=0a bnd=m adro=20
   34 : __ptr_halF typ=w32 val=0a bnd=m adro=21
   35 : __la typ=w32 bnd=p tref=w32__
   37 : __rt_low typ=w32 bnd=m tref=__uint__
   38 : __rt_high typ=w32 bnd=m tref=__uint__
   40 : x_low typ=w32 bnd=m tref=__uint__
   41 : x_high typ=w32 bnd=m tref=__uint__
   42 : __ct_0S0 typ=w32 val=0S0 bnd=m
   44 : __tmp typ=w32 bnd=m
   49 : hx typ=w32 bnd=m tref=u_int32_t__
   52 : k typ=w32 bnd=m tref=int32_t__
   58 : __tmpb1_Fexp typ=w32 bnd=m lscp=563 tref=__uint__
   64 : __tmpb4_Fexp typ=w32 bnd=m lscp=205 tref=__uint__
   76 : __ct_31 typ=w32 val=31f bnd=m
   78 : __tmp typ=w32 bnd=m
   79 : __ct_1 typ=w32 val=1f bnd=m
   81 : __tmp typ=w32 bnd=m
   83 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   86 : __ct_1082535490 typ=w32 val=1082535490f bnd=m
   88 : __tmp typ=bool bnd=m
   89 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
   91 : __tmp typ=bool bnd=m
   95 : __ct_1048575 typ=w32 val=1048575f bnd=m
   97 : __tmp typ=w32 bnd=m
   98 : __tmp typ=w32 bnd=m
   99 : __ct_0 typ=t20s_rp12 val=0f bnd=m
  101 : __tmp typ=bool bnd=m
  105 : __tmp typ=bool bnd=m
  109 : __ct_0s0 typ=w32 val=0s0 bnd=m
  111 : __tmp typ=w32 bnd=m
  114 : __tmp typ=bool bnd=m
  122 : __tmp typ=bool bnd=m
  128 : __ct_1071001154 typ=w32 val=1071001154f bnd=m
  130 : __tmp typ=bool bnd=m
  131 : __ct_1072734898 typ=w32 val=1072734898f bnd=m
  133 : __tmp typ=bool bnd=m
  136 : __tmp typ=w32 bnd=m
  137 : __tmp typ=w32 bnd=m
  139 : __fch__ZZ3expdE5ln2HI_low typ=w32 bnd=m
  140 : __ct_4 typ=w32 val=4f bnd=m
  142 : __fch__ZZ3expdE5ln2HI_high typ=w32 bnd=m
  147 : __tmp typ=w32 bnd=m
  149 : __fch__ZZ3expdE5ln2LO_low typ=w32 bnd=m
  152 : __fch__ZZ3expdE5ln2LO_high typ=w32 bnd=m
  163 : __tmp typ=w32 bnd=m
  165 : __fch__ZZ3expdE4halF_low typ=w32 bnd=m
  168 : __fch__ZZ3expdE4halF_high typ=w32 bnd=m
  176 : __fch__ZZ3expdE5ln2HI_low typ=w32 bnd=m
  179 : __fch__ZZ3expdE5ln2HI_high typ=w32 bnd=m
  186 : __fch__ZZ3expdE5ln2LO_low typ=w32 bnd=m
  189 : __fch__ZZ3expdE5ln2LO_high typ=w32 bnd=m
  192 : __ct_1043333120 typ=t20s_rp12 val=254720f bnd=m
  194 : __tmp typ=bool bnd=m
  200 : __tmp typ=bool bnd=m
  232 : __tmp typ=bool bnd=m
  252 : __ct_m1021 typ=w32 val=-1021f bnd=m
  254 : __tmp typ=bool bnd=m
  261 : __ct_20 typ=w32 val=20f bnd=m
  263 : __tmp typ=w32 bnd=m
  281 : __ct_1000 typ=w32 val=1000f bnd=m
  283 : __tmp typ=w32 bnd=m
  286 : __tmp typ=w32 bnd=m
  312 : __linex typ=w32 bnd=m
  313 : __linex typ=w32 bnd=m
  319 : __shv___tmp typ=w32 bnd=m
  320 : __shv___tmp typ=w32 bnd=m
  321 : __shv___ptr_ln2HI typ=w32 bnd=m
  322 : __shv___ptr_ln2LO typ=w32 bnd=m
  323 : __shv___tmp typ=w32 bnd=m
  324 : __ct_3 typ=w32 val=3f bnd=m
  359 : a_low typ=w32 bnd=m tref=__uint__
  360 : a_high typ=w32 bnd=m tref=__uint__
  361 : b_low typ=w32 bnd=m tref=__uint__
  362 : b_high typ=w32 bnd=m tref=__uint__
  363 : f64_lt typ=t21s_s2 val=0r bnd=m
  364 : __link typ=w32 bnd=m
  365 : __tmp typ=w32 bnd=m
  431 : __ct_3576508497 typ=w32 val=-718458799f bnd=m
  432 : __ct_3230091536 typ=w32 val=-1064875760f bnd=m
  439 : __ct_4277811695 typ=w32 val=-17155601f bnd=m
  440 : __ct_1072693248 typ=t20s_rp12 val=261888f bnd=m
  454 : a_low typ=w32 bnd=m tref=__uint__
  455 : a_high typ=w32 bnd=m tref=__uint__
  456 : b_low typ=w32 bnd=m tref=__uint__
  457 : b_high typ=w32 bnd=m tref=__uint__
  458 : f64_add typ=t21s_s2 val=0r bnd=m
  459 : __link typ=w32 bnd=m
  461 : __tmp typ=w32 bnd=m
  462 : __tmp typ=w32 bnd=m
  467 : a_low typ=w32 bnd=m tref=__uint__
  468 : a_high typ=w32 bnd=m tref=__uint__
  469 : b_low typ=w32 bnd=m tref=__uint__
  470 : b_high typ=w32 bnd=m tref=__uint__
  471 : f64_sub typ=t21s_s2 val=0r bnd=m
  472 : __link typ=w32 bnd=m
  474 : __tmp typ=w32 bnd=m
  475 : __tmp typ=w32 bnd=m
  480 : a_low typ=w32 bnd=m tref=__uint__
  481 : a_high typ=w32 bnd=m tref=__uint__
  482 : b_low typ=w32 bnd=m tref=__uint__
  483 : b_high typ=w32 bnd=m tref=__uint__
  484 : f64_mul typ=t21s_s2 val=0r bnd=m
  485 : __link typ=w32 bnd=m
  487 : __tmp typ=w32 bnd=m
  488 : __tmp typ=w32 bnd=m
  492 : a_low typ=w32 bnd=m tref=__uint__
  493 : a_high typ=w32 bnd=m tref=__uint__
  494 : __tmp typ=w32 bnd=m
  495 : f64_to_i32_r_minMag typ=t21s_s2 val=0r bnd=m
  496 : __link typ=w32 bnd=m
  501 : a typ=w32 bnd=m tref=__sint__
  502 : i32_to_f64 typ=t21s_s2 val=0r bnd=m
  503 : __link typ=w32 bnd=m
  505 : __tmp typ=w32 bnd=m
  506 : __tmp typ=w32 bnd=m
  530 : a_low typ=w32 bnd=m tref=__uint__
  531 : a_high typ=w32 bnd=m tref=__uint__
  532 : b_low typ=w32 bnd=m tref=__uint__
  533 : b_high typ=w32 bnd=m tref=__uint__
  534 : f64_div typ=t21s_s2 val=0r bnd=m
  535 : __link typ=w32 bnd=m
  537 : __tmp typ=w32 bnd=m
  538 : __tmp typ=w32 bnd=m
  570 : __ct_1697350398 typ=w32 val=1697350398f bnd=m
  571 : __ct_1073157447 typ=w32 val=1073157447f bnd=m
  572 : __ct_2281731484 typ=w32 val=-2013235812f bnd=m
  573 : __ct_2117592124 typ=w32 val=2117592124f bnd=m
  574 : __ct_1925096656 typ=w32 val=1925096656f bnd=m
  575 : __ct_1046886249 typ=w32 val=1046886249f bnd=m
  576 : __ct_3318901745 typ=w32 val=-976065551f bnd=m
  577 : __ct_3199974721 typ=w32 val=-1094992575f bnd=m
  578 : __ct_2938494508 typ=w32 val=-1356472788f bnd=m
  579 : __ct_1058100842 typ=w32 val=1058100842f bnd=m
  580 : __ct_381599123 typ=w32 val=381599123f bnd=m
  581 : __ct_3211182444 typ=w32 val=-1083784852f bnd=m
  582 : __ct_1431655742 typ=w32 val=1431655742f bnd=m
  583 : __ct_1069897045 typ=w32 val=1069897045f bnd=m
  584 : __ct_1073741824 typ=t20s_rp12 val=262144f bnd=m
  585 : __ct_24117248 typ=t20s_rp12 val=5888f bnd=m
  594 : __either typ=bool bnd=m
  595 : __trgt typ=t13s_s2 val=0j bnd=m
  596 : __trgt typ=t21s_s2 val=0j bnd=m
  597 : __trgt typ=t13s_s2 val=0j bnd=m
  598 : __trgt typ=t13s_s2 val=0j bnd=m
  599 : __trgt typ=t13s_s2 val=0j bnd=m
  600 : __trgt typ=t13s_s2 val=0j bnd=m
  601 : __trgt typ=t13s_s2 val=0j bnd=m
  602 : __trgt typ=t21s_s2 val=0j bnd=m
  603 : __trgt typ=t13s_s2 val=0j bnd=m
  604 : __trgt typ=t21s_s2 val=0j bnd=m
  605 : __trgt typ=t13s_s2 val=0j bnd=m
  606 : __trgt typ=t13s_s2 val=0j bnd=m
  607 : __trgt typ=t21s_s2 val=0j bnd=m
  608 : __trgt typ=t13s_s2 val=0j bnd=m
  609 : __trgt typ=t21s_s2 val=0j bnd=m
  610 : __trgt typ=t13s_s2 val=0j bnd=m
  611 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fexp {
    #258 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (_ZZ3expdE4halF_low.21 var=22) source ()  <32>;
    (_ZZ3expdE4halF_high.22 var=23) source ()  <33>;
    (_ZZ3expdE5ln2HI_low.23 var=24) source ()  <34>;
    (_ZZ3expdE5ln2HI_high.24 var=25) source ()  <35>;
    (_ZZ3expdE5ln2LO_low.25 var=26) source ()  <36>;
    (_ZZ3expdE5ln2LO_high.26 var=27) source ()  <37>;
    (__la.34 var=35 stl=X off=1) inp ()  <45>;
    (__la.35 var=35) deassign (__la.34)  <46>;
    (x_low.43 var=40 stl=X off=12) inp ()  <54>;
    (x_low.44 var=40) deassign (x_low.43)  <55>;
    (x_high.47 var=41 stl=X off=13) inp ()  <58>;
    (x_high.48 var=41) deassign (x_high.47)  <59>;
    (__rd___sp.51 var=28) rd_res_reg (__R_SP.11 __sp.17)  <62>;
    (__ct_0S0.52 var=42) const ()  <63>;
    (__tmp.54 var=44) __Pvoid__pl___Pvoid___sint (__rd___sp.51 __ct_0S0.52)  <65>;
    (__R_SP.55 var=12 __sp.56 var=18) wr_res_reg (__tmp.54 __sp.17)  <66>;
    (__ct_31.96 var=76) const ()  <107>;
    (__tmp.98 var=78) __uint__rs___uint___sint (x_high.48 __ct_31.96)  <109>;
    (__ct_1.99 var=79) const ()  <110>;
    (__tmp.101 var=81) __uint__ad___uint___uint (__tmp.98 __ct_1.99)  <112>;
    (__ct_2147483647.103 var=83) const ()  <114>;
    (hx.105 var=49) __uint__ad___uint___uint (x_high.48 __ct_2147483647.103)  <116>;
    (__ct_1082535490.106 var=86) const ()  <117>;
    (__ct_0.208 var=99) const ()  <221>;
    (__rd___sp.307 var=28) rd_res_reg (__R_SP.11 __sp.56)  <322>;
    (__ct_0s0.308 var=109) const ()  <323>;
    (__tmp.310 var=111) __Pvoid__pl___Pvoid___sint (__rd___sp.307 __ct_0s0.308)  <325>;
    (f64_lt.1566 var=363) const ()  <1805>;
    (f64_add.1769 var=458) const ()  <2213>;
    (a_low.2536 var=467) undefined ()  <3126>;
    (a_high.2540 var=468) undefined ()  <3130>;
    (b_low.2544 var=469) undefined ()  <3134>;
    (b_high.2548 var=470) undefined ()  <3138>;
    (__tmp.2554 var=88) bool__lt___uint___uint (hx.105 __ct_1082535490.106)  <3247>;
    (__trgt.2587 var=601) const ()  <3352>;
    () void_br_bool_t13s_s2 (__tmp.2554 __trgt.2587)  <3353>;
    (__either.2588 var=594) undefined ()  <3354>;
    if {
        {
            () if_expr (__either.2588)  <164>;
        } #5
        {
        } #45 off=23
        {
            #7 off=1
            (__ct_2146435072.153 var=89) const ()  <165>;
            (__tmp.155 var=91) bool__ge___uint___uint (hx.105 __ct_2146435072.153)  <167>;
            (__trgt.2581 var=598) const ()  <3340>;
            () void_br_bool_t13s_s2 (__tmp.155 __trgt.2581)  <3341>;
            (__either.2582 var=594) undefined ()  <3342>;
            if {
                {
                    () if_expr (__either.2582)  <212>;
                    () chess_rear_then ()  <3343>;
                } #9
                {
                    #265 off=3
                    (__ct_1048575.204 var=95) const ()  <217>;
                    (__tmp.206 var=97) __uint__ad___uint___uint (hx.105 __ct_1048575.204)  <219>;
                    (__tmp.207 var=98) __uint__or___uint___uint (__tmp.206 x_low.44)  <220>;
                    (__tmp.210 var=101) bool__ne___uint___uint (__tmp.207 __ct_0.208)  <223>;
                    (__trgt.2579 var=597) const ()  <3336>;
                    () void_br_bool_t13s_s2 (__tmp.210 __trgt.2579)  <3337>;
                    (__either.2580 var=594) undefined ()  <3338>;
                    if {
                        {
                            () if_expr (__either.2580)  <268>;
                            () chess_rear_then ()  <3339>;
                        } #13
                        {
                            #597 off=8
                            (__R_SP.2558 var=12 __sp.2559 var=18) wr_res_reg (__tmp.310 __sp.56)  <3300>;
                            () void_j_t21s_s2 (f64_add.1769)  <3307>;
                            call {
                                (a_low.1771 var=454 stl=X off=12) assign (x_low.44)  <2215>;
                                (a_high.1772 var=455 stl=X off=13) assign (x_high.48)  <2216>;
                                (b_low.1773 var=456 stl=X off=14) assign (x_low.44)  <2217>;
                                (b_high.1774 var=457 stl=X off=15) assign (x_high.48)  <2218>;
                                (__la.1775 var=35 stl=X off=1) assign (__la.35)  <2219>;
                                (__tmp.1776 var=461 stl=X off=10 __tmp.1777 var=462 stl=X off=11) Ff64_add (__la.1775 a_low.1771 a_high.1772 b_low.1773 b_high.1774)  <2220>;
                                (__tmp.1779 var=461) deassign (__tmp.1776)  <2222>;
                                (__tmp.1781 var=462) deassign (__tmp.1777)  <2224>;
                            } #275 off=9
                            #598 off=10 nxt=-2
                            (__rt_low.2560 var=37 stl=X off=10) assign (__tmp.1779)  <3302>;
                            () out (__rt_low.2560)  <3303>;
                            (__rt_high.2561 var=38 stl=X off=11) assign (__tmp.1781)  <3304>;
                            () out (__rt_high.2561)  <3305>;
                            () sink (__sp.2559)  <3306>;
                            (__rt_low.2570 var=37) never ()  <3325>;
                            (__rt_high.2571 var=38) never ()  <3326>;
                        } #14
                        {
                            #16 off=4
                            (__tmp.258 var=105) bool__eq___sint___sint (__tmp.101 __ct_0.208)  <272>;
                            (__trgt.2576 var=595) const ()  <3331>;
                            () void_br_bool_t13s_s2 (__tmp.258 __trgt.2576)  <3332>;
                            (__either.2577 var=594) undefined ()  <3333>;
                            if {
                                {
                                    () if_expr (__either.2577)  <317>;
                                } #18
                                {
                                } #19 off=6
                                {
                                    (__trgt.2578 var=596) const ()  <3334>;
                                    () void_j_t21s_s2 (__trgt.2578)  <3335>;
                                } #20 off=5
                                {
                                    (__rt_low.1500 var=37) merge (x_low.44 __ct_0.208)  <1691>;
                                    (__rt_high.1506 var=38) merge (x_high.48 __ct_0.208)  <1697>;
                                } #21
                            } #17
                        } #15
                        {
                            (__rt_low.1497 var=37) merge (__rt_low.2570 __rt_low.1500)  <1688>;
                            (__rt_high.1503 var=38) merge (__rt_high.2571 __rt_high.1506)  <1694>;
                        } #22
                    } #12
                    #24 off=11 nxt=-2
                    (__R_SP.311 var=12 __sp.312 var=18) wr_res_reg (__tmp.310 __sp.56)  <326>;
                    () void___rts_jr_w32 (__la.35)  <327>;
                    (__rt_low.314 var=37 stl=X off=10) assign (__rt_low.1497)  <329>;
                    () out (__rt_low.314)  <330>;
                    (__rt_high.316 var=38 stl=X off=11) assign (__rt_high.1503)  <332>;
                    () out (__rt_high.316)  <333>;
                    () sink (__sp.312)  <341>;
                } #10
                {
                } #25 off=2
                {
                } #26
            } #8
            #234 off=12
            (__link.1718 var=364) w32_jal_t21s_s2 (f64_lt.1566)  <2071>;
            (__ct_4277811695.1749 var=439) const ()  <2145>;
            call {
                (a_low.1720 var=359 stl=X off=11) assign (__ct_4277811695.1749)  <2073>;
                (a_high.1721 var=360 stl=X off=12) assign (__ct_1082535490.106)  <2074>;
                (b_low.1722 var=361 stl=X off=13) assign (x_low.44)  <2075>;
                (b_high.1723 var=362 stl=X off=14) assign (x_high.48)  <2076>;
                (__link.1724 var=364 stl=X off=1) assign (__link.1718)  <2077>;
                (__tmp.1725 var=365 stl=X off=10) Ff64_lt (__link.1724 a_low.1720 a_high.1721 b_low.1722 b_high.1723)  <2078>;
                (__tmp.1726 var=365) deassign (__tmp.1725)  <2079>;
            } #235 off=13
            #236 off=14
            (__tmp.1727 var=114) bool__ne___sint___sint (__tmp.1726 __ct_0.208)  <2080>;
            (__trgt.2583 var=599) const ()  <3344>;
            () void_br_bool_t13s_s2 (__tmp.1727 __trgt.2583)  <3345>;
            (__either.2584 var=594) undefined ()  <3346>;
            if {
                {
                    () if_expr (__either.2584)  <486>;
                    () chess_rear_then ()  <3347>;
                } #29
                {
                    (__R_SP.460 var=12 __sp.461 var=18) wr_res_reg (__tmp.310 __sp.56)  <493>;
                    () void___rts_jr_w32 (__la.35)  <494>;
                    (__rt_low.463 var=37 stl=X off=10) assign (__ct_0.208)  <496>;
                    () out (__rt_low.463)  <497>;
                    (__rt_high.465 var=38 stl=X off=11) assign (__ct_2146435072.153)  <499>;
                    () out (__rt_high.465)  <500>;
                    () sink (__sp.461)  <508>;
                } #33 off=16 nxt=-2
                {
                } #34 off=15
                {
                } #35
            } #28
            #124 off=17
            (__link.1567 var=364) w32_jal_t21s_s2 (f64_lt.1566)  <1806>;
            (__ct_3576508497.1707 var=431) const ()  <2019>;
            (__ct_3230091536.1708 var=432) const ()  <2021>;
            call {
                (a_low.1569 var=359 stl=X off=11) assign (x_low.44)  <1808>;
                (a_high.1570 var=360 stl=X off=12) assign (x_high.48)  <1809>;
                (b_low.1571 var=361 stl=X off=13) assign (__ct_3576508497.1707)  <1810>;
                (b_high.1572 var=362 stl=X off=14) assign (__ct_3230091536.1708)  <1811>;
                (__link.1573 var=364 stl=X off=1) assign (__link.1567)  <1812>;
                (__tmp.1574 var=365 stl=X off=10) Ff64_lt (__link.1573 a_low.1569 a_high.1570 b_low.1571 b_high.1572)  <1813>;
                (__tmp.1575 var=365) deassign (__tmp.1574)  <1814>;
            } #125 off=18
            #126 off=19
            (__tmp.1576 var=122) bool__ne___sint___sint (__tmp.1575 __ct_0.208)  <1815>;
            (__trgt.2585 var=600) const ()  <3348>;
            () void_br_bool_t13s_s2 (__tmp.1576 __trgt.2585)  <3349>;
            (__either.2586 var=594) undefined ()  <3350>;
            if {
                {
                    () if_expr (__either.2586)  <653>;
                    () chess_rear_then ()  <3351>;
                } #38
                {
                    (__R_SP.609 var=12 __sp.610 var=18) wr_res_reg (__tmp.310 __sp.56)  <660>;
                    () void___rts_jr_w32 (__la.35)  <661>;
                    (__rt_low.612 var=37 stl=X off=10) assign (__ct_0.208)  <663>;
                    () out (__rt_low.612)  <664>;
                    (__rt_high.614 var=38 stl=X off=11) assign (__ct_0.208)  <666>;
                    () out (__rt_high.614)  <667>;
                    () sink (__sp.610)  <675>;
                } #42 off=21 nxt=-2
                {
                } #43 off=20
                {
                } #44
            } #37
            #609 off=22
            (__trgt.2589 var=602) const ()  <3355>;
            () void_j_t21s_s2 (__trgt.2589)  <3356>;
        } #6
        {
        } #46
    } #4
    #129 off=24
    (__ct_1071001154.749 var=128) const ()  <817>;
    (__tmp.1580 var=130) bool__lt___uint___uint (__ct_1071001154.749 hx.105)  <1822>;
    (__ct_1072693248.1750 var=440) const ()  <2147>;
    (f64_sub.1790 var=471) const ()  <2236>;
    (f64_mul.1811 var=484) const ()  <2259>;
    (__trgt.2598 var=608) const ()  <3371>;
    () void_br_bool_t13s_s2 (__tmp.1580 __trgt.2598)  <3372>;
    (__either.2599 var=594) undefined ()  <3373>;
    if {
        {
            () if_expr (__either.2599)  <864>;
        } #49
        {
            #51 off=38
            (__ptr_ln2HI.28 var=30) const ()  <39>;
            (__ptr_ln2LO.30 var=32) const ()  <41>;
            (__ct_1072734898.796 var=131) const ()  <865>;
            (__tmp.798 var=133) bool__lt___uint___uint (hx.105 __ct_1072734898.796)  <867>;
            (__tmp.845 var=136) __sint__ls___sint___sint (__tmp.101 __ct_3.1524)  <915>;
            (__ct_4.850 var=140) const ()  <920>;
            (__ct_3.1524 var=324) const ()  <1715>;
            (__trgt.2590 var=603) const ()  <3357>;
            () void_br_bool_t13s_s2 (__tmp.798 __trgt.2590)  <3358>;
            (__either.2591 var=594) undefined ()  <3359>;
            if {
                {
                    () if_expr (__either.2591)  <912>;
                } #53
                {
                    #297 off=54
                    (__tmp.846 var=137) __Pvoid__pl___Pvoid___sint (__ptr_ln2HI.28 __tmp.845)  <916>;
                    (__fch__ZZ3expdE5ln2HI_low.848 var=139) load (__M_DMw.4 __tmp.846 _ZZ3expdE5ln2HI_low.23)  <918>;
                    (__fch__ZZ3expdE5ln2HI_high.853 var=142) load (__M_DMw.4 __shv___tmp.1519 _ZZ3expdE5ln2HI_high.24)  <923>;
                    (__shv___tmp.1519 var=319) __Pvoid__pl___Pvoid___sint (__tmp.846 __ct_4.850)  <1710>;
                    (__link.1791 var=472) w32_jal_t21s_s2 (f64_sub.1790)  <2237>;
                    call {
                        (a_low.1792 var=467 stl=X off=12) assign (x_low.44)  <2238>;
                        (a_high.1793 var=468 stl=X off=13) assign (x_high.48)  <2239>;
                        (b_low.1794 var=469 stl=X off=14) assign (__fch__ZZ3expdE5ln2HI_low.848)  <2240>;
                        (b_high.1795 var=470 stl=X off=15) assign (__fch__ZZ3expdE5ln2HI_high.853)  <2241>;
                        (__link.1796 var=472 stl=X off=1) assign (__link.1791)  <2242>;
                        (__tmp.1797 var=474 stl=X off=10 __tmp.1798 var=475 stl=X off=11) Ff64_sub (__link.1796 a_low.1792 a_high.1793 b_low.1794 b_high.1795)  <2243>;
                        (__tmp.1800 var=474) deassign (__tmp.1797)  <2245>;
                        (__tmp.1802 var=475) deassign (__tmp.1798)  <2247>;
                    } #298 off=55
                    #294 off=56
                    (__tmp.859 var=147) __Pvoid__pl___Pvoid___sint (__ptr_ln2LO.30 __tmp.845)  <929>;
                    (__fch__ZZ3expdE5ln2LO_low.861 var=149) load (__M_DMw.4 __tmp.859 _ZZ3expdE5ln2LO_low.25)  <931>;
                    (__fch__ZZ3expdE5ln2LO_high.866 var=152) load (__M_DMw.4 __shv___tmp.1520 _ZZ3expdE5ln2LO_high.26)  <936>;
                    (__linex.1493 var=312) __sint__ls___sint___sint (__tmp.101 __ct_1.99)  <1684>;
                    (__linex.1494 var=313) __sint__mi___sint___sint (__ct_1.99 __linex.1493)  <1685>;
                    (__shv___tmp.1520 var=320) __Pvoid__pl___Pvoid___sint (__tmp.859 __ct_4.850)  <1711>;
                } #54
                {
                    #329 off=39
                    (__link.1812 var=485) w32_jal_t21s_s2 (f64_mul.1811)  <2260>;
                    (__ct_1697350398.2500 var=570) const ()  <3075>;
                    (__ct_1073157447.2501 var=571) const ()  <3077>;
                    call {
                        (a_low.1813 var=480 stl=X off=12) assign (__ct_1697350398.2500)  <2261>;
                        (a_high.1814 var=481 stl=X off=13) assign (__ct_1073157447.2501)  <2262>;
                        (b_low.1815 var=482 stl=X off=14) assign (x_low.44)  <2263>;
                        (b_high.1816 var=483 stl=X off=15) assign (x_high.48)  <2264>;
                        (__link.1817 var=485 stl=X off=1) assign (__link.1812)  <2265>;
                        (__tmp.1818 var=487 stl=X off=10 __tmp.1819 var=488 stl=X off=11) Ff64_mul (__link.1817 a_low.1813 a_high.1814 b_low.1815 b_high.1816)  <2266>;
                        (__tmp.1821 var=487) deassign (__tmp.1818)  <2268>;
                        (__tmp.1823 var=488) deassign (__tmp.1819)  <2270>;
                    } #330 off=40
                    #335 off=41
                    (__ptr_halF.32 var=34) const ()  <43>;
                    (__tmp.878 var=163) __Pvoid__pl___Pvoid___sint (__ptr_halF.32 __tmp.845)  <948>;
                    (__fch__ZZ3expdE4halF_low.880 var=165) load (__M_DMw.4 __tmp.878 _ZZ3expdE4halF_low.21)  <950>;
                    (__fch__ZZ3expdE4halF_high.885 var=168) load (__M_DMw.4 __shv___tmp.1523 _ZZ3expdE4halF_high.22)  <955>;
                    (__shv___tmp.1523 var=323) __Pvoid__pl___Pvoid___sint (__tmp.878 __ct_4.850)  <1714>;
                    (__link.1833 var=459) w32_jal_t21s_s2 (f64_add.1769)  <2283>;
                    call {
                        (a_low.1834 var=454 stl=X off=12) assign (__tmp.1821)  <2284>;
                        (a_high.1835 var=455 stl=X off=13) assign (__tmp.1823)  <2285>;
                        (b_low.1836 var=456 stl=X off=14) assign (__fch__ZZ3expdE4halF_low.880)  <2286>;
                        (b_high.1837 var=457 stl=X off=15) assign (__fch__ZZ3expdE4halF_high.885)  <2287>;
                        (__link.1838 var=459 stl=X off=1) assign (__link.1833)  <2288>;
                        (__tmp.1839 var=461 stl=X off=10 __tmp.1840 var=462 stl=X off=11) Ff64_add (__link.1838 a_low.1834 a_high.1835 b_low.1836 b_high.1837)  <2289>;
                        (__tmp.1842 var=461) deassign (__tmp.1839)  <2291>;
                        (__tmp.1844 var=462) deassign (__tmp.1840)  <2293>;
                    } #336 off=42
                    #341 off=43
                    (f64_to_i32_r_minMag.1851 var=495) const ()  <2303>;
                    (__link.1852 var=496) w32_jal_t21s_s2 (f64_to_i32_r_minMag.1851)  <2304>;
                    call {
                        (a_low.1853 var=492 stl=X off=11) assign (__tmp.1842)  <2305>;
                        (a_high.1854 var=493 stl=X off=12) assign (__tmp.1844)  <2306>;
                        (__tmp.1855 var=494 stl=X off=13) assign (__ct_1.99)  <2307>;
                        (__link.1856 var=496 stl=X off=1) assign (__link.1852)  <2308>;
                        (k.1857 var=52 stl=X off=10) Ff64_to_i32_r_minMag (__link.1856 a_low.1853 a_high.1854 __tmp.1855)  <2309>;
                        (k.1858 var=52) deassign (k.1857)  <2310>;
                    } #342 off=44
                    #347 off=45
                    (i32_to_f64.1861 var=502) const ()  <2316>;
                    (__link.1862 var=503) w32_jal_t21s_s2 (i32_to_f64.1861)  <2317>;
                    call {
                        (a.1863 var=501 stl=X off=12) assign (k.1858)  <2318>;
                        (__link.1864 var=503 stl=X off=1) assign (__link.1862)  <2319>;
                        (__tmp.1865 var=505 stl=X off=10 __tmp.1866 var=506 stl=X off=11) Fi32_to_f64 (__link.1864 a.1863)  <2320>;
                        (__tmp.1868 var=505) deassign (__tmp.1865)  <2322>;
                        (__tmp.1870 var=506) deassign (__tmp.1866)  <2324>;
                    } #348 off=46
                    #353 off=47
                    (__fch__ZZ3expdE5ln2HI_low.894 var=176) load (__M_DMw.4 __ptr_ln2HI.28 _ZZ3expdE5ln2HI_low.23)  <964>;
                    (__fch__ZZ3expdE5ln2HI_high.899 var=179) load (__M_DMw.4 __shv___ptr_ln2HI.1521 _ZZ3expdE5ln2HI_high.24)  <969>;
                    (__shv___ptr_ln2HI.1521 var=321) __Pvoid__pl___Pvoid___sint (__ptr_ln2HI.28 __ct_4.850)  <1712>;
                    (__link.1880 var=485) w32_jal_t21s_s2 (f64_mul.1811)  <2337>;
                    call {
                        (a_low.1881 var=480 stl=X off=12) assign (__tmp.1868)  <2338>;
                        (a_high.1882 var=481 stl=X off=13) assign (__tmp.1870)  <2339>;
                        (b_low.1883 var=482 stl=X off=14) assign (__fch__ZZ3expdE5ln2HI_low.894)  <2340>;
                        (b_high.1884 var=483 stl=X off=15) assign (__fch__ZZ3expdE5ln2HI_high.899)  <2341>;
                        (__link.1885 var=485 stl=X off=1) assign (__link.1880)  <2342>;
                        (__tmp.1886 var=487 stl=X off=10 __tmp.1887 var=488 stl=X off=11) Ff64_mul (__link.1885 a_low.1881 a_high.1882 b_low.1883 b_high.1884)  <2343>;
                        (__tmp.1889 var=487) deassign (__tmp.1886)  <2345>;
                        (__tmp.1891 var=488) deassign (__tmp.1887)  <2347>;
                    } #354 off=48
                    #359 off=49
                    (__link.1901 var=472) w32_jal_t21s_s2 (f64_sub.1790)  <2360>;
                    call {
                        (a_low.1902 var=467 stl=X off=12) assign (x_low.44)  <2361>;
                        (a_high.1903 var=468 stl=X off=13) assign (x_high.48)  <2362>;
                        (b_low.1904 var=469 stl=X off=14) assign (__tmp.1889)  <2363>;
                        (b_high.1905 var=470 stl=X off=15) assign (__tmp.1891)  <2364>;
                        (__link.1906 var=472 stl=X off=1) assign (__link.1901)  <2365>;
                        (__tmp.1907 var=474 stl=X off=10 __tmp.1908 var=475 stl=X off=11) Ff64_sub (__link.1906 a_low.1902 a_high.1903 b_low.1904 b_high.1905)  <2366>;
                        (__tmp.1910 var=474) deassign (__tmp.1907)  <2368>;
                        (__tmp.1912 var=475) deassign (__tmp.1908)  <2370>;
                    } #360 off=50
                    #365 off=51
                    (__fch__ZZ3expdE5ln2LO_low.907 var=186) load (__M_DMw.4 __ptr_ln2LO.30 _ZZ3expdE5ln2LO_low.25)  <977>;
                    (__fch__ZZ3expdE5ln2LO_high.912 var=189) load (__M_DMw.4 __shv___ptr_ln2LO.1522 _ZZ3expdE5ln2LO_high.26)  <982>;
                    (__shv___ptr_ln2LO.1522 var=322) __Pvoid__pl___Pvoid___sint (__ptr_ln2LO.30 __ct_4.850)  <1713>;
                    (__link.1922 var=485) w32_jal_t21s_s2 (f64_mul.1811)  <2383>;
                    call {
                        (a_low.1923 var=480 stl=X off=12) assign (__tmp.1868)  <2384>;
                        (a_high.1924 var=481 stl=X off=13) assign (__tmp.1870)  <2385>;
                        (b_low.1925 var=482 stl=X off=14) assign (__fch__ZZ3expdE5ln2LO_low.907)  <2386>;
                        (b_high.1926 var=483 stl=X off=15) assign (__fch__ZZ3expdE5ln2LO_high.912)  <2387>;
                        (__link.1927 var=485 stl=X off=1) assign (__link.1922)  <2388>;
                        (__tmp.1928 var=487 stl=X off=10 __tmp.1929 var=488 stl=X off=11) Ff64_mul (__link.1927 a_low.1923 a_high.1924 b_low.1925 b_high.1926)  <2389>;
                        (__tmp.1931 var=487) deassign (__tmp.1928)  <2391>;
                        (__tmp.1933 var=488) deassign (__tmp.1929)  <2393>;
                    } #366 off=52
                    #610 off=53
                    (__trgt.2592 var=604) const ()  <3360>;
                    () void_j_t21s_s2 (__trgt.2592)  <3361>;
                } #55
                {
                    (k.917 var=52) merge (__linex.1494 k.1858)  <987>;
                    (a_low.2504 var=467) merge (__tmp.1800 __tmp.1910)  <3081>;
                    (a_high.2507 var=468) merge (__tmp.1802 __tmp.1912)  <3084>;
                    (b_low.2510 var=469) merge (__fch__ZZ3expdE5ln2LO_low.861 __tmp.1931)  <3087>;
                    (b_high.2513 var=470) merge (__fch__ZZ3expdE5ln2LO_high.866 __tmp.1933)  <3090>;
                } #56
            } #52
            #371 off=57
            (__link.1943 var=472) w32_jal_t21s_s2 (f64_sub.1790)  <2406>;
            call {
                (a_low.1944 var=467 stl=X off=12) assign (a_low.2504)  <2407>;
                (a_high.1945 var=468 stl=X off=13) assign (a_high.2507)  <2408>;
                (b_low.1946 var=469 stl=X off=14) assign (b_low.2510)  <2409>;
                (b_high.1947 var=470 stl=X off=15) assign (b_high.2513)  <2410>;
                (__link.1948 var=472 stl=X off=1) assign (__link.1943)  <2411>;
                (__tmp.1949 var=474 stl=X off=10 __tmp.1950 var=475 stl=X off=11) Ff64_sub (__link.1948 a_low.1944 a_high.1945 b_low.1946 b_high.1947)  <2412>;
                (__tmp.1952 var=474) deassign (__tmp.1949)  <2414>;
                (__tmp.1954 var=475) deassign (__tmp.1950)  <2416>;
            } #372 off=58
        } #50
        {
            #59 off=25
            (__ct_1043333120.920 var=192) const ()  <990>;
            (__tmp.2555 var=194) bool__ge___uint___uint (hx.105 __ct_1043333120.920)  <3248>;
            (__trgt.2595 var=606) const ()  <3366>;
            () void_br_bool_t13s_s2 (__tmp.2555 __trgt.2595)  <3367>;
            (__either.2596 var=594) undefined ()  <3368>;
            if {
                {
                    () if_expr (__either.2596)  <1037>;
                } #61
                {
                } #72 off=36
                {
                    #381 off=26
                    (__link.1964 var=459) w32_jal_t21s_s2 (f64_add.1769)  <2429>;
                    (__ct_2281731484.2514 var=572) const ()  <3091>;
                    (__ct_2117592124.2515 var=573) const ()  <3093>;
                    call {
                        (a_low.1965 var=454 stl=X off=12) assign (__ct_2281731484.2514)  <2430>;
                        (a_high.1966 var=455 stl=X off=13) assign (__ct_2117592124.2515)  <2431>;
                        (b_low.1967 var=456 stl=X off=14) assign (x_low.44)  <2432>;
                        (b_high.1968 var=457 stl=X off=15) assign (x_high.48)  <2433>;
                        (__link.1969 var=459 stl=X off=1) assign (__link.1964)  <2434>;
                        (__tmp.1970 var=461 stl=X off=10 __tmp.1971 var=462 stl=X off=11) Ff64_add (__link.1969 a_low.1965 a_high.1966 b_low.1967 b_high.1968)  <2435>;
                        (__tmp.1973 var=461) deassign (__tmp.1970)  <2437>;
                        (__tmp.1975 var=462) deassign (__tmp.1971)  <2439>;
                    } #382 off=27
                    #378 off=28
                    (__link.1736 var=364) w32_jal_t21s_s2 (f64_lt.1566)  <2092>;
                    call {
                        (a_low.1738 var=359 stl=X off=11) assign (__ct_0.208)  <2094>;
                        (a_high.1739 var=360 stl=X off=12) assign (__ct_1072693248.1750)  <2095>;
                        (b_low.1740 var=361 stl=X off=13) assign (__tmp.1973)  <2096>;
                        (b_high.1741 var=362 stl=X off=14) assign (__tmp.1975)  <2097>;
                        (__link.1742 var=364 stl=X off=1) assign (__link.1736)  <2098>;
                        (__tmp.1743 var=365 stl=X off=10) Ff64_lt (__link.1742 a_low.1738 a_high.1739 b_low.1740 b_high.1741)  <2099>;
                        (__tmp.1744 var=365) deassign (__tmp.1743)  <2100>;
                    } #243 off=29
                    #244 off=30
                    (__tmp.1745 var=200) bool__ne___sint___sint (__tmp.1744 __ct_0.208)  <2101>;
                    (__trgt.2593 var=605) const ()  <3362>;
                    () void_br_bool_t13s_s2 (__tmp.1745 __trgt.2593)  <3363>;
                    (__either.2594 var=594) undefined ()  <3364>;
                    if {
                        {
                            () if_expr (__either.2594)  <1088>;
                            () chess_rear_then ()  <3365>;
                        } #65
                        {
                            #68 off=32
                            (__R_SP.1024 var=12 __sp.1025 var=18) wr_res_reg (__tmp.310 __sp.56)  <1096>;
                            () void_j_t21s_s2 (f64_add.1769)  <3308>;
                            call {
                                (a_low.1986 var=454 stl=X off=12) assign (__ct_0.208)  <2453>;
                                (a_high.1987 var=455 stl=X off=13) assign (__ct_1072693248.1750)  <2454>;
                                (b_low.1988 var=456 stl=X off=14) assign (x_low.44)  <2455>;
                                (b_high.1989 var=457 stl=X off=15) assign (x_high.48)  <2456>;
                                (__la.1990 var=35 stl=X off=1) assign (__la.35)  <2457>;
                                (__tmp.1991 var=461 stl=X off=10 __tmp.1992 var=462 stl=X off=11) Ff64_add (__la.1990 a_low.1986 a_high.1987 b_low.1988 b_high.1989)  <2458>;
                                (__tmp.1994 var=461) deassign (__tmp.1991)  <2460>;
                                (__tmp.1996 var=462) deassign (__tmp.1992)  <2462>;
                            } #388 off=33
                            #69 off=34 nxt=-2
                            (__rt_low.1027 var=37 stl=X off=10) assign (__tmp.1994)  <1099>;
                            () out (__rt_low.1027)  <1100>;
                            (__rt_high.1029 var=38 stl=X off=11) assign (__tmp.1996)  <1102>;
                            () out (__rt_high.1029)  <1103>;
                            () sink (__sp.1025)  <1111>;
                        } #66
                        {
                        } #70 off=31
                        {
                        } #71
                    } #64
                    #611 off=35
                    (__trgt.2597 var=607) const ()  <3369>;
                    () void_j_t21s_s2 (__trgt.2597)  <3370>;
                } #62
                {
                } #73
            } #60
            #612 off=37
            (__trgt.2600 var=609) const ()  <3374>;
            () void_j_t21s_s2 (__trgt.2600)  <3375>;
        } #58
        {
            (k.1193 var=52) merge (k.917 __ct_0.208)  <1282>;
            (a_low.2518 var=480) merge (__tmp.1952 x_low.44)  <3097>;
            (a_high.2521 var=481) merge (__tmp.1954 x_high.48)  <3100>;
            (a_low.2535 var=467) merge (b_low.2510 a_low.2536)  <3125>;
            (a_high.2539 var=468) merge (b_high.2513 a_high.2540)  <3129>;
            (b_low.2543 var=469) merge (a_low.2504 b_low.2544)  <3133>;
            (b_high.2547 var=470) merge (a_high.2507 b_high.2548)  <3137>;
        } #74
    } #48
    #406 off=59
    (__link.2006 var=485) w32_jal_t21s_s2 (f64_mul.1811)  <2475>;
    call {
        (a_low.2007 var=480 stl=X off=12) assign (a_low.2518)  <2476>;
        (a_high.2008 var=481 stl=X off=13) assign (a_high.2521)  <2477>;
        (b_low.2009 var=482 stl=X off=14) assign (a_low.2518)  <2478>;
        (b_high.2010 var=483 stl=X off=15) assign (a_high.2521)  <2479>;
        (__link.2011 var=485 stl=X off=1) assign (__link.2006)  <2480>;
        (__tmp.2012 var=487 stl=X off=10 __tmp.2013 var=488 stl=X off=11) Ff64_mul (__link.2011 a_low.2007 a_high.2008 b_low.2009 b_high.2010)  <2481>;
        (__tmp.2015 var=487) deassign (__tmp.2012)  <2483>;
        (__tmp.2017 var=488) deassign (__tmp.2013)  <2485>;
    } #407 off=60
    #412 off=61
    (__link.2027 var=485) w32_jal_t21s_s2 (f64_mul.1811)  <2498>;
    (__ct_1925096656.2522 var=574) const ()  <3101>;
    (__ct_1046886249.2523 var=575) const ()  <3103>;
    call {
        (a_low.2028 var=480 stl=X off=12) assign (__tmp.2015)  <2499>;
        (a_high.2029 var=481 stl=X off=13) assign (__tmp.2017)  <2500>;
        (b_low.2030 var=482 stl=X off=14) assign (__ct_1925096656.2522)  <2501>;
        (b_high.2031 var=483 stl=X off=15) assign (__ct_1046886249.2523)  <2502>;
        (__link.2032 var=485 stl=X off=1) assign (__link.2027)  <2503>;
        (__tmp.2033 var=487 stl=X off=10 __tmp.2034 var=488 stl=X off=11) Ff64_mul (__link.2032 a_low.2028 a_high.2029 b_low.2030 b_high.2031)  <2504>;
        (__tmp.2036 var=487) deassign (__tmp.2033)  <2506>;
        (__tmp.2038 var=488) deassign (__tmp.2034)  <2508>;
    } #413 off=62
    #418 off=63
    (__link.2048 var=459) w32_jal_t21s_s2 (f64_add.1769)  <2521>;
    (__ct_3318901745.2524 var=576) const ()  <3105>;
    (__ct_3199974721.2525 var=577) const ()  <3107>;
    call {
        (a_low.2049 var=454 stl=X off=12) assign (__ct_3318901745.2524)  <2522>;
        (a_high.2050 var=455 stl=X off=13) assign (__ct_3199974721.2525)  <2523>;
        (b_low.2051 var=456 stl=X off=14) assign (__tmp.2036)  <2524>;
        (b_high.2052 var=457 stl=X off=15) assign (__tmp.2038)  <2525>;
        (__link.2053 var=459 stl=X off=1) assign (__link.2048)  <2526>;
        (__tmp.2054 var=461 stl=X off=10 __tmp.2055 var=462 stl=X off=11) Ff64_add (__link.2053 a_low.2049 a_high.2050 b_low.2051 b_high.2052)  <2527>;
        (__tmp.2057 var=461) deassign (__tmp.2054)  <2529>;
        (__tmp.2059 var=462) deassign (__tmp.2055)  <2531>;
    } #419 off=64
    #424 off=65
    (__link.2069 var=485) w32_jal_t21s_s2 (f64_mul.1811)  <2544>;
    call {
        (a_low.2070 var=480 stl=X off=12) assign (__tmp.2015)  <2545>;
        (a_high.2071 var=481 stl=X off=13) assign (__tmp.2017)  <2546>;
        (b_low.2072 var=482 stl=X off=14) assign (__tmp.2057)  <2547>;
        (b_high.2073 var=483 stl=X off=15) assign (__tmp.2059)  <2548>;
        (__link.2074 var=485 stl=X off=1) assign (__link.2069)  <2549>;
        (__tmp.2075 var=487 stl=X off=10 __tmp.2076 var=488 stl=X off=11) Ff64_mul (__link.2074 a_low.2070 a_high.2071 b_low.2072 b_high.2073)  <2550>;
        (__tmp.2078 var=487) deassign (__tmp.2075)  <2552>;
        (__tmp.2080 var=488) deassign (__tmp.2076)  <2554>;
    } #425 off=66
    #430 off=67
    (__link.2090 var=459) w32_jal_t21s_s2 (f64_add.1769)  <2567>;
    (__ct_2938494508.2526 var=578) const ()  <3109>;
    (__ct_1058100842.2527 var=579) const ()  <3111>;
    call {
        (a_low.2091 var=454 stl=X off=12) assign (__ct_2938494508.2526)  <2568>;
        (a_high.2092 var=455 stl=X off=13) assign (__ct_1058100842.2527)  <2569>;
        (b_low.2093 var=456 stl=X off=14) assign (__tmp.2078)  <2570>;
        (b_high.2094 var=457 stl=X off=15) assign (__tmp.2080)  <2571>;
        (__link.2095 var=459 stl=X off=1) assign (__link.2090)  <2572>;
        (__tmp.2096 var=461 stl=X off=10 __tmp.2097 var=462 stl=X off=11) Ff64_add (__link.2095 a_low.2091 a_high.2092 b_low.2093 b_high.2094)  <2573>;
        (__tmp.2099 var=461) deassign (__tmp.2096)  <2575>;
        (__tmp.2101 var=462) deassign (__tmp.2097)  <2577>;
    } #431 off=68
    #436 off=69
    (__link.2111 var=485) w32_jal_t21s_s2 (f64_mul.1811)  <2590>;
    call {
        (a_low.2112 var=480 stl=X off=12) assign (__tmp.2015)  <2591>;
        (a_high.2113 var=481 stl=X off=13) assign (__tmp.2017)  <2592>;
        (b_low.2114 var=482 stl=X off=14) assign (__tmp.2099)  <2593>;
        (b_high.2115 var=483 stl=X off=15) assign (__tmp.2101)  <2594>;
        (__link.2116 var=485 stl=X off=1) assign (__link.2111)  <2595>;
        (__tmp.2117 var=487 stl=X off=10 __tmp.2118 var=488 stl=X off=11) Ff64_mul (__link.2116 a_low.2112 a_high.2113 b_low.2114 b_high.2115)  <2596>;
        (__tmp.2120 var=487) deassign (__tmp.2117)  <2598>;
        (__tmp.2122 var=488) deassign (__tmp.2118)  <2600>;
    } #437 off=70
    #442 off=71
    (__link.2132 var=459) w32_jal_t21s_s2 (f64_add.1769)  <2613>;
    (__ct_381599123.2528 var=580) const ()  <3113>;
    (__ct_3211182444.2529 var=581) const ()  <3115>;
    call {
        (a_low.2133 var=454 stl=X off=12) assign (__ct_381599123.2528)  <2614>;
        (a_high.2134 var=455 stl=X off=13) assign (__ct_3211182444.2529)  <2615>;
        (b_low.2135 var=456 stl=X off=14) assign (__tmp.2120)  <2616>;
        (b_high.2136 var=457 stl=X off=15) assign (__tmp.2122)  <2617>;
        (__link.2137 var=459 stl=X off=1) assign (__link.2132)  <2618>;
        (__tmp.2138 var=461 stl=X off=10 __tmp.2139 var=462 stl=X off=11) Ff64_add (__link.2137 a_low.2133 a_high.2134 b_low.2135 b_high.2136)  <2619>;
        (__tmp.2141 var=461) deassign (__tmp.2138)  <2621>;
        (__tmp.2143 var=462) deassign (__tmp.2139)  <2623>;
    } #443 off=72
    #448 off=73
    (__link.2153 var=485) w32_jal_t21s_s2 (f64_mul.1811)  <2636>;
    call {
        (a_low.2154 var=480 stl=X off=12) assign (__tmp.2015)  <2637>;
        (a_high.2155 var=481 stl=X off=13) assign (__tmp.2017)  <2638>;
        (b_low.2156 var=482 stl=X off=14) assign (__tmp.2141)  <2639>;
        (b_high.2157 var=483 stl=X off=15) assign (__tmp.2143)  <2640>;
        (__link.2158 var=485 stl=X off=1) assign (__link.2153)  <2641>;
        (__tmp.2159 var=487 stl=X off=10 __tmp.2160 var=488 stl=X off=11) Ff64_mul (__link.2158 a_low.2154 a_high.2155 b_low.2156 b_high.2157)  <2642>;
        (__tmp.2162 var=487) deassign (__tmp.2159)  <2644>;
        (__tmp.2164 var=488) deassign (__tmp.2160)  <2646>;
    } #449 off=74
    #454 off=75
    (__link.2174 var=459) w32_jal_t21s_s2 (f64_add.1769)  <2659>;
    (__ct_1431655742.2530 var=582) const ()  <3117>;
    (__ct_1069897045.2531 var=583) const ()  <3119>;
    call {
        (a_low.2175 var=454 stl=X off=12) assign (__ct_1431655742.2530)  <2660>;
        (a_high.2176 var=455 stl=X off=13) assign (__ct_1069897045.2531)  <2661>;
        (b_low.2177 var=456 stl=X off=14) assign (__tmp.2162)  <2662>;
        (b_high.2178 var=457 stl=X off=15) assign (__tmp.2164)  <2663>;
        (__link.2179 var=459 stl=X off=1) assign (__link.2174)  <2664>;
        (__tmp.2180 var=461 stl=X off=10 __tmp.2181 var=462 stl=X off=11) Ff64_add (__link.2179 a_low.2175 a_high.2176 b_low.2177 b_high.2178)  <2665>;
        (__tmp.2183 var=461) deassign (__tmp.2180)  <2667>;
        (__tmp.2185 var=462) deassign (__tmp.2181)  <2669>;
    } #455 off=76
    #460 off=77
    (__link.2195 var=485) w32_jal_t21s_s2 (f64_mul.1811)  <2682>;
    call {
        (a_low.2196 var=480 stl=X off=12) assign (__tmp.2015)  <2683>;
        (a_high.2197 var=481 stl=X off=13) assign (__tmp.2017)  <2684>;
        (b_low.2198 var=482 stl=X off=14) assign (__tmp.2183)  <2685>;
        (b_high.2199 var=483 stl=X off=15) assign (__tmp.2185)  <2686>;
        (__link.2200 var=485 stl=X off=1) assign (__link.2195)  <2687>;
        (__tmp.2201 var=487 stl=X off=10 __tmp.2202 var=488 stl=X off=11) Ff64_mul (__link.2200 a_low.2196 a_high.2197 b_low.2198 b_high.2199)  <2688>;
        (__tmp.2204 var=487) deassign (__tmp.2201)  <2690>;
        (__tmp.2206 var=488) deassign (__tmp.2202)  <2692>;
    } #461 off=78
    #466 off=79
    (__link.2216 var=472) w32_jal_t21s_s2 (f64_sub.1790)  <2705>;
    call {
        (a_low.2217 var=467 stl=X off=12) assign (a_low.2518)  <2706>;
        (a_high.2218 var=468 stl=X off=13) assign (a_high.2521)  <2707>;
        (b_low.2219 var=469 stl=X off=14) assign (__tmp.2204)  <2708>;
        (b_high.2220 var=470 stl=X off=15) assign (__tmp.2206)  <2709>;
        (__link.2221 var=472 stl=X off=1) assign (__link.2216)  <2710>;
        (__tmp.2222 var=474 stl=X off=10 __tmp.2223 var=475 stl=X off=11) Ff64_sub (__link.2221 a_low.2217 a_high.2218 b_low.2219 b_high.2220)  <2711>;
        (__tmp.2225 var=474) deassign (__tmp.2222)  <2713>;
        (__tmp.2227 var=475) deassign (__tmp.2223)  <2715>;
    } #467 off=80
    #472 off=81
    (__link.2237 var=485) w32_jal_t21s_s2 (f64_mul.1811)  <2728>;
    call {
        (a_low.2238 var=480 stl=X off=12) assign (a_low.2518)  <2729>;
        (a_high.2239 var=481 stl=X off=13) assign (a_high.2521)  <2730>;
        (b_low.2240 var=482 stl=X off=14) assign (__tmp.2225)  <2731>;
        (b_high.2241 var=483 stl=X off=15) assign (__tmp.2227)  <2732>;
        (__link.2242 var=485 stl=X off=1) assign (__link.2237)  <2733>;
        (__tmp.2243 var=487 stl=X off=10 __tmp.2244 var=488 stl=X off=11) Ff64_mul (__link.2242 a_low.2238 a_high.2239 b_low.2240 b_high.2241)  <2734>;
        (__tmp.2246 var=487) deassign (__tmp.2243)  <2736>;
        (__tmp.2248 var=488) deassign (__tmp.2244)  <2738>;
    } #473 off=82
    #403 off=83
    (__tmp.1233 var=232) bool__eq___sint___sint (k.1193 __ct_0.208)  <1322>;
    (f64_div.2278 var=534) const ()  <2773>;
    (__ct_1073741824.2532 var=584) const ()  <3121>;
    (__trgt.2603 var=611) const ()  <3379>;
    () void_br_bool_t13s_s2 (__tmp.1233 __trgt.2603)  <3380>;
    (__either.2604 var=594) undefined ()  <3381>;
    if {
        {
            () if_expr (__either.2604)  <1367>;
            () chess_rear_then ()  <3382>;
        } #77
        {
            #484 off=99
            (__link.2258 var=472) w32_jal_t21s_s2 (f64_sub.1790)  <2751>;
            call {
                (a_low.2259 var=467 stl=X off=12) assign (__tmp.2225)  <2752>;
                (a_high.2260 var=468 stl=X off=13) assign (__tmp.2227)  <2753>;
                (b_low.2261 var=469 stl=X off=14) assign (__ct_0.208)  <2754>;
                (b_high.2262 var=470 stl=X off=15) assign (__ct_1073741824.2532)  <2755>;
                (__link.2263 var=472 stl=X off=1) assign (__link.2258)  <2756>;
                (__tmp.2264 var=474 stl=X off=10 __tmp.2265 var=475 stl=X off=11) Ff64_sub (__link.2263 a_low.2259 a_high.2260 b_low.2261 b_high.2262)  <2757>;
                (__tmp.2267 var=474) deassign (__tmp.2264)  <2759>;
                (__tmp.2269 var=475) deassign (__tmp.2265)  <2761>;
            } #485 off=100
            #490 off=101
            (__link.2279 var=535) w32_jal_t21s_s2 (f64_div.2278)  <2774>;
            call {
                (a_low.2280 var=530 stl=X off=12) assign (__tmp.2246)  <2775>;
                (a_high.2281 var=531 stl=X off=13) assign (__tmp.2248)  <2776>;
                (b_low.2282 var=532 stl=X off=14) assign (__tmp.2267)  <2777>;
                (b_high.2283 var=533 stl=X off=15) assign (__tmp.2269)  <2778>;
                (__link.2284 var=535 stl=X off=1) assign (__link.2279)  <2779>;
                (__tmp.2285 var=537 stl=X off=10 __tmp.2286 var=538 stl=X off=11) Ff64_div (__link.2284 a_low.2280 a_high.2281 b_low.2282 b_high.2283)  <2780>;
                (__tmp.2288 var=537) deassign (__tmp.2285)  <2782>;
                (__tmp.2290 var=538) deassign (__tmp.2286)  <2784>;
            } #491 off=102
            #496 off=103
            (__link.2300 var=472) w32_jal_t21s_s2 (f64_sub.1790)  <2797>;
            call {
                (a_low.2301 var=467 stl=X off=12) assign (__tmp.2288)  <2798>;
                (a_high.2302 var=468 stl=X off=13) assign (__tmp.2290)  <2799>;
                (b_low.2303 var=469 stl=X off=14) assign (a_low.2518)  <2800>;
                (b_high.2304 var=470 stl=X off=15) assign (a_high.2521)  <2801>;
                (__link.2305 var=472 stl=X off=1) assign (__link.2300)  <2802>;
                (__tmp.2306 var=474 stl=X off=10 __tmp.2307 var=475 stl=X off=11) Ff64_sub (__link.2305 a_low.2301 a_high.2302 b_low.2303 b_high.2304)  <2803>;
                (__tmp.2309 var=474) deassign (__tmp.2306)  <2805>;
                (__tmp.2311 var=475) deassign (__tmp.2307)  <2807>;
            } #497 off=104
            #601 off=105
            (__R_SP.2562 var=12 __sp.2563 var=18) wr_res_reg (__tmp.310 __sp.56)  <3309>;
            () void_j_t21s_s2 (f64_sub.1790)  <3316>;
            call {
                (a_low.2322 var=467 stl=X off=12) assign (__ct_0.208)  <2821>;
                (a_high.2323 var=468 stl=X off=13) assign (__ct_1072693248.1750)  <2822>;
                (b_low.2324 var=469 stl=X off=14) assign (__tmp.2309)  <2823>;
                (b_high.2325 var=470 stl=X off=15) assign (__tmp.2311)  <2824>;
                (__la.2326 var=35 stl=X off=1) assign (__la.35)  <2825>;
                (__tmp.2327 var=474 stl=X off=10 __tmp.2328 var=475 stl=X off=11) Ff64_sub (__la.2326 a_low.2322 a_high.2323 b_low.2324 b_high.2325)  <2826>;
                (__tmp.2330 var=474) deassign (__tmp.2327)  <2828>;
                (__tmp.2332 var=475) deassign (__tmp.2328)  <2830>;
            } #503 off=106
            #602 off=107 nxt=-2
            (__rt_low.2564 var=37 stl=X off=10) assign (__tmp.2330)  <3311>;
            () out (__rt_low.2564)  <3312>;
            (__rt_high.2565 var=38 stl=X off=11) assign (__tmp.2332)  <3313>;
            () out (__rt_high.2565)  <3314>;
            () sink (__sp.2563)  <3315>;
            (__rt_low.2574 var=37) never ()  <3329>;
            (__rt_high.2575 var=38) never ()  <3330>;
        } #78
        {
            #525 off=84
            (__link.2342 var=472) w32_jal_t21s_s2 (f64_sub.1790)  <2843>;
            call {
                (a_low.2343 var=467 stl=X off=12) assign (__ct_0.208)  <2844>;
                (a_high.2344 var=468 stl=X off=13) assign (__ct_1073741824.2532)  <2845>;
                (b_low.2345 var=469 stl=X off=14) assign (__tmp.2225)  <2846>;
                (b_high.2346 var=470 stl=X off=15) assign (__tmp.2227)  <2847>;
                (__link.2347 var=472 stl=X off=1) assign (__link.2342)  <2848>;
                (__tmp.2348 var=474 stl=X off=10 __tmp.2349 var=475 stl=X off=11) Ff64_sub (__link.2347 a_low.2343 a_high.2344 b_low.2345 b_high.2346)  <2849>;
                (__tmp.2351 var=474) deassign (__tmp.2348)  <2851>;
                (__tmp.2353 var=475) deassign (__tmp.2349)  <2853>;
            } #526 off=85
            #531 off=86
            (__link.2363 var=535) w32_jal_t21s_s2 (f64_div.2278)  <2866>;
            call {
                (a_low.2364 var=530 stl=X off=12) assign (__tmp.2246)  <2867>;
                (a_high.2365 var=531 stl=X off=13) assign (__tmp.2248)  <2868>;
                (b_low.2366 var=532 stl=X off=14) assign (__tmp.2351)  <2869>;
                (b_high.2367 var=533 stl=X off=15) assign (__tmp.2353)  <2870>;
                (__link.2368 var=535 stl=X off=1) assign (__link.2363)  <2871>;
                (__tmp.2369 var=537 stl=X off=10 __tmp.2370 var=538 stl=X off=11) Ff64_div (__link.2368 a_low.2364 a_high.2365 b_low.2366 b_high.2367)  <2872>;
                (__tmp.2372 var=537) deassign (__tmp.2369)  <2874>;
                (__tmp.2374 var=538) deassign (__tmp.2370)  <2876>;
            } #532 off=87
            #537 off=88
            (__link.2384 var=472) w32_jal_t21s_s2 (f64_sub.1790)  <2889>;
            call {
                (a_low.2385 var=467 stl=X off=12) assign (a_low.2535)  <2890>;
                (a_high.2386 var=468 stl=X off=13) assign (a_high.2539)  <2891>;
                (b_low.2387 var=469 stl=X off=14) assign (__tmp.2372)  <2892>;
                (b_high.2388 var=470 stl=X off=15) assign (__tmp.2374)  <2893>;
                (__link.2389 var=472 stl=X off=1) assign (__link.2384)  <2894>;
                (__tmp.2390 var=474 stl=X off=10 __tmp.2391 var=475 stl=X off=11) Ff64_sub (__link.2389 a_low.2385 a_high.2386 b_low.2387 b_high.2388)  <2895>;
                (__tmp.2393 var=474) deassign (__tmp.2390)  <2897>;
                (__tmp.2395 var=475) deassign (__tmp.2391)  <2899>;
            } #538 off=89
            #543 off=90
            (__link.2405 var=472) w32_jal_t21s_s2 (f64_sub.1790)  <2912>;
            call {
                (a_low.2406 var=467 stl=X off=12) assign (__tmp.2393)  <2913>;
                (a_high.2407 var=468 stl=X off=13) assign (__tmp.2395)  <2914>;
                (b_low.2408 var=469 stl=X off=14) assign (b_low.2543)  <2915>;
                (b_high.2409 var=470 stl=X off=15) assign (b_high.2547)  <2916>;
                (__link.2410 var=472 stl=X off=1) assign (__link.2405)  <2917>;
                (__tmp.2411 var=474 stl=X off=10 __tmp.2412 var=475 stl=X off=11) Ff64_sub (__link.2410 a_low.2406 a_high.2407 b_low.2408 b_high.2409)  <2918>;
                (__tmp.2414 var=474) deassign (__tmp.2411)  <2920>;
                (__tmp.2416 var=475) deassign (__tmp.2412)  <2922>;
            } #544 off=91
            #549 off=92
            (__link.2426 var=472) w32_jal_t21s_s2 (f64_sub.1790)  <2935>;
            call {
                (a_low.2427 var=467 stl=X off=12) assign (__ct_0.208)  <2936>;
                (a_high.2428 var=468 stl=X off=13) assign (__ct_1072693248.1750)  <2937>;
                (b_low.2429 var=469 stl=X off=14) assign (__tmp.2414)  <2938>;
                (b_high.2430 var=470 stl=X off=15) assign (__tmp.2416)  <2939>;
                (__link.2431 var=472 stl=X off=1) assign (__link.2426)  <2940>;
                (__tmp.2432 var=474 stl=X off=10 __tmp.2433 var=475 stl=X off=11) Ff64_sub (__link.2431 a_low.2427 a_high.2428 b_low.2429 b_high.2430)  <2941>;
                (__tmp.2435 var=474) deassign (__tmp.2432)  <2943>;
                (__tmp.2437 var=475) deassign (__tmp.2433)  <2945>;
            } #550 off=93
            #522 off=94
            (__ct_m1021.1297 var=252) const ()  <1387>;
            (__tmp.1299 var=254) bool__ge___sint___sint (k.1193 __ct_m1021.1297)  <1389>;
            (__ct_20.1353 var=261) const ()  <1444>;
            (__trgt.2601 var=610) const ()  <3376>;
            () void_br_bool_t13s_s2 (__tmp.1299 __trgt.2601)  <3377>;
            (__either.2602 var=594) undefined ()  <3378>;
            if {
                {
                    () if_expr (__either.2602)  <1434>;
                } #82
                {
                    (__tmp.1355 var=263) __sint__ls___sint___sint (k.1193 __ct_20.1353)  <1446>;
                    (__tmpb1_Fexp.1357 var=58) __uint__pl___uint___uint (__tmp.2437 __tmp.1355)  <1448>;
                } #563 off=98
                {
                    #605 off=95
                    (__ct_1000.1379 var=281) const ()  <1470>;
                    (__tmp.1381 var=283) __sint__pl___sint___sint (k.1193 __ct_1000.1379)  <1472>;
                    (__tmp.1384 var=286) __sint__ls___sint___sint (__tmp.1381 __ct_20.1353)  <1475>;
                    (__tmpb4_Fexp.1386 var=64) __uint__pl___uint___uint (__tmp.2437 __tmp.1384)  <1477>;
                    (__ct_24117248.2549 var=585) const ()  <3139>;
                    (__R_SP.2566 var=12 __sp.2567 var=18) wr_res_reg (__tmp.310 __sp.56)  <3317>;
                    () void_j_t21s_s2 (f64_mul.1811)  <3324>;
                    call {
                        (a_low.2485 var=480 stl=X off=12) assign (__tmp.2435)  <3014>;
                        (a_high.2486 var=481 stl=X off=13) assign (__tmpb4_Fexp.1386)  <3015>;
                        (b_low.2487 var=482 stl=X off=14) assign (__ct_0.208)  <3016>;
                        (b_high.2488 var=483 stl=X off=15) assign (__ct_24117248.2549)  <3017>;
                        (__la.2489 var=35 stl=X off=1) assign (__la.35)  <3018>;
                        (__tmp.2490 var=487 stl=X off=10 __tmp.2491 var=488 stl=X off=11) Ff64_mul (__la.2489 a_low.2485 a_high.2486 b_low.2487 b_high.2488)  <3019>;
                        (__tmp.2493 var=487) deassign (__tmp.2490)  <3021>;
                        (__tmp.2495 var=488) deassign (__tmp.2491)  <3023>;
                    } #589 off=96
                    #606 off=97 nxt=-2
                    (__rt_low.2568 var=37 stl=X off=10) assign (__tmp.2493)  <3319>;
                    () out (__rt_low.2568)  <3320>;
                    (__rt_high.2569 var=38 stl=X off=11) assign (__tmp.2495)  <3321>;
                    () out (__rt_high.2569)  <3322>;
                    () sink (__sp.2567)  <3323>;
                    (__rt_high.2573 var=38) never ()  <3328>;
                } #205
                {
                    (__rt_high.1518 var=38) merge (__tmpb1_Fexp.1357 __rt_high.2573)  <1709>;
                } #85
            } #81
        } #79
        {
            (__rt_low.1509 var=37) merge (__rt_low.2574 __tmp.2435)  <1700>;
            (__rt_high.1515 var=38) merge (__rt_high.2575 __rt_high.1518)  <1706>;
        } #86
    } #76
    #88 off=108 nxt=-2
    (__R_SP.1434 var=12 __sp.1435 var=18) wr_res_reg (__tmp.310 __sp.56)  <1525>;
    () void___rts_jr_w32 (__la.35)  <1526>;
    (__rt_low.1437 var=37 stl=X off=10) assign (__rt_low.1509)  <1528>;
    () out (__rt_low.1437)  <1529>;
    (__rt_high.1439 var=38 stl=X off=11) assign (__rt_high.1515)  <1531>;
    () out (__rt_high.1439)  <1532>;
    () sink (__sp.1435)  <1540>;
} #0
0 : 'src/math.c';
----------
0 : (0,952:0,0);
4 : (0,985:4,10);
6 : (0,985:25,11);
7 : (0,986:13,11);
8 : (0,986:8,11);
10 : (0,986:27,12);
12 : (0,989:12,14);
14 : (0,991:17,15);
15 : (0,990:16,18);
16 : (0,991:28,18);
17 : (0,991:32,18);
19 : (0,991:34,19);
20 : (0,991:36,20);
24 : (0,989:12,26);
25 : (0,986:8,30);
28 : (0,993:8,33);
33 : (0,993:28,34);
34 : (0,993:8,37);
37 : (0,994:8,40);
42 : (0,994:28,41);
43 : (0,994:8,44);
45 : (0,985:4,49);
48 : (0,998:4,52);
50 : (0,998:24,53);
51 : (0,999:14,53);
52 : (0,999:8,53);
54 : (0,999:28,54);
55 : (0,1001:15,59);
58 : (0,1009:9,69);
59 : (0,1009:15,69);
60 : (0,1009:9,69);
62 : (0,1009:30,70);
64 : (0,1010:8,70);
66 : (0,1010:23,71);
68 : (0,1010:23,71);
69 : (0,1010:23,71);
70 : (0,1010:8,74);
72 : (0,1012:11,79);
76 : (0,1017:4,86);
78 : (0,1017:16,87);
79 : (0,1017:16,89);
81 : (0,1019:4,90);
88 : (0,1019:4,127);
124 : (0,994:13,40);
125 : (0,994:13,40);
126 : (0,994:13,40);
129 : (0,998:10,52);
205 : (0,1023:8,107);
234 : (0,993:13,33);
235 : (0,993:13,33);
236 : (0,993:13,33);
243 : (0,1010:17,70);
244 : (0,1010:17,70);
258 : (0,985:10,10);
265 : (0,989:32,14);
275 : (0,990:24,15);
294 : (0,1000:55,56);
297 : (0,1000:18,54);
298 : (0,1000:18,54);
329 : (0,1002:23,59);
330 : (0,1002:23,59);
335 : (0,1002:25,59);
336 : (0,1002:25,59);
341 : (0,1002:15,59);
342 : (0,1002:15,59);
347 : (0,1003:15,60);
348 : (0,1003:15,60);
353 : (0,1004:22,61);
354 : (0,1004:22,61);
359 : (0,1004:19,61);
360 : (0,1004:19,61);
365 : (0,1005:18,62);
366 : (0,1005:18,62);
371 : (0,998:24,68);
372 : (0,998:24,68);
378 : (0,1010:17,70);
381 : (0,1010:15,70);
382 : (0,1010:15,70);
388 : (0,1010:33,71);
403 : (0,1017:8,86);
406 : (0,1015:10,84);
407 : (0,1015:10,84);
412 : (0,1016:38,85);
413 : (0,1016:38,85);
418 : (0,1016:36,85);
419 : (0,1016:36,85);
424 : (0,1016:32,85);
425 : (0,1016:32,85);
430 : (0,1016:30,85);
431 : (0,1016:30,85);
436 : (0,1016:26,85);
437 : (0,1016:26,85);
442 : (0,1016:24,85);
443 : (0,1016:24,85);
448 : (0,1016:20,85);
449 : (0,1016:20,85);
454 : (0,1016:18,85);
455 : (0,1016:18,85);
460 : (0,1016:14,85);
461 : (0,1016:14,85);
466 : (0,1016:11,85);
467 : (0,1016:11,85);
472 : (0,1017:30,87);
473 : (0,1017:30,87);
484 : (0,1017:36,87);
485 : (0,1017:36,87);
490 : (0,1017:33,87);
491 : (0,1017:33,87);
496 : (0,1017:41,87);
497 : (0,1017:41,87);
503 : (0,1017:26,87);
522 : (0,1019:9,90);
525 : (0,1018:39,89);
526 : (0,1018:39,89);
531 : (0,1018:34,89);
532 : (0,1018:34,89);
537 : (0,1018:28,89);
538 : (0,1018:28,89);
543 : (0,1018:43,89);
544 : (0,1018:43,89);
549 : (0,1018:23,89);
550 : (0,1018:23,89);
563 : (0,1022:15,99);
589 : (0,1028:16,119);
597 : (0,989:12,26);
598 : (0,989:12,26);
601 : (0,1019:4,127);
602 : (0,1019:4,127);
605 : (0,1019:4,127);
606 : (0,1019:4,127);
----------
62 : (0,952:7,0);
63 : (0,952:7,0);
65 : (0,952:7,0);
66 : (0,952:7,0);
107 : (0,981:15,0);
109 : (0,981:13,8);
110 : (0,981:18,0);
112 : (0,981:18,8);
114 : (0,982:7,0);
116 : (0,982:7,9);
117 : (0,985:10,0);
164 : (0,985:4,10);
165 : (0,986:13,0);
167 : (0,986:13,11);
212 : (0,986:8,11);
217 : (0,989:19,0);
219 : (0,989:19,14);
220 : (0,989:28,14);
221 : (0,989:32,0);
223 : (0,989:32,14);
268 : (0,989:12,14);
272 : (0,991:28,18);
317 : (0,991:32,18);
322 : (0,989:12,0);
323 : (0,989:12,0);
325 : (0,989:12,0);
326 : (0,989:12,26);
327 : (0,989:12,26);
329 : (0,989:12,0);
332 : (0,989:12,0);
486 : (0,993:8,33);
493 : (0,993:28,34);
494 : (0,993:28,34);
496 : (0,993:39,0);
499 : (0,993:39,0);
653 : (0,994:8,40);
660 : (0,994:28,41);
661 : (0,994:28,41);
663 : (0,994:43,0);
666 : (0,994:43,0);
817 : (0,998:10,0);
864 : (0,998:4,52);
865 : (0,999:14,0);
867 : (0,999:14,53);
912 : (0,999:8,53);
915 : (0,1000:25,54);
916 : (0,1000:24,54);
918 : (0,1000:24,54);
923 : (0,1000:24,54);
929 : (0,1000:39,55);
931 : (0,1000:39,55);
936 : (0,1000:39,55);
948 : (0,1002:30,59);
950 : (0,1002:30,59);
955 : (0,1002:30,59);
964 : (0,1004:28,61);
969 : (0,1004:28,61);
977 : (0,1005:24,62);
982 : (0,1005:24,62);
987 : (0,999:8,65);
990 : (0,1009:15,0);
1037 : (0,1009:9,69);
1088 : (0,1010:8,70);
1096 : (0,1010:23,71);
1099 : (0,1010:33,0);
1102 : (0,1010:33,0);
1282 : (0,998:4,83);
1322 : (0,1017:8,86);
1367 : (0,1017:4,86);
1387 : (0,1019:12,0);
1389 : (0,1019:9,90);
1434 : (0,1019:4,90);
1444 : (0,1022:33,0);
1446 : (0,1022:31,95);
1448 : (0,1022:28,95);
1470 : (0,1027:33,0);
1472 : (0,1027:32,111);
1475 : (0,1027:38,111);
1477 : (0,1027:28,111);
1525 : (0,1019:4,127);
1526 : (0,1019:4,127);
1528 : (0,1019:4,0);
1531 : (0,1019:4,0);
1684 : (0,1000:55,56);
1685 : (0,1000:55,56);
1715 : (0,1000:25,0);
1805 : (0,994:13,0);
1806 : (0,994:13,40);
1808 : (0,994:13,40);
1809 : (0,994:13,40);
1810 : (0,994:13,40);
1811 : (0,994:13,40);
1812 : (0,994:13,40);
1813 : (0,994:13,40);
1814 : (0,994:13,40);
1815 : (0,994:13,40);
1822 : (0,998:10,52);
2019 : (0,994:15,0);
2021 : (0,994:15,0);
2071 : (0,993:13,33);
2073 : (0,993:13,33);
2074 : (0,993:13,33);
2075 : (0,993:13,33);
2076 : (0,993:13,33);
2077 : (0,993:13,33);
2078 : (0,993:13,33);
2079 : (0,993:13,33);
2080 : (0,993:13,33);
2092 : (0,1010:17,70);
2094 : (0,1010:17,70);
2095 : (0,1010:17,70);
2096 : (0,1010:17,70);
2097 : (0,1010:17,70);
2098 : (0,1010:17,70);
2099 : (0,1010:17,70);
2100 : (0,1010:17,70);
2101 : (0,1010:17,70);
2145 : (0,993:15,0);
2147 : (0,1010:18,0);
2213 : (0,990:24,0);
2215 : (0,990:24,15);
2216 : (0,990:24,15);
2217 : (0,990:24,15);
2218 : (0,990:24,15);
2219 : (0,990:24,15);
2220 : (0,990:24,15);
2222 : (0,990:24,15);
2224 : (0,990:24,15);
2236 : (0,1000:18,0);
2237 : (0,1000:18,54);
2238 : (0,1000:18,54);
2239 : (0,1000:18,54);
2240 : (0,1000:18,54);
2241 : (0,1000:18,54);
2242 : (0,1000:18,54);
2243 : (0,1000:18,54);
2245 : (0,1000:18,54);
2247 : (0,1000:18,54);
2259 : (0,1002:23,0);
2260 : (0,1002:23,59);
2261 : (0,1002:23,59);
2262 : (0,1002:23,59);
2263 : (0,1002:23,59);
2264 : (0,1002:23,59);
2265 : (0,1002:23,59);
2266 : (0,1002:23,59);
2268 : (0,1002:23,59);
2270 : (0,1002:23,59);
2283 : (0,1002:25,59);
2284 : (0,1002:25,59);
2285 : (0,1002:25,59);
2286 : (0,1002:25,59);
2287 : (0,1002:25,59);
2288 : (0,1002:25,59);
2289 : (0,1002:25,59);
2291 : (0,1002:25,59);
2293 : (0,1002:25,59);
2303 : (0,1002:15,0);
2304 : (0,1002:15,59);
2305 : (0,1002:15,59);
2306 : (0,1002:15,59);
2307 : (0,1002:15,59);
2308 : (0,1002:15,59);
2309 : (0,1002:15,59);
2310 : (0,1002:15,59);
2316 : (0,1003:15,0);
2317 : (0,1003:15,60);
2318 : (0,1003:15,60);
2319 : (0,1003:15,60);
2320 : (0,1003:15,60);
2322 : (0,1003:15,60);
2324 : (0,1003:15,60);
2337 : (0,1004:22,61);
2338 : (0,1004:22,61);
2339 : (0,1004:22,61);
2340 : (0,1004:22,61);
2341 : (0,1004:22,61);
2342 : (0,1004:22,61);
2343 : (0,1004:22,61);
2345 : (0,1004:22,61);
2347 : (0,1004:22,61);
2360 : (0,1004:19,61);
2361 : (0,1004:19,61);
2362 : (0,1004:19,61);
2363 : (0,1004:19,61);
2364 : (0,1004:19,61);
2365 : (0,1004:19,61);
2366 : (0,1004:19,61);
2368 : (0,1004:19,61);
2370 : (0,1004:19,61);
2383 : (0,1005:18,62);
2384 : (0,1005:18,62);
2385 : (0,1005:18,62);
2386 : (0,1005:18,62);
2387 : (0,1005:18,62);
2388 : (0,1005:18,62);
2389 : (0,1005:18,62);
2391 : (0,1005:18,62);
2393 : (0,1005:18,62);
2406 : (0,1007:16,66);
2407 : (0,1007:16,66);
2408 : (0,1007:16,66);
2409 : (0,1007:16,66);
2410 : (0,1007:16,66);
2411 : (0,1007:16,66);
2412 : (0,1007:16,66);
2414 : (0,1007:16,66);
2416 : (0,1007:16,66);
2429 : (0,1010:15,70);
2430 : (0,1010:15,70);
2431 : (0,1010:15,70);
2432 : (0,1010:15,70);
2433 : (0,1010:15,70);
2434 : (0,1010:15,70);
2435 : (0,1010:15,70);
2437 : (0,1010:15,70);
2439 : (0,1010:15,70);
2453 : (0,1010:33,71);
2454 : (0,1010:33,71);
2455 : (0,1010:33,71);
2456 : (0,1010:33,71);
2457 : (0,1010:33,71);
2458 : (0,1010:33,71);
2460 : (0,1010:33,71);
2462 : (0,1010:33,71);
2475 : (0,1015:10,84);
2476 : (0,1015:10,84);
2477 : (0,1015:10,84);
2478 : (0,1015:10,84);
2479 : (0,1015:10,84);
2480 : (0,1015:10,84);
2481 : (0,1015:10,84);
2483 : (0,1015:10,84);
2485 : (0,1015:10,84);
2498 : (0,1016:38,85);
2499 : (0,1016:38,85);
2500 : (0,1016:38,85);
2501 : (0,1016:38,85);
2502 : (0,1016:38,85);
2503 : (0,1016:38,85);
2504 : (0,1016:38,85);
2506 : (0,1016:38,85);
2508 : (0,1016:38,85);
2521 : (0,1016:36,85);
2522 : (0,1016:36,85);
2523 : (0,1016:36,85);
2524 : (0,1016:36,85);
2525 : (0,1016:36,85);
2526 : (0,1016:36,85);
2527 : (0,1016:36,85);
2529 : (0,1016:36,85);
2531 : (0,1016:36,85);
2544 : (0,1016:32,85);
2545 : (0,1016:32,85);
2546 : (0,1016:32,85);
2547 : (0,1016:32,85);
2548 : (0,1016:32,85);
2549 : (0,1016:32,85);
2550 : (0,1016:32,85);
2552 : (0,1016:32,85);
2554 : (0,1016:32,85);
2567 : (0,1016:30,85);
2568 : (0,1016:30,85);
2569 : (0,1016:30,85);
2570 : (0,1016:30,85);
2571 : (0,1016:30,85);
2572 : (0,1016:30,85);
2573 : (0,1016:30,85);
2575 : (0,1016:30,85);
2577 : (0,1016:30,85);
2590 : (0,1016:26,85);
2591 : (0,1016:26,85);
2592 : (0,1016:26,85);
2593 : (0,1016:26,85);
2594 : (0,1016:26,85);
2595 : (0,1016:26,85);
2596 : (0,1016:26,85);
2598 : (0,1016:26,85);
2600 : (0,1016:26,85);
2613 : (0,1016:24,85);
2614 : (0,1016:24,85);
2615 : (0,1016:24,85);
2616 : (0,1016:24,85);
2617 : (0,1016:24,85);
2618 : (0,1016:24,85);
2619 : (0,1016:24,85);
2621 : (0,1016:24,85);
2623 : (0,1016:24,85);
2636 : (0,1016:20,85);
2637 : (0,1016:20,85);
2638 : (0,1016:20,85);
2639 : (0,1016:20,85);
2640 : (0,1016:20,85);
2641 : (0,1016:20,85);
2642 : (0,1016:20,85);
2644 : (0,1016:20,85);
2646 : (0,1016:20,85);
2659 : (0,1016:18,85);
2660 : (0,1016:18,85);
2661 : (0,1016:18,85);
2662 : (0,1016:18,85);
2663 : (0,1016:18,85);
2664 : (0,1016:18,85);
2665 : (0,1016:18,85);
2667 : (0,1016:18,85);
2669 : (0,1016:18,85);
2682 : (0,1016:14,85);
2683 : (0,1016:14,85);
2684 : (0,1016:14,85);
2685 : (0,1016:14,85);
2686 : (0,1016:14,85);
2687 : (0,1016:14,85);
2688 : (0,1016:14,85);
2690 : (0,1016:14,85);
2692 : (0,1016:14,85);
2705 : (0,1016:11,85);
2706 : (0,1016:11,85);
2707 : (0,1016:11,85);
2708 : (0,1016:11,85);
2709 : (0,1016:11,85);
2710 : (0,1016:11,85);
2711 : (0,1016:11,85);
2713 : (0,1016:11,85);
2715 : (0,1016:11,85);
2728 : (0,1017:30,87);
2729 : (0,1017:30,87);
2730 : (0,1017:30,87);
2731 : (0,1017:30,87);
2732 : (0,1017:30,87);
2733 : (0,1017:30,87);
2734 : (0,1017:30,87);
2736 : (0,1017:30,87);
2738 : (0,1017:30,87);
2751 : (0,1017:36,87);
2752 : (0,1017:36,87);
2753 : (0,1017:36,87);
2754 : (0,1017:36,87);
2755 : (0,1017:36,87);
2756 : (0,1017:36,87);
2757 : (0,1017:36,87);
2759 : (0,1017:36,87);
2761 : (0,1017:36,87);
2773 : (0,1017:33,0);
2774 : (0,1017:33,87);
2775 : (0,1017:33,87);
2776 : (0,1017:33,87);
2777 : (0,1017:33,87);
2778 : (0,1017:33,87);
2779 : (0,1017:33,87);
2780 : (0,1017:33,87);
2782 : (0,1017:33,87);
2784 : (0,1017:33,87);
2797 : (0,1017:41,87);
2798 : (0,1017:41,87);
2799 : (0,1017:41,87);
2800 : (0,1017:41,87);
2801 : (0,1017:41,87);
2802 : (0,1017:41,87);
2803 : (0,1017:41,87);
2805 : (0,1017:41,87);
2807 : (0,1017:41,87);
2821 : (0,1017:26,87);
2822 : (0,1017:26,87);
2823 : (0,1017:26,87);
2824 : (0,1017:26,87);
2825 : (0,1017:26,87);
2826 : (0,1017:26,87);
2828 : (0,1017:26,87);
2830 : (0,1017:26,87);
2843 : (0,1018:39,89);
2844 : (0,1018:39,89);
2845 : (0,1018:39,89);
2846 : (0,1018:39,89);
2847 : (0,1018:39,89);
2848 : (0,1018:39,89);
2849 : (0,1018:39,89);
2851 : (0,1018:39,89);
2853 : (0,1018:39,89);
2866 : (0,1018:34,89);
2867 : (0,1018:34,89);
2868 : (0,1018:34,89);
2869 : (0,1018:34,89);
2870 : (0,1018:34,89);
2871 : (0,1018:34,89);
2872 : (0,1018:34,89);
2874 : (0,1018:34,89);
2876 : (0,1018:34,89);
2889 : (0,1018:28,89);
2890 : (0,1018:28,89);
2891 : (0,1018:28,89);
2892 : (0,1018:28,89);
2893 : (0,1018:28,89);
2894 : (0,1018:28,89);
2895 : (0,1018:28,89);
2897 : (0,1018:28,89);
2899 : (0,1018:28,89);
2912 : (0,1018:43,89);
2913 : (0,1018:43,89);
2914 : (0,1018:43,89);
2915 : (0,1018:43,89);
2916 : (0,1018:43,89);
2917 : (0,1018:43,89);
2918 : (0,1018:43,89);
2920 : (0,1018:43,89);
2922 : (0,1018:43,89);
2935 : (0,1018:23,89);
2936 : (0,1018:23,89);
2937 : (0,1018:23,89);
2938 : (0,1018:23,89);
2939 : (0,1018:23,89);
2940 : (0,1018:23,89);
2941 : (0,1018:23,89);
2943 : (0,1018:23,89);
2945 : (0,1018:23,89);
3014 : (0,1028:16,119);
3015 : (0,1028:16,119);
3016 : (0,1028:16,119);
3017 : (0,1028:16,119);
3018 : (0,1028:16,119);
3019 : (0,1028:16,119);
3021 : (0,1028:16,119);
3023 : (0,1028:16,119);
3075 : (0,1002:17,0);
3077 : (0,1002:17,0);
3091 : (0,1010:11,0);
3093 : (0,1010:11,0);
3101 : (0,1016:39,0);
3103 : (0,1016:39,0);
3105 : (0,1016:34,0);
3107 : (0,1016:34,0);
3109 : (0,1016:28,0);
3111 : (0,1016:28,0);
3113 : (0,1016:22,0);
3115 : (0,1016:22,0);
3117 : (0,1016:16,0);
3119 : (0,1016:16,0);
3121 : (0,1017:37,0);
3139 : (0,1028:17,0);
3247 : (0,985:10,10);
3248 : (0,1009:15,69);
3300 : (0,989:12,26);
3302 : (0,989:12,0);
3304 : (0,989:12,0);
3307 : (0,990:24,15);
3308 : (0,1010:33,71);
3309 : (0,1019:4,127);
3311 : (0,1019:4,0);
3313 : (0,1019:4,0);
3316 : (0,1017:26,87);
3317 : (0,1019:4,127);
3319 : (0,1019:4,0);
3321 : (0,1019:4,0);
3324 : (0,1028:16,119);
3332 : (0,991:32,18);
3337 : (0,989:12,14);
3341 : (0,986:8,11);
3345 : (0,993:8,33);
3349 : (0,994:8,40);
3353 : (0,985:4,10);
3358 : (0,999:8,53);
3363 : (0,1010:8,70);
3367 : (0,1009:9,69);
3372 : (0,998:4,52);
3377 : (0,1019:4,90);
3380 : (0,1017:4,86);

