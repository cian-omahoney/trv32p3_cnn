
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Apr 10 19:59:57 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern double round(double)
Fround : user_defined, called {
    fnm : "round" 'double round(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : round typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   22 : __rt_low typ=w32 bnd=m tref=__uint__
   23 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : x_low typ=w32 bnd=m tref=__uint__
   26 : x_high typ=w32 bnd=m tref=__uint__
   27 : __ct_0S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   30 : msw typ=w32 bnd=m tref=int32_t__
   31 : lsw typ=w32 bnd=m tref=u_int32_t__
   32 : exponent_less_1023 typ=w32 bnd=m tref=int32_t__
   33 : exponent_mask typ=w32 bnd=m lscp=18 tref=u_int32_t__
   34 : exponent_mask typ=w32 bnd=m lscp=48 tref=u_int32_t__
   49 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
   51 : __tmp typ=w32 bnd=m
   52 : __ct_20 typ=w32 val=20f bnd=m
   54 : __tmp typ=w32 bnd=m
   60 : __tmp typ=bool bnd=m
   61 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   63 : __tmp typ=bool bnd=m
   65 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
   67 : __tmp typ=w32 bnd=m
   69 : __ct_m1 typ=w32 val=-1f bnd=m
   71 : __tmp typ=bool bnd=m
   73 : __ct_1072693248 typ=t20s_rp12 val=261888f bnd=m
   75 : __tmp typ=w32 bnd=m
   79 : __ct_1048575 typ=w32 val=1048575f bnd=m
   83 : __tmp typ=w32 bnd=m
   93 : __ct_0s0 typ=w32 val=0s0 bnd=m
   95 : __tmp typ=w32 bnd=m
   97 : __ct_524288 typ=t20s_rp12 val=128f bnd=m
   99 : __tmp typ=w32 bnd=m
  100 : __tmp typ=w32 bnd=m
  103 : __tmp typ=w32 bnd=m
  104 : __tmp typ=w32 bnd=m
  108 : __ct_51 typ=w32 val=51f bnd=m
  110 : __tmp typ=bool bnd=m
  111 : __ct_1024 typ=w32 val=1024f bnd=m
  113 : __tmp typ=bool bnd=m
  122 : __tmp typ=w32 bnd=m
  124 : __tmp typ=w32 bnd=m
  127 : __tmp typ=bool bnd=m
  131 : __ct_1 typ=w32 val=1f bnd=m
  136 : __tmp typ=w32 bnd=m
  138 : __tmp typ=bool bnd=m
  142 : __tmp typ=w32 bnd=m
  157 : msw typ=w32 bnd=m
  158 : msw typ=w32 bnd=m
  161 : __tmpd typ=w32 bnd=m
  162 : __tmp typ=bool bnd=m
  166 : __ct_m1023 typ=w32 val=-1023f bnd=m
  167 : __ct_m20 typ=w32 val=-20f bnd=m
  172 : __ct_31 typ=w32 val=31f bnd=m
  173 : __linex typ=w32 bnd=m
  261 : a_low typ=w32 bnd=m tref=__uint__
  262 : a_high typ=w32 bnd=m tref=__uint__
  263 : b_low typ=w32 bnd=m tref=__uint__
  264 : b_high typ=w32 bnd=m tref=__uint__
  265 : f64_add typ=t21s_s2 val=0r bnd=m
  268 : __tmp typ=w32 bnd=m
  269 : __tmp typ=w32 bnd=m
  291 : __either typ=bool bnd=m
  292 : __trgt typ=t13s_s2 val=0j bnd=m
  293 : __trgt typ=t21s_s2 val=0j bnd=m
  294 : __trgt typ=t13s_s2 val=0j bnd=m
  295 : __trgt typ=t13s_s2 val=0j bnd=m
  296 : __trgt typ=t21s_s2 val=0j bnd=m
  297 : __trgt typ=t13s_s2 val=0j bnd=m
  298 : __trgt typ=t13s_s2 val=0j bnd=m
  299 : __trgt typ=t13s_s2 val=0j bnd=m
  300 : __trgt typ=t21s_s2 val=0j bnd=m
  301 : __trgt typ=t13s_s2 val=0j bnd=m
  302 : __trgt typ=t13s_s2 val=0j bnd=m
  303 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fround {
    #144 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x_low.28 var=25 stl=X off=12) inp ()  <39>;
    (x_low.29 var=25) deassign (x_low.28)  <40>;
    (x_high.32 var=26 stl=X off=13) inp ()  <43>;
    (x_high.33 var=26) deassign (x_high.32)  <44>;
    (__rd___sp.36 var=19) rd_res_reg (__R_SP.11 __sp.17)  <47>;
    (__ct_0S0.37 var=27) const ()  <48>;
    (__tmp.39 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0S0.37)  <50>;
    (__R_SP.40 var=12 __sp.41 var=18) wr_res_reg (__tmp.39 __sp.17)  <51>;
    (__ct_2146435072.64 var=49) const ()  <75>;
    (__tmp.66 var=51) __sint__ad___sint___sint (x_high.33 __ct_2146435072.64)  <77>;
    (__ct_20.67 var=52) const ()  <78>;
    (__tmp.69 var=54) __sint__rs___sint___sint (__tmp.66 __ct_20.67)  <80>;
    (exponent_less_1023.72 var=32) __sint__pl___sint___sint (__tmp.69 __ct_m1023.589)  <83>;
    (__tmp.75 var=60) bool__lt___sint___sint (exponent_less_1023.72 __ct_20.67)  <86>;
    (__ct_0.96 var=61) const ()  <108>;
    (__ct_m1.124 var=69) const ()  <137>;
    (__rd___sp.210 var=19) rd_res_reg (__R_SP.11 __sp.41)  <226>;
    (__ct_0s0.211 var=93) const ()  <227>;
    (__tmp.213 var=95) __Pvoid__pl___Pvoid___sint (__rd___sp.210 __ct_0s0.211)  <229>;
    (__ct_m1023.589 var=166) const ()  <681>;
    (__trgt.771 var=302) const ()  <1075>;
    () void_br_bool_t13s_s2 (__tmp.75 __trgt.771)  <1076>;
    (__either.772 var=291) undefined ()  <1077>;
    if {
        {
            () if_expr (__either.772)  <107>;
        } #5
        {
            #7 off=16
            (__tmp.98 var=63) bool__lt___sint___sint (exponent_less_1023.72 __ct_0.96)  <110>;
            (__trgt.759 var=295) const ()  <1054>;
            () void_br_bool_t13s_s2 (__tmp.98 __trgt.759)  <1055>;
            (__either.760 var=291) undefined ()  <1056>;
            if {
                {
                    () if_expr (__either.760)  <131>;
                } #9
                {
                    #11 off=21
                    (__ct_2147483648.120 var=65) const ()  <133>;
                    (__tmp.122 var=67) __uint__ad___uint___uint (x_high.33 __ct_2147483648.120)  <135>;
                    (__tmp.741 var=71) bool__ne___sint___sint (exponent_less_1023.72 __ct_m1.124)  <1009>;
                    (__trgt.754 var=292) const ()  <1045>;
                    () void_br_bool_t13s_s2 (__tmp.741 __trgt.754)  <1046>;
                    (__either.755 var=291) undefined ()  <1047>;
                    if {
                        {
                            () if_expr (__either.755)  <160>;
                        } #13
                        {
                        } #15 off=23
                        {
                            (__ct_1072693248.148 var=73) const ()  <162>;
                            (__tmp.150 var=75) __uint__or___uint___uint (__tmp.122 __ct_1072693248.148)  <164>;
                            (__trgt.756 var=293) const ()  <1048>;
                            () void_j_t21s_s2 (__trgt.756)  <1049>;
                        } #14 off=22
                        {
                            (msw.152 var=157) merge (__tmp.122 __tmp.150)  <166>;
                        } #16
                    } #12
                } #10
                {
                    #19 off=17
                    (__ct_1048575.156 var=79) const ()  <170>;
                    (exponent_mask.158 var=33) __uint__rs___uint___sint (__ct_1048575.156 exponent_less_1023.72)  <172>;
                    (__tmp.160 var=83) __uint__ad___uint___uint (x_high.33 exponent_mask.158)  <174>;
                    (__tmpd.581 var=161) __uint__or___uint___uint (__tmp.160 x_low.29)  <673>;
                    (__tmp.582 var=162) bool__eq___uint___uint (__tmpd.581 __ct_0.96)  <674>;
                    (__trgt.757 var=294) const ()  <1050>;
                    () void_br_bool_t13s_s2 (__tmp.582 __trgt.757)  <1051>;
                    (__either.758 var=291) undefined ()  <1052>;
                    if {
                        {
                            () if_expr (__either.758)  <225>;
                            () chess_rear_then ()  <1053>;
                        } #27
                        {
                            (__R_SP.214 var=12 __sp.215 var=18) wr_res_reg (__tmp.213 __sp.41)  <230>;
                            () void___rts_jr_w32 (__la.20)  <231>;
                            (__rt_low.217 var=22 stl=X off=10) assign (x_low.29)  <233>;
                            () out (__rt_low.217)  <234>;
                            (__rt_high.219 var=23 stl=X off=11) assign (x_high.33)  <236>;
                            () out (__rt_high.219)  <237>;
                            () sink (__sp.215)  <245>;
                        } #30 off=19 nxt=-2
                        {
                        } #31 off=18
                        {
                        } #32
                    } #26
                    #97 off=20
                    (__ct_524288.263 var=97) const ()  <287>;
                    (__tmp.265 var=99) __uint__rs___uint___sint (__ct_524288.263 exponent_less_1023.72)  <289>;
                    (__tmp.266 var=100) __uint__pl___uint___uint (x_high.33 __tmp.265)  <290>;
                    (__tmp.270 var=104) __uint__ad___uint___uint (__tmp.266 __tmp.627)  <294>;
                    (__tmp.627 var=103) __uint__er___uint___uint (exponent_mask.158 __ct_m1.124)  <751>;
                    (__trgt.761 var=296) const ()  <1057>;
                    () void_j_t21s_s2 (__trgt.761)  <1058>;
                } #18
                {
                    (msw.281 var=158) merge (msw.152 __tmp.270)  <305>;
                } #34
            } #8
        } #6
        {
            #102 off=1
            (__ct_51.294 var=108) const ()  <318>;
            (__tmp.631 var=110) bool__lt___sint___sint (__ct_51.294 exponent_less_1023.72)  <758>;
            (__trgt.769 var=301) const ()  <1071>;
            () void_br_bool_t13s_s2 (__tmp.631 __trgt.769)  <1072>;
            (__either.770 var=291) undefined ()  <1073>;
            if {
                {
                    () if_expr (__either.770)  <341>;
                    () chess_rear_then ()  <1074>;
                } #38
                {
                    #40 off=9
                    (__ct_1024.317 var=111) const ()  <342>;
                    (__tmp.742 var=113) bool__ne___sint___sint (exponent_less_1023.72 __ct_1024.317)  <1010>;
                    (__trgt.762 var=297) const ()  <1059>;
                    () void_br_bool_t13s_s2 (__tmp.742 __trgt.762)  <1060>;
                    (__either.763 var=291) undefined ()  <1061>;
                    if {
                        {
                            () if_expr (__either.763)  <365>;
                        } #42
                        {
                        } #44 off=13
                        {
                            #180 off=10
                            (f64_add.702 var=265) const ()  <895>;
                            (__R_SP.746 var=12 __sp.747 var=18) wr_res_reg (__tmp.213 __sp.41)  <1033>;
                            () void_j_t21s_s2 (f64_add.702)  <1042>;
                            call {
                                (a_low.704 var=261 stl=X off=12) assign (x_low.29)  <897>;
                                (a_high.705 var=262 stl=X off=13) assign (x_high.33)  <898>;
                                (b_low.706 var=263 stl=X off=14) assign (x_low.29)  <899>;
                                (b_high.707 var=264 stl=X off=15) assign (x_high.33)  <900>;
                                (__la.708 var=20 stl=X off=1) assign (__la.20)  <901>;
                                (__tmp.709 var=268 stl=X off=10 __tmp.710 var=269 stl=X off=11) Ff64_add (__la.708 a_low.704 a_high.705 b_low.706 b_high.707)  <902>;
                                (__tmp.712 var=268) deassign (__tmp.709)  <904>;
                                (__tmp.714 var=269) deassign (__tmp.710)  <906>;
                            } #157 off=11
                            #181 off=12 nxt=-2
                            (__rt_low.748 var=22 stl=X off=10) assign (__tmp.712)  <1035>;
                            () out (__rt_low.748)  <1036>;
                            (__rt_high.749 var=23 stl=X off=11) assign (__tmp.714)  <1037>;
                            () out (__rt_high.749)  <1038>;
                            () sink (__sp.747)  <1039>;
                        } #43
                        {
                        } #45
                    } #41
                    #47 off=14 nxt=-2
                    (__R_SP.346 var=12 __sp.347 var=18) wr_res_reg (__tmp.213 __sp.41)  <372>;
                    () void___rts_jr_w32 (__la.20)  <373>;
                    (__rt_low.349 var=22 stl=X off=10) assign (x_low.29)  <375>;
                    () out (__rt_low.349)  <376>;
                    (__rt_high.351 var=23 stl=X off=11) assign (x_high.33)  <378>;
                    () out (__rt_high.351)  <379>;
                    () sink (__sp.347)  <387>;
                    (msw.361 var=30) never ()  <395>;
                    (lsw.363 var=31) never ()  <397>;
                } #39
                {
                    #49 off=2
                    (__tmp.379 var=122) __sint__pl___sint___sint (exponent_less_1023.72 __ct_m20.590)  <413>;
                    (exponent_mask.380 var=34) __uint__rs___uint___sint (__ct_m1.124 __tmp.379)  <414>;
                    (__tmp.382 var=124) __uint__ad___uint___uint (x_low.29 exponent_mask.380)  <416>;
                    (__tmp.385 var=127) bool__eq___uint___uint (__tmp.382 __ct_0.96)  <419>;
                    (__ct_m20.590 var=167) const ()  <683>;
                    (__trgt.764 var=298) const ()  <1062>;
                    () void_br_bool_t13s_s2 (__tmp.385 __trgt.764)  <1063>;
                    (__either.765 var=291) undefined ()  <1064>;
                    if {
                        {
                            () if_expr (__either.765)  <440>;
                            () chess_rear_then ()  <1065>;
                        } #51
                        {
                            (__R_SP.410 var=12 __sp.411 var=18) wr_res_reg (__tmp.213 __sp.41)  <445>;
                            () void___rts_jr_w32 (__la.20)  <446>;
                            (__rt_low.413 var=22 stl=X off=10) assign (x_low.29)  <448>;
                            () out (__rt_low.413)  <449>;
                            (__rt_high.415 var=23 stl=X off=11) assign (x_high.33)  <451>;
                            () out (__rt_high.415)  <452>;
                            () sink (__sp.411)  <460>;
                        } #54 off=4 nxt=-2
                        {
                        } #55 off=3
                        {
                        } #56
                    } #50
                    #57 off=5
                    (__ct_1.458 var=131) const ()  <501>;
                    (__tmp.463 var=136) __uint__ls___uint___sint (__ct_1.458 __linex.593)  <506>;
                    (lsw.464 var=31) __uint__pl___uint___uint (x_low.29 __tmp.463)  <507>;
                    (__ct_31.592 var=172) const ()  <686>;
                    (__linex.593 var=173) __sint__mi___sint___sint (__ct_31.592 __tmp.379)  <688>;
                    (__tmp.743 var=138) bool__ge___uint___uint (lsw.464 x_low.29)  <1011>;
                    (__trgt.766 var=299) const ()  <1066>;
                    () void_br_bool_t13s_s2 (__tmp.743 __trgt.766)  <1067>;
                    (__either.767 var=291) undefined ()  <1068>;
                    if {
                        {
                            () if_expr (__either.767)  <529>;
                        } #59
                        {
                        } #61 off=7
                        {
                            (msw.488 var=30) __sint__pl___sint___sint (x_high.33 __ct_1.458)  <532>;
                            (__trgt.768 var=300) const ()  <1069>;
                            () void_j_t21s_s2 (__trgt.768)  <1070>;
                        } #60 off=6
                        {
                            (msw.489 var=30) merge (x_high.33 msw.488)  <533>;
                        } #62
                    } #58
                    #105 off=8
                    (lsw.491 var=31) __uint__ad___uint___uint (lsw.464 __tmp.635)  <535>;
                    (__tmp.635 var=142) __uint__er___uint___uint (exponent_mask.380 __ct_m1.124)  <765>;
                } #48
                {
                    (msw.499 var=30) merge (msw.361 msw.489)  <543>;
                    (lsw.501 var=31) merge (lsw.363 lsw.491)  <545>;
                } #64
            } #37
            #186 off=15
            (__trgt.773 var=303) const ()  <1078>;
            () void_j_t21s_s2 (__trgt.773)  <1079>;
        } #35
        {
            (msw.519 var=30) merge (msw.281 msw.499)  <563>;
            (lsw.521 var=31) merge (__ct_0.96 lsw.501)  <565>;
        } #65
    } #4
    #68 off=26 nxt=-2
    (__R_SP.549 var=12 __sp.550 var=18) wr_res_reg (__tmp.213 __sp.41)  <593>;
    () void___rts_jr_w32 (__la.20)  <594>;
    (__rt_low.552 var=22 stl=X off=10) assign (lsw.521)  <596>;
    () out (__rt_low.552)  <597>;
    (__rt_high.554 var=23 stl=X off=11) assign (msw.519)  <599>;
    () out (__rt_high.554)  <600>;
    () sink (__sp.550)  <608>;
} #0
0 : 'src/math.c';
----------
0 : (0,325:0,0);
4 : (0,336:2,6);
6 : (0,337:4,7);
7 : (0,338:29,7);
8 : (0,338:6,7);
10 : (0,339:8,8);
11 : (0,341:33,9);
12 : (0,341:10,9);
14 : (0,343:16,10);
15 : (0,341:10,12);
18 : (0,347:8,18);
19 : (0,349:36,19);
26 : (0,349:10,23);
30 : (0,351:12,24);
31 : (0,349:10,27);
35 : (0,358:7,38);
37 : (0,358:7,38);
39 : (0,359:4,39);
40 : (0,360:29,39);
41 : (0,360:6,39);
43 : (0,364:8,40);
44 : (0,362:8,43);
47 : (0,360:6,47);
48 : (0,367:4,51);
49 : (0,371:32,53);
50 : (0,371:6,53);
54 : (0,373:8,54);
55 : (0,371:6,57);
57 : (0,376:14,61);
58 : (0,376:6,61);
60 : (0,377:12,62);
61 : (0,376:6,64);
68 : (0,384:2,84);
97 : (0,354:14,31);
102 : (0,358:30,38);
105 : (0,380:10,68);
144 : (0,336:25,6);
157 : (0,362:17,40);
180 : (0,360:6,47);
181 : (0,360:6,47);
----------
47 : (0,325:7,0);
48 : (0,325:7,0);
50 : (0,325:7,0);
51 : (0,325:7,0);
75 : (0,334:31,0);
77 : (0,334:29,5);
78 : (0,334:46,0);
80 : (0,334:43,5);
83 : (0,334:50,5);
86 : (0,336:25,6);
107 : (0,336:2,6);
108 : (0,338:31,0);
110 : (0,338:29,7);
131 : (0,338:6,7);
133 : (0,340:14,0);
135 : (0,340:14,8);
137 : (0,341:36,0);
160 : (0,341:10,9);
162 : (0,343:16,0);
164 : (0,343:16,10);
166 : (0,341:10,14);
170 : (0,348:36,0);
172 : (0,348:58,18);
174 : (0,349:19,19);
225 : (0,349:10,23);
226 : (0,351:12,0);
227 : (0,351:12,0);
229 : (0,351:12,0);
230 : (0,351:12,24);
231 : (0,351:12,24);
233 : (0,351:19,0);
236 : (0,351:19,0);
287 : (0,353:17,0);
289 : (0,353:39,30);
290 : (0,353:14,30);
294 : (0,354:14,31);
305 : (0,338:6,35);
318 : (0,358:32,0);
341 : (0,358:7,38);
342 : (0,360:32,0);
365 : (0,360:6,39);
372 : (0,360:6,47);
373 : (0,360:6,47);
375 : (0,360:6,0);
378 : (0,360:6,0);
413 : (0,368:66,51);
414 : (0,368:43,51);
416 : (0,371:15,53);
419 : (0,371:32,53);
440 : (0,371:6,53);
445 : (0,373:8,54);
446 : (0,373:8,54);
448 : (0,373:15,0);
451 : (0,373:15,0);
501 : (0,375:19,0);
506 : (0,375:32,60);
507 : (0,375:16,60);
529 : (0,376:6,61);
532 : (0,377:12,62);
533 : (0,376:6,66);
535 : (0,380:10,68);
543 : (0,358:7,71);
545 : (0,358:7,71);
563 : (0,336:2,73);
565 : (0,336:2,73);
593 : (0,384:2,84);
594 : (0,384:2,84);
596 : (0,384:9,0);
599 : (0,384:9,0);
673 : (0,349:41,22);
674 : (0,349:41,22);
681 : (0,334:50,0);
683 : (0,368:66,0);
688 : (0,375:39,60);
751 : (0,354:17,31);
758 : (0,358:30,38);
765 : (0,380:13,68);
895 : (0,362:17,0);
897 : (0,362:17,40);
898 : (0,362:17,40);
899 : (0,362:17,40);
900 : (0,362:17,40);
901 : (0,362:17,40);
902 : (0,362:17,40);
904 : (0,362:17,40);
906 : (0,362:17,40);
1009 : (0,341:33,9);
1010 : (0,360:29,39);
1011 : (0,376:14,61);
1033 : (0,360:6,47);
1035 : (0,360:6,0);
1037 : (0,360:6,0);
1042 : (0,362:17,40);
1046 : (0,341:10,9);
1051 : (0,349:10,23);
1055 : (0,338:6,7);
1060 : (0,360:6,39);
1063 : (0,371:6,53);
1067 : (0,376:6,61);
1072 : (0,358:7,38);
1076 : (0,336:2,6);

