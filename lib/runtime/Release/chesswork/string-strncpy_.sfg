
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:32:52 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strncpy(char * restrict, const char * restrict, size_t)
Fstrncpy : user_defined, called {
    fnm : "strncpy" 'char *strncpy(char * restrict, const char * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
***/

[
    0 : strncpy typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s1__rstr typ=w08 bnd=b stl=DMb
   20 : s2__rstr typ=w08 bnd=b stl=DMb
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   23 : __rt typ=w32 bnd=p tref=__P__cchar__
   24 : s1 typ=w32 bnd=p tref=__P__cchar__
   25 : s2 typ=w32 bnd=p tref=__P__cchar__
   26 : n typ=w32 bnd=p tref=size_t__
   27 : __ct_0S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   31 : ns typ=w32 bnd=m tref=ptrdiff_t__
   38 : __ct_1 typ=w32 val=1f bnd=m
   41 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   43 : __tmp typ=bool bnd=m
   47 : __fch_s2__rstr typ=w08 bnd=m
   54 : __tmp typ=bool bnd=m
   57 : __tmp typ=bool bnd=m
   63 : __tmp typ=bool bnd=m
   67 : __fch_s2__rstr typ=w08 bnd=m
   74 : __tmp typ=bool bnd=m
   77 : __tmp typ=bool bnd=m
   83 : __tmp typ=bool bnd=m
   84 : __ct_0 typ=w08 val=0f bnd=m
   94 : __tmp typ=bool bnd=m
   95 : __ct_0s0 typ=w32 val=0s0 bnd=m
   97 : __tmp typ=w32 bnd=m
  110 : __ct_m1 typ=w32 val=-1f bnd=m
  111 : __shv_s1 typ=w32 bnd=m
  112 : __shv_s2 typ=w32 bnd=m
  113 : __shv_s1 typ=w32 bnd=m
  114 : __shv_s2 typ=w32 bnd=m
  115 : __shv_ns typ=w32 bnd=m
  116 : __shv_s1 typ=w32 bnd=m
  117 : __shv_ns typ=w32 bnd=m
  131 : __true typ=bool val=1f bnd=m
  132 : __false typ=bool val=0f bnd=m
  133 : __either typ=bool bnd=m
  134 : __trgt typ=t13s_s2 val=0j bnd=m
  135 : __trgt typ=t13s_s2 val=0j bnd=m
  136 : __trgt typ=t13s_s2 val=0j bnd=m
  137 : __trgt typ=t13s_s2 val=0j bnd=m
  138 : __trgt typ=t21s_s2 val=0j bnd=m
  139 : __trgt typ=t13s_s2 val=0j bnd=m
  140 : __trgt typ=t13s_s2 val=0j bnd=m
  141 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrncpy {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (s1__rstr.18 var=19) source ()  <29>;
    (s2__rstr.19 var=20) source ()  <30>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (s1.25 var=24 stl=X off=11) inp ()  <36>;
    (s1.26 var=24) deassign (s1.25)  <37>;
    (s2.28 var=25 stl=X off=12) inp ()  <39>;
    (s2.29 var=25) deassign (s2.28)  <40>;
    (n.31 var=26 stl=X off=13) inp ()  <42>;
    (n.32 var=26) deassign (n.31)  <43>;
    (__rd___sp.34 var=21) rd_res_reg (__R_SP.11 __sp.17)  <45>;
    (__ct_0S0.35 var=27) const ()  <46>;
    (__tmp.37 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_0S0.35)  <48>;
    (__R_SP.38 var=12 __sp.39 var=18) wr_res_reg (__tmp.37 __sp.17)  <49>;
    (__ct_1.50 var=38) const ()  <61>;
    (ns.52 var=31) __sint__pl___sint___sint (n.32 __ct_m1.367)  <63>;
    (__ct_0.53 var=41) const ()  <64>;
    (__ct_m1.367 var=110) const ()  <366>;
    (__tmp.398 var=43) bool__eq___sint___sint (n.32 __ct_0.53)  <428>;
    (__trgt.402 var=134) const ()  <440>;
    () void_br_bool_t13s_s2 (__tmp.398 __trgt.402)  <441>;
    (__either.403 var=133) undefined ()  <442>;
    if {
        {
            () if_expr (__either.403)  <87>;
        } #5
        {
            (__true.409 var=131) const ()  <450>;
        } #7
        {
            (__fch_s2__rstr.79 var=47) load (__M_DMb.2 s2.29 s2__rstr.19)  <91>;
            (__M_DMb.83 var=3 s1__rstr.84 var=19) store (__fch_s2__rstr.79 s1.26 s1__rstr.18)  <95>;
            (__shv_s1.372 var=111) __Pvoid__pl___Pvoid___sint (s1.26 __ct_1.50)  <372>;
            (__shv_s2.373 var=112) __Pvoid__pl___Pvoid___sint (s2.29 __ct_1.50)  <373>;
            (__tmp.396 var=54) bool__eq___sint___sint (__fch_s2__rstr.79 __ct_0.53)  <426>;
            (__trgt.410 var=137) const ()  <451>;
            () void_br_bool_t13s_s2 (__tmp.396 __trgt.410)  <452>;
            (__either.411 var=133) undefined ()  <453>;
        } #6 off=1
        {
            (s1__rstr.92 var=19) merge (s1__rstr.18 s1__rstr.84)  <103>;
            (s1.93 var=24) merge (s1.26 __shv_s1.372)  <104>;
            (s2.96 var=25) merge (s2.29 __shv_s2.373)  <107>;
            (__tmp.397 var=57) merge (__true.409 __either.411)  <427>;
        } #8
    } #4
    if {
        {
            () if_expr (__tmp.397)  <128>;
            () chess_frequent_else ()  <129>;
            () chess_rear_then ()  <454>;
        } #11
        {
            (__trgt.412 var=138) const ()  <455>;
            () void_j_t21s_s2 (__trgt.412)  <456>;
        } #23 off=6
        {
            #196 off=2
            (__trgt.404 var=135) const ()  <443>;
            (__trgt.407 var=136) const ()  <447>;
            do {
                {
                    (s1__rstr.123 var=19) entry (s1__rstr.196 s1__rstr.92)  <136>;
                    (s1.127 var=24) entry (s1.204 s1.93)  <140>;
                    (ns.128 var=31) entry (ns.206 ns.52)  <141>;
                    (s2.133 var=25) entry (s2.216 s2.96)  <146>;
                } #14
                {
                    #16 off=3
                    (__shv_ns.376 var=115) __sint__pl___sint___sint (ns.128 __ct_m1.367)  <376>;
                    (__tmp.399 var=63) bool__eq___sint___sint (ns.128 __ct_0.53)  <429>;
                    () void_br_bool_t13s_s2 (__tmp.399 __trgt.404)  <444>;
                    (__either.405 var=133) undefined ()  <445>;
                    if {
                        {
                            () if_expr (__either.405)  <176>;
                        } #18
                        {
                            (__false.406 var=132) const ()  <446>;
                        } #20
                        {
                            (__fch_s2__rstr.166 var=67) load (__M_DMb.2 s2.133 s2__rstr.19)  <180>;
                            (__M_DMb.170 var=3 s1__rstr.171 var=19) store (__fch_s2__rstr.166 s1.127 s1__rstr.123)  <184>;
                            (__tmp.175 var=74) bool__ne___sint___sint (__fch_s2__rstr.166 __ct_0.53)  <188>;
                            (__shv_s1.374 var=113) __Pvoid__pl___Pvoid___sint (s1.127 __ct_1.50)  <374>;
                            (__shv_s2.375 var=114) __Pvoid__pl___Pvoid___sint (s2.133 __ct_1.50)  <375>;
                            () void_br_bool_t13s_s2 (__tmp.175 __trgt.407)  <448>;
                            (__either.408 var=133) undefined ()  <449>;
                        } #19 off=4
                        {
                            (__tmp.178 var=77) merge (__false.406 __either.408)  <191>;
                            (s1__rstr.179 var=19) merge (s1__rstr.123 s1__rstr.171)  <192>;
                            (s1.180 var=24) merge (s1.127 __shv_s1.374)  <193>;
                            (s2.183 var=25) merge (s2.133 __shv_s2.375)  <196>;
                        } #21
                    } #17
                } #15
                {
                    () while_expr (__tmp.178)  <197>;
                    (s1__rstr.196 var=19 s1__rstr.197 var=19) exit (s1__rstr.179)  <204>;
                    (s1.204 var=24 s1.205 var=24) exit (s1.180)  <208>;
                    (ns.206 var=31 ns.207 var=31) exit (__shv_ns.376)  <209>;
                    (s2.216 var=25 s2.217 var=25) exit (s2.183)  <214>;
                } #22
            } #13 rng=[1,2147483647]
        } #12
        {
            (s1__rstr.224 var=19) merge (s1__rstr.92 s1__rstr.197)  <218>;
            (s1.225 var=24) merge (s1.93 s1.205)  <219>;
            (ns.226 var=31) merge (ns.52 ns.207)  <220>;
        } #24
    } #10
    #134 off=7
    (ns.233 var=31) __sint__pl___sint___sint (ns.226 __ct_m1.367)  <227>;
    (__tmp.395 var=83) bool__ge___sint___sint (__ct_0.53 ns.226)  <425>;
    (__trgt.415 var=140) const ()  <460>;
    () void_br_bool_t13s_s2 (__tmp.395 __trgt.415)  <461>;
    (__either.416 var=133) undefined ()  <462>;
    if {
        {
            () if_expr (__either.416)  <251>;
            () chess_frequent_else ()  <252>;
            () chess_rear_then ()  <463>;
        } #27
        {
            (__trgt.417 var=141) const ()  <464>;
            () void_j_t21s_s2 (__trgt.417)  <465>;
        } #33 off=11
        {
            #197 off=8
            (__ct_0.277 var=84) const ()  <273>;
            (__trgt.413 var=139) const ()  <457>;
            do {
                {
                    (s1__rstr.263 var=19) entry (s1__rstr.302 s1__rstr.224)  <259>;
                    (s1.267 var=24) entry (s1.310 s1.225)  <263>;
                    (ns.268 var=31) entry (ns.312 ns.233)  <264>;
                } #30
                {
                    (__M_DMb.282 var=3 s1__rstr.283 var=19) store (__ct_0.277 s1.267 s1__rstr.263)  <278>;
                    (__shv_s1.377 var=116) __Pvoid__pl___Pvoid___sint (s1.267 __ct_1.50)  <377>;
                    (__shv_ns.378 var=117) __sint__pl___sint___sint (ns.268 __ct_m1.367)  <378>;
                    (__tmp.387 var=94) bool__lt___sint___sint (__ct_0.53 ns.268)  <399>;
                    () void_br_bool_t13s_s2 (__tmp.387 __trgt.413)  <458>;
                    (__either.414 var=133) undefined ()  <459>;
                } #141 off=9
                {
                    () while_expr (__either.414)  <285>;
                    (s1__rstr.302 var=19 s1__rstr.303 var=19) exit (s1__rstr.283)  <292>;
                    (s1.310 var=24 s1.311 var=24) exit (__shv_s1.377)  <296>;
                    (ns.312 var=31 ns.313 var=31) exit (__shv_ns.378)  <297>;
                } #32
            } #29 rng=[1,2147483647]
        } #28
        {
            (s1__rstr.330 var=19) merge (s1__rstr.224 s1__rstr.303)  <306>;
        } #34
    } #26
    #36 off=12 nxt=-2
    (__rd___sp.335 var=21) rd_res_reg (__R_SP.11 __sp.39)  <311>;
    (__ct_0s0.336 var=95) const ()  <312>;
    (__tmp.338 var=97) __Pvoid__pl___Pvoid___sint (__rd___sp.335 __ct_0s0.336)  <314>;
    (__R_SP.339 var=12 __sp.340 var=18) wr_res_reg (__tmp.338 __sp.39)  <315>;
    () void___rts_jr_w32 (__la.22)  <316>;
    (__rt.341 var=23 stl=X off=10) assign (s1.26)  <317>;
    () out (__rt.341)  <318>;
    () sink (__sp.340)  <324>;
    () sink (s1__rstr.330)  <325>;
} #0
0 : 'src/string.c';
----------
0 : (0,50:0,0);
3 : (0,55:4,5);
4 : (0,55:4,5);
6 : (0,55:4,6);
7 : (0,55:4,11);
10 : (0,55:4,13);
12 : (0,55:4,14);
13 : (0,55:4,14);
15 : (0,55:35,14);
16 : (0,55:16,17);
17 : (0,55:16,17);
19 : (0,55:16,18);
20 : (0,55:16,23);
23 : (0,55:4,27);
26 : (0,56:4,32);
28 : (0,56:4,33);
29 : (0,56:4,33);
33 : (0,56:4,40);
36 : (0,58:4,43);
134 : (0,56:4,32);
141 : (0,56:16,38);
----------
45 : (0,50:6,0);
46 : (0,50:6,0);
48 : (0,50:6,0);
49 : (0,50:6,0);
61 : (0,55:4,0);
63 : (0,55:4,4);
64 : (0,55:4,0);
87 : (0,55:4,5);
91 : (0,55:4,8);
95 : (0,55:4,10);
103 : (0,55:4,12);
104 : (0,55:4,12);
107 : (0,55:4,12);
128 : (0,55:4,13);
136 : (0,55:4,14);
140 : (0,55:4,14);
141 : (0,55:4,14);
146 : (0,55:4,14);
176 : (0,55:16,17);
180 : (0,55:28,20);
184 : (0,55:20,22);
188 : (0,55:16,22);
191 : (0,55:16,24);
192 : (0,55:16,24);
193 : (0,55:16,24);
196 : (0,55:16,24);
197 : (0,55:4,25);
204 : (0,55:4,25);
208 : (0,55:4,25);
209 : (0,55:4,25);
214 : (0,55:4,25);
218 : (0,55:4,29);
219 : (0,55:4,29);
220 : (0,55:4,29);
227 : (0,56:4,31);
251 : (0,56:4,32);
259 : (0,56:4,33);
263 : (0,56:4,33);
264 : (0,56:4,33);
273 : (0,57:14,0);
278 : (0,57:8,35);
285 : (0,56:4,38);
292 : (0,56:4,38);
296 : (0,56:4,38);
297 : (0,56:4,38);
306 : (0,56:4,42);
311 : (0,58:4,0);
312 : (0,58:4,0);
314 : (0,58:4,0);
315 : (0,58:4,43);
316 : (0,58:4,43);
317 : (0,58:11,0);
372 : (0,55:4,0);
373 : (0,55:4,0);
374 : (0,55:23,0);
375 : (0,55:31,0);
376 : (0,55:13,0);
377 : (0,57:11,0);
378 : (0,56:13,0);
399 : (0,56:16,38);
425 : (0,56:4,32);
426 : (0,55:4,10);
427 : (0,55:4,12);
428 : (0,55:4,5);
429 : (0,55:16,17);
441 : (0,55:4,5);
444 : (0,55:16,17);
448 : (0,55:4,25);
452 : (0,55:4,13);
458 : (0,56:4,38);
461 : (0,56:4,32);

