
// File generated by noodle version U-2022.12#33f3808fcb#221128, Sat Mar 16 14:39:48 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strcpy(char * restrict, const char * restrict)
Fstrcpy : user_defined, called {
    fnm : "strcpy" 'char *strcpy(char * restrict, const char * restrict)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
}
****
***/

[
    0 : strcpy typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s1__rstr typ=w08 bnd=b stl=DMb
   20 : s2__rstr typ=w08 bnd=b stl=DMb
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   23 : __rt typ=w32 bnd=p tref=__P__cchar__
   24 : s1 typ=w32 bnd=p tref=__P__cchar__
   25 : s2 typ=w32 bnd=p tref=__P__cchar__
   26 : __ct_0S0 typ=w32 val=0S0 bnd=m
   28 : __tmp typ=w32 bnd=m
   32 : __ct_1 typ=w32 val=1f bnd=m
   35 : __fch_s2__rstr typ=w08 bnd=m
   40 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   42 : __tmp typ=bool bnd=m
   46 : __fch_s2__rstr typ=w08 bnd=m
   53 : __tmp typ=bool bnd=m
   54 : __ct_0s0 typ=w32 val=0s0 bnd=m
   56 : __tmp typ=w32 bnd=m
   64 : __shv_s1 typ=w32 bnd=m
   65 : __shv_s2 typ=w32 bnd=m
   75 : __either typ=bool bnd=m
   76 : __trgt typ=t13s_s2 val=0j bnd=m
   77 : __trgt typ=t13s_s2 val=0j bnd=m
   78 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrcpy {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (s1__rstr.18 var=19) source ()  <29>;
    (s2__rstr.19 var=20) source ()  <30>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (s1.25 var=24 stl=X off=11) inp ()  <36>;
    (s1.26 var=24) deassign (s1.25)  <37>;
    (s2.28 var=25 stl=X off=12) inp ()  <39>;
    (s2.29 var=25) deassign (s2.28)  <40>;
    (__rd___sp.31 var=21) rd_res_reg (__R_SP.11 __sp.17)  <42>;
    (__ct_0S0.32 var=26) const ()  <43>;
    (__tmp.34 var=28) __Pvoid__pl___Pvoid___sint (__rd___sp.31 __ct_0S0.32)  <45>;
    (__R_SP.35 var=12 __sp.36 var=18) wr_res_reg (__tmp.34 __sp.17)  <46>;
    (__ct_1.41 var=32) const ()  <52>;
    (s2.43 var=25) __Pvoid__pl___Pvoid___sint (s2.29 __ct_1.41)  <54>;
    (__fch_s2__rstr.44 var=35) load (__M_DMb.2 s2.29 s2__rstr.19)  <55>;
    (s1.47 var=24) __Pvoid__pl___Pvoid___sint (s1.26 __ct_1.41)  <58>;
    (__M_DMb.48 var=3 s1__rstr.49 var=19) store (__fch_s2__rstr.44 s1.26 s1__rstr.18)  <59>;
    (__ct_0.51 var=40) const ()  <61>;
    (__tmp.167 var=42) bool__eq___sint___sint (__fch_s2__rstr.44 __ct_0.51)  <197>;
    (__trgt.172 var=77) const ()  <209>;
    () void_br_bool_t13s_s2 (__tmp.167 __trgt.172)  <210>;
    (__either.173 var=75) undefined ()  <211>;
    if {
        {
            () if_expr (__either.173)  <79>;
            () chess_frequent_else ()  <80>;
            () chess_rear_then ()  <212>;
        } #5
        {
            (__trgt.174 var=78) const ()  <213>;
            () void_j_t21s_s2 (__trgt.174)  <214>;
        } #11 off=4
        {
            #87 off=1
            (__trgt.170 var=76) const ()  <206>;
            do {
                {
                    (s1__rstr.75 var=19) entry (s1__rstr.109 s1__rstr.49)  <87>;
                    (s1.79 var=24) entry (s1.117 s1.47)  <91>;
                    (s2.82 var=25) entry (s2.123 s2.43)  <94>;
                } #8
                {
                    (__fch_s2__rstr.87 var=46) load (__M_DMb.2 s2.82 s2__rstr.19)  <99>;
                    (__M_DMb.91 var=3 s1__rstr.92 var=19) store (__fch_s2__rstr.87 s1.79 s1__rstr.75)  <103>;
                    (__tmp.96 var=53) bool__ne___sint___sint (__fch_s2__rstr.87 __ct_0.51)  <107>;
                    (__shv_s1.160 var=64) __Pvoid__pl___Pvoid___sint (s1.79 __ct_1.41)  <178>;
                    (__shv_s2.161 var=65) __Pvoid__pl___Pvoid___sint (s2.82 __ct_1.41)  <179>;
                    () void_br_bool_t13s_s2 (__tmp.96 __trgt.170)  <207>;
                    (__either.171 var=75) undefined ()  <208>;
                } #9 off=2
                {
                    () while_expr (__either.171)  <108>;
                    (s1__rstr.109 var=19 s1__rstr.110 var=19) exit (s1__rstr.92)  <115>;
                    (s1.117 var=24 s1.118 var=24) exit (__shv_s1.160)  <119>;
                    (s2.123 var=25 s2.124 var=25) exit (__shv_s2.161)  <122>;
                } #10
            } #7 rng=[1,2147483647]
        } #6
        {
            (s1__rstr.127 var=19) merge (s1__rstr.49 s1__rstr.110)  <124>;
        } #12
    } #4
    #14 off=5 nxt=-2
    (__rd___sp.132 var=21) rd_res_reg (__R_SP.11 __sp.36)  <129>;
    (__ct_0s0.133 var=54) const ()  <130>;
    (__tmp.135 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.132 __ct_0s0.133)  <132>;
    (__R_SP.136 var=12 __sp.137 var=18) wr_res_reg (__tmp.135 __sp.36)  <133>;
    () void___rts_jr_w32 (__la.22)  <134>;
    (__rt.138 var=23 stl=X off=10) assign (s1.26)  <135>;
    () out (__rt.138)  <136>;
    () sink (__sp.137)  <142>;
    () sink (s1__rstr.127)  <143>;
} #0
0 : 'src/string.c';
----------
0 : (0,43:0,0);
3 : (0,46:4,6);
4 : (0,46:4,6);
6 : (0,46:4,7);
7 : (0,46:4,7);
9 : (0,46:27,7);
11 : (0,46:4,14);
14 : (0,47:4,17);
----------
42 : (0,43:6,0);
43 : (0,43:6,0);
45 : (0,43:6,0);
46 : (0,43:6,0);
52 : (0,46:4,0);
54 : (0,46:4,3);
55 : (0,46:4,4);
58 : (0,46:4,5);
59 : (0,46:4,6);
61 : (0,46:4,0);
79 : (0,46:4,6);
87 : (0,46:4,7);
91 : (0,46:4,7);
94 : (0,46:4,7);
99 : (0,46:20,10);
103 : (0,46:12,12);
107 : (0,46:4,12);
108 : (0,46:4,12);
115 : (0,46:4,12);
119 : (0,46:4,12);
122 : (0,46:4,12);
124 : (0,46:4,16);
129 : (0,47:4,0);
130 : (0,47:4,0);
132 : (0,47:4,0);
133 : (0,47:4,17);
134 : (0,47:4,17);
135 : (0,47:11,0);
178 : (0,46:15,0);
179 : (0,46:23,0);
197 : (0,46:4,6);
207 : (0,46:4,12);
210 : (0,46:4,6);

