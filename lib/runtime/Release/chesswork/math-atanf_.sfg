
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:58:01 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float atanf(float)
Fatanf : user_defined, called {
    fnm : "atanf" 'float atanf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
}
****
!!  bool f32_lt(float32_t, float32_t)
Ff32_lt : user_defined, called {
    fnm : "f32_lt" 'bool f32_lt(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_sub(float32_t, float32_t)
Ff32_sub : user_defined, called {
    fnm : "f32_sub" 'float32_t f32_sub(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_div(float32_t, float32_t)
Ff32_div : user_defined, called {
    fnm : "f32_div" 'float32_t f32_div(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : atanf typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : _ZZ5atanffE6atanhi typ=w08 bnd=i sz=16 algn=4 stl=DMb tref=__A4__ffloat_DMb
   20 : _ZZ5atanffE6atanlo typ=w08 bnd=i sz=16 algn=4 stl=DMb tref=__A4__ffloat_DMb
   21 : _ZZ5atanffE2aT typ=w08 bnd=i sz=44 algn=4 stl=DMb tref=__A11__ffloat_DMb
   22 : __rd___sp typ=w32 bnd=m
   24 : __ptr_atanhi typ=w32 val=0a bnd=m adro=19
   26 : __ptr_atanlo typ=w32 val=0a bnd=m adro=20
   28 : __ptr_aT typ=w32 val=0a bnd=m adro=21
   29 : __la typ=w32 bnd=p tref=w32__
   30 : __rt typ=w32 bnd=p tref=__ffloat__
   31 : x typ=w32 bnd=p tref=__ffloat__
   32 : __ct_0S0 typ=w32 val=0S0 bnd=m
   34 : __tmp typ=w32 bnd=m
   36 : ix typ=w32 bnd=m tref=int32_t__
   37 : id typ=w32 bnd=m tref=int32_t__
   41 : z typ=w32 bnd=m tref=__ffloat__
   42 : w typ=w32 bnd=m tref=__ffloat__
   43 : s1 typ=w32 bnd=m tref=__ffloat__
   44 : s2 typ=w32 bnd=m tref=__ffloat__
   46 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   49 : __ct_1350565888 typ=t20s_rp12 val=329728f bnd=m
   51 : __tmp typ=bool bnd=m
   52 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   54 : __tmp typ=bool bnd=m
   56 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   58 : __tmp typ=bool bnd=m
   59 : __ct_12 typ=w32 val=12f bnd=m
   62 : __fch__ZZ5atanffE6atanhi typ=w32 bnd=m
   66 : __fch__ZZ5atanffE6atanlo typ=w32 bnd=m
   74 : __tmp typ=w32 bnd=m
   80 : __ct_1054867456 typ=t20s_rp12 val=257536f bnd=m
   82 : __tmp typ=bool bnd=m
   83 : __ct_822083584 typ=t20s_rp12 val=200704f bnd=m
   85 : __tmp typ=bool bnd=m
   86 : __ct_1900671690 typ=w32 val=1900671690f bnd=m
   88 : __tmp typ=w32 bnd=m
   89 : __ct_1065353216 typ=t20s_rp12 val=260096f bnd=m
   91 : __tmp typ=bool bnd=m
   92 : __ct_0s0 typ=w32 val=0s0 bnd=m
   94 : __tmp typ=w32 bnd=m
   95 : __ct_m1 typ=w32 val=-1f bnd=m
  102 : __ct_1066926080 typ=t20s_rp12 val=260480f bnd=m
  104 : __tmp typ=bool bnd=m
  105 : __ct_1060110336 typ=t20s_rp12 val=258816f bnd=m
  107 : __tmp typ=bool bnd=m
  110 : __ct_1073741824 typ=t20s_rp12 val=262144f bnd=m
  112 : __tmp typ=w32 bnd=m
  115 : __tmp typ=w32 bnd=m
  118 : __tmp typ=w32 bnd=m
  120 : __ct_1 typ=w32 val=1f bnd=m
  124 : __tmp typ=w32 bnd=m
  127 : __tmp typ=w32 bnd=m
  129 : __ct_1075576832 typ=t20s_rp12 val=262592f bnd=m
  131 : __tmp typ=bool bnd=m
  132 : __ct_2 typ=w32 val=2f bnd=m
  134 : __ct_1069547520 typ=t20s_rp12 val=261120f bnd=m
  136 : __tmp typ=w32 bnd=m
  141 : __tmp typ=w32 bnd=m
  142 : __tmp typ=w32 bnd=m
  144 : __ct_3 typ=w32 val=3f bnd=m
  146 : __ct_3212836864 typ=t20s_rp12 val=-264192f bnd=m
  154 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  155 : __ct_8 typ=w32 val=8f bnd=m
  158 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  159 : __ct_16 typ=w32 val=16f bnd=m
  162 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  163 : __ct_24 typ=w32 val=24f bnd=m
  166 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  167 : __ct_32 typ=w32 val=32f bnd=m
  170 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  171 : __ct_40 typ=w32 val=40f bnd=m
  174 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  175 : __tmp typ=w32 bnd=m
  176 : __tmp typ=w32 bnd=m
  177 : __tmp typ=w32 bnd=m
  178 : __tmp typ=w32 bnd=m
  179 : __tmp typ=w32 bnd=m
  180 : __tmp typ=w32 bnd=m
  181 : __tmp typ=w32 bnd=m
  182 : __tmp typ=w32 bnd=m
  183 : __tmp typ=w32 bnd=m
  184 : __tmp typ=w32 bnd=m
  186 : __ct_4 typ=w32 val=4f bnd=m
  189 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  193 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  194 : __ct_20 typ=w32 val=20f bnd=m
  197 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  198 : __ct_28 typ=w32 val=28f bnd=m
  201 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  202 : __ct_36 typ=w32 val=36f bnd=m
  205 : __fch__ZZ5atanffE2aT typ=w32 bnd=m
  206 : __tmp typ=w32 bnd=m
  207 : __tmp typ=w32 bnd=m
  208 : __tmp typ=w32 bnd=m
  209 : __tmp typ=w32 bnd=m
  210 : __tmp typ=w32 bnd=m
  211 : __tmp typ=w32 bnd=m
  212 : __tmp typ=w32 bnd=m
  213 : __tmp typ=w32 bnd=m
  217 : __tmp typ=bool bnd=m
  218 : __tmp typ=w32 bnd=m
  219 : __tmp typ=w32 bnd=m
  223 : __tmp typ=w32 bnd=m
  224 : __tmp typ=w32 bnd=m
  225 : __fch__ZZ5atanffE6atanhi typ=w32 bnd=m
  231 : __tmp typ=w32 bnd=m
  232 : __fch__ZZ5atanffE6atanlo typ=w32 bnd=m
  233 : __tmp typ=w32 bnd=m
  234 : __tmp typ=w32 bnd=m
  238 : __tmp typ=bool bnd=m
  241 : __tmp typ=w32 bnd=m
  251 : __shv___ptr_aT typ=w32 bnd=m
  252 : __ptr__ZZ5atanffE6atanhi__a12 typ=w32 val=12a bnd=m adro=19
  253 : __ptr__ZZ5atanffE6atanlo__a12 typ=w32 val=12a bnd=m adro=20
  268 : a typ=w32 bnd=m tref=float32_t__
  269 : b typ=w32 bnd=m tref=float32_t__
  270 : f32_lt typ=t21s_s2 val=0r bnd=m
  271 : __link typ=w32 bnd=m
  272 : __tmp typ=w32 bnd=m
  277 : a typ=w32 bnd=m tref=float32_t__
  278 : b typ=w32 bnd=m tref=float32_t__
  279 : f32_add typ=t21s_s2 val=0r bnd=m
  280 : __link typ=w32 bnd=m
  284 : a typ=w32 bnd=m tref=float32_t__
  285 : b typ=w32 bnd=m tref=float32_t__
  286 : f32_sub typ=t21s_s2 val=0r bnd=m
  287 : __link typ=w32 bnd=m
  292 : a typ=w32 bnd=m tref=float32_t__
  293 : b typ=w32 bnd=m tref=float32_t__
  294 : f32_mul typ=t21s_s2 val=0r bnd=m
  295 : __link typ=w32 bnd=m
  300 : a typ=w32 bnd=m tref=float32_t__
  301 : b typ=w32 bnd=m tref=float32_t__
  302 : f32_div typ=t21s_s2 val=0r bnd=m
  303 : __link typ=w32 bnd=m
  351 : __either typ=bool bnd=m
  352 : __trgt typ=t13s_s2 val=0j bnd=m
  353 : __trgt typ=t13s_s2 val=0j bnd=m
  354 : __trgt typ=t13s_s2 val=0j bnd=m
  355 : __trgt typ=t13s_s2 val=0j bnd=m
  356 : __trgt typ=t21s_s2 val=0j bnd=m
  357 : __trgt typ=t13s_s2 val=0j bnd=m
  358 : __trgt typ=t21s_s2 val=0j bnd=m
  359 : __trgt typ=t13s_s2 val=0j bnd=m
  360 : __trgt typ=t21s_s2 val=0j bnd=m
  361 : __trgt typ=t13s_s2 val=0j bnd=m
  362 : __trgt typ=t21s_s2 val=0j bnd=m
  363 : __trgt typ=t13s_s2 val=0j bnd=m
  364 : __trgt typ=t21s_s2 val=0j bnd=m
  365 : __trgt typ=t13s_s2 val=0j bnd=m
  366 : __trgt typ=t13s_s2 val=0j bnd=m
  367 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fatanf {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (_ZZ5atanffE6atanhi.18 var=19) source ()  <29>;
    (_ZZ5atanffE6atanlo.19 var=20) source ()  <30>;
    (_ZZ5atanffE2aT.20 var=21) source ()  <31>;
    (__la.28 var=29 stl=X off=1) inp ()  <39>;
    (__la.29 var=29) deassign (__la.28)  <40>;
    (x.32 var=31 stl=X off=11) inp ()  <43>;
    (x.33 var=31) deassign (x.32)  <44>;
    (__rd___sp.35 var=22) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_0S0.36 var=32) const ()  <47>;
    (__tmp.38 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_0S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (__ct_2147483647.59 var=46) const ()  <70>;
    (ix.61 var=36) __sint__ad___sint___sint (x.33 __ct_2147483647.59)  <72>;
    (__ct_1350565888.62 var=49) const ()  <73>;
    (__tmp.64 var=51) bool__ge___sint___sint (ix.61 __ct_1350565888.62)  <75>;
    (__ct_0.119 var=56) const ()  <132>;
    (__rd___sp.257 var=22) rd_res_reg (__R_SP.11 __sp.40)  <274>;
    (__ct_0s0.258 var=92) const ()  <275>;
    (__tmp.260 var=94) __Pvoid__pl___Pvoid___sint (__rd___sp.257 __ct_0s0.258)  <277>;
    (f32_add.753 var=279) const ()  <997>;
    (f32_sub.773 var=286) const ()  <1023>;
    (__trgt.1263 var=367) const ()  <1804>;
    () void_br_bool_t13s_s2 (__tmp.64 __trgt.1263)  <1805>;
    (__either.1264 var=351) undefined ()  <1806>;
    if {
        {
            () if_expr (__either.1264)  <101>;
            () chess_rear_then ()  <1807>;
        } #5
        {
            #76 off=108
            (__ct_2139095040.90 var=52) const ()  <102>;
            (__tmp.725 var=54) bool__lt___sint___sint (__ct_2139095040.90 ix.61)  <880>;
            (__trgt.1240 var=353) const ()  <1765>;
            () void_br_bool_t13s_s2 (__tmp.725 __trgt.1240)  <1766>;
            (__either.1241 var=351) undefined ()  <1767>;
            if {
                {
                    () if_expr (__either.1241)  <130>;
                } #9
                {
                    #445 off=118
                    (__R_SP.1219 var=12 __sp.1220 var=18) wr_res_reg (__tmp.260 __sp.40)  <1728>;
                    () void_j_t21s_s2 (f32_add.753)  <1733>;
                    call {
                        (a.755 var=277 stl=X off=11) assign (x.33)  <999>;
                        (b.756 var=278 stl=X off=12) assign (x.33)  <1000>;
                        (__la.757 var=29 stl=X off=1) assign (__la.29)  <1001>;
                        (__rt.758 var=30 stl=X off=10) Ff32_add (__la.757 a.755 b.756)  <1002>;
                        (__rt.759 var=30) deassign (__rt.758)  <1003>;
                    } #100 off=119
                    #446 off=120 nxt=-2
                    (__rt.1221 var=30 stl=X off=10) assign (__rt.759)  <1730>;
                    () out (__rt.1221)  <1731>;
                    () sink (__sp.1220)  <1732>;
                } #10
                {
                    #82 off=109
                    (__fch__ZZ5atanffE6atanhi.150 var=62) load (__M_DMw.4 __ptr__ZZ5atanffE6atanhi__a12.719 _ZZ5atanffE6atanhi.18)  <164>;
                    (__fch__ZZ5atanffE6atanlo.154 var=66) load (__M_DMw.4 __ptr__ZZ5atanffE6atanlo__a12.720 _ZZ5atanffE6atanlo.19)  <168>;
                    (__ptr__ZZ5atanffE6atanhi__a12.719 var=252) const ()  <833>;
                    (__ptr__ZZ5atanffE6atanlo__a12.720 var=253) const ()  <835>;
                    (__tmp.729 var=58) bool__lt___sint___sint (__ct_0.119 x.33)  <887>;
                    (__trgt.1238 var=352) const ()  <1762>;
                    () void_br_bool_t13s_s2 (__tmp.729 __trgt.1238)  <1763>;
                    (__either.1239 var=351) undefined ()  <1764>;
                    if {
                        {
                            () if_expr (__either.1239)  <160>;
                        } #14
                        {
                            #449 off=115
                            (__R_SP.1222 var=12 __sp.1223 var=18) wr_res_reg (__tmp.260 __sp.40)  <1734>;
                            () void_j_t21s_s2 (f32_add.753)  <1739>;
                            call {
                                (a.765 var=277 stl=X off=11) assign (__fch__ZZ5atanffE6atanhi.150)  <1012>;
                                (b.766 var=278 stl=X off=12) assign (__fch__ZZ5atanffE6atanlo.154)  <1013>;
                                (__la.767 var=29 stl=X off=1) assign (__la.29)  <1014>;
                                (__rt.768 var=30 stl=X off=10) Ff32_add (__la.767 a.765 b.766)  <1015>;
                                (__rt.769 var=30) deassign (__rt.768)  <1016>;
                            } #106 off=116
                            #450 off=117 nxt=-2
                            (__rt.1224 var=30 stl=X off=10) assign (__rt.769)  <1736>;
                            () out (__rt.1224)  <1737>;
                            () sink (__sp.1223)  <1738>;
                        } #15
                        {
                            #113 off=110
                            (__link.774 var=287) w32_jal_t21s_s2 (f32_sub.773)  <1024>;
                            call {
                                (a.775 var=284 stl=X off=11) assign (__ct_0.119)  <1025>;
                                (b.776 var=285 stl=X off=12) assign (__fch__ZZ5atanffE6atanhi.150)  <1026>;
                                (__link.777 var=287 stl=X off=1) assign (__link.774)  <1027>;
                                (__tmp.778 var=74 stl=X off=10) Ff32_sub (__link.777 a.775 b.776)  <1028>;
                                (__tmp.779 var=74) deassign (__tmp.778)  <1029>;
                            } #114 off=111
                            #453 off=112
                            (__R_SP.1225 var=12 __sp.1226 var=18) wr_res_reg (__tmp.260 __sp.40)  <1740>;
                            () void_j_t21s_s2 (f32_sub.773)  <1745>;
                            call {
                                (a.785 var=284 stl=X off=11) assign (__tmp.779)  <1038>;
                                (b.786 var=285 stl=X off=12) assign (__fch__ZZ5atanffE6atanlo.154)  <1039>;
                                (__la.787 var=29 stl=X off=1) assign (__la.29)  <1040>;
                                (__rt.788 var=30 stl=X off=10) Ff32_sub (__la.787 a.785 b.786)  <1041>;
                                (__rt.789 var=30) deassign (__rt.788)  <1042>;
                            } #120 off=113
                            #454 off=114 nxt=-2
                            (__rt.1227 var=30 stl=X off=10) assign (__rt.789)  <1742>;
                            () out (__rt.1227)  <1743>;
                            () sink (__sp.1226)  <1744>;
                        } #16
                        {
                        } #17
                    } #13
                } #11
                {
                    (__rt.1235 var=30) never ()  <1759>;
                } #18
            } #8
        } #6
        {
            #20 off=1
            (__ct_1054867456.170 var=80) const ()  <184>;
            (__tmp.172 var=82) bool__lt___sint___sint (ix.61 __ct_1054867456.170)  <186>;
            (__ct_1065353216.229 var=89) const ()  <245>;
            (__ct_2.456 var=132) const ()  <486>;
            (f32_mul.803 var=294) const ()  <1062>;
            (__trgt.1256 var=363) const ()  <1792>;
            () void_br_bool_t13s_s2 (__tmp.172 __trgt.1256)  <1793>;
            (__either.1257 var=351) undefined ()  <1794>;
            if {
                {
                    () if_expr (__either.1257)  <212>;
                } #22
                {
                    #24 off=34
                    (__ct_822083584.198 var=83) const ()  <213>;
                    (__tmp.1215 var=85) bool__ge___sint___sint (ix.61 __ct_822083584.198)  <1682>;
                    (__trgt.1244 var=355) const ()  <1772>;
                    () void_br_bool_t13s_s2 (__tmp.1215 __trgt.1244)  <1773>;
                    (__either.1245 var=351) undefined ()  <1774>;
                    if {
                        {
                            () if_expr (__either.1245)  <241>;
                        } #26
                        {
                        } #36 off=43
                        {
                            #127 off=35
                            (__ct_1900671690.226 var=86) const ()  <242>;
                            (__link.794 var=280) w32_jal_t21s_s2 (f32_add.753)  <1050>;
                            call {
                                (a.795 var=277 stl=X off=11) assign (__ct_1900671690.226)  <1051>;
                                (b.796 var=278 stl=X off=12) assign (x.33)  <1052>;
                                (__link.797 var=280 stl=X off=1) assign (__link.794)  <1053>;
                                (__tmp.798 var=88 stl=X off=10) Ff32_add (__link.797 a.795 b.796)  <1054>;
                                (__tmp.799 var=88) deassign (__tmp.798)  <1055>;
                            } #128 off=36
                            #124 off=37
                            (f32_lt.739 var=270) const ()  <941>;
                            (__link.740 var=271) w32_jal_t21s_s2 (f32_lt.739)  <942>;
                            call {
                                (a.742 var=268 stl=X off=11) assign (__ct_1065353216.229)  <944>;
                                (b.743 var=269 stl=X off=12) assign (__tmp.799)  <945>;
                                (__link.744 var=271 stl=X off=1) assign (__link.740)  <946>;
                                (__tmp.745 var=272 stl=X off=10) Ff32_lt (__link.744 a.742 b.743)  <947>;
                                (__tmp.746 var=272) deassign (__tmp.745)  <948>;
                            } #94 off=38
                            #95 off=39
                            (__tmp.747 var=91) bool__ne___sint___sint (__tmp.746 __ct_0.119)  <949>;
                            (__trgt.1242 var=354) const ()  <1768>;
                            () void_br_bool_t13s_s2 (__tmp.747 __trgt.1242)  <1769>;
                            (__either.1243 var=351) undefined ()  <1770>;
                            if {
                                {
                                    () if_expr (__either.1243)  <273>;
                                    () chess_rear_then ()  <1771>;
                                } #30
                                {
                                    (__R_SP.261 var=12 __sp.262 var=18) wr_res_reg (__tmp.260 __sp.40)  <278>;
                                    () void___rts_jr_w32 (__la.29)  <279>;
                                    (__rt.263 var=30 stl=X off=10) assign (x.33)  <280>;
                                    () out (__rt.263)  <281>;
                                    () sink (__sp.262)  <287>;
                                } #33 off=41 nxt=-2
                                {
                                } #34 off=40
                                {
                                } #35
                            } #29
                            #469 off=42
                            (__trgt.1246 var=356) const ()  <1775>;
                            () void_j_t21s_s2 (__trgt.1246)  <1776>;
                        } #27
                        {
                        } #37
                    } #25
                    #465 off=44
                    (__ct_m1.339 var=95) const ()  <366>;
                } #23
                {
                    #40 off=2
                    (__ct_1066926080.349 var=102) const ()  <376>;
                    (__tmp.351 var=104) bool__lt___sint___sint (ix.61 __ct_1066926080.349)  <378>;
                    (f32_div.833 var=302) const ()  <1101>;
                    (__trgt.1253 var=361) const ()  <1787>;
                    () void_br_bool_t13s_s2 (__tmp.351 __trgt.1253)  <1788>;
                    (__either.1254 var=351) undefined ()  <1789>;
                    if {
                        {
                            () if_expr (__either.1254)  <404>;
                        } #42
                        {
                            #44 off=16
                            (__ct_1060110336.377 var=105) const ()  <405>;
                            (__tmp.379 var=107) bool__lt___sint___sint (ix.61 __ct_1060110336.377)  <407>;
                            (__trgt.1247 var=357) const ()  <1777>;
                            () void_br_bool_t13s_s2 (__tmp.379 __trgt.1247)  <1778>;
                            (__either.1248 var=351) undefined ()  <1779>;
                            if {
                                {
                                    () if_expr (__either.1248)  <433>;
                                } #46
                                {
                                    #137 off=24
                                    (__ct_1073741824.407 var=110) const ()  <436>;
                                    (__link.804 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1063>;
                                    call {
                                        (a.805 var=292 stl=X off=11) assign (__ct_1073741824.407)  <1064>;
                                        (b.806 var=293 stl=X off=12) assign (ix.61)  <1065>;
                                        (__link.807 var=295 stl=X off=1) assign (__link.804)  <1066>;
                                        (__tmp.808 var=112 stl=X off=10) Ff32_mul (__link.807 a.805 b.806)  <1067>;
                                        (__tmp.809 var=112) deassign (__tmp.808)  <1068>;
                                    } #138 off=25
                                    #143 off=26
                                    (__link.814 var=287) w32_jal_t21s_s2 (f32_sub.773)  <1076>;
                                    call {
                                        (a.815 var=284 stl=X off=11) assign (__tmp.809)  <1077>;
                                        (b.816 var=285 stl=X off=12) assign (__ct_1065353216.229)  <1078>;
                                        (__link.817 var=287 stl=X off=1) assign (__link.814)  <1079>;
                                        (__tmp.818 var=115 stl=X off=10) Ff32_sub (__link.817 a.815 b.816)  <1080>;
                                        (__tmp.819 var=115) deassign (__tmp.818)  <1081>;
                                    } #144 off=27
                                    #149 off=28
                                    (__link.824 var=280) w32_jal_t21s_s2 (f32_add.753)  <1089>;
                                    call {
                                        (a.825 var=277 stl=X off=11) assign (__ct_1073741824.407)  <1090>;
                                        (b.826 var=278 stl=X off=12) assign (ix.61)  <1091>;
                                        (__link.827 var=280 stl=X off=1) assign (__link.824)  <1092>;
                                        (__tmp.828 var=118 stl=X off=10) Ff32_add (__link.827 a.825 b.826)  <1093>;
                                        (__tmp.829 var=118) deassign (__tmp.828)  <1094>;
                                    } #150 off=29
                                    #155 off=30
                                    (__link.834 var=303) w32_jal_t21s_s2 (f32_div.833)  <1102>;
                                    call {
                                        (a.835 var=300 stl=X off=11) assign (__tmp.819)  <1103>;
                                        (b.836 var=301 stl=X off=12) assign (__tmp.829)  <1104>;
                                        (__link.837 var=303 stl=X off=1) assign (__link.834)  <1105>;
                                        (x.838 var=31 stl=X off=10) Ff32_div (__link.837 a.835 b.836)  <1106>;
                                        (x.839 var=31) deassign (x.838)  <1107>;
                                    } #156 off=31
                                } #47
                                {
                                    #164 off=17
                                    (__link.844 var=287) w32_jal_t21s_s2 (f32_sub.773)  <1115>;
                                    call {
                                        (a.845 var=284 stl=X off=11) assign (ix.61)  <1116>;
                                        (b.846 var=285 stl=X off=12) assign (__ct_1065353216.229)  <1117>;
                                        (__link.847 var=287 stl=X off=1) assign (__link.844)  <1118>;
                                        (__tmp.848 var=124 stl=X off=10) Ff32_sub (__link.847 a.845 b.846)  <1119>;
                                        (__tmp.849 var=124) deassign (__tmp.848)  <1120>;
                                    } #165 off=18
                                    #170 off=19
                                    (__link.854 var=280) w32_jal_t21s_s2 (f32_add.753)  <1128>;
                                    call {
                                        (a.855 var=277 stl=X off=11) assign (ix.61)  <1129>;
                                        (b.856 var=278 stl=X off=12) assign (__ct_1065353216.229)  <1130>;
                                        (__link.857 var=280 stl=X off=1) assign (__link.854)  <1131>;
                                        (__tmp.858 var=127 stl=X off=10) Ff32_add (__link.857 a.855 b.856)  <1132>;
                                        (__tmp.859 var=127) deassign (__tmp.858)  <1133>;
                                    } #171 off=20
                                    #176 off=21
                                    (__link.864 var=303) w32_jal_t21s_s2 (f32_div.833)  <1141>;
                                    call {
                                        (a.865 var=300 stl=X off=11) assign (__tmp.849)  <1142>;
                                        (b.866 var=301 stl=X off=12) assign (__tmp.859)  <1143>;
                                        (__link.867 var=303 stl=X off=1) assign (__link.864)  <1144>;
                                        (x.868 var=31 stl=X off=10) Ff32_div (__link.867 a.865 b.866)  <1145>;
                                        (x.869 var=31) deassign (x.868)  <1146>;
                                    } #177 off=22
                                    #466 off=23
                                    (__ct_1.417 var=120) const ()  <446>;
                                    (__trgt.1249 var=358) const ()  <1780>;
                                    () void_j_t21s_s2 (__trgt.1249)  <1781>;
                                } #48
                                {
                                    (x.426 var=31) merge (x.839 x.869)  <455>;
                                    (id.427 var=37) merge (__ct_0.119 __ct_1.417)  <456>;
                                } #49
                            } #45
                        } #43
                        {
                            #51 off=3
                            (__ct_1075576832.428 var=129) const ()  <457>;
                            (__tmp.430 var=131) bool__lt___sint___sint (ix.61 __ct_1075576832.428)  <459>;
                            (__trgt.1250 var=359) const ()  <1782>;
                            () void_br_bool_t13s_s2 (__tmp.430 __trgt.1250)  <1783>;
                            (__either.1251 var=351) undefined ()  <1784>;
                            if {
                                {
                                    () if_expr (__either.1251)  <485>;
                                } #53
                                {
                                    #186 off=7
                                    (__ct_1069547520.458 var=134) const ()  <488>;
                                    (__link.874 var=287) w32_jal_t21s_s2 (f32_sub.773)  <1154>;
                                    call {
                                        (a.875 var=284 stl=X off=11) assign (ix.61)  <1155>;
                                        (b.876 var=285 stl=X off=12) assign (__ct_1069547520.458)  <1156>;
                                        (__link.877 var=287 stl=X off=1) assign (__link.874)  <1157>;
                                        (__tmp.878 var=136 stl=X off=10) Ff32_sub (__link.877 a.875 b.876)  <1158>;
                                        (__tmp.879 var=136) deassign (__tmp.878)  <1159>;
                                    } #187 off=8
                                    #192 off=9
                                    (__link.884 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1167>;
                                    call {
                                        (a.885 var=292 stl=X off=11) assign (__ct_1069547520.458)  <1168>;
                                        (b.886 var=293 stl=X off=12) assign (ix.61)  <1169>;
                                        (__link.887 var=295 stl=X off=1) assign (__link.884)  <1170>;
                                        (__tmp.888 var=141 stl=X off=10) Ff32_mul (__link.887 a.885 b.886)  <1171>;
                                        (__tmp.889 var=141) deassign (__tmp.888)  <1172>;
                                    } #193 off=10
                                    #198 off=11
                                    (__link.894 var=280) w32_jal_t21s_s2 (f32_add.753)  <1180>;
                                    call {
                                        (a.895 var=277 stl=X off=11) assign (__ct_1065353216.229)  <1181>;
                                        (b.896 var=278 stl=X off=12) assign (__tmp.889)  <1182>;
                                        (__link.897 var=280 stl=X off=1) assign (__link.894)  <1183>;
                                        (__tmp.898 var=142 stl=X off=10) Ff32_add (__link.897 a.895 b.896)  <1184>;
                                        (__tmp.899 var=142) deassign (__tmp.898)  <1185>;
                                    } #199 off=12
                                    #204 off=13
                                    (__link.904 var=303) w32_jal_t21s_s2 (f32_div.833)  <1193>;
                                    call {
                                        (a.905 var=300 stl=X off=11) assign (__tmp.879)  <1194>;
                                        (b.906 var=301 stl=X off=12) assign (__tmp.899)  <1195>;
                                        (__link.907 var=303 stl=X off=1) assign (__link.904)  <1196>;
                                        (x.908 var=31 stl=X off=10) Ff32_div (__link.907 a.905 b.906)  <1197>;
                                        (x.909 var=31) deassign (x.908)  <1198>;
                                    } #205 off=14
                                } #54
                                {
                                    #210 off=4
                                    (__ct_3212836864.470 var=146) const ()  <500>;
                                    (__link.914 var=303) w32_jal_t21s_s2 (f32_div.833)  <1206>;
                                    call {
                                        (a.915 var=300 stl=X off=11) assign (__ct_3212836864.470)  <1207>;
                                        (b.916 var=301 stl=X off=12) assign (ix.61)  <1208>;
                                        (__link.917 var=303 stl=X off=1) assign (__link.914)  <1209>;
                                        (x.918 var=31 stl=X off=10) Ff32_div (__link.917 a.915 b.916)  <1210>;
                                        (x.919 var=31) deassign (x.918)  <1211>;
                                    } #211 off=5
                                    #468 off=6
                                    (__ct_3.468 var=144) const ()  <498>;
                                    (__trgt.1252 var=360) const ()  <1785>;
                                    () void_j_t21s_s2 (__trgt.1252)  <1786>;
                                } #55
                                {
                                    (x.473 var=31) merge (x.909 x.919)  <503>;
                                    (id.474 var=37) merge (__ct_2.456 __ct_3.468)  <504>;
                                } #56
                            } #52
                            #471 off=15
                            (__trgt.1255 var=362) const ()  <1790>;
                            () void_j_t21s_s2 (__trgt.1255)  <1791>;
                        } #50
                        {
                            (x.475 var=31) merge (x.426 x.473)  <505>;
                            (id.476 var=37) merge (id.427 id.474)  <506>;
                        } #57
                    } #41
                    #472 off=33
                    (__trgt.1258 var=364) const ()  <1795>;
                    () void_j_t21s_s2 (__trgt.1258)  <1796>;
                } #39
                {
                    (x.488 var=31) merge (x.33 x.475)  <518>;
                    (id.493 var=37) merge (__ct_m1.339 id.476)  <523>;
                } #58
            } #21
            #262 off=45
            (__link.924 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1219>;
            call {
                (a.925 var=292 stl=X off=11) assign (x.488)  <1220>;
                (b.926 var=293 stl=X off=12) assign (x.488)  <1221>;
                (__link.927 var=295 stl=X off=1) assign (__link.924)  <1222>;
                (z.928 var=41 stl=X off=10) Ff32_mul (__link.927 a.925 b.926)  <1223>;
                (z.929 var=41) deassign (z.928)  <1224>;
            } #263 off=46
            #268 off=47
            (__link.934 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1232>;
            call {
                (a.935 var=292 stl=X off=11) assign (z.929)  <1233>;
                (b.936 var=293 stl=X off=12) assign (z.929)  <1234>;
                (__link.937 var=295 stl=X off=1) assign (__link.934)  <1235>;
                (w.938 var=42 stl=X off=10) Ff32_mul (__link.937 a.935 b.936)  <1236>;
                (w.939 var=42) deassign (w.938)  <1237>;
            } #269 off=48
            #274 off=49
            (__ptr_aT.26 var=28) const ()  <37>;
            (__fch__ZZ5atanffE2aT.507 var=154) load (__M_DMw.4 __ptr_aT.26 _ZZ5atanffE2aT.20)  <537>;
            (__ct_8.508 var=155) const ()  <538>;
            (__fch__ZZ5atanffE2aT.511 var=158) load (__M_DMw.4 __shv___ptr_aT.709 _ZZ5atanffE2aT.20)  <541>;
            (__ct_16.512 var=159) const ()  <542>;
            (__fch__ZZ5atanffE2aT.515 var=162) load (__M_DMw.4 __shv___ptr_aT.710 _ZZ5atanffE2aT.20)  <545>;
            (__ct_24.516 var=163) const ()  <546>;
            (__fch__ZZ5atanffE2aT.519 var=166) load (__M_DMw.4 __shv___ptr_aT.711 _ZZ5atanffE2aT.20)  <549>;
            (__ct_32.520 var=167) const ()  <550>;
            (__fch__ZZ5atanffE2aT.523 var=170) load (__M_DMw.4 __shv___ptr_aT.712 _ZZ5atanffE2aT.20)  <553>;
            (__ct_40.524 var=171) const ()  <554>;
            (__fch__ZZ5atanffE2aT.527 var=174) load (__M_DMw.4 __shv___ptr_aT.713 _ZZ5atanffE2aT.20)  <557>;
            (__shv___ptr_aT.709 var=251) __Pvoid__pl___Pvoid___sint (__ptr_aT.26 __ct_8.508)  <823>;
            (__shv___ptr_aT.710 var=251) __Pvoid__pl___Pvoid___sint (__ptr_aT.26 __ct_16.512)  <824>;
            (__shv___ptr_aT.711 var=251) __Pvoid__pl___Pvoid___sint (__ptr_aT.26 __ct_24.516)  <825>;
            (__shv___ptr_aT.712 var=251) __Pvoid__pl___Pvoid___sint (__ptr_aT.26 __ct_32.520)  <826>;
            (__shv___ptr_aT.713 var=251) __Pvoid__pl___Pvoid___sint (__ptr_aT.26 __ct_40.524)  <827>;
            (__link.944 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1245>;
            call {
                (a.945 var=292 stl=X off=11) assign (w.939)  <1246>;
                (b.946 var=293 stl=X off=12) assign (__fch__ZZ5atanffE2aT.527)  <1247>;
                (__link.947 var=295 stl=X off=1) assign (__link.944)  <1248>;
                (__tmp.948 var=175 stl=X off=10) Ff32_mul (__link.947 a.945 b.946)  <1249>;
                (__tmp.949 var=175) deassign (__tmp.948)  <1250>;
            } #275 off=50
            #280 off=51
            (__link.954 var=280) w32_jal_t21s_s2 (f32_add.753)  <1258>;
            call {
                (a.955 var=277 stl=X off=11) assign (__fch__ZZ5atanffE2aT.523)  <1259>;
                (b.956 var=278 stl=X off=12) assign (__tmp.949)  <1260>;
                (__link.957 var=280 stl=X off=1) assign (__link.954)  <1261>;
                (__tmp.958 var=176 stl=X off=10) Ff32_add (__link.957 a.955 b.956)  <1262>;
                (__tmp.959 var=176) deassign (__tmp.958)  <1263>;
            } #281 off=52
            #286 off=53
            (__link.964 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1271>;
            call {
                (a.965 var=292 stl=X off=11) assign (w.939)  <1272>;
                (b.966 var=293 stl=X off=12) assign (__tmp.959)  <1273>;
                (__link.967 var=295 stl=X off=1) assign (__link.964)  <1274>;
                (__tmp.968 var=177 stl=X off=10) Ff32_mul (__link.967 a.965 b.966)  <1275>;
                (__tmp.969 var=177) deassign (__tmp.968)  <1276>;
            } #287 off=54
            #292 off=55
            (__link.974 var=280) w32_jal_t21s_s2 (f32_add.753)  <1284>;
            call {
                (a.975 var=277 stl=X off=11) assign (__fch__ZZ5atanffE2aT.519)  <1285>;
                (b.976 var=278 stl=X off=12) assign (__tmp.969)  <1286>;
                (__link.977 var=280 stl=X off=1) assign (__link.974)  <1287>;
                (__tmp.978 var=178 stl=X off=10) Ff32_add (__link.977 a.975 b.976)  <1288>;
                (__tmp.979 var=178) deassign (__tmp.978)  <1289>;
            } #293 off=56
            #298 off=57
            (__link.984 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1297>;
            call {
                (a.985 var=292 stl=X off=11) assign (w.939)  <1298>;
                (b.986 var=293 stl=X off=12) assign (__tmp.979)  <1299>;
                (__link.987 var=295 stl=X off=1) assign (__link.984)  <1300>;
                (__tmp.988 var=179 stl=X off=10) Ff32_mul (__link.987 a.985 b.986)  <1301>;
                (__tmp.989 var=179) deassign (__tmp.988)  <1302>;
            } #299 off=58
            #304 off=59
            (__link.994 var=280) w32_jal_t21s_s2 (f32_add.753)  <1310>;
            call {
                (a.995 var=277 stl=X off=11) assign (__fch__ZZ5atanffE2aT.515)  <1311>;
                (b.996 var=278 stl=X off=12) assign (__tmp.989)  <1312>;
                (__link.997 var=280 stl=X off=1) assign (__link.994)  <1313>;
                (__tmp.998 var=180 stl=X off=10) Ff32_add (__link.997 a.995 b.996)  <1314>;
                (__tmp.999 var=180) deassign (__tmp.998)  <1315>;
            } #305 off=60
            #310 off=61
            (__link.1004 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1323>;
            call {
                (a.1005 var=292 stl=X off=11) assign (w.939)  <1324>;
                (b.1006 var=293 stl=X off=12) assign (__tmp.999)  <1325>;
                (__link.1007 var=295 stl=X off=1) assign (__link.1004)  <1326>;
                (__tmp.1008 var=181 stl=X off=10) Ff32_mul (__link.1007 a.1005 b.1006)  <1327>;
                (__tmp.1009 var=181) deassign (__tmp.1008)  <1328>;
            } #311 off=62
            #316 off=63
            (__link.1014 var=280) w32_jal_t21s_s2 (f32_add.753)  <1336>;
            call {
                (a.1015 var=277 stl=X off=11) assign (__fch__ZZ5atanffE2aT.511)  <1337>;
                (b.1016 var=278 stl=X off=12) assign (__tmp.1009)  <1338>;
                (__link.1017 var=280 stl=X off=1) assign (__link.1014)  <1339>;
                (__tmp.1018 var=182 stl=X off=10) Ff32_add (__link.1017 a.1015 b.1016)  <1340>;
                (__tmp.1019 var=182) deassign (__tmp.1018)  <1341>;
            } #317 off=64
            #322 off=65
            (__link.1024 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1349>;
            call {
                (a.1025 var=292 stl=X off=11) assign (w.939)  <1350>;
                (b.1026 var=293 stl=X off=12) assign (__tmp.1019)  <1351>;
                (__link.1027 var=295 stl=X off=1) assign (__link.1024)  <1352>;
                (__tmp.1028 var=183 stl=X off=10) Ff32_mul (__link.1027 a.1025 b.1026)  <1353>;
                (__tmp.1029 var=183) deassign (__tmp.1028)  <1354>;
            } #323 off=66
            #328 off=67
            (__link.1034 var=280) w32_jal_t21s_s2 (f32_add.753)  <1362>;
            call {
                (a.1035 var=277 stl=X off=11) assign (__fch__ZZ5atanffE2aT.507)  <1363>;
                (b.1036 var=278 stl=X off=12) assign (__tmp.1029)  <1364>;
                (__link.1037 var=280 stl=X off=1) assign (__link.1034)  <1365>;
                (__tmp.1038 var=184 stl=X off=10) Ff32_add (__link.1037 a.1035 b.1036)  <1366>;
                (__tmp.1039 var=184) deassign (__tmp.1038)  <1367>;
            } #329 off=68
            #334 off=69
            (__link.1044 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1375>;
            call {
                (a.1045 var=292 stl=X off=11) assign (z.929)  <1376>;
                (b.1046 var=293 stl=X off=12) assign (__tmp.1039)  <1377>;
                (__link.1047 var=295 stl=X off=1) assign (__link.1044)  <1378>;
                (s1.1048 var=43 stl=X off=10) Ff32_mul (__link.1047 a.1045 b.1046)  <1379>;
                (s1.1049 var=43) deassign (s1.1048)  <1380>;
            } #335 off=70
            #340 off=71
            (__ct_12.147 var=59) const ()  <161>;
            (__ct_4.539 var=186) const ()  <569>;
            (__fch__ZZ5atanffE2aT.542 var=189) load (__M_DMw.4 __shv___ptr_aT.714 _ZZ5atanffE2aT.20)  <572>;
            (__fch__ZZ5atanffE2aT.546 var=193) load (__M_DMw.4 __shv___ptr_aT.715 _ZZ5atanffE2aT.20)  <576>;
            (__ct_20.547 var=194) const ()  <577>;
            (__fch__ZZ5atanffE2aT.550 var=197) load (__M_DMw.4 __shv___ptr_aT.716 _ZZ5atanffE2aT.20)  <580>;
            (__ct_28.551 var=198) const ()  <581>;
            (__fch__ZZ5atanffE2aT.554 var=201) load (__M_DMw.4 __shv___ptr_aT.717 _ZZ5atanffE2aT.20)  <584>;
            (__ct_36.555 var=202) const ()  <585>;
            (__fch__ZZ5atanffE2aT.558 var=205) load (__M_DMw.4 __shv___ptr_aT.718 _ZZ5atanffE2aT.20)  <588>;
            (__shv___ptr_aT.714 var=251) __Pvoid__pl___Pvoid___sint (__ptr_aT.26 __ct_4.539)  <828>;
            (__shv___ptr_aT.715 var=251) __Pvoid__pl___Pvoid___sint (__ptr_aT.26 __ct_12.147)  <829>;
            (__shv___ptr_aT.716 var=251) __Pvoid__pl___Pvoid___sint (__ptr_aT.26 __ct_20.547)  <830>;
            (__shv___ptr_aT.717 var=251) __Pvoid__pl___Pvoid___sint (__ptr_aT.26 __ct_28.551)  <831>;
            (__shv___ptr_aT.718 var=251) __Pvoid__pl___Pvoid___sint (__ptr_aT.26 __ct_36.555)  <832>;
            (__link.1054 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1388>;
            call {
                (a.1055 var=292 stl=X off=11) assign (w.939)  <1389>;
                (b.1056 var=293 stl=X off=12) assign (__fch__ZZ5atanffE2aT.558)  <1390>;
                (__link.1057 var=295 stl=X off=1) assign (__link.1054)  <1391>;
                (__tmp.1058 var=206 stl=X off=10) Ff32_mul (__link.1057 a.1055 b.1056)  <1392>;
                (__tmp.1059 var=206) deassign (__tmp.1058)  <1393>;
            } #341 off=72
            #346 off=73
            (__link.1064 var=280) w32_jal_t21s_s2 (f32_add.753)  <1401>;
            call {
                (a.1065 var=277 stl=X off=11) assign (__fch__ZZ5atanffE2aT.554)  <1402>;
                (b.1066 var=278 stl=X off=12) assign (__tmp.1059)  <1403>;
                (__link.1067 var=280 stl=X off=1) assign (__link.1064)  <1404>;
                (__tmp.1068 var=207 stl=X off=10) Ff32_add (__link.1067 a.1065 b.1066)  <1405>;
                (__tmp.1069 var=207) deassign (__tmp.1068)  <1406>;
            } #347 off=74
            #352 off=75
            (__link.1074 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1414>;
            call {
                (a.1075 var=292 stl=X off=11) assign (w.939)  <1415>;
                (b.1076 var=293 stl=X off=12) assign (__tmp.1069)  <1416>;
                (__link.1077 var=295 stl=X off=1) assign (__link.1074)  <1417>;
                (__tmp.1078 var=208 stl=X off=10) Ff32_mul (__link.1077 a.1075 b.1076)  <1418>;
                (__tmp.1079 var=208) deassign (__tmp.1078)  <1419>;
            } #353 off=76
            #358 off=77
            (__link.1084 var=280) w32_jal_t21s_s2 (f32_add.753)  <1427>;
            call {
                (a.1085 var=277 stl=X off=11) assign (__fch__ZZ5atanffE2aT.550)  <1428>;
                (b.1086 var=278 stl=X off=12) assign (__tmp.1079)  <1429>;
                (__link.1087 var=280 stl=X off=1) assign (__link.1084)  <1430>;
                (__tmp.1088 var=209 stl=X off=10) Ff32_add (__link.1087 a.1085 b.1086)  <1431>;
                (__tmp.1089 var=209) deassign (__tmp.1088)  <1432>;
            } #359 off=78
            #364 off=79
            (__link.1094 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1440>;
            call {
                (a.1095 var=292 stl=X off=11) assign (w.939)  <1441>;
                (b.1096 var=293 stl=X off=12) assign (__tmp.1089)  <1442>;
                (__link.1097 var=295 stl=X off=1) assign (__link.1094)  <1443>;
                (__tmp.1098 var=210 stl=X off=10) Ff32_mul (__link.1097 a.1095 b.1096)  <1444>;
                (__tmp.1099 var=210) deassign (__tmp.1098)  <1445>;
            } #365 off=80
            #370 off=81
            (__link.1104 var=280) w32_jal_t21s_s2 (f32_add.753)  <1453>;
            call {
                (a.1105 var=277 stl=X off=11) assign (__fch__ZZ5atanffE2aT.546)  <1454>;
                (b.1106 var=278 stl=X off=12) assign (__tmp.1099)  <1455>;
                (__link.1107 var=280 stl=X off=1) assign (__link.1104)  <1456>;
                (__tmp.1108 var=211 stl=X off=10) Ff32_add (__link.1107 a.1105 b.1106)  <1457>;
                (__tmp.1109 var=211) deassign (__tmp.1108)  <1458>;
            } #371 off=82
            #376 off=83
            (__link.1114 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1466>;
            call {
                (a.1115 var=292 stl=X off=11) assign (w.939)  <1467>;
                (b.1116 var=293 stl=X off=12) assign (__tmp.1109)  <1468>;
                (__link.1117 var=295 stl=X off=1) assign (__link.1114)  <1469>;
                (__tmp.1118 var=212 stl=X off=10) Ff32_mul (__link.1117 a.1115 b.1116)  <1470>;
                (__tmp.1119 var=212) deassign (__tmp.1118)  <1471>;
            } #377 off=84
            #382 off=85
            (__link.1124 var=280) w32_jal_t21s_s2 (f32_add.753)  <1479>;
            call {
                (a.1125 var=277 stl=X off=11) assign (__fch__ZZ5atanffE2aT.542)  <1480>;
                (b.1126 var=278 stl=X off=12) assign (__tmp.1119)  <1481>;
                (__link.1127 var=280 stl=X off=1) assign (__link.1124)  <1482>;
                (__tmp.1128 var=213 stl=X off=10) Ff32_add (__link.1127 a.1125 b.1126)  <1483>;
                (__tmp.1129 var=213) deassign (__tmp.1128)  <1484>;
            } #383 off=86
            #388 off=87
            (__link.1134 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1492>;
            call {
                (a.1135 var=292 stl=X off=11) assign (w.939)  <1493>;
                (b.1136 var=293 stl=X off=12) assign (__tmp.1129)  <1494>;
                (__link.1137 var=295 stl=X off=1) assign (__link.1134)  <1495>;
                (s2.1138 var=44 stl=X off=10) Ff32_mul (__link.1137 a.1135 b.1136)  <1496>;
                (s2.1139 var=44) deassign (s2.1138)  <1497>;
            } #389 off=88
            #394 off=89
            (__link.1144 var=280) w32_jal_t21s_s2 (f32_add.753)  <1505>;
            call {
                (a.1145 var=277 stl=X off=11) assign (s1.1049)  <1506>;
                (b.1146 var=278 stl=X off=12) assign (s2.1139)  <1507>;
                (__link.1147 var=280 stl=X off=1) assign (__link.1144)  <1508>;
                (__tmp.1148 var=218 stl=X off=10) Ff32_add (__link.1147 a.1145 b.1146)  <1509>;
                (__tmp.1149 var=218) deassign (__tmp.1148)  <1510>;
            } #395 off=90
            #400 off=91
            (__link.1154 var=295) w32_jal_t21s_s2 (f32_mul.803)  <1518>;
            call {
                (a.1155 var=292 stl=X off=11) assign (x.488)  <1519>;
                (b.1156 var=293 stl=X off=12) assign (__tmp.1149)  <1520>;
                (__link.1157 var=295 stl=X off=1) assign (__link.1154)  <1521>;
                (__tmp.1158 var=219 stl=X off=10) Ff32_mul (__link.1157 a.1155 b.1156)  <1522>;
                (__tmp.1159 var=219) deassign (__tmp.1158)  <1523>;
            } #401 off=92
            #259 off=93
            (__tmp.570 var=217) bool__lt___sint___sint (id.493 __ct_0.119)  <600>;
            (__trgt.1261 var=366) const ()  <1800>;
            () void_br_bool_t13s_s2 (__tmp.570 __trgt.1261)  <1801>;
            (__either.1262 var=351) undefined ()  <1802>;
            if {
                {
                    () if_expr (__either.1262)  <626>;
                    () chess_rear_then ()  <1803>;
                } #61
                {
                    #457 off=105
                    (__R_SP.1228 var=12 __sp.1229 var=18) wr_res_reg (__tmp.260 __sp.40)  <1746>;
                    () void_j_t21s_s2 (f32_sub.773)  <1751>;
                    call {
                        (a.1165 var=284 stl=X off=11) assign (x.488)  <1532>;
                        (b.1166 var=285 stl=X off=12) assign (__tmp.1159)  <1533>;
                        (__la.1167 var=29 stl=X off=1) assign (__la.29)  <1534>;
                        (__rt.1168 var=30 stl=X off=10) Ff32_sub (__la.1167 a.1165 b.1166)  <1535>;
                        (__rt.1169 var=30) deassign (__rt.1168)  <1536>;
                    } #407 off=106
                    #458 off=107 nxt=-2
                    (__rt.1230 var=30 stl=X off=10) assign (__rt.1169)  <1748>;
                    () out (__rt.1230)  <1749>;
                    () sink (__sp.1229)  <1750>;
                    (__rt.1237 var=30) never ()  <1761>;
                } #62
                {
                    #421 off=94
                    (__ptr_atanhi.22 var=24) const ()  <33>;
                    (__ptr_atanlo.24 var=26) const ()  <35>;
                    (__tmp.601 var=223) __sint__ls___sint___sint (id.493 __ct_2.456)  <632>;
                    (__tmp.602 var=224) __Pvoid__pl___Pvoid___sint (__ptr_atanhi.22 __tmp.601)  <633>;
                    (__fch__ZZ5atanffE6atanhi.603 var=225) load (__M_DMw.4 __tmp.602 _ZZ5atanffE6atanhi.18)  <634>;
                    (__tmp.609 var=231) __Pvoid__pl___Pvoid___sint (__ptr_atanlo.24 __tmp.601)  <640>;
                    (__fch__ZZ5atanffE6atanlo.610 var=232) load (__M_DMw.4 __tmp.609 _ZZ5atanffE6atanlo.19)  <641>;
                    (__link.1174 var=287) w32_jal_t21s_s2 (f32_sub.773)  <1544>;
                    call {
                        (a.1175 var=284 stl=X off=11) assign (__tmp.1159)  <1545>;
                        (b.1176 var=285 stl=X off=12) assign (__fch__ZZ5atanffE6atanlo.610)  <1546>;
                        (__link.1177 var=287 stl=X off=1) assign (__link.1174)  <1547>;
                        (__tmp.1178 var=233 stl=X off=10) Ff32_sub (__link.1177 a.1175 b.1176)  <1548>;
                        (__tmp.1179 var=233) deassign (__tmp.1178)  <1549>;
                    } #422 off=95
                    #427 off=96
                    (__link.1184 var=287) w32_jal_t21s_s2 (f32_sub.773)  <1557>;
                    call {
                        (a.1185 var=284 stl=X off=11) assign (__tmp.1179)  <1558>;
                        (b.1186 var=285 stl=X off=12) assign (x.488)  <1559>;
                        (__link.1187 var=287 stl=X off=1) assign (__link.1184)  <1560>;
                        (__tmp.1188 var=234 stl=X off=10) Ff32_sub (__link.1187 a.1185 b.1186)  <1561>;
                        (__tmp.1189 var=234) deassign (__tmp.1188)  <1562>;
                    } #428 off=97
                    #433 off=98
                    (__link.1194 var=287) w32_jal_t21s_s2 (f32_sub.773)  <1570>;
                    call {
                        (a.1195 var=284 stl=X off=11) assign (__fch__ZZ5atanffE6atanhi.603)  <1571>;
                        (b.1196 var=285 stl=X off=12) assign (__tmp.1189)  <1572>;
                        (__link.1197 var=287 stl=X off=1) assign (__link.1194)  <1573>;
                        (z.1198 var=41 stl=X off=10) Ff32_sub (__link.1197 a.1195 b.1196)  <1574>;
                        (z.1199 var=41) deassign (z.1198)  <1575>;
                    } #434 off=99
                    #418 off=100
                    (__tmp.1216 var=238) bool__ge___sint___sint (x.33 __ct_0.119)  <1683>;
                    (__trgt.1259 var=365) const ()  <1797>;
                    () void_br_bool_t13s_s2 (__tmp.1216 __trgt.1259)  <1798>;
                    (__either.1260 var=351) undefined ()  <1799>;
                    if {
                        {
                            () if_expr (__either.1260)  <673>;
                        } #66
                        {
                        } #68 off=104
                        {
                            #461 off=101
                            (__R_SP.1231 var=12 __sp.1232 var=18) wr_res_reg (__tmp.260 __sp.40)  <1752>;
                            () void_j_t21s_s2 (f32_sub.773)  <1757>;
                            call {
                                (a.1205 var=284 stl=X off=11) assign (__ct_0.119)  <1584>;
                                (b.1206 var=285 stl=X off=12) assign (z.1199)  <1585>;
                                (__la.1207 var=29 stl=X off=1) assign (__la.29)  <1586>;
                                (__tmp.1208 var=241 stl=X off=10) Ff32_sub (__la.1207 a.1205 b.1206)  <1587>;
                                (__tmp.1209 var=241) deassign (__tmp.1208)  <1588>;
                            } #440 off=102
                            #462 off=103 nxt=-2
                            (__rt.1233 var=30 stl=X off=10) assign (__tmp.1209)  <1754>;
                            () out (__rt.1233)  <1755>;
                            () sink (__sp.1232)  <1756>;
                        } #67
                        {
                        } #69
                    } #65
                } #63
                {
                    (__rt.646 var=30) merge (__rt.1237 z.1199)  <678>;
                } #70
            } #60
        } #19
        {
            (__rt.661 var=30) merge (__rt.1235 __rt.646)  <693>;
        } #71
    } #4
    #73 off=121 nxt=-2
    (__R_SP.677 var=12 __sp.678 var=18) wr_res_reg (__tmp.260 __sp.40)  <709>;
    () void___rts_jr_w32 (__la.29)  <710>;
    (__rt.679 var=30 stl=X off=10) assign (__rt.661)  <711>;
    () out (__rt.679)  <712>;
    () sink (__sp.678)  <718>;
} #0
0 : 'src/math.c';
----------
0 : (0,2290:0,0);
3 : (0,2330:13,10);
4 : (0,2330:8,10);
6 : (0,2330:27,11);
8 : (0,2331:12,11);
10 : (0,2332:16,12);
11 : (0,2332:16,14);
13 : (0,2333:12,15);
15 : (0,2334:21,16);
16 : (0,2333:21,19);
19 : (0,2333:12,29);
20 : (0,2335:17,30);
21 : (0,2335:10,30);
23 : (0,2335:31,31);
24 : (0,2336:19,31);
25 : (0,2336:12,31);
27 : (0,2336:33,32);
29 : (0,2337:16,32);
33 : (0,2337:31,33);
34 : (0,2337:16,36);
36 : (0,2336:12,41);
39 : (0,2340:15,47);
40 : (0,2342:15,55);
41 : (0,2342:8,55);
43 : (0,2342:29,56);
44 : (0,2343:19,56);
45 : (0,2343:12,56);
47 : (0,2343:33,57);
48 : (0,2345:19,61);
50 : (0,2348:15,68);
51 : (0,2349:19,68);
52 : (0,2349:12,68);
54 : (0,2349:33,69);
55 : (0,2351:19,73);
60 : (0,2361:8,88);
62 : (0,2364:12,89);
63 : (0,2361:18,92);
65 : (0,2364:25,93);
67 : (0,2364:27,94);
68 : (0,2364:30,95);
73 : (0,2361:8,105);
76 : (0,2331:17,11);
82 : (0,2333:17,15);
94 : (0,2337:25,32);
95 : (0,2337:25,32);
100 : (0,2332:16,12);
106 : (0,2334:21,16);
113 : (0,2334:28,19);
114 : (0,2334:28,19);
120 : (0,2334:38,19);
124 : (0,2337:25,32);
127 : (0,2337:23,32);
128 : (0,2337:23,32);
137 : (0,2344:39,58);
138 : (0,2344:39,58);
143 : (0,2344:41,58);
144 : (0,2344:41,58);
149 : (0,2344:58,58);
150 : (0,2344:58,58);
155 : (0,2344:46,58);
156 : (0,2344:46,58);
164 : (0,2346:31,62);
165 : (0,2346:31,62);
170 : (0,2346:39,62);
171 : (0,2346:39,62);
176 : (0,2346:36,62);
177 : (0,2346:36,62);
186 : (0,2350:31,70);
187 : (0,2350:31,70);
192 : (0,2350:59,70);
193 : (0,2350:59,70);
198 : (0,2350:48,70);
199 : (0,2350:48,70);
204 : (0,2350:43,70);
205 : (0,2350:43,70);
210 : (0,2351:19,73);
211 : (0,2351:19,73);
259 : (0,2361:14,88);
262 : (0,2356:13,84);
263 : (0,2356:13,84);
268 : (0,2357:13,85);
269 : (0,2357:13,85);
274 : (0,2359:59,86);
275 : (0,2359:59,86);
280 : (0,2359:57,86);
281 : (0,2359:57,86);
286 : (0,2359:50,86);
287 : (0,2359:50,86);
292 : (0,2359:48,86);
293 : (0,2359:48,86);
298 : (0,2359:41,86);
299 : (0,2359:41,86);
304 : (0,2359:39,86);
305 : (0,2359:39,86);
310 : (0,2359:32,86);
311 : (0,2359:32,86);
316 : (0,2359:30,86);
317 : (0,2359:30,86);
322 : (0,2359:23,86);
323 : (0,2359:23,86);
328 : (0,2359:21,86);
329 : (0,2359:21,86);
334 : (0,2359:14,86);
335 : (0,2359:14,86);
340 : (0,2360:50,87);
341 : (0,2360:50,87);
346 : (0,2360:48,87);
347 : (0,2360:48,87);
352 : (0,2360:41,87);
353 : (0,2360:41,87);
358 : (0,2360:39,87);
359 : (0,2360:39,87);
364 : (0,2360:32,87);
365 : (0,2360:32,87);
370 : (0,2360:30,87);
371 : (0,2360:30,87);
376 : (0,2360:23,87);
377 : (0,2360:23,87);
382 : (0,2360:21,87);
383 : (0,2360:21,87);
388 : (0,2360:14,87);
389 : (0,2360:14,87);
394 : (0,2361:34,89);
395 : (0,2361:34,89);
400 : (0,2361:30,89);
401 : (0,2361:30,89);
407 : (0,2364:12,89);
418 : (0,2364:22,93);
421 : (0,2363:41,92);
422 : (0,2363:41,92);
427 : (0,2363:55,92);
428 : (0,2363:55,92);
433 : (0,2363:27,92);
434 : (0,2363:27,92);
440 : (0,2364:27,94);
445 : (0,2361:8,105);
446 : (0,2361:8,105);
449 : (0,2361:8,105);
450 : (0,2361:8,105);
453 : (0,2361:8,105);
454 : (0,2361:8,105);
457 : (0,2361:8,105);
458 : (0,2361:8,105);
461 : (0,2361:8,105);
462 : (0,2361:8,105);
----------
46 : (0,2291:0,0);
47 : (0,2291:0,0);
49 : (0,2291:0,0);
50 : (0,2291:0,0);
70 : (0,2329:16,0);
72 : (0,2329:15,9);
73 : (0,2330:15,0);
75 : (0,2330:13,10);
101 : (0,2330:8,10);
102 : (0,2331:18,0);
130 : (0,2331:12,11);
132 : (0,2333:18,0);
160 : (0,2333:12,15);
161 : (0,2333:36,0);
164 : (0,2333:35,16);
168 : (0,2333:45,16);
184 : (0,2335:19,0);
186 : (0,2335:17,30);
212 : (0,2335:10,30);
213 : (0,2336:21,0);
241 : (0,2336:12,31);
242 : (0,2337:19,0);
245 : (0,2337:26,0);
273 : (0,2337:16,32);
274 : (0,2337:31,0);
275 : (0,2337:31,0);
277 : (0,2337:31,0);
278 : (0,2337:31,33);
279 : (0,2337:31,33);
280 : (0,2337:38,0);
366 : (0,2339:17,0);
376 : (0,2342:17,0);
378 : (0,2342:15,55);
404 : (0,2342:8,55);
405 : (0,2343:21,0);
407 : (0,2343:19,56);
433 : (0,2343:12,56);
436 : (0,2344:29,0);
446 : (0,2346:21,0);
455 : (0,2343:12,65);
456 : (0,2343:12,65);
457 : (0,2349:21,0);
459 : (0,2349:19,68);
485 : (0,2349:12,68);
486 : (0,2350:21,0);
488 : (0,2350:32,0);
498 : (0,2352:21,0);
500 : (0,2352:29,0);
503 : (0,2349:12,77);
504 : (0,2349:12,77);
505 : (0,2342:8,80);
506 : (0,2342:8,80);
518 : (0,2335:10,83);
523 : (0,2335:10,83);
537 : (0,2359:18,86);
538 : (0,2359:28,0);
541 : (0,2359:27,86);
542 : (0,2359:37,0);
545 : (0,2359:36,86);
546 : (0,2359:46,0);
549 : (0,2359:45,86);
550 : (0,2359:55,0);
553 : (0,2359:54,86);
554 : (0,2359:63,0);
557 : (0,2359:62,86);
569 : (0,2360:19,0);
572 : (0,2360:18,87);
576 : (0,2360:27,87);
577 : (0,2360:37,0);
580 : (0,2360:36,87);
581 : (0,2360:46,0);
584 : (0,2360:45,87);
585 : (0,2360:54,0);
588 : (0,2360:53,87);
600 : (0,2361:14,88);
626 : (0,2361:8,88);
632 : (0,2363:23,92);
633 : (0,2363:22,92);
634 : (0,2363:22,92);
640 : (0,2363:49,92);
641 : (0,2363:49,92);
673 : (0,2364:25,93);
678 : (0,2361:8,101);
693 : (0,2330:8,104);
709 : (0,2361:8,105);
710 : (0,2361:8,105);
711 : (0,2361:8,0);
823 : (0,2359:27,0);
824 : (0,2359:36,0);
825 : (0,2359:45,0);
826 : (0,2359:54,0);
827 : (0,2359:62,0);
828 : (0,2360:18,0);
829 : (0,2360:27,0);
830 : (0,2360:36,0);
831 : (0,2360:45,0);
832 : (0,2360:53,0);
833 : (0,2333:35,0);
835 : (0,2333:45,0);
880 : (0,2331:17,11);
887 : (0,2333:17,15);
941 : (0,2337:25,0);
942 : (0,2337:25,32);
944 : (0,2337:25,32);
945 : (0,2337:25,32);
946 : (0,2337:25,32);
947 : (0,2337:25,32);
948 : (0,2337:25,32);
949 : (0,2337:25,32);
997 : (0,2332:24,0);
999 : (0,2332:24,12);
1000 : (0,2332:24,12);
1001 : (0,2332:24,12);
1002 : (0,2332:24,12);
1003 : (0,2332:24,12);
1012 : (0,2333:38,16);
1013 : (0,2333:38,16);
1014 : (0,2333:38,16);
1015 : (0,2333:38,16);
1016 : (0,2333:38,16);
1023 : (0,2334:28,0);
1024 : (0,2334:28,19);
1025 : (0,2334:28,19);
1026 : (0,2334:28,19);
1027 : (0,2334:28,19);
1028 : (0,2334:28,19);
1029 : (0,2334:28,19);
1038 : (0,2334:38,19);
1039 : (0,2334:38,19);
1040 : (0,2334:38,19);
1041 : (0,2334:38,19);
1042 : (0,2334:38,19);
1050 : (0,2337:23,32);
1051 : (0,2337:23,32);
1052 : (0,2337:23,32);
1053 : (0,2337:23,32);
1054 : (0,2337:23,32);
1055 : (0,2337:23,32);
1062 : (0,2344:39,0);
1063 : (0,2344:39,58);
1064 : (0,2344:39,58);
1065 : (0,2344:39,58);
1066 : (0,2344:39,58);
1067 : (0,2344:39,58);
1068 : (0,2344:39,58);
1076 : (0,2344:41,58);
1077 : (0,2344:41,58);
1078 : (0,2344:41,58);
1079 : (0,2344:41,58);
1080 : (0,2344:41,58);
1081 : (0,2344:41,58);
1089 : (0,2344:58,58);
1090 : (0,2344:58,58);
1091 : (0,2344:58,58);
1092 : (0,2344:58,58);
1093 : (0,2344:58,58);
1094 : (0,2344:58,58);
1101 : (0,2344:46,0);
1102 : (0,2344:46,58);
1103 : (0,2344:46,58);
1104 : (0,2344:46,58);
1105 : (0,2344:46,58);
1106 : (0,2344:46,58);
1107 : (0,2344:46,58);
1115 : (0,2346:31,62);
1116 : (0,2346:31,62);
1117 : (0,2346:31,62);
1118 : (0,2346:31,62);
1119 : (0,2346:31,62);
1120 : (0,2346:31,62);
1128 : (0,2346:39,62);
1129 : (0,2346:39,62);
1130 : (0,2346:39,62);
1131 : (0,2346:39,62);
1132 : (0,2346:39,62);
1133 : (0,2346:39,62);
1141 : (0,2346:36,62);
1142 : (0,2346:36,62);
1143 : (0,2346:36,62);
1144 : (0,2346:36,62);
1145 : (0,2346:36,62);
1146 : (0,2346:36,62);
1154 : (0,2350:31,70);
1155 : (0,2350:31,70);
1156 : (0,2350:31,70);
1157 : (0,2350:31,70);
1158 : (0,2350:31,70);
1159 : (0,2350:31,70);
1167 : (0,2350:59,70);
1168 : (0,2350:59,70);
1169 : (0,2350:59,70);
1170 : (0,2350:59,70);
1171 : (0,2350:59,70);
1172 : (0,2350:59,70);
1180 : (0,2350:48,70);
1181 : (0,2350:48,70);
1182 : (0,2350:48,70);
1183 : (0,2350:48,70);
1184 : (0,2350:48,70);
1185 : (0,2350:48,70);
1193 : (0,2350:43,70);
1194 : (0,2350:43,70);
1195 : (0,2350:43,70);
1196 : (0,2350:43,70);
1197 : (0,2350:43,70);
1198 : (0,2350:43,70);
1206 : (0,2352:40,74);
1207 : (0,2352:40,74);
1208 : (0,2352:40,74);
1209 : (0,2352:40,74);
1210 : (0,2352:40,74);
1211 : (0,2352:40,74);
1219 : (0,2356:13,84);
1220 : (0,2356:13,84);
1221 : (0,2356:13,84);
1222 : (0,2356:13,84);
1223 : (0,2356:13,84);
1224 : (0,2356:13,84);
1232 : (0,2357:13,85);
1233 : (0,2357:13,85);
1234 : (0,2357:13,85);
1235 : (0,2357:13,85);
1236 : (0,2357:13,85);
1237 : (0,2357:13,85);
1245 : (0,2359:59,86);
1246 : (0,2359:59,86);
1247 : (0,2359:59,86);
1248 : (0,2359:59,86);
1249 : (0,2359:59,86);
1250 : (0,2359:59,86);
1258 : (0,2359:57,86);
1259 : (0,2359:57,86);
1260 : (0,2359:57,86);
1261 : (0,2359:57,86);
1262 : (0,2359:57,86);
1263 : (0,2359:57,86);
1271 : (0,2359:50,86);
1272 : (0,2359:50,86);
1273 : (0,2359:50,86);
1274 : (0,2359:50,86);
1275 : (0,2359:50,86);
1276 : (0,2359:50,86);
1284 : (0,2359:48,86);
1285 : (0,2359:48,86);
1286 : (0,2359:48,86);
1287 : (0,2359:48,86);
1288 : (0,2359:48,86);
1289 : (0,2359:48,86);
1297 : (0,2359:41,86);
1298 : (0,2359:41,86);
1299 : (0,2359:41,86);
1300 : (0,2359:41,86);
1301 : (0,2359:41,86);
1302 : (0,2359:41,86);
1310 : (0,2359:39,86);
1311 : (0,2359:39,86);
1312 : (0,2359:39,86);
1313 : (0,2359:39,86);
1314 : (0,2359:39,86);
1315 : (0,2359:39,86);
1323 : (0,2359:32,86);
1324 : (0,2359:32,86);
1325 : (0,2359:32,86);
1326 : (0,2359:32,86);
1327 : (0,2359:32,86);
1328 : (0,2359:32,86);
1336 : (0,2359:30,86);
1337 : (0,2359:30,86);
1338 : (0,2359:30,86);
1339 : (0,2359:30,86);
1340 : (0,2359:30,86);
1341 : (0,2359:30,86);
1349 : (0,2359:23,86);
1350 : (0,2359:23,86);
1351 : (0,2359:23,86);
1352 : (0,2359:23,86);
1353 : (0,2359:23,86);
1354 : (0,2359:23,86);
1362 : (0,2359:21,86);
1363 : (0,2359:21,86);
1364 : (0,2359:21,86);
1365 : (0,2359:21,86);
1366 : (0,2359:21,86);
1367 : (0,2359:21,86);
1375 : (0,2359:14,86);
1376 : (0,2359:14,86);
1377 : (0,2359:14,86);
1378 : (0,2359:14,86);
1379 : (0,2359:14,86);
1380 : (0,2359:14,86);
1388 : (0,2360:50,87);
1389 : (0,2360:50,87);
1390 : (0,2360:50,87);
1391 : (0,2360:50,87);
1392 : (0,2360:50,87);
1393 : (0,2360:50,87);
1401 : (0,2360:48,87);
1402 : (0,2360:48,87);
1403 : (0,2360:48,87);
1404 : (0,2360:48,87);
1405 : (0,2360:48,87);
1406 : (0,2360:48,87);
1414 : (0,2360:41,87);
1415 : (0,2360:41,87);
1416 : (0,2360:41,87);
1417 : (0,2360:41,87);
1418 : (0,2360:41,87);
1419 : (0,2360:41,87);
1427 : (0,2360:39,87);
1428 : (0,2360:39,87);
1429 : (0,2360:39,87);
1430 : (0,2360:39,87);
1431 : (0,2360:39,87);
1432 : (0,2360:39,87);
1440 : (0,2360:32,87);
1441 : (0,2360:32,87);
1442 : (0,2360:32,87);
1443 : (0,2360:32,87);
1444 : (0,2360:32,87);
1445 : (0,2360:32,87);
1453 : (0,2360:30,87);
1454 : (0,2360:30,87);
1455 : (0,2360:30,87);
1456 : (0,2360:30,87);
1457 : (0,2360:30,87);
1458 : (0,2360:30,87);
1466 : (0,2360:23,87);
1467 : (0,2360:23,87);
1468 : (0,2360:23,87);
1469 : (0,2360:23,87);
1470 : (0,2360:23,87);
1471 : (0,2360:23,87);
1479 : (0,2360:21,87);
1480 : (0,2360:21,87);
1481 : (0,2360:21,87);
1482 : (0,2360:21,87);
1483 : (0,2360:21,87);
1484 : (0,2360:21,87);
1492 : (0,2360:14,87);
1493 : (0,2360:14,87);
1494 : (0,2360:14,87);
1495 : (0,2360:14,87);
1496 : (0,2360:14,87);
1497 : (0,2360:14,87);
1505 : (0,2361:34,89);
1506 : (0,2361:34,89);
1507 : (0,2361:34,89);
1508 : (0,2361:34,89);
1509 : (0,2361:34,89);
1510 : (0,2361:34,89);
1518 : (0,2361:30,89);
1519 : (0,2361:30,89);
1520 : (0,2361:30,89);
1521 : (0,2361:30,89);
1522 : (0,2361:30,89);
1523 : (0,2361:30,89);
1532 : (0,2361:27,89);
1533 : (0,2361:27,89);
1534 : (0,2361:27,89);
1535 : (0,2361:27,89);
1536 : (0,2361:27,89);
1544 : (0,2363:41,92);
1545 : (0,2363:41,92);
1546 : (0,2363:41,92);
1547 : (0,2363:41,92);
1548 : (0,2363:41,92);
1549 : (0,2363:41,92);
1557 : (0,2363:55,92);
1558 : (0,2363:55,92);
1559 : (0,2363:55,92);
1560 : (0,2363:55,92);
1561 : (0,2363:55,92);
1562 : (0,2363:55,92);
1570 : (0,2363:27,92);
1571 : (0,2363:27,92);
1572 : (0,2363:27,92);
1573 : (0,2363:27,92);
1574 : (0,2363:27,92);
1575 : (0,2363:27,92);
1584 : (0,2364:27,94);
1585 : (0,2364:27,94);
1586 : (0,2364:27,94);
1587 : (0,2364:27,94);
1588 : (0,2364:27,94);
1682 : (0,2336:19,31);
1683 : (0,2364:22,93);
1728 : (0,2361:8,105);
1730 : (0,2361:8,0);
1733 : (0,2332:24,12);
1734 : (0,2361:8,105);
1736 : (0,2361:8,0);
1739 : (0,2333:38,16);
1740 : (0,2361:8,105);
1742 : (0,2361:8,0);
1745 : (0,2334:38,19);
1746 : (0,2361:8,105);
1748 : (0,2361:8,0);
1751 : (0,2361:27,89);
1752 : (0,2361:8,105);
1754 : (0,2361:8,0);
1757 : (0,2364:27,94);
1759 : (0,2331:12,25);
1763 : (0,2333:12,15);
1766 : (0,2331:12,11);
1769 : (0,2337:16,32);
1773 : (0,2336:12,31);
1778 : (0,2343:12,56);
1783 : (0,2349:12,68);
1788 : (0,2342:8,55);
1793 : (0,2335:10,30);
1798 : (0,2364:25,93);
1801 : (0,2361:8,88);
1805 : (0,2330:8,10);

