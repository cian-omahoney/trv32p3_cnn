
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:54:31 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float ldexpf(float, int)
Fldexpf : user_defined, called {
    fnm : "ldexpf" 'float ldexpf(float, int)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
}
****
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : ldexpf typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__ffloat__
   22 : x typ=w32 bnd=p tref=__ffloat__
   23 : n typ=w32 bnd=p tref=__sint__
   24 : __ct_0S0 typ=w32 val=0S0 bnd=m
   26 : __tmp typ=w32 bnd=m
   28 : k typ=w32 bnd=m tref=int32_t__
   39 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   41 : __tmp typ=w32 bnd=m
   42 : __ct_23 typ=w32 val=23f bnd=m
   45 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   47 : __tmp typ=bool bnd=m
   48 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   50 : __tmp typ=w32 bnd=m
   53 : __tmp typ=bool bnd=m
   54 : __ct_0s0 typ=w32 val=0s0 bnd=m
   56 : __tmp typ=w32 bnd=m
   57 : __ct_1275068416 typ=t20s_rp12 val=311296f bnd=m
   63 : __tmp typ=w32 bnd=m
   66 : __tmp typ=w32 bnd=m
   67 : __ct_25 typ=w32 val=25f bnd=m
   70 : __ct_m50000 typ=w32 val=-50000f bnd=m
   72 : __tmp typ=bool bnd=m
   73 : __ct_228737632 typ=w32 val=228737632f bnd=m
   79 : __ct_255 typ=w32 val=255f bnd=m
   81 : __tmp typ=bool bnd=m
   84 : __ct_254 typ=w32 val=254f bnd=m
   86 : __tmp typ=bool bnd=m
   87 : __ct_1900671690 typ=w32 val=1900671690f bnd=m
   91 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
   93 : __tmp typ=w32 bnd=m
   94 : __tmp typ=w32 bnd=m
  102 : __tmp typ=bool bnd=m
  104 : __ct_2155872255 typ=w32 val=-2139095041f bnd=m
  106 : __tmp typ=w32 bnd=m
  109 : __tmp typ=w32 bnd=m
  111 : __tmp typ=w32 bnd=m
  114 : __ct_m25 typ=w32 val=-25f bnd=m
  116 : __tmp typ=bool bnd=m
  117 : __ct_50000 typ=w32 val=50000f bnd=m
  119 : __tmp typ=bool bnd=m
  140 : __tmp typ=w32 bnd=m
  155 : __tmp typ=w32 bnd=m
  157 : __tmp typ=w32 bnd=m
  160 : __ct_855638016 typ=t20s_rp12 val=208896f bnd=m
  184 : a typ=w32 bnd=m tref=float32_t__
  185 : b typ=w32 bnd=m tref=float32_t__
  186 : f32_mul typ=t21s_s2 val=0r bnd=m
  187 : __link typ=w32 bnd=m
  191 : a typ=w32 bnd=m tref=float32_t__
  192 : b typ=w32 bnd=m tref=float32_t__
  193 : f32_add typ=t21s_s2 val=0r bnd=m
  204 : ix typ=w32 bnd=m
  209 : __either typ=bool bnd=m
  210 : __trgt typ=t13s_s2 val=0j bnd=m
  211 : __trgt typ=t13s_s2 val=0j bnd=m
  212 : __trgt typ=t13s_s2 val=0j bnd=m
  213 : __trgt typ=t21s_s2 val=0j bnd=m
  214 : __trgt typ=t13s_s2 val=0j bnd=m
  215 : __trgt typ=t13s_s2 val=0j bnd=m
  216 : __trgt typ=t13s_s2 val=0j bnd=m
  217 : __trgt typ=t21s_s2 val=0j bnd=m
  218 : __trgt typ=t13s_s2 val=0j bnd=m
  219 : __trgt typ=t21s_s2 val=0j bnd=m
  220 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fldexpf {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x.23 var=22 stl=X off=11) inp ()  <34>;
    (x.24 var=22) deassign (x.23)  <35>;
    (n.26 var=23 stl=X off=12) inp ()  <37>;
    (n.27 var=23) deassign (n.26)  <38>;
    (__rd___sp.29 var=19) rd_res_reg (__R_SP.11 __sp.17)  <40>;
    (__ct_0S0.30 var=24) const ()  <41>;
    (__tmp.32 var=26) __Pvoid__pl___Pvoid___sint (__rd___sp.29 __ct_0S0.30)  <43>;
    (__R_SP.33 var=12 __sp.34 var=18) wr_res_reg (__tmp.32 __sp.17)  <44>;
    (__ct_2139095040.49 var=39) const ()  <60>;
    (__tmp.51 var=41) __sint__ad___sint___sint (x.24 __ct_2139095040.49)  <62>;
    (__ct_23.52 var=42) const ()  <63>;
    (k.54 var=28) __sint__rs___sint___sint (__tmp.51 __ct_23.52)  <65>;
    (__ct_0.55 var=45) const ()  <66>;
    (__rd___sp.106 var=19) rd_res_reg (__R_SP.11 __sp.34)  <119>;
    (__ct_0s0.107 var=54) const ()  <120>;
    (__tmp.109 var=56) __Pvoid__pl___Pvoid___sint (__rd___sp.106 __ct_0s0.107)  <122>;
    (__ct_228737632.192 var=73) const ()  <213>;
    (__ct_m25.366 var=114) const ()  <397>;
    (f32_mul.566 var=186) const ()  <707>;
    (__tmp.628 var=47) bool__ne___sint___sint (k.54 __ct_0.55)  <834>;
    (__trgt.647 var=212) const ()  <889>;
    () void_br_bool_t13s_s2 (__tmp.628 __trgt.647)  <890>;
    (__either.648 var=209) undefined ()  <891>;
    if {
        {
            () if_expr (__either.648)  <90>;
        } #5
        {
        } #24 off=12
        {
            #7 off=1
            (__ct_2147483647.79 var=48) const ()  <91>;
            (__tmp.81 var=50) __sint__ad___sint___sint (x.24 __ct_2147483647.79)  <93>;
            (__tmp.84 var=53) bool__eq___sint___sint (__tmp.81 __ct_0.55)  <96>;
            (__trgt.643 var=210) const ()  <881>;
            () void_br_bool_t13s_s2 (__tmp.84 __trgt.643)  <882>;
            (__either.644 var=209) undefined ()  <883>;
            if {
                {
                    () if_expr (__either.644)  <118>;
                    () chess_rear_then ()  <884>;
                } #9
                {
                    (__R_SP.110 var=12 __sp.111 var=18) wr_res_reg (__tmp.109 __sp.34)  <123>;
                    () void___rts_jr_w32 (__la.20)  <124>;
                    (__rt.112 var=21 stl=X off=10) assign (x.24)  <125>;
                    () out (__rt.112)  <126>;
                    () sink (__sp.111)  <132>;
                } #12 off=3 nxt=-2
                {
                } #13 off=2
                {
                } #14
            } #8
            #91 off=4
            (__ct_1275068416.155 var=57) const ()  <175>;
            (__link.567 var=187) w32_jal_t21s_s2 (f32_mul.566)  <708>;
            call {
                (a.568 var=184 stl=X off=11) assign (x.24)  <709>;
                (b.569 var=185 stl=X off=12) assign (__ct_1275068416.155)  <710>;
                (__link.570 var=187 stl=X off=1) assign (__link.567)  <711>;
                (x.571 var=22 stl=X off=10) Ff32_mul (__link.570 a.568 b.569)  <712>;
                (x.572 var=22) deassign (x.571)  <713>;
            } #92 off=5
            #88 off=6
            (__tmp.161 var=63) __sint__ad___sint___sint (x.572 __ct_2139095040.49)  <181>;
            (__tmp.164 var=66) __sint__rs___sint___sint (__tmp.161 __ct_23.52)  <184>;
            (k.167 var=28) __sint__pl___sint___sint (__tmp.164 __ct_m25.366)  <187>;
            (__ct_m50000.168 var=70) const ()  <188>;
            (__tmp.170 var=72) bool__lt___sint___sint (n.27 __ct_m50000.168)  <190>;
            (__trgt.645 var=211) const ()  <885>;
            () void_br_bool_t13s_s2 (__tmp.170 __trgt.645)  <886>;
            (__either.646 var=209) undefined ()  <887>;
            if {
                {
                    () if_expr (__either.646)  <212>;
                    () chess_rear_then ()  <888>;
                } #17
                {
                    #20 off=8
                    (__R_SP.199 var=12 __sp.200 var=18) wr_res_reg (__tmp.109 __sp.34)  <220>;
                    () void_j_t21s_s2 (f32_mul.566)  <859>;
                    call {
                        (a.578 var=184 stl=X off=11) assign (__ct_228737632.192)  <722>;
                        (b.579 var=185 stl=X off=12) assign (x.572)  <723>;
                        (__la.580 var=20 stl=X off=1) assign (__la.20)  <724>;
                        (__rt.581 var=21 stl=X off=10) Ff32_mul (__la.580 a.578 b.579)  <725>;
                        (__rt.582 var=21) deassign (__rt.581)  <726>;
                    } #98 off=9
                    #21 off=10 nxt=-2
                    (__rt.201 var=21 stl=X off=10) assign (__rt.582)  <222>;
                    () out (__rt.201)  <223>;
                    () sink (__sp.200)  <229>;
                } #18
                {
                } #22 off=7
                {
                } #23
            } #16
            #153 off=11
            (__trgt.649 var=213) const ()  <892>;
            () void_j_t21s_s2 (__trgt.649)  <893>;
        } #6
        {
            (ix.251 var=204) merge (x.24 x.572)  <279>;
            (k.253 var=28) merge (k.54 k.167)  <281>;
        } #25
    } #4
    #26 off=13
    (__ct_255.265 var=79) const ()  <293>;
    (__tmp.267 var=81) bool__eq___sint___sint (k.253 __ct_255.265)  <295>;
    (__trgt.660 var=220) const ()  <910>;
    () void_br_bool_t13s_s2 (__tmp.267 __trgt.660)  <911>;
    (__either.661 var=209) undefined ()  <912>;
    if {
        {
            () if_expr (__either.661)  <317>;
            () chess_rear_then ()  <913>;
        } #28
        {
            #141 off=32
            (f32_add.586 var=193) const ()  <733>;
            (__R_SP.631 var=12 __sp.632 var=18) wr_res_reg (__tmp.109 __sp.34)  <860>;
            () void_j_t21s_s2 (f32_add.586)  <865>;
            call {
                (a.588 var=191 stl=X off=11) assign (ix.251)  <735>;
                (b.589 var=192 stl=X off=12) assign (ix.251)  <736>;
                (__la.590 var=20 stl=X off=1) assign (__la.20)  <737>;
                (__rt.591 var=21 stl=X off=10) Ff32_add (__la.590 a.588 b.589)  <738>;
                (__rt.592 var=21) deassign (__rt.591)  <739>;
            } #104 off=33
            #142 off=34 nxt=-2
            (__rt.633 var=21 stl=X off=10) assign (__rt.592)  <862>;
            () out (__rt.633)  <863>;
            () sink (__sp.632)  <864>;
            (__rt.642 var=21) never ()  <880>;
        } #29
        {
            #115 off=14
            (k.290 var=28) __sint__pl___sint___sint (k.253 n.27)  <319>;
            (__ct_1900671690.318 var=87) const ()  <348>;
            (__ct_2147483648.322 var=91) const ()  <352>;
            (__tmp.324 var=93) __uint__ad___uint___uint (ix.251 __ct_2147483648.322)  <354>;
            (__tmp.325 var=94) __uint__or___uint___uint (__tmp.324 __ct_1900671690.318)  <355>;
            (__link.597 var=187) w32_jal_t21s_s2 (f32_mul.566)  <747>;
            call {
                (a.598 var=184 stl=X off=11) assign (__ct_1900671690.318)  <748>;
                (b.599 var=185 stl=X off=12) assign (__tmp.325)  <749>;
                (__link.600 var=187 stl=X off=1) assign (__link.597)  <750>;
                (__rt.601 var=21 stl=X off=10) Ff32_mul (__link.600 a.598 b.599)  <751>;
                (__rt.602 var=21) deassign (__rt.601)  <752>;
            } #116 off=15
            #112 off=16
            (__ct_254.291 var=84) const ()  <320>;
            (__tmp.548 var=86) bool__lt___sint___sint (__ct_254.291 k.290)  <655>;
            (__trgt.657 var=218) const ()  <905>;
            () void_br_bool_t13s_s2 (__tmp.548 __trgt.657)  <906>;
            (__either.658 var=209) undefined ()  <907>;
            if {
                {
                    () if_expr (__either.658)  <344>;
                } #33
                {
                } #34 off=30
                {
                    #75 off=17
                    (__ct_2155872255.356 var=104) const ()  <387>;
                    (__tmp.358 var=106) __uint__ad___uint___uint (ix.251 __ct_2155872255.356)  <389>;
                    (__tmp.552 var=102) bool__lt___sint___sint (__ct_0.55 k.290)  <662>;
                    (__trgt.654 var=216) const ()  <900>;
                    () void_br_bool_t13s_s2 (__tmp.552 __trgt.654)  <901>;
                    (__either.655 var=209) undefined ()  <902>;
                    if {
                        {
                            () if_expr (__either.655)  <385>;
                        } #38
                        {
                            (__tmp.361 var=109) __sint__ls___sint___sint (k.290 __ct_23.52)  <392>;
                            (__tmp.363 var=111) __uint__or___uint___uint (__tmp.358 __tmp.361)  <394>;
                        } #39 off=28
                        {
                            #78 off=18
                            (__tmp.556 var=116) bool__ge___sint___sint (__ct_m25.366 k.290)  <669>;
                            (__trgt.652 var=215) const ()  <897>;
                            () void_br_bool_t13s_s2 (__tmp.556 __trgt.652)  <898>;
                            (__either.653 var=209) undefined ()  <899>;
                            if {
                                {
                                    () if_expr (__either.653)  <421>;
                                } #43
                                {
                                    #81 off=22
                                    (__ct_50000.390 var=117) const ()  <422>;
                                    (__tmp.560 var=119) bool__lt___sint___sint (__ct_50000.390 n.27)  <676>;
                                    (__trgt.650 var=214) const ()  <894>;
                                    () void_br_bool_t13s_s2 (__tmp.560 __trgt.650)  <895>;
                                    (__either.651 var=209) undefined ()  <896>;
                                    if {
                                        {
                                            () if_expr (__either.651)  <446>;
                                        } #47
                                        {
                                        } #58 off=26
                                        {
                                            #145 off=23
                                            (__tmp.440 var=140) __uint__or___uint___uint (__tmp.324 __ct_228737632.192)  <473>;
                                            (__R_SP.634 var=12 __sp.635 var=18) wr_res_reg (__tmp.109 __sp.34)  <866>;
                                            () void_j_t21s_s2 (f32_mul.566)  <871>;
                                            call {
                                                (a.608 var=184 stl=X off=11) assign (__ct_228737632.192)  <761>;
                                                (b.609 var=185 stl=X off=12) assign (__tmp.440)  <762>;
                                                (__la.610 var=20 stl=X off=1) assign (__la.20)  <763>;
                                                (__rt.611 var=21 stl=X off=10) Ff32_mul (__la.610 a.608 b.609)  <764>;
                                                (__rt.612 var=21) deassign (__rt.611)  <765>;
                                            } #125 off=24
                                            #146 off=25 nxt=-2
                                            (__rt.636 var=21 stl=X off=10) assign (__rt.612)  <868>;
                                            () out (__rt.636)  <869>;
                                            () sink (__sp.635)  <870>;
                                        } #49
                                        {
                                        } #50
                                    } #46
                                } #44
                                {
                                    #149 off=19
                                    (__ct_25.165 var=67) const ()  <185>;
                                    (k.455 var=28) __sint__pl___sint___sint (k.290 __ct_25.165)  <488>;
                                    (__tmp.462 var=155) __sint__ls___sint___sint (k.455 __ct_23.52)  <495>;
                                    (__tmp.464 var=157) __uint__or___uint___uint (__tmp.358 __tmp.462)  <497>;
                                    (__ct_855638016.467 var=160) const ()  <500>;
                                    (__R_SP.637 var=12 __sp.638 var=18) wr_res_reg (__tmp.109 __sp.34)  <872>;
                                    () void_j_t21s_s2 (f32_mul.566)  <877>;
                                    call {
                                        (a.618 var=184 stl=X off=11) assign (__tmp.464)  <774>;
                                        (b.619 var=185 stl=X off=12) assign (__ct_855638016.467)  <775>;
                                        (__la.620 var=20 stl=X off=1) assign (__la.20)  <776>;
                                        (__rt.621 var=21 stl=X off=10) Ff32_mul (__la.620 a.618 b.619)  <777>;
                                        (__rt.622 var=21) deassign (__rt.621)  <778>;
                                    } #136 off=20
                                    #150 off=21 nxt=-2
                                    (__rt.639 var=21 stl=X off=10) assign (__rt.622)  <874>;
                                    () out (__rt.639)  <875>;
                                    () sink (__sp.638)  <876>;
                                } #51
                                {
                                } #52
                            } #42
                            #154 off=27
                            (__trgt.656 var=217) const ()  <903>;
                            () void_j_t21s_s2 (__trgt.656)  <904>;
                        } #40
                        {
                            (__rt.481 var=21) merge (__tmp.363 __rt.602)  <514>;
                        } #53
                    } #37
                    #155 off=29
                    (__trgt.659 var=219) const ()  <908>;
                    () void_j_t21s_s2 (__trgt.659)  <909>;
                } #35
                {
                    (__rt.490 var=21) merge (__rt.602 __rt.481)  <523>;
                } #54
            } #32
        } #30
        {
            (__rt.502 var=21) merge (__rt.642 __rt.490)  <535>;
        } #55
    } #27
    #57 off=35 nxt=-2
    (__R_SP.516 var=12 __sp.517 var=18) wr_res_reg (__tmp.109 __sp.34)  <549>;
    () void___rts_jr_w32 (__la.20)  <550>;
    (__rt.518 var=21 stl=X off=10) assign (__rt.502)  <551>;
    () out (__rt.518)  <552>;
    () sink (__sp.517)  <558>;
} #0
0 : 'src/math.c';
----------
0 : (0,59:0,0);
3 : (0,70:9,6);
4 : (0,70:4,6);
6 : (0,70:14,7);
7 : (0,71:27,7);
8 : (0,71:8,7);
12 : (0,71:32,8);
13 : (0,71:8,11);
16 : (0,75:8,18);
18 : (0,75:23,19);
20 : (0,75:23,19);
21 : (0,75:23,19);
22 : (0,75:8,22);
24 : (0,70:4,27);
26 : (0,77:9,30);
27 : (0,77:4,30);
29 : (0,77:17,31);
30 : (0,77:17,33);
32 : (0,79:4,35);
34 : (0,79:31,36);
35 : (0,79:19,48);
37 : (0,80:4,49);
39 : (0,81:8,50);
40 : (0,81:49,55);
42 : (0,82:4,56);
44 : (0,82:18,57);
46 : (0,83:8,57);
49 : (0,84:12,70);
51 : (0,83:8,87);
57 : (0,89:4,104);
75 : (0,80:10,49);
78 : (0,82:10,56);
81 : (0,83:14,57);
88 : (0,75:13,18);
91 : (0,72:10,14);
92 : (0,72:10,14);
98 : (0,75:34,19);
104 : (0,77:17,31);
112 : (0,79:10,35);
115 : (0,79:30,45);
116 : (0,79:30,45);
125 : (0,85:26,79);
136 : (0,89:12,90);
141 : (0,89:4,104);
142 : (0,89:4,104);
145 : (0,89:4,104);
146 : (0,89:4,104);
149 : (0,89:4,104);
150 : (0,89:4,104);
----------
40 : (0,59:6,0);
41 : (0,59:6,0);
43 : (0,59:6,0);
44 : (0,59:6,0);
60 : (0,69:12,0);
62 : (0,69:11,5);
63 : (0,69:25,0);
65 : (0,69:23,5);
66 : (0,70:11,0);
90 : (0,70:4,6);
91 : (0,71:16,0);
93 : (0,71:15,7);
96 : (0,71:27,7);
118 : (0,71:8,7);
119 : (0,71:32,0);
120 : (0,71:32,0);
122 : (0,71:32,0);
123 : (0,71:32,8);
124 : (0,71:32,8);
125 : (0,71:39,0);
175 : (0,72:13,0);
181 : (0,74:16,17);
184 : (0,74:28,17);
185 : (0,74:36,0);
187 : (0,74:34,17);
188 : (0,75:15,0);
190 : (0,75:13,18);
212 : (0,75:8,18);
213 : (0,75:30,0);
220 : (0,75:23,19);
222 : (0,75:34,0);
279 : (0,70:4,29);
281 : (0,70:4,29);
293 : (0,77:11,0);
295 : (0,77:9,30);
317 : (0,77:4,30);
319 : (0,78:9,34);
320 : (0,79:13,0);
344 : (0,79:4,35);
348 : (0,79:31,0);
352 : (0,79:31,0);
354 : (0,79:31,42);
355 : (0,79:31,42);
385 : (0,80:4,49);
387 : (0,81:25,0);
389 : (0,81:25,50);
392 : (0,81:40,50);
394 : (0,81:37,50);
397 : (0,82:13,0);
421 : (0,82:4,56);
422 : (0,83:16,0);
446 : (0,83:8,57);
473 : (0,85:27,76);
488 : (0,87:6,88);
495 : (0,88:32,89);
497 : (0,88:29,89);
500 : (0,89:13,0);
514 : (0,80:4,96);
523 : (0,79:4,99);
535 : (0,77:4,102);
549 : (0,89:4,104);
550 : (0,89:4,104);
551 : (0,89:4,0);
655 : (0,79:10,35);
662 : (0,80:10,49);
669 : (0,82:10,56);
676 : (0,83:14,57);
707 : (0,72:10,0);
708 : (0,72:10,14);
709 : (0,72:10,14);
710 : (0,72:10,14);
711 : (0,72:10,14);
712 : (0,72:10,14);
713 : (0,72:10,14);
722 : (0,75:34,19);
723 : (0,75:34,19);
724 : (0,75:34,19);
725 : (0,75:34,19);
726 : (0,75:34,19);
733 : (0,77:25,0);
735 : (0,77:25,31);
736 : (0,77:25,31);
737 : (0,77:25,31);
738 : (0,77:25,31);
739 : (0,77:25,31);
747 : (0,79:30,45);
748 : (0,79:30,45);
749 : (0,79:30,45);
750 : (0,79:30,45);
751 : (0,79:30,45);
752 : (0,79:30,45);
761 : (0,85:26,79);
762 : (0,85:26,79);
763 : (0,85:26,79);
764 : (0,85:26,79);
765 : (0,85:26,79);
774 : (0,89:12,90);
775 : (0,89:12,90);
776 : (0,89:12,90);
777 : (0,89:12,90);
778 : (0,89:12,90);
834 : (0,70:9,6);
859 : (0,75:34,19);
860 : (0,89:4,104);
862 : (0,89:4,0);
865 : (0,77:25,31);
866 : (0,89:4,104);
868 : (0,89:4,0);
871 : (0,85:26,79);
872 : (0,89:4,104);
874 : (0,89:4,0);
877 : (0,89:12,90);
882 : (0,71:8,7);
886 : (0,75:8,18);
890 : (0,70:4,6);
895 : (0,83:8,57);
898 : (0,82:4,56);
901 : (0,80:4,49);
906 : (0,79:4,35);
911 : (0,77:4,30);

