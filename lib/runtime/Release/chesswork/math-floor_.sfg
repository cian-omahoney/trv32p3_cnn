
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:12:51 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern double floor(double)
Ffloor : user_defined, called {
    fnm : "floor" 'double floor(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
!!  bool f64_lt(float64_t, float64_t)
Ff64_lt : user_defined, called {
    fnm : "f64_lt" 'bool f64_lt(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : floor typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   22 : __rt_low typ=w32 bnd=m tref=__uint__
   23 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : x_low typ=w32 bnd=m tref=__uint__
   26 : x_high typ=w32 bnd=m tref=__uint__
   27 : __ct_0S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   30 : i0 typ=w32 bnd=m tref=int32_t__
   31 : i1 typ=w32 bnd=m tref=int32_t__
   32 : j0 typ=w32 bnd=m tref=int32_t__
   33 : i typ=w32 bnd=m tref=u_int32_t__
   34 : j typ=w32 bnd=m tref=u_int32_t__
   47 : __ct_20 typ=w32 val=20f bnd=m
   49 : __tmp typ=w32 bnd=m
   50 : __ct_2047 typ=w32 val=2047f bnd=m
   52 : __tmp typ=w32 bnd=m
   58 : __tmp typ=bool bnd=m
   59 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   61 : __tmp typ=bool bnd=m
   67 : __tmp typ=bool bnd=m
   70 : __tmp typ=bool bnd=m
   73 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   75 : __tmp typ=w32 bnd=m
   76 : __tmp typ=w32 bnd=m
   79 : __tmp typ=bool bnd=m
   80 : __ct_m1074790400 typ=t20s_rp12 val=-262400f bnd=m
   84 : __ct_1048575 typ=w32 val=1048575f bnd=m
   88 : __tmp typ=w32 bnd=m
   90 : __tmp typ=w32 bnd=m
   93 : __tmp typ=bool bnd=m
   94 : __ct_0s0 typ=w32 val=0s0 bnd=m
   96 : __tmp typ=w32 bnd=m
  107 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  109 : __tmp typ=w32 bnd=m
  110 : __tmp typ=w32 bnd=m
  113 : __tmp typ=w32 bnd=m
  114 : __tmp typ=w32 bnd=m
  118 : __ct_51 typ=w32 val=51f bnd=m
  120 : __tmp typ=bool bnd=m
  121 : __ct_1024 typ=w32 val=1024f bnd=m
  123 : __tmp typ=bool bnd=m
  128 : __ct_4294967295 typ=w32 val=-1f bnd=m
  132 : __tmp typ=w32 bnd=m
  135 : __tmp typ=w32 bnd=m
  138 : __tmp typ=bool bnd=m
  153 : __tmp typ=bool bnd=m
  154 : __ct_1 typ=w32 val=1f bnd=m
  160 : __ct_52 typ=w32 val=52f bnd=m
  162 : __tmp typ=w32 bnd=m
  163 : __tmp typ=w32 bnd=m
  166 : __tmp typ=bool bnd=m
  172 : __tmp typ=w32 bnd=m
  173 : __tmp typ=w32 bnd=m
  192 : __ct_m1023 typ=w32 val=-1023f bnd=m
  193 : __ct_m20 typ=w32 val=-20f bnd=m
  278 : a_low typ=w32 bnd=m tref=__uint__
  279 : a_high typ=w32 bnd=m tref=__uint__
  280 : b_low typ=w32 bnd=m tref=__uint__
  281 : b_high typ=w32 bnd=m tref=__uint__
  282 : f64_lt typ=t21s_s2 val=0r bnd=m
  283 : __link typ=w32 bnd=m
  284 : __tmp typ=w32 bnd=m
  302 : a_low typ=w32 bnd=m tref=__uint__
  303 : a_high typ=w32 bnd=m tref=__uint__
  304 : b_low typ=w32 bnd=m tref=__uint__
  305 : b_high typ=w32 bnd=m tref=__uint__
  306 : f64_add typ=t21s_s2 val=0r bnd=m
  307 : __link typ=w32 bnd=m
  309 : __tmp typ=w32 bnd=m
  310 : __tmp typ=w32 bnd=m
  325 : i0 typ=w32 bnd=m
  326 : i0 typ=w32 bnd=m
  327 : i1 typ=w32 bnd=m
  328 : i1 typ=w32 bnd=m
  329 : i1 typ=w32 bnd=m
  330 : __ct_2281731484 typ=w32 val=-2013235812f bnd=m
  331 : __ct_2117592124 typ=w32 val=2117592124f bnd=m
  340 : __either typ=bool bnd=m
  341 : __trgt typ=t13s_s2 val=0j bnd=m
  342 : __trgt typ=t21s_s2 val=0j bnd=m
  343 : __trgt typ=t13s_s2 val=0j bnd=m
  344 : __trgt typ=t21s_s2 val=0j bnd=m
  345 : __trgt typ=t13s_s2 val=0j bnd=m
  346 : __trgt typ=t21s_s2 val=0j bnd=m
  347 : __trgt typ=t13s_s2 val=0j bnd=m
  348 : __trgt typ=t13s_s2 val=0j bnd=m
  349 : __trgt typ=t21s_s2 val=0j bnd=m
  350 : __trgt typ=t13s_s2 val=0j bnd=m
  351 : __trgt typ=t21s_s2 val=0j bnd=m
  352 : __trgt typ=t13s_s2 val=0j bnd=m
  353 : __trgt typ=t21s_s2 val=0j bnd=m
  354 : __trgt typ=t13s_s2 val=0j bnd=m
  355 : __trgt typ=t13s_s2 val=0j bnd=m
  356 : __trgt typ=t13s_s2 val=0j bnd=m
  357 : __trgt typ=t21s_s2 val=0j bnd=m
  358 : __trgt typ=t13s_s2 val=0j bnd=m
  359 : __trgt typ=t21s_s2 val=0j bnd=m
  360 : __trgt typ=t13s_s2 val=0j bnd=m
  361 : __trgt typ=t21s_s2 val=0j bnd=m
  362 : __trgt typ=t13s_s2 val=0j bnd=m
  363 : __trgt typ=t21s_s2 val=0j bnd=m
  364 : __trgt typ=t13s_s2 val=0j bnd=m
  365 : __trgt typ=t13s_s2 val=0j bnd=m
  366 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ffloor {
    #220 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x_low.28 var=25 stl=X off=12) inp ()  <39>;
    (x_low.29 var=25) deassign (x_low.28)  <40>;
    (x_high.32 var=26 stl=X off=13) inp ()  <43>;
    (x_high.33 var=26) deassign (x_high.32)  <44>;
    (__rd___sp.36 var=19) rd_res_reg (__R_SP.11 __sp.17)  <47>;
    (__ct_0S0.37 var=27) const ()  <48>;
    (__tmp.39 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0S0.37)  <50>;
    (__R_SP.40 var=12 __sp.41 var=18) wr_res_reg (__tmp.39 __sp.17)  <51>;
    (f64_add.867 var=306) const ()  <1127>;
    (__link.868 var=307) w32_jal_t21s_s2 (f64_add.867)  <1128>;
    (__ct_2281731484.923 var=330) const ()  <1218>;
    (__ct_2117592124.924 var=331) const ()  <1220>;
    call {
        (a_low.869 var=302 stl=X off=12) assign (__ct_2281731484.923)  <1129>;
        (a_high.870 var=303 stl=X off=13) assign (__ct_2117592124.924)  <1130>;
        (b_low.871 var=304 stl=X off=14) assign (x_low.29)  <1131>;
        (b_high.872 var=305 stl=X off=15) assign (x_high.33)  <1132>;
        (__link.873 var=307 stl=X off=1) assign (__link.868)  <1133>;
        (__tmp.874 var=309 stl=X off=10 __tmp.875 var=310 stl=X off=11) Ff64_add (__link.873 a_low.869 a_high.870 b_low.871 b_high.872)  <1134>;
        (__tmp.877 var=309) deassign (__tmp.874)  <1136>;
        (__tmp.879 var=310) deassign (__tmp.875)  <1138>;
    } #221 off=1
    #211 off=2
    (__ct_20.64 var=47) const ()  <75>;
    (__tmp.66 var=49) __sint__rs___sint___sint (x_high.33 __ct_20.64)  <77>;
    (__ct_2047.67 var=50) const ()  <78>;
    (__tmp.69 var=52) __sint__ad___sint___sint (__tmp.66 __ct_2047.67)  <80>;
    (j0.72 var=32) __sint__pl___sint___sint (__tmp.69 __ct_m1023.731)  <83>;
    (__ct_0.95 var=59) const ()  <107>;
    (__rd___sp.231 var=19) rd_res_reg (__R_SP.11 __sp.41)  <248>;
    (__ct_m1023.731 var=192) const ()  <833>;
    (f64_lt.835 var=282) const ()  <1039>;
    (__link.836 var=283) w32_jal_t21s_s2 (f64_lt.835)  <1040>;
    call {
        (a_low.838 var=278 stl=X off=11) assign (__ct_0.95)  <1042>;
        (a_high.839 var=279 stl=X off=12) assign (__ct_0.95)  <1043>;
        (b_low.840 var=280 stl=X off=13) assign (__tmp.877)  <1044>;
        (b_high.841 var=281 stl=X off=14) assign (__tmp.879)  <1045>;
        (__link.842 var=283 stl=X off=1) assign (__link.836)  <1046>;
        (__tmp.843 var=284 stl=X off=10) Ff64_lt (__link.842 a_low.838 a_high.839 b_low.840 b_high.841)  <1047>;
        (__tmp.844 var=284) deassign (__tmp.843)  <1048>;
    } #192 off=3
    #193 off=4
    (__ct_0s0.232 var=94) const ()  <249>;
    (__tmp.234 var=96) __Pvoid__pl___Pvoid___sint (__rd___sp.231 __ct_0s0.232)  <251>;
    (__ct_4294967295.439 var=128) const ()  <476>;
    (__trgt.984 var=365) const ()  <1382>;
    () void_br_bool_t13s_s2 (__tmp.987 __trgt.984)  <1383>;
    (__either.985 var=340) undefined ()  <1384>;
    (__tmp.987 var=58) bool__lt___sint___sint (j0.72 __ct_20.64)  <1387>;
    if {
        {
            () if_expr (__either.985)  <106>;
        } #5
        {
            #7 off=29
            (__tmp.97 var=61) bool__lt___sint___sint (j0.72 __ct_0.95)  <109>;
            (__trgt.963 var=352) const ()  <1346>;
            () void_br_bool_t13s_s2 (__tmp.97 __trgt.963)  <1347>;
            (__either.964 var=340) undefined ()  <1348>;
            if {
                {
                    () if_expr (__either.964)  <129>;
                } #9
                {
                    #258 off=40
                    (__trgt.952 var=345) const ()  <1327>;
                    () void_br_bool_t13s_s2 (__tmp.991 __trgt.952)  <1328>;
                    (__either.953 var=340) undefined ()  <1329>;
                    (__tmp.991 var=67) bool__eq___sint___sint (__tmp.844 __ct_0.95)  <1391>;
                    if {
                        {
                            () if_expr (__either.953)  <155>;
                        } #13
                        {
                        } #27 off=48
                        {
                            #256 off=41
                            (__trgt.949 var=343) const ()  <1322>;
                            () void_br_bool_t13s_s2 (__tmp.988 __trgt.949)  <1323>;
                            (__either.950 var=340) undefined ()  <1324>;
                            (__tmp.988 var=70) bool__ge___sint___sint (x_high.33 __ct_0.95)  <1388>;
                            if {
                                {
                                    () if_expr (__either.950)  <178>;
                                } #17
                                {
                                } #18 off=46
                                {
                                    #20 off=42
                                    (__ct_2147483647.166 var=73) const ()  <181>;
                                    (__tmp.168 var=75) __sint__ad___sint___sint (x_high.33 __ct_2147483647.166)  <183>;
                                    (__tmp.169 var=76) __sint__or___sint___sint (__tmp.168 x_low.29)  <184>;
                                    (__tmp.929 var=79) bool__eq___sint___sint (__tmp.169 __ct_0.95)  <1274>;
                                    (__trgt.946 var=341) const ()  <1317>;
                                    () void_br_bool_t13s_s2 (__tmp.929 __trgt.946)  <1318>;
                                    (__either.947 var=340) undefined ()  <1319>;
                                    if {
                                        {
                                            () if_expr (__either.947)  <207>;
                                        } #22
                                        {
                                        } #24 off=44
                                        {
                                            (__ct_m1074790400.192 var=80) const ()  <208>;
                                            (__trgt.948 var=342) const ()  <1320>;
                                            () void_j_t21s_s2 (__trgt.948)  <1321>;
                                        } #23 off=43
                                        {
                                            (i0.196 var=30) merge (x_high.33 __ct_m1074790400.192)  <212>;
                                            (i1.197 var=31) merge (x_low.29 __ct_0.95)  <213>;
                                        } #25
                                    } #21
                                    #260 off=45
                                    (__trgt.951 var=344) const ()  <1325>;
                                    () void_j_t21s_s2 (__trgt.951)  <1326>;
                                } #19
                                {
                                    (i0.198 var=30) merge (__ct_0.95 i0.196)  <214>;
                                    (i1.199 var=31) merge (__ct_0.95 i1.197)  <215>;
                                } #26
                            } #16
                            #261 off=47
                            (__trgt.954 var=346) const ()  <1330>;
                            () void_j_t21s_s2 (__trgt.954)  <1331>;
                        } #14
                        {
                            (i0.200 var=30) merge (x_high.33 i0.198)  <216>;
                            (i1.201 var=31) merge (x_low.29 i1.199)  <217>;
                        } #28
                    } #12
                } #10
                {
                    #30 off=30
                    (__ct_1048575.202 var=84) const ()  <218>;
                    (i.204 var=33) __uint__rs___uint___sint (__ct_1048575.202 j0.72)  <220>;
                    (__tmp.206 var=88) __uint__ad___uint___uint (x_high.33 i.204)  <222>;
                    (__tmp.208 var=90) __uint__or___uint___uint (__tmp.206 x_low.29)  <224>;
                    (__tmp.211 var=93) bool__eq___uint___uint (__tmp.208 __ct_0.95)  <227>;
                    (__trgt.955 var=347) const ()  <1332>;
                    () void_br_bool_t13s_s2 (__tmp.211 __trgt.955)  <1333>;
                    (__either.956 var=340) undefined ()  <1334>;
                    if {
                        {
                            () if_expr (__either.956)  <247>;
                            () chess_rear_then ()  <1335>;
                        } #32
                        {
                            (__R_SP.235 var=12 __sp.236 var=18) wr_res_reg (__tmp.234 __sp.41)  <252>;
                            () void___rts_jr_w32 (__la.20)  <253>;
                            (__rt_low.238 var=22 stl=X off=10) assign (x_low.29)  <255>;
                            () out (__rt_low.238)  <256>;
                            (__rt_high.240 var=23 stl=X off=11) assign (x_high.33)  <258>;
                            () out (__rt_high.240)  <259>;
                            () sink (__sp.236)  <267>;
                        } #35 off=32 nxt=-2
                        {
                        } #36 off=31
                        {
                        } #37
                    } #31
                    #263 off=33
                    (__trgt.960 var=350) const ()  <1341>;
                    () void_br_bool_t13s_s2 (__tmp.992 __trgt.960)  <1342>;
                    (__either.961 var=340) undefined ()  <1343>;
                    (__tmp.992 var=67) bool__eq___sint___sint (__tmp.844 __ct_0.95)  <1392>;
                    if {
                        {
                            () if_expr (__either.961)  <331>;
                        } #40
                        {
                        } #49 off=38
                        {
                            #257 off=34
                            (__trgt.957 var=348) const ()  <1336>;
                            () void_br_bool_t13s_s2 (__tmp.989 __trgt.957)  <1337>;
                            (__either.958 var=340) undefined ()  <1338>;
                            (__tmp.989 var=70) bool__ge___sint___sint (x_high.33 __ct_0.95)  <1389>;
                            if {
                                {
                                    () if_expr (__either.958)  <354>;
                                } #44
                                {
                                } #46 off=36
                                {
                                    (__ct_1048576.329 var=107) const ()  <356>;
                                    (__tmp.331 var=109) __uint__rs___uint___sint (__ct_1048576.329 j0.72)  <358>;
                                    (__tmp.332 var=110) __uint__pl___uint___uint (x_high.33 __tmp.331)  <359>;
                                    (__trgt.959 var=349) const ()  <1339>;
                                    () void_j_t21s_s2 (__trgt.959)  <1340>;
                                } #45 off=35
                                {
                                    (i0.334 var=325) merge (x_high.33 __tmp.332)  <361>;
                                } #47
                            } #43
                            #138 off=37
                            (__tmp.337 var=114) __uint__ad___uint___uint (i0.334 __tmp.770)  <364>;
                            (__tmp.770 var=113) __uint__er___uint___uint (i.204 __ct_4294967295.439)  <907>;
                            (__trgt.962 var=351) const ()  <1344>;
                            () void_j_t21s_s2 (__trgt.962)  <1345>;
                        } #41
                        {
                            (i0.341 var=326) merge (x_high.33 __tmp.337)  <368>;
                            (i1.342 var=31) merge (x_low.29 __ct_0.95)  <369>;
                        } #50
                    } #39
                    #264 off=39
                    (__trgt.965 var=353) const ()  <1349>;
                    () void_j_t21s_s2 (__trgt.965)  <1350>;
                } #29
                {
                    (i0.350 var=30) merge (i0.200 i0.341)  <377>;
                    (i1.352 var=31) merge (i1.201 i1.342)  <379>;
                } #51
            } #8
        } #6
        {
            #143 off=5
            (__ct_51.362 var=118) const ()  <389>;
            (__tmp.774 var=120) bool__lt___sint___sint (__ct_51.362 j0.72)  <914>;
            (__trgt.982 var=364) const ()  <1378>;
            () void_br_bool_t13s_s2 (__tmp.774 __trgt.982)  <1379>;
            (__either.983 var=340) undefined ()  <1380>;
            if {
                {
                    () if_expr (__either.983)  <411>;
                    () chess_rear_then ()  <1381>;
                } #55
                {
                    #57 off=22
                    (__ct_1024.384 var=121) const ()  <412>;
                    (__tmp.933 var=123) bool__ne___sint___sint (j0.72 __ct_1024.384)  <1278>;
                    (__trgt.966 var=354) const ()  <1351>;
                    () void_br_bool_t13s_s2 (__tmp.933 __trgt.966)  <1352>;
                    (__either.967 var=340) undefined ()  <1353>;
                    if {
                        {
                            () if_expr (__either.967)  <434>;
                        } #59
                        {
                        } #61 off=26
                        {
                            #253 off=23
                            (__R_SP.938 var=12 __sp.939 var=18) wr_res_reg (__tmp.234 __sp.41)  <1305>;
                            () void_j_t21s_s2 (f64_add.867)  <1314>;
                            call {
                                (a_low.890 var=302 stl=X off=12) assign (x_low.29)  <1152>;
                                (a_high.891 var=303 stl=X off=13) assign (x_high.33)  <1153>;
                                (b_low.892 var=304 stl=X off=14) assign (x_low.29)  <1154>;
                                (b_high.893 var=305 stl=X off=15) assign (x_high.33)  <1155>;
                                (__la.894 var=20 stl=X off=1) assign (__la.20)  <1156>;
                                (__tmp.895 var=309 stl=X off=10 __tmp.896 var=310 stl=X off=11) Ff64_add (__la.894 a_low.890 a_high.891 b_low.892 b_high.893)  <1157>;
                                (__tmp.898 var=309) deassign (__tmp.895)  <1159>;
                                (__tmp.900 var=310) deassign (__tmp.896)  <1161>;
                            } #230 off=24
                            #254 off=25 nxt=-2
                            (__rt_low.940 var=22 stl=X off=10) assign (__tmp.898)  <1307>;
                            () out (__rt_low.940)  <1308>;
                            (__rt_high.941 var=23 stl=X off=11) assign (__tmp.900)  <1309>;
                            () out (__rt_high.941)  <1310>;
                            () sink (__sp.939)  <1311>;
                        } #60
                        {
                        } #62
                    } #58
                    #64 off=27 nxt=-2
                    (__R_SP.412 var=12 __sp.413 var=18) wr_res_reg (__tmp.234 __sp.41)  <441>;
                    () void___rts_jr_w32 (__la.20)  <442>;
                    (__rt_low.415 var=22 stl=X off=10) assign (x_low.29)  <444>;
                    () out (__rt_low.415)  <445>;
                    (__rt_high.417 var=23 stl=X off=11) assign (x_high.33)  <447>;
                    () out (__rt_high.417)  <448>;
                    () sink (__sp.413)  <456>;
                    (i0.427 var=30) never ()  <464>;
                    (i1.429 var=31) never ()  <466>;
                } #56
                {
                    #66 off=6
                    (__tmp.443 var=132) __sint__pl___sint___sint (j0.72 __ct_m20.732)  <480>;
                    (i.444 var=33) __uint__rs___uint___sint (__ct_4294967295.439 __tmp.443)  <481>;
                    (__tmp.446 var=135) __uint__ad___uint___uint (x_low.29 i.444)  <483>;
                    (__tmp.449 var=138) bool__eq___uint___uint (__tmp.446 __ct_0.95)  <486>;
                    (__ct_m20.732 var=193) const ()  <835>;
                    (__trgt.968 var=355) const ()  <1354>;
                    () void_br_bool_t13s_s2 (__tmp.449 __trgt.968)  <1355>;
                    (__either.969 var=340) undefined ()  <1356>;
                    if {
                        {
                            () if_expr (__either.969)  <506>;
                            () chess_rear_then ()  <1357>;
                        } #68
                        {
                            (__R_SP.473 var=12 __sp.474 var=18) wr_res_reg (__tmp.234 __sp.41)  <511>;
                            () void___rts_jr_w32 (__la.20)  <512>;
                            (__rt_low.476 var=22 stl=X off=10) assign (x_low.29)  <514>;
                            () out (__rt_low.476)  <515>;
                            (__rt_high.478 var=23 stl=X off=11) assign (x_high.33)  <517>;
                            () out (__rt_high.478)  <518>;
                            () sink (__sp.474)  <526>;
                        } #71 off=8 nxt=-2
                        {
                        } #72 off=7
                        {
                        } #73
                    } #67
                    #268 off=9
                    (__trgt.979 var=362) const ()  <1373>;
                    () void_br_bool_t13s_s2 (__tmp.993 __trgt.979)  <1374>;
                    (__either.980 var=340) undefined ()  <1375>;
                    (__tmp.993 var=67) bool__eq___sint___sint (__tmp.844 __ct_0.95)  <1393>;
                    if {
                        {
                            () if_expr (__either.980)  <590>;
                        } #76
                        {
                        } #98 off=20
                        {
                            #259 off=10
                            (__trgt.976 var=360) const ()  <1368>;
                            () void_br_bool_t13s_s2 (__tmp.990 __trgt.976)  <1369>;
                            (__either.977 var=340) undefined ()  <1370>;
                            (__tmp.990 var=70) bool__ge___sint___sint (x_high.33 __ct_0.95)  <1390>;
                            if {
                                {
                                    () if_expr (__either.977)  <613>;
                                } #80
                                {
                                } #95 off=18
                                {
                                    #82 off=11
                                    (__tmp.568 var=153) bool__eq___sint___sint (j0.72 __ct_20.64)  <616>;
                                    (__ct_1.588 var=154) const ()  <637>;
                                    (i0.590 var=30) __sint__pl___sint___sint (x_high.33 __ct_1.588)  <639>;
                                    (__trgt.973 var=358) const ()  <1363>;
                                    () void_br_bool_t13s_s2 (__tmp.568 __trgt.973)  <1364>;
                                    (__either.974 var=340) undefined ()  <1365>;
                                    if {
                                        {
                                            () if_expr (__either.974)  <636>;
                                        } #84
                                        {
                                        } #85 off=16
                                        {
                                            #87 off=12
                                            (__ct_52.594 var=160) const ()  <643>;
                                            (__tmp.596 var=162) __sint__mi___sint___sint (__ct_52.594 j0.72)  <645>;
                                            (__tmp.597 var=163) __uint__ls___uint___sint (__ct_1.588 __tmp.596)  <646>;
                                            (j.598 var=34) __uint__pl___uint___uint (x_low.29 __tmp.597)  <647>;
                                            (__tmp.600 var=166) bool__lt___uint___uint (j.598 x_low.29)  <649>;
                                            (__trgt.970 var=356) const ()  <1358>;
                                            () void_br_bool_t13s_s2 (__tmp.600 __trgt.970)  <1359>;
                                            (__either.971 var=340) undefined ()  <1360>;
                                            if {
                                                {
                                                    () if_expr (__either.971)  <669>;
                                                } #89
                                                {
                                                } #105 off=14
                                                {
                                                    (__trgt.972 var=357) const ()  <1361>;
                                                    () void_j_t21s_s2 (__trgt.972)  <1362>;
                                                } #91 off=13
                                                {
                                                    (i0.623 var=30) merge (i0.590 x_high.33)  <673>;
                                                } #92
                                            } #88
                                            #266 off=15
                                            (__trgt.975 var=359) const ()  <1366>;
                                            () void_j_t21s_s2 (__trgt.975)  <1367>;
                                        } #86
                                        {
                                            (i0.625 var=30) merge (i0.590 i0.623)  <675>;
                                            (i1.626 var=327) merge (x_low.29 j.598)  <676>;
                                        } #94
                                    } #83
                                    #267 off=17
                                    (__trgt.978 var=361) const ()  <1371>;
                                    () void_j_t21s_s2 (__trgt.978)  <1372>;
                                } #81
                                {
                                    (i0.628 var=30) merge (x_high.33 i0.625)  <678>;
                                    (i1.629 var=328) merge (x_low.29 i1.626)  <679>;
                                } #96
                            } #79
                            #146 off=19
                            (__tmp.633 var=173) __uint__ad___uint___uint (i1.629 __tmp.778)  <683>;
                            (__tmp.778 var=172) __uint__er___uint___uint (i.444 __ct_4294967295.439)  <921>;
                            (__trgt.981 var=363) const ()  <1376>;
                            () void_j_t21s_s2 (__trgt.981)  <1377>;
                        } #77
                        {
                            (i0.635 var=30) merge (x_high.33 i0.628)  <685>;
                            (i1.636 var=329) merge (x_low.29 __tmp.633)  <686>;
                        } #99
                    } #75
                } #65
                {
                    (i0.645 var=30) merge (i0.427 i0.635)  <695>;
                    (i1.647 var=31) merge (i1.429 i1.636)  <697>;
                } #100
            } #54
            #270 off=28
            (__trgt.986 var=366) const ()  <1385>;
            () void_j_t21s_s2 (__trgt.986)  <1386>;
        } #52
        {
            (i0.664 var=30) merge (i0.350 i0.645)  <714>;
            (i1.666 var=31) merge (i1.352 i1.647)  <716>;
        } #101
    } #4
    #104 off=51 nxt=-2
    (__R_SP.694 var=12 __sp.695 var=18) wr_res_reg (__tmp.234 __sp.41)  <744>;
    () void___rts_jr_w32 (__la.20)  <745>;
    (__rt_low.697 var=22 stl=X off=10) assign (i1.666)  <747>;
    () out (__rt_low.697)  <748>;
    (__rt_high.699 var=23 stl=X off=11) assign (i0.664)  <750>;
    () out (__rt_high.699)  <751>;
    () sink (__sp.695)  <759>;
} #0
0 : 'src/math.c';
----------
0 : (0,235:0,0);
4 : (0,243:4,7);
6 : (0,243:14,8);
7 : (0,244:13,8);
8 : (0,244:8,8);
10 : (0,244:17,9);
12 : (0,245:12,9);
14 : (0,245:27,10);
16 : (0,246:16,10);
18 : (0,246:26,11);
19 : (0,247:21,14);
20 : (0,247:44,14);
21 : (0,247:21,14);
23 : (0,248:20,15);
24 : (0,247:21,19);
27 : (0,245:12,26);
29 : (0,250:15,31);
30 : (0,252:26,32);
31 : (0,252:12,32);
35 : (0,252:31,33);
36 : (0,252:12,36);
39 : (0,253:12,39);
41 : (0,253:27,40);
43 : (0,254:16,40);
45 : (0,254:28,41);
46 : (0,254:16,43);
49 : (0,253:12,50);
52 : (0,258:11,58);
54 : (0,258:11,58);
56 : (0,258:22,59);
57 : (0,259:13,59);
58 : (0,259:8,59);
60 : (0,260:13,60);
61 : (0,259:22,63);
64 : (0,259:8,67);
65 : (0,261:11,71);
66 : (0,263:17,72);
67 : (0,263:8,72);
71 : (0,263:22,73);
72 : (0,263:8,76);
75 : (0,264:8,79);
77 : (0,264:23,80);
79 : (0,265:12,80);
81 : (0,265:21,81);
82 : (0,266:21,81);
83 : (0,266:16,81);
85 : (0,266:29,82);
86 : (0,267:21,84);
87 : (0,269:24,85);
88 : (0,269:20,85);
91 : (0,269:20,88);
95 : (0,265:12,97);
98 : (0,264:8,103);
104 : (0,277:4,121);
138 : (0,255:19,46);
143 : (0,258:17,58);
146 : (0,273:15,100);
192 : (0,245:21,9);
193 : (0,245:21,9);
211 : (0,245:21,9);
220 : (0,245:19,9);
221 : (0,245:19,9);
230 : (0,259:30,60);
253 : (0,259:8,67);
254 : (0,259:8,67);
----------
47 : (0,235:7,0);
48 : (0,235:7,0);
50 : (0,235:7,0);
51 : (0,235:7,0);
75 : (0,242:15,0);
77 : (0,242:13,6);
78 : (0,242:19,0);
80 : (0,242:18,6);
83 : (0,242:25,6);
106 : (0,243:4,7);
107 : (0,244:14,0);
109 : (0,244:13,8);
129 : (0,244:8,8);
155 : (0,245:12,9);
178 : (0,246:16,10);
181 : (0,247:29,0);
183 : (0,247:28,14);
184 : (0,247:40,14);
207 : (0,247:21,14);
208 : (0,248:24,0);
212 : (0,247:21,21);
213 : (0,247:21,21);
214 : (0,246:16,23);
215 : (0,246:16,23);
216 : (0,245:12,28);
217 : (0,245:12,28);
218 : (0,251:16,0);
220 : (0,251:39,31);
222 : (0,252:19,32);
224 : (0,252:22,32);
227 : (0,252:26,32);
247 : (0,252:12,32);
248 : (0,252:31,0);
249 : (0,252:31,0);
251 : (0,252:31,0);
252 : (0,252:31,33);
253 : (0,252:31,33);
255 : (0,252:38,0);
258 : (0,252:38,0);
331 : (0,253:12,39);
354 : (0,254:16,40);
356 : (0,254:31,0);
358 : (0,254:54,41);
359 : (0,254:28,41);
361 : (0,254:16,45);
364 : (0,255:19,46);
368 : (0,253:12,52);
369 : (0,253:12,52);
377 : (0,244:8,55);
379 : (0,244:8,55);
389 : (0,258:18,0);
411 : (0,258:11,58);
412 : (0,259:15,0);
434 : (0,259:8,59);
441 : (0,259:8,67);
442 : (0,259:8,67);
444 : (0,259:8,0);
447 : (0,259:8,0);
476 : (0,262:13,0);
480 : (0,262:42,71);
481 : (0,262:37,71);
483 : (0,263:14,72);
486 : (0,263:17,72);
506 : (0,263:8,72);
511 : (0,263:22,73);
512 : (0,263:22,73);
514 : (0,263:29,0);
517 : (0,263:29,0);
590 : (0,264:8,79);
613 : (0,265:12,80);
616 : (0,266:21,81);
636 : (0,266:16,81);
637 : (0,266:31,0);
639 : (0,266:29,82);
643 : (0,268:43,0);
645 : (0,268:45,84);
646 : (0,268:40,84);
647 : (0,268:26,84);
649 : (0,269:24,85);
669 : (0,269:20,85);
673 : (0,269:20,90);
675 : (0,266:16,94);
676 : (0,266:16,94);
678 : (0,265:12,99);
679 : (0,265:12,99);
683 : (0,273:15,100);
685 : (0,264:8,105);
686 : (0,264:8,105);
695 : (0,258:11,108);
697 : (0,258:11,108);
714 : (0,243:4,110);
716 : (0,243:4,110);
744 : (0,277:4,121);
745 : (0,277:4,121);
747 : (0,277:11,0);
750 : (0,277:11,0);
833 : (0,242:25,0);
835 : (0,262:42,0);
907 : (0,255:23,46);
914 : (0,258:17,58);
921 : (0,273:19,100);
1039 : (0,245:21,0);
1040 : (0,245:21,9);
1042 : (0,245:21,9);
1043 : (0,245:21,9);
1044 : (0,245:21,9);
1045 : (0,245:21,9);
1046 : (0,245:21,9);
1047 : (0,245:21,9);
1048 : (0,245:21,9);
1127 : (0,245:19,0);
1128 : (0,245:19,9);
1129 : (0,245:19,9);
1130 : (0,245:19,9);
1131 : (0,245:19,9);
1132 : (0,245:19,9);
1133 : (0,245:19,9);
1134 : (0,245:19,9);
1136 : (0,245:19,9);
1138 : (0,245:19,9);
1152 : (0,259:30,60);
1153 : (0,259:30,60);
1154 : (0,259:30,60);
1155 : (0,259:30,60);
1156 : (0,259:30,60);
1157 : (0,259:30,60);
1159 : (0,259:30,60);
1161 : (0,259:30,60);
1218 : (0,245:15,0);
1220 : (0,245:15,0);
1274 : (0,247:44,14);
1278 : (0,259:13,59);
1305 : (0,259:8,67);
1307 : (0,259:8,0);
1309 : (0,259:8,0);
1314 : (0,259:30,60);
1318 : (0,247:21,14);
1323 : (0,246:16,10);
1328 : (0,245:12,9);
1333 : (0,252:12,32);
1337 : (0,254:16,40);
1342 : (0,253:12,39);
1347 : (0,244:8,8);
1352 : (0,259:8,59);
1355 : (0,263:8,72);
1359 : (0,269:20,85);
1364 : (0,266:16,81);
1369 : (0,265:12,80);
1374 : (0,264:8,79);
1379 : (0,258:11,58);
1383 : (0,243:4,7);

