
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 16:36:23 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  size_t strcspn(const char *, const char *)
Fstrcspn : user_defined, called {
    fnm : "strcspn" 'size_t strcspn(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
}
****
***/

[
    0 : strcspn typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=size_t__
   22 : s1 typ=w32 bnd=p tref=__P__cchar__
   23 : s2 typ=w32 bnd=p tref=__P__cchar__
   24 : __ct_0S0 typ=w32 val=0S0 bnd=m
   26 : __tmp typ=w32 bnd=m
   27 : r1 typ=w32 bnd=m tref=__P__cchar__
   28 : c typ=w08 bnd=m lscp=9 tref=__cchar__
   30 : r2 typ=w32 bnd=m lscp=9 tref=__P__cchar__
   31 : d typ=w08 bnd=m lscp=9 tref=__cchar__
   35 : __ct_1 typ=w32 val=1f bnd=m
   45 : __tmp typ=bool bnd=m
   51 : __ct_0s0 typ=w32 val=0s0 bnd=m
   53 : __tmp typ=w32 bnd=m
   55 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   57 : __tmp typ=bool bnd=m
   68 : __ct_m1 typ=w32 val=-1f bnd=m
   73 : __iv0_r1 typ=w32 bnd=m
   75 : __shv_r2 typ=w32 bnd=m
   76 : __shv_r1 typ=w32 bnd=m
   83 : __true typ=bool val=1f bnd=m
   85 : __either typ=bool bnd=m
   86 : __trgt typ=t13s_s2 val=0j bnd=m
   87 : __trgt typ=t13s_s2 val=0j bnd=m
   88 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrcspn {
    #36 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (s1.23 var=22 stl=X off=11) inp ()  <34>;
    (s1.24 var=22) deassign (s1.23)  <35>;
    (s2.26 var=23 stl=X off=12) inp ()  <37>;
    (s2.27 var=23) deassign (s2.26)  <38>;
    (__rd___sp.29 var=19) rd_res_reg (__R_SP.11 __sp.17)  <40>;
    (__ct_0S0.30 var=24) const ()  <41>;
    (__tmp.32 var=26) __Pvoid__pl___Pvoid___sint (__rd___sp.29 __ct_0S0.30)  <43>;
    (__R_SP.33 var=12 __sp.34 var=18) wr_res_reg (__tmp.32 __sp.17)  <44>;
    (__ct_1.77 var=35) const ()  <90>;
    (__rd___sp.127 var=19) rd_res_reg (__R_SP.11 __sp.34)  <141>;
    (__ct_0s0.128 var=51) const ()  <142>;
    (__tmp.130 var=53) __Pvoid__pl___Pvoid___sint (__rd___sp.127 __ct_0s0.128)  <144>;
    (__ct_0.167 var=55) const ()  <188>;
    (__ct_m1.285 var=68) const ()  <297>;
    (__trgt.305 var=86) const ()  <338>;
    (__trgt.307 var=87) const ()  <343>;
    (__trgt.309 var=88) const ()  <346>;
    do {
        {
            (r1.67 var=27) entry (r1.218 s1.24)  <80>;
            (__iv0_r1.288 var=73) entry (__iv0_r1.289 __ct_m1.285)  <301>;
        } #8
        {
            #10 off=1
            (c.80 var=28) load (__M_DMb.2 r1.67 __extDMb.16)  <93>;
            (__iv0_r1.294 var=73) __Pvoid__pl___Pvoid___sint (__iv0_r1.288 __ct_1.77)  <306>;
            (__shv_r1.298 var=76) __Pvoid__pl___Pvoid___sint (r1.67 __ct_1.77)  <310>;
            do {
                {
                    (r2.94 var=30) entry (r2.192 s2.27)  <107>;
                } #12
                {
                    #14 off=2
                    (d.102 var=31) load (__M_DMb.2 r2.94 __extDMb.16)  <115>;
                    (__tmp.105 var=45) bool__eq___sint___sint (c.80 d.102)  <118>;
                    (__shv_r2.297 var=75) __Pvoid__pl___Pvoid___sint (r2.94 __ct_1.77)  <309>;
                    () void_br_bool_t13s_s2 (__tmp.105 __trgt.305)  <339>;
                    (__either.306 var=85) undefined ()  <340>;
                    if {
                        {
                            () if_expr (__either.306)  <135>;
                            () chess_frequent_else ()  <341>;
                            () chess_rear_then ()  <342>;
                        } #16
                        {
                            (__R_SP.131 var=12 __sp.132 var=18) wr_res_reg (__tmp.130 __sp.34)  <145>;
                            () void___rts_jr_w32 (__la.20)  <146>;
                            (__rt.133 var=21 stl=X off=10) assign (__iv0_r1.294)  <147>;
                            () out (__rt.133)  <148>;
                            () sink (__sp.132)  <154>;
                        } #20 off=4 nxt=-2
                        {
                        } #21 off=3
                        {
                        } #22
                    } #15
                    #23 off=5
                    (__tmp.169 var=57) bool__ne___sint___sint (d.102 __ct_0.167)  <190>;
                    () void_br_bool_t13s_s2 (__tmp.169 __trgt.307)  <344>;
                    (__either.308 var=85) undefined ()  <345>;
                } #13
                {
                    () while_expr (__either.308)  <191>;
                    (r2.192 var=30 r2.193 var=30) exit (__shv_r2.297)  <203>;
                } #24
            } #11
            #42 off=6
            () void_j_t21s_s2 (__trgt.309)  <347>;
            (__true.310 var=83) const ()  <348>;
        } #9
        {
            () while_expr (__true.310)  <210>;
            (r1.218 var=27 r1.219 var=27) exit (__shv_r1.298)  <218>;
            (__iv0_r1.289 var=73 __iv0_r1.290 var=73) exit (__iv0_r1.294)  <302>;
        } #26
    } #7 rng=[1,2147483647]
    #34 off=7 nxt=-4
    () sink (__sp.34)  <291>;
} #0
0 : 'src/string.c';
----------
0 : (0,160:0,0);
7 : (0,164:4,3);
9 : (0,164:14,3);
10 : (0,167:8,8);
11 : (0,172:10,8);
13 : (0,168:11,8);
14 : (0,170:18,11);
15 : (0,170:12,11);
20 : (0,171:16,12);
21 : (0,170:12,15);
23 : (0,172:10,19);
----------
40 : (0,160:7,0);
41 : (0,160:7,0);
43 : (0,160:7,0);
44 : (0,160:7,0);
80 : (0,164:4,3);
90 : (0,165:20,0);
93 : (0,165:17,5);
107 : (0,172:10,8);
115 : (0,169:16,10);
118 : (0,170:18,11);
135 : (0,170:12,11);
141 : (0,171:16,0);
142 : (0,171:16,0);
144 : (0,171:16,0);
145 : (0,171:16,12);
146 : (0,171:16,12);
147 : (0,171:30,0);
188 : (0,172:10,0);
190 : (0,172:10,19);
191 : (0,172:10,19);
203 : (0,172:10,19);
210 : (0,164:4,21);
218 : (0,164:4,21);
309 : (0,169:19,0);
310 : (0,165:20,0);
339 : (0,170:12,11);
344 : (0,172:10,19);
347 : (0,164:4,21);

