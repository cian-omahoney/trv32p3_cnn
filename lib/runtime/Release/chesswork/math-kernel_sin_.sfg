
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:58:01 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! static double kernel_sin(double, double, int)
Fkernel_sin : user_defined, called {
    fnm : "kernel_sin" 'double kernel_sin(double, double, int)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] X[16] );
    frm : ( );
}
****
!!  long f64_to_i32_r_minMag(float64_t, bool)
Ff64_to_i32_r_minMag : user_defined, called {
    fnm : "f64_to_i32_r_minMag" 'long f64_to_i32_r_minMag(float64_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
}
!!  float64_t f64_mul(float64_t, float64_t)
Ff64_mul : user_defined, called {
    fnm : "f64_mul" 'float64_t f64_mul(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_sub(float64_t, float64_t)
Ff64_sub : user_defined, called {
    fnm : "f64_sub" 'float64_t f64_sub(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : kernel_sin typ=u08 bnd=i stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   22 : __rt_low typ=w32 bnd=m tref=__uint__
   23 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : x_low typ=w32 bnd=m tref=__uint__
   26 : x_high typ=w32 bnd=m tref=__uint__
   28 : y_low typ=w32 bnd=m tref=__uint__
   29 : y_high typ=w32 bnd=m tref=__uint__
   30 : iy typ=w32 bnd=p tref=__sint__
   31 : __ct_0S0 typ=w32 val=0S0 bnd=m
   33 : __tmp typ=w32 bnd=m
   34 : ix typ=w32 bnd=m tref=int32_t__
   43 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   46 : __ct_1044381696 typ=t20s_rp12 val=254976f bnd=m
   48 : __tmp typ=bool bnd=m
   49 : __tmp typ=w32 bnd=m
   50 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   52 : __tmp typ=bool bnd=m
   53 : __ct_0s0 typ=w32 val=0s0 bnd=m
   55 : __tmp typ=w32 bnd=m
   78 : __tmp typ=bool bnd=m
  142 : a_low typ=w32 bnd=m tref=__uint__
  143 : a_high typ=w32 bnd=m tref=__uint__
  144 : __tmp typ=w32 bnd=m
  145 : f64_to_i32_r_minMag typ=t21s_s2 val=0r bnd=m
  146 : __link typ=w32 bnd=m
  148 : __ct_1 typ=w32 val=1f bnd=m
  153 : a_low typ=w32 bnd=m tref=__uint__
  154 : a_high typ=w32 bnd=m tref=__uint__
  155 : b_low typ=w32 bnd=m tref=__uint__
  156 : b_high typ=w32 bnd=m tref=__uint__
  157 : f64_mul typ=t21s_s2 val=0r bnd=m
  158 : __link typ=w32 bnd=m
  160 : __tmp typ=w32 bnd=m
  161 : __tmp typ=w32 bnd=m
  168 : a_low typ=w32 bnd=m tref=__uint__
  169 : a_high typ=w32 bnd=m tref=__uint__
  170 : b_low typ=w32 bnd=m tref=__uint__
  171 : b_high typ=w32 bnd=m tref=__uint__
  172 : f64_add typ=t21s_s2 val=0r bnd=m
  173 : __link typ=w32 bnd=m
  175 : __tmp typ=w32 bnd=m
  176 : __tmp typ=w32 bnd=m
  193 : a_low typ=w32 bnd=m tref=__uint__
  194 : a_high typ=w32 bnd=m tref=__uint__
  195 : b_low typ=w32 bnd=m tref=__uint__
  196 : b_high typ=w32 bnd=m tref=__uint__
  197 : f64_sub typ=t21s_s2 val=0r bnd=m
  198 : __link typ=w32 bnd=m
  200 : __tmp typ=w32 bnd=m
  201 : __tmp typ=w32 bnd=m
  210 : __ct_1523570044 typ=w32 val=1523570044f bnd=m
  211 : __ct_1038473530 typ=w32 val=1038473530f bnd=m
  212 : __ct_2318114027 typ=w32 val=-1976853269f bnd=m
  213 : __ct_3193628134 typ=w32 val=-1101339162f bnd=m
  214 : __ct_1471282813 typ=w32 val=1471282813f bnd=m
  215 : __ct_1053236707 typ=w32 val=1053236707f bnd=m
  216 : __ct_432103893 typ=w32 val=432103893f bnd=m
  217 : __ct_3207201184 typ=w32 val=-1087766112f bnd=m
  218 : __ct_286324902 typ=w32 val=286324902f bnd=m
  219 : __ct_1065423121 typ=w32 val=1065423121f bnd=m
  220 : __ct_1431655753 typ=w32 val=1431655753f bnd=m
  221 : __ct_3217380693 typ=w32 val=-1077586603f bnd=m
  223 : __ct_1071644672 typ=t20s_rp12 val=261632f bnd=m
  232 : __either typ=bool bnd=m
  233 : __trgt typ=t13s_s2 val=0j bnd=m
  234 : __trgt typ=t13s_s2 val=0j bnd=m
  235 : __trgt typ=t21s_s2 val=0j bnd=m
  236 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fkernel_sin {
    #55 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x_low.28 var=25 stl=X off=12) inp ()  <39>;
    (x_low.29 var=25) deassign (x_low.28)  <40>;
    (x_high.32 var=26 stl=X off=13) inp ()  <43>;
    (x_high.33 var=26) deassign (x_high.32)  <44>;
    (y_low.37 var=28 stl=X off=14) inp ()  <48>;
    (y_low.38 var=28) deassign (y_low.37)  <49>;
    (y_high.41 var=29 stl=X off=15) inp ()  <52>;
    (y_high.42 var=29) deassign (y_high.41)  <53>;
    (iy.45 var=30 stl=X off=16) inp ()  <56>;
    (iy.46 var=30) deassign (iy.45)  <57>;
    (__rd___sp.48 var=19) rd_res_reg (__R_SP.11 __sp.17)  <59>;
    (__ct_0S0.49 var=31) const ()  <60>;
    (__tmp.51 var=33) __Pvoid__pl___Pvoid___sint (__rd___sp.48 __ct_0S0.49)  <62>;
    (__R_SP.52 var=12 __sp.53 var=18) wr_res_reg (__tmp.51 __sp.17)  <63>;
    (__ct_2147483647.67 var=43) const ()  <78>;
    (ix.69 var=34) __sint__ad___sint___sint (x_high.33 __ct_2147483647.67)  <80>;
    (__ct_1044381696.70 var=46) const ()  <81>;
    (__ct_0.89 var=50) const ()  <101>;
    (__rd___sp.107 var=19) rd_res_reg (__R_SP.11 __sp.53)  <120>;
    (__ct_0s0.108 var=53) const ()  <121>;
    (__tmp.110 var=55) __Pvoid__pl___Pvoid___sint (__rd___sp.107 __ct_0s0.108)  <123>;
    (__tmp.798 var=48) bool__ge___sint___sint (ix.69 __ct_1044381696.70)  <1048>;
    (__trgt.811 var=234) const ()  <1096>;
    () void_br_bool_t13s_s2 (__tmp.798 __trgt.811)  <1097>;
    (__either.812 var=232) undefined ()  <1098>;
    if {
        {
            () if_expr (__either.812)  <99>;
        } #5
        {
        } #15 off=7
        {
            #63 off=1
            (__ct_1.306 var=148) const ()  <424>;
            (f64_to_i32_r_minMag.307 var=145) const ()  <425>;
            (__link.308 var=146) w32_jal_t21s_s2 (f64_to_i32_r_minMag.307)  <426>;
            call {
                (a_low.309 var=142 stl=X off=11) assign (x_low.29)  <427>;
                (a_high.310 var=143 stl=X off=12) assign (x_high.33)  <428>;
                (__tmp.311 var=144 stl=X off=13) assign (__ct_1.306)  <429>;
                (__link.312 var=146 stl=X off=1) assign (__link.308)  <430>;
                (__tmp.313 var=49 stl=X off=10) Ff64_to_i32_r_minMag (__link.312 a_low.309 a_high.310 __tmp.311)  <431>;
                (__tmp.314 var=49) deassign (__tmp.313)  <432>;
            } #64 off=2
            #60 off=3
            (__tmp.91 var=52) bool__eq___sint___sint (__tmp.314 __ct_0.89)  <103>;
            (__trgt.809 var=233) const ()  <1092>;
            () void_br_bool_t13s_s2 (__tmp.91 __trgt.809)  <1093>;
            (__either.810 var=232) undefined ()  <1094>;
            if {
                {
                    () if_expr (__either.810)  <119>;
                    () chess_rear_then ()  <1095>;
                } #9
                {
                    (__R_SP.111 var=12 __sp.112 var=18) wr_res_reg (__tmp.110 __sp.53)  <124>;
                    () void___rts_jr_w32 (__la.20)  <125>;
                    (__rt_low.114 var=22 stl=X off=10) assign (x_low.29)  <127>;
                    () out (__rt_low.114)  <128>;
                    (__rt_high.116 var=23 stl=X off=11) assign (x_high.33)  <130>;
                    () out (__rt_high.116)  <131>;
                    () sink (__sp.112)  <141>;
                } #12 off=5 nxt=-2
                {
                } #13 off=4
                {
                } #14
            } #8
            #235 off=6
            (__trgt.813 var=235) const ()  <1099>;
            () void_j_t21s_s2 (__trgt.813)  <1100>;
        } #6
        {
        } #16
    } #4
    #80 off=8
    (f64_mul.322 var=157) const ()  <443>;
    (__link.323 var=158) w32_jal_t21s_s2 (f64_mul.322)  <444>;
    call {
        (a_low.324 var=153 stl=X off=12) assign (x_low.29)  <445>;
        (a_high.325 var=154 stl=X off=13) assign (x_high.33)  <446>;
        (b_low.326 var=155 stl=X off=14) assign (x_low.29)  <447>;
        (b_high.327 var=156 stl=X off=15) assign (x_high.33)  <448>;
        (__link.328 var=158 stl=X off=1) assign (__link.323)  <449>;
        (__tmp.329 var=160 stl=X off=10 __tmp.330 var=161 stl=X off=11) Ff64_mul (__link.328 a_low.324 a_high.325 b_low.326 b_high.327)  <450>;
        (__tmp.332 var=160) deassign (__tmp.329)  <452>;
        (__tmp.334 var=161) deassign (__tmp.330)  <454>;
    } #81 off=9
    #86 off=10
    (__link.344 var=158) w32_jal_t21s_s2 (f64_mul.322)  <467>;
    call {
        (a_low.345 var=153 stl=X off=12) assign (__tmp.332)  <468>;
        (a_high.346 var=154 stl=X off=13) assign (__tmp.334)  <469>;
        (b_low.347 var=155 stl=X off=14) assign (x_low.29)  <470>;
        (b_high.348 var=156 stl=X off=15) assign (x_high.33)  <471>;
        (__link.349 var=158 stl=X off=1) assign (__link.344)  <472>;
        (__tmp.350 var=160 stl=X off=10 __tmp.351 var=161 stl=X off=11) Ff64_mul (__link.349 a_low.345 a_high.346 b_low.347 b_high.348)  <473>;
        (__tmp.353 var=160) deassign (__tmp.350)  <475>;
        (__tmp.355 var=161) deassign (__tmp.351)  <477>;
    } #87 off=11
    #92 off=12
    (__link.365 var=158) w32_jal_t21s_s2 (f64_mul.322)  <490>;
    (__ct_1523570044.780 var=210) const ()  <964>;
    (__ct_1038473530.781 var=211) const ()  <966>;
    call {
        (a_low.366 var=153 stl=X off=12) assign (__tmp.332)  <491>;
        (a_high.367 var=154 stl=X off=13) assign (__tmp.334)  <492>;
        (b_low.368 var=155 stl=X off=14) assign (__ct_1523570044.780)  <493>;
        (b_high.369 var=156 stl=X off=15) assign (__ct_1038473530.781)  <494>;
        (__link.370 var=158 stl=X off=1) assign (__link.365)  <495>;
        (__tmp.371 var=160 stl=X off=10 __tmp.372 var=161 stl=X off=11) Ff64_mul (__link.370 a_low.366 a_high.367 b_low.368 b_high.369)  <496>;
        (__tmp.374 var=160) deassign (__tmp.371)  <498>;
        (__tmp.376 var=161) deassign (__tmp.372)  <500>;
    } #93 off=13
    #98 off=14
    (f64_add.385 var=172) const ()  <512>;
    (__link.386 var=173) w32_jal_t21s_s2 (f64_add.385)  <513>;
    (__ct_2318114027.782 var=212) const ()  <968>;
    (__ct_3193628134.783 var=213) const ()  <970>;
    call {
        (a_low.387 var=168 stl=X off=12) assign (__ct_2318114027.782)  <514>;
        (a_high.388 var=169 stl=X off=13) assign (__ct_3193628134.783)  <515>;
        (b_low.389 var=170 stl=X off=14) assign (__tmp.374)  <516>;
        (b_high.390 var=171 stl=X off=15) assign (__tmp.376)  <517>;
        (__link.391 var=173 stl=X off=1) assign (__link.386)  <518>;
        (__tmp.392 var=175 stl=X off=10 __tmp.393 var=176 stl=X off=11) Ff64_add (__link.391 a_low.387 a_high.388 b_low.389 b_high.390)  <519>;
        (__tmp.395 var=175) deassign (__tmp.392)  <521>;
        (__tmp.397 var=176) deassign (__tmp.393)  <523>;
    } #99 off=15
    #104 off=16
    (__link.407 var=158) w32_jal_t21s_s2 (f64_mul.322)  <536>;
    call {
        (a_low.408 var=153 stl=X off=12) assign (__tmp.332)  <537>;
        (a_high.409 var=154 stl=X off=13) assign (__tmp.334)  <538>;
        (b_low.410 var=155 stl=X off=14) assign (__tmp.395)  <539>;
        (b_high.411 var=156 stl=X off=15) assign (__tmp.397)  <540>;
        (__link.412 var=158 stl=X off=1) assign (__link.407)  <541>;
        (__tmp.413 var=160 stl=X off=10 __tmp.414 var=161 stl=X off=11) Ff64_mul (__link.412 a_low.408 a_high.409 b_low.410 b_high.411)  <542>;
        (__tmp.416 var=160) deassign (__tmp.413)  <544>;
        (__tmp.418 var=161) deassign (__tmp.414)  <546>;
    } #105 off=17
    #110 off=18
    (__link.428 var=173) w32_jal_t21s_s2 (f64_add.385)  <559>;
    (__ct_1471282813.784 var=214) const ()  <972>;
    (__ct_1053236707.785 var=215) const ()  <974>;
    call {
        (a_low.429 var=168 stl=X off=12) assign (__ct_1471282813.784)  <560>;
        (a_high.430 var=169 stl=X off=13) assign (__ct_1053236707.785)  <561>;
        (b_low.431 var=170 stl=X off=14) assign (__tmp.416)  <562>;
        (b_high.432 var=171 stl=X off=15) assign (__tmp.418)  <563>;
        (__link.433 var=173 stl=X off=1) assign (__link.428)  <564>;
        (__tmp.434 var=175 stl=X off=10 __tmp.435 var=176 stl=X off=11) Ff64_add (__link.433 a_low.429 a_high.430 b_low.431 b_high.432)  <565>;
        (__tmp.437 var=175) deassign (__tmp.434)  <567>;
        (__tmp.439 var=176) deassign (__tmp.435)  <569>;
    } #111 off=19
    #116 off=20
    (__link.449 var=158) w32_jal_t21s_s2 (f64_mul.322)  <582>;
    call {
        (a_low.450 var=153 stl=X off=12) assign (__tmp.332)  <583>;
        (a_high.451 var=154 stl=X off=13) assign (__tmp.334)  <584>;
        (b_low.452 var=155 stl=X off=14) assign (__tmp.437)  <585>;
        (b_high.453 var=156 stl=X off=15) assign (__tmp.439)  <586>;
        (__link.454 var=158 stl=X off=1) assign (__link.449)  <587>;
        (__tmp.455 var=160 stl=X off=10 __tmp.456 var=161 stl=X off=11) Ff64_mul (__link.454 a_low.450 a_high.451 b_low.452 b_high.453)  <588>;
        (__tmp.458 var=160) deassign (__tmp.455)  <590>;
        (__tmp.460 var=161) deassign (__tmp.456)  <592>;
    } #117 off=21
    #122 off=22
    (__link.470 var=173) w32_jal_t21s_s2 (f64_add.385)  <605>;
    (__ct_432103893.786 var=216) const ()  <976>;
    (__ct_3207201184.787 var=217) const ()  <978>;
    call {
        (a_low.471 var=168 stl=X off=12) assign (__ct_432103893.786)  <606>;
        (a_high.472 var=169 stl=X off=13) assign (__ct_3207201184.787)  <607>;
        (b_low.473 var=170 stl=X off=14) assign (__tmp.458)  <608>;
        (b_high.474 var=171 stl=X off=15) assign (__tmp.460)  <609>;
        (__link.475 var=173 stl=X off=1) assign (__link.470)  <610>;
        (__tmp.476 var=175 stl=X off=10 __tmp.477 var=176 stl=X off=11) Ff64_add (__link.475 a_low.471 a_high.472 b_low.473 b_high.474)  <611>;
        (__tmp.479 var=175) deassign (__tmp.476)  <613>;
        (__tmp.481 var=176) deassign (__tmp.477)  <615>;
    } #123 off=23
    #128 off=24
    (__link.491 var=158) w32_jal_t21s_s2 (f64_mul.322)  <628>;
    call {
        (a_low.492 var=153 stl=X off=12) assign (__tmp.332)  <629>;
        (a_high.493 var=154 stl=X off=13) assign (__tmp.334)  <630>;
        (b_low.494 var=155 stl=X off=14) assign (__tmp.479)  <631>;
        (b_high.495 var=156 stl=X off=15) assign (__tmp.481)  <632>;
        (__link.496 var=158 stl=X off=1) assign (__link.491)  <633>;
        (__tmp.497 var=160 stl=X off=10 __tmp.498 var=161 stl=X off=11) Ff64_mul (__link.496 a_low.492 a_high.493 b_low.494 b_high.495)  <634>;
        (__tmp.500 var=160) deassign (__tmp.497)  <636>;
        (__tmp.502 var=161) deassign (__tmp.498)  <638>;
    } #129 off=25
    #134 off=26
    (__link.512 var=173) w32_jal_t21s_s2 (f64_add.385)  <651>;
    (__ct_286324902.788 var=218) const ()  <980>;
    (__ct_1065423121.789 var=219) const ()  <982>;
    call {
        (a_low.513 var=168 stl=X off=12) assign (__ct_286324902.788)  <652>;
        (a_high.514 var=169 stl=X off=13) assign (__ct_1065423121.789)  <653>;
        (b_low.515 var=170 stl=X off=14) assign (__tmp.500)  <654>;
        (b_high.516 var=171 stl=X off=15) assign (__tmp.502)  <655>;
        (__link.517 var=173 stl=X off=1) assign (__link.512)  <656>;
        (__tmp.518 var=175 stl=X off=10 __tmp.519 var=176 stl=X off=11) Ff64_add (__link.517 a_low.513 a_high.514 b_low.515 b_high.516)  <657>;
        (__tmp.521 var=175) deassign (__tmp.518)  <659>;
        (__tmp.523 var=176) deassign (__tmp.519)  <661>;
    } #135 off=27
    #77 off=28
    (__tmp.188 var=78) bool__eq___sint___sint (iy.46 __ct_0.89)  <209>;
    (__ct_1431655753.790 var=220) const ()  <984>;
    (__ct_3217380693.791 var=221) const ()  <986>;
    (__trgt.814 var=236) const ()  <1101>;
    () void_br_bool_t13s_s2 (__tmp.188 __trgt.814)  <1102>;
    (__either.815 var=232) undefined ()  <1103>;
    if {
        {
            () if_expr (__either.815)  <225>;
        } #19
        {
            #146 off=46
            (__link.533 var=158) w32_jal_t21s_s2 (f64_mul.322)  <674>;
            call {
                (a_low.534 var=153 stl=X off=12) assign (__tmp.332)  <675>;
                (a_high.535 var=154 stl=X off=13) assign (__tmp.334)  <676>;
                (b_low.536 var=155 stl=X off=14) assign (__tmp.521)  <677>;
                (b_high.537 var=156 stl=X off=15) assign (__tmp.523)  <678>;
                (__link.538 var=158 stl=X off=1) assign (__link.533)  <679>;
                (__tmp.539 var=160 stl=X off=10 __tmp.540 var=161 stl=X off=11) Ff64_mul (__link.538 a_low.534 a_high.535 b_low.536 b_high.537)  <680>;
                (__tmp.542 var=160) deassign (__tmp.539)  <682>;
                (__tmp.544 var=161) deassign (__tmp.540)  <684>;
            } #147 off=47
            #152 off=48
            (__link.554 var=173) w32_jal_t21s_s2 (f64_add.385)  <697>;
            call {
                (a_low.555 var=168 stl=X off=12) assign (__ct_1431655753.790)  <698>;
                (a_high.556 var=169 stl=X off=13) assign (__ct_3217380693.791)  <699>;
                (b_low.557 var=170 stl=X off=14) assign (__tmp.542)  <700>;
                (b_high.558 var=171 stl=X off=15) assign (__tmp.544)  <701>;
                (__link.559 var=173 stl=X off=1) assign (__link.554)  <702>;
                (__tmp.560 var=175 stl=X off=10 __tmp.561 var=176 stl=X off=11) Ff64_add (__link.559 a_low.555 a_high.556 b_low.557 b_high.558)  <703>;
                (__tmp.563 var=175) deassign (__tmp.560)  <705>;
                (__tmp.565 var=176) deassign (__tmp.561)  <707>;
            } #153 off=49
            #158 off=50
            (__link.575 var=158) w32_jal_t21s_s2 (f64_mul.322)  <720>;
            call {
                (a_low.576 var=153 stl=X off=12) assign (__tmp.353)  <721>;
                (a_high.577 var=154 stl=X off=13) assign (__tmp.355)  <722>;
                (b_low.578 var=155 stl=X off=14) assign (__tmp.563)  <723>;
                (b_high.579 var=156 stl=X off=15) assign (__tmp.565)  <724>;
                (__link.580 var=158 stl=X off=1) assign (__link.575)  <725>;
                (__tmp.581 var=160 stl=X off=10 __tmp.582 var=161 stl=X off=11) Ff64_mul (__link.580 a_low.576 a_high.577 b_low.578 b_high.579)  <726>;
                (__tmp.584 var=160) deassign (__tmp.581)  <728>;
                (__tmp.586 var=161) deassign (__tmp.582)  <730>;
            } #159 off=51
            #228 off=52
            (__R_SP.801 var=12 __sp.802 var=18) wr_res_reg (__tmp.110 __sp.53)  <1076>;
            () void_j_t21s_s2 (f64_add.385)  <1083>;
            call {
                (a_low.597 var=168 stl=X off=12) assign (x_low.29)  <744>;
                (a_high.598 var=169 stl=X off=13) assign (x_high.33)  <745>;
                (b_low.599 var=170 stl=X off=14) assign (__tmp.584)  <746>;
                (b_high.600 var=171 stl=X off=15) assign (__tmp.586)  <747>;
                (__la.601 var=20 stl=X off=1) assign (__la.20)  <748>;
                (__tmp.602 var=175 stl=X off=10 __tmp.603 var=176 stl=X off=11) Ff64_add (__la.601 a_low.597 a_high.598 b_low.599 b_high.600)  <749>;
                (__tmp.605 var=175) deassign (__tmp.602)  <751>;
                (__tmp.607 var=176) deassign (__tmp.603)  <753>;
            } #165 off=53
            #229 off=54 nxt=-2
            (__rt_low.803 var=22 stl=X off=10) assign (__tmp.605)  <1078>;
            () out (__rt_low.803)  <1079>;
            (__rt_high.804 var=23 stl=X off=11) assign (__tmp.607)  <1080>;
            () out (__rt_high.804)  <1081>;
            () sink (__sp.802)  <1082>;
        } #20
        {
            #180 off=29
            (__link.617 var=158) w32_jal_t21s_s2 (f64_mul.322)  <766>;
            (__ct_1071644672.793 var=223) const ()  <990>;
            call {
                (a_low.618 var=153 stl=X off=12) assign (__ct_0.89)  <767>;
                (a_high.619 var=154 stl=X off=13) assign (__ct_1071644672.793)  <768>;
                (b_low.620 var=155 stl=X off=14) assign (y_low.38)  <769>;
                (b_high.621 var=156 stl=X off=15) assign (y_high.42)  <770>;
                (__link.622 var=158 stl=X off=1) assign (__link.617)  <771>;
                (__tmp.623 var=160 stl=X off=10 __tmp.624 var=161 stl=X off=11) Ff64_mul (__link.622 a_low.618 a_high.619 b_low.620 b_high.621)  <772>;
                (__tmp.626 var=160) deassign (__tmp.623)  <774>;
                (__tmp.628 var=161) deassign (__tmp.624)  <776>;
            } #181 off=30
            #186 off=31
            (__link.638 var=158) w32_jal_t21s_s2 (f64_mul.322)  <789>;
            call {
                (a_low.639 var=153 stl=X off=12) assign (__tmp.353)  <790>;
                (a_high.640 var=154 stl=X off=13) assign (__tmp.355)  <791>;
                (b_low.641 var=155 stl=X off=14) assign (__tmp.521)  <792>;
                (b_high.642 var=156 stl=X off=15) assign (__tmp.523)  <793>;
                (__link.643 var=158 stl=X off=1) assign (__link.638)  <794>;
                (__tmp.644 var=160 stl=X off=10 __tmp.645 var=161 stl=X off=11) Ff64_mul (__link.643 a_low.639 a_high.640 b_low.641 b_high.642)  <795>;
                (__tmp.647 var=160) deassign (__tmp.644)  <797>;
                (__tmp.649 var=161) deassign (__tmp.645)  <799>;
            } #187 off=32
            #192 off=33
            (f64_sub.658 var=197) const ()  <811>;
            (__link.659 var=198) w32_jal_t21s_s2 (f64_sub.658)  <812>;
            call {
                (a_low.660 var=193 stl=X off=12) assign (__tmp.626)  <813>;
                (a_high.661 var=194 stl=X off=13) assign (__tmp.628)  <814>;
                (b_low.662 var=195 stl=X off=14) assign (__tmp.647)  <815>;
                (b_high.663 var=196 stl=X off=15) assign (__tmp.649)  <816>;
                (__link.664 var=198 stl=X off=1) assign (__link.659)  <817>;
                (__tmp.665 var=200 stl=X off=10 __tmp.666 var=201 stl=X off=11) Ff64_sub (__link.664 a_low.660 a_high.661 b_low.662 b_high.663)  <818>;
                (__tmp.668 var=200) deassign (__tmp.665)  <820>;
                (__tmp.670 var=201) deassign (__tmp.666)  <822>;
            } #193 off=34
            #198 off=35
            (__link.680 var=158) w32_jal_t21s_s2 (f64_mul.322)  <835>;
            call {
                (a_low.681 var=153 stl=X off=12) assign (__tmp.332)  <836>;
                (a_high.682 var=154 stl=X off=13) assign (__tmp.334)  <837>;
                (b_low.683 var=155 stl=X off=14) assign (__tmp.668)  <838>;
                (b_high.684 var=156 stl=X off=15) assign (__tmp.670)  <839>;
                (__link.685 var=158 stl=X off=1) assign (__link.680)  <840>;
                (__tmp.686 var=160 stl=X off=10 __tmp.687 var=161 stl=X off=11) Ff64_mul (__link.685 a_low.681 a_high.682 b_low.683 b_high.684)  <841>;
                (__tmp.689 var=160) deassign (__tmp.686)  <843>;
                (__tmp.691 var=161) deassign (__tmp.687)  <845>;
            } #199 off=36
            #204 off=37
            (__link.701 var=198) w32_jal_t21s_s2 (f64_sub.658)  <858>;
            call {
                (a_low.702 var=193 stl=X off=12) assign (__tmp.689)  <859>;
                (a_high.703 var=194 stl=X off=13) assign (__tmp.691)  <860>;
                (b_low.704 var=195 stl=X off=14) assign (y_low.38)  <861>;
                (b_high.705 var=196 stl=X off=15) assign (y_high.42)  <862>;
                (__link.706 var=198 stl=X off=1) assign (__link.701)  <863>;
                (__tmp.707 var=200 stl=X off=10 __tmp.708 var=201 stl=X off=11) Ff64_sub (__link.706 a_low.702 a_high.703 b_low.704 b_high.705)  <864>;
                (__tmp.710 var=200) deassign (__tmp.707)  <866>;
                (__tmp.712 var=201) deassign (__tmp.708)  <868>;
            } #205 off=38
            #210 off=39
            (__link.722 var=158) w32_jal_t21s_s2 (f64_mul.322)  <881>;
            call {
                (a_low.723 var=153 stl=X off=12) assign (__tmp.353)  <882>;
                (a_high.724 var=154 stl=X off=13) assign (__tmp.355)  <883>;
                (b_low.725 var=155 stl=X off=14) assign (__ct_1431655753.790)  <884>;
                (b_high.726 var=156 stl=X off=15) assign (__ct_3217380693.791)  <885>;
                (__link.727 var=158 stl=X off=1) assign (__link.722)  <886>;
                (__tmp.728 var=160 stl=X off=10 __tmp.729 var=161 stl=X off=11) Ff64_mul (__link.727 a_low.723 a_high.724 b_low.725 b_high.726)  <887>;
                (__tmp.731 var=160) deassign (__tmp.728)  <889>;
                (__tmp.733 var=161) deassign (__tmp.729)  <891>;
            } #211 off=40
            #216 off=41
            (__link.743 var=198) w32_jal_t21s_s2 (f64_sub.658)  <904>;
            call {
                (a_low.744 var=193 stl=X off=12) assign (__tmp.710)  <905>;
                (a_high.745 var=194 stl=X off=13) assign (__tmp.712)  <906>;
                (b_low.746 var=195 stl=X off=14) assign (__tmp.731)  <907>;
                (b_high.747 var=196 stl=X off=15) assign (__tmp.733)  <908>;
                (__link.748 var=198 stl=X off=1) assign (__link.743)  <909>;
                (__tmp.749 var=200 stl=X off=10 __tmp.750 var=201 stl=X off=11) Ff64_sub (__link.748 a_low.744 a_high.745 b_low.746 b_high.747)  <910>;
                (__tmp.752 var=200) deassign (__tmp.749)  <912>;
                (__tmp.754 var=201) deassign (__tmp.750)  <914>;
            } #217 off=42
            #232 off=43
            (__R_SP.805 var=12 __sp.806 var=18) wr_res_reg (__tmp.110 __sp.53)  <1084>;
            () void_j_t21s_s2 (f64_sub.658)  <1091>;
            call {
                (a_low.765 var=193 stl=X off=12) assign (x_low.29)  <928>;
                (a_high.766 var=194 stl=X off=13) assign (x_high.33)  <929>;
                (b_low.767 var=195 stl=X off=14) assign (__tmp.752)  <930>;
                (b_high.768 var=196 stl=X off=15) assign (__tmp.754)  <931>;
                (__la.769 var=20 stl=X off=1) assign (__la.20)  <932>;
                (__tmp.770 var=200 stl=X off=10 __tmp.771 var=201 stl=X off=11) Ff64_sub (__la.769 a_low.765 a_high.766 b_low.767 b_high.768)  <933>;
                (__tmp.773 var=200) deassign (__tmp.770)  <935>;
                (__tmp.775 var=201) deassign (__tmp.771)  <937>;
            } #223 off=44
            #233 off=45 nxt=-2
            (__rt_low.807 var=22 stl=X off=10) assign (__tmp.773)  <1086>;
            () out (__rt_low.807)  <1087>;
            (__rt_high.808 var=23 stl=X off=11) assign (__tmp.775)  <1088>;
            () out (__rt_high.808)  <1089>;
            () sink (__sp.806)  <1090>;
        } #21
        {
        } #22
    } #18
} #0
0 : 'src/math.c';
----------
0 : (0,735:0,0);
4 : (0,750:4,6);
6 : (0,751:8,7);
8 : (0,751:9,7);
12 : (0,751:23,8);
13 : (0,751:9,11);
15 : (0,750:4,16);
18 : (0,755:4,22);
20 : (0,756:14,23);
21 : (0,755:14,26);
55 : (0,750:9,6);
60 : (0,751:18,7);
63 : (0,751:12,7);
64 : (0,751:12,7);
77 : (0,755:9,22);
80 : (0,752:12,19);
81 : (0,752:12,19);
86 : (0,753:12,20);
87 : (0,753:12,20);
92 : (0,754:33,21);
93 : (0,754:33,21);
98 : (0,754:31,21);
99 : (0,754:31,21);
104 : (0,754:27,21);
105 : (0,754:27,21);
110 : (0,754:25,21);
111 : (0,754:25,21);
116 : (0,754:21,21);
117 : (0,754:21,21);
122 : (0,754:19,21);
123 : (0,754:19,21);
128 : (0,754:15,21);
129 : (0,754:15,21);
134 : (0,754:13,21);
135 : (0,754:13,21);
146 : (0,755:30,23);
147 : (0,755:30,23);
152 : (0,755:28,23);
153 : (0,755:28,23);
158 : (0,755:24,23);
159 : (0,755:24,23);
165 : (0,755:22,23);
180 : (0,756:32,26);
181 : (0,756:32,26);
186 : (0,756:36,26);
187 : (0,756:36,26);
192 : (0,756:34,26);
193 : (0,756:34,26);
198 : (0,756:26,26);
199 : (0,756:26,26);
204 : (0,756:39,26);
205 : (0,756:39,26);
210 : (0,756:44,26);
211 : (0,756:44,26);
216 : (0,756:42,26);
217 : (0,756:42,26);
223 : (0,756:22,26);
228 : (0,755:4,30);
229 : (0,755:4,30);
232 : (0,755:4,30);
233 : (0,755:4,30);
----------
59 : (0,735:14,0);
60 : (0,735:14,0);
62 : (0,735:14,0);
63 : (0,735:14,0);
78 : (0,749:10,0);
80 : (0,749:7,5);
81 : (0,750:10,0);
99 : (0,750:4,6);
101 : (0,751:20,0);
103 : (0,751:18,7);
119 : (0,751:9,7);
120 : (0,751:23,0);
121 : (0,751:23,0);
123 : (0,751:23,0);
124 : (0,751:23,8);
125 : (0,751:23,8);
127 : (0,751:30,0);
130 : (0,751:30,0);
209 : (0,755:9,22);
225 : (0,755:4,22);
424 : (0,751:12,0);
425 : (0,751:12,0);
426 : (0,751:12,7);
427 : (0,751:12,7);
428 : (0,751:12,7);
429 : (0,751:12,7);
430 : (0,751:12,7);
431 : (0,751:12,7);
432 : (0,751:12,7);
443 : (0,752:12,0);
444 : (0,752:12,19);
445 : (0,752:12,19);
446 : (0,752:12,19);
447 : (0,752:12,19);
448 : (0,752:12,19);
449 : (0,752:12,19);
450 : (0,752:12,19);
452 : (0,752:12,19);
454 : (0,752:12,19);
467 : (0,753:12,20);
468 : (0,753:12,20);
469 : (0,753:12,20);
470 : (0,753:12,20);
471 : (0,753:12,20);
472 : (0,753:12,20);
473 : (0,753:12,20);
475 : (0,753:12,20);
477 : (0,753:12,20);
490 : (0,754:33,21);
491 : (0,754:33,21);
492 : (0,754:33,21);
493 : (0,754:33,21);
494 : (0,754:33,21);
495 : (0,754:33,21);
496 : (0,754:33,21);
498 : (0,754:33,21);
500 : (0,754:33,21);
512 : (0,754:31,0);
513 : (0,754:31,21);
514 : (0,754:31,21);
515 : (0,754:31,21);
516 : (0,754:31,21);
517 : (0,754:31,21);
518 : (0,754:31,21);
519 : (0,754:31,21);
521 : (0,754:31,21);
523 : (0,754:31,21);
536 : (0,754:27,21);
537 : (0,754:27,21);
538 : (0,754:27,21);
539 : (0,754:27,21);
540 : (0,754:27,21);
541 : (0,754:27,21);
542 : (0,754:27,21);
544 : (0,754:27,21);
546 : (0,754:27,21);
559 : (0,754:25,21);
560 : (0,754:25,21);
561 : (0,754:25,21);
562 : (0,754:25,21);
563 : (0,754:25,21);
564 : (0,754:25,21);
565 : (0,754:25,21);
567 : (0,754:25,21);
569 : (0,754:25,21);
582 : (0,754:21,21);
583 : (0,754:21,21);
584 : (0,754:21,21);
585 : (0,754:21,21);
586 : (0,754:21,21);
587 : (0,754:21,21);
588 : (0,754:21,21);
590 : (0,754:21,21);
592 : (0,754:21,21);
605 : (0,754:19,21);
606 : (0,754:19,21);
607 : (0,754:19,21);
608 : (0,754:19,21);
609 : (0,754:19,21);
610 : (0,754:19,21);
611 : (0,754:19,21);
613 : (0,754:19,21);
615 : (0,754:19,21);
628 : (0,754:15,21);
629 : (0,754:15,21);
630 : (0,754:15,21);
631 : (0,754:15,21);
632 : (0,754:15,21);
633 : (0,754:15,21);
634 : (0,754:15,21);
636 : (0,754:15,21);
638 : (0,754:15,21);
651 : (0,754:13,21);
652 : (0,754:13,21);
653 : (0,754:13,21);
654 : (0,754:13,21);
655 : (0,754:13,21);
656 : (0,754:13,21);
657 : (0,754:13,21);
659 : (0,754:13,21);
661 : (0,754:13,21);
674 : (0,755:30,23);
675 : (0,755:30,23);
676 : (0,755:30,23);
677 : (0,755:30,23);
678 : (0,755:30,23);
679 : (0,755:30,23);
680 : (0,755:30,23);
682 : (0,755:30,23);
684 : (0,755:30,23);
697 : (0,755:28,23);
698 : (0,755:28,23);
699 : (0,755:28,23);
700 : (0,755:28,23);
701 : (0,755:28,23);
702 : (0,755:28,23);
703 : (0,755:28,23);
705 : (0,755:28,23);
707 : (0,755:28,23);
720 : (0,755:24,23);
721 : (0,755:24,23);
722 : (0,755:24,23);
723 : (0,755:24,23);
724 : (0,755:24,23);
725 : (0,755:24,23);
726 : (0,755:24,23);
728 : (0,755:24,23);
730 : (0,755:24,23);
744 : (0,755:22,23);
745 : (0,755:22,23);
746 : (0,755:22,23);
747 : (0,755:22,23);
748 : (0,755:22,23);
749 : (0,755:22,23);
751 : (0,755:22,23);
753 : (0,755:22,23);
766 : (0,756:32,26);
767 : (0,756:32,26);
768 : (0,756:32,26);
769 : (0,756:32,26);
770 : (0,756:32,26);
771 : (0,756:32,26);
772 : (0,756:32,26);
774 : (0,756:32,26);
776 : (0,756:32,26);
789 : (0,756:36,26);
790 : (0,756:36,26);
791 : (0,756:36,26);
792 : (0,756:36,26);
793 : (0,756:36,26);
794 : (0,756:36,26);
795 : (0,756:36,26);
797 : (0,756:36,26);
799 : (0,756:36,26);
811 : (0,756:34,0);
812 : (0,756:34,26);
813 : (0,756:34,26);
814 : (0,756:34,26);
815 : (0,756:34,26);
816 : (0,756:34,26);
817 : (0,756:34,26);
818 : (0,756:34,26);
820 : (0,756:34,26);
822 : (0,756:34,26);
835 : (0,756:26,26);
836 : (0,756:26,26);
837 : (0,756:26,26);
838 : (0,756:26,26);
839 : (0,756:26,26);
840 : (0,756:26,26);
841 : (0,756:26,26);
843 : (0,756:26,26);
845 : (0,756:26,26);
858 : (0,756:39,26);
859 : (0,756:39,26);
860 : (0,756:39,26);
861 : (0,756:39,26);
862 : (0,756:39,26);
863 : (0,756:39,26);
864 : (0,756:39,26);
866 : (0,756:39,26);
868 : (0,756:39,26);
881 : (0,756:44,26);
882 : (0,756:44,26);
883 : (0,756:44,26);
884 : (0,756:44,26);
885 : (0,756:44,26);
886 : (0,756:44,26);
887 : (0,756:44,26);
889 : (0,756:44,26);
891 : (0,756:44,26);
904 : (0,756:42,26);
905 : (0,756:42,26);
906 : (0,756:42,26);
907 : (0,756:42,26);
908 : (0,756:42,26);
909 : (0,756:42,26);
910 : (0,756:42,26);
912 : (0,756:42,26);
914 : (0,756:42,26);
928 : (0,756:22,26);
929 : (0,756:22,26);
930 : (0,756:22,26);
931 : (0,756:22,26);
932 : (0,756:22,26);
933 : (0,756:22,26);
935 : (0,756:22,26);
937 : (0,756:22,26);
964 : (0,754:34,0);
966 : (0,754:34,0);
968 : (0,754:29,0);
970 : (0,754:29,0);
972 : (0,754:23,0);
974 : (0,754:23,0);
976 : (0,754:17,0);
978 : (0,754:17,0);
980 : (0,754:11,0);
982 : (0,754:11,0);
984 : (0,755:26,0);
986 : (0,755:26,0);
990 : (0,756:28,0);
1048 : (0,750:9,6);
1076 : (0,755:4,30);
1078 : (0,755:4,0);
1080 : (0,755:4,0);
1083 : (0,755:22,23);
1084 : (0,755:4,30);
1086 : (0,755:4,0);
1088 : (0,755:4,0);
1091 : (0,756:22,26);
1093 : (0,751:9,7);
1097 : (0,750:4,6);
1102 : (0,755:4,22);

