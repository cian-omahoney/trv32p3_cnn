
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:54:31 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float log10f(float)
Flog10f : user_defined, called {
    fnm : "log10f" 'float log10f(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
}
****
!! extern float logf(float)
Flogf : user_defined, called {
    fnm : "logf" 'float logf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    llv : 0 0 0 0 0 ;
}
!!  float32_t f32_sub(float32_t, float32_t)
Ff32_sub : user_defined, called {
    fnm : "f32_sub" 'float32_t f32_sub(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_div(float32_t, float32_t)
Ff32_div : user_defined, called {
    fnm : "f32_div" 'float32_t f32_div(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t i32_to_f32(int)
Fi32_to_f32 : user_defined, called {
    fnm : "i32_to_f32" 'float32_t i32_to_f32(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
}
***/

[
    0 : log10f typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__ffloat__
   22 : x typ=w32 bnd=p tref=__ffloat__
   23 : __ct_0S0 typ=w32 val=0S0 bnd=m
   25 : __tmp typ=w32 bnd=m
   26 : hx typ=w32 bnd=m tref=int32_t__
   27 : k typ=w32 bnd=m tref=int32_t__
   31 : y typ=w32 bnd=m tref=__ffloat__
   32 : z typ=w32 bnd=m tref=__ffloat__
   34 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   36 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
   38 : __tmp typ=bool bnd=m
   39 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   41 : __tmp typ=w32 bnd=m
   44 : __tmp typ=bool bnd=m
   45 : __ct_4286578688 typ=t20s_rp12 val=-2048f bnd=m
   47 : __ct_0s0 typ=w32 val=0s0 bnd=m
   49 : __tmp typ=w32 bnd=m
   52 : __tmp typ=bool bnd=m
   53 : __tmp typ=w32 bnd=m
   63 : __ct_1275068416 typ=t20s_rp12 val=311296f bnd=m
   67 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   69 : __tmp typ=bool bnd=m
   71 : __ct_23 typ=w32 val=23f bnd=m
   73 : __tmp typ=w32 bnd=m
   74 : __ct_127 typ=w32 val=127f bnd=m
   76 : __tmp typ=w32 bnd=m
   79 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
   81 : __tmp typ=w32 bnd=m
   82 : __ct_31 typ=w32 val=31f bnd=m
   84 : __tmp typ=w32 bnd=m
   86 : __ct_8388607 typ=w32 val=8388607f bnd=m
   88 : __tmp typ=w32 bnd=m
   91 : __tmp typ=w32 bnd=m
   94 : __tmp typ=w32 bnd=m
   96 : __tmp typ=w32 bnd=m
   99 : __ct_894707675 typ=w32 val=894707675f bnd=m
  101 : __tmp typ=w32 bnd=m
  102 : __ct_1054759897 typ=w32 val=1054759897f bnd=m
  106 : logf typ=t21s_s2 val=0r bnd=m
  107 : __link typ=w32 bnd=m
  108 : __tmp typ=w32 bnd=m
  109 : __tmp typ=w32 bnd=m
  111 : __ct_1050288256 typ=w32 val=1050288256f bnd=m
  113 : __tmp typ=w32 bnd=m
  122 : __ct_m25 typ=w32 val=-25f bnd=m
  123 : __ct_m127 typ=w32 val=-127f bnd=m
  126 : a typ=w32 bnd=m tref=float32_t__
  127 : b typ=w32 bnd=m tref=float32_t__
  128 : f32_sub typ=t21s_s2 val=0r bnd=m
  129 : __link typ=w32 bnd=m
  132 : a typ=w32 bnd=m tref=float32_t__
  133 : b typ=w32 bnd=m tref=float32_t__
  134 : f32_div typ=t21s_s2 val=0r bnd=m
  138 : a typ=w32 bnd=m tref=float32_t__
  139 : b typ=w32 bnd=m tref=float32_t__
  140 : f32_mul typ=t21s_s2 val=0r bnd=m
  141 : __link typ=w32 bnd=m
  144 : a typ=w32 bnd=m tref=float32_t__
  145 : b typ=w32 bnd=m tref=float32_t__
  146 : f32_add typ=t21s_s2 val=0r bnd=m
  147 : __link typ=w32 bnd=m
  150 : a typ=w32 bnd=m tref=__sint__
  151 : i32_to_f32 typ=t21s_s2 val=0r bnd=m
  152 : __link typ=w32 bnd=m
  164 : hx typ=w32 bnd=m
  169 : __either typ=bool bnd=m
  170 : __trgt typ=t13s_s2 val=0j bnd=m
  171 : __trgt typ=t13s_s2 val=0j bnd=m
  172 : __trgt typ=t13s_s2 val=0j bnd=m
  173 : __trgt typ=t21s_s2 val=0j bnd=m
  174 : __trgt typ=t13s_s2 val=0j bnd=m
]
Flog10f {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x.23 var=22 stl=X off=11) inp ()  <34>;
    (x.24 var=22) deassign (x.23)  <35>;
    (__rd___sp.26 var=19) rd_res_reg (__R_SP.11 __sp.17)  <37>;
    (__ct_0S0.27 var=23) const ()  <38>;
    (__tmp.29 var=25) __Pvoid__pl___Pvoid___sint (__rd___sp.26 __ct_0S0.27)  <40>;
    (__R_SP.30 var=12 __sp.31 var=18) wr_res_reg (__tmp.29 __sp.17)  <41>;
    (__ct_0.45 var=34) const ()  <56>;
    (__ct_8388608.47 var=36) const ()  <58>;
    (__rd___sp.92 var=19) rd_res_reg (__R_SP.11 __sp.31)  <105>;
    (__ct_0s0.93 var=47) const ()  <106>;
    (__tmp.95 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.92 __ct_0s0.93)  <108>;
    (f32_mul.344 var=140) const ()  <453>;
    (__tmp.424 var=38) bool__ge___sint___sint (x.24 __ct_8388608.47)  <610>;
    (__trgt.437 var=172) const ()  <660>;
    () void_br_bool_t13s_s2 (__tmp.424 __trgt.437)  <661>;
    (__either.438 var=169) undefined ()  <662>;
    if {
        {
            () if_expr (__either.438)  <77>;
        } #5
        {
        } #26 off=14
        {
            #7 off=1
            (__ct_2147483647.66 var=39) const ()  <78>;
            (__tmp.68 var=41) __sint__ad___sint___sint (x.24 __ct_2147483647.66)  <80>;
            (__tmp.71 var=44) bool__eq___sint___sint (__tmp.68 __ct_0.45)  <83>;
            (__trgt.433 var=170) const ()  <652>;
            () void_br_bool_t13s_s2 (__tmp.71 __trgt.433)  <653>;
            (__either.434 var=169) undefined ()  <654>;
            if {
                {
                    () if_expr (__either.434)  <100>;
                    () chess_rear_then ()  <655>;
                } #9
                {
                    (__ct_4286578688.90 var=45) const ()  <103>;
                    (__R_SP.96 var=12 __sp.97 var=18) wr_res_reg (__tmp.95 __sp.31)  <109>;
                    () void___rts_jr_w32 (__la.20)  <110>;
                    (__rt.98 var=21 stl=X off=10) assign (__ct_4286578688.90)  <111>;
                    () out (__rt.98)  <112>;
                    () sink (__sp.97)  <118>;
                } #13 off=3 nxt=-2
                {
                } #14 off=2
                {
                } #15
            } #8
            #16 off=4
            (__tmp.133 var=52) bool__lt___sint___sint (x.24 __ct_0.45)  <153>;
            (__trgt.435 var=171) const ()  <656>;
            () void_br_bool_t13s_s2 (__tmp.133 __trgt.435)  <657>;
            (__either.436 var=169) undefined ()  <658>;
            if {
                {
                    () if_expr (__either.436)  <170>;
                    () chess_rear_then ()  <659>;
                } #18
                {
                    #43 off=6
                    (f32_sub.324 var=128) const ()  <427>;
                    (__link.325 var=129) w32_jal_t21s_s2 (f32_sub.324)  <428>;
                    call {
                        (a.326 var=126 stl=X off=11) assign (x.24)  <429>;
                        (b.327 var=127 stl=X off=12) assign (x.24)  <430>;
                        (__link.328 var=129 stl=X off=1) assign (__link.325)  <431>;
                        (__tmp.329 var=53 stl=X off=10) Ff32_sub (__link.328 a.326 b.327)  <432>;
                        (__tmp.330 var=53) deassign (__tmp.329)  <433>;
                    } #44 off=7
                    #21 off=8
                    (__R_SP.158 var=12 __sp.159 var=18) wr_res_reg (__tmp.95 __sp.31)  <179>;
                    (f32_div.334 var=134) const ()  <440>;
                    () void_j_t21s_s2 (f32_div.334)  <639>;
                    call {
                        (a.336 var=132 stl=X off=11) assign (__tmp.330)  <442>;
                        (b.337 var=133 stl=X off=12) assign (__ct_0.45)  <443>;
                        (__la.338 var=20 stl=X off=1) assign (__la.20)  <444>;
                        (__rt.339 var=21 stl=X off=10) Ff32_div (__la.338 a.336 b.337)  <445>;
                        (__rt.340 var=21) deassign (__rt.339)  <446>;
                    } #50 off=9
                    #22 off=10 nxt=-2
                    (__rt.160 var=21 stl=X off=10) assign (__rt.340)  <181>;
                    () out (__rt.160)  <182>;
                    () sink (__sp.159)  <188>;
                } #19
                {
                } #23 off=5
                {
                } #24
            } #17
            #57 off=11
            (__ct_1275068416.196 var=63) const ()  <224>;
            (__link.345 var=141) w32_jal_t21s_s2 (f32_mul.344)  <454>;
            call {
                (a.346 var=138 stl=X off=11) assign (x.24)  <455>;
                (b.347 var=139 stl=X off=12) assign (__ct_1275068416.196)  <456>;
                (__link.348 var=141 stl=X off=1) assign (__link.345)  <457>;
                (x.349 var=22 stl=X off=10) Ff32_mul (__link.348 a.346 b.347)  <458>;
                (x.350 var=22) deassign (x.349)  <459>;
            } #58 off=12
            #130 off=13
            (__ct_m25.318 var=122) const ()  <396>;
            (__trgt.439 var=173) const ()  <663>;
            () void_j_t21s_s2 (__trgt.439)  <664>;
        } #6
        {
            (hx.207 var=164) merge (x.24 x.350)  <235>;
            (k.209 var=27) merge (__ct_0.45 __ct_m25.318)  <237>;
        } #27
    } #4
    #28 off=15
    (__ct_2139095040.216 var=67) const ()  <244>;
    (__tmp.218 var=69) bool__ge___sint___sint (hx.207 __ct_2139095040.216)  <246>;
    (f32_add.354 var=146) const ()  <466>;
    (__trgt.440 var=174) const ()  <665>;
    () void_br_bool_t13s_s2 (__tmp.218 __trgt.440)  <666>;
    (__either.441 var=169) undefined ()  <667>;
    if {
        {
            () if_expr (__either.441)  <263>;
        } #30
        {
            #123 off=31
            (__R_SP.427 var=12 __sp.428 var=18) wr_res_reg (__tmp.95 __sp.31)  <640>;
            () void_j_t21s_s2 (f32_add.354)  <645>;
            call {
                (a.356 var=144 stl=X off=11) assign (hx.207)  <468>;
                (b.357 var=145 stl=X off=12) assign (hx.207)  <469>;
                (__la.358 var=20 stl=X off=1) assign (__la.20)  <470>;
                (__rt.359 var=21 stl=X off=10) Ff32_add (__la.358 a.356 b.357)  <471>;
                (__rt.360 var=21) deassign (__rt.359)  <472>;
            } #64 off=32
            #124 off=33 nxt=-2
            (__rt.429 var=21 stl=X off=10) assign (__rt.360)  <642>;
            () out (__rt.429)  <643>;
            () sink (__sp.428)  <644>;
        } #31
        {
            #83 off=16
            (__ct_23.236 var=71) const ()  <265>;
            (__tmp.238 var=73) __sint__rs___sint___sint (hx.207 __ct_23.236)  <267>;
            (__ct_127.239 var=74) const ()  <268>;
            (__tmp.241 var=76) __sint__pl___sint___sint (__tmp.238 __ct_m127.319)  <270>;
            (k.242 var=27) __sint__pl___sint___sint (k.209 __tmp.241)  <271>;
            (__ct_2147483648.244 var=79) const ()  <273>;
            (__tmp.246 var=81) __uint__ad___uint___uint (k.242 __ct_2147483648.244)  <275>;
            (__ct_31.247 var=82) const ()  <276>;
            (__tmp.249 var=84) __uint__rs___uint___sint (__tmp.246 __ct_31.247)  <278>;
            (__ct_8388607.251 var=86) const ()  <280>;
            (__tmp.253 var=88) __sint__ad___sint___sint (hx.207 __ct_8388607.251)  <282>;
            (__tmp.256 var=91) __sint__mi___sint___sint (__ct_127.239 __tmp.249)  <285>;
            (__tmp.259 var=94) __sint__ls___sint___sint (__tmp.256 __ct_23.236)  <288>;
            (hx.260 var=26) __sint__or___sint___sint (__tmp.253 __tmp.259)  <289>;
            (__tmp.261 var=96) __sint__pl___sint___sint (k.242 __tmp.249)  <290>;
            (__ct_m127.319 var=123) const ()  <398>;
            (i32_to_f32.363 var=151) const ()  <478>;
            (__link.364 var=152) w32_jal_t21s_s2 (i32_to_f32.363)  <479>;
            call {
                (a.365 var=150 stl=X off=11) assign (__tmp.261)  <480>;
                (__link.366 var=152 stl=X off=1) assign (__link.364)  <481>;
                (y.367 var=31 stl=X off=10) Fi32_to_f32 (__link.366 a.365)  <482>;
                (y.368 var=31) deassign (y.367)  <483>;
            } #84 off=17
            #89 off=18
            (__ct_894707675.264 var=99) const ()  <293>;
            (__link.373 var=141) w32_jal_t21s_s2 (f32_mul.344)  <491>;
            call {
                (a.374 var=138 stl=X off=11) assign (y.368)  <492>;
                (b.375 var=139 stl=X off=12) assign (__ct_894707675.264)  <493>;
                (__link.376 var=141 stl=X off=1) assign (__link.373)  <494>;
                (__tmp.377 var=101 stl=X off=10) Ff32_mul (__link.376 a.374 b.375)  <495>;
                (__tmp.378 var=101) deassign (__tmp.377)  <496>;
            } #90 off=19
            #80 off=20
            (logf.272 var=106) const ()  <301>;
            (__link.273 var=107) w32_jal_t21s_s2 (logf.272)  <302>;
            call {
                (x.269 var=22 stl=X off=11) assign (hx.260)  <298>;
                (__link.274 var=107 stl=X off=1) assign (__link.273)  <303>;
                (__tmp.275 var=108 stl=X off=10) Flogf (__link.274 x.269)  <304>;
                (__tmp.276 var=108) deassign (__tmp.275)  <305>;
            } #34 off=21
            #99 off=22
            (__ct_1054759897.267 var=102) const ()  <296>;
            (__link.383 var=141) w32_jal_t21s_s2 (f32_mul.344)  <504>;
            call {
                (a.384 var=138 stl=X off=11) assign (__ct_1054759897.267)  <505>;
                (b.385 var=139 stl=X off=12) assign (__tmp.276)  <506>;
                (__link.386 var=141 stl=X off=1) assign (__link.383)  <507>;
                (__tmp.387 var=109 stl=X off=10) Ff32_mul (__link.386 a.384 b.385)  <508>;
                (__tmp.388 var=109) deassign (__tmp.387)  <509>;
            } #100 off=23
            #105 off=24
            (__link.393 var=147) w32_jal_t21s_s2 (f32_add.354)  <517>;
            call {
                (a.394 var=144 stl=X off=11) assign (__tmp.378)  <518>;
                (b.395 var=145 stl=X off=12) assign (__tmp.388)  <519>;
                (__link.396 var=147 stl=X off=1) assign (__link.393)  <520>;
                (z.397 var=32 stl=X off=10) Ff32_add (__link.396 a.394 b.395)  <521>;
                (z.398 var=32) deassign (z.397)  <522>;
            } #106 off=25
            #111 off=26
            (__ct_1050288256.280 var=111) const ()  <309>;
            (__link.403 var=141) w32_jal_t21s_s2 (f32_mul.344)  <530>;
            call {
                (a.404 var=138 stl=X off=11) assign (y.368)  <531>;
                (b.405 var=139 stl=X off=12) assign (__ct_1050288256.280)  <532>;
                (__link.406 var=141 stl=X off=1) assign (__link.403)  <533>;
                (__tmp.407 var=113 stl=X off=10) Ff32_mul (__link.406 a.404 b.405)  <534>;
                (__tmp.408 var=113) deassign (__tmp.407)  <535>;
            } #112 off=27
            #127 off=28
            (__R_SP.430 var=12 __sp.431 var=18) wr_res_reg (__tmp.95 __sp.31)  <646>;
            () void_j_t21s_s2 (f32_add.354)  <651>;
            call {
                (a.414 var=144 stl=X off=11) assign (z.398)  <544>;
                (b.415 var=145 stl=X off=12) assign (__tmp.408)  <545>;
                (__la.416 var=20 stl=X off=1) assign (__la.20)  <546>;
                (__rt.417 var=21 stl=X off=10) Ff32_add (__la.416 a.414 b.415)  <547>;
                (__rt.418 var=21) deassign (__rt.417)  <548>;
            } #118 off=29
            #128 off=30 nxt=-2
            (__rt.432 var=21 stl=X off=10) assign (__rt.418)  <648>;
            () out (__rt.432)  <649>;
            () sink (__sp.431)  <650>;
        } #32
        {
        } #36
    } #29
} #0
0 : 'src/math.c';
----------
0 : (0,1161:0,0);
3 : (0,1176:11,7);
4 : (0,1176:4,7);
6 : (0,1176:25,8);
7 : (0,1177:27,8);
8 : (0,1177:8,8);
13 : (0,1178:12,17);
14 : (0,1177:8,21);
16 : (0,1179:14,24);
17 : (0,1179:8,24);
19 : (0,1179:18,25);
21 : (0,1179:18,25);
22 : (0,1179:18,25);
23 : (0,1179:8,28);
26 : (0,1176:4,37);
28 : (0,1183:11,40);
29 : (0,1183:4,40);
31 : (0,1183:26,41);
32 : (0,1183:26,43);
34 : (0,1189:30,49);
43 : (0,1179:27,25);
44 : (0,1179:27,25);
50 : (0,1179:30,25);
57 : (0,1180:19,32);
58 : (0,1180:19,32);
64 : (0,1183:26,41);
80 : (0,1189:30,49);
83 : (0,1187:9,47);
84 : (0,1187:9,47);
89 : (0,1189:10,49);
90 : (0,1189:10,49);
99 : (0,1189:29,49);
100 : (0,1189:29,49);
105 : (0,1189:21,49);
106 : (0,1189:21,49);
111 : (0,1190:15,50);
112 : (0,1190:15,50);
118 : (0,1190:13,50);
123 : (0,1190:4,55);
124 : (0,1190:4,55);
127 : (0,1190:4,55);
128 : (0,1190:4,55);
----------
37 : (0,1161:6,0);
38 : (0,1161:6,0);
40 : (0,1161:6,0);
41 : (0,1161:6,0);
56 : (0,1175:6,0);
58 : (0,1176:13,0);
77 : (0,1176:4,7);
78 : (0,1177:16,0);
80 : (0,1177:15,8);
83 : (0,1177:27,8);
100 : (0,1177:8,8);
103 : (0,1178:19,0);
105 : (0,1178:12,0);
106 : (0,1178:12,0);
108 : (0,1178:12,0);
109 : (0,1178:12,17);
110 : (0,1178:12,17);
111 : (0,1178:32,0);
153 : (0,1179:14,24);
170 : (0,1179:8,24);
179 : (0,1179:18,25);
181 : (0,1179:30,0);
224 : (0,1180:22,0);
235 : (0,1176:4,39);
237 : (0,1176:4,39);
244 : (0,1183:14,0);
246 : (0,1183:11,40);
263 : (0,1183:4,40);
265 : (0,1184:14,0);
267 : (0,1184:12,44);
268 : (0,1184:18,0);
270 : (0,1184:17,44);
271 : (0,1184:6,44);
273 : (0,1185:23,0);
275 : (0,1185:22,45);
276 : (0,1185:36,0);
278 : (0,1185:34,45);
280 : (0,1186:13,0);
282 : (0,1186:12,46);
285 : (0,1186:31,46);
288 : (0,1186:34,46);
289 : (0,1186:24,46);
290 : (0,1187:18,47);
293 : (0,1189:11,0);
296 : (0,1189:23,0);
298 : (0,1189:35,0);
302 : (0,1189:30,49);
303 : (0,1189:30,0);
304 : (0,1189:30,49);
309 : (0,1190:16,0);
396 : (0,1180:10,0);
398 : (0,1184:17,0);
427 : (0,1179:27,0);
428 : (0,1179:27,25);
429 : (0,1179:27,25);
430 : (0,1179:27,25);
431 : (0,1179:27,25);
432 : (0,1179:27,25);
433 : (0,1179:27,25);
440 : (0,1179:30,0);
442 : (0,1179:30,25);
443 : (0,1179:30,25);
444 : (0,1179:30,25);
445 : (0,1179:30,25);
446 : (0,1179:30,25);
453 : (0,1180:19,0);
454 : (0,1180:19,32);
455 : (0,1180:19,32);
456 : (0,1180:19,32);
457 : (0,1180:19,32);
458 : (0,1180:19,32);
459 : (0,1180:19,32);
466 : (0,1183:34,0);
468 : (0,1183:34,41);
469 : (0,1183:34,41);
470 : (0,1183:34,41);
471 : (0,1183:34,41);
472 : (0,1183:34,41);
478 : (0,1187:9,0);
479 : (0,1187:9,47);
480 : (0,1187:9,47);
481 : (0,1187:9,47);
482 : (0,1187:9,47);
483 : (0,1187:9,47);
491 : (0,1189:10,49);
492 : (0,1189:10,49);
493 : (0,1189:10,49);
494 : (0,1189:10,49);
495 : (0,1189:10,49);
496 : (0,1189:10,49);
504 : (0,1189:29,49);
505 : (0,1189:29,49);
506 : (0,1189:29,49);
507 : (0,1189:29,49);
508 : (0,1189:29,49);
509 : (0,1189:29,49);
517 : (0,1189:21,49);
518 : (0,1189:21,49);
519 : (0,1189:21,49);
520 : (0,1189:21,49);
521 : (0,1189:21,49);
522 : (0,1189:21,49);
530 : (0,1190:15,50);
531 : (0,1190:15,50);
532 : (0,1190:15,50);
533 : (0,1190:15,50);
534 : (0,1190:15,50);
535 : (0,1190:15,50);
544 : (0,1190:13,50);
545 : (0,1190:13,50);
546 : (0,1190:13,50);
547 : (0,1190:13,50);
548 : (0,1190:13,50);
610 : (0,1176:11,7);
639 : (0,1179:30,25);
640 : (0,1190:4,55);
642 : (0,1190:4,0);
645 : (0,1183:34,41);
646 : (0,1190:4,55);
648 : (0,1190:4,0);
651 : (0,1190:13,50);
653 : (0,1177:8,8);
657 : (0,1179:8,24);
661 : (0,1176:4,7);
666 : (0,1183:4,40);

