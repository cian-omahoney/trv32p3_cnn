
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 15:58:01 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float roundf(float)
Froundf : user_defined, called {
    fnm : "roundf" 'float roundf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
}
****
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : roundf typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__ffloat__
   22 : x typ=w32 bnd=p tref=__ffloat__
   23 : __ct_0S0 typ=w32 val=0S0 bnd=m
   25 : __tmp typ=w32 bnd=m
   26 : w typ=w32 bnd=m tref=u_int32_t__
   27 : exponent_less_127 typ=w32 bnd=m tref=__sint__
   28 : exponent_mask typ=w32 bnd=m lscp=17 tref=u_int32_t__
   31 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   33 : __tmp typ=w32 bnd=m
   34 : __ct_23 typ=w32 val=23f bnd=m
   36 : __tmp typ=w32 bnd=m
   43 : __tmp typ=bool bnd=m
   44 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   46 : __tmp typ=bool bnd=m
   47 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
   50 : __ct_m1 typ=w32 val=-1f bnd=m
   52 : __tmp typ=bool bnd=m
   53 : __ct_1065353216 typ=t20s_rp12 val=260096f bnd=m
   56 : __ct_8388607 typ=w32 val=8388607f bnd=m
   59 : __tmp typ=w32 bnd=m
   62 : __tmp typ=bool bnd=m
   63 : __ct_0s0 typ=w32 val=0s0 bnd=m
   65 : __tmp typ=w32 bnd=m
   66 : __ct_4194304 typ=t20s_rp12 val=1024f bnd=m
   68 : __tmp typ=w32 bnd=m
   70 : __tmp typ=w32 bnd=m
   74 : __ct_128 typ=w32 val=128f bnd=m
   76 : __tmp typ=bool bnd=m
   86 : __ct_m127 typ=w32 val=-127f bnd=m
   96 : a typ=w32 bnd=m tref=float32_t__
   97 : b typ=w32 bnd=m tref=float32_t__
   98 : f32_add typ=t21s_s2 val=0r bnd=m
  110 : __either typ=bool bnd=m
  111 : __trgt typ=t13s_s2 val=0j bnd=m
  112 : __trgt typ=t21s_s2 val=0j bnd=m
  113 : __trgt typ=t13s_s2 val=0j bnd=m
  114 : __trgt typ=t13s_s2 val=0j bnd=m
  115 : __trgt typ=t21s_s2 val=0j bnd=m
  116 : __trgt typ=t13s_s2 val=0j bnd=m
  117 : __trgt typ=t13s_s2 val=0j bnd=m
  118 : __trgt typ=t21s_s2 val=0j bnd=m
]
Froundf {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x.23 var=22 stl=X off=11) inp ()  <34>;
    (x.24 var=22) deassign (x.23)  <35>;
    (__rd___sp.26 var=19) rd_res_reg (__R_SP.11 __sp.17)  <37>;
    (__ct_0S0.27 var=23) const ()  <38>;
    (__tmp.29 var=25) __Pvoid__pl___Pvoid___sint (__rd___sp.26 __ct_0S0.27)  <40>;
    (__R_SP.30 var=12 __sp.31 var=18) wr_res_reg (__tmp.29 __sp.17)  <41>;
    (__ct_2139095040.39 var=31) const ()  <50>;
    (__tmp.41 var=33) __uint__ad___uint___uint (x.24 __ct_2139095040.39)  <52>;
    (__ct_23.42 var=34) const ()  <53>;
    (__tmp.44 var=36) __uint__rs___uint___sint (__tmp.41 __ct_23.42)  <55>;
    (exponent_less_127.48 var=27) __sint__pl___sint___sint (__tmp.44 __ct_m127.224)  <59>;
    (__tmp.51 var=43) bool__lt___sint___sint (exponent_less_127.48 __ct_23.42)  <62>;
    (__rd___sp.121 var=19) rd_res_reg (__R_SP.11 __sp.31)  <136>;
    (__ct_0s0.122 var=63) const ()  <137>;
    (__tmp.124 var=65) __Pvoid__pl___Pvoid___sint (__rd___sp.121 __ct_0s0.122)  <139>;
    (__ct_m127.224 var=86) const ()  <284>;
    (__trgt.265 var=117) const ()  <422>;
    () void_br_bool_t13s_s2 (__tmp.51 __trgt.265)  <423>;
    (__either.266 var=110) undefined ()  <424>;
    if {
        {
            () if_expr (__either.266)  <75>;
        } #5
        {
            #7 off=7
            (__ct_0.64 var=44) const ()  <76>;
            (__tmp.66 var=46) bool__lt___sint___sint (exponent_less_127.48 __ct_0.64)  <78>;
            (__ct_m1.82 var=50) const ()  <95>;
            (__trgt.260 var=114) const ()  <414>;
            () void_br_bool_t13s_s2 (__tmp.66 __trgt.260)  <415>;
            (__either.261 var=110) undefined ()  <416>;
            if {
                {
                    () if_expr (__either.261)  <91>;
                } #9
                {
                    #11 off=12
                    (__ct_2147483648.79 var=47) const ()  <92>;
                    (w.81 var=26) __uint__ad___uint___uint (x.24 __ct_2147483648.79)  <94>;
                    (__tmp.247 var=52) bool__ne___sint___sint (exponent_less_127.48 __ct_m1.82)  <379>;
                    (__trgt.255 var=111) const ()  <405>;
                    () void_br_bool_t13s_s2 (__tmp.247 __trgt.255)  <406>;
                    (__either.256 var=110) undefined ()  <407>;
                    if {
                        {
                            () if_expr (__either.256)  <110>;
                        } #13
                        {
                        } #15 off=14
                        {
                            (__ct_1065353216.97 var=53) const ()  <111>;
                            (w.99 var=26) __uint__or___uint___uint (w.81 __ct_1065353216.97)  <113>;
                            (__trgt.257 var=112) const ()  <408>;
                            () void_j_t21s_s2 (__trgt.257)  <409>;
                        } #14 off=13
                        {
                            (w.100 var=26) merge (w.81 w.99)  <114>;
                        } #16
                    } #12
                } #10
                {
                    #18 off=8
                    (__ct_8388607.102 var=56) const ()  <116>;
                    (exponent_mask.104 var=28) __uint__rs___uint___sint (__ct_8388607.102 exponent_less_127.48)  <118>;
                    (__tmp.105 var=59) __uint__ad___uint___uint (x.24 exponent_mask.104)  <119>;
                    (__tmp.108 var=62) bool__eq___uint___uint (__tmp.105 __ct_0.64)  <122>;
                    (__trgt.258 var=113) const ()  <410>;
                    () void_br_bool_t13s_s2 (__tmp.108 __trgt.258)  <411>;
                    (__either.259 var=110) undefined ()  <412>;
                    if {
                        {
                            () if_expr (__either.259)  <135>;
                            () chess_rear_then ()  <413>;
                        } #20
                        {
                            (__R_SP.125 var=12 __sp.126 var=18) wr_res_reg (__tmp.124 __sp.31)  <140>;
                            () void___rts_jr_w32 (__la.20)  <141>;
                            (__rt.127 var=21 stl=X off=10) assign (x.24)  <142>;
                            () out (__rt.127)  <143>;
                            () sink (__sp.126)  <149>;
                        } #23 off=10 nxt=-2
                        {
                        } #24 off=9
                        {
                        } #25
                    } #19
                    #42 off=11
                    (__ct_4194304.152 var=66) const ()  <174>;
                    (__tmp.154 var=68) __uint__rs___uint___sint (__ct_4194304.152 exponent_less_127.48)  <176>;
                    (w.155 var=26) __uint__pl___uint___uint (x.24 __tmp.154)  <177>;
                    (w.157 var=26) __uint__ad___uint___uint (w.155 __tmp.229)  <179>;
                    (__tmp.229 var=70) __uint__er___uint___uint (exponent_mask.104 __ct_m1.82)  <306>;
                    (__trgt.262 var=115) const ()  <417>;
                    () void_j_t21s_s2 (__trgt.262)  <418>;
                } #17
                {
                    (w.165 var=26) merge (w.100 w.157)  <187>;
                } #27
            } #8
        } #6
        {
            #30 off=1
            (__ct_128.172 var=74) const ()  <194>;
            (__tmp.248 var=76) bool__ne___sint___sint (exponent_less_127.48 __ct_128.172)  <380>;
            (__trgt.263 var=116) const ()  <419>;
            () void_br_bool_t13s_s2 (__tmp.248 __trgt.263)  <420>;
            (__either.264 var=110) undefined ()  <421>;
            if {
                {
                    () if_expr (__either.264)  <209>;
                } #32
                {
                } #34 off=5
                {
                    #54 off=2
                    (f32_add.235 var=98) const ()  <331>;
                    (__R_SP.251 var=12 __sp.252 var=18) wr_res_reg (__tmp.124 __sp.31)  <398>;
                    () void_j_t21s_s2 (f32_add.235)  <403>;
                    call {
                        (a.237 var=96 stl=X off=11) assign (x.24)  <333>;
                        (b.238 var=97 stl=X off=12) assign (x.24)  <334>;
                        (__la.239 var=20 stl=X off=1) assign (__la.20)  <335>;
                        (__rt.240 var=21 stl=X off=10) Ff32_add (__la.239 a.237 b.238)  <336>;
                        (__rt.241 var=21) deassign (__rt.240)  <337>;
                    } #49 off=3
                    #55 off=4 nxt=-2
                    (__rt.253 var=21 stl=X off=10) assign (__rt.241)  <400>;
                    () out (__rt.253)  <401>;
                    () sink (__sp.252)  <402>;
                } #33
                {
                } #35
            } #31
            #59 off=6
            (__trgt.267 var=118) const ()  <425>;
            () void_j_t21s_s2 (__trgt.267)  <426>;
        } #29
        {
            (__rt.200 var=21) merge (w.165 x.24)  <223>;
        } #36
    } #4
    #38 off=17 nxt=-2
    (__R_SP.205 var=12 __sp.206 var=18) wr_res_reg (__tmp.124 __sp.31)  <228>;
    () void___rts_jr_w32 (__la.20)  <229>;
    (__rt.207 var=21 stl=X off=10) assign (__rt.200)  <230>;
    () out (__rt.207)  <231>;
    () sink (__sp.206)  <237>;
} #0
0 : 'src/math.c';
----------
0 : (0,281:0,0);
3 : (0,292:24,6);
4 : (0,292:2,6);
6 : (0,314:6,7);
7 : (0,294:28,7);
8 : (0,294:6,7);
10 : (0,295:8,8);
11 : (0,297:32,9);
12 : (0,297:10,9);
14 : (0,299:14,10);
15 : (0,297:10,12);
17 : (0,302:8,17);
18 : (0,304:34,18);
19 : (0,304:10,18);
23 : (0,306:12,19);
24 : (0,304:10,22);
29 : (0,313:4,35);
30 : (0,314:28,35);
31 : (0,314:6,35);
33 : (0,318:8,36);
34 : (0,316:8,39);
38 : (0,321:2,48);
42 : (0,309:12,26);
49 : (0,318:8,36);
54 : (0,321:2,48);
55 : (0,321:2,48);
----------
37 : (0,281:6,0);
38 : (0,281:6,0);
40 : (0,281:6,0);
41 : (0,281:6,0);
50 : (0,290:31,0);
52 : (0,290:31,5);
53 : (0,290:48,0);
55 : (0,290:45,5);
59 : (0,290:52,5);
62 : (0,292:24,6);
75 : (0,292:2,6);
76 : (0,294:30,0);
78 : (0,294:28,7);
91 : (0,294:6,7);
92 : (0,296:15,0);
94 : (0,296:12,8);
95 : (0,297:35,0);
110 : (0,297:10,9);
111 : (0,299:33,0);
113 : (0,299:14,10);
114 : (0,297:10,14);
116 : (0,303:36,0);
118 : (0,303:58,17);
119 : (0,304:17,18);
122 : (0,304:34,18);
135 : (0,304:10,18);
136 : (0,306:12,0);
137 : (0,306:12,0);
139 : (0,306:12,0);
140 : (0,306:12,19);
141 : (0,306:12,19);
142 : (0,306:19,0);
174 : (0,308:15,0);
176 : (0,308:37,25);
177 : (0,308:12,25);
179 : (0,309:12,26);
187 : (0,294:6,29);
194 : (0,314:31,0);
209 : (0,314:6,35);
223 : (0,292:2,46);
228 : (0,321:2,48);
229 : (0,321:2,48);
230 : (0,321:2,0);
284 : (0,290:52,0);
306 : (0,309:15,26);
331 : (0,316:17,0);
333 : (0,316:17,36);
334 : (0,316:17,36);
335 : (0,316:17,36);
336 : (0,316:17,36);
337 : (0,316:17,36);
379 : (0,297:32,9);
380 : (0,314:28,35);
398 : (0,321:2,48);
400 : (0,321:2,0);
403 : (0,316:17,36);
406 : (0,297:10,9);
411 : (0,304:10,18);
415 : (0,294:6,7);
420 : (0,314:6,35);
423 : (0,292:2,6);

