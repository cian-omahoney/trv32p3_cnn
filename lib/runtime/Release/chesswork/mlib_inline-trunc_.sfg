
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 12:18:42 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/mlib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline double trunc(double)
Ftrunc : user_defined, called {
    fnm : "trunc" 'double trunc(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
!! extern double ceil(double)
Fceil : user_defined, called {
    fnm : "ceil" 'double ceil(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
}
!! extern double floor(double)
Ffloor : user_defined, called {
    fnm : "floor" 'double floor(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
}
!!  bool f64_lt(float64_t, float64_t)
Ff64_lt : user_defined, called {
    fnm : "f64_lt" 'bool f64_lt(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
***/

[
    0 : trunc typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   22 : __rt_low typ=w32 bnd=m tref=__uint__
   23 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : x_low typ=w32 bnd=m tref=__uint__
   26 : x_high typ=w32 bnd=m tref=__uint__
   27 : __ct_0S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   32 : __tmp typ=bool bnd=m
   35 : ceil typ=t21s_s2 val=0r bnd=m
   38 : __tmp typ=w32 bnd=m
   39 : __tmp typ=w32 bnd=m
   42 : floor typ=t21s_s2 val=0r bnd=m
   45 : __tmp typ=w32 bnd=m
   46 : __tmp typ=w32 bnd=m
   48 : __ct_0s0 typ=w32 val=0s0 bnd=m
   50 : __tmp typ=w32 bnd=m
   60 : a_low typ=w32 bnd=m tref=__uint__
   61 : a_high typ=w32 bnd=m tref=__uint__
   62 : b_low typ=w32 bnd=m tref=__uint__
   63 : b_high typ=w32 bnd=m tref=__uint__
   64 : f64_lt typ=t21s_s2 val=0r bnd=m
   65 : __link typ=w32 bnd=m
   66 : __tmp typ=w32 bnd=m
   67 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   80 : __either typ=bool bnd=m
   81 : __trgt typ=t13s_s2 val=0j bnd=m
]
Ftrunc {
    #19 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x_low.28 var=25 stl=X off=12) inp ()  <39>;
    (x_low.29 var=25) deassign (x_low.28)  <40>;
    (x_high.32 var=26 stl=X off=13) inp ()  <43>;
    (x_high.33 var=26) deassign (x_high.32)  <44>;
    (__rd___sp.36 var=19) rd_res_reg (__R_SP.11 __sp.17)  <47>;
    (__ct_0S0.37 var=27) const ()  <48>;
    (__tmp.39 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0S0.37)  <50>;
    (__R_SP.40 var=12 __sp.41 var=18) wr_res_reg (__tmp.39 __sp.17)  <51>;
    (f64_lt.130 var=64) const ()  <170>;
    (__link.131 var=65) w32_jal_t21s_s2 (f64_lt.130)  <171>;
    (__ct_0.132 var=67) const ()  <172>;
    call {
        (a_low.133 var=60 stl=X off=11) assign (x_low.29)  <173>;
        (a_high.134 var=61 stl=X off=12) assign (x_high.33)  <174>;
        (b_low.135 var=62 stl=X off=13) assign (__ct_0.132)  <175>;
        (b_high.136 var=63 stl=X off=14) assign (__ct_0.132)  <176>;
        (__link.137 var=65 stl=X off=1) assign (__link.131)  <177>;
        (__tmp.138 var=66 stl=X off=10) Ff64_lt (__link.137 a_low.133 a_high.134 b_low.135 b_high.136)  <178>;
        (__tmp.139 var=66) deassign (__tmp.138)  <179>;
    } #20 off=1
    #21 off=2
    (__ct_0s0.92 var=48) const ()  <102>;
    (__tmp.140 var=32) bool__ne___sint___sint (__tmp.139 __ct_0.132)  <180>;
    (__trgt.163 var=81) const ()  <249>;
    () void_br_bool_t13s_s2 (__tmp.140 __trgt.163)  <250>;
    (__either.164 var=80) undefined ()  <251>;
    if {
        {
            () if_expr (__either.164)  <65>;
        } #5
        {
            #25 off=6
            (ceil.60 var=35) const ()  <72>;
            (__rd___sp.151 var=19) rd_res_reg (__R_SP.11 __sp.41)  <229>;
            (__tmp.152 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.151 __ct_0s0.92)  <230>;
            (__R_SP.153 var=12 __sp.154 var=18) wr_res_reg (__tmp.152 __sp.41)  <231>;
            () void_j_t21s_s2 (ceil.60)  <238>;
            call {
                (x_low.55 var=25 stl=X off=12) assign (x_low.29)  <67>;
                (x_high.57 var=26 stl=X off=13) assign (x_high.33)  <69>;
                (__la.62 var=20 stl=X off=1) assign (__la.20)  <74>;
                (__tmp.64 var=38 stl=X off=10 __tmp.68 var=39 stl=X off=11) Fceil (__la.62 x_low.55 x_high.57)  <75>;
                (__tmp.65 var=38) deassign (__tmp.64)  <77>;
                (__tmp.69 var=39) deassign (__tmp.68)  <80>;
            } #8 off=7
            #26 off=8 nxt=-2
            (__rt_low.155 var=22 stl=X off=10) assign (__tmp.65)  <233>;
            () out (__rt_low.155)  <234>;
            (__rt_high.156 var=23 stl=X off=11) assign (__tmp.69)  <235>;
            () out (__rt_high.156)  <236>;
            () sink (__sp.154)  <237>;
        } #6
        {
            #29 off=3
            (floor.78 var=42) const ()  <89>;
            (__rd___sp.157 var=19) rd_res_reg (__R_SP.11 __sp.41)  <239>;
            (__tmp.158 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.157 __ct_0s0.92)  <240>;
            (__R_SP.159 var=12 __sp.160 var=18) wr_res_reg (__tmp.158 __sp.41)  <241>;
            () void_j_t21s_s2 (floor.78)  <248>;
            call {
                (x_low.73 var=25 stl=X off=12) assign (x_low.29)  <84>;
                (x_high.75 var=26 stl=X off=13) assign (x_high.33)  <86>;
                (__la.80 var=20 stl=X off=1) assign (__la.20)  <91>;
                (__tmp.82 var=45 stl=X off=10 __tmp.86 var=46 stl=X off=11) Ffloor (__la.80 x_low.73 x_high.75)  <92>;
                (__tmp.83 var=45) deassign (__tmp.82)  <94>;
                (__tmp.87 var=46) deassign (__tmp.86)  <97>;
            } #11 off=4
            #30 off=5 nxt=-2
            (__rt_low.161 var=22 stl=X off=10) assign (__tmp.83)  <243>;
            () out (__rt_low.161)  <244>;
            (__rt_high.162 var=23 stl=X off=11) assign (__tmp.87)  <245>;
            () out (__rt_high.162)  <246>;
            () sink (__sp.160)  <247>;
        } #9
        {
        } #12
    } #4
} #0
0 : 'include/math.h';
----------
0 : (0,85:21,0);
4 : (0,85:48,1);
6 : (0,85:50,2);
8 : (0,85:50,2);
9 : (0,85:61,3);
11 : (0,85:61,3);
19 : (0,85:42,1);
20 : (0,85:42,1);
21 : (0,85:42,1);
25 : (0,85:33,5);
26 : (0,85:33,5);
29 : (0,85:33,5);
30 : (0,85:33,5);
----------
47 : (0,85:21,0);
48 : (0,85:21,0);
50 : (0,85:21,0);
51 : (0,85:21,0);
65 : (0,85:48,1);
67 : (0,85:56,0);
69 : (0,85:56,0);
74 : (0,85:50,0);
75 : (0,85:50,2);
84 : (0,85:68,0);
86 : (0,85:68,0);
91 : (0,85:61,0);
92 : (0,85:61,3);
102 : (0,85:33,0);
170 : (0,85:42,0);
171 : (0,85:42,1);
172 : (0,85:42,0);
173 : (0,85:42,1);
174 : (0,85:42,1);
175 : (0,85:42,1);
176 : (0,85:42,1);
177 : (0,85:42,1);
178 : (0,85:42,1);
179 : (0,85:42,1);
180 : (0,85:42,1);
229 : (0,85:33,0);
230 : (0,85:33,0);
231 : (0,85:33,5);
233 : (0,85:48,0);
235 : (0,85:48,0);
238 : (0,85:50,2);
239 : (0,85:33,0);
240 : (0,85:33,0);
241 : (0,85:33,5);
243 : (0,85:48,0);
245 : (0,85:48,0);
248 : (0,85:61,3);
250 : (0,85:48,1);

