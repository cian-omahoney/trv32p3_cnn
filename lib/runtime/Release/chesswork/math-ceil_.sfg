
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:32:09 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern double ceil(double)
Fceil : user_defined, called {
    fnm : "ceil" 'double ceil(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
!!  bool f64_lt(float64_t, float64_t)
Ff64_lt : user_defined, called {
    fnm : "f64_lt" 'bool f64_lt(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : ceil typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   22 : __rt_low typ=w32 bnd=m tref=__uint__
   23 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : x_low typ=w32 bnd=m tref=__uint__
   26 : x_high typ=w32 bnd=m tref=__uint__
   27 : __ct_0S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   30 : i0 typ=w32 bnd=m tref=int32_t__
   31 : i1 typ=w32 bnd=m tref=int32_t__
   32 : j0 typ=w32 bnd=m tref=int32_t__
   33 : i typ=w32 bnd=m tref=u_int32_t__
   34 : j typ=w32 bnd=m tref=u_int32_t__
   47 : __ct_20 typ=w32 val=20f bnd=m
   49 : __tmp typ=w32 bnd=m
   50 : __ct_2047 typ=w32 val=2047f bnd=m
   52 : __tmp typ=w32 bnd=m
   58 : __tmp typ=bool bnd=m
   59 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   61 : __tmp typ=bool bnd=m
   67 : __tmp typ=bool bnd=m
   70 : __tmp typ=bool bnd=m
   71 : __ct_m2147483648 typ=t20s_rp12 val=-524288f bnd=m
   75 : __tmp typ=w32 bnd=m
   78 : __tmp typ=bool bnd=m
   79 : __ct_1072693248 typ=t20s_rp12 val=261888f bnd=m
   83 : __ct_1048575 typ=w32 val=1048575f bnd=m
   87 : __tmp typ=w32 bnd=m
   89 : __tmp typ=w32 bnd=m
   92 : __tmp typ=bool bnd=m
   93 : __ct_0s0 typ=w32 val=0s0 bnd=m
   95 : __tmp typ=w32 bnd=m
  104 : __tmp typ=bool bnd=m
  106 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
  108 : __tmp typ=w32 bnd=m
  109 : __tmp typ=w32 bnd=m
  112 : __tmp typ=w32 bnd=m
  113 : __tmp typ=w32 bnd=m
  117 : __ct_51 typ=w32 val=51f bnd=m
  119 : __tmp typ=bool bnd=m
  120 : __ct_1024 typ=w32 val=1024f bnd=m
  122 : __tmp typ=bool bnd=m
  127 : __ct_4294967295 typ=w32 val=-1f bnd=m
  131 : __tmp typ=w32 bnd=m
  134 : __tmp typ=w32 bnd=m
  137 : __tmp typ=bool bnd=m
  152 : __tmp typ=bool bnd=m
  153 : __ct_1 typ=w32 val=1f bnd=m
  159 : __ct_52 typ=w32 val=52f bnd=m
  161 : __tmp typ=w32 bnd=m
  162 : __tmp typ=w32 bnd=m
  165 : __tmp typ=bool bnd=m
  171 : __tmp typ=w32 bnd=m
  172 : __tmp typ=w32 bnd=m
  191 : __ct_m1023 typ=w32 val=-1023f bnd=m
  192 : __ct_m20 typ=w32 val=-20f bnd=m
  278 : a_low typ=w32 bnd=m tref=__uint__
  279 : a_high typ=w32 bnd=m tref=__uint__
  280 : b_low typ=w32 bnd=m tref=__uint__
  281 : b_high typ=w32 bnd=m tref=__uint__
  282 : f64_lt typ=t21s_s2 val=0r bnd=m
  283 : __link typ=w32 bnd=m
  284 : __tmp typ=w32 bnd=m
  302 : a_low typ=w32 bnd=m tref=__uint__
  303 : a_high typ=w32 bnd=m tref=__uint__
  304 : b_low typ=w32 bnd=m tref=__uint__
  305 : b_high typ=w32 bnd=m tref=__uint__
  306 : f64_add typ=t21s_s2 val=0r bnd=m
  307 : __link typ=w32 bnd=m
  309 : __tmp typ=w32 bnd=m
  310 : __tmp typ=w32 bnd=m
  325 : i0 typ=w32 bnd=m
  326 : i0 typ=w32 bnd=m
  327 : i1 typ=w32 bnd=m
  328 : i1 typ=w32 bnd=m
  329 : i1 typ=w32 bnd=m
  330 : __ct_2281731484 typ=w32 val=-2013235812f bnd=m
  331 : __ct_2117592124 typ=w32 val=2117592124f bnd=m
  340 : __either typ=bool bnd=m
  341 : __trgt typ=t13s_s2 val=0j bnd=m
  342 : __trgt typ=t21s_s2 val=0j bnd=m
  343 : __trgt typ=t13s_s2 val=0j bnd=m
  344 : __trgt typ=t21s_s2 val=0j bnd=m
  345 : __trgt typ=t13s_s2 val=0j bnd=m
  346 : __trgt typ=t21s_s2 val=0j bnd=m
  347 : __trgt typ=t13s_s2 val=0j bnd=m
  348 : __trgt typ=t13s_s2 val=0j bnd=m
  349 : __trgt typ=t21s_s2 val=0j bnd=m
  350 : __trgt typ=t13s_s2 val=0j bnd=m
  351 : __trgt typ=t21s_s2 val=0j bnd=m
  352 : __trgt typ=t13s_s2 val=0j bnd=m
  353 : __trgt typ=t21s_s2 val=0j bnd=m
  354 : __trgt typ=t13s_s2 val=0j bnd=m
  355 : __trgt typ=t13s_s2 val=0j bnd=m
  356 : __trgt typ=t13s_s2 val=0j bnd=m
  357 : __trgt typ=t21s_s2 val=0j bnd=m
  358 : __trgt typ=t13s_s2 val=0j bnd=m
  359 : __trgt typ=t21s_s2 val=0j bnd=m
  360 : __trgt typ=t13s_s2 val=0j bnd=m
  361 : __trgt typ=t21s_s2 val=0j bnd=m
  362 : __trgt typ=t13s_s2 val=0j bnd=m
  363 : __trgt typ=t21s_s2 val=0j bnd=m
  364 : __trgt typ=t13s_s2 val=0j bnd=m
  365 : __trgt typ=t13s_s2 val=0j bnd=m
  366 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fceil {
    #223 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x_low.28 var=25 stl=X off=12) inp ()  <39>;
    (x_low.29 var=25) deassign (x_low.28)  <40>;
    (x_high.32 var=26 stl=X off=13) inp ()  <43>;
    (x_high.33 var=26) deassign (x_high.32)  <44>;
    (__rd___sp.36 var=19) rd_res_reg (__R_SP.11 __sp.17)  <47>;
    (__ct_0S0.37 var=27) const ()  <48>;
    (__tmp.39 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0S0.37)  <50>;
    (__R_SP.40 var=12 __sp.41 var=18) wr_res_reg (__tmp.39 __sp.17)  <51>;
    (f64_add.870 var=306) const ()  <1133>;
    (__link.871 var=307) w32_jal_t21s_s2 (f64_add.870)  <1134>;
    (__ct_2281731484.926 var=330) const ()  <1224>;
    (__ct_2117592124.927 var=331) const ()  <1226>;
    call {
        (a_low.872 var=302 stl=X off=12) assign (__ct_2281731484.926)  <1135>;
        (a_high.873 var=303 stl=X off=13) assign (__ct_2117592124.927)  <1136>;
        (b_low.874 var=304 stl=X off=14) assign (x_low.29)  <1137>;
        (b_high.875 var=305 stl=X off=15) assign (x_high.33)  <1138>;
        (__link.876 var=307 stl=X off=1) assign (__link.871)  <1139>;
        (__tmp.877 var=309 stl=X off=10 __tmp.878 var=310 stl=X off=11) Ff64_add (__link.876 a_low.872 a_high.873 b_low.874 b_high.875)  <1140>;
        (__tmp.880 var=309) deassign (__tmp.877)  <1142>;
        (__tmp.882 var=310) deassign (__tmp.878)  <1144>;
    } #224 off=1
    #214 off=2
    (__ct_20.64 var=47) const ()  <75>;
    (__tmp.66 var=49) __sint__rs___sint___sint (x_high.33 __ct_20.64)  <77>;
    (__ct_2047.67 var=50) const ()  <78>;
    (__tmp.69 var=52) __sint__ad___sint___sint (__tmp.66 __ct_2047.67)  <80>;
    (j0.72 var=32) __sint__pl___sint___sint (__tmp.69 __ct_m1023.730)  <83>;
    (__ct_0.95 var=59) const ()  <107>;
    (__rd___sp.230 var=19) rd_res_reg (__R_SP.11 __sp.41)  <247>;
    (__ct_m1023.730 var=191) const ()  <832>;
    (f64_lt.838 var=282) const ()  <1045>;
    (__link.839 var=283) w32_jal_t21s_s2 (f64_lt.838)  <1046>;
    call {
        (a_low.841 var=278 stl=X off=11) assign (__ct_0.95)  <1048>;
        (a_high.842 var=279 stl=X off=12) assign (__ct_0.95)  <1049>;
        (b_low.843 var=280 stl=X off=13) assign (__tmp.880)  <1050>;
        (b_high.844 var=281 stl=X off=14) assign (__tmp.882)  <1051>;
        (__link.845 var=283 stl=X off=1) assign (__link.839)  <1052>;
        (__tmp.846 var=284 stl=X off=10) Ff64_lt (__link.845 a_low.841 a_high.842 b_low.843 b_high.844)  <1053>;
        (__tmp.847 var=284) deassign (__tmp.846)  <1054>;
    } #195 off=3
    #196 off=4
    (__ct_0s0.231 var=93) const ()  <248>;
    (__tmp.233 var=95) __Pvoid__pl___Pvoid___sint (__rd___sp.230 __ct_0s0.231)  <250>;
    (__ct_4294967295.438 var=127) const ()  <475>;
    (__trgt.987 var=365) const ()  <1388>;
    () void_br_bool_t13s_s2 (__tmp.990 __trgt.987)  <1389>;
    (__either.988 var=340) undefined ()  <1390>;
    (__tmp.990 var=58) bool__lt___sint___sint (j0.72 __ct_20.64)  <1393>;
    if {
        {
            () if_expr (__either.988)  <106>;
        } #5
        {
            #7 off=29
            (__tmp.97 var=61) bool__lt___sint___sint (j0.72 __ct_0.95)  <109>;
            (__trgt.966 var=352) const ()  <1352>;
            () void_br_bool_t13s_s2 (__tmp.97 __trgt.966)  <1353>;
            (__either.967 var=340) undefined ()  <1354>;
            if {
                {
                    () if_expr (__either.967)  <129>;
                } #9
                {
                    #260 off=40
                    (__trgt.955 var=345) const ()  <1333>;
                    () void_br_bool_t13s_s2 (__tmp.991 __trgt.955)  <1334>;
                    (__either.956 var=340) undefined ()  <1335>;
                    (__tmp.991 var=67) bool__eq___sint___sint (__tmp.847 __ct_0.95)  <1394>;
                    if {
                        {
                            () if_expr (__either.956)  <155>;
                        } #13
                        {
                        } #27 off=48
                        {
                            #15 off=41
                            (__tmp.144 var=70) bool__lt___sint___sint (x_high.33 __ct_0.95)  <158>;
                            (__ct_m2147483648.164 var=71) const ()  <179>;
                            (__trgt.952 var=343) const ()  <1328>;
                            () void_br_bool_t13s_s2 (__tmp.144 __trgt.952)  <1329>;
                            (__either.953 var=340) undefined ()  <1330>;
                            if {
                                {
                                    () if_expr (__either.953)  <178>;
                                } #17
                                {
                                } #18 off=46
                                {
                                    #20 off=42
                                    (__tmp.168 var=75) __sint__or___sint___sint (x_high.33 x_low.29)  <183>;
                                    (__tmp.932 var=78) bool__eq___sint___sint (__tmp.168 __ct_0.95)  <1280>;
                                    (__trgt.949 var=341) const ()  <1323>;
                                    () void_br_bool_t13s_s2 (__tmp.932 __trgt.949)  <1324>;
                                    (__either.950 var=340) undefined ()  <1325>;
                                    if {
                                        {
                                            () if_expr (__either.950)  <206>;
                                        } #22
                                        {
                                        } #24 off=44
                                        {
                                            (__ct_1072693248.191 var=79) const ()  <207>;
                                            (__trgt.951 var=342) const ()  <1326>;
                                            () void_j_t21s_s2 (__trgt.951)  <1327>;
                                        } #23 off=43
                                        {
                                            (i0.195 var=30) merge (x_high.33 __ct_1072693248.191)  <211>;
                                            (i1.196 var=31) merge (x_low.29 __ct_0.95)  <212>;
                                        } #25
                                    } #21
                                    #262 off=45
                                    (__trgt.954 var=344) const ()  <1331>;
                                    () void_j_t21s_s2 (__trgt.954)  <1332>;
                                } #19
                                {
                                    (i0.197 var=30) merge (__ct_m2147483648.164 i0.195)  <213>;
                                    (i1.198 var=31) merge (__ct_0.95 i1.196)  <214>;
                                } #26
                            } #16
                            #263 off=47
                            (__trgt.957 var=346) const ()  <1336>;
                            () void_j_t21s_s2 (__trgt.957)  <1337>;
                        } #14
                        {
                            (i0.199 var=30) merge (x_high.33 i0.197)  <215>;
                            (i1.200 var=31) merge (x_low.29 i1.198)  <216>;
                        } #28
                    } #12
                } #10
                {
                    #30 off=30
                    (__ct_1048575.201 var=83) const ()  <217>;
                    (i.203 var=33) __uint__rs___uint___sint (__ct_1048575.201 j0.72)  <219>;
                    (__tmp.205 var=87) __uint__ad___uint___uint (x_high.33 i.203)  <221>;
                    (__tmp.207 var=89) __uint__or___uint___uint (__tmp.205 x_low.29)  <223>;
                    (__tmp.210 var=92) bool__eq___uint___uint (__tmp.207 __ct_0.95)  <226>;
                    (__trgt.958 var=347) const ()  <1338>;
                    () void_br_bool_t13s_s2 (__tmp.210 __trgt.958)  <1339>;
                    (__either.959 var=340) undefined ()  <1340>;
                    if {
                        {
                            () if_expr (__either.959)  <246>;
                            () chess_rear_then ()  <1341>;
                        } #32
                        {
                            (__R_SP.234 var=12 __sp.235 var=18) wr_res_reg (__tmp.233 __sp.41)  <251>;
                            () void___rts_jr_w32 (__la.20)  <252>;
                            (__rt_low.237 var=22 stl=X off=10) assign (x_low.29)  <254>;
                            () out (__rt_low.237)  <255>;
                            (__rt_high.239 var=23 stl=X off=11) assign (x_high.33)  <257>;
                            () out (__rt_high.239)  <258>;
                            () sink (__sp.235)  <266>;
                        } #35 off=32 nxt=-2
                        {
                        } #36 off=31
                        {
                        } #37
                    } #31
                    #265 off=33
                    (__trgt.963 var=350) const ()  <1347>;
                    () void_br_bool_t13s_s2 (__tmp.992 __trgt.963)  <1348>;
                    (__either.964 var=340) undefined ()  <1349>;
                    (__tmp.992 var=67) bool__eq___sint___sint (__tmp.847 __ct_0.95)  <1395>;
                    if {
                        {
                            () if_expr (__either.964)  <330>;
                        } #40
                        {
                        } #49 off=38
                        {
                            #259 off=34
                            (__trgt.960 var=348) const ()  <1342>;
                            () void_br_bool_t13s_s2 (__tmp.994 __trgt.960)  <1343>;
                            (__either.961 var=340) undefined ()  <1344>;
                            (__tmp.994 var=104) bool__ge___sint___sint (__ct_0.95 x_high.33)  <1397>;
                            if {
                                {
                                    () if_expr (__either.961)  <353>;
                                } #44
                                {
                                } #46 off=36
                                {
                                    (__ct_1048576.328 var=106) const ()  <355>;
                                    (__tmp.330 var=108) __uint__rs___uint___sint (__ct_1048576.328 j0.72)  <357>;
                                    (__tmp.331 var=109) __uint__pl___uint___uint (x_high.33 __tmp.330)  <358>;
                                    (__trgt.962 var=349) const ()  <1345>;
                                    () void_j_t21s_s2 (__trgt.962)  <1346>;
                                } #45 off=35
                                {
                                    (i0.333 var=325) merge (x_high.33 __tmp.331)  <360>;
                                } #47
                            } #43
                            #141 off=37
                            (__tmp.336 var=113) __uint__ad___uint___uint (i0.333 __tmp.773)  <363>;
                            (__tmp.773 var=112) __uint__er___uint___uint (i.203 __ct_4294967295.438)  <913>;
                            (__trgt.965 var=351) const ()  <1350>;
                            () void_j_t21s_s2 (__trgt.965)  <1351>;
                        } #41
                        {
                            (i0.340 var=326) merge (x_high.33 __tmp.336)  <367>;
                            (i1.341 var=31) merge (x_low.29 __ct_0.95)  <368>;
                        } #50
                    } #39
                    #266 off=39
                    (__trgt.968 var=353) const ()  <1355>;
                    () void_j_t21s_s2 (__trgt.968)  <1356>;
                } #29
                {
                    (i0.349 var=30) merge (i0.199 i0.340)  <376>;
                    (i1.351 var=31) merge (i1.200 i1.341)  <378>;
                } #51
            } #8
        } #6
        {
            #146 off=5
            (__ct_51.361 var=117) const ()  <388>;
            (__tmp.777 var=119) bool__lt___sint___sint (__ct_51.361 j0.72)  <920>;
            (__trgt.985 var=364) const ()  <1384>;
            () void_br_bool_t13s_s2 (__tmp.777 __trgt.985)  <1385>;
            (__either.986 var=340) undefined ()  <1386>;
            if {
                {
                    () if_expr (__either.986)  <410>;
                    () chess_rear_then ()  <1387>;
                } #55
                {
                    #57 off=22
                    (__ct_1024.383 var=120) const ()  <411>;
                    (__tmp.936 var=122) bool__ne___sint___sint (j0.72 __ct_1024.383)  <1284>;
                    (__trgt.969 var=354) const ()  <1357>;
                    () void_br_bool_t13s_s2 (__tmp.936 __trgt.969)  <1358>;
                    (__either.970 var=340) undefined ()  <1359>;
                    if {
                        {
                            () if_expr (__either.970)  <433>;
                        } #59
                        {
                        } #61 off=26
                        {
                            #256 off=23
                            (__R_SP.941 var=12 __sp.942 var=18) wr_res_reg (__tmp.233 __sp.41)  <1311>;
                            () void_j_t21s_s2 (f64_add.870)  <1320>;
                            call {
                                (a_low.893 var=302 stl=X off=12) assign (x_low.29)  <1158>;
                                (a_high.894 var=303 stl=X off=13) assign (x_high.33)  <1159>;
                                (b_low.895 var=304 stl=X off=14) assign (x_low.29)  <1160>;
                                (b_high.896 var=305 stl=X off=15) assign (x_high.33)  <1161>;
                                (__la.897 var=20 stl=X off=1) assign (__la.20)  <1162>;
                                (__tmp.898 var=309 stl=X off=10 __tmp.899 var=310 stl=X off=11) Ff64_add (__la.897 a_low.893 a_high.894 b_low.895 b_high.896)  <1163>;
                                (__tmp.901 var=309) deassign (__tmp.898)  <1165>;
                                (__tmp.903 var=310) deassign (__tmp.899)  <1167>;
                            } #233 off=24
                            #257 off=25 nxt=-2
                            (__rt_low.943 var=22 stl=X off=10) assign (__tmp.901)  <1313>;
                            () out (__rt_low.943)  <1314>;
                            (__rt_high.944 var=23 stl=X off=11) assign (__tmp.903)  <1315>;
                            () out (__rt_high.944)  <1316>;
                            () sink (__sp.942)  <1317>;
                        } #60
                        {
                        } #62
                    } #58
                    #64 off=27 nxt=-2
                    (__R_SP.411 var=12 __sp.412 var=18) wr_res_reg (__tmp.233 __sp.41)  <440>;
                    () void___rts_jr_w32 (__la.20)  <441>;
                    (__rt_low.414 var=22 stl=X off=10) assign (x_low.29)  <443>;
                    () out (__rt_low.414)  <444>;
                    (__rt_high.416 var=23 stl=X off=11) assign (x_high.33)  <446>;
                    () out (__rt_high.416)  <447>;
                    () sink (__sp.412)  <455>;
                    (i0.426 var=30) never ()  <463>;
                    (i1.428 var=31) never ()  <465>;
                } #56
                {
                    #66 off=6
                    (__tmp.442 var=131) __sint__pl___sint___sint (j0.72 __ct_m20.731)  <479>;
                    (i.443 var=33) __uint__rs___uint___sint (__ct_4294967295.438 __tmp.442)  <480>;
                    (__tmp.445 var=134) __uint__ad___uint___uint (x_low.29 i.443)  <482>;
                    (__tmp.448 var=137) bool__eq___uint___uint (__tmp.445 __ct_0.95)  <485>;
                    (__ct_m20.731 var=192) const ()  <834>;
                    (__trgt.971 var=355) const ()  <1360>;
                    () void_br_bool_t13s_s2 (__tmp.448 __trgt.971)  <1361>;
                    (__either.972 var=340) undefined ()  <1362>;
                    if {
                        {
                            () if_expr (__either.972)  <505>;
                            () chess_rear_then ()  <1363>;
                        } #68
                        {
                            (__R_SP.472 var=12 __sp.473 var=18) wr_res_reg (__tmp.233 __sp.41)  <510>;
                            () void___rts_jr_w32 (__la.20)  <511>;
                            (__rt_low.475 var=22 stl=X off=10) assign (x_low.29)  <513>;
                            () out (__rt_low.475)  <514>;
                            (__rt_high.477 var=23 stl=X off=11) assign (x_high.33)  <516>;
                            () out (__rt_high.477)  <517>;
                            () sink (__sp.473)  <525>;
                        } #71 off=8 nxt=-2
                        {
                        } #72 off=7
                        {
                        } #73
                    } #67
                    #270 off=9
                    (__trgt.982 var=362) const ()  <1379>;
                    () void_br_bool_t13s_s2 (__tmp.993 __trgt.982)  <1380>;
                    (__either.983 var=340) undefined ()  <1381>;
                    (__tmp.993 var=67) bool__eq___sint___sint (__tmp.847 __ct_0.95)  <1396>;
                    if {
                        {
                            () if_expr (__either.983)  <589>;
                        } #76
                        {
                        } #98 off=20
                        {
                            #261 off=10
                            (__trgt.979 var=360) const ()  <1374>;
                            () void_br_bool_t13s_s2 (__tmp.995 __trgt.979)  <1375>;
                            (__either.980 var=340) undefined ()  <1376>;
                            (__tmp.995 var=104) bool__ge___sint___sint (__ct_0.95 x_high.33)  <1398>;
                            if {
                                {
                                    () if_expr (__either.980)  <612>;
                                } #80
                                {
                                } #95 off=18
                                {
                                    #82 off=11
                                    (__tmp.567 var=152) bool__eq___sint___sint (j0.72 __ct_20.64)  <615>;
                                    (__ct_1.587 var=153) const ()  <636>;
                                    (i0.589 var=30) __sint__pl___sint___sint (x_high.33 __ct_1.587)  <638>;
                                    (__trgt.976 var=358) const ()  <1369>;
                                    () void_br_bool_t13s_s2 (__tmp.567 __trgt.976)  <1370>;
                                    (__either.977 var=340) undefined ()  <1371>;
                                    if {
                                        {
                                            () if_expr (__either.977)  <635>;
                                        } #84
                                        {
                                        } #85 off=16
                                        {
                                            #87 off=12
                                            (__ct_52.593 var=159) const ()  <642>;
                                            (__tmp.595 var=161) __sint__mi___sint___sint (__ct_52.593 j0.72)  <644>;
                                            (__tmp.596 var=162) __uint__ls___uint___sint (__ct_1.587 __tmp.595)  <645>;
                                            (j.597 var=34) __uint__pl___uint___uint (x_low.29 __tmp.596)  <646>;
                                            (__tmp.599 var=165) bool__lt___uint___uint (j.597 x_low.29)  <648>;
                                            (__trgt.973 var=356) const ()  <1364>;
                                            () void_br_bool_t13s_s2 (__tmp.599 __trgt.973)  <1365>;
                                            (__either.974 var=340) undefined ()  <1366>;
                                            if {
                                                {
                                                    () if_expr (__either.974)  <668>;
                                                } #89
                                                {
                                                } #105 off=14
                                                {
                                                    (__trgt.975 var=357) const ()  <1367>;
                                                    () void_j_t21s_s2 (__trgt.975)  <1368>;
                                                } #91 off=13
                                                {
                                                    (i0.622 var=30) merge (i0.589 x_high.33)  <672>;
                                                } #92
                                            } #88
                                            #268 off=15
                                            (__trgt.978 var=359) const ()  <1372>;
                                            () void_j_t21s_s2 (__trgt.978)  <1373>;
                                        } #86
                                        {
                                            (i0.624 var=30) merge (i0.589 i0.622)  <674>;
                                            (i1.625 var=327) merge (x_low.29 j.597)  <675>;
                                        } #94
                                    } #83
                                    #269 off=17
                                    (__trgt.981 var=361) const ()  <1377>;
                                    () void_j_t21s_s2 (__trgt.981)  <1378>;
                                } #81
                                {
                                    (i0.627 var=30) merge (x_high.33 i0.624)  <677>;
                                    (i1.628 var=328) merge (x_low.29 i1.625)  <678>;
                                } #96
                            } #79
                            #149 off=19
                            (__tmp.632 var=172) __uint__ad___uint___uint (i1.628 __tmp.781)  <682>;
                            (__tmp.781 var=171) __uint__er___uint___uint (i.443 __ct_4294967295.438)  <927>;
                            (__trgt.984 var=363) const ()  <1382>;
                            () void_j_t21s_s2 (__trgt.984)  <1383>;
                        } #77
                        {
                            (i0.634 var=30) merge (x_high.33 i0.627)  <684>;
                            (i1.635 var=329) merge (x_low.29 __tmp.632)  <685>;
                        } #99
                    } #75
                } #65
                {
                    (i0.644 var=30) merge (i0.426 i0.634)  <694>;
                    (i1.646 var=31) merge (i1.428 i1.635)  <696>;
                } #100
            } #54
            #272 off=28
            (__trgt.989 var=366) const ()  <1391>;
            () void_j_t21s_s2 (__trgt.989)  <1392>;
        } #52
        {
            (i0.663 var=30) merge (i0.349 i0.644)  <713>;
            (i1.665 var=31) merge (i1.351 i1.646)  <715>;
        } #101
    } #4
    #104 off=51 nxt=-2
    (__R_SP.693 var=12 __sp.694 var=18) wr_res_reg (__tmp.233 __sp.41)  <743>;
    () void___rts_jr_w32 (__la.20)  <744>;
    (__rt_low.696 var=22 stl=X off=10) assign (i1.665)  <746>;
    () out (__rt_low.696)  <747>;
    (__rt_high.698 var=23 stl=X off=11) assign (i0.663)  <749>;
    () out (__rt_high.698)  <750>;
    () sink (__sp.694)  <758>;
} #0
0 : 'src/math.c';
----------
0 : (0,159:0,0);
4 : (0,167:4,7);
6 : (0,167:14,8);
7 : (0,168:13,8);
8 : (0,168:8,8);
10 : (0,168:17,9);
12 : (0,169:12,9);
14 : (0,169:27,10);
15 : (0,170:21,10);
16 : (0,170:16,10);
18 : (0,170:25,11);
19 : (0,171:21,15);
20 : (0,171:31,15);
21 : (0,171:21,15);
23 : (0,171:36,16);
24 : (0,171:21,20);
27 : (0,169:12,27);
29 : (0,173:15,32);
30 : (0,175:26,33);
31 : (0,175:12,33);
35 : (0,175:31,34);
36 : (0,175:12,37);
39 : (0,176:12,40);
41 : (0,176:27,41);
43 : (0,177:16,41);
45 : (0,177:28,42);
46 : (0,177:16,44);
49 : (0,176:12,51);
52 : (0,181:11,59);
54 : (0,181:11,59);
56 : (0,181:22,60);
57 : (0,182:13,60);
58 : (0,182:8,60);
60 : (0,183:13,61);
61 : (0,182:22,64);
64 : (0,182:8,68);
65 : (0,184:11,72);
66 : (0,186:17,73);
67 : (0,186:8,73);
71 : (0,186:22,74);
72 : (0,186:8,77);
75 : (0,187:8,80);
77 : (0,187:23,81);
79 : (0,188:12,81);
81 : (0,188:21,82);
82 : (0,189:21,82);
83 : (0,189:16,82);
85 : (0,189:29,83);
86 : (0,190:21,85);
87 : (0,192:24,86);
88 : (0,192:20,86);
91 : (0,192:20,89);
95 : (0,188:12,98);
98 : (0,187:8,104);
104 : (0,200:4,122);
141 : (0,178:19,47);
146 : (0,181:17,59);
149 : (0,196:15,101);
195 : (0,169:21,9);
196 : (0,169:21,9);
214 : (0,169:21,9);
223 : (0,169:19,9);
224 : (0,169:19,9);
233 : (0,182:30,61);
256 : (0,182:8,68);
257 : (0,182:8,68);
----------
47 : (0,159:7,0);
48 : (0,159:7,0);
50 : (0,159:7,0);
51 : (0,159:7,0);
75 : (0,166:15,0);
77 : (0,166:13,6);
78 : (0,166:19,0);
80 : (0,166:18,6);
83 : (0,166:25,6);
106 : (0,167:4,7);
107 : (0,168:14,0);
109 : (0,168:13,8);
129 : (0,168:8,8);
155 : (0,169:12,9);
158 : (0,170:21,10);
178 : (0,170:16,10);
179 : (0,170:28,0);
183 : (0,171:27,15);
206 : (0,171:21,15);
207 : (0,171:41,0);
211 : (0,171:21,22);
212 : (0,171:21,22);
213 : (0,170:16,24);
214 : (0,170:16,24);
215 : (0,169:12,29);
216 : (0,169:12,29);
217 : (0,174:16,0);
219 : (0,174:39,32);
221 : (0,175:19,33);
223 : (0,175:22,33);
226 : (0,175:26,33);
246 : (0,175:12,33);
247 : (0,175:31,0);
248 : (0,175:31,0);
250 : (0,175:31,0);
251 : (0,175:31,34);
252 : (0,175:31,34);
254 : (0,175:38,0);
257 : (0,175:38,0);
330 : (0,176:12,40);
353 : (0,177:16,41);
355 : (0,177:31,0);
357 : (0,177:54,42);
358 : (0,177:28,42);
360 : (0,177:16,46);
363 : (0,178:19,47);
367 : (0,176:12,53);
368 : (0,176:12,53);
376 : (0,168:8,56);
378 : (0,168:8,56);
388 : (0,181:18,0);
410 : (0,181:11,59);
411 : (0,182:15,0);
433 : (0,182:8,60);
440 : (0,182:8,68);
441 : (0,182:8,68);
443 : (0,182:8,0);
446 : (0,182:8,0);
475 : (0,185:13,0);
479 : (0,185:42,72);
480 : (0,185:37,72);
482 : (0,186:14,73);
485 : (0,186:17,73);
505 : (0,186:8,73);
510 : (0,186:22,74);
511 : (0,186:22,74);
513 : (0,186:29,0);
516 : (0,186:29,0);
589 : (0,187:8,80);
612 : (0,188:12,81);
615 : (0,189:21,82);
635 : (0,189:16,82);
636 : (0,189:31,0);
638 : (0,189:29,83);
642 : (0,191:45,0);
644 : (0,191:47,85);
645 : (0,191:42,85);
646 : (0,191:27,85);
648 : (0,192:24,86);
668 : (0,192:20,86);
672 : (0,192:20,91);
674 : (0,189:16,95);
675 : (0,189:16,95);
677 : (0,188:12,100);
678 : (0,188:12,100);
682 : (0,196:15,101);
684 : (0,187:8,106);
685 : (0,187:8,106);
694 : (0,181:11,109);
696 : (0,181:11,109);
713 : (0,167:4,111);
715 : (0,167:4,111);
743 : (0,200:4,122);
744 : (0,200:4,122);
746 : (0,200:11,0);
749 : (0,200:11,0);
832 : (0,166:25,0);
834 : (0,185:42,0);
913 : (0,178:23,47);
920 : (0,181:17,59);
927 : (0,196:19,101);
1045 : (0,169:21,0);
1046 : (0,169:21,9);
1048 : (0,169:21,9);
1049 : (0,169:21,9);
1050 : (0,169:21,9);
1051 : (0,169:21,9);
1052 : (0,169:21,9);
1053 : (0,169:21,9);
1054 : (0,169:21,9);
1133 : (0,169:19,0);
1134 : (0,169:19,9);
1135 : (0,169:19,9);
1136 : (0,169:19,9);
1137 : (0,169:19,9);
1138 : (0,169:19,9);
1139 : (0,169:19,9);
1140 : (0,169:19,9);
1142 : (0,169:19,9);
1144 : (0,169:19,9);
1158 : (0,182:30,61);
1159 : (0,182:30,61);
1160 : (0,182:30,61);
1161 : (0,182:30,61);
1162 : (0,182:30,61);
1163 : (0,182:30,61);
1165 : (0,182:30,61);
1167 : (0,182:30,61);
1224 : (0,169:15,0);
1226 : (0,169:15,0);
1280 : (0,171:31,15);
1284 : (0,182:13,60);
1311 : (0,182:8,68);
1313 : (0,182:8,0);
1315 : (0,182:8,0);
1320 : (0,182:30,61);
1324 : (0,171:21,15);
1329 : (0,170:16,10);
1334 : (0,169:12,9);
1339 : (0,175:12,33);
1343 : (0,177:16,41);
1348 : (0,176:12,40);
1353 : (0,168:8,8);
1358 : (0,182:8,60);
1361 : (0,186:8,73);
1365 : (0,192:20,86);
1370 : (0,189:16,82);
1375 : (0,188:12,81);
1380 : (0,187:8,80);
1385 : (0,181:11,59);
1389 : (0,167:4,7);

