
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:54:26 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strncat(char * restrict, const char * restrict, size_t)
Fstrncat : user_defined, called {
    fnm : "strncat" 'char *strncat(char * restrict, const char * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
***/

[
    0 : strncat typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s1__rstr typ=w08 bnd=b stl=DMb
   20 : s2__rstr typ=w08 bnd=b stl=DMb
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   23 : __rt typ=w32 bnd=p tref=__P__cchar__
   24 : s1 typ=w32 bnd=p tref=__P__cchar__
   25 : s2 typ=w32 bnd=p tref=__P__cchar__
   26 : n typ=w32 bnd=p tref=size_t__
   27 : __ct_0S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   34 : c typ=w08 bnd=m tref=__cchar__
   37 : __ct_1 typ=w32 val=1f bnd=m
   40 : __fch_s1__rstr typ=w08 bnd=m
   42 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   44 : __tmp typ=bool bnd=m
   48 : __fch_s1__rstr typ=w08 bnd=m
   52 : __tmp typ=bool bnd=m
   61 : __tmp typ=bool bnd=m
   69 : __tmp typ=bool bnd=m
   72 : __tmp typ=bool bnd=m
   81 : __tmp typ=bool bnd=m
   89 : __tmp typ=bool bnd=m
   92 : __tmp typ=bool bnd=m
   93 : __ct_0 typ=w08 val=0f bnd=m
   95 : __ct_0s0 typ=w32 val=0s0 bnd=m
   97 : __tmp typ=w32 bnd=m
  108 : __ct_m1 typ=w32 val=-1f bnd=m
  110 : __shv_s1 typ=w32 bnd=m
  111 : __shv_s2 typ=w32 bnd=m
  112 : __shv_s2 typ=w32 bnd=m
  113 : __shv_s1 typ=w32 bnd=m
  114 : __shv_n typ=w32 bnd=m
  122 : __true typ=bool val=1f bnd=m
  123 : __false typ=bool val=0f bnd=m
  124 : __either typ=bool bnd=m
  125 : __trgt typ=t13s_s2 val=0j bnd=m
  126 : __trgt typ=t13s_s2 val=0j bnd=m
  127 : __trgt typ=t21s_s2 val=0j bnd=m
  128 : __trgt typ=t13s_s2 val=0j bnd=m
  129 : __trgt typ=t13s_s2 val=0j bnd=m
  130 : __trgt typ=t13s_s2 val=0j bnd=m
  131 : __trgt typ=t13s_s2 val=0j bnd=m
  132 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrncat {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (s1__rstr.18 var=19) source ()  <29>;
    (s2__rstr.19 var=20) source ()  <30>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (s1.25 var=24 stl=X off=11) inp ()  <36>;
    (s1.26 var=24) deassign (s1.25)  <37>;
    (s2.28 var=25 stl=X off=12) inp ()  <39>;
    (s2.29 var=25) deassign (s2.28)  <40>;
    (n.31 var=26 stl=X off=13) inp ()  <42>;
    (n.32 var=26) deassign (n.31)  <43>;
    (__rd___sp.34 var=21) rd_res_reg (__R_SP.11 __sp.17)  <45>;
    (__ct_0S0.35 var=27) const ()  <46>;
    (__tmp.37 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.34 __ct_0S0.35)  <48>;
    (__R_SP.38 var=12 __sp.39 var=18) wr_res_reg (__tmp.37 __sp.17)  <49>;
    (__ct_1.48 var=37) const ()  <59>;
    (s1.50 var=24) __Pvoid__pl___Pvoid___sint (s1.26 __ct_1.48)  <61>;
    (__fch_s1__rstr.51 var=40) load (__M_DMb.2 s1.26 s1__rstr.18)  <62>;
    (__ct_0.53 var=42) const ()  <64>;
    (__tmp.375 var=44) bool__eq___sint___sint (__fch_s1__rstr.51 __ct_0.53)  <401>;
    (__trgt.382 var=126) const ()  <417>;
    () void_br_bool_t13s_s2 (__tmp.375 __trgt.382)  <418>;
    (__either.383 var=124) undefined ()  <419>;
    if {
        {
            () if_expr (__either.383)  <87>;
            () chess_frequent_else ()  <88>;
            () chess_rear_then ()  <420>;
        } #5
        {
            (__trgt.384 var=127) const ()  <421>;
            () void_j_t21s_s2 (__trgt.384)  <422>;
        } #11 off=4
        {
            #183 off=1
            (__trgt.380 var=125) const ()  <414>;
            do {
                {
                    (s1.86 var=24) entry (s1.124 s1.50)  <99>;
                } #8
                {
                    (__fch_s1__rstr.99 var=48) load (__M_DMb.2 s1.86 s1__rstr.18)  <112>;
                    (__tmp.103 var=52) bool__ne___sint___sint (__fch_s1__rstr.99 __ct_0.53)  <116>;
                    (__shv_s1.362 var=110) __Pvoid__pl___Pvoid___sint (s1.86 __ct_1.48)  <368>;
                    () void_br_bool_t13s_s2 (__tmp.103 __trgt.380)  <415>;
                    (__either.381 var=124) undefined ()  <416>;
                } #9 off=2
                {
                    () while_expr (__either.381)  <117>;
                    (s1.124 var=24 s1.125 var=24) exit (__shv_s1.362)  <128>;
                } #10
            } #7 rng=[1,2147483647]
        } #6
        {
            (s1.144 var=24) merge (s1.50 s1.125)  <138>;
        } #12
    } #4
    #13 off=5
    (s1.148 var=24) __Pvoid__pl___Pvoid___sint (s1.144 __ct_m1.358)  <142>;
    (c.149 var=34) undefined ()  <143>;
    (n.152 var=26) __uint__pl___uint___uint (n.32 __ct_m1.358)  <146>;
    (__ct_m1.358 var=108) const ()  <362>;
    (__tmp.376 var=61) bool__eq___uint___uint (n.32 __ct_0.53)  <402>;
    (__trgt.385 var=128) const ()  <423>;
    () void_br_bool_t13s_s2 (__tmp.376 __trgt.385)  <424>;
    (__either.386 var=124) undefined ()  <425>;
    if {
        {
            () if_expr (__either.386)  <170>;
        } #15
        {
            (__true.392 var=122) const ()  <433>;
        } #17
        {
            (c.179 var=34) load (__M_DMb.2 s2.29 s2__rstr.19)  <174>;
            (__shv_s2.363 var=111) __Pvoid__pl___Pvoid___sint (s2.29 __ct_1.48)  <369>;
            (__tmp.373 var=69) bool__eq___sint___sint (c.179 __ct_0.53)  <399>;
            (__trgt.393 var=131) const ()  <434>;
            () void_br_bool_t13s_s2 (__tmp.373 __trgt.393)  <435>;
            (__either.394 var=124) undefined ()  <436>;
        } #16 off=6
        {
            (c.187 var=34) merge (c.149 c.179)  <182>;
            (s2.189 var=25) merge (s2.29 __shv_s2.363)  <184>;
            (__tmp.374 var=72) merge (__true.392 __either.394)  <400>;
        } #18
    } #14
    if {
        {
            () if_expr (__tmp.374)  <205>;
            () chess_frequent_else ()  <206>;
            () chess_rear_then ()  <437>;
        } #21
        {
            (__trgt.395 var=132) const ()  <438>;
            () void_j_t21s_s2 (__trgt.395)  <439>;
        } #33 off=11
        {
            #177 off=7
            (__trgt.387 var=129) const ()  <426>;
            (__trgt.390 var=130) const ()  <430>;
            do {
                {
                    (s1__rstr.216 var=19) entry (s1__rstr.287 s1__rstr.18)  <213>;
                    (s1.220 var=24) entry (s1.295 s1.148)  <217>;
                    (n.224 var=26) entry (n.303 n.152)  <221>;
                    (c.225 var=34) entry (c.305 c.187)  <222>;
                    (s2.227 var=25) entry (s2.309 s2.189)  <224>;
                } #24
                {
                    #26 off=8
                    (__M_DMb.233 var=3 s1__rstr.234 var=19) store (c.225 s1.220 s1__rstr.216)  <230>;
                    (__shv_s1.365 var=113) __Pvoid__pl___Pvoid___sint (s1.220 __ct_1.48)  <371>;
                    (__shv_n.366 var=114) __uint__pl___uint___uint (n.224 __ct_m1.358)  <372>;
                    (__tmp.377 var=81) bool__eq___uint___uint (n.224 __ct_0.53)  <403>;
                    () void_br_bool_t13s_s2 (__tmp.377 __trgt.387)  <427>;
                    (__either.388 var=124) undefined ()  <428>;
                    if {
                        {
                            () if_expr (__either.388)  <257>;
                        } #28
                        {
                            (__false.389 var=123) const ()  <429>;
                        } #30
                        {
                            (c.264 var=34) load (__M_DMb.2 s2.227 s2__rstr.19)  <261>;
                            (__tmp.268 var=89) bool__ne___sint___sint (c.264 __ct_0.53)  <265>;
                            (__shv_s2.364 var=112) __Pvoid__pl___Pvoid___sint (s2.227 __ct_1.48)  <370>;
                            () void_br_bool_t13s_s2 (__tmp.268 __trgt.390)  <431>;
                            (__either.391 var=124) undefined ()  <432>;
                        } #29 off=9
                        {
                            (__tmp.271 var=92) merge (__false.389 __either.391)  <268>;
                            (c.272 var=34) merge (c.225 c.264)  <269>;
                            (s2.274 var=25) merge (s2.227 __shv_s2.364)  <271>;
                        } #31
                    } #27
                } #25
                {
                    () while_expr (__tmp.271)  <272>;
                    (s1__rstr.287 var=19 s1__rstr.288 var=19) exit (s1__rstr.234)  <279>;
                    (s1.295 var=24 s1.296 var=24) exit (__shv_s1.365)  <283>;
                    (n.303 var=26 n.304 var=26) exit (__shv_n.366)  <287>;
                    (c.305 var=34 c.306 var=34) exit (c.272)  <288>;
                    (s2.309 var=25 s2.310 var=25) exit (s2.274)  <290>;
                } #32
            } #23 rng=[1,2147483647]
        } #22
        {
            (s1__rstr.315 var=19) merge (s1__rstr.18 s1__rstr.288)  <293>;
            (s1.316 var=24) merge (s1.148 s1.296)  <294>;
        } #34
    } #20
    #37 off=12 nxt=-2
    (__ct_0.323 var=93) const ()  <301>;
    (__M_DMb.325 var=3 s1__rstr.326 var=19) store (__ct_0.323 s1.316 s1__rstr.315)  <303>;
    (__rd___sp.327 var=21) rd_res_reg (__R_SP.11 __sp.39)  <304>;
    (__ct_0s0.328 var=95) const ()  <305>;
    (__tmp.330 var=97) __Pvoid__pl___Pvoid___sint (__rd___sp.327 __ct_0s0.328)  <307>;
    (__R_SP.331 var=12 __sp.332 var=18) wr_res_reg (__tmp.330 __sp.39)  <308>;
    () void___rts_jr_w32 (__la.22)  <309>;
    (__rt.333 var=23 stl=X off=10) assign (s1.26)  <310>;
    () out (__rt.333)  <311>;
    () sink (__sp.332)  <317>;
    () sink (s1__rstr.326)  <318>;
} #0
0 : 'src/string.c';
----------
0 : (0,73:0,0);
3 : (0,78:4,4);
4 : (0,78:4,4);
6 : (0,78:4,5);
7 : (0,78:4,5);
9 : (0,79:6,5);
11 : (0,78:4,10);
13 : (0,82:4,19);
14 : (0,82:4,19);
16 : (0,82:4,20);
17 : (0,82:4,23);
20 : (0,82:4,25);
22 : (0,82:4,26);
23 : (0,82:4,26);
25 : (0,82:37,26);
26 : (0,82:15,31);
27 : (0,82:15,31);
29 : (0,82:15,32);
30 : (0,82:15,35);
33 : (0,82:4,39);
37 : (0,84:4,43);
----------
45 : (0,73:6,0);
46 : (0,73:6,0);
48 : (0,73:6,0);
49 : (0,73:6,0);
59 : (0,78:4,0);
61 : (0,78:4,3);
62 : (0,78:4,4);
64 : (0,78:4,0);
87 : (0,78:4,4);
99 : (0,78:4,5);
112 : (0,78:11,8);
116 : (0,78:4,8);
117 : (0,78:4,8);
128 : (0,78:4,8);
138 : (0,78:4,12);
142 : (0,80:6,14);
146 : (0,82:4,18);
170 : (0,82:4,19);
174 : (0,82:4,22);
182 : (0,82:4,24);
184 : (0,82:4,24);
205 : (0,82:4,25);
213 : (0,82:4,26);
217 : (0,82:4,26);
221 : (0,82:4,26);
222 : (0,82:4,26);
224 : (0,82:4,26);
230 : (0,82:31,28);
257 : (0,82:15,31);
261 : (0,82:23,34);
265 : (0,82:15,34);
268 : (0,82:15,36);
269 : (0,82:15,36);
271 : (0,82:15,36);
272 : (0,82:4,37);
279 : (0,82:4,37);
283 : (0,82:4,37);
287 : (0,82:4,37);
288 : (0,82:4,37);
290 : (0,82:4,37);
293 : (0,82:4,41);
294 : (0,82:4,41);
301 : (0,83:8,0);
303 : (0,83:4,42);
304 : (0,84:4,0);
305 : (0,84:4,0);
307 : (0,84:4,0);
308 : (0,84:4,43);
309 : (0,84:4,43);
310 : (0,84:11,0);
362 : (0,80:6,0);
368 : (0,78:14,0);
369 : (0,82:4,0);
370 : (0,82:26,0);
371 : (0,82:34,0);
372 : (0,82:12,0);
399 : (0,82:4,22);
400 : (0,82:4,24);
401 : (0,78:4,4);
402 : (0,82:4,19);
403 : (0,82:15,31);
415 : (0,78:4,8);
418 : (0,78:4,4);
424 : (0,82:4,19);
427 : (0,82:15,31);
431 : (0,82:4,37);
435 : (0,82:4,25);

