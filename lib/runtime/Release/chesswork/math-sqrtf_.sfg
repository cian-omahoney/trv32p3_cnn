
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:32:09 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float sqrtf(float)
Fsqrtf : user_defined, called {
    fnm : "sqrtf" 'float sqrtf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
}
****
!!  bool f32_le(float32_t, float32_t)
Ff32_le : user_defined, called {
    fnm : "f32_le" 'bool f32_le(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  bool f32_lt(float32_t, float32_t)
Ff32_lt : user_defined, called {
    fnm : "f32_lt" 'bool f32_lt(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_sub(float32_t, float32_t)
Ff32_sub : user_defined, called {
    fnm : "f32_sub" 'float32_t f32_sub(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_div(float32_t, float32_t)
Ff32_div : user_defined, called {
    fnm : "f32_div" 'float32_t f32_div(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : sqrtf typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__ffloat__
   22 : x typ=w32 bnd=p tref=__ffloat__
   23 : __ct_0S0 typ=w32 val=0S0 bnd=m
   25 : __tmp typ=w32 bnd=m
   26 : ix typ=w32 bnd=m tref=int32_t__
   27 : m typ=w32 bnd=m tref=int32_t__
   28 : i typ=w32 bnd=m tref=int32_t__
   30 : q typ=w32 bnd=m tref=int32_t__
   31 : s typ=w32 bnd=m tref=int32_t__
   32 : r typ=w32 bnd=m tref=u_int32_t__
   36 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   38 : __tmp typ=w32 bnd=m
   41 : __tmp typ=bool bnd=m
   42 : __tmp typ=w32 bnd=m
   44 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   46 : __tmp typ=bool bnd=m
   47 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   49 : __tmp typ=w32 bnd=m
   52 : __tmp typ=bool bnd=m
   53 : __ct_0s0 typ=w32 val=0s0 bnd=m
   55 : __tmp typ=w32 bnd=m
   58 : __tmp typ=bool bnd=m
   59 : __tmp typ=w32 bnd=m
   65 : __ct_23 typ=w32 val=23f bnd=m
   70 : __tmp typ=bool bnd=m
   73 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
   75 : __tmp typ=w32 bnd=m
   78 : __tmp typ=bool bnd=m
   79 : __ct_1 typ=w32 val=1f bnd=m
   87 : __tmp typ=w32 bnd=m
   90 : __tmp typ=bool bnd=m
   93 : __tmp typ=w32 bnd=m
   98 : __ct_8388607 typ=w32 val=8388607f bnd=m
  100 : __tmp typ=w32 bnd=m
  106 : __tmp typ=w32 bnd=m
  109 : __tmp typ=bool bnd=m
  117 : __ct_16777216 typ=t20s_rp12 val=4096f bnd=m
  123 : __tmp typ=w32 bnd=m
  125 : __tmp typ=bool bnd=m
  127 : __tmp typ=w32 bnd=m
  131 : __tmp typ=w32 bnd=m
  139 : __tmp typ=bool bnd=m
  142 : __tmp typ=bool bnd=m
  143 : __ct_1065353216 typ=t20s_rp12 val=260096f bnd=m
  147 : __tmp typ=bool bnd=m
  152 : __tmp typ=bool bnd=m
  153 : __ct_2 typ=w32 val=2f bnd=m
  158 : __tmp typ=w32 bnd=m
  162 : __tmp typ=w32 bnd=m
  163 : __ct_1056964608 typ=t20s_rp12 val=258048f bnd=m
  168 : __tmp typ=w32 bnd=m
  179 : __linex typ=w32 bnd=m
  181 : __linex typ=w32 bnd=m
  183 : __linex typ=w32 bnd=m
  186 : __ct_m1 typ=w32 val=-1f bnd=m
  187 : __ct_m127 typ=w32 val=-127f bnd=m
  208 : a typ=w32 bnd=m tref=float32_t__
  209 : b typ=w32 bnd=m tref=float32_t__
  210 : f32_le typ=t21s_s2 val=0r bnd=m
  211 : __link typ=w32 bnd=m
  212 : __tmp typ=w32 bnd=m
  216 : a typ=w32 bnd=m tref=float32_t__
  217 : b typ=w32 bnd=m tref=float32_t__
  218 : f32_lt typ=t21s_s2 val=0r bnd=m
  219 : __link typ=w32 bnd=m
  220 : __tmp typ=w32 bnd=m
  225 : a typ=w32 bnd=m tref=float32_t__
  226 : b typ=w32 bnd=m tref=float32_t__
  227 : f32_mul typ=t21s_s2 val=0r bnd=m
  228 : __link typ=w32 bnd=m
  231 : a typ=w32 bnd=m tref=float32_t__
  232 : b typ=w32 bnd=m tref=float32_t__
  233 : f32_add typ=t21s_s2 val=0r bnd=m
  237 : a typ=w32 bnd=m tref=float32_t__
  238 : b typ=w32 bnd=m tref=float32_t__
  239 : f32_sub typ=t21s_s2 val=0r bnd=m
  240 : __link typ=w32 bnd=m
  243 : a typ=w32 bnd=m tref=float32_t__
  244 : b typ=w32 bnd=m tref=float32_t__
  245 : f32_div typ=t21s_s2 val=0r bnd=m
  257 : __either typ=bool bnd=m
  258 : __trgt typ=t13s_s2 val=0j bnd=m
  259 : __trgt typ=t13s_s2 val=0j bnd=m
  260 : __trgt typ=t13s_s2 val=0j bnd=m
  261 : __trgt typ=t21s_s2 val=0j bnd=m
  262 : __trgt typ=t13s_s2 val=0j bnd=m
  263 : __trgt typ=t13s_s2 val=0j bnd=m
  264 : __trgt typ=t21s_s2 val=0j bnd=m
  265 : __trgt typ=t13s_s2 val=0j bnd=m
  266 : __trgt typ=t21s_s2 val=0j bnd=m
  267 : __trgt typ=t13s_s2 val=0j bnd=m
  268 : __trgt typ=t21s_s2 val=0j bnd=m
  269 : __trgt typ=t13s_s2 val=0j bnd=m
  270 : __trgt typ=t21s_s2 val=0j bnd=m
  271 : __trgt typ=t13s_s2 val=0j bnd=m
  272 : __trgt typ=t13s_s2 val=0j bnd=m
  273 : __trgt typ=t21s_s2 val=0j bnd=m
  274 : __trgt typ=t13s_s2 val=0j bnd=m
  275 : __trgt typ=t21s_s2 val=0j bnd=m
  276 : __trgt typ=t13s_s2 val=0j bnd=m
  277 : __trgt typ=t21s_s2 val=0j bnd=m
  278 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fsqrtf {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x.23 var=22 stl=X off=11) inp ()  <34>;
    (x.24 var=22) deassign (x.23)  <35>;
    (__rd___sp.26 var=19) rd_res_reg (__R_SP.11 __sp.17)  <37>;
    (__ct_0S0.27 var=23) const ()  <38>;
    (__tmp.29 var=25) __Pvoid__pl___Pvoid___sint (__rd___sp.26 __ct_0S0.27)  <40>;
    (__R_SP.30 var=12 __sp.31 var=18) wr_res_reg (__tmp.29 __sp.17)  <41>;
    (__ct_2139095040.50 var=36) const ()  <61>;
    (__tmp.52 var=38) __sint__ad___sint___sint (x.24 __ct_2139095040.50)  <63>;
    (__tmp.55 var=41) bool__eq___sint___sint (__tmp.52 __ct_2139095040.50)  <66>;
    (__rd___sp.121 var=19) rd_res_reg (__R_SP.11 __sp.31)  <135>;
    (__ct_0s0.122 var=53) const ()  <136>;
    (__tmp.124 var=55) __Pvoid__pl___Pvoid___sint (__rd___sp.121 __ct_0s0.122)  <138>;
    (__trgt.816 var=278) const ()  <1048>;
    () void_br_bool_t13s_s2 (__tmp.55 __trgt.816)  <1049>;
    (__either.817 var=257) undefined ()  <1050>;
    if {
        {
            () if_expr (__either.817)  <85>;
            () chess_rear_then ()  <1051>;
        } #5
        {
            #184 off=43
            (f32_mul.728 var=227) const ()  <851>;
            (__link.729 var=228) w32_jal_t21s_s2 (f32_mul.728)  <852>;
            call {
                (a.730 var=225 stl=X off=11) assign (x.24)  <853>;
                (b.731 var=226 stl=X off=12) assign (x.24)  <854>;
                (__link.732 var=228 stl=X off=1) assign (__link.729)  <855>;
                (__tmp.733 var=42 stl=X off=10) Ff32_mul (__link.732 a.730 b.731)  <856>;
                (__tmp.734 var=42) deassign (__tmp.733)  <857>;
            } #185 off=44
            #235 off=45
            (f32_add.738 var=233) const ()  <864>;
            (__R_SP.780 var=12 __sp.781 var=18) wr_res_reg (__tmp.124 __sp.31)  <986>;
            () void_j_t21s_s2 (f32_add.738)  <991>;
            call {
                (a.740 var=231 stl=X off=11) assign (__tmp.734)  <866>;
                (b.741 var=232 stl=X off=12) assign (x.24)  <867>;
                (__la.742 var=20 stl=X off=1) assign (__la.20)  <868>;
                (__rt.743 var=21 stl=X off=10) Ff32_add (__la.742 a.740 b.741)  <869>;
                (__rt.744 var=21) deassign (__rt.743)  <870>;
            } #191 off=46
            #236 off=47 nxt=-2
            (__rt.782 var=21 stl=X off=10) assign (__rt.744)  <988>;
            () out (__rt.782)  <989>;
            () sink (__sp.781)  <990>;
            (__rt.783 var=21) never ()  <992>;
        } #6
        {
            #145 off=1
            (__ct_0.76 var=44) const ()  <88>;
            (__tmp.772 var=46) bool__lt___sint___sint (__ct_0.76 x.24)  <954>;
            (__trgt.788 var=260) const ()  <1001>;
            () void_br_bool_t13s_s2 (__tmp.772 __trgt.788)  <1002>;
            (__either.789 var=257) undefined ()  <1003>;
            if {
                {
                    () if_expr (__either.789)  <109>;
                } #10
                {
                } #29 off=12
                {
                    #12 off=2
                    (__ct_2147483647.97 var=47) const ()  <110>;
                    (__tmp.99 var=49) __sint__ad___sint___sint (x.24 __ct_2147483647.97)  <112>;
                    (__tmp.102 var=52) bool__eq___sint___sint (__tmp.99 __ct_0.76)  <115>;
                    (__trgt.786 var=259) const ()  <997>;
                    () void_br_bool_t13s_s2 (__tmp.102 __trgt.786)  <998>;
                    (__either.787 var=257) undefined ()  <999>;
                    if {
                        {
                            () if_expr (__either.787)  <134>;
                            () chess_rear_then ()  <1000>;
                        } #14
                        {
                            (__R_SP.125 var=12 __sp.126 var=18) wr_res_reg (__tmp.124 __sp.31)  <139>;
                            () void___rts_jr_w32 (__la.20)  <140>;
                            (__rt.127 var=21 stl=X off=10) assign (x.24)  <141>;
                            () out (__rt.127)  <142>;
                            () sink (__sp.126)  <148>;
                        } #17 off=10 nxt=-2
                        {
                            #19 off=3
                            (__tmp.148 var=58) bool__lt___sint___sint (x.24 __ct_0.76)  <169>;
                            (__trgt.784 var=258) const ()  <993>;
                            () void_br_bool_t13s_s2 (__tmp.148 __trgt.784)  <994>;
                            (__either.785 var=257) undefined ()  <995>;
                            if {
                                {
                                    () if_expr (__either.785)  <188>;
                                    () chess_rear_then ()  <996>;
                                } #21
                                {
                                    #198 off=5
                                    (f32_sub.748 var=239) const ()  <877>;
                                    (__link.749 var=240) w32_jal_t21s_s2 (f32_sub.748)  <878>;
                                    call {
                                        (a.750 var=237 stl=X off=11) assign (x.24)  <879>;
                                        (b.751 var=238 stl=X off=12) assign (x.24)  <880>;
                                        (__link.752 var=240 stl=X off=1) assign (__link.749)  <881>;
                                        (__tmp.753 var=59 stl=X off=10) Ff32_sub (__link.752 a.750 b.751)  <882>;
                                        (__tmp.754 var=59) deassign (__tmp.753)  <883>;
                                    } #199 off=6
                                    #24 off=7
                                    (__R_SP.174 var=12 __sp.175 var=18) wr_res_reg (__tmp.124 __sp.31)  <196>;
                                    (f32_div.758 var=245) const ()  <890>;
                                    () void_j_t21s_s2 (f32_div.758)  <985>;
                                    call {
                                        (a.760 var=243 stl=X off=11) assign (__tmp.754)  <892>;
                                        (b.761 var=244 stl=X off=12) assign (__tmp.754)  <893>;
                                        (__la.762 var=20 stl=X off=1) assign (__la.20)  <894>;
                                        (__rt.763 var=21 stl=X off=10) Ff32_div (__la.762 a.760 b.761)  <895>;
                                        (__rt.764 var=21) deassign (__rt.763)  <896>;
                                    } #205 off=8
                                    #25 off=9 nxt=-2
                                    (__rt.176 var=21 stl=X off=10) assign (__rt.764)  <198>;
                                    () out (__rt.176)  <199>;
                                    () sink (__sp.175)  <205>;
                                } #22
                                {
                                } #26 off=4
                                {
                                } #27
                            } #20
                        } #18
                        {
                        } #28
                    } #13
                    #246 off=11
                    (__trgt.790 var=261) const ()  <1004>;
                    () void_j_t21s_s2 (__trgt.790)  <1005>;
                } #11
                {
                } #30
            } #9
            #31 off=13
            (__ct_23.249 var=65) const ()  <278>;
            (m.251 var=27) __sint__rs___sint___sint (x.24 __ct_23.249)  <280>;
            (__ct_8388608.275 var=73) const ()  <305>;
            (__ct_1.317 var=79) const ()  <349>;
            (__tmp.773 var=70) bool__ne___sint___sint (m.251 __ct_0.76)  <955>;
            (__trgt.796 var=265) const ()  <1015>;
            () void_br_bool_t13s_s2 (__tmp.773 __trgt.796)  <1016>;
            (__either.797 var=257) undefined ()  <1017>;
            if {
                {
                    () if_expr (__either.797)  <302>;
                } #33
                {
                } #46 off=20
                {
                    #35 off=14
                    (__tmp.277 var=75) __sint__ad___sint___sint (x.24 __ct_8388608.275)  <307>;
                    (__tmp.771 var=78) bool__ne___sint___sint (__tmp.277 __ct_0.76)  <953>;
                    (__trgt.793 var=263) const ()  <1009>;
                    () void_br_bool_t13s_s2 (__tmp.771 __trgt.793)  <1010>;
                    (__either.794 var=257) undefined ()  <1011>;
                    if {
                        {
                            () if_expr (__either.794)  <329>;
                            () chess_frequent_else ()  <330>;
                            () chess_rear_then ()  <1012>;
                        } #37
                        {
                            (__trgt.795 var=264) const ()  <1013>;
                            () void_j_t21s_s2 (__trgt.795)  <1014>;
                        } #43 off=18
                        {
                            #245 off=15
                            (__trgt.791 var=262) const ()  <1006>;
                            do {
                                {
                                    (ix.306 var=26) entry (ix.343 x.24)  <338>;
                                    (i.310 var=28) entry (i.351 __ct_0.76)  <342>;
                                } #40
                                {
                                    (ix.319 var=26) __sint__ls___sint___sint (ix.306 __ct_1.317)  <351>;
                                    (i.322 var=28) __sint__pl___sint___sint (i.310 __ct_1.317)  <354>;
                                    (__tmp.325 var=87) __sint__ad___sint___sint (ix.319 __ct_8388608.275)  <357>;
                                    (__tmp.328 var=90) bool__eq___sint___sint (__tmp.325 __ct_0.76)  <360>;
                                    () void_br_bool_t13s_s2 (__tmp.328 __trgt.791)  <1007>;
                                    (__either.792 var=257) undefined ()  <1008>;
                                } #41 off=16
                                {
                                    () while_expr (__either.792)  <361>;
                                    (ix.343 var=26 ix.344 var=26) exit (ix.319)  <369>;
                                    (i.351 var=28 i.352 var=28) exit (i.322)  <373>;
                                } #42
                            } #39 rng=[1,2147483647]
                        } #38
                        {
                            (ix.365 var=26) merge (x.24 ix.344)  <380>;
                            (i.366 var=28) merge (__ct_0.76 i.352)  <381>;
                        } #44
                    } #36
                    #45 off=19
                    (__tmp.370 var=93) __sint__pl___sint___sint (i.366 __ct_m1.678)  <385>;
                    (m.371 var=27) __sint__mi___sint___sint (m.251 __tmp.370)  <386>;
                    (__ct_m1.678 var=186) const ()  <724>;
                    (__trgt.798 var=266) const ()  <1018>;
                    () void_j_t21s_s2 (__trgt.798)  <1019>;
                } #34
                {
                    (ix.372 var=26) merge (x.24 ix.365)  <387>;
                    (m.373 var=27) merge (m.251 m.371)  <388>;
                } #47
            } #32
            #48 off=21
            (m.378 var=27) __sint__pl___sint___sint (m.373 __ct_m127.679)  <393>;
            (__ct_8388607.379 var=98) const ()  <394>;
            (__tmp.381 var=100) __sint__ad___sint___sint (ix.372 __ct_8388607.379)  <396>;
            (ix.384 var=26) __sint__or___sint___sint (__tmp.381 __ct_8388608.275)  <399>;
            (__tmp.387 var=106) __sint__ad___sint___sint (m.378 __ct_1.317)  <402>;
            (__ct_m127.679 var=187) const ()  <726>;
            (__tmp.774 var=109) bool__eq___sint___sint (__tmp.387 __ct_0.76)  <956>;
            (__trgt.799 var=267) const ()  <1020>;
            () void_br_bool_t13s_s2 (__tmp.774 __trgt.799)  <1021>;
            (__either.800 var=257) undefined ()  <1022>;
            if {
                {
                    () if_expr (__either.800)  <424>;
                } #50
                {
                } #52 off=23
                {
                    (__linex.675 var=179) __sint__ls___sint___sint (ix.384 __ct_1.317)  <721>;
                    (__trgt.801 var=268) const ()  <1023>;
                    () void_j_t21s_s2 (__trgt.801)  <1024>;
                } #51 off=22
                {
                    (ix.410 var=26) merge (ix.384 __linex.675)  <426>;
                } #53
            } #49
            #54 off=24
            (m.413 var=27) __sint__rs___sint___sint (m.378 __ct_1.317)  <429>;
            (__ct_16777216.417 var=117) const ()  <433>;
            (__linex.676 var=181) __sint__ls___sint___sint (ix.410 __ct_1.317)  <722>;
            (__trgt.802 var=269) const ()  <1025>;
            (__trgt.804 var=270) const ()  <1028>;
            (__trgt.805 var=271) const ()  <1030>;
            do {
                {
                    (ix.447 var=26) entry (ix.511 __linex.676)  <465>;
                    (q.453 var=30) entry (q.523 __ct_0.76)  <471>;
                    (s.454 var=31) entry (s.525 __ct_0.76)  <472>;
                    (r.455 var=32) entry (r.527 __ct_16777216.417)  <473>;
                } #59
                {
                    #150 off=25
                    (__tmp.459 var=123) __uint__pl___uint___uint (s.454 r.455)  <477>;
                    (__tmp.775 var=125) bool__lt___sint___sint (ix.447 __tmp.459)  <957>;
                    () void_br_bool_t13s_s2 (__tmp.775 __trgt.802)  <1026>;
                    (__either.803 var=257) undefined ()  <1027>;
                    if {
                        {
                            () if_expr (__either.803)  <498>;
                        } #63
                        {
                        } #65 off=27
                        {
                            (__tmp.481 var=127) __uint__pl___uint___uint (__tmp.459 r.455)  <500>;
                            (ix.483 var=26) __sint__mi___sint___sint (ix.447 __tmp.459)  <502>;
                            (__tmp.485 var=131) __uint__pl___uint___uint (q.453 r.455)  <504>;
                            () void_j_t21s_s2 (__trgt.804)  <1029>;
                        } #64 off=26
                        {
                            (ix.487 var=26) merge (ix.447 ix.483)  <506>;
                            (q.488 var=30) merge (q.453 __tmp.485)  <507>;
                            (s.489 var=31) merge (s.454 __tmp.481)  <508>;
                        } #66
                    } #62
                    #67 off=28
                    (r.493 var=32) __uint__rs___uint___sint (r.455 __ct_1.317)  <512>;
                    (__tmp.496 var=139) bool__ne___uint___uint (r.493 __ct_0.76)  <515>;
                    (__linex.677 var=183) __sint__ls___sint___sint (ix.487 __ct_1.317)  <723>;
                    () void_br_bool_t13s_s2 (__tmp.496 __trgt.805)  <1031>;
                    (__either.806 var=257) undefined ()  <1032>;
                } #60
                {
                    () while_expr (__either.806)  <516>;
                    (ix.511 var=26 ix.512 var=26) exit (__linex.677)  <524>;
                    (q.523 var=30 q.524 var=30) exit (q.488)  <530>;
                    (s.525 var=31 s.526 var=31) exit (s.489)  <531>;
                    (r.527 var=32 r.528 var=32) exit (r.493)  <532>;
                } #68
            } #58 rng=[1,2147483647]
            #71 off=29
            (__tmp.777 var=142) bool__eq___sint___sint (ix.512 __ct_0.76)  <959>;
            (__trgt.813 var=276) const ()  <1043>;
            () void_br_bool_t13s_s2 (__tmp.777 __trgt.813)  <1044>;
            (__either.814 var=257) undefined ()  <1045>;
            if {
                {
                    () if_expr (__either.814)  <561>;
                } #73
                {
                } #87 off=41
                {
                    #165 off=30
                    (__ct_1065353216.559 var=143) const ()  <562>;
                    (f32_le.702 var=210) const ()  <799>;
                    (__link.703 var=211) w32_jal_t21s_s2 (f32_le.702)  <800>;
                    call {
                        (a.705 var=208 stl=X off=11) assign (__ct_1065353216.559)  <802>;
                        (b.706 var=209 stl=X off=12) assign (__ct_1065353216.559)  <803>;
                        (__link.707 var=211 stl=X off=1) assign (__link.703)  <804>;
                        (__tmp.708 var=212 stl=X off=10) Ff32_le (__link.707 a.705 b.706)  <805>;
                        (__tmp.709 var=212) deassign (__tmp.708)  <806>;
                    } #166 off=31
                    #167 off=32
                    (__tmp.776 var=147) bool__eq___sint___sint (__tmp.709 __ct_0.76)  <958>;
                    (__trgt.810 var=274) const ()  <1038>;
                    () void_br_bool_t13s_s2 (__tmp.776 __trgt.810)  <1039>;
                    (__either.811 var=257) undefined ()  <1040>;
                    if {
                        {
                            () if_expr (__either.811)  <585>;
                        } #77
                        {
                        } #85 off=39
                        {
                            #171 off=33
                            (f32_lt.714 var=218) const ()  <814>;
                            (__link.715 var=219) w32_jal_t21s_s2 (f32_lt.714)  <815>;
                            call {
                                (a.717 var=216 stl=X off=11) assign (__ct_1065353216.559)  <817>;
                                (b.718 var=217 stl=X off=12) assign (__ct_1065353216.559)  <818>;
                                (__link.719 var=219 stl=X off=1) assign (__link.715)  <819>;
                                (__tmp.720 var=220 stl=X off=10) Ff32_lt (__link.719 a.717 b.718)  <820>;
                                (__tmp.721 var=220) deassign (__tmp.720)  <821>;
                            } #172 off=34
                            #173 off=35
                            (__tmp.722 var=152) bool__ne___sint___sint (__tmp.721 __ct_0.76)  <822>;
                            (__trgt.807 var=272) const ()  <1033>;
                            () void_br_bool_t13s_s2 (__tmp.722 __trgt.807)  <1034>;
                            (__either.808 var=257) undefined ()  <1035>;
                            if {
                                {
                                    () if_expr (__either.808)  <609>;
                                } #81
                                {
                                    (__ct_2.605 var=153) const ()  <610>;
                                    (q.607 var=30) __sint__pl___sint___sint (q.524 __ct_2.605)  <612>;
                                } #82 off=37
                                {
                                    (__tmp.610 var=158) __sint__ad___sint___sint (q.524 __ct_1.317)  <615>;
                                    (q.611 var=30) __sint__pl___sint___sint (q.524 __tmp.610)  <616>;
                                    (__trgt.809 var=273) const ()  <1036>;
                                    () void_j_t21s_s2 (__trgt.809)  <1037>;
                                } #83 off=36
                                {
                                    (q.612 var=30) merge (q.607 q.611)  <617>;
                                } #84
                            } #80
                            #248 off=38
                            (__trgt.812 var=275) const ()  <1041>;
                            () void_j_t21s_s2 (__trgt.812)  <1042>;
                        } #78
                        {
                            (q.613 var=30) merge (q.524 q.612)  <618>;
                        } #86
                    } #76
                    #249 off=40
                    (__trgt.815 var=277) const ()  <1046>;
                    () void_j_t21s_s2 (__trgt.815)  <1047>;
                } #74
                {
                    (q.615 var=30) merge (q.524 q.613)  <620>;
                } #88
            } #72
            #89 off=42
            (__tmp.619 var=162) __sint__rs___sint___sint (q.615 __ct_1.317)  <624>;
            (__ct_1056964608.620 var=163) const ()  <625>;
            (ix.622 var=26) __sint__pl___sint___sint (__tmp.619 __ct_1056964608.620)  <627>;
            (__tmp.625 var=168) __sint__ls___sint___sint (m.413 __ct_23.249)  <630>;
            (ix.626 var=26) __sint__pl___sint___sint (ix.622 __tmp.625)  <631>;
        } #7
        {
            (__rt.637 var=21) merge (__rt.783 ix.626)  <642>;
        } #90
    } #4
    #92 off=48 nxt=-2
    (__R_SP.650 var=12 __sp.651 var=18) wr_res_reg (__tmp.124 __sp.31)  <655>;
    () void___rts_jr_w32 (__la.20)  <656>;
    (__rt.652 var=21 stl=X off=10) assign (__rt.637)  <657>;
    () out (__rt.652)  <658>;
    () sink (__sp.651)  <664>;
} #0
0 : 'src/math.c';
----------
0 : (0,1686:0,0);
3 : (0,1698:22,8);
4 : (0,1698:4,8);
6 : (0,1698:36,9);
7 : (0,1699:8,12);
9 : (0,1703:4,13);
11 : (0,1703:14,14);
12 : (0,1704:23,14);
13 : (0,1704:8,14);
17 : (0,1704:28,15);
18 : (0,1705:13,18);
19 : (0,1705:18,18);
20 : (0,1705:13,18);
22 : (0,1706:12,19);
24 : (0,1706:12,19);
25 : (0,1706:12,19);
26 : (0,1705:13,22);
29 : (0,1703:4,29);
31 : (0,1710:8,33);
32 : (0,1710:4,33);
34 : (0,1710:13,34);
35 : (0,1711:8,35);
36 : (0,1711:8,35);
38 : (0,1711:8,36);
39 : (0,1711:8,36);
41 : (0,1711:8,36);
43 : (0,1711:8,43);
45 : (0,1710:13,48);
46 : (0,1710:4,49);
48 : (0,1716:4,54);
49 : (0,1716:4,54);
51 : (0,1717:11,55);
52 : (0,1716:4,57);
54 : (0,1725:4,64);
58 : (0,1725:4,65);
60 : (0,1725:16,65);
62 : (0,1727:8,66);
64 : (0,1727:18,67);
65 : (0,1727:8,72);
67 : (0,1725:11,78);
71 : (0,1737:9,83);
72 : (0,1737:4,83);
74 : (0,1737:14,84);
76 : (0,1739:8,85);
78 : (0,1739:20,86);
80 : (0,1741:12,87);
82 : (0,1742:18,88);
83 : (0,1744:18,90);
85 : (0,1739:8,95);
87 : (0,1737:4,100);
89 : (0,1699:8,108);
92 : (0,1750:4,111);
145 : (0,1703:9,13);
150 : (0,1727:12,66);
165 : (0,1739:13,85);
166 : (0,1739:13,85);
167 : (0,1739:13,85);
171 : (0,1741:17,87);
172 : (0,1741:17,87);
173 : (0,1741:17,87);
184 : (0,1699:16,9);
185 : (0,1699:16,9);
191 : (0,1699:18,9);
198 : (0,1706:21,19);
199 : (0,1706:21,19);
205 : (0,1706:24,19);
235 : (0,1750:4,111);
236 : (0,1750:4,111);
----------
37 : (0,1686:6,0);
38 : (0,1686:6,0);
40 : (0,1686:6,0);
41 : (0,1686:6,0);
61 : (0,1698:11,0);
63 : (0,1698:10,8);
66 : (0,1698:22,8);
85 : (0,1698:4,8);
88 : (0,1703:11,0);
109 : (0,1703:4,13);
110 : (0,1704:16,0);
112 : (0,1704:14,14);
115 : (0,1704:23,14);
134 : (0,1704:8,14);
135 : (0,1704:28,0);
136 : (0,1704:28,0);
138 : (0,1704:28,0);
139 : (0,1704:28,15);
140 : (0,1704:28,15);
141 : (0,1704:35,0);
169 : (0,1705:18,18);
188 : (0,1705:13,18);
196 : (0,1706:12,19);
198 : (0,1706:24,0);
278 : (0,1709:13,0);
280 : (0,1709:11,32);
302 : (0,1710:4,33);
305 : (0,1711:8,0);
307 : (0,1711:8,35);
329 : (0,1711:8,35);
338 : (0,1711:8,36);
342 : (0,1711:8,36);
349 : (0,1711:45,0);
351 : (0,1711:42,36);
354 : (0,1711:36,0);
357 : (0,1711:19,41);
360 : (0,1711:31,41);
361 : (0,1711:8,41);
369 : (0,1711:8,41);
373 : (0,1711:8,41);
380 : (0,1711:8,45);
381 : (0,1711:8,45);
385 : (0,1712:14,46);
386 : (0,1712:10,46);
387 : (0,1710:4,51);
388 : (0,1710:4,51);
393 : (0,1714:6,52);
394 : (0,1715:13,0);
396 : (0,1715:12,53);
399 : (0,1715:24,53);
402 : (0,1716:8,54);
424 : (0,1716:4,54);
426 : (0,1716:4,59);
429 : (0,1718:6,60);
433 : (0,1723:6,0);
465 : (0,1725:4,65);
471 : (0,1725:4,65);
472 : (0,1725:4,65);
473 : (0,1725:4,65);
477 : (0,1726:13,65);
498 : (0,1727:8,66);
500 : (0,1728:20,67);
502 : (0,1729:16,68);
504 : (0,1730:16,69);
506 : (0,1727:8,74);
507 : (0,1727:8,74);
508 : (0,1727:8,74);
512 : (0,1733:9,76);
515 : (0,1725:11,78);
516 : (0,1725:4,78);
524 : (0,1725:4,78);
530 : (0,1725:4,78);
531 : (0,1725:4,78);
532 : (0,1725:4,78);
561 : (0,1737:4,83);
562 : (0,1738:15,0);
585 : (0,1739:8,85);
609 : (0,1741:12,87);
610 : (0,1742:21,0);
612 : (0,1742:18,88);
615 : (0,1744:23,90);
616 : (0,1744:18,90);
617 : (0,1741:12,92);
618 : (0,1739:8,97);
620 : (0,1737:4,102);
624 : (0,1747:11,103);
625 : (0,1747:16,0);
627 : (0,1747:15,103);
630 : (0,1748:13,104);
631 : (0,1748:7,104);
642 : (0,1698:4,109);
655 : (0,1750:4,111);
656 : (0,1750:4,111);
657 : (0,1750:4,0);
721 : (0,1717:11,55);
722 : (0,1721:7,61);
723 : (0,1732:11,75);
724 : (0,1712:14,0);
726 : (0,1714:6,0);
799 : (0,1739:13,0);
800 : (0,1739:13,85);
802 : (0,1739:13,85);
803 : (0,1739:13,85);
804 : (0,1739:13,85);
805 : (0,1739:13,85);
806 : (0,1739:13,85);
814 : (0,1741:17,0);
815 : (0,1741:17,87);
817 : (0,1741:17,87);
818 : (0,1741:17,87);
819 : (0,1741:17,87);
820 : (0,1741:17,87);
821 : (0,1741:17,87);
822 : (0,1741:17,87);
851 : (0,1699:16,0);
852 : (0,1699:16,9);
853 : (0,1699:16,9);
854 : (0,1699:16,9);
855 : (0,1699:16,9);
856 : (0,1699:16,9);
857 : (0,1699:16,9);
864 : (0,1699:18,0);
866 : (0,1699:18,9);
867 : (0,1699:18,9);
868 : (0,1699:18,9);
869 : (0,1699:18,9);
870 : (0,1699:18,9);
877 : (0,1706:21,0);
878 : (0,1706:21,19);
879 : (0,1706:21,19);
880 : (0,1706:21,19);
881 : (0,1706:21,19);
882 : (0,1706:21,19);
883 : (0,1706:21,19);
890 : (0,1706:24,0);
892 : (0,1706:24,19);
893 : (0,1706:24,19);
894 : (0,1706:24,19);
895 : (0,1706:24,19);
896 : (0,1706:24,19);
953 : (0,1711:8,35);
954 : (0,1703:9,13);
955 : (0,1710:8,33);
956 : (0,1716:4,54);
957 : (0,1727:12,66);
958 : (0,1739:13,85);
959 : (0,1737:9,83);
985 : (0,1706:24,19);
986 : (0,1750:4,111);
988 : (0,1750:4,0);
991 : (0,1699:18,9);
994 : (0,1705:13,18);
998 : (0,1704:8,14);
1002 : (0,1703:4,13);
1007 : (0,1711:8,41);
1010 : (0,1711:8,35);
1016 : (0,1710:4,33);
1021 : (0,1716:4,54);
1026 : (0,1727:8,66);
1031 : (0,1725:4,78);
1034 : (0,1741:12,87);
1039 : (0,1739:8,85);
1044 : (0,1737:4,83);
1049 : (0,1698:4,8);

