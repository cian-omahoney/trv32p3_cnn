
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb  7 12:34:19 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/clib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline int toupper(int)
Ftoupper : user_defined, called {
    fnm : "toupper" 'int toupper(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
}
****
***/

[
    0 : toupper typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : _ct_code typ=w08 bnd=e algn=1 stl=DMb
   21 : __rd___sp typ=w32 bnd=m
   23 : __ptr__ct_code typ=w32 val=0a bnd=m adro=19
   24 : __la typ=w32 bnd=p tref=w32__
   26 : c typ=w32 bnd=p tref=__sint__
   27 : __ct_0S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   34 : __tmpb1___sint_islower___sint typ=__uchar bnd=m tref=__uchar__
   36 : __tmpb0_Ftoupper typ=bool bnd=m tref=bool__
   41 : __tmp typ=w32 bnd=m
   42 : __fch__ct_code typ=__uchar bnd=m
   44 : __ct_1 typ=w32 val=1f bnd=m
   46 : __tmp typ=w32 bnd=m
   48 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   57 : __tmp typ=w32 bnd=m
   58 : __ct_0s0 typ=w32 val=0s0 bnd=m
   60 : __tmp typ=w32 bnd=m
   66 : __ct_m32 typ=w32 val=-32f bnd=m
   67 : __linex typ=w32 bnd=m
   76 : __either typ=bool bnd=m
   77 : __trgt typ=t13s_s2 val=0j bnd=m
   78 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ftoupper {
    #9 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (_ct_code.18 var=19) source ()  <29>;
    (__ptr__ct_code.21 var=23) const ()  <32>;
    (__la.23 var=24 stl=X off=1) inp ()  <34>;
    (__la.24 var=24) deassign (__la.23)  <35>;
    (c.27 var=26 stl=X off=11) inp ()  <38>;
    (c.28 var=26) deassign (c.27)  <39>;
    (__rd___sp.30 var=21) rd_res_reg (__R_SP.11 __sp.17)  <41>;
    (__ct_0S0.31 var=27) const ()  <42>;
    (__tmp.33 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.30 __ct_0S0.31)  <44>;
    (__R_SP.34 var=12 __sp.35 var=18) wr_res_reg (__tmp.33 __sp.17)  <45>;
    (__tmpb1___sint_islower___sint.48 var=34) __uchar___uchar___sint (c.28)  <59>;
    (__tmp.72 var=41) __Pvoid__pl___Pvoid___sint (__ptr__ct_code.21 __tmpb1___sint_islower___sint.48)  <84>;
    (__fch__ct_code.73 var=42) load (__M_DMb.2 __tmp.72 _ct_code.18)  <85>;
    (__ct_1.75 var=44) const ()  <87>;
    (__tmp.77 var=46) __uint__ad___uint___uint (__fch__ct_code.73 __ct_1.75)  <89>;
    (__ct_0.81 var=48) const ()  <93>;
    (__tmpb0_Ftoupper.146 var=36) bool__eq___sint___sint (__tmp.77 __ct_0.81)  <203>;
    (__trgt.149 var=77) const ()  <214>;
    () void_br_bool_t13s_s2 (__tmpb0_Ftoupper.146 __trgt.149)  <215>;
    (__either.150 var=76) undefined ()  <216>;
    if {
        {
            () if_expr (__either.150)  <115>;
        } #11
        {
        } #13 off=2
        {
            (__ct_m32.140 var=66) const ()  <180>;
            (__linex.141 var=67) __sint__pl___sint___sint (c.28 __ct_m32.140)  <182>;
            (__trgt.151 var=78) const ()  <217>;
            () void_j_t21s_s2 (__trgt.151)  <218>;
        } #12 off=1
        {
            (__tmp.109 var=57) merge (c.28 __linex.141)  <122>;
        } #14
    } #10
    #16 off=3 nxt=-2
    (__rd___sp.110 var=21) rd_res_reg (__R_SP.11 __sp.35)  <123>;
    (__ct_0s0.111 var=58) const ()  <124>;
    (__tmp.113 var=60) __Pvoid__pl___Pvoid___sint (__rd___sp.110 __ct_0s0.111)  <126>;
    (__R_SP.114 var=12 __sp.115 var=18) wr_res_reg (__tmp.113 __sp.35)  <127>;
    () void___rts_jr_w32 (__la.24)  <128>;
    (__tmp.116 var=57 stl=X off=10) assign (__tmp.109)  <129>;
    () out (__tmp.116)  <130>;
    () sink (__sp.115)  <136>;
} #0
0 : 'include/ctype.h';
----------
0 : (0,67:19,0);
9 : (0,67:47,27);
10 : (0,67:47,27);
12 : (0,67:58,28);
13 : (0,67:67,29);
16 : (0,67:29,31);
----------
41 : (0,67:19,0);
42 : (0,67:19,0);
44 : (0,67:19,0);
45 : (0,67:19,0);
59 : (0,67:36,7);
84 : (0,67:36,12);
85 : (0,67:36,12);
87 : (0,67:36,0);
89 : (0,67:36,12);
93 : (0,67:47,0);
115 : (0,67:47,27);
122 : (0,67:47,30);
123 : (0,67:29,0);
124 : (0,67:29,0);
126 : (0,67:29,0);
127 : (0,67:29,31);
128 : (0,67:29,31);
129 : (0,67:47,0);
182 : (0,67:58,28);
203 : (0,67:47,26);
215 : (0,67:47,27);

