
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 16:46:09 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strcat(char * restrict, const char * restrict)
Fstrcat : user_defined, called {
    fnm : "strcat" 'char *strcat(char * restrict, const char * restrict)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
}
****
***/

[
    0 : strcat typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s1__rstr typ=w08 bnd=b stl=DMb
   20 : s2__rstr typ=w08 bnd=b stl=DMb
   21 : __rd___sp typ=w32 bnd=m
   22 : __la typ=w32 bnd=p tref=w32__
   23 : __rt typ=w32 bnd=p tref=__P__cchar__
   24 : s1 typ=w32 bnd=p tref=__P__cchar__
   25 : s2 typ=w32 bnd=p tref=__P__cchar__
   26 : __ct_0S0 typ=w32 val=0S0 bnd=m
   28 : __tmp typ=w32 bnd=m
   34 : __ct_1 typ=w32 val=1f bnd=m
   37 : __fch_s1__rstr typ=w08 bnd=m
   39 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   41 : __tmp typ=bool bnd=m
   45 : __fch_s1__rstr typ=w08 bnd=m
   49 : __tmp typ=bool bnd=m
   56 : __fch_s2__rstr typ=w08 bnd=m
   63 : __tmp typ=bool bnd=m
   67 : __fch_s2__rstr typ=w08 bnd=m
   74 : __tmp typ=bool bnd=m
   75 : __ct_0s0 typ=w32 val=0s0 bnd=m
   77 : __tmp typ=w32 bnd=m
   86 : __ct_m1 typ=w32 val=-1f bnd=m
   87 : __shv_s1 typ=w32 bnd=m
   88 : __shv_s1 typ=w32 bnd=m
   89 : __shv_s2 typ=w32 bnd=m
   99 : __either typ=bool bnd=m
  100 : __trgt typ=t13s_s2 val=0j bnd=m
  101 : __trgt typ=t13s_s2 val=0j bnd=m
  102 : __trgt typ=t21s_s2 val=0j bnd=m
  103 : __trgt typ=t13s_s2 val=0j bnd=m
  104 : __trgt typ=t13s_s2 val=0j bnd=m
  105 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrcat {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (s1__rstr.18 var=19) source ()  <29>;
    (s2__rstr.19 var=20) source ()  <30>;
    (__la.21 var=22 stl=X off=1) inp ()  <32>;
    (__la.22 var=22) deassign (__la.21)  <33>;
    (s1.25 var=24 stl=X off=11) inp ()  <36>;
    (s1.26 var=24) deassign (s1.25)  <37>;
    (s2.28 var=25 stl=X off=12) inp ()  <39>;
    (s2.29 var=25) deassign (s2.28)  <40>;
    (__rd___sp.31 var=21) rd_res_reg (__R_SP.11 __sp.17)  <42>;
    (__ct_0S0.32 var=26) const ()  <43>;
    (__tmp.34 var=28) __Pvoid__pl___Pvoid___sint (__rd___sp.31 __ct_0S0.32)  <45>;
    (__R_SP.35 var=12 __sp.36 var=18) wr_res_reg (__tmp.34 __sp.17)  <46>;
    (__ct_1.43 var=34) const ()  <54>;
    (s1.45 var=24) __Pvoid__pl___Pvoid___sint (s1.26 __ct_1.43)  <56>;
    (__fch_s1__rstr.46 var=37) load (__M_DMb.2 s1.26 s1__rstr.18)  <57>;
    (__ct_0.48 var=39) const ()  <59>;
    (__tmp.273 var=41) bool__eq___sint___sint (__fch_s1__rstr.46 __ct_0.48)  <290>;
    (__trgt.278 var=101) const ()  <303>;
    () void_br_bool_t13s_s2 (__tmp.273 __trgt.278)  <304>;
    (__either.279 var=99) undefined ()  <305>;
    if {
        {
            () if_expr (__either.279)  <79>;
            () chess_frequent_else ()  <80>;
            () chess_rear_then ()  <306>;
        } #5
        {
            (__trgt.280 var=102) const ()  <307>;
            () void_j_t21s_s2 (__trgt.280)  <308>;
        } #11 off=4
        {
            #168 off=1
            (__trgt.276 var=100) const ()  <300>;
            do {
                {
                    (s1.78 var=24) entry (s1.113 s1.45)  <91>;
                } #8
                {
                    (__fch_s1__rstr.88 var=45) load (__M_DMb.2 s1.78 s1__rstr.18)  <101>;
                    (__tmp.92 var=49) bool__ne___sint___sint (__fch_s1__rstr.88 __ct_0.48)  <105>;
                    (__shv_s1.263 var=87) __Pvoid__pl___Pvoid___sint (s1.78 __ct_1.43)  <266>;
                    () void_br_bool_t13s_s2 (__tmp.92 __trgt.276)  <301>;
                    (__either.277 var=99) undefined ()  <302>;
                } #9 off=2
                {
                    () while_expr (__either.277)  <106>;
                    (s1.113 var=24 s1.114 var=24) exit (__shv_s1.263)  <117>;
                } #10
            } #7 rng=[1,2147483647]
        } #6
        {
            (s1.127 var=24) merge (s1.45 s1.114)  <124>;
        } #12
    } #4
    #13 off=5
    (s1.131 var=24) __Pvoid__pl___Pvoid___sint (s1.127 __ct_m1.259)  <128>;
    (s2.134 var=25) __Pvoid__pl___Pvoid___sint (s2.29 __ct_1.43)  <131>;
    (__fch_s2__rstr.135 var=56) load (__M_DMb.2 s2.29 s2__rstr.19)  <132>;
    (s1.138 var=24) __Pvoid__pl___Pvoid___sint (s1.131 __ct_1.43)  <135>;
    (__M_DMb.139 var=3 s1__rstr.140 var=19) store (__fch_s2__rstr.135 s1.131 s1__rstr.18)  <136>;
    (__ct_m1.259 var=86) const ()  <261>;
    (__tmp.272 var=63) bool__eq___sint___sint (__fch_s2__rstr.135 __ct_0.48)  <289>;
    (__trgt.283 var=104) const ()  <312>;
    () void_br_bool_t13s_s2 (__tmp.272 __trgt.283)  <313>;
    (__either.284 var=99) undefined ()  <314>;
    if {
        {
            () if_expr (__either.284)  <158>;
            () chess_frequent_else ()  <159>;
            () chess_rear_then ()  <315>;
        } #15
        {
            (__trgt.285 var=105) const ()  <316>;
            () void_j_t21s_s2 (__trgt.285)  <317>;
        } #21 off=9
        {
            #169 off=6
            (__trgt.281 var=103) const ()  <309>;
            do {
                {
                    (s1__rstr.168 var=19) entry (s1__rstr.204 s1__rstr.140)  <166>;
                    (s1.172 var=24) entry (s1.212 s1.138)  <170>;
                    (s2.177 var=25) entry (s2.222 s2.134)  <175>;
                } #18
                {
                    (__fch_s2__rstr.182 var=67) load (__M_DMb.2 s2.177 s2__rstr.19)  <180>;
                    (__M_DMb.186 var=3 s1__rstr.187 var=19) store (__fch_s2__rstr.182 s1.172 s1__rstr.168)  <184>;
                    (__tmp.191 var=74) bool__ne___sint___sint (__fch_s2__rstr.182 __ct_0.48)  <188>;
                    (__shv_s1.264 var=88) __Pvoid__pl___Pvoid___sint (s1.172 __ct_1.43)  <267>;
                    (__shv_s2.265 var=89) __Pvoid__pl___Pvoid___sint (s2.177 __ct_1.43)  <268>;
                    () void_br_bool_t13s_s2 (__tmp.191 __trgt.281)  <310>;
                    (__either.282 var=99) undefined ()  <311>;
                } #19 off=7
                {
                    () while_expr (__either.282)  <189>;
                    (s1__rstr.204 var=19 s1__rstr.205 var=19) exit (s1__rstr.187)  <196>;
                    (s1.212 var=24 s1.213 var=24) exit (__shv_s1.264)  <200>;
                    (s2.222 var=25 s2.223 var=25) exit (__shv_s2.265)  <205>;
                } #20
            } #17 rng=[1,2147483647]
        } #16
        {
            (s1__rstr.226 var=19) merge (s1__rstr.140 s1__rstr.205)  <207>;
        } #22
    } #14
    #24 off=10 nxt=-2
    (__rd___sp.231 var=21) rd_res_reg (__R_SP.11 __sp.36)  <212>;
    (__ct_0s0.232 var=75) const ()  <213>;
    (__tmp.234 var=77) __Pvoid__pl___Pvoid___sint (__rd___sp.231 __ct_0s0.232)  <215>;
    (__R_SP.235 var=12 __sp.236 var=18) wr_res_reg (__tmp.234 __sp.36)  <216>;
    () void___rts_jr_w32 (__la.22)  <217>;
    (__rt.237 var=23 stl=X off=10) assign (s1.26)  <218>;
    () out (__rt.237)  <219>;
    () sink (__sp.236)  <225>;
    () sink (s1__rstr.226)  <226>;
} #0
0 : 'src/string.c';
----------
0 : (0,63:0,0);
3 : (0,66:4,4);
4 : (0,66:4,4);
6 : (0,66:4,5);
7 : (0,66:4,5);
9 : (0,67:6,5);
11 : (0,66:4,10);
13 : (0,69:4,20);
14 : (0,69:4,20);
16 : (0,69:4,21);
17 : (0,69:4,21);
19 : (0,69:27,21);
21 : (0,69:4,28);
24 : (0,70:4,31);
----------
42 : (0,63:6,0);
43 : (0,63:6,0);
45 : (0,63:6,0);
46 : (0,63:6,0);
54 : (0,66:4,0);
56 : (0,66:4,3);
57 : (0,66:4,4);
59 : (0,66:4,0);
79 : (0,66:4,4);
91 : (0,66:4,5);
101 : (0,66:11,8);
105 : (0,66:4,8);
106 : (0,66:4,8);
117 : (0,66:4,8);
124 : (0,66:4,12);
128 : (0,68:6,14);
131 : (0,69:4,17);
132 : (0,69:4,18);
135 : (0,69:4,19);
136 : (0,69:4,20);
158 : (0,69:4,20);
166 : (0,69:4,21);
170 : (0,69:4,21);
175 : (0,69:4,21);
180 : (0,69:20,24);
184 : (0,69:12,26);
188 : (0,69:4,26);
189 : (0,69:4,26);
196 : (0,69:4,26);
200 : (0,69:4,26);
205 : (0,69:4,26);
207 : (0,69:4,30);
212 : (0,70:4,0);
213 : (0,70:4,0);
215 : (0,70:4,0);
216 : (0,70:4,31);
217 : (0,70:4,31);
218 : (0,70:11,0);
261 : (0,68:6,0);
266 : (0,66:14,0);
267 : (0,69:15,0);
268 : (0,69:23,0);
289 : (0,69:4,20);
290 : (0,66:4,4);
301 : (0,66:4,8);
304 : (0,66:4,4);
310 : (0,69:4,26);
313 : (0,69:4,20);

