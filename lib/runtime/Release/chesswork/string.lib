
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 16:36:23 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn

toolrelease _22R4;


// additional
prop gp_offset_type = ( __sint );

// void *memcpy(void * restrict, const void * restrict, size_t)
Fmemcpy : user_defined, called {
    fnm : "memcpy" 'void *memcpy(void * restrict, const void * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void *memmove(void *, const void *, size_t)
Fmemmove : user_defined, called {
    fnm : "memmove" 'void *memmove(void *, const void *, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// char *strcpy(char * restrict, const char * restrict)
Fstrcpy : user_defined, called {
    fnm : "strcpy" 'char *strcpy(char * restrict, const char * restrict)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// char *strncpy(char * restrict, const char * restrict, size_t)
Fstrncpy : user_defined, called {
    fnm : "strncpy" 'char *strncpy(char * restrict, const char * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// char *strcat(char * restrict, const char * restrict)
Fstrcat : user_defined, called {
    fnm : "strcat" 'char *strcat(char * restrict, const char * restrict)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// char *strncat(char * restrict, const char * restrict, size_t)
Fstrncat : user_defined, called {
    fnm : "strncat" 'char *strncat(char * restrict, const char * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int memcmp(const void *, const void *, size_t)
Fmemcmp : user_defined, called {
    fnm : "memcmp" 'int memcmp(const void *, const void *, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int strcmp(const char *, const char *)
Fstrcmp : user_defined, called {
    fnm : "strcmp" 'int strcmp(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int strncmp(const char *, const char *, size_t)
Fstrncmp : user_defined, called {
    fnm : "strncmp" 'int strncmp(const char *, const char *, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// size_t strxfrm(char * restrict, const char * restrict, size_t)
Fstrxfrm : user_defined, called {
    fnm : "strxfrm" 'size_t strxfrm(char * restrict, const char * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void *memchr(const void *, int, size_t)
Fmemchr : user_defined, called {
    fnm : "memchr" 'void *memchr(const void *, int, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// char *strchr(const char *, int)
Fstrchr : user_defined, called {
    fnm : "strchr" 'char *strchr(const char *, int)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// size_t strcspn(const char *, const char *)
Fstrcspn : user_defined, called {
    fnm : "strcspn" 'size_t strcspn(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// char *strpbrk(const char *, const char *)
Fstrpbrk : user_defined, called {
    fnm : "strpbrk" 'char *strpbrk(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// char *strrchr(const char *, int)
Fstrrchr : user_defined, called {
    fnm : "strrchr" 'char *strrchr(const char *, int)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// size_t strspn(const char *, const char *)
Fstrspn : user_defined, called {
    fnm : "strspn" 'size_t strspn(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// char *strstr(const char *, const char *)
Fstrstr : user_defined, called {
    fnm : "strstr" 'char *strstr(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// char *strtok(char * restrict, const char * restrict)
Fstrtok : user_defined, called {
    fnm : "strtok" 'char *strtok(char * restrict, const char * restrict)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void *memset(void *, int, size_t)
Fmemset : user_defined, called {
    fnm : "memset" 'void *memset(void *, int, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// char *strerror(int)
Fstrerror : user_defined, called {
    fnm : "strerror" 'char *strerror(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// size_t strlen(const char *)
Fstrlen : user_defined, called {
    fnm : "strlen" 'size_t strlen(const char *)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

