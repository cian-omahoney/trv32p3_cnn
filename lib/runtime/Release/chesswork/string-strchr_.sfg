
// File generated by noodle version U-2022.12#33f3808fcb#221128, Tue Mar 19 17:12:47 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strchr(const char *, int)
Fstrchr : user_defined, called {
    fnm : "strchr" 'char *strchr(const char *, int)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
}
****
***/

[
    0 : strchr typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__P__cchar__
   22 : s typ=w32 bnd=p tref=__P__cchar__
   23 : c typ=w32 bnd=p tref=__sint__
   24 : __ct_0S0 typ=w32 val=0S0 bnd=m
   26 : __tmp typ=w32 bnd=m
   27 : d typ=w08 bnd=m tref=__cchar__
   29 : __ct_1 typ=w32 val=1f bnd=m
   34 : __tmp typ=w08 bnd=m
   36 : __tmp typ=bool bnd=m
   40 : __ct_0s0 typ=w32 val=0s0 bnd=m
   42 : __tmp typ=w32 bnd=m
   44 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   46 : __tmp typ=bool bnd=m
   60 : __shv_s typ=w32 bnd=m
   69 : __either typ=bool bnd=m
   70 : __trgt typ=t13s_s2 val=0j bnd=m
   71 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fstrchr {
    #23 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (s.23 var=22 stl=X off=11) inp ()  <34>;
    (s.24 var=22) deassign (s.23)  <35>;
    (c.26 var=23 stl=X off=12) inp ()  <37>;
    (c.27 var=23) deassign (c.26)  <38>;
    (__rd___sp.29 var=19) rd_res_reg (__R_SP.11 __sp.17)  <40>;
    (__ct_0S0.30 var=24) const ()  <41>;
    (__tmp.32 var=26) __Pvoid__pl___Pvoid___sint (__rd___sp.29 __ct_0S0.30)  <43>;
    (__R_SP.33 var=12 __sp.34 var=18) wr_res_reg (__tmp.32 __sp.17)  <44>;
    (__ct_1.50 var=29) const ()  <61>;
    (__tmp.55 var=34) __schar___schar___sint (c.27)  <66>;
    (__rd___sp.73 var=19) rd_res_reg (__R_SP.11 __sp.34)  <85>;
    (__ct_0s0.74 var=40) const ()  <86>;
    (__tmp.76 var=42) __Pvoid__pl___Pvoid___sint (__rd___sp.73 __ct_0s0.74)  <88>;
    (__ct_0.105 var=44) const ()  <124>;
    (__trgt.172 var=70) const ()  <221>;
    (__trgt.174 var=71) const ()  <226>;
    do {
        {
            (s.47 var=22) entry (s.126 s.24)  <58>;
        } #5
        {
            #7 off=1
            (d.53 var=27) load (__M_DMb.2 s.47 __extDMb.16)  <64>;
            (__tmp.57 var=36) bool__eq___sint___sint (d.53 __tmp.55)  <68>;
            (__shv_s.165 var=60) __Pvoid__pl___Pvoid___sint (s.47 __ct_1.50)  <194>;
            () void_br_bool_t13s_s2 (__tmp.57 __trgt.172)  <222>;
            (__either.173 var=69) undefined ()  <223>;
            if {
                {
                    () if_expr (__either.173)  <81>;
                    () chess_frequent_else ()  <224>;
                    () chess_rear_then ()  <225>;
                } #9
                {
                    (__R_SP.77 var=12 __sp.78 var=18) wr_res_reg (__tmp.76 __sp.34)  <89>;
                    () void___rts_jr_w32 (__la.20)  <90>;
                    (__rt.79 var=21 stl=X off=10) assign (s.47)  <91>;
                    () out (__rt.79)  <92>;
                    () sink (__sp.78)  <98>;
                } #13 off=3 nxt=-2
                {
                } #14 off=2
                {
                } #15
            } #8
            #16 off=4
            (__tmp.107 var=46) bool__ne___sint___sint (d.53 __ct_0.105)  <126>;
            () void_br_bool_t13s_s2 (__tmp.107 __trgt.174)  <227>;
            (__either.175 var=69) undefined ()  <228>;
        } #6
        {
            () while_expr (__either.175)  <127>;
            (s.126 var=22 s.127 var=22) exit (__shv_s.165)  <137>;
        } #17
    } #4
    #20 off=5 nxt=-2
    (__R_SP.139 var=12 __sp.140 var=18) wr_res_reg (__tmp.76 __sp.34)  <147>;
    () void___rts_jr_w32 (__la.20)  <148>;
    (__rt.141 var=21 stl=X off=10) assign (__ct_0.105)  <149>;
    () out (__rt.141)  <150>;
    () sink (__sp.140)  <156>;
} #0
0 : 'src/string.c';
----------
0 : (0,148:0,0);
4 : (0,156:6,2);
6 : (0,152:7,2);
7 : (0,154:14,5);
8 : (0,154:8,5);
13 : (0,155:12,6);
14 : (0,154:8,9);
16 : (0,156:6,13);
20 : (0,157:4,14);
----------
40 : (0,148:6,0);
41 : (0,148:6,0);
43 : (0,148:6,0);
44 : (0,148:6,0);
58 : (0,156:6,2);
61 : (0,153:14,0);
64 : (0,153:12,4);
66 : (0,154:17,5);
68 : (0,154:14,5);
81 : (0,154:8,5);
85 : (0,155:12,0);
86 : (0,155:12,0);
88 : (0,155:12,0);
89 : (0,155:12,6);
90 : (0,155:12,6);
91 : (0,155:19,0);
124 : (0,156:6,0);
126 : (0,156:6,13);
127 : (0,156:6,13);
137 : (0,156:6,13);
147 : (0,157:4,14);
148 : (0,157:4,14);
149 : (0,157:11,0);
194 : (0,153:14,0);
222 : (0,154:8,5);
227 : (0,156:6,13);

