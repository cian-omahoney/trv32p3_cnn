
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:45:54 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  int strcmp(const char *, const char *)
Fstrcmp : user_defined, called {
    fnm : "strcmp" 'int strcmp(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
}
****
***/

[
    0 : strcmp typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__sint__
   22 : s1 typ=w32 bnd=p tref=__P__cchar__
   23 : s2 typ=w32 bnd=p tref=__P__cchar__
   24 : __ct_0S0 typ=w32 val=0S0 bnd=m
   26 : __tmp typ=w32 bnd=m
   27 : c1 typ=w08 bnd=m lscp=9 tref=__cchar__
   29 : c2 typ=w08 bnd=m lscp=9 tref=__cchar__
   33 : __ct_1 typ=w32 val=1f bnd=m
   43 : __tmp typ=bool bnd=m
   47 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   49 : __tmp typ=bool bnd=m
   50 : __tmp typ=bool bnd=m
   51 : __tmp typ=__uchar bnd=m
   53 : __tmp typ=__uchar bnd=m
   56 : __ct_0s0 typ=w32 val=0s0 bnd=m
   58 : __tmp typ=w32 bnd=m
   70 : __shv_s1 typ=w32 bnd=m
   71 : __shv_s2 typ=w32 bnd=m
   78 : __true typ=bool val=1f bnd=m
   79 : __false typ=bool val=0f bnd=m
   80 : __either typ=bool bnd=m
   81 : __trgt typ=t13s_s2 val=0j bnd=m
   82 : __trgt typ=t13s_s2 val=0j bnd=m
   83 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrcmp {
    #36 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (s1.23 var=22 stl=X off=11) inp ()  <34>;
    (s1.24 var=22) deassign (s1.23)  <35>;
    (s2.26 var=23 stl=X off=12) inp ()  <37>;
    (s2.27 var=23) deassign (s2.26)  <38>;
    (__rd___sp.29 var=19) rd_res_reg (__R_SP.11 __sp.17)  <40>;
    (__ct_0S0.30 var=24) const ()  <41>;
    (__tmp.32 var=26) __Pvoid__pl___Pvoid___sint (__rd___sp.29 __ct_0S0.30)  <43>;
    (__R_SP.33 var=12 __sp.34 var=18) wr_res_reg (__tmp.32 __sp.17)  <44>;
    (__ct_1.70 var=33) const ()  <83>;
    (__ct_0.99 var=47) const ()  <113>;
    (__rd___sp.122 var=19) rd_res_reg (__R_SP.11 __sp.34)  <137>;
    (__ct_0s0.123 var=56) const ()  <138>;
    (__tmp.125 var=58) __Pvoid__pl___Pvoid___sint (__rd___sp.122 __ct_0s0.123)  <140>;
    (__trgt.245 var=81) const ()  <293>;
    (__trgt.248 var=82) const ()  <297>;
    (__trgt.250 var=83) const ()  <301>;
    do {
        {
            (s1.64 var=22) entry (s1.177 s1.24)  <77>;
            (s2.67 var=23) entry (s2.183 s2.27)  <80>;
        } #8
        {
            #10 off=1
            (c1.73 var=27) load (__M_DMb.2 s1.64 __extDMb.16)  <86>;
            (c2.78 var=29) load (__M_DMb.2 s2.67 __extDMb.16)  <91>;
            (__tmp.81 var=43) bool__ne___sint___sint (c1.73 c2.78)  <94>;
            (__shv_s1.235 var=70) __Pvoid__pl___Pvoid___sint (s1.64 __ct_1.70)  <265>;
            (__shv_s2.236 var=71) __Pvoid__pl___Pvoid___sint (s2.67 __ct_1.70)  <266>;
            () void_br_bool_t13s_s2 (__tmp.81 __trgt.245)  <294>;
            (__either.246 var=80) undefined ()  <295>;
            if {
                {
                    () if_expr (__either.246)  <109>;
                } #12
                {
                    (__false.247 var=79) const ()  <296>;
                } #13
                {
                    (__tmp.241 var=49) bool__ne___sint___sint (c1.73 __ct_0.99)  <283>;
                    () void_br_bool_t13s_s2 (__tmp.241 __trgt.248)  <298>;
                    (__either.249 var=80) undefined ()  <299>;
                } #14 off=2
                {
                    (__tmp.242 var=50) merge (__false.247 __either.249)  <284>;
                } #15
            } #11
            if {
                {
                    () if_expr (__tmp.242)  <131>;
                    () chess_frequent_then ()  <300>;
                } #18
                {
                } #23 off=4
                {
                    (__tmp.117 var=51) __uchar___uchar___schar (c1.73)  <132>;
                    (__tmp.119 var=53) __uchar___uchar___schar (c2.78)  <134>;
                    (__rt.121 var=21) __sint__mi___sint___sint (__tmp.117 __tmp.119)  <136>;
                    (__R_SP.126 var=12 __sp.127 var=18) wr_res_reg (__tmp.125 __sp.34)  <141>;
                    () void___rts_jr_w32 (__la.20)  <142>;
                    (__rt.128 var=21 stl=X off=10) assign (__rt.121)  <143>;
                    () out (__rt.128)  <144>;
                    () sink (__sp.127)  <150>;
                } #22 off=3 nxt=-2
                {
                } #24
            } #17
            #40 off=5
            () void_j_t21s_s2 (__trgt.250)  <302>;
            (__true.251 var=78) const ()  <303>;
        } #9
        {
            () while_expr (__true.251)  <181>;
            (s1.177 var=22 s1.178 var=22) exit (__shv_s1.235)  <191>;
            (s2.183 var=23 s2.184 var=23) exit (__shv_s2.236)  <194>;
        } #26
    } #7 rng=[1,2147483647]
    #34 off=6 nxt=-4
    () sink (__sp.34)  <257>;
} #0
0 : 'src/string.c';
----------
0 : (0,102:0,0);
7 : (0,104:4,2);
9 : (0,104:14,2);
10 : (0,107:15,8);
11 : (0,107:21,8);
13 : (0,107:21,9);
14 : (0,107:27,10);
17 : (0,107:8,12);
22 : (0,108:12,13);
23 : (0,107:8,16);
----------
40 : (0,102:4,0);
41 : (0,102:4,0);
43 : (0,102:4,0);
44 : (0,102:4,0);
77 : (0,104:4,2);
80 : (0,104:4,2);
83 : (0,105:21,0);
86 : (0,105:18,4);
91 : (0,106:18,7);
94 : (0,107:15,8);
109 : (0,107:21,8);
113 : (0,107:30,0);
131 : (0,107:8,12);
132 : (0,108:19,13);
134 : (0,108:39,13);
136 : (0,108:37,13);
137 : (0,108:12,0);
138 : (0,108:12,0);
140 : (0,108:12,0);
141 : (0,108:12,13);
142 : (0,108:12,13);
143 : (0,108:37,0);
181 : (0,104:4,20);
191 : (0,104:4,20);
194 : (0,104:4,20);
265 : (0,105:21,0);
266 : (0,106:21,0);
283 : (0,107:27,10);
284 : (0,107:21,11);
294 : (0,107:21,8);
298 : (0,107:8,12);
302 : (0,104:4,20);

