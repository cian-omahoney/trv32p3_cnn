
// File generated by noodle version U-2022.12#33f3808fcb#221128, Sat Mar 16 14:39:53 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float ceilf(float)
Fceilf : user_defined, called {
    fnm : "ceilf" 'float ceilf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
}
****
!!  bool f32_lt(float32_t, float32_t)
Ff32_lt : user_defined, called {
    fnm : "f32_lt" 'bool f32_lt(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : ceilf typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__ffloat__
   22 : x typ=w32 bnd=p tref=__ffloat__
   23 : __ct_0S0 typ=w32 val=0S0 bnd=m
   25 : __tmp typ=w32 bnd=m
   26 : i0 typ=w32 bnd=m tref=int32_t__
   27 : j0 typ=w32 bnd=m tref=int32_t__
   28 : i typ=w32 bnd=m tref=u_int32_t__
   30 : __ct_23 typ=w32 val=23f bnd=m
   32 : __tmp typ=w32 bnd=m
   33 : __ct_255 typ=w32 val=255f bnd=m
   35 : __tmp typ=w32 bnd=m
   41 : __tmp typ=bool bnd=m
   42 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   44 : __tmp typ=bool bnd=m
   45 : __ct_1900671690 typ=w32 val=1900671690f bnd=m
   47 : __tmp typ=w32 bnd=m
   50 : __tmp typ=bool bnd=m
   53 : __tmp typ=bool bnd=m
   54 : __ct_m2147483648 typ=t20s_rp12 val=-524288f bnd=m
   58 : __tmp typ=bool bnd=m
   59 : __ct_1065353216 typ=t20s_rp12 val=260096f bnd=m
   61 : __ct_8388607 typ=w32 val=8388607f bnd=m
   65 : __tmp typ=w32 bnd=m
   68 : __tmp typ=bool bnd=m
   69 : __ct_0s0 typ=w32 val=0s0 bnd=m
   71 : __tmp typ=w32 bnd=m
   80 : __tmp typ=bool bnd=m
   82 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
   84 : __tmp typ=w32 bnd=m
   85 : __tmp typ=w32 bnd=m
   88 : __tmp typ=w32 bnd=m
   89 : __tmp typ=w32 bnd=m
   92 : __ct_128 typ=w32 val=128f bnd=m
   94 : __tmp typ=bool bnd=m
  103 : __ct_m127 typ=w32 val=-127f bnd=m
  116 : __ct_4294967295 typ=w32 val=-1f bnd=m
  121 : a typ=w32 bnd=m tref=float32_t__
  122 : b typ=w32 bnd=m tref=float32_t__
  123 : f32_lt typ=t21s_s2 val=0r bnd=m
  124 : __link typ=w32 bnd=m
  125 : __tmp typ=w32 bnd=m
  130 : a typ=w32 bnd=m tref=float32_t__
  131 : b typ=w32 bnd=m tref=float32_t__
  132 : f32_add typ=t21s_s2 val=0r bnd=m
  133 : __link typ=w32 bnd=m
  145 : __either typ=bool bnd=m
  146 : __trgt typ=t13s_s2 val=0j bnd=m
  147 : __trgt typ=t21s_s2 val=0j bnd=m
  148 : __trgt typ=t13s_s2 val=0j bnd=m
  149 : __trgt typ=t21s_s2 val=0j bnd=m
  150 : __trgt typ=t13s_s2 val=0j bnd=m
  151 : __trgt typ=t21s_s2 val=0j bnd=m
  152 : __trgt typ=t13s_s2 val=0j bnd=m
  153 : __trgt typ=t13s_s2 val=0j bnd=m
  154 : __trgt typ=t21s_s2 val=0j bnd=m
  155 : __trgt typ=t13s_s2 val=0j bnd=m
  156 : __trgt typ=t21s_s2 val=0j bnd=m
  157 : __trgt typ=t13s_s2 val=0j bnd=m
  158 : __trgt typ=t21s_s2 val=0j bnd=m
  159 : __trgt typ=t13s_s2 val=0j bnd=m
  160 : __trgt typ=t13s_s2 val=0j bnd=m
  161 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fceilf {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x.23 var=22 stl=X off=11) inp ()  <34>;
    (x.24 var=22) deassign (x.23)  <35>;
    (__rd___sp.26 var=19) rd_res_reg (__R_SP.11 __sp.17)  <37>;
    (__ct_0S0.27 var=23) const ()  <38>;
    (__tmp.29 var=25) __Pvoid__pl___Pvoid___sint (__rd___sp.26 __ct_0S0.27)  <40>;
    (__R_SP.30 var=12 __sp.31 var=18) wr_res_reg (__tmp.29 __sp.17)  <41>;
    (__ct_23.39 var=30) const ()  <50>;
    (__tmp.41 var=32) __sint__rs___sint___sint (x.24 __ct_23.39)  <52>;
    (__ct_255.42 var=33) const ()  <53>;
    (__tmp.44 var=35) __sint__ad___sint___sint (__tmp.41 __ct_255.42)  <55>;
    (j0.47 var=27) __sint__pl___sint___sint (__tmp.44 __ct_m127.294)  <58>;
    (__tmp.50 var=41) bool__lt___sint___sint (j0.47 __ct_23.39)  <61>;
    (__rd___sp.153 var=19) rd_res_reg (__R_SP.11 __sp.31)  <170>;
    (__ct_0s0.154 var=69) const ()  <171>;
    (__tmp.156 var=71) __Pvoid__pl___Pvoid___sint (__rd___sp.153 __ct_0s0.154)  <173>;
    (__ct_m127.294 var=103) const ()  <360>;
    (f32_add.327 var=132) const ()  <458>;
    (__trgt.382 var=160) const ()  <591>;
    () void_br_bool_t13s_s2 (__tmp.50 __trgt.382)  <592>;
    (__either.383 var=145) undefined ()  <593>;
    if {
        {
            () if_expr (__either.383)  <74>;
        } #5
        {
            #90 off=7
            (__ct_1900671690.78 var=45) const ()  <91>;
            (__link.328 var=133) w32_jal_t21s_s2 (f32_add.327)  <459>;
            call {
                (a.329 var=130 stl=X off=11) assign (__ct_1900671690.78)  <460>;
                (b.330 var=131 stl=X off=12) assign (x.24)  <461>;
                (__link.331 var=133 stl=X off=1) assign (__link.328)  <462>;
                (__tmp.332 var=47 stl=X off=10) Ff32_add (__link.331 a.329 b.330)  <463>;
                (__tmp.333 var=47) deassign (__tmp.332)  <464>;
            } #91 off=8
            #87 off=9
            (__ct_0.63 var=42) const ()  <75>;
            (f32_lt.313 var=123) const ()  <423>;
            (__link.314 var=124) w32_jal_t21s_s2 (f32_lt.313)  <424>;
            call {
                (a.316 var=121 stl=X off=11) assign (__ct_0.63)  <426>;
                (b.317 var=122 stl=X off=12) assign (__tmp.333)  <427>;
                (__link.318 var=124 stl=X off=1) assign (__link.314)  <428>;
                (__tmp.319 var=125 stl=X off=10) Ff32_lt (__link.318 a.316 b.317)  <429>;
                (__tmp.320 var=125) deassign (__tmp.319)  <430>;
            } #83 off=10
            #79 off=11
            (__tmp.65 var=44) bool__lt___sint___sint (j0.47 __ct_0.63)  <77>;
            (__trgt.377 var=157) const ()  <583>;
            () void_br_bool_t13s_s2 (__tmp.65 __trgt.377)  <584>;
            (__either.378 var=145) undefined ()  <585>;
            if {
                {
                    () if_expr (__either.378)  <90>;
                } #9
                {
                    #105 off=22
                    (__trgt.366 var=150) const ()  <564>;
                    () void_br_bool_t13s_s2 (__tmp.385 __trgt.366)  <565>;
                    (__either.367 var=145) undefined ()  <566>;
                    (__tmp.385 var=50) bool__eq___sint___sint (__tmp.320 __ct_0.63)  <596>;
                    if {
                        {
                            () if_expr (__either.367)  <109>;
                        } #13
                        {
                        } #27 off=30
                        {
                            #15 off=23
                            (__tmp.98 var=53) bool__lt___sint___sint (x.24 __ct_0.63)  <112>;
                            (__ct_m2147483648.111 var=54) const ()  <126>;
                            (__trgt.363 var=148) const ()  <559>;
                            () void_br_bool_t13s_s2 (__tmp.98 __trgt.363)  <560>;
                            (__either.364 var=145) undefined ()  <561>;
                            if {
                                {
                                    () if_expr (__either.364)  <125>;
                                } #17
                                {
                                } #18 off=28
                                {
                                    #20 off=24
                                    (__tmp.349 var=58) bool__eq___sint___sint (x.24 __ct_0.63)  <523>;
                                    (__trgt.360 var=146) const ()  <554>;
                                    () void_br_bool_t13s_s2 (__tmp.349 __trgt.360)  <555>;
                                    (__either.361 var=145) undefined ()  <556>;
                                    if {
                                        {
                                            () if_expr (__either.361)  <143>;
                                        } #22
                                        {
                                        } #24 off=26
                                        {
                                            (__ct_1065353216.128 var=59) const ()  <144>;
                                            (__trgt.362 var=147) const ()  <557>;
                                            () void_j_t21s_s2 (__trgt.362)  <558>;
                                        } #23 off=25
                                        {
                                            (i0.130 var=26) merge (x.24 __ct_1065353216.128)  <146>;
                                        } #25
                                    } #21
                                    #106 off=27
                                    (__trgt.365 var=149) const ()  <562>;
                                    () void_j_t21s_s2 (__trgt.365)  <563>;
                                } #19
                                {
                                    (i0.131 var=26) merge (__ct_m2147483648.111 i0.130)  <147>;
                                } #26
                            } #16
                            #107 off=29
                            (__trgt.368 var=151) const ()  <567>;
                            () void_j_t21s_s2 (__trgt.368)  <568>;
                        } #14
                        {
                            (i0.132 var=26) merge (x.24 i0.131)  <148>;
                        } #28
                    } #12
                } #10
                {
                    #30 off=12
                    (__ct_8388607.133 var=61) const ()  <149>;
                    (i.135 var=28) __uint__rs___uint___sint (__ct_8388607.133 j0.47)  <151>;
                    (__tmp.137 var=65) __uint__ad___uint___uint (x.24 i.135)  <153>;
                    (__tmp.140 var=68) bool__eq___uint___uint (__tmp.137 __ct_0.63)  <156>;
                    (__trgt.369 var=152) const ()  <569>;
                    () void_br_bool_t13s_s2 (__tmp.140 __trgt.369)  <570>;
                    (__either.370 var=145) undefined ()  <571>;
                    if {
                        {
                            () if_expr (__either.370)  <169>;
                            () chess_rear_then ()  <572>;
                        } #32
                        {
                            (__R_SP.157 var=12 __sp.158 var=18) wr_res_reg (__tmp.156 __sp.31)  <174>;
                            () void___rts_jr_w32 (__la.20)  <175>;
                            (__rt.159 var=21 stl=X off=10) assign (x.24)  <176>;
                            () out (__rt.159)  <177>;
                            () sink (__sp.158)  <183>;
                        } #35 off=14 nxt=-2
                        {
                        } #36 off=13
                        {
                        } #37
                    } #31
                    #109 off=15
                    (__trgt.374 var=155) const ()  <578>;
                    () void_br_bool_t13s_s2 (__tmp.386 __trgt.374)  <579>;
                    (__either.375 var=145) undefined ()  <580>;
                    (__tmp.386 var=50) bool__eq___sint___sint (__tmp.320 __ct_0.63)  <597>;
                    if {
                        {
                            () if_expr (__either.375)  <226>;
                        } #40
                        {
                        } #49 off=20
                        {
                            #70 off=16
                            (__tmp.351 var=80) bool__ge___sint___sint (__ct_0.63 x.24)  <525>;
                            (__trgt.371 var=153) const ()  <573>;
                            () void_br_bool_t13s_s2 (__tmp.351 __trgt.371)  <574>;
                            (__either.372 var=145) undefined ()  <575>;
                            if {
                                {
                                    () if_expr (__either.372)  <242>;
                                } #44
                                {
                                } #46 off=18
                                {
                                    (__ct_8388608.218 var=82) const ()  <244>;
                                    (__tmp.220 var=84) __uint__rs___uint___sint (__ct_8388608.218 j0.47)  <246>;
                                    (__tmp.221 var=85) __uint__pl___uint___uint (x.24 __tmp.220)  <247>;
                                    (__trgt.373 var=154) const ()  <576>;
                                    () void_j_t21s_s2 (__trgt.373)  <577>;
                                } #45 off=17
                                {
                                    (i0.223 var=26) merge (x.24 __tmp.221)  <249>;
                                } #47
                            } #43
                            #73 off=19
                            (__tmp.226 var=89) __uint__ad___uint___uint (i0.223 __tmp.307)  <252>;
                            (__ct_4294967295.306 var=116) const ()  <396>;
                            (__tmp.307 var=88) __uint__er___uint___uint (i.135 __ct_4294967295.306)  <397>;
                            (__trgt.376 var=156) const ()  <581>;
                            () void_j_t21s_s2 (__trgt.376)  <582>;
                        } #41
                        {
                            (i0.228 var=26) merge (x.24 __tmp.226)  <254>;
                        } #50
                    } #39
                    #110 off=21
                    (__trgt.379 var=158) const ()  <586>;
                    () void_j_t21s_s2 (__trgt.379)  <587>;
                } #29
                {
                    (i0.236 var=26) merge (i0.132 i0.228)  <262>;
                } #51
            } #8
        } #6
        {
            #54 off=1
            (__ct_128.242 var=92) const ()  <268>;
            (__tmp.353 var=94) bool__ne___sint___sint (j0.47 __ct_128.242)  <527>;
            (__trgt.380 var=159) const ()  <588>;
            () void_br_bool_t13s_s2 (__tmp.353 __trgt.380)  <589>;
            (__either.381 var=145) undefined ()  <590>;
            if {
                {
                    () if_expr (__either.381)  <283>;
                } #56
                {
                } #58 off=5
                {
                    #102 off=2
                    (__R_SP.356 var=12 __sp.357 var=18) wr_res_reg (__tmp.156 __sp.31)  <547>;
                    () void_j_t21s_s2 (f32_add.327)  <552>;
                    call {
                        (a.339 var=130 stl=X off=11) assign (x.24)  <473>;
                        (b.340 var=131 stl=X off=12) assign (x.24)  <474>;
                        (__la.341 var=20 stl=X off=1) assign (__la.20)  <475>;
                        (__rt.342 var=21 stl=X off=10) Ff32_add (__la.341 a.339 b.340)  <476>;
                        (__rt.343 var=21) deassign (__rt.342)  <477>;
                    } #97 off=3
                    #103 off=4 nxt=-2
                    (__rt.358 var=21 stl=X off=10) assign (__rt.343)  <549>;
                    () out (__rt.358)  <550>;
                    () sink (__sp.357)  <551>;
                } #57
                {
                } #59
            } #55
            #112 off=6
            (__trgt.384 var=161) const ()  <594>;
            () void_j_t21s_s2 (__trgt.384)  <595>;
        } #53
        {
            (__rt.270 var=21) merge (i0.236 x.24)  <297>;
        } #60
    } #4
    #62 off=33 nxt=-2
    (__R_SP.275 var=12 __sp.276 var=18) wr_res_reg (__tmp.156 __sp.31)  <302>;
    () void___rts_jr_w32 (__la.20)  <303>;
    (__rt.277 var=21 stl=X off=10) assign (__rt.270)  <304>;
    () out (__rt.277)  <305>;
    () sink (__sp.276)  <311>;
} #0
0 : 'src/math.c';
----------
0 : (0,127:0,0);
3 : (0,136:9,7);
4 : (0,136:4,7);
6 : (0,151:8,8);
8 : (0,137:8,8);
10 : (0,137:17,9);
12 : (0,138:12,9);
14 : (0,138:34,10);
15 : (0,139:21,10);
16 : (0,139:16,10);
18 : (0,139:25,11);
19 : (0,140:21,14);
20 : (0,140:26,14);
21 : (0,140:21,14);
23 : (0,140:31,15);
24 : (0,140:21,18);
27 : (0,138:12,25);
29 : (0,142:15,30);
30 : (0,144:21,31);
31 : (0,144:12,31);
35 : (0,144:26,32);
36 : (0,144:12,35);
39 : (0,145:12,38);
41 : (0,145:34,39);
43 : (0,146:16,39);
45 : (0,146:28,40);
46 : (0,146:16,42);
49 : (0,145:12,48);
53 : (0,150:11,59);
54 : (0,151:13,59);
55 : (0,151:8,59);
57 : (0,152:13,60);
58 : (0,151:21,63);
62 : (0,155:4,72);
70 : (0,146:21,39);
73 : (0,147:19,45);
79 : (0,137:13,8);
83 : (0,138:21,9);
87 : (0,138:21,9);
90 : (0,138:19,9);
91 : (0,138:19,9);
97 : (0,152:13,60);
102 : (0,155:4,72);
103 : (0,155:4,72);
----------
37 : (0,127:6,0);
38 : (0,127:6,0);
40 : (0,127:6,0);
41 : (0,127:6,0);
50 : (0,135:15,0);
52 : (0,135:13,6);
53 : (0,135:19,0);
55 : (0,135:18,6);
58 : (0,135:24,6);
61 : (0,136:9,7);
74 : (0,136:4,7);
75 : (0,137:14,0);
77 : (0,137:13,8);
90 : (0,137:8,8);
91 : (0,138:15,0);
109 : (0,138:12,9);
112 : (0,139:21,10);
125 : (0,139:16,10);
126 : (0,139:28,0);
143 : (0,140:21,14);
144 : (0,140:36,0);
146 : (0,140:21,20);
147 : (0,139:16,22);
148 : (0,138:12,27);
149 : (0,143:16,0);
151 : (0,143:39,30);
153 : (0,144:18,31);
156 : (0,144:21,31);
169 : (0,144:12,31);
170 : (0,144:26,0);
171 : (0,144:26,0);
173 : (0,144:26,0);
174 : (0,144:26,32);
175 : (0,144:26,32);
176 : (0,144:33,0);
226 : (0,145:12,38);
242 : (0,146:16,39);
244 : (0,146:31,0);
246 : (0,146:54,40);
247 : (0,146:28,40);
249 : (0,146:16,44);
252 : (0,147:19,45);
254 : (0,145:12,50);
262 : (0,137:8,53);
268 : (0,151:15,0);
283 : (0,151:8,59);
297 : (0,136:4,70);
302 : (0,155:4,72);
303 : (0,155:4,72);
304 : (0,155:4,0);
360 : (0,135:24,0);
396 : (0,147:23,0);
397 : (0,147:23,45);
423 : (0,138:21,0);
424 : (0,138:21,9);
426 : (0,138:21,9);
427 : (0,138:21,9);
428 : (0,138:21,9);
429 : (0,138:21,9);
430 : (0,138:21,9);
458 : (0,138:19,0);
459 : (0,138:19,9);
460 : (0,138:19,9);
461 : (0,138:19,9);
462 : (0,138:19,9);
463 : (0,138:19,9);
464 : (0,138:19,9);
473 : (0,151:29,60);
474 : (0,151:29,60);
475 : (0,151:29,60);
476 : (0,151:29,60);
477 : (0,151:29,60);
523 : (0,140:26,14);
525 : (0,146:21,39);
527 : (0,151:13,59);
547 : (0,155:4,72);
549 : (0,155:4,0);
552 : (0,151:29,60);
555 : (0,140:21,14);
560 : (0,139:16,10);
565 : (0,138:12,9);
570 : (0,144:12,31);
574 : (0,146:16,39);
579 : (0,145:12,38);
584 : (0,137:8,8);
589 : (0,151:8,59);
592 : (0,136:4,7);

