
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Apr 10 19:59:52 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  void *memcpy(void * restrict, const void * restrict, size_t)
Fmemcpy : user_defined, called {
    fnm : "memcpy" 'void *memcpy(void * restrict, const void * restrict, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
***/

[
    0 : memcpy typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : s1__rstr typ=w08 bnd=b stl=DMb
   20 : s2__rstr typ=w08 bnd=b stl=DMb
   22 : __rd___sp typ=w32 bnd=m
   23 : __la typ=w32 bnd=p tref=w32__
   24 : __rt typ=w32 bnd=p tref=__Pvoid__
   25 : s1 typ=w32 bnd=p tref=__Pvoid__
   26 : s2 typ=w32 bnd=p tref=__Pvoid__
   27 : n typ=w32 bnd=p tref=size_t__
   28 : __ct_0S0 typ=w32 val=0S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   33 : i typ=w32 bnd=m tref=size_t__
   35 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   37 : __tmp typ=bool bnd=m
   40 : __fch_s2__rstr typ=w08 bnd=m
   43 : __ct_1 typ=w32 val=1f bnd=m
   46 : __tmp typ=bool bnd=m
   47 : __ct_0s0 typ=w32 val=0s0 bnd=m
   49 : __tmp typ=w32 bnd=m
   55 : __iv0_i typ=w32 bnd=m
   56 : __iv1_i typ=w32 bnd=m
   61 : __shv___iv0_i typ=w32 bnd=m
   62 : __shv___iv1_i typ=w32 bnd=m
   71 : __either typ=bool bnd=m
   72 : __trgt typ=t13s_s2 val=0j bnd=m
   73 : __trgt typ=t13s_s2 val=0j bnd=m
   74 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fmemcpy {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (s1__rstr.18 var=19) source ()  <29>;
    (s2__rstr.19 var=20) source ()  <30>;
    (__la.22 var=23 stl=X off=1) inp ()  <33>;
    (__la.23 var=23) deassign (__la.22)  <34>;
    (s1.26 var=25 stl=X off=11) inp ()  <37>;
    (s1.27 var=25) deassign (s1.26)  <38>;
    (s2.29 var=26 stl=X off=12) inp ()  <40>;
    (s2.30 var=26) deassign (s2.29)  <41>;
    (n.32 var=27 stl=X off=13) inp ()  <43>;
    (n.33 var=27) deassign (n.32)  <44>;
    (__rd___sp.35 var=22) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_0S0.36 var=28) const ()  <47>;
    (__tmp.38 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_0S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (__ct_0.48 var=35) const ()  <59>;
    (__tmp.190 var=37) bool__eq___uint___uint (n.33 __ct_0.48)  <221>;
    (__trgt.195 var=73) const ()  <233>;
    () void_br_bool_t13s_s2 (__tmp.190 __trgt.195)  <234>;
    (__either.196 var=71) undefined ()  <235>;
    if {
        {
            () if_expr (__either.196)  <80>;
            () chess_frequent_else ()  <81>;
            () chess_rear_then ()  <236>;
        } #5
        {
            (__trgt.197 var=74) const ()  <237>;
            () void_j_t21s_s2 (__trgt.197)  <238>;
        } #11 off=4
        {
            #82 off=1
            (__ct_1.94 var=43) const ()  <106>;
            (__trgt.193 var=72) const ()  <230>;
            do {
                {
                    (s1__rstr.75 var=19) entry (s1__rstr.110 s1__rstr.18)  <88>;
                    (i.83 var=33) entry (i.126 __ct_0.48)  <96>;
                    (__iv0_i.166 var=55) entry (__iv0_i.167 s2.30)  <183>;
                    (__iv1_i.171 var=56) entry (__iv1_i.172 s1.27)  <187>;
                } #8
                {
                    (__fch_s2__rstr.89 var=40) load (__M_DMb.2 __iv0_i.166 s2__rstr.19)  <102>;
                    (__M_DMb.92 var=3 s1__rstr.93 var=19) store (__fch_s2__rstr.89 __iv1_i.171 s1__rstr.75)  <105>;
                    (i.96 var=33) __uint__pl___uint___uint (i.83 __ct_1.94)  <108>;
                    (__tmp.97 var=46) bool__lt___uint___uint (i.96 n.33)  <109>;
                    (__shv___iv0_i.183 var=61) __Pvoid__pl___Pvoid___sint (__iv0_i.166 __ct_1.94)  <200>;
                    (__shv___iv1_i.184 var=62) __Pvoid__pl___Pvoid___sint (__iv1_i.171 __ct_1.94)  <201>;
                    () void_br_bool_t13s_s2 (__tmp.97 __trgt.193)  <231>;
                    (__either.194 var=71) undefined ()  <232>;
                } #9 off=2
                {
                    () while_expr (__either.194)  <110>;
                    (s1__rstr.110 var=19 s1__rstr.111 var=19) exit (s1__rstr.93)  <117>;
                    (i.126 var=33 i.127 var=33) exit (i.96)  <125>;
                    (__iv0_i.167 var=55 __iv0_i.168 var=55) exit (__shv___iv0_i.183)  <184>;
                    (__iv1_i.172 var=56 __iv1_i.173 var=56) exit (__shv___iv1_i.184)  <188>;
                } #10
            } #7 rng=[1,2147483647]
        } #6
        {
            (s1__rstr.134 var=19) merge (s1__rstr.18 s1__rstr.111)  <129>;
        } #12
    } #4
    #14 off=5 nxt=-2
    (__rd___sp.137 var=22) rd_res_reg (__R_SP.11 __sp.40)  <132>;
    (__ct_0s0.138 var=47) const ()  <133>;
    (__tmp.140 var=49) __Pvoid__pl___Pvoid___sint (__rd___sp.137 __ct_0s0.138)  <135>;
    (__R_SP.141 var=12 __sp.142 var=18) wr_res_reg (__tmp.140 __sp.40)  <136>;
    () void___rts_jr_w32 (__la.23)  <137>;
    (__rt.143 var=24 stl=X off=10) assign (s1.27)  <138>;
    () out (__rt.143)  <139>;
    () sink (__sp.142)  <145>;
    () sink (s1__rstr.134)  <146>;
} #0
0 : 'src/string.c';
----------
0 : (0,23:0,0);
3 : (0,27:4,4);
4 : (0,27:4,4);
6 : (0,27:4,5);
7 : (0,27:4,5);
9 : (0,27:4,5);
11 : (0,27:4,12);
14 : (0,28:4,15);
----------
46 : (0,23:6,0);
47 : (0,23:6,0);
49 : (0,23:6,0);
50 : (0,23:6,0);
59 : (0,27:21,0);
80 : (0,27:4,4);
88 : (0,27:4,5);
96 : (0,27:4,5);
102 : (0,27:45,5);
105 : (0,27:37,5);
106 : (0,27:31,0);
108 : (0,27:31,0);
109 : (0,27:25,10);
110 : (0,27:4,10);
117 : (0,27:4,10);
125 : (0,27:4,10);
129 : (0,27:4,14);
132 : (0,28:4,0);
133 : (0,28:4,0);
135 : (0,28:4,0);
136 : (0,28:4,15);
137 : (0,28:4,15);
138 : (0,28:11,0);
221 : (0,27:4,4);
231 : (0,27:4,10);
234 : (0,27:4,4);

