
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Jan 25 16:07:27 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! static double kernel_cos(double, double)
Fkernel_cos : user_defined, called {
    fnm : "kernel_cos" 'double kernel_cos(double, double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
    frm : ( );
}
****
!!  long f64_to_i32_r_minMag(float64_t, bool)
Ff64_to_i32_r_minMag : user_defined, called {
    fnm : "f64_to_i32_r_minMag" 'long f64_to_i32_r_minMag(float64_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
}
!!  float64_t f64_mul(float64_t, float64_t)
Ff64_mul : user_defined, called {
    fnm : "f64_mul" 'float64_t f64_mul(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_sub(float64_t, float64_t)
Ff64_sub : user_defined, called {
    fnm : "f64_sub" 'float64_t f64_sub(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : kernel_cos typ=u08 bnd=i stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   22 : __rt_low typ=w32 bnd=m tref=__uint__
   23 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : x_low typ=w32 bnd=m tref=__uint__
   26 : x_high typ=w32 bnd=m tref=__uint__
   28 : y_low typ=w32 bnd=m tref=__uint__
   29 : y_high typ=w32 bnd=m tref=__uint__
   30 : __ct_0S0 typ=w32 val=0S0 bnd=m
   32 : __tmp typ=w32 bnd=m
   33 : ix typ=w32 bnd=m tref=int32_t__
   47 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   50 : __ct_1044381696 typ=t20s_rp12 val=254976f bnd=m
   52 : __tmp typ=bool bnd=m
   53 : __tmp typ=w32 bnd=m
   54 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   56 : __tmp typ=bool bnd=m
   59 : __ct_0s0 typ=w32 val=0s0 bnd=m
   61 : __tmp typ=w32 bnd=m
   86 : __ct_1070805811 typ=w32 val=1070805811f bnd=m
   88 : __tmp typ=bool bnd=m
   99 : __ct_1072234496 typ=t20s_rp12 val=261776f bnd=m
  101 : __tmp typ=bool bnd=m
  106 : __tmp typ=w32 bnd=m
  137 : __ct_1072693248 typ=t20s_rp12 val=261888f bnd=m
  139 : __ct_m2097152 typ=t20s_rp12 val=-512f bnd=m
  204 : a_low typ=w32 bnd=m tref=__uint__
  205 : a_high typ=w32 bnd=m tref=__uint__
  206 : __tmp typ=w32 bnd=m
  207 : f64_to_i32_r_minMag typ=t21s_s2 val=0r bnd=m
  208 : __link typ=w32 bnd=m
  210 : __ct_1 typ=w32 val=1f bnd=m
  215 : a_low typ=w32 bnd=m tref=__uint__
  216 : a_high typ=w32 bnd=m tref=__uint__
  217 : b_low typ=w32 bnd=m tref=__uint__
  218 : b_high typ=w32 bnd=m tref=__uint__
  219 : f64_mul typ=t21s_s2 val=0r bnd=m
  220 : __link typ=w32 bnd=m
  222 : __tmp typ=w32 bnd=m
  223 : __tmp typ=w32 bnd=m
  229 : a_low typ=w32 bnd=m tref=__uint__
  230 : a_high typ=w32 bnd=m tref=__uint__
  231 : b_low typ=w32 bnd=m tref=__uint__
  232 : b_high typ=w32 bnd=m tref=__uint__
  233 : f64_add typ=t21s_s2 val=0r bnd=m
  234 : __link typ=w32 bnd=m
  236 : __tmp typ=w32 bnd=m
  237 : __tmp typ=w32 bnd=m
  254 : a_low typ=w32 bnd=m tref=__uint__
  255 : a_high typ=w32 bnd=m tref=__uint__
  256 : b_low typ=w32 bnd=m tref=__uint__
  257 : b_high typ=w32 bnd=m tref=__uint__
  258 : f64_sub typ=t21s_s2 val=0r bnd=m
  259 : __link typ=w32 bnd=m
  261 : __tmp typ=w32 bnd=m
  262 : __tmp typ=w32 bnd=m
  278 : __ct_3196598484 typ=w32 val=-1098368812f bnd=m
  279 : __ct_3181968105 typ=w32 val=-1112999191f bnd=m
  280 : __ct_3182735812 typ=w32 val=-1112231484f bnd=m
  281 : __ct_1042411166 typ=w32 val=1042411166f bnd=m
  282 : __ct_2157728429 typ=w32 val=-2137238867f bnd=m
  283 : __ct_3197271631 typ=w32 val=-1097695665f bnd=m
  284 : __ct_432739728 typ=w32 val=432739728f bnd=m
  285 : __ct_1056571808 typ=w32 val=1056571808f bnd=m
  286 : __ct_381768055 typ=w32 val=381768055f bnd=m
  287 : __ct_3210133868 typ=w32 val=-1084833428f bnd=m
  288 : __ct_1431655756 typ=w32 val=1431655756f bnd=m
  289 : __ct_1067799893 typ=w32 val=1067799893f bnd=m
  290 : __ct_1071644672 typ=t20s_rp12 val=261632f bnd=m
  291 : __ct_1070727168 typ=t20s_rp12 val=261408f bnd=m
  300 : __either typ=bool bnd=m
  301 : __trgt typ=t13s_s2 val=0j bnd=m
  302 : __trgt typ=t13s_s2 val=0j bnd=m
  303 : __trgt typ=t21s_s2 val=0j bnd=m
  304 : __trgt typ=t13s_s2 val=0j bnd=m
  305 : __trgt typ=t21s_s2 val=0j bnd=m
  306 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fkernel_cos {
    #86 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x_low.28 var=25 stl=X off=12) inp ()  <39>;
    (x_low.29 var=25) deassign (x_low.28)  <40>;
    (x_high.32 var=26 stl=X off=13) inp ()  <43>;
    (x_high.33 var=26) deassign (x_high.32)  <44>;
    (y_low.37 var=28 stl=X off=14) inp ()  <48>;
    (y_low.38 var=28) deassign (y_low.37)  <49>;
    (y_high.41 var=29 stl=X off=15) inp ()  <52>;
    (y_high.42 var=29) deassign (y_high.41)  <53>;
    (__rd___sp.45 var=19) rd_res_reg (__R_SP.11 __sp.17)  <56>;
    (__ct_0S0.46 var=30) const ()  <57>;
    (__tmp.48 var=32) __Pvoid__pl___Pvoid___sint (__rd___sp.45 __ct_0S0.46)  <59>;
    (__R_SP.49 var=12 __sp.50 var=18) wr_res_reg (__tmp.48 __sp.17)  <60>;
    (__ct_2147483647.71 var=47) const ()  <82>;
    (ix.73 var=33) __sint__ad___sint___sint (x_high.33 __ct_2147483647.71)  <84>;
    (__ct_1044381696.74 var=50) const ()  <85>;
    (__ct_0.97 var=54) const ()  <109>;
    (__rd___sp.121 var=19) rd_res_reg (__R_SP.11 __sp.50)  <134>;
    (__ct_0s0.122 var=59) const ()  <135>;
    (__tmp.124 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.121 __ct_0s0.122)  <137>;
    (__ct_1072693248.349 var=137) const ()  <425>;
    (__tmp.939 var=52) bool__ge___sint___sint (ix.73 __ct_1044381696.74)  <1257>;
    (__trgt.952 var=302) const ()  <1310>;
    () void_br_bool_t13s_s2 (__tmp.939 __trgt.952)  <1311>;
    (__either.953 var=300) undefined ()  <1312>;
    if {
        {
            () if_expr (__either.953)  <107>;
        } #5
        {
        } #16 off=7
        {
            #94 off=1
            (__ct_1.432 var=210) const ()  <597>;
            (f64_to_i32_r_minMag.433 var=207) const ()  <598>;
            (__link.434 var=208) w32_jal_t21s_s2 (f64_to_i32_r_minMag.433)  <599>;
            call {
                (a_low.435 var=204 stl=X off=11) assign (x_low.29)  <600>;
                (a_high.436 var=205 stl=X off=12) assign (x_high.33)  <601>;
                (__tmp.437 var=206 stl=X off=13) assign (__ct_1.432)  <602>;
                (__link.438 var=208 stl=X off=1) assign (__link.434)  <603>;
                (__tmp.439 var=53 stl=X off=10) Ff64_to_i32_r_minMag (__link.438 a_low.435 a_high.436 __tmp.437)  <604>;
                (__tmp.440 var=53) deassign (__tmp.439)  <605>;
            } #95 off=2
            #91 off=3
            (__tmp.99 var=56) bool__eq___sint___sint (__tmp.440 __ct_0.97)  <111>;
            (__trgt.950 var=301) const ()  <1306>;
            () void_br_bool_t13s_s2 (__tmp.99 __trgt.950)  <1307>;
            (__either.951 var=300) undefined ()  <1308>;
            if {
                {
                    () if_expr (__either.951)  <131>;
                    () chess_rear_then ()  <1309>;
                } #9
                {
                    (__R_SP.125 var=12 __sp.126 var=18) wr_res_reg (__tmp.124 __sp.50)  <138>;
                    () void___rts_jr_w32 (__la.20)  <139>;
                    (__rt_low.128 var=22 stl=X off=10) assign (__ct_0.97)  <141>;
                    () out (__rt_low.128)  <142>;
                    (__rt_high.130 var=23 stl=X off=11) assign (__ct_1072693248.349)  <144>;
                    () out (__rt_high.130)  <145>;
                    () sink (__sp.126)  <155>;
                } #13 off=5 nxt=-2
                {
                } #14 off=4
                {
                } #15
            } #8
            #276 off=6
            (__trgt.954 var=303) const ()  <1313>;
            () void_j_t21s_s2 (__trgt.954)  <1314>;
        } #6
        {
        } #17
    } #4
    #117 off=8
    (f64_mul.448 var=219) const ()  <616>;
    (__link.449 var=220) w32_jal_t21s_s2 (f64_mul.448)  <617>;
    call {
        (a_low.450 var=215 stl=X off=12) assign (x_low.29)  <618>;
        (a_high.451 var=216 stl=X off=13) assign (x_high.33)  <619>;
        (b_low.452 var=217 stl=X off=14) assign (x_low.29)  <620>;
        (b_high.453 var=218 stl=X off=15) assign (x_high.33)  <621>;
        (__link.454 var=220 stl=X off=1) assign (__link.449)  <622>;
        (__tmp.455 var=222 stl=X off=10 __tmp.456 var=223 stl=X off=11) Ff64_mul (__link.454 a_low.450 a_high.451 b_low.452 b_high.453)  <623>;
        (__tmp.458 var=222) deassign (__tmp.455)  <625>;
        (__tmp.460 var=223) deassign (__tmp.456)  <627>;
    } #118 off=9
    #123 off=10
    (__link.470 var=220) w32_jal_t21s_s2 (f64_mul.448)  <640>;
    (__ct_3196598484.915 var=278) const ()  <1157>;
    (__ct_3181968105.916 var=279) const ()  <1159>;
    call {
        (a_low.471 var=215 stl=X off=12) assign (__tmp.458)  <641>;
        (a_high.472 var=216 stl=X off=13) assign (__tmp.460)  <642>;
        (b_low.473 var=217 stl=X off=14) assign (__ct_3196598484.915)  <643>;
        (b_high.474 var=218 stl=X off=15) assign (__ct_3181968105.916)  <644>;
        (__link.475 var=220 stl=X off=1) assign (__link.470)  <645>;
        (__tmp.476 var=222 stl=X off=10 __tmp.477 var=223 stl=X off=11) Ff64_mul (__link.475 a_low.471 a_high.472 b_low.473 b_high.474)  <646>;
        (__tmp.479 var=222) deassign (__tmp.476)  <648>;
        (__tmp.481 var=223) deassign (__tmp.477)  <650>;
    } #124 off=11
    #129 off=12
    (f64_add.490 var=233) const ()  <662>;
    (__link.491 var=234) w32_jal_t21s_s2 (f64_add.490)  <663>;
    (__ct_3182735812.917 var=280) const ()  <1161>;
    (__ct_1042411166.918 var=281) const ()  <1163>;
    call {
        (a_low.492 var=229 stl=X off=12) assign (__ct_3182735812.917)  <664>;
        (a_high.493 var=230 stl=X off=13) assign (__ct_1042411166.918)  <665>;
        (b_low.494 var=231 stl=X off=14) assign (__tmp.479)  <666>;
        (b_high.495 var=232 stl=X off=15) assign (__tmp.481)  <667>;
        (__link.496 var=234 stl=X off=1) assign (__link.491)  <668>;
        (__tmp.497 var=236 stl=X off=10 __tmp.498 var=237 stl=X off=11) Ff64_add (__link.496 a_low.492 a_high.493 b_low.494 b_high.495)  <669>;
        (__tmp.500 var=236) deassign (__tmp.497)  <671>;
        (__tmp.502 var=237) deassign (__tmp.498)  <673>;
    } #130 off=13
    #135 off=14
    (__link.512 var=220) w32_jal_t21s_s2 (f64_mul.448)  <686>;
    call {
        (a_low.513 var=215 stl=X off=12) assign (__tmp.458)  <687>;
        (a_high.514 var=216 stl=X off=13) assign (__tmp.460)  <688>;
        (b_low.515 var=217 stl=X off=14) assign (__tmp.500)  <689>;
        (b_high.516 var=218 stl=X off=15) assign (__tmp.502)  <690>;
        (__link.517 var=220 stl=X off=1) assign (__link.512)  <691>;
        (__tmp.518 var=222 stl=X off=10 __tmp.519 var=223 stl=X off=11) Ff64_mul (__link.517 a_low.513 a_high.514 b_low.515 b_high.516)  <692>;
        (__tmp.521 var=222) deassign (__tmp.518)  <694>;
        (__tmp.523 var=223) deassign (__tmp.519)  <696>;
    } #136 off=15
    #141 off=16
    (__link.533 var=234) w32_jal_t21s_s2 (f64_add.490)  <709>;
    (__ct_2157728429.919 var=282) const ()  <1165>;
    (__ct_3197271631.920 var=283) const ()  <1167>;
    call {
        (a_low.534 var=229 stl=X off=12) assign (__ct_2157728429.919)  <710>;
        (a_high.535 var=230 stl=X off=13) assign (__ct_3197271631.920)  <711>;
        (b_low.536 var=231 stl=X off=14) assign (__tmp.521)  <712>;
        (b_high.537 var=232 stl=X off=15) assign (__tmp.523)  <713>;
        (__link.538 var=234 stl=X off=1) assign (__link.533)  <714>;
        (__tmp.539 var=236 stl=X off=10 __tmp.540 var=237 stl=X off=11) Ff64_add (__link.538 a_low.534 a_high.535 b_low.536 b_high.537)  <715>;
        (__tmp.542 var=236) deassign (__tmp.539)  <717>;
        (__tmp.544 var=237) deassign (__tmp.540)  <719>;
    } #142 off=17
    #147 off=18
    (__link.554 var=220) w32_jal_t21s_s2 (f64_mul.448)  <732>;
    call {
        (a_low.555 var=215 stl=X off=12) assign (__tmp.458)  <733>;
        (a_high.556 var=216 stl=X off=13) assign (__tmp.460)  <734>;
        (b_low.557 var=217 stl=X off=14) assign (__tmp.542)  <735>;
        (b_high.558 var=218 stl=X off=15) assign (__tmp.544)  <736>;
        (__link.559 var=220 stl=X off=1) assign (__link.554)  <737>;
        (__tmp.560 var=222 stl=X off=10 __tmp.561 var=223 stl=X off=11) Ff64_mul (__link.559 a_low.555 a_high.556 b_low.557 b_high.558)  <738>;
        (__tmp.563 var=222) deassign (__tmp.560)  <740>;
        (__tmp.565 var=223) deassign (__tmp.561)  <742>;
    } #148 off=19
    #153 off=20
    (__link.575 var=234) w32_jal_t21s_s2 (f64_add.490)  <755>;
    (__ct_432739728.921 var=284) const ()  <1169>;
    (__ct_1056571808.922 var=285) const ()  <1171>;
    call {
        (a_low.576 var=229 stl=X off=12) assign (__ct_432739728.921)  <756>;
        (a_high.577 var=230 stl=X off=13) assign (__ct_1056571808.922)  <757>;
        (b_low.578 var=231 stl=X off=14) assign (__tmp.563)  <758>;
        (b_high.579 var=232 stl=X off=15) assign (__tmp.565)  <759>;
        (__link.580 var=234 stl=X off=1) assign (__link.575)  <760>;
        (__tmp.581 var=236 stl=X off=10 __tmp.582 var=237 stl=X off=11) Ff64_add (__link.580 a_low.576 a_high.577 b_low.578 b_high.579)  <761>;
        (__tmp.584 var=236) deassign (__tmp.581)  <763>;
        (__tmp.586 var=237) deassign (__tmp.582)  <765>;
    } #154 off=21
    #159 off=22
    (__link.596 var=220) w32_jal_t21s_s2 (f64_mul.448)  <778>;
    call {
        (a_low.597 var=215 stl=X off=12) assign (__tmp.458)  <779>;
        (a_high.598 var=216 stl=X off=13) assign (__tmp.460)  <780>;
        (b_low.599 var=217 stl=X off=14) assign (__tmp.584)  <781>;
        (b_high.600 var=218 stl=X off=15) assign (__tmp.586)  <782>;
        (__link.601 var=220 stl=X off=1) assign (__link.596)  <783>;
        (__tmp.602 var=222 stl=X off=10 __tmp.603 var=223 stl=X off=11) Ff64_mul (__link.601 a_low.597 a_high.598 b_low.599 b_high.600)  <784>;
        (__tmp.605 var=222) deassign (__tmp.602)  <786>;
        (__tmp.607 var=223) deassign (__tmp.603)  <788>;
    } #160 off=23
    #165 off=24
    (__link.617 var=234) w32_jal_t21s_s2 (f64_add.490)  <801>;
    (__ct_381768055.923 var=286) const ()  <1173>;
    (__ct_3210133868.924 var=287) const ()  <1175>;
    call {
        (a_low.618 var=229 stl=X off=12) assign (__ct_381768055.923)  <802>;
        (a_high.619 var=230 stl=X off=13) assign (__ct_3210133868.924)  <803>;
        (b_low.620 var=231 stl=X off=14) assign (__tmp.605)  <804>;
        (b_high.621 var=232 stl=X off=15) assign (__tmp.607)  <805>;
        (__link.622 var=234 stl=X off=1) assign (__link.617)  <806>;
        (__tmp.623 var=236 stl=X off=10 __tmp.624 var=237 stl=X off=11) Ff64_add (__link.622 a_low.618 a_high.619 b_low.620 b_high.621)  <807>;
        (__tmp.626 var=236) deassign (__tmp.623)  <809>;
        (__tmp.628 var=237) deassign (__tmp.624)  <811>;
    } #166 off=25
    #171 off=26
    (__link.638 var=220) w32_jal_t21s_s2 (f64_mul.448)  <824>;
    call {
        (a_low.639 var=215 stl=X off=12) assign (__tmp.458)  <825>;
        (a_high.640 var=216 stl=X off=13) assign (__tmp.460)  <826>;
        (b_low.641 var=217 stl=X off=14) assign (__tmp.626)  <827>;
        (b_high.642 var=218 stl=X off=15) assign (__tmp.628)  <828>;
        (__link.643 var=220 stl=X off=1) assign (__link.638)  <829>;
        (__tmp.644 var=222 stl=X off=10 __tmp.645 var=223 stl=X off=11) Ff64_mul (__link.643 a_low.639 a_high.640 b_low.641 b_high.642)  <830>;
        (__tmp.647 var=222) deassign (__tmp.644)  <832>;
        (__tmp.649 var=223) deassign (__tmp.645)  <834>;
    } #172 off=27
    #177 off=28
    (__link.659 var=234) w32_jal_t21s_s2 (f64_add.490)  <847>;
    (__ct_1431655756.925 var=288) const ()  <1177>;
    (__ct_1067799893.926 var=289) const ()  <1179>;
    call {
        (a_low.660 var=229 stl=X off=12) assign (__ct_1431655756.925)  <848>;
        (a_high.661 var=230 stl=X off=13) assign (__ct_1067799893.926)  <849>;
        (b_low.662 var=231 stl=X off=14) assign (__tmp.647)  <850>;
        (b_high.663 var=232 stl=X off=15) assign (__tmp.649)  <851>;
        (__link.664 var=234 stl=X off=1) assign (__link.659)  <852>;
        (__tmp.665 var=236 stl=X off=10 __tmp.666 var=237 stl=X off=11) Ff64_add (__link.664 a_low.660 a_high.661 b_low.662 b_high.663)  <853>;
        (__tmp.668 var=236) deassign (__tmp.665)  <855>;
        (__tmp.670 var=237) deassign (__tmp.666)  <857>;
    } #178 off=29
    #183 off=30
    (__link.680 var=220) w32_jal_t21s_s2 (f64_mul.448)  <870>;
    call {
        (a_low.681 var=215 stl=X off=12) assign (__tmp.458)  <871>;
        (a_high.682 var=216 stl=X off=13) assign (__tmp.460)  <872>;
        (b_low.683 var=217 stl=X off=14) assign (__tmp.668)  <873>;
        (b_high.684 var=218 stl=X off=15) assign (__tmp.670)  <874>;
        (__link.685 var=220 stl=X off=1) assign (__link.680)  <875>;
        (__tmp.686 var=222 stl=X off=10 __tmp.687 var=223 stl=X off=11) Ff64_mul (__link.685 a_low.681 a_high.682 b_low.683 b_high.684)  <876>;
        (__tmp.689 var=222) deassign (__tmp.686)  <878>;
        (__tmp.691 var=223) deassign (__tmp.687)  <880>;
    } #184 off=31
    #189 off=32
    (__link.701 var=220) w32_jal_t21s_s2 (f64_mul.448)  <893>;
    (__ct_1071644672.927 var=290) const ()  <1181>;
    call {
        (a_low.702 var=215 stl=X off=12) assign (__ct_0.97)  <894>;
        (a_high.703 var=216 stl=X off=13) assign (__ct_1071644672.927)  <895>;
        (b_low.704 var=217 stl=X off=14) assign (__tmp.458)  <896>;
        (b_high.705 var=218 stl=X off=15) assign (__tmp.460)  <897>;
        (__link.706 var=220 stl=X off=1) assign (__link.701)  <898>;
        (__tmp.707 var=222 stl=X off=10 __tmp.708 var=223 stl=X off=11) Ff64_mul (__link.706 a_low.702 a_high.703 b_low.704 b_high.705)  <899>;
        (__tmp.710 var=222) deassign (__tmp.707)  <901>;
        (__tmp.712 var=223) deassign (__tmp.708)  <903>;
    } #190 off=33
    #195 off=34
    (__link.722 var=220) w32_jal_t21s_s2 (f64_mul.448)  <916>;
    call {
        (a_low.723 var=215 stl=X off=12) assign (__tmp.458)  <917>;
        (a_high.724 var=216 stl=X off=13) assign (__tmp.460)  <918>;
        (b_low.725 var=217 stl=X off=14) assign (__tmp.689)  <919>;
        (b_high.726 var=218 stl=X off=15) assign (__tmp.691)  <920>;
        (__link.727 var=220 stl=X off=1) assign (__link.722)  <921>;
        (__tmp.728 var=222 stl=X off=10 __tmp.729 var=223 stl=X off=11) Ff64_mul (__link.727 a_low.723 a_high.724 b_low.725 b_high.726)  <922>;
        (__tmp.731 var=222) deassign (__tmp.728)  <924>;
        (__tmp.733 var=223) deassign (__tmp.729)  <926>;
    } #196 off=35
    #201 off=36
    (__link.743 var=220) w32_jal_t21s_s2 (f64_mul.448)  <939>;
    call {
        (a_low.744 var=215 stl=X off=12) assign (x_low.29)  <940>;
        (a_high.745 var=216 stl=X off=13) assign (x_high.33)  <941>;
        (b_low.746 var=217 stl=X off=14) assign (y_low.38)  <942>;
        (b_high.747 var=218 stl=X off=15) assign (y_high.42)  <943>;
        (__link.748 var=220 stl=X off=1) assign (__link.743)  <944>;
        (__tmp.749 var=222 stl=X off=10 __tmp.750 var=223 stl=X off=11) Ff64_mul (__link.748 a_low.744 a_high.745 b_low.746 b_high.747)  <945>;
        (__tmp.752 var=222) deassign (__tmp.749)  <947>;
        (__tmp.754 var=223) deassign (__tmp.750)  <949>;
    } #202 off=37
    #207 off=38
    (f64_sub.763 var=258) const ()  <961>;
    (__link.764 var=259) w32_jal_t21s_s2 (f64_sub.763)  <962>;
    call {
        (a_low.765 var=254 stl=X off=12) assign (__tmp.731)  <963>;
        (a_high.766 var=255 stl=X off=13) assign (__tmp.733)  <964>;
        (b_low.767 var=256 stl=X off=14) assign (__tmp.752)  <965>;
        (b_high.768 var=257 stl=X off=15) assign (__tmp.754)  <966>;
        (__link.769 var=259 stl=X off=1) assign (__link.764)  <967>;
        (__tmp.770 var=261 stl=X off=10 __tmp.771 var=262 stl=X off=11) Ff64_sub (__link.769 a_low.765 a_high.766 b_low.767 b_high.768)  <968>;
        (__tmp.773 var=261) deassign (__tmp.770)  <970>;
        (__tmp.775 var=262) deassign (__tmp.771)  <972>;
    } #208 off=39
    #114 off=40
    (__ct_1070805811.216 var=86) const ()  <237>;
    (__tmp.218 var=88) bool__lt___sint___sint (ix.73 __ct_1070805811.216)  <239>;
    (__trgt.958 var=306) const ()  <1320>;
    () void_br_bool_t13s_s2 (__tmp.218 __trgt.958)  <1321>;
    (__either.959 var=300) undefined ()  <1322>;
    if {
        {
            () if_expr (__either.959)  <259>;
        } #20
        {
            #217 off=53
            (__link.785 var=259) w32_jal_t21s_s2 (f64_sub.763)  <985>;
            call {
                (a_low.786 var=254 stl=X off=12) assign (__tmp.710)  <986>;
                (a_high.787 var=255 stl=X off=13) assign (__tmp.712)  <987>;
                (b_low.788 var=256 stl=X off=14) assign (__tmp.773)  <988>;
                (b_high.789 var=257 stl=X off=15) assign (__tmp.775)  <989>;
                (__link.790 var=259 stl=X off=1) assign (__link.785)  <990>;
                (__tmp.791 var=261 stl=X off=10 __tmp.792 var=262 stl=X off=11) Ff64_sub (__link.790 a_low.786 a_high.787 b_low.788 b_high.789)  <991>;
                (__tmp.794 var=261) deassign (__tmp.791)  <993>;
                (__tmp.796 var=262) deassign (__tmp.792)  <995>;
            } #218 off=54
            #269 off=55
            (__R_SP.942 var=12 __sp.943 var=18) wr_res_reg (__tmp.124 __sp.50)  <1290>;
            () void_j_t21s_s2 (f64_sub.763)  <1297>;
            call {
                (a_low.807 var=254 stl=X off=12) assign (__ct_0.97)  <1009>;
                (a_high.808 var=255 stl=X off=13) assign (__ct_1072693248.349)  <1010>;
                (b_low.809 var=256 stl=X off=14) assign (__tmp.794)  <1011>;
                (b_high.810 var=257 stl=X off=15) assign (__tmp.796)  <1012>;
                (__la.811 var=20 stl=X off=1) assign (__la.20)  <1013>;
                (__tmp.812 var=261 stl=X off=10 __tmp.813 var=262 stl=X off=11) Ff64_sub (__la.811 a_low.807 a_high.808 b_low.809 b_high.810)  <1014>;
                (__tmp.815 var=261) deassign (__tmp.812)  <1016>;
                (__tmp.817 var=262) deassign (__tmp.813)  <1018>;
            } #224 off=56
            #270 off=57 nxt=-2
            (__rt_low.944 var=22 stl=X off=10) assign (__tmp.815)  <1292>;
            () out (__rt_low.944)  <1293>;
            (__rt_high.945 var=23 stl=X off=11) assign (__tmp.817)  <1294>;
            () out (__rt_high.945)  <1295>;
            () sink (__sp.943)  <1296>;
        } #21
        {
            #56 off=41
            (__ct_1072234496.248 var=99) const ()  <270>;
            (__tmp.390 var=101) bool__lt___sint___sint (__ct_1072234496.248 ix.73)  <497>;
            (__ct_1070727168.934 var=291) const ()  <1189>;
            (__trgt.955 var=304) const ()  <1315>;
            () void_br_bool_t13s_s2 (__tmp.390 __trgt.955)  <1316>;
            (__either.956 var=300) undefined ()  <1317>;
            if {
                {
                    () if_expr (__either.956)  <292>;
                } #25
                {
                } #26 off=43
                {
                    (__tmp.276 var=106) __sint__pl___sint___sint (ix.73 __ct_m2097152.356)  <299>;
                    (__ct_m2097152.356 var=139) const ()  <433>;
                    (__trgt.957 var=305) const ()  <1318>;
                    () void_j_t21s_s2 (__trgt.957)  <1319>;
                } #233 off=42
                {
                    (b_high.933 var=257) merge (__ct_1070727168.934 __tmp.276)  <1188>;
                } #28
            } #24
            #245 off=44
            (__link.836 var=259) w32_jal_t21s_s2 (f64_sub.763)  <1044>;
            call {
                (a_low.837 var=254 stl=X off=12) assign (__tmp.710)  <1045>;
                (a_high.838 var=255 stl=X off=13) assign (__tmp.712)  <1046>;
                (b_low.839 var=256 stl=X off=14) assign (__ct_0.97)  <1047>;
                (b_high.840 var=257 stl=X off=15) assign (b_high.933)  <1048>;
                (__link.841 var=259 stl=X off=1) assign (__link.836)  <1049>;
                (__tmp.842 var=261 stl=X off=10 __tmp.843 var=262 stl=X off=11) Ff64_sub (__link.841 a_low.837 a_high.838 b_low.839 b_high.840)  <1050>;
                (__tmp.845 var=261) deassign (__tmp.842)  <1052>;
                (__tmp.847 var=262) deassign (__tmp.843)  <1054>;
            } #246 off=45
            #251 off=46
            (__link.857 var=259) w32_jal_t21s_s2 (f64_sub.763)  <1067>;
            call {
                (a_low.858 var=254 stl=X off=12) assign (__ct_0.97)  <1068>;
                (a_high.859 var=255 stl=X off=13) assign (__ct_1072693248.349)  <1069>;
                (b_low.860 var=256 stl=X off=14) assign (__ct_0.97)  <1070>;
                (b_high.861 var=257 stl=X off=15) assign (b_high.933)  <1071>;
                (__link.862 var=259 stl=X off=1) assign (__link.857)  <1072>;
                (__tmp.863 var=261 stl=X off=10 __tmp.864 var=262 stl=X off=11) Ff64_sub (__link.862 a_low.858 a_high.859 b_low.860 b_high.861)  <1073>;
                (__tmp.866 var=261) deassign (__tmp.863)  <1075>;
                (__tmp.868 var=262) deassign (__tmp.864)  <1077>;
            } #252 off=47
            #257 off=48
            (__link.878 var=259) w32_jal_t21s_s2 (f64_sub.763)  <1090>;
            call {
                (a_low.879 var=254 stl=X off=12) assign (__tmp.845)  <1091>;
                (a_high.880 var=255 stl=X off=13) assign (__tmp.847)  <1092>;
                (b_low.881 var=256 stl=X off=14) assign (__tmp.773)  <1093>;
                (b_high.882 var=257 stl=X off=15) assign (__tmp.775)  <1094>;
                (__link.883 var=259 stl=X off=1) assign (__link.878)  <1095>;
                (__tmp.884 var=261 stl=X off=10 __tmp.885 var=262 stl=X off=11) Ff64_sub (__link.883 a_low.879 a_high.880 b_low.881 b_high.882)  <1096>;
                (__tmp.887 var=261) deassign (__tmp.884)  <1098>;
                (__tmp.889 var=262) deassign (__tmp.885)  <1100>;
            } #258 off=49
            #273 off=50
            (__R_SP.946 var=12 __sp.947 var=18) wr_res_reg (__tmp.124 __sp.50)  <1298>;
            () void_j_t21s_s2 (f64_sub.763)  <1305>;
            call {
                (a_low.900 var=254 stl=X off=12) assign (__tmp.866)  <1114>;
                (a_high.901 var=255 stl=X off=13) assign (__tmp.868)  <1115>;
                (b_low.902 var=256 stl=X off=14) assign (__tmp.887)  <1116>;
                (b_high.903 var=257 stl=X off=15) assign (__tmp.889)  <1117>;
                (__la.904 var=20 stl=X off=1) assign (__la.20)  <1118>;
                (__tmp.905 var=261 stl=X off=10 __tmp.906 var=262 stl=X off=11) Ff64_sub (__la.904 a_low.900 a_high.901 b_low.902 b_high.903)  <1119>;
                (__tmp.908 var=261) deassign (__tmp.905)  <1121>;
                (__tmp.910 var=262) deassign (__tmp.906)  <1123>;
            } #264 off=51
            #274 off=52 nxt=-2
            (__rt_low.948 var=22 stl=X off=10) assign (__tmp.908)  <1300>;
            () out (__rt_low.948)  <1301>;
            (__rt_high.949 var=23 stl=X off=11) assign (__tmp.910)  <1302>;
            () out (__rt_high.949)  <1303>;
            () sink (__sp.947)  <1304>;
        } #22
        {
        } #30
    } #19
} #0
0 : 'src/math.c';
----------
0 : (0,675:0,0);
4 : (0,690:4,6);
6 : (0,690:22,7);
8 : (0,691:8,7);
13 : (0,691:24,8);
14 : (0,691:8,11);
16 : (0,690:4,16);
19 : (0,695:4,21);
21 : (0,705:8,22);
22 : (0,696:8,25);
24 : (0,698:8,25);
26 : (0,698:28,26);
56 : (0,698:14,25);
86 : (0,690:9,6);
91 : (0,691:19,7);
94 : (0,691:12,7);
95 : (0,691:12,7);
114 : (0,695:10,21);
117 : (0,693:10,19);
118 : (0,693:10,19);
123 : (0,694:40,20);
124 : (0,694:40,20);
129 : (0,694:38,20);
130 : (0,694:38,20);
135 : (0,694:34,20);
136 : (0,694:34,20);
141 : (0,694:32,20);
142 : (0,694:32,20);
147 : (0,694:28,20);
148 : (0,694:28,20);
153 : (0,694:26,20);
154 : (0,694:26,20);
159 : (0,694:22,20);
160 : (0,694:22,20);
165 : (0,694:20,20);
166 : (0,694:20,20);
171 : (0,694:16,20);
172 : (0,694:16,20);
177 : (0,694:14,20);
178 : (0,694:14,20);
183 : (0,694:10,20);
184 : (0,694:10,20);
189 : (0,696:25,22);
190 : (0,696:25,22);
195 : (0,696:32,22);
196 : (0,696:32,22);
201 : (0,696:38,22);
202 : (0,696:38,22);
207 : (0,696:35,22);
208 : (0,696:35,22);
217 : (0,696:28,22);
218 : (0,696:28,22);
224 : (0,696:19,22);
233 : (0,700:15,29);
245 : (0,703:18,42);
246 : (0,703:18,42);
251 : (0,704:16,43);
252 : (0,704:16,43);
257 : (0,705:23,44);
258 : (0,705:23,44);
264 : (0,705:17,44);
269 : (0,695:4,49);
270 : (0,695:4,49);
273 : (0,695:4,49);
274 : (0,695:4,49);
----------
56 : (0,675:14,0);
57 : (0,675:14,0);
59 : (0,675:14,0);
60 : (0,675:14,0);
82 : (0,689:10,0);
84 : (0,689:7,5);
85 : (0,690:10,0);
107 : (0,690:4,6);
109 : (0,691:21,0);
111 : (0,691:19,7);
131 : (0,691:8,7);
134 : (0,691:24,0);
135 : (0,691:24,0);
137 : (0,691:24,0);
138 : (0,691:24,8);
139 : (0,691:24,8);
141 : (0,691:31,0);
144 : (0,691:31,0);
237 : (0,695:12,0);
239 : (0,695:10,21);
259 : (0,695:4,21);
270 : (0,698:16,0);
292 : (0,698:8,25);
299 : (0,701:29,31);
425 : (0,691:31,0);
433 : (0,701:29,0);
497 : (0,698:14,25);
597 : (0,691:12,0);
598 : (0,691:12,0);
599 : (0,691:12,7);
600 : (0,691:12,7);
601 : (0,691:12,7);
602 : (0,691:12,7);
603 : (0,691:12,7);
604 : (0,691:12,7);
605 : (0,691:12,7);
616 : (0,693:10,0);
617 : (0,693:10,19);
618 : (0,693:10,19);
619 : (0,693:10,19);
620 : (0,693:10,19);
621 : (0,693:10,19);
622 : (0,693:10,19);
623 : (0,693:10,19);
625 : (0,693:10,19);
627 : (0,693:10,19);
640 : (0,694:40,20);
641 : (0,694:40,20);
642 : (0,694:40,20);
643 : (0,694:40,20);
644 : (0,694:40,20);
645 : (0,694:40,20);
646 : (0,694:40,20);
648 : (0,694:40,20);
650 : (0,694:40,20);
662 : (0,694:38,0);
663 : (0,694:38,20);
664 : (0,694:38,20);
665 : (0,694:38,20);
666 : (0,694:38,20);
667 : (0,694:38,20);
668 : (0,694:38,20);
669 : (0,694:38,20);
671 : (0,694:38,20);
673 : (0,694:38,20);
686 : (0,694:34,20);
687 : (0,694:34,20);
688 : (0,694:34,20);
689 : (0,694:34,20);
690 : (0,694:34,20);
691 : (0,694:34,20);
692 : (0,694:34,20);
694 : (0,694:34,20);
696 : (0,694:34,20);
709 : (0,694:32,20);
710 : (0,694:32,20);
711 : (0,694:32,20);
712 : (0,694:32,20);
713 : (0,694:32,20);
714 : (0,694:32,20);
715 : (0,694:32,20);
717 : (0,694:32,20);
719 : (0,694:32,20);
732 : (0,694:28,20);
733 : (0,694:28,20);
734 : (0,694:28,20);
735 : (0,694:28,20);
736 : (0,694:28,20);
737 : (0,694:28,20);
738 : (0,694:28,20);
740 : (0,694:28,20);
742 : (0,694:28,20);
755 : (0,694:26,20);
756 : (0,694:26,20);
757 : (0,694:26,20);
758 : (0,694:26,20);
759 : (0,694:26,20);
760 : (0,694:26,20);
761 : (0,694:26,20);
763 : (0,694:26,20);
765 : (0,694:26,20);
778 : (0,694:22,20);
779 : (0,694:22,20);
780 : (0,694:22,20);
781 : (0,694:22,20);
782 : (0,694:22,20);
783 : (0,694:22,20);
784 : (0,694:22,20);
786 : (0,694:22,20);
788 : (0,694:22,20);
801 : (0,694:20,20);
802 : (0,694:20,20);
803 : (0,694:20,20);
804 : (0,694:20,20);
805 : (0,694:20,20);
806 : (0,694:20,20);
807 : (0,694:20,20);
809 : (0,694:20,20);
811 : (0,694:20,20);
824 : (0,694:16,20);
825 : (0,694:16,20);
826 : (0,694:16,20);
827 : (0,694:16,20);
828 : (0,694:16,20);
829 : (0,694:16,20);
830 : (0,694:16,20);
832 : (0,694:16,20);
834 : (0,694:16,20);
847 : (0,694:14,20);
848 : (0,694:14,20);
849 : (0,694:14,20);
850 : (0,694:14,20);
851 : (0,694:14,20);
852 : (0,694:14,20);
853 : (0,694:14,20);
855 : (0,694:14,20);
857 : (0,694:14,20);
870 : (0,694:10,20);
871 : (0,694:10,20);
872 : (0,694:10,20);
873 : (0,694:10,20);
874 : (0,694:10,20);
875 : (0,694:10,20);
876 : (0,694:10,20);
878 : (0,694:10,20);
880 : (0,694:10,20);
893 : (0,696:25,22);
894 : (0,696:25,22);
895 : (0,696:25,22);
896 : (0,696:25,22);
897 : (0,696:25,22);
898 : (0,696:25,22);
899 : (0,696:25,22);
901 : (0,696:25,22);
903 : (0,696:25,22);
916 : (0,696:32,22);
917 : (0,696:32,22);
918 : (0,696:32,22);
919 : (0,696:32,22);
920 : (0,696:32,22);
921 : (0,696:32,22);
922 : (0,696:32,22);
924 : (0,696:32,22);
926 : (0,696:32,22);
939 : (0,696:38,22);
940 : (0,696:38,22);
941 : (0,696:38,22);
942 : (0,696:38,22);
943 : (0,696:38,22);
944 : (0,696:38,22);
945 : (0,696:38,22);
947 : (0,696:38,22);
949 : (0,696:38,22);
961 : (0,696:35,0);
962 : (0,696:35,22);
963 : (0,696:35,22);
964 : (0,696:35,22);
965 : (0,696:35,22);
966 : (0,696:35,22);
967 : (0,696:35,22);
968 : (0,696:35,22);
970 : (0,696:35,22);
972 : (0,696:35,22);
985 : (0,696:28,22);
986 : (0,696:28,22);
987 : (0,696:28,22);
988 : (0,696:28,22);
989 : (0,696:28,22);
990 : (0,696:28,22);
991 : (0,696:28,22);
993 : (0,696:28,22);
995 : (0,696:28,22);
1009 : (0,696:19,22);
1010 : (0,696:19,22);
1011 : (0,696:19,22);
1012 : (0,696:19,22);
1013 : (0,696:19,22);
1014 : (0,696:19,22);
1016 : (0,696:19,22);
1018 : (0,696:19,22);
1044 : (0,703:18,42);
1045 : (0,703:18,42);
1046 : (0,703:18,42);
1047 : (0,703:18,42);
1048 : (0,703:18,42);
1049 : (0,703:18,42);
1050 : (0,703:18,42);
1052 : (0,703:18,42);
1054 : (0,703:18,42);
1067 : (0,704:16,43);
1068 : (0,704:16,43);
1069 : (0,704:16,43);
1070 : (0,704:16,43);
1071 : (0,704:16,43);
1072 : (0,704:16,43);
1073 : (0,704:16,43);
1075 : (0,704:16,43);
1077 : (0,704:16,43);
1090 : (0,705:23,44);
1091 : (0,705:23,44);
1092 : (0,705:23,44);
1093 : (0,705:23,44);
1094 : (0,705:23,44);
1095 : (0,705:23,44);
1096 : (0,705:23,44);
1098 : (0,705:23,44);
1100 : (0,705:23,44);
1114 : (0,705:17,44);
1115 : (0,705:17,44);
1116 : (0,705:17,44);
1117 : (0,705:17,44);
1118 : (0,705:17,44);
1119 : (0,705:17,44);
1121 : (0,705:17,44);
1123 : (0,705:17,44);
1157 : (0,694:41,0);
1159 : (0,694:41,0);
1161 : (0,694:36,0);
1163 : (0,694:36,0);
1165 : (0,694:30,0);
1167 : (0,694:30,0);
1169 : (0,694:24,0);
1171 : (0,694:24,0);
1173 : (0,694:18,0);
1175 : (0,694:18,0);
1177 : (0,694:12,0);
1179 : (0,694:12,0);
1181 : (0,696:22,0);
1189 : (0,699:17,0);
1257 : (0,690:9,6);
1290 : (0,695:4,49);
1292 : (0,695:4,0);
1294 : (0,695:4,0);
1297 : (0,696:19,22);
1298 : (0,695:4,49);
1300 : (0,695:4,0);
1302 : (0,695:4,0);
1305 : (0,705:17,44);
1307 : (0,691:8,7);
1311 : (0,690:4,6);
1316 : (0,698:8,25);
1321 : (0,695:4,21);

