
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 15:22:28 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  char *strstr(const char *, const char *)
Fstrstr : user_defined, called {
    fnm : "strstr" 'char *strstr(const char *, const char *)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
}
****
***/

[
    0 : strstr typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__P__cchar__
   22 : s1 typ=w32 bnd=p tref=__P__cchar__
   23 : s2 typ=w32 bnd=p tref=__P__cchar__
   24 : __ct_0S0 typ=w32 val=0S0 bnd=m
   26 : __tmp typ=w32 bnd=m
   27 : r1 typ=w32 bnd=m lscp=7 tref=__P__cchar__
   28 : r2 typ=w32 bnd=m lscp=7 tref=__P__cchar__
   29 : c1 typ=w08 bnd=m lscp=14 tref=__cchar__
   31 : c2 typ=w08 bnd=m lscp=14 tref=__cchar__
   36 : __ct_1 typ=w32 val=1f bnd=m
   45 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   47 : __tmp typ=bool bnd=m
   48 : __ct_0s0 typ=w32 val=0s0 bnd=m
   50 : __tmp typ=w32 bnd=m
   53 : __tmp typ=bool bnd=m
   59 : __fch___extDMb typ=w08 bnd=m
   63 : __tmp typ=bool bnd=m
   78 : __shv_r1 typ=w32 bnd=m
   79 : __shv_r2 typ=w32 bnd=m
   80 : __shv_s1 typ=w32 bnd=m
   89 : __either typ=bool bnd=m
   90 : __trgt typ=t13s_s2 val=0j bnd=m
   91 : __trgt typ=t13s_s2 val=0j bnd=m
   92 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fstrstr {
    #47 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (s1.23 var=22 stl=X off=11) inp ()  <34>;
    (s1.24 var=22) deassign (s1.23)  <35>;
    (s2.26 var=23 stl=X off=12) inp ()  <37>;
    (s2.27 var=23) deassign (s2.26)  <38>;
    (__rd___sp.29 var=19) rd_res_reg (__R_SP.11 __sp.17)  <40>;
    (__ct_0S0.30 var=24) const ()  <41>;
    (__tmp.32 var=26) __Pvoid__pl___Pvoid___sint (__rd___sp.29 __ct_0S0.30)  <43>;
    (__R_SP.33 var=12 __sp.34 var=18) wr_res_reg (__tmp.32 __sp.17)  <44>;
    (__ct_1.98 var=36) const ()  <111>;
    (__ct_0.108 var=45) const ()  <121>;
    (__rd___sp.128 var=19) rd_res_reg (__R_SP.11 __sp.34)  <142>;
    (__ct_0s0.129 var=48) const ()  <143>;
    (__tmp.131 var=50) __Pvoid__pl___Pvoid___sint (__rd___sp.128 __ct_0s0.129)  <145>;
    (__trgt.381 var=90) const ()  <435>;
    (__trgt.383 var=91) const ()  <440>;
    (__trgt.385 var=92) const ()  <443>;
    do {
        {
            (s1.50 var=22) entry (s1.317 s1.24)  <61>;
        } #6
        {
            do {
                {
                    (r1.87 var=27) entry (r1.239 s1.50)  <100>;
                    (r2.89 var=28) entry (r2.243 s2.27)  <102>;
                } #13
                {
                    #15 off=2
                    (c1.101 var=29) load (__M_DMb.2 r1.87 __extDMb.16)  <114>;
                    (c2.106 var=31) load (__M_DMb.2 r2.89 __extDMb.16)  <119>;
                    (__tmp.110 var=47) bool__eq___sint___sint (c2.106 __ct_0.108)  <123>;
                    (__shv_r1.372 var=78) __Pvoid__pl___Pvoid___sint (r1.87 __ct_1.98)  <406>;
                    (__shv_r2.373 var=79) __Pvoid__pl___Pvoid___sint (r2.89 __ct_1.98)  <407>;
                    () void_br_bool_t13s_s2 (__tmp.110 __trgt.381)  <436>;
                    (__either.382 var=89) undefined ()  <437>;
                    if {
                        {
                            () if_expr (__either.382)  <141>;
                            () chess_frequent_else ()  <438>;
                            () chess_rear_then ()  <439>;
                        } #17
                        {
                            (__R_SP.132 var=12 __sp.133 var=18) wr_res_reg (__tmp.131 __sp.34)  <146>;
                            () void___rts_jr_w32 (__la.20)  <147>;
                            (__rt.134 var=21 stl=X off=10) assign (s1.50)  <148>;
                            () out (__rt.134)  <149>;
                            () sink (__sp.133)  <155>;
                        } #20 off=4 nxt=-2
                        {
                        } #21 off=3
                        {
                        } #22
                    } #16
                    #23 off=5
                    (__tmp.368 var=53) bool__eq___sint___sint (c1.101 c2.106)  <402>;
                    () void_br_bool_t13s_s2 (__tmp.368 __trgt.383)  <441>;
                    (__either.384 var=89) undefined ()  <442>;
                } #14
                {
                    () while_expr (__either.384)  <270>;
                    (r1.239 var=27 r1.240 var=27) exit (__shv_r1.372)  <278>;
                    (r2.243 var=28 r2.244 var=28) exit (__shv_r2.373)  <280>;
                } #31
            } #12 rng=[1,2147483647]
            #34 off=6
            (__fch___extDMb.296 var=59) load (__M_DMb.2 s1.50 __extDMb.16)  <325>;
            (__tmp.300 var=63) bool__ne___sint___sint (__fch___extDMb.296 __ct_0.108)  <329>;
            (__shv_s1.374 var=80) __Pvoid__pl___Pvoid___sint (s1.50 __ct_1.98)  <408>;
            () void_br_bool_t13s_s2 (__tmp.300 __trgt.385)  <444>;
            (__either.386 var=89) undefined ()  <445>;
        } #7
        {
            () while_expr (__either.386)  <330>;
            (s1.317 var=22 s1.318 var=22) exit (__shv_s1.374)  <339>;
        } #35
    } #5
    #38 off=7 nxt=-2
    (__R_SP.342 var=12 __sp.343 var=18) wr_res_reg (__tmp.131 __sp.34)  <355>;
    () void___rts_jr_w32 (__la.20)  <356>;
    (__rt.344 var=21 stl=X off=10) assign (__ct_0.108)  <357>;
    () out (__rt.344)  <358>;
    () sink (__sp.343)  <364>;
} #0
0 : 'src/string.c';
----------
0 : (0,223:0,0);
5 : (0,237:6,1);
7 : (0,226:7,1);
12 : (0,229:8,4);
14 : (0,229:18,4);
15 : (0,232:19,10);
16 : (0,232:12,10);
20 : (0,233:16,11);
21 : (0,232:12,14);
23 : (0,234:19,17);
34 : (0,237:6,33);
38 : (0,238:4,34);
----------
40 : (0,223:6,0);
41 : (0,223:6,0);
43 : (0,223:6,0);
44 : (0,223:6,0);
61 : (0,237:6,1);
100 : (0,229:8,4);
102 : (0,229:8,4);
111 : (0,230:25,0);
114 : (0,230:22,6);
119 : (0,231:22,9);
121 : (0,232:22,0);
123 : (0,232:19,10);
141 : (0,232:12,10);
142 : (0,233:16,0);
143 : (0,233:16,0);
145 : (0,233:16,0);
146 : (0,233:16,11);
147 : (0,233:16,11);
148 : (0,233:23,0);
270 : (0,229:8,24);
278 : (0,229:8,24);
280 : (0,229:8,24);
325 : (0,237:13,33);
329 : (0,237:6,33);
330 : (0,237:6,33);
339 : (0,237:6,33);
355 : (0,238:4,34);
356 : (0,238:4,34);
357 : (0,238:11,0);
402 : (0,234:19,17);
406 : (0,230:25,0);
407 : (0,231:25,0);
408 : (0,237:16,0);
436 : (0,232:12,10);
441 : (0,229:8,24);
444 : (0,237:6,33);

