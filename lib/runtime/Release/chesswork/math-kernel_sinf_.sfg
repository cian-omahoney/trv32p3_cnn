
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:45:59 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! static float kernel_sinf(float, float, int)
Fkernel_sinf : user_defined, called {
    fnm : "kernel_sinf" 'float kernel_sinf(float, float, int)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
!!  long f32_to_i32_r_minMag(float32_t, bool)
Ff32_to_i32_r_minMag : user_defined, called {
    fnm : "f32_to_i32_r_minMag" 'long f32_to_i32_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_sub(float32_t, float32_t)
Ff32_sub : user_defined, called {
    fnm : "f32_sub" 'float32_t f32_sub(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : kernel_sinf typ=u08 bnd=i stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__ffloat__
   22 : x typ=w32 bnd=p tref=__ffloat__
   23 : y typ=w32 bnd=p tref=__ffloat__
   24 : iy typ=w32 bnd=p tref=__sint__
   25 : __ct_0S0 typ=w32 val=0S0 bnd=m
   27 : __tmp typ=w32 bnd=m
   28 : ix typ=w32 bnd=m tref=int32_t__
   29 : z typ=w32 bnd=m tref=__ffloat__
   30 : v typ=w32 bnd=m tref=__ffloat__
   31 : r typ=w32 bnd=m tref=__ffloat__
   33 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   36 : __ct_838860800 typ=t20s_rp12 val=204800f bnd=m
   38 : __tmp typ=bool bnd=m
   39 : __tmp typ=w32 bnd=m
   40 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   42 : __tmp typ=bool bnd=m
   43 : __ct_0s0 typ=w32 val=0s0 bnd=m
   45 : __tmp typ=w32 bnd=m
   48 : __ct_1007192201 typ=w32 val=1007192201f bnd=m
   50 : __ct_3109031169 typ=w32 val=-1185936127f bnd=m
   52 : __ct_909700891 typ=w32 val=909700891f bnd=m
   54 : __ct_3000446772 typ=w32 val=-1294520524f bnd=m
   56 : __ct_791595475 typ=w32 val=791595475f bnd=m
   58 : __tmp typ=w32 bnd=m
   59 : __tmp typ=w32 bnd=m
   60 : __tmp typ=w32 bnd=m
   61 : __tmp typ=w32 bnd=m
   62 : __tmp typ=w32 bnd=m
   63 : __tmp typ=w32 bnd=m
   64 : __tmp typ=w32 bnd=m
   68 : __tmp typ=bool bnd=m
   69 : __ct_3190467243 typ=w32 val=-1104500053f bnd=m
   71 : __tmp typ=w32 bnd=m
   72 : __tmp typ=w32 bnd=m
   73 : __tmp typ=w32 bnd=m
   75 : __ct_1056964608 typ=t20s_rp12 val=258048f bnd=m
   77 : __tmp typ=w32 bnd=m
   78 : __tmp typ=w32 bnd=m
   79 : __tmp typ=w32 bnd=m
   80 : __tmp typ=w32 bnd=m
   81 : __tmp typ=w32 bnd=m
   84 : __tmp typ=w32 bnd=m
   85 : __tmp typ=w32 bnd=m
   96 : a typ=w32 bnd=m tref=float32_t__
   97 : __tmp typ=w32 bnd=m
   98 : f32_to_i32_r_minMag typ=t21s_s2 val=0r bnd=m
   99 : __link typ=w32 bnd=m
  101 : __ct_1 typ=w32 val=1f bnd=m
  103 : a typ=w32 bnd=m tref=float32_t__
  104 : b typ=w32 bnd=m tref=float32_t__
  105 : f32_mul typ=t21s_s2 val=0r bnd=m
  106 : __link typ=w32 bnd=m
  111 : a typ=w32 bnd=m tref=float32_t__
  112 : b typ=w32 bnd=m tref=float32_t__
  113 : f32_add typ=t21s_s2 val=0r bnd=m
  114 : __link typ=w32 bnd=m
  129 : a typ=w32 bnd=m tref=float32_t__
  130 : b typ=w32 bnd=m tref=float32_t__
  131 : f32_sub typ=t21s_s2 val=0r bnd=m
  132 : __link typ=w32 bnd=m
  148 : __either typ=bool bnd=m
  149 : __trgt typ=t13s_s2 val=0j bnd=m
  150 : __trgt typ=t13s_s2 val=0j bnd=m
  151 : __trgt typ=t21s_s2 val=0j bnd=m
  152 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fkernel_sinf {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x.23 var=22 stl=X off=11) inp ()  <34>;
    (x.24 var=22) deassign (x.23)  <35>;
    (y.26 var=23 stl=X off=12) inp ()  <37>;
    (y.27 var=23) deassign (y.26)  <38>;
    (iy.29 var=24 stl=X off=13) inp ()  <40>;
    (iy.30 var=24) deassign (iy.29)  <41>;
    (__rd___sp.32 var=19) rd_res_reg (__R_SP.11 __sp.17)  <43>;
    (__ct_0S0.33 var=25) const ()  <44>;
    (__tmp.35 var=27) __Pvoid__pl___Pvoid___sint (__rd___sp.32 __ct_0S0.33)  <46>;
    (__R_SP.36 var=12 __sp.37 var=18) wr_res_reg (__tmp.35 __sp.17)  <47>;
    (__ct_2147483647.47 var=33) const ()  <58>;
    (ix.49 var=28) __sint__ad___sint___sint (x.24 __ct_2147483647.47)  <60>;
    (__ct_838860800.50 var=36) const ()  <61>;
    (__ct_0.69 var=40) const ()  <81>;
    (__rd___sp.87 var=19) rd_res_reg (__R_SP.11 __sp.37)  <100>;
    (__ct_0s0.88 var=43) const ()  <101>;
    (__tmp.90 var=45) __Pvoid__pl___Pvoid___sint (__rd___sp.87 __ct_0s0.88)  <103>;
    (__tmp.458 var=38) bool__ge___sint___sint (ix.49 __ct_838860800.50)  <635>;
    (__trgt.469 var=150) const ()  <673>;
    () void_br_bool_t13s_s2 (__tmp.458 __trgt.469)  <674>;
    (__either.470 var=148) undefined ()  <675>;
    if {
        {
            () if_expr (__either.470)  <79>;
        } #5
        {
        } #15 off=7
        {
            #29 off=1
            (__ct_1.225 var=101) const ()  <296>;
            (f32_to_i32_r_minMag.226 var=98) const ()  <297>;
            (__link.227 var=99) w32_jal_t21s_s2 (f32_to_i32_r_minMag.226)  <298>;
            call {
                (a.228 var=96 stl=X off=11) assign (x.24)  <299>;
                (__tmp.229 var=97 stl=X off=12) assign (__ct_1.225)  <300>;
                (__link.230 var=99 stl=X off=1) assign (__link.227)  <301>;
                (__tmp.231 var=39 stl=X off=10) Ff32_to_i32_r_minMag (__link.230 a.228 __tmp.229)  <302>;
                (__tmp.232 var=39) deassign (__tmp.231)  <303>;
            } #30 off=2
            #26 off=3
            (__tmp.71 var=42) bool__eq___sint___sint (__tmp.232 __ct_0.69)  <83>;
            (__trgt.467 var=149) const ()  <669>;
            () void_br_bool_t13s_s2 (__tmp.71 __trgt.467)  <670>;
            (__either.468 var=148) undefined ()  <671>;
            if {
                {
                    () if_expr (__either.468)  <99>;
                    () chess_rear_then ()  <672>;
                } #9
                {
                    (__R_SP.91 var=12 __sp.92 var=18) wr_res_reg (__tmp.90 __sp.37)  <104>;
                    () void___rts_jr_w32 (__la.20)  <105>;
                    (__rt.93 var=21 stl=X off=10) assign (x.24)  <106>;
                    () out (__rt.93)  <107>;
                    () sink (__sp.92)  <113>;
                } #12 off=5 nxt=-2
                {
                } #13 off=4
                {
                } #14
            } #8
            #197 off=6
            (__trgt.471 var=151) const ()  <676>;
            () void_j_t21s_s2 (__trgt.471)  <677>;
        } #6
        {
        } #16
    } #4
    #46 off=8
    (f32_mul.236 var=105) const ()  <310>;
    (__link.237 var=106) w32_jal_t21s_s2 (f32_mul.236)  <311>;
    call {
        (a.238 var=103 stl=X off=11) assign (x.24)  <312>;
        (b.239 var=104 stl=X off=12) assign (x.24)  <313>;
        (__link.240 var=106 stl=X off=1) assign (__link.237)  <314>;
        (z.241 var=29 stl=X off=10) Ff32_mul (__link.240 a.238 b.239)  <315>;
        (z.242 var=29) deassign (z.241)  <316>;
    } #47 off=9
    #52 off=10
    (__link.247 var=106) w32_jal_t21s_s2 (f32_mul.236)  <324>;
    call {
        (a.248 var=103 stl=X off=11) assign (z.242)  <325>;
        (b.249 var=104 stl=X off=12) assign (x.24)  <326>;
        (__link.250 var=106 stl=X off=1) assign (__link.247)  <327>;
        (v.251 var=30 stl=X off=10) Ff32_mul (__link.250 a.248 b.249)  <328>;
        (v.252 var=30) deassign (v.251)  <329>;
    } #53 off=11
    #58 off=12
    (__ct_791595475.149 var=56) const ()  <169>;
    (__link.257 var=106) w32_jal_t21s_s2 (f32_mul.236)  <337>;
    call {
        (a.258 var=103 stl=X off=11) assign (z.242)  <338>;
        (b.259 var=104 stl=X off=12) assign (__ct_791595475.149)  <339>;
        (__link.260 var=106 stl=X off=1) assign (__link.257)  <340>;
        (__tmp.261 var=58 stl=X off=10) Ff32_mul (__link.260 a.258 b.259)  <341>;
        (__tmp.262 var=58) deassign (__tmp.261)  <342>;
    } #59 off=13
    #64 off=14
    (__ct_3000446772.147 var=54) const ()  <167>;
    (f32_add.266 var=113) const ()  <349>;
    (__link.267 var=114) w32_jal_t21s_s2 (f32_add.266)  <350>;
    call {
        (a.268 var=111 stl=X off=11) assign (__ct_3000446772.147)  <351>;
        (b.269 var=112 stl=X off=12) assign (__tmp.262)  <352>;
        (__link.270 var=114 stl=X off=1) assign (__link.267)  <353>;
        (__tmp.271 var=59 stl=X off=10) Ff32_add (__link.270 a.268 b.269)  <354>;
        (__tmp.272 var=59) deassign (__tmp.271)  <355>;
    } #65 off=15
    #70 off=16
    (__link.277 var=106) w32_jal_t21s_s2 (f32_mul.236)  <363>;
    call {
        (a.278 var=103 stl=X off=11) assign (z.242)  <364>;
        (b.279 var=104 stl=X off=12) assign (__tmp.272)  <365>;
        (__link.280 var=106 stl=X off=1) assign (__link.277)  <366>;
        (__tmp.281 var=60 stl=X off=10) Ff32_mul (__link.280 a.278 b.279)  <367>;
        (__tmp.282 var=60) deassign (__tmp.281)  <368>;
    } #71 off=17
    #76 off=18
    (__ct_909700891.145 var=52) const ()  <165>;
    (__link.287 var=114) w32_jal_t21s_s2 (f32_add.266)  <376>;
    call {
        (a.288 var=111 stl=X off=11) assign (__ct_909700891.145)  <377>;
        (b.289 var=112 stl=X off=12) assign (__tmp.282)  <378>;
        (__link.290 var=114 stl=X off=1) assign (__link.287)  <379>;
        (__tmp.291 var=61 stl=X off=10) Ff32_add (__link.290 a.288 b.289)  <380>;
        (__tmp.292 var=61) deassign (__tmp.291)  <381>;
    } #77 off=19
    #82 off=20
    (__link.297 var=106) w32_jal_t21s_s2 (f32_mul.236)  <389>;
    call {
        (a.298 var=103 stl=X off=11) assign (z.242)  <390>;
        (b.299 var=104 stl=X off=12) assign (__tmp.292)  <391>;
        (__link.300 var=106 stl=X off=1) assign (__link.297)  <392>;
        (__tmp.301 var=62 stl=X off=10) Ff32_mul (__link.300 a.298 b.299)  <393>;
        (__tmp.302 var=62) deassign (__tmp.301)  <394>;
    } #83 off=21
    #88 off=22
    (__ct_3109031169.143 var=50) const ()  <163>;
    (__link.307 var=114) w32_jal_t21s_s2 (f32_add.266)  <402>;
    call {
        (a.308 var=111 stl=X off=11) assign (__ct_3109031169.143)  <403>;
        (b.309 var=112 stl=X off=12) assign (__tmp.302)  <404>;
        (__link.310 var=114 stl=X off=1) assign (__link.307)  <405>;
        (__tmp.311 var=63 stl=X off=10) Ff32_add (__link.310 a.308 b.309)  <406>;
        (__tmp.312 var=63) deassign (__tmp.311)  <407>;
    } #89 off=23
    #94 off=24
    (__link.317 var=106) w32_jal_t21s_s2 (f32_mul.236)  <415>;
    call {
        (a.318 var=103 stl=X off=11) assign (z.242)  <416>;
        (b.319 var=104 stl=X off=12) assign (__tmp.312)  <417>;
        (__link.320 var=106 stl=X off=1) assign (__link.317)  <418>;
        (__tmp.321 var=64 stl=X off=10) Ff32_mul (__link.320 a.318 b.319)  <419>;
        (__tmp.322 var=64) deassign (__tmp.321)  <420>;
    } #95 off=25
    #100 off=26
    (__ct_1007192201.141 var=48) const ()  <161>;
    (__link.327 var=114) w32_jal_t21s_s2 (f32_add.266)  <428>;
    call {
        (a.328 var=111 stl=X off=11) assign (__ct_1007192201.141)  <429>;
        (b.329 var=112 stl=X off=12) assign (__tmp.322)  <430>;
        (__link.330 var=114 stl=X off=1) assign (__link.327)  <431>;
        (r.331 var=31 stl=X off=10) Ff32_add (__link.330 a.328 b.329)  <432>;
        (r.332 var=31) deassign (r.331)  <433>;
    } #101 off=27
    #43 off=28
    (__tmp.161 var=68) bool__eq___sint___sint (iy.30 __ct_0.69)  <181>;
    (__ct_3190467243.177 var=69) const ()  <198>;
    (__trgt.472 var=152) const ()  <678>;
    () void_br_bool_t13s_s2 (__tmp.161 __trgt.472)  <679>;
    (__either.473 var=148) undefined ()  <680>;
    if {
        {
            () if_expr (__either.473)  <197>;
        } #19
        {
            #110 off=46
            (__link.337 var=106) w32_jal_t21s_s2 (f32_mul.236)  <441>;
            call {
                (a.338 var=103 stl=X off=11) assign (z.242)  <442>;
                (b.339 var=104 stl=X off=12) assign (r.332)  <443>;
                (__link.340 var=106 stl=X off=1) assign (__link.337)  <444>;
                (__tmp.341 var=71 stl=X off=10) Ff32_mul (__link.340 a.338 b.339)  <445>;
                (__tmp.342 var=71) deassign (__tmp.341)  <446>;
            } #111 off=47
            #116 off=48
            (__link.347 var=114) w32_jal_t21s_s2 (f32_add.266)  <454>;
            call {
                (a.348 var=111 stl=X off=11) assign (__ct_3190467243.177)  <455>;
                (b.349 var=112 stl=X off=12) assign (__tmp.342)  <456>;
                (__link.350 var=114 stl=X off=1) assign (__link.347)  <457>;
                (__tmp.351 var=72 stl=X off=10) Ff32_add (__link.350 a.348 b.349)  <458>;
                (__tmp.352 var=72) deassign (__tmp.351)  <459>;
            } #117 off=49
            #122 off=50
            (__link.357 var=106) w32_jal_t21s_s2 (f32_mul.236)  <467>;
            call {
                (a.358 var=103 stl=X off=11) assign (v.252)  <468>;
                (b.359 var=104 stl=X off=12) assign (__tmp.352)  <469>;
                (__link.360 var=106 stl=X off=1) assign (__link.357)  <470>;
                (__tmp.361 var=73 stl=X off=10) Ff32_mul (__link.360 a.358 b.359)  <471>;
                (__tmp.362 var=73) deassign (__tmp.361)  <472>;
            } #123 off=51
            #190 off=52
            (__R_SP.461 var=12 __sp.462 var=18) wr_res_reg (__tmp.90 __sp.37)  <657>;
            () void_j_t21s_s2 (f32_add.266)  <662>;
            call {
                (a.368 var=111 stl=X off=11) assign (x.24)  <481>;
                (b.369 var=112 stl=X off=12) assign (__tmp.362)  <482>;
                (__la.370 var=20 stl=X off=1) assign (__la.20)  <483>;
                (__rt.371 var=21 stl=X off=10) Ff32_add (__la.370 a.368 b.369)  <484>;
                (__rt.372 var=21) deassign (__rt.371)  <485>;
            } #129 off=53
            #191 off=54 nxt=-2
            (__rt.463 var=21 stl=X off=10) assign (__rt.372)  <659>;
            () out (__rt.463)  <660>;
            () sink (__sp.462)  <661>;
        } #20
        {
            #142 off=29
            (__ct_1056964608.183 var=75) const ()  <204>;
            (__link.377 var=106) w32_jal_t21s_s2 (f32_mul.236)  <493>;
            call {
                (a.378 var=103 stl=X off=11) assign (__ct_1056964608.183)  <494>;
                (b.379 var=104 stl=X off=12) assign (y.27)  <495>;
                (__link.380 var=106 stl=X off=1) assign (__link.377)  <496>;
                (__tmp.381 var=77 stl=X off=10) Ff32_mul (__link.380 a.378 b.379)  <497>;
                (__tmp.382 var=77) deassign (__tmp.381)  <498>;
            } #143 off=30
            #148 off=31
            (__link.387 var=106) w32_jal_t21s_s2 (f32_mul.236)  <506>;
            call {
                (a.388 var=103 stl=X off=11) assign (v.252)  <507>;
                (b.389 var=104 stl=X off=12) assign (r.332)  <508>;
                (__link.390 var=106 stl=X off=1) assign (__link.387)  <509>;
                (__tmp.391 var=78 stl=X off=10) Ff32_mul (__link.390 a.388 b.389)  <510>;
                (__tmp.392 var=78) deassign (__tmp.391)  <511>;
            } #149 off=32
            #154 off=33
            (f32_sub.396 var=131) const ()  <518>;
            (__link.397 var=132) w32_jal_t21s_s2 (f32_sub.396)  <519>;
            call {
                (a.398 var=129 stl=X off=11) assign (__tmp.382)  <520>;
                (b.399 var=130 stl=X off=12) assign (__tmp.392)  <521>;
                (__link.400 var=132 stl=X off=1) assign (__link.397)  <522>;
                (__tmp.401 var=79 stl=X off=10) Ff32_sub (__link.400 a.398 b.399)  <523>;
                (__tmp.402 var=79) deassign (__tmp.401)  <524>;
            } #155 off=34
            #160 off=35
            (__link.407 var=106) w32_jal_t21s_s2 (f32_mul.236)  <532>;
            call {
                (a.408 var=103 stl=X off=11) assign (z.242)  <533>;
                (b.409 var=104 stl=X off=12) assign (__tmp.402)  <534>;
                (__link.410 var=106 stl=X off=1) assign (__link.407)  <535>;
                (__tmp.411 var=80 stl=X off=10) Ff32_mul (__link.410 a.408 b.409)  <536>;
                (__tmp.412 var=80) deassign (__tmp.411)  <537>;
            } #161 off=36
            #166 off=37
            (__link.417 var=132) w32_jal_t21s_s2 (f32_sub.396)  <545>;
            call {
                (a.418 var=129 stl=X off=11) assign (__tmp.412)  <546>;
                (b.419 var=130 stl=X off=12) assign (y.27)  <547>;
                (__link.420 var=132 stl=X off=1) assign (__link.417)  <548>;
                (__tmp.421 var=81 stl=X off=10) Ff32_sub (__link.420 a.418 b.419)  <549>;
                (__tmp.422 var=81) deassign (__tmp.421)  <550>;
            } #167 off=38
            #172 off=39
            (__link.427 var=106) w32_jal_t21s_s2 (f32_mul.236)  <558>;
            call {
                (a.428 var=103 stl=X off=11) assign (v.252)  <559>;
                (b.429 var=104 stl=X off=12) assign (__ct_3190467243.177)  <560>;
                (__link.430 var=106 stl=X off=1) assign (__link.427)  <561>;
                (__tmp.431 var=84 stl=X off=10) Ff32_mul (__link.430 a.428 b.429)  <562>;
                (__tmp.432 var=84) deassign (__tmp.431)  <563>;
            } #173 off=40
            #178 off=41
            (__link.437 var=132) w32_jal_t21s_s2 (f32_sub.396)  <571>;
            call {
                (a.438 var=129 stl=X off=11) assign (__tmp.422)  <572>;
                (b.439 var=130 stl=X off=12) assign (__tmp.432)  <573>;
                (__link.440 var=132 stl=X off=1) assign (__link.437)  <574>;
                (__tmp.441 var=85 stl=X off=10) Ff32_sub (__link.440 a.438 b.439)  <575>;
                (__tmp.442 var=85) deassign (__tmp.441)  <576>;
            } #179 off=42
            #194 off=43
            (__R_SP.464 var=12 __sp.465 var=18) wr_res_reg (__tmp.90 __sp.37)  <663>;
            () void_j_t21s_s2 (f32_sub.396)  <668>;
            call {
                (a.448 var=129 stl=X off=11) assign (x.24)  <585>;
                (b.449 var=130 stl=X off=12) assign (__tmp.442)  <586>;
                (__la.450 var=20 stl=X off=1) assign (__la.20)  <587>;
                (__rt.451 var=21 stl=X off=10) Ff32_sub (__la.450 a.448 b.449)  <588>;
                (__rt.452 var=21) deassign (__rt.451)  <589>;
            } #185 off=44
            #195 off=45 nxt=-2
            (__rt.466 var=21 stl=X off=10) assign (__rt.452)  <665>;
            () out (__rt.466)  <666>;
            () sink (__sp.465)  <667>;
        } #21
        {
        } #22
    } #18
} #0
0 : 'src/math.c';
----------
0 : (0,710:0,0);
3 : (0,725:9,7);
4 : (0,725:4,7);
6 : (0,726:8,8);
8 : (0,726:9,8);
12 : (0,726:23,9);
13 : (0,726:9,12);
15 : (0,725:4,17);
18 : (0,730:4,23);
20 : (0,731:14,24);
21 : (0,730:14,27);
26 : (0,726:18,8);
29 : (0,726:12,8);
30 : (0,726:12,8);
43 : (0,730:9,23);
46 : (0,727:12,20);
47 : (0,727:12,20);
52 : (0,728:12,21);
53 : (0,728:12,21);
58 : (0,729:33,22);
59 : (0,729:33,22);
64 : (0,729:31,22);
65 : (0,729:31,22);
70 : (0,729:27,22);
71 : (0,729:27,22);
76 : (0,729:25,22);
77 : (0,729:25,22);
82 : (0,729:21,22);
83 : (0,729:21,22);
88 : (0,729:19,22);
89 : (0,729:19,22);
94 : (0,729:15,22);
95 : (0,729:15,22);
100 : (0,729:13,22);
101 : (0,729:13,22);
110 : (0,730:30,24);
111 : (0,730:30,24);
116 : (0,730:28,24);
117 : (0,730:28,24);
122 : (0,730:24,24);
123 : (0,730:24,24);
129 : (0,730:22,24);
142 : (0,731:32,27);
143 : (0,731:32,27);
148 : (0,731:36,27);
149 : (0,731:36,27);
154 : (0,731:34,27);
155 : (0,731:34,27);
160 : (0,731:26,27);
161 : (0,731:26,27);
166 : (0,731:39,27);
167 : (0,731:39,27);
172 : (0,731:44,27);
173 : (0,731:44,27);
178 : (0,731:42,27);
179 : (0,731:42,27);
185 : (0,731:22,27);
190 : (0,730:4,31);
191 : (0,730:4,31);
194 : (0,730:4,31);
195 : (0,730:4,31);
----------
43 : (0,710:13,0);
44 : (0,710:13,0);
46 : (0,710:13,0);
47 : (0,710:13,0);
58 : (0,724:10,0);
60 : (0,724:7,6);
61 : (0,725:10,0);
79 : (0,725:4,7);
81 : (0,726:20,0);
83 : (0,726:18,8);
99 : (0,726:9,8);
100 : (0,726:23,0);
101 : (0,726:23,0);
103 : (0,726:23,0);
104 : (0,726:23,9);
105 : (0,726:23,9);
106 : (0,726:30,0);
161 : (0,729:11,0);
163 : (0,729:17,0);
165 : (0,729:23,0);
167 : (0,729:29,0);
169 : (0,729:34,0);
181 : (0,730:9,23);
197 : (0,730:4,23);
198 : (0,730:26,0);
204 : (0,731:28,0);
296 : (0,726:12,0);
297 : (0,726:12,0);
298 : (0,726:12,8);
299 : (0,726:12,8);
300 : (0,726:12,8);
301 : (0,726:12,8);
302 : (0,726:12,8);
303 : (0,726:12,8);
310 : (0,727:12,0);
311 : (0,727:12,20);
312 : (0,727:12,20);
313 : (0,727:12,20);
314 : (0,727:12,20);
315 : (0,727:12,20);
316 : (0,727:12,20);
324 : (0,728:12,21);
325 : (0,728:12,21);
326 : (0,728:12,21);
327 : (0,728:12,21);
328 : (0,728:12,21);
329 : (0,728:12,21);
337 : (0,729:33,22);
338 : (0,729:33,22);
339 : (0,729:33,22);
340 : (0,729:33,22);
341 : (0,729:33,22);
342 : (0,729:33,22);
349 : (0,729:31,0);
350 : (0,729:31,22);
351 : (0,729:31,22);
352 : (0,729:31,22);
353 : (0,729:31,22);
354 : (0,729:31,22);
355 : (0,729:31,22);
363 : (0,729:27,22);
364 : (0,729:27,22);
365 : (0,729:27,22);
366 : (0,729:27,22);
367 : (0,729:27,22);
368 : (0,729:27,22);
376 : (0,729:25,22);
377 : (0,729:25,22);
378 : (0,729:25,22);
379 : (0,729:25,22);
380 : (0,729:25,22);
381 : (0,729:25,22);
389 : (0,729:21,22);
390 : (0,729:21,22);
391 : (0,729:21,22);
392 : (0,729:21,22);
393 : (0,729:21,22);
394 : (0,729:21,22);
402 : (0,729:19,22);
403 : (0,729:19,22);
404 : (0,729:19,22);
405 : (0,729:19,22);
406 : (0,729:19,22);
407 : (0,729:19,22);
415 : (0,729:15,22);
416 : (0,729:15,22);
417 : (0,729:15,22);
418 : (0,729:15,22);
419 : (0,729:15,22);
420 : (0,729:15,22);
428 : (0,729:13,22);
429 : (0,729:13,22);
430 : (0,729:13,22);
431 : (0,729:13,22);
432 : (0,729:13,22);
433 : (0,729:13,22);
441 : (0,730:30,24);
442 : (0,730:30,24);
443 : (0,730:30,24);
444 : (0,730:30,24);
445 : (0,730:30,24);
446 : (0,730:30,24);
454 : (0,730:28,24);
455 : (0,730:28,24);
456 : (0,730:28,24);
457 : (0,730:28,24);
458 : (0,730:28,24);
459 : (0,730:28,24);
467 : (0,730:24,24);
468 : (0,730:24,24);
469 : (0,730:24,24);
470 : (0,730:24,24);
471 : (0,730:24,24);
472 : (0,730:24,24);
481 : (0,730:22,24);
482 : (0,730:22,24);
483 : (0,730:22,24);
484 : (0,730:22,24);
485 : (0,730:22,24);
493 : (0,731:32,27);
494 : (0,731:32,27);
495 : (0,731:32,27);
496 : (0,731:32,27);
497 : (0,731:32,27);
498 : (0,731:32,27);
506 : (0,731:36,27);
507 : (0,731:36,27);
508 : (0,731:36,27);
509 : (0,731:36,27);
510 : (0,731:36,27);
511 : (0,731:36,27);
518 : (0,731:34,0);
519 : (0,731:34,27);
520 : (0,731:34,27);
521 : (0,731:34,27);
522 : (0,731:34,27);
523 : (0,731:34,27);
524 : (0,731:34,27);
532 : (0,731:26,27);
533 : (0,731:26,27);
534 : (0,731:26,27);
535 : (0,731:26,27);
536 : (0,731:26,27);
537 : (0,731:26,27);
545 : (0,731:39,27);
546 : (0,731:39,27);
547 : (0,731:39,27);
548 : (0,731:39,27);
549 : (0,731:39,27);
550 : (0,731:39,27);
558 : (0,731:44,27);
559 : (0,731:44,27);
560 : (0,731:44,27);
561 : (0,731:44,27);
562 : (0,731:44,27);
563 : (0,731:44,27);
571 : (0,731:42,27);
572 : (0,731:42,27);
573 : (0,731:42,27);
574 : (0,731:42,27);
575 : (0,731:42,27);
576 : (0,731:42,27);
585 : (0,731:22,27);
586 : (0,731:22,27);
587 : (0,731:22,27);
588 : (0,731:22,27);
589 : (0,731:22,27);
635 : (0,725:9,7);
657 : (0,730:4,31);
659 : (0,730:4,0);
662 : (0,730:22,24);
663 : (0,730:4,31);
665 : (0,730:4,0);
668 : (0,731:22,27);
670 : (0,726:9,8);
674 : (0,725:4,7);
679 : (0,730:4,23);

