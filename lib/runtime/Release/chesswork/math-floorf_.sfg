
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar 22 18:54:31 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float floorf(float)
Ffloorf : user_defined, called {
    fnm : "floorf" 'float floorf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
}
****
!!  bool f32_lt(float32_t, float32_t)
Ff32_lt : user_defined, called {
    fnm : "f32_lt" 'bool f32_lt(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : floorf typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__ffloat__
   22 : x typ=w32 bnd=p tref=__ffloat__
   23 : __ct_0S0 typ=w32 val=0S0 bnd=m
   25 : __tmp typ=w32 bnd=m
   26 : i0 typ=w32 bnd=m tref=int32_t__
   27 : j0 typ=w32 bnd=m tref=int32_t__
   28 : i typ=w32 bnd=m tref=u_int32_t__
   30 : __ct_23 typ=w32 val=23f bnd=m
   32 : __tmp typ=w32 bnd=m
   33 : __ct_255 typ=w32 val=255f bnd=m
   35 : __tmp typ=w32 bnd=m
   41 : __tmp typ=bool bnd=m
   42 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   44 : __tmp typ=bool bnd=m
   45 : __ct_1900671690 typ=w32 val=1900671690f bnd=m
   47 : __tmp typ=w32 bnd=m
   50 : __tmp typ=bool bnd=m
   53 : __tmp typ=bool bnd=m
   56 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   58 : __tmp typ=w32 bnd=m
   61 : __tmp typ=bool bnd=m
   62 : __ct_m1082130432 typ=t20s_rp12 val=-264192f bnd=m
   64 : __ct_8388607 typ=w32 val=8388607f bnd=m
   68 : __tmp typ=w32 bnd=m
   71 : __tmp typ=bool bnd=m
   72 : __ct_0s0 typ=w32 val=0s0 bnd=m
   74 : __tmp typ=w32 bnd=m
   85 : __ct_8388608 typ=t20s_rp12 val=2048f bnd=m
   87 : __tmp typ=w32 bnd=m
   88 : __tmp typ=w32 bnd=m
   91 : __tmp typ=w32 bnd=m
   92 : __tmp typ=w32 bnd=m
   95 : __ct_128 typ=w32 val=128f bnd=m
   97 : __tmp typ=bool bnd=m
  106 : __ct_m127 typ=w32 val=-127f bnd=m
  115 : __ct_4294967295 typ=w32 val=-1f bnd=m
  120 : a typ=w32 bnd=m tref=float32_t__
  121 : b typ=w32 bnd=m tref=float32_t__
  122 : f32_lt typ=t21s_s2 val=0r bnd=m
  123 : __link typ=w32 bnd=m
  124 : __tmp typ=w32 bnd=m
  129 : a typ=w32 bnd=m tref=float32_t__
  130 : b typ=w32 bnd=m tref=float32_t__
  131 : f32_add typ=t21s_s2 val=0r bnd=m
  132 : __link typ=w32 bnd=m
  144 : __either typ=bool bnd=m
  145 : __trgt typ=t13s_s2 val=0j bnd=m
  146 : __trgt typ=t21s_s2 val=0j bnd=m
  147 : __trgt typ=t13s_s2 val=0j bnd=m
  148 : __trgt typ=t21s_s2 val=0j bnd=m
  149 : __trgt typ=t13s_s2 val=0j bnd=m
  150 : __trgt typ=t21s_s2 val=0j bnd=m
  151 : __trgt typ=t13s_s2 val=0j bnd=m
  152 : __trgt typ=t13s_s2 val=0j bnd=m
  153 : __trgt typ=t21s_s2 val=0j bnd=m
  154 : __trgt typ=t13s_s2 val=0j bnd=m
  155 : __trgt typ=t21s_s2 val=0j bnd=m
  156 : __trgt typ=t13s_s2 val=0j bnd=m
  157 : __trgt typ=t21s_s2 val=0j bnd=m
  158 : __trgt typ=t13s_s2 val=0j bnd=m
  159 : __trgt typ=t13s_s2 val=0j bnd=m
  160 : __trgt typ=t21s_s2 val=0j bnd=m
]
Ffloorf {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x.23 var=22 stl=X off=11) inp ()  <34>;
    (x.24 var=22) deassign (x.23)  <35>;
    (__rd___sp.26 var=19) rd_res_reg (__R_SP.11 __sp.17)  <37>;
    (__ct_0S0.27 var=23) const ()  <38>;
    (__tmp.29 var=25) __Pvoid__pl___Pvoid___sint (__rd___sp.26 __ct_0S0.27)  <40>;
    (__R_SP.30 var=12 __sp.31 var=18) wr_res_reg (__tmp.29 __sp.17)  <41>;
    (__ct_23.39 var=30) const ()  <50>;
    (__tmp.41 var=32) __sint__rs___sint___sint (x.24 __ct_23.39)  <52>;
    (__ct_255.42 var=33) const ()  <53>;
    (__tmp.44 var=35) __sint__ad___sint___sint (__tmp.41 __ct_255.42)  <55>;
    (j0.47 var=27) __sint__pl___sint___sint (__tmp.44 __ct_m127.297)  <58>;
    (__tmp.50 var=41) bool__lt___sint___sint (j0.47 __ct_23.39)  <61>;
    (__rd___sp.156 var=19) rd_res_reg (__R_SP.11 __sp.31)  <173>;
    (__ct_0s0.157 var=72) const ()  <174>;
    (__tmp.159 var=74) __Pvoid__pl___Pvoid___sint (__rd___sp.156 __ct_0s0.157)  <176>;
    (__ct_m127.297 var=106) const ()  <363>;
    (f32_add.326 var=131) const ()  <454>;
    (__trgt.381 var=159) const ()  <587>;
    () void_br_bool_t13s_s2 (__tmp.50 __trgt.381)  <588>;
    (__either.382 var=144) undefined ()  <589>;
    if {
        {
            () if_expr (__either.382)  <74>;
        } #5
        {
            #87 off=7
            (__ct_1900671690.78 var=45) const ()  <91>;
            (__link.327 var=132) w32_jal_t21s_s2 (f32_add.326)  <455>;
            call {
                (a.328 var=129 stl=X off=11) assign (__ct_1900671690.78)  <456>;
                (b.329 var=130 stl=X off=12) assign (x.24)  <457>;
                (__link.330 var=132 stl=X off=1) assign (__link.327)  <458>;
                (__tmp.331 var=47 stl=X off=10) Ff32_add (__link.330 a.328 b.329)  <459>;
                (__tmp.332 var=47) deassign (__tmp.331)  <460>;
            } #88 off=8
            #84 off=9
            (__ct_0.63 var=42) const ()  <75>;
            (f32_lt.312 var=122) const ()  <419>;
            (__link.313 var=123) w32_jal_t21s_s2 (f32_lt.312)  <420>;
            call {
                (a.315 var=120 stl=X off=11) assign (__ct_0.63)  <422>;
                (b.316 var=121 stl=X off=12) assign (__tmp.332)  <423>;
                (__link.317 var=123 stl=X off=1) assign (__link.313)  <424>;
                (__tmp.318 var=124 stl=X off=10) Ff32_lt (__link.317 a.315 b.316)  <425>;
                (__tmp.319 var=124) deassign (__tmp.318)  <426>;
            } #80 off=10
            #76 off=11
            (__tmp.65 var=44) bool__lt___sint___sint (j0.47 __ct_0.63)  <77>;
            (__trgt.376 var=156) const ()  <579>;
            () void_br_bool_t13s_s2 (__tmp.65 __trgt.376)  <580>;
            (__either.377 var=144) undefined ()  <581>;
            if {
                {
                    () if_expr (__either.377)  <90>;
                } #9
                {
                    #104 off=22
                    (__trgt.365 var=149) const ()  <560>;
                    () void_br_bool_t13s_s2 (__tmp.386 __trgt.365)  <561>;
                    (__either.366 var=144) undefined ()  <562>;
                    (__tmp.386 var=50) bool__eq___sint___sint (__tmp.319 __ct_0.63)  <594>;
                    if {
                        {
                            () if_expr (__either.366)  <109>;
                        } #13
                        {
                        } #27 off=30
                        {
                            #102 off=23
                            (__trgt.362 var=147) const ()  <555>;
                            () void_br_bool_t13s_s2 (__tmp.384 __trgt.362)  <556>;
                            (__either.363 var=144) undefined ()  <557>;
                            (__tmp.384 var=53) bool__ge___sint___sint (x.24 __ct_0.63)  <592>;
                            if {
                                {
                                    () if_expr (__either.363)  <125>;
                                } #17
                                {
                                } #18 off=28
                                {
                                    #20 off=24
                                    (__ct_2147483647.113 var=56) const ()  <128>;
                                    (__tmp.115 var=58) __sint__ad___sint___sint (x.24 __ct_2147483647.113)  <130>;
                                    (__tmp.348 var=61) bool__eq___sint___sint (__tmp.115 __ct_0.63)  <519>;
                                    (__trgt.359 var=145) const ()  <550>;
                                    () void_br_bool_t13s_s2 (__tmp.348 __trgt.359)  <551>;
                                    (__either.360 var=144) undefined ()  <552>;
                                    if {
                                        {
                                            () if_expr (__either.360)  <146>;
                                        } #22
                                        {
                                        } #24 off=26
                                        {
                                            (__ct_m1082130432.131 var=62) const ()  <147>;
                                            (__trgt.361 var=146) const ()  <553>;
                                            () void_j_t21s_s2 (__trgt.361)  <554>;
                                        } #23 off=25
                                        {
                                            (i0.133 var=26) merge (x.24 __ct_m1082130432.131)  <149>;
                                        } #25
                                    } #21
                                    #105 off=27
                                    (__trgt.364 var=148) const ()  <558>;
                                    () void_j_t21s_s2 (__trgt.364)  <559>;
                                } #19
                                {
                                    (i0.134 var=26) merge (__ct_0.63 i0.133)  <150>;
                                } #26
                            } #16
                            #106 off=29
                            (__trgt.367 var=150) const ()  <563>;
                            () void_j_t21s_s2 (__trgt.367)  <564>;
                        } #14
                        {
                            (i0.135 var=26) merge (x.24 i0.134)  <151>;
                        } #28
                    } #12
                } #10
                {
                    #30 off=12
                    (__ct_8388607.136 var=64) const ()  <152>;
                    (i.138 var=28) __uint__rs___uint___sint (__ct_8388607.136 j0.47)  <154>;
                    (__tmp.140 var=68) __uint__ad___uint___uint (x.24 i.138)  <156>;
                    (__tmp.143 var=71) bool__eq___uint___uint (__tmp.140 __ct_0.63)  <159>;
                    (__trgt.368 var=151) const ()  <565>;
                    () void_br_bool_t13s_s2 (__tmp.143 __trgt.368)  <566>;
                    (__either.369 var=144) undefined ()  <567>;
                    if {
                        {
                            () if_expr (__either.369)  <172>;
                            () chess_rear_then ()  <568>;
                        } #32
                        {
                            (__R_SP.160 var=12 __sp.161 var=18) wr_res_reg (__tmp.159 __sp.31)  <177>;
                            () void___rts_jr_w32 (__la.20)  <178>;
                            (__rt.162 var=21 stl=X off=10) assign (x.24)  <179>;
                            () out (__rt.162)  <180>;
                            () sink (__sp.161)  <186>;
                        } #35 off=14 nxt=-2
                        {
                        } #36 off=13
                        {
                        } #37
                    } #31
                    #108 off=15
                    (__trgt.373 var=154) const ()  <574>;
                    () void_br_bool_t13s_s2 (__tmp.387 __trgt.373)  <575>;
                    (__either.374 var=144) undefined ()  <576>;
                    (__tmp.387 var=50) bool__eq___sint___sint (__tmp.319 __ct_0.63)  <595>;
                    if {
                        {
                            () if_expr (__either.374)  <229>;
                        } #40
                        {
                        } #49 off=20
                        {
                            #103 off=16
                            (__trgt.370 var=152) const ()  <569>;
                            () void_br_bool_t13s_s2 (__tmp.385 __trgt.370)  <570>;
                            (__either.371 var=144) undefined ()  <571>;
                            (__tmp.385 var=53) bool__ge___sint___sint (x.24 __ct_0.63)  <593>;
                            if {
                                {
                                    () if_expr (__either.371)  <245>;
                                } #44
                                {
                                } #46 off=18
                                {
                                    (__ct_8388608.221 var=85) const ()  <247>;
                                    (__tmp.223 var=87) __uint__rs___uint___sint (__ct_8388608.221 j0.47)  <249>;
                                    (__tmp.224 var=88) __uint__pl___uint___uint (x.24 __tmp.223)  <250>;
                                    (__trgt.372 var=153) const ()  <572>;
                                    () void_j_t21s_s2 (__trgt.372)  <573>;
                                } #45 off=17
                                {
                                    (i0.226 var=26) merge (x.24 __tmp.224)  <252>;
                                } #47
                            } #43
                            #70 off=19
                            (__tmp.229 var=92) __uint__ad___uint___uint (i0.226 __tmp.306)  <255>;
                            (__ct_4294967295.305 var=115) const ()  <392>;
                            (__tmp.306 var=91) __uint__er___uint___uint (i.138 __ct_4294967295.305)  <393>;
                            (__trgt.375 var=155) const ()  <577>;
                            () void_j_t21s_s2 (__trgt.375)  <578>;
                        } #41
                        {
                            (i0.231 var=26) merge (x.24 __tmp.229)  <257>;
                        } #50
                    } #39
                    #109 off=21
                    (__trgt.378 var=157) const ()  <582>;
                    () void_j_t21s_s2 (__trgt.378)  <583>;
                } #29
                {
                    (i0.239 var=26) merge (i0.135 i0.231)  <265>;
                } #51
            } #8
        } #6
        {
            #54 off=1
            (__ct_128.245 var=95) const ()  <271>;
            (__tmp.352 var=97) bool__ne___sint___sint (j0.47 __ct_128.245)  <523>;
            (__trgt.379 var=158) const ()  <584>;
            () void_br_bool_t13s_s2 (__tmp.352 __trgt.379)  <585>;
            (__either.380 var=144) undefined ()  <586>;
            if {
                {
                    () if_expr (__either.380)  <286>;
                } #56
                {
                } #58 off=5
                {
                    #99 off=2
                    (__R_SP.355 var=12 __sp.356 var=18) wr_res_reg (__tmp.159 __sp.31)  <543>;
                    () void_j_t21s_s2 (f32_add.326)  <548>;
                    call {
                        (a.338 var=129 stl=X off=11) assign (x.24)  <469>;
                        (b.339 var=130 stl=X off=12) assign (x.24)  <470>;
                        (__la.340 var=20 stl=X off=1) assign (__la.20)  <471>;
                        (__rt.341 var=21 stl=X off=10) Ff32_add (__la.340 a.338 b.339)  <472>;
                        (__rt.342 var=21) deassign (__rt.341)  <473>;
                    } #94 off=3
                    #100 off=4 nxt=-2
                    (__rt.357 var=21 stl=X off=10) assign (__rt.342)  <545>;
                    () out (__rt.357)  <546>;
                    () sink (__sp.356)  <547>;
                } #57
                {
                } #59
            } #55
            #111 off=6
            (__trgt.383 var=160) const ()  <590>;
            () void_j_t21s_s2 (__trgt.383)  <591>;
        } #53
        {
            (__rt.273 var=21) merge (i0.239 x.24)  <300>;
        } #60
    } #4
    #62 off=33 nxt=-2
    (__R_SP.278 var=12 __sp.279 var=18) wr_res_reg (__tmp.159 __sp.31)  <305>;
    () void___rts_jr_w32 (__la.20)  <306>;
    (__rt.280 var=21 stl=X off=10) assign (__rt.273)  <307>;
    () out (__rt.280)  <308>;
    () sink (__sp.279)  <314>;
} #0
0 : 'src/math.c';
----------
0 : (0,204:0,0);
3 : (0,212:9,7);
4 : (0,212:4,7);
6 : (0,227:8,8);
8 : (0,213:8,8);
10 : (0,213:17,9);
12 : (0,214:12,9);
14 : (0,214:34,10);
16 : (0,215:16,10);
18 : (0,215:26,11);
19 : (0,216:21,14);
20 : (0,216:39,14);
21 : (0,216:21,14);
23 : (0,216:44,15);
24 : (0,216:21,18);
27 : (0,214:12,25);
29 : (0,218:15,30);
30 : (0,220:21,31);
31 : (0,220:12,31);
35 : (0,220:26,32);
36 : (0,220:12,35);
39 : (0,221:12,38);
41 : (0,221:34,39);
43 : (0,222:16,39);
45 : (0,222:28,40);
46 : (0,222:16,42);
49 : (0,221:12,48);
53 : (0,226:11,59);
54 : (0,227:13,59);
55 : (0,227:8,59);
57 : (0,228:13,60);
58 : (0,227:21,63);
62 : (0,231:4,72);
70 : (0,223:19,45);
76 : (0,213:13,8);
80 : (0,214:21,9);
84 : (0,214:21,9);
87 : (0,214:19,9);
88 : (0,214:19,9);
94 : (0,228:13,60);
99 : (0,231:4,72);
100 : (0,231:4,72);
----------
37 : (0,204:6,0);
38 : (0,204:6,0);
40 : (0,204:6,0);
41 : (0,204:6,0);
50 : (0,211:15,0);
52 : (0,211:13,6);
53 : (0,211:19,0);
55 : (0,211:18,6);
58 : (0,211:24,6);
61 : (0,212:9,7);
74 : (0,212:4,7);
75 : (0,213:14,0);
77 : (0,213:13,8);
90 : (0,213:8,8);
91 : (0,214:15,0);
109 : (0,214:12,9);
125 : (0,215:16,10);
128 : (0,216:28,0);
130 : (0,216:27,14);
146 : (0,216:21,14);
147 : (0,216:48,0);
149 : (0,216:21,20);
150 : (0,215:16,22);
151 : (0,214:12,27);
152 : (0,219:16,0);
154 : (0,219:39,30);
156 : (0,220:18,31);
159 : (0,220:21,31);
172 : (0,220:12,31);
173 : (0,220:26,0);
174 : (0,220:26,0);
176 : (0,220:26,0);
177 : (0,220:26,32);
178 : (0,220:26,32);
179 : (0,220:33,0);
229 : (0,221:12,38);
245 : (0,222:16,39);
247 : (0,222:31,0);
249 : (0,222:54,40);
250 : (0,222:28,40);
252 : (0,222:16,44);
255 : (0,223:19,45);
257 : (0,221:12,50);
265 : (0,213:8,53);
271 : (0,227:15,0);
286 : (0,227:8,59);
300 : (0,212:4,70);
305 : (0,231:4,72);
306 : (0,231:4,72);
307 : (0,231:4,0);
363 : (0,211:24,0);
392 : (0,223:23,0);
393 : (0,223:23,45);
419 : (0,214:21,0);
420 : (0,214:21,9);
422 : (0,214:21,9);
423 : (0,214:21,9);
424 : (0,214:21,9);
425 : (0,214:21,9);
426 : (0,214:21,9);
454 : (0,214:19,0);
455 : (0,214:19,9);
456 : (0,214:19,9);
457 : (0,214:19,9);
458 : (0,214:19,9);
459 : (0,214:19,9);
460 : (0,214:19,9);
469 : (0,227:29,60);
470 : (0,227:29,60);
471 : (0,227:29,60);
472 : (0,227:29,60);
473 : (0,227:29,60);
519 : (0,216:39,14);
523 : (0,227:13,59);
543 : (0,231:4,72);
545 : (0,231:4,0);
548 : (0,227:29,60);
551 : (0,216:21,14);
556 : (0,215:16,10);
561 : (0,214:12,9);
566 : (0,220:12,31);
570 : (0,222:16,39);
575 : (0,221:12,38);
580 : (0,213:8,8);
585 : (0,227:8,59);
588 : (0,212:4,7);

