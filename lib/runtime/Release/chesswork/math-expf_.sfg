
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Apr 10 19:59:57 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern float expf(float)
Fexpf : user_defined, called {
    fnm : "expf" 'float expf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
}
****
!!  bool f32_lt(float32_t, float32_t)
Ff32_lt : user_defined, called {
    fnm : "f32_lt" 'bool f32_lt(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_sub(float32_t, float32_t)
Ff32_sub : user_defined, called {
    fnm : "f32_sub" 'float32_t f32_sub(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  long f32_to_i32_r_minMag(float32_t, bool)
Ff32_to_i32_r_minMag : user_defined, called {
    fnm : "f32_to_i32_r_minMag" 'long f32_to_i32_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t i32_to_f32(int)
Fi32_to_f32 : user_defined, called {
    fnm : "i32_to_f32" 'float32_t i32_to_f32(int)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
}
!!  float32_t f32_div(float32_t, float32_t)
Ff32_div : user_defined, called {
    fnm : "f32_div" 'float32_t f32_div(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : expf typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : _ZZ4expffE5ln2HI typ=w08 bnd=i sz=8 algn=4 stl=DMb tref=__A2__ffloat_DMb
   20 : _ZZ4expffE5ln2LO typ=w08 bnd=i sz=8 algn=4 stl=DMb tref=__A2__ffloat_DMb
   21 : _ZZ4expffE4halF typ=w08 bnd=i sz=8 algn=4 stl=DMb tref=__A2__ffloat_DMb
   22 : __rd___sp typ=w32 bnd=m
   24 : __ptr_ln2HI typ=w32 val=0a bnd=m adro=19
   26 : __ptr_ln2LO typ=w32 val=0a bnd=m adro=20
   28 : __ptr_halF typ=w32 val=0a bnd=m adro=21
   29 : __la typ=w32 bnd=p tref=w32__
   30 : __rt typ=w32 bnd=p tref=__ffloat__
   31 : x typ=w32 bnd=p tref=__ffloat__
   32 : __ct_0S0 typ=w32 val=0S0 bnd=m
   34 : __tmp typ=w32 bnd=m
   35 : hi typ=w32 bnd=m tref=__ffloat__
   37 : lo typ=w32 bnd=m tref=__ffloat__
   39 : hx typ=w32 bnd=m tref=u_int32_t__
   45 : k typ=w32 bnd=m tref=int32_t__
   46 : t typ=w32 bnd=m tref=__ffloat__
   47 : c typ=w32 bnd=m tref=__ffloat__
   48 : y typ=w32 bnd=m tref=__ffloat__
   55 : __ct_31 typ=w32 val=31f bnd=m
   57 : __tmp typ=w32 bnd=m
   58 : __ct_1 typ=w32 val=1f bnd=m
   60 : __tmp typ=w32 bnd=m
   62 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   65 : __ct_1118925336 typ=w32 val=1118925336f bnd=m
   67 : __tmp typ=bool bnd=m
   68 : __ct_2139095040 typ=t20s_rp12 val=522240f bnd=m
   70 : __tmp typ=bool bnd=m
   72 : __ct_0s0 typ=w32 val=0s0 bnd=m
   74 : __tmp typ=w32 bnd=m
   77 : __tmp typ=bool bnd=m
   78 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   80 : __tmp typ=bool bnd=m
   83 : __tmp typ=w32 bnd=m
   87 : __ct_1118925184 typ=w32 val=1118925184f bnd=m
   89 : __tmp typ=bool bnd=m
   95 : __ct_3268407733 typ=w32 val=-1026559563f bnd=m
   97 : __tmp typ=bool bnd=m
  103 : __ct_1051816472 typ=w32 val=1051816472f bnd=m
  105 : __tmp typ=bool bnd=m
  106 : __ct_1065686418 typ=w32 val=1065686418f bnd=m
  108 : __tmp typ=bool bnd=m
  111 : __tmp typ=w32 bnd=m
  112 : __tmp typ=w32 bnd=m
  113 : __fch__ZZ4expffE5ln2HI typ=w32 bnd=m
  118 : __tmp typ=w32 bnd=m
  124 : __ct_1069066811 typ=w32 val=1069066811f bnd=m
  126 : __tmp typ=w32 bnd=m
  130 : __tmp typ=w32 bnd=m
  131 : __fch__ZZ4expffE4halF typ=w32 bnd=m
  132 : __tmp typ=w32 bnd=m
  138 : __fch__ZZ4expffE5ln2HI typ=w32 bnd=m
  139 : __tmp typ=w32 bnd=m
  144 : __fch__ZZ4expffE5ln2LO typ=w32 bnd=m
  147 : __ct_830472192 typ=t20s_rp12 val=202752f bnd=m
  149 : __tmp typ=bool bnd=m
  150 : __ct_1900671690 typ=w32 val=1900671690f bnd=m
  152 : __tmp typ=w32 bnd=m
  153 : __ct_1065353216 typ=t20s_rp12 val=260096f bnd=m
  155 : __tmp typ=bool bnd=m
  165 : __ct_1042983595 typ=w32 val=1042983595f bnd=m
  167 : __ct_3140881249 typ=w32 val=-1154086047f bnd=m
  169 : __ct_948613973 typ=w32 val=948613973f bnd=m
  171 : __ct_3051219470 typ=w32 val=-1243747826f bnd=m
  173 : __ct_858897228 typ=w32 val=858897228f bnd=m
  175 : __tmp typ=w32 bnd=m
  176 : __tmp typ=w32 bnd=m
  177 : __tmp typ=w32 bnd=m
  178 : __tmp typ=w32 bnd=m
  179 : __tmp typ=w32 bnd=m
  180 : __tmp typ=w32 bnd=m
  181 : __tmp typ=w32 bnd=m
  182 : __tmp typ=w32 bnd=m
  183 : __tmp typ=w32 bnd=m
  187 : __tmp typ=bool bnd=m
  190 : __tmp typ=w32 bnd=m
  191 : __ct_1073741824 typ=t20s_rp12 val=262144f bnd=m
  193 : __tmp typ=w32 bnd=m
  194 : __tmp typ=w32 bnd=m
  195 : __tmp typ=w32 bnd=m
  202 : __tmp typ=w32 bnd=m
  203 : __tmp typ=w32 bnd=m
  204 : __tmp typ=w32 bnd=m
  205 : __tmp typ=w32 bnd=m
  207 : __ct_m125 typ=w32 val=-125f bnd=m
  209 : __tmp typ=bool bnd=m
  212 : __ct_23 typ=w32 val=23f bnd=m
  214 : __tmp typ=w32 bnd=m
  216 : __tmp typ=w32 bnd=m
  221 : __ct_100 typ=w32 val=100f bnd=m
  223 : __tmp typ=w32 bnd=m
  226 : __tmp typ=w32 bnd=m
  228 : __tmp typ=w32 bnd=m
  231 : __ct_226492416 typ=t20s_rp12 val=55296f bnd=m
  242 : __ct_2 typ=w32 val=2f bnd=m
  243 : __linex typ=w32 bnd=m
  244 : __linex typ=w32 bnd=m
  256 : a typ=w32 bnd=m tref=float32_t__
  257 : b typ=w32 bnd=m tref=float32_t__
  258 : f32_lt typ=t21s_s2 val=0r bnd=m
  259 : __link typ=w32 bnd=m
  260 : __tmp typ=w32 bnd=m
  271 : a typ=w32 bnd=m tref=float32_t__
  272 : b typ=w32 bnd=m tref=float32_t__
  273 : f32_add typ=t21s_s2 val=0r bnd=m
  274 : __link typ=w32 bnd=m
  277 : a typ=w32 bnd=m tref=float32_t__
  278 : b typ=w32 bnd=m tref=float32_t__
  279 : f32_sub typ=t21s_s2 val=0r bnd=m
  280 : __link typ=w32 bnd=m
  283 : a typ=w32 bnd=m tref=float32_t__
  284 : b typ=w32 bnd=m tref=float32_t__
  285 : f32_mul typ=t21s_s2 val=0r bnd=m
  286 : __link typ=w32 bnd=m
  290 : a typ=w32 bnd=m tref=float32_t__
  291 : __tmp typ=w32 bnd=m
  292 : f32_to_i32_r_minMag typ=t21s_s2 val=0r bnd=m
  293 : __link typ=w32 bnd=m
  297 : a typ=w32 bnd=m tref=__sint__
  298 : i32_to_f32 typ=t21s_s2 val=0r bnd=m
  299 : __link typ=w32 bnd=m
  321 : a typ=w32 bnd=m tref=float32_t__
  322 : b typ=w32 bnd=m tref=float32_t__
  323 : f32_div typ=t21s_s2 val=0r bnd=m
  324 : __link typ=w32 bnd=m
  343 : __either typ=bool bnd=m
  344 : __trgt typ=t13s_s2 val=0j bnd=m
  345 : __trgt typ=t13s_s2 val=0j bnd=m
  346 : __trgt typ=t21s_s2 val=0j bnd=m
  347 : __trgt typ=t13s_s2 val=0j bnd=m
  348 : __trgt typ=t13s_s2 val=0j bnd=m
  349 : __trgt typ=t13s_s2 val=0j bnd=m
  350 : __trgt typ=t13s_s2 val=0j bnd=m
  351 : __trgt typ=t21s_s2 val=0j bnd=m
  352 : __trgt typ=t13s_s2 val=0j bnd=m
  353 : __trgt typ=t21s_s2 val=0j bnd=m
  354 : __trgt typ=t13s_s2 val=0j bnd=m
  355 : __trgt typ=t13s_s2 val=0j bnd=m
  356 : __trgt typ=t21s_s2 val=0j bnd=m
  357 : __trgt typ=t13s_s2 val=0j bnd=m
  358 : __trgt typ=t21s_s2 val=0j bnd=m
  359 : __trgt typ=t13s_s2 val=0j bnd=m
  360 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fexpf {
    #3 off=0
    (__M_DMw.4 var=5) st_def ()  <8>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (_ZZ4expffE5ln2HI.18 var=19) source ()  <29>;
    (_ZZ4expffE5ln2LO.19 var=20) source ()  <30>;
    (_ZZ4expffE4halF.20 var=21) source ()  <31>;
    (__la.28 var=29 stl=X off=1) inp ()  <39>;
    (__la.29 var=29) deassign (__la.28)  <40>;
    (x.32 var=31 stl=X off=11) inp ()  <43>;
    (x.33 var=31) deassign (x.32)  <44>;
    (__rd___sp.35 var=22) rd_res_reg (__R_SP.11 __sp.17)  <46>;
    (__ct_0S0.36 var=32) const ()  <47>;
    (__tmp.38 var=34) __Pvoid__pl___Pvoid___sint (__rd___sp.35 __ct_0S0.36)  <49>;
    (__R_SP.39 var=12 __sp.40 var=18) wr_res_reg (__tmp.38 __sp.17)  <50>;
    (hi.65 var=35) undefined ()  <76>;
    (lo.66 var=37) undefined ()  <77>;
    (__ct_31.69 var=55) const ()  <80>;
    (__tmp.71 var=57) __uint__rs___uint___sint (x.33 __ct_31.69)  <82>;
    (__ct_1.72 var=58) const ()  <83>;
    (__tmp.74 var=60) __uint__ad___uint___uint (__tmp.71 __ct_1.72)  <85>;
    (__ct_2147483647.76 var=62) const ()  <87>;
    (hx.78 var=39) __uint__ad___uint___uint (x.33 __ct_2147483647.76)  <89>;
    (__ct_1118925336.79 var=65) const ()  <90>;
    (__rd___sp.148 var=22) rd_res_reg (__R_SP.11 __sp.40)  <161>;
    (__ct_0s0.149 var=72) const ()  <162>;
    (__tmp.151 var=74) __Pvoid__pl___Pvoid___sint (__rd___sp.148 __ct_0s0.149)  <164>;
    (__ct_0.251 var=78) const ()  <275>;
    (f32_lt.1118 var=258) const ()  <1314>;
    (f32_add.1166 var=273) const ()  <1449>;
    (__tmp.1506 var=67) bool__lt___uint___uint (hx.78 __ct_1118925336.79)  <1974>;
    (__trgt.1529 var=350) const ()  <2054>;
    () void_br_bool_t13s_s2 (__tmp.1506 __trgt.1529)  <2055>;
    (__either.1530 var=343) undefined ()  <2056>;
    if {
        {
            () if_expr (__either.1530)  <124>;
        } #5
        {
        } #48 off=23
        {
            #95 off=1
            (__ct_2139095040.113 var=68) const ()  <125>;
            (__tmp.1110 var=70) bool__lt___uint___uint (__ct_2139095040.113 hx.78)  <1300>;
            (__trgt.1518 var=344) const ()  <2033>;
            () void_br_bool_t13s_s2 (__tmp.1110 __trgt.1518)  <2034>;
            (__either.1519 var=343) undefined ()  <2035>;
            if {
                {
                    () if_expr (__either.1519)  <159>;
                    () chess_rear_then ()  <2036>;
                } #9
                {
                    #12 off=3
                    (__R_SP.152 var=12 __sp.153 var=18) wr_res_reg (__tmp.151 __sp.40)  <165>;
                    () void_j_t21s_s2 (f32_add.1166)  <2017>;
                    call {
                        (a.1168 var=271 stl=X off=11) assign (x.33)  <1451>;
                        (b.1169 var=272 stl=X off=12) assign (x.33)  <1452>;
                        (__la.1170 var=29 stl=X off=1) assign (__la.29)  <1453>;
                        (__rt.1171 var=30 stl=X off=10) Ff32_add (__la.1170 a.1168 b.1169)  <1454>;
                        (__rt.1172 var=30) deassign (__rt.1171)  <1455>;
                    } #131 off=4
                    #13 off=5 nxt=-2
                    (__rt.154 var=30 stl=X off=10) assign (__rt.1172)  <167>;
                    () out (__rt.154)  <168>;
                    () sink (__sp.153)  <174>;
                } #10
                {
                } #14 off=2
                {
                } #15
            } #8
            #16 off=6
            (__tmp.219 var=77) bool__eq___uint___uint (hx.78 __ct_2139095040.113)  <242>;
            (__trgt.1523 var=347) const ()  <2042>;
            () void_br_bool_t13s_s2 (__tmp.219 __trgt.1523)  <2043>;
            (__either.1524 var=343) undefined ()  <2044>;
            if {
                {
                    () if_expr (__either.1524)  <274>;
                    () chess_rear_then ()  <2045>;
                } #18
                {
                    #20 off=8
                    (__tmp.253 var=80) bool__eq___sint___sint (__tmp.74 __ct_0.251)  <277>;
                    (__trgt.1520 var=345) const ()  <2037>;
                    () void_br_bool_t13s_s2 (__tmp.253 __trgt.1520)  <2038>;
                    (__either.1521 var=343) undefined ()  <2039>;
                    if {
                        {
                            () if_expr (__either.1521)  <309>;
                        } #22
                        {
                        } #23 off=10
                        {
                            (__trgt.1522 var=346) const ()  <2040>;
                            () void_j_t21s_s2 (__trgt.1522)  <2041>;
                        } #24 off=9
                        {
                            (__tmp.287 var=83) merge (x.33 __ct_0.251)  <312>;
                        } #25
                    } #21
                    #27 off=11 nxt=-2
                    (__R_SP.292 var=12 __sp.293 var=18) wr_res_reg (__tmp.151 __sp.40)  <317>;
                    () void___rts_jr_w32 (__la.29)  <318>;
                    (__tmp.294 var=83 stl=X off=10) assign (__tmp.287)  <319>;
                    () out (__tmp.294)  <320>;
                    () sink (__sp.293)  <326>;
                } #19
                {
                } #28 off=7
                {
                } #29
            } #17
            #116 off=12
            (__ct_1118925184.357 var=87) const ()  <392>;
            (__link.1141 var=259) w32_jal_t21s_s2 (f32_lt.1118)  <1382>;
            call {
                (a.1143 var=256 stl=X off=11) assign (__ct_1118925184.357)  <1384>;
                (b.1144 var=257 stl=X off=12) assign (x.33)  <1385>;
                (__link.1145 var=259 stl=X off=1) assign (__link.1141)  <1386>;
                (__tmp.1146 var=260 stl=X off=10) Ff32_lt (__link.1145 a.1143 b.1144)  <1387>;
                (__tmp.1147 var=260) deassign (__tmp.1146)  <1388>;
            } #117 off=13
            #118 off=14
            (__tmp.1148 var=89) bool__ne___sint___sint (__tmp.1147 __ct_0.251)  <1389>;
            (__trgt.1525 var=348) const ()  <2046>;
            () void_br_bool_t13s_s2 (__tmp.1148 __trgt.1525)  <2047>;
            (__either.1526 var=343) undefined ()  <2048>;
            if {
                {
                    () if_expr (__either.1526)  <426>;
                    () chess_rear_then ()  <2049>;
                } #32
                {
                    (__R_SP.399 var=12 __sp.400 var=18) wr_res_reg (__tmp.151 __sp.40)  <435>;
                    () void___rts_jr_w32 (__la.29)  <436>;
                    (__rt.401 var=30 stl=X off=10) assign (__ct_2139095040.113)  <437>;
                    () out (__rt.401)  <438>;
                    () sink (__sp.400)  <444>;
                } #36 off=16 nxt=-2
                {
                } #37 off=15
                {
                } #38
            } #31
            #102 off=17
            (__ct_3268407733.464 var=95) const ()  <510>;
            (__link.1119 var=259) w32_jal_t21s_s2 (f32_lt.1118)  <1315>;
            call {
                (a.1121 var=256 stl=X off=11) assign (x.33)  <1317>;
                (b.1122 var=257 stl=X off=12) assign (__ct_3268407733.464)  <1318>;
                (__link.1123 var=259 stl=X off=1) assign (__link.1119)  <1319>;
                (__tmp.1124 var=260 stl=X off=10) Ff32_lt (__link.1123 a.1121 b.1122)  <1320>;
                (__tmp.1125 var=260) deassign (__tmp.1124)  <1321>;
            } #103 off=18
            #104 off=19
            (__tmp.1126 var=97) bool__ne___sint___sint (__tmp.1125 __ct_0.251)  <1322>;
            (__trgt.1527 var=349) const ()  <2050>;
            () void_br_bool_t13s_s2 (__tmp.1126 __trgt.1527)  <2051>;
            (__either.1528 var=343) undefined ()  <2052>;
            if {
                {
                    () if_expr (__either.1528)  <544>;
                    () chess_rear_then ()  <2053>;
                } #41
                {
                    (__R_SP.506 var=12 __sp.507 var=18) wr_res_reg (__tmp.151 __sp.40)  <553>;
                    () void___rts_jr_w32 (__la.29)  <554>;
                    (__rt.508 var=30 stl=X off=10) assign (__ct_0.251)  <555>;
                    () out (__rt.508)  <556>;
                    () sink (__sp.507)  <562>;
                } #45 off=21 nxt=-2
                {
                } #46 off=20
                {
                } #47
            } #40
            #389 off=22
            (__trgt.1531 var=351) const ()  <2057>;
            () void_j_t21s_s2 (__trgt.1531)  <2058>;
        } #6
        {
        } #49
    } #4
    #107 off=24
    (__ct_1051816472.602 var=103) const ()  <659>;
    (__ct_1065353216.749 var=153) const ()  <809>;
    (__tmp.1130 var=105) bool__lt___uint___uint (__ct_1051816472.602 hx.78)  <1329>;
    (f32_sub.1176 var=279) const ()  <1462>;
    (f32_mul.1186 var=285) const ()  <1475>;
    (__trgt.1540 var=357) const ()  <2073>;
    () void_br_bool_t13s_s2 (__tmp.1130 __trgt.1540)  <2074>;
    (__either.1541 var=343) undefined ()  <2075>;
    if {
        {
            () if_expr (__either.1541)  <693>;
        } #52
        {
            #54 off=38
            (__ptr_ln2HI.22 var=24) const ()  <33>;
            (__ptr_ln2LO.24 var=26) const ()  <35>;
            (__ct_1065686418.636 var=106) const ()  <694>;
            (__tmp.638 var=108) bool__lt___uint___uint (hx.78 __ct_1065686418.636)  <696>;
            (__tmp.672 var=111) __sint__ls___sint___sint (__tmp.74 __ct_2.1103)  <731>;
            (__ct_2.1103 var=242) const ()  <1256>;
            (__trgt.1532 var=352) const ()  <2059>;
            () void_br_bool_t13s_s2 (__tmp.638 __trgt.1532)  <2060>;
            (__either.1533 var=343) undefined ()  <2061>;
            if {
                {
                    () if_expr (__either.1533)  <728>;
                } #56
                {
                    #143 off=54
                    (__tmp.673 var=112) __Pvoid__pl___Pvoid___sint (__ptr_ln2HI.22 __tmp.672)  <732>;
                    (__fch__ZZ4expffE5ln2HI.674 var=113) load (__M_DMw.4 __tmp.673 _ZZ4expffE5ln2HI.18)  <733>;
                    (__link.1177 var=280) w32_jal_t21s_s2 (f32_sub.1176)  <1463>;
                    call {
                        (a.1178 var=277 stl=X off=11) assign (x.33)  <1464>;
                        (b.1179 var=278 stl=X off=12) assign (__fch__ZZ4expffE5ln2HI.674)  <1465>;
                        (__link.1180 var=280 stl=X off=1) assign (__link.1177)  <1466>;
                        (hi.1181 var=35 stl=X off=10) Ff32_sub (__link.1180 a.1178 b.1179)  <1467>;
                        (hi.1182 var=35) deassign (hi.1181)  <1468>;
                    } #144 off=55
                    #140 off=56
                    (__tmp.679 var=118) __Pvoid__pl___Pvoid___sint (__ptr_ln2LO.24 __tmp.672)  <738>;
                    (lo.680 var=37) load (__M_DMw.4 __tmp.679 _ZZ4expffE5ln2LO.19)  <739>;
                    (__linex.1104 var=243) __sint__ls___sint___sint (__tmp.74 __ct_1.72)  <1258>;
                    (__linex.1105 var=244) __sint__mi___sint___sint (__ct_1.72 __linex.1104)  <1259>;
                } #57
                {
                    #160 off=39
                    (__ct_1069066811.685 var=124) const ()  <744>;
                    (__link.1187 var=286) w32_jal_t21s_s2 (f32_mul.1186)  <1476>;
                    call {
                        (a.1188 var=283 stl=X off=11) assign (__ct_1069066811.685)  <1477>;
                        (b.1189 var=284 stl=X off=12) assign (x.33)  <1478>;
                        (__link.1190 var=286 stl=X off=1) assign (__link.1187)  <1479>;
                        (__tmp.1191 var=126 stl=X off=10) Ff32_mul (__link.1190 a.1188 b.1189)  <1480>;
                        (__tmp.1192 var=126) deassign (__tmp.1191)  <1481>;
                    } #161 off=40
                    #166 off=41
                    (__ptr_halF.26 var=28) const ()  <37>;
                    (__tmp.691 var=130) __Pvoid__pl___Pvoid___sint (__ptr_halF.26 __tmp.672)  <750>;
                    (__fch__ZZ4expffE4halF.692 var=131) load (__M_DMw.4 __tmp.691 _ZZ4expffE4halF.20)  <751>;
                    (__link.1197 var=274) w32_jal_t21s_s2 (f32_add.1166)  <1489>;
                    call {
                        (a.1198 var=271 stl=X off=11) assign (__tmp.1192)  <1490>;
                        (b.1199 var=272 stl=X off=12) assign (__fch__ZZ4expffE4halF.692)  <1491>;
                        (__link.1200 var=274 stl=X off=1) assign (__link.1197)  <1492>;
                        (__tmp.1201 var=132 stl=X off=10) Ff32_add (__link.1200 a.1198 b.1199)  <1493>;
                        (__tmp.1202 var=132) deassign (__tmp.1201)  <1494>;
                    } #167 off=42
                    #172 off=43
                    (f32_to_i32_r_minMag.1206 var=292) const ()  <1501>;
                    (__link.1207 var=293) w32_jal_t21s_s2 (f32_to_i32_r_minMag.1206)  <1502>;
                    call {
                        (a.1208 var=290 stl=X off=11) assign (__tmp.1202)  <1503>;
                        (__tmp.1209 var=291 stl=X off=12) assign (__ct_1.72)  <1504>;
                        (__link.1210 var=293 stl=X off=1) assign (__link.1207)  <1505>;
                        (k.1211 var=45 stl=X off=10) Ff32_to_i32_r_minMag (__link.1210 a.1208 __tmp.1209)  <1506>;
                        (k.1212 var=45) deassign (k.1211)  <1507>;
                    } #173 off=44
                    #178 off=45
                    (i32_to_f32.1215 var=298) const ()  <1513>;
                    (__link.1216 var=299) w32_jal_t21s_s2 (i32_to_f32.1215)  <1514>;
                    call {
                        (a.1217 var=297 stl=X off=11) assign (k.1212)  <1515>;
                        (__link.1218 var=299 stl=X off=1) assign (__link.1216)  <1516>;
                        (t.1219 var=46 stl=X off=10) Fi32_to_f32 (__link.1218 a.1217)  <1517>;
                        (t.1220 var=46) deassign (t.1219)  <1518>;
                    } #179 off=46
                    #184 off=47
                    (__fch__ZZ4expffE5ln2HI.699 var=138) load (__M_DMw.4 __ptr_ln2HI.22 _ZZ4expffE5ln2HI.18)  <758>;
                    (__link.1225 var=286) w32_jal_t21s_s2 (f32_mul.1186)  <1526>;
                    call {
                        (a.1226 var=283 stl=X off=11) assign (t.1220)  <1527>;
                        (b.1227 var=284 stl=X off=12) assign (__fch__ZZ4expffE5ln2HI.699)  <1528>;
                        (__link.1228 var=286 stl=X off=1) assign (__link.1225)  <1529>;
                        (__tmp.1229 var=139 stl=X off=10) Ff32_mul (__link.1228 a.1226 b.1227)  <1530>;
                        (__tmp.1230 var=139) deassign (__tmp.1229)  <1531>;
                    } #185 off=48
                    #190 off=49
                    (__link.1235 var=280) w32_jal_t21s_s2 (f32_sub.1176)  <1539>;
                    call {
                        (a.1236 var=277 stl=X off=11) assign (x.33)  <1540>;
                        (b.1237 var=278 stl=X off=12) assign (__tmp.1230)  <1541>;
                        (__link.1238 var=280 stl=X off=1) assign (__link.1235)  <1542>;
                        (hi.1239 var=35 stl=X off=10) Ff32_sub (__link.1238 a.1236 b.1237)  <1543>;
                        (hi.1240 var=35) deassign (hi.1239)  <1544>;
                    } #191 off=50
                    #196 off=51
                    (__fch__ZZ4expffE5ln2LO.705 var=144) load (__M_DMw.4 __ptr_ln2LO.24 _ZZ4expffE5ln2LO.19)  <764>;
                    (__link.1245 var=286) w32_jal_t21s_s2 (f32_mul.1186)  <1552>;
                    call {
                        (a.1246 var=283 stl=X off=11) assign (t.1220)  <1553>;
                        (b.1247 var=284 stl=X off=12) assign (__fch__ZZ4expffE5ln2LO.705)  <1554>;
                        (__link.1248 var=286 stl=X off=1) assign (__link.1245)  <1555>;
                        (lo.1249 var=37 stl=X off=10) Ff32_mul (__link.1248 a.1246 b.1247)  <1556>;
                        (lo.1250 var=37) deassign (lo.1249)  <1557>;
                    } #197 off=52
                    #390 off=53
                    (__trgt.1534 var=353) const ()  <2062>;
                    () void_j_t21s_s2 (__trgt.1534)  <2063>;
                } #58
                {
                    (hi.707 var=35) merge (hi.1182 hi.1240)  <766>;
                    (lo.708 var=37) merge (lo.680 lo.1250)  <767>;
                    (k.709 var=45) merge (__linex.1105 k.1212)  <768>;
                } #59
            } #55
            #202 off=57
            (__link.1255 var=280) w32_jal_t21s_s2 (f32_sub.1176)  <1565>;
            call {
                (a.1256 var=277 stl=X off=11) assign (hi.707)  <1566>;
                (b.1257 var=278 stl=X off=12) assign (lo.708)  <1567>;
                (__link.1258 var=280 stl=X off=1) assign (__link.1255)  <1568>;
                (x.1259 var=31 stl=X off=10) Ff32_sub (__link.1258 a.1256 b.1257)  <1569>;
                (x.1260 var=31) deassign (x.1259)  <1570>;
            } #203 off=58
        } #53
        {
            #62 off=25
            (__ct_830472192.712 var=147) const ()  <771>;
            (__tmp.1507 var=149) bool__ge___uint___uint (hx.78 __ct_830472192.712)  <1975>;
            (__trgt.1537 var=355) const ()  <2068>;
            () void_br_bool_t13s_s2 (__tmp.1507 __trgt.1537)  <2069>;
            (__either.1538 var=343) undefined ()  <2070>;
            if {
                {
                    () if_expr (__either.1538)  <805>;
                } #64
                {
                } #75 off=36
                {
                    #210 off=26
                    (__ct_1900671690.746 var=150) const ()  <806>;
                    (__link.1265 var=274) w32_jal_t21s_s2 (f32_add.1166)  <1578>;
                    call {
                        (a.1266 var=271 stl=X off=11) assign (__ct_1900671690.746)  <1579>;
                        (b.1267 var=272 stl=X off=12) assign (x.33)  <1580>;
                        (__link.1268 var=274 stl=X off=1) assign (__link.1265)  <1581>;
                        (__tmp.1269 var=152 stl=X off=10) Ff32_add (__link.1268 a.1266 b.1267)  <1582>;
                        (__tmp.1270 var=152) deassign (__tmp.1269)  <1583>;
                    } #211 off=27
                    #207 off=28
                    (__link.1153 var=259) w32_jal_t21s_s2 (f32_lt.1118)  <1397>;
                    call {
                        (a.1155 var=256 stl=X off=11) assign (__ct_1065353216.749)  <1399>;
                        (b.1156 var=257 stl=X off=12) assign (__tmp.1270)  <1400>;
                        (__link.1157 var=259 stl=X off=1) assign (__link.1153)  <1401>;
                        (__tmp.1158 var=260 stl=X off=10) Ff32_lt (__link.1157 a.1155 b.1156)  <1402>;
                        (__tmp.1159 var=260) deassign (__tmp.1158)  <1403>;
                    } #125 off=29
                    #126 off=30
                    (__tmp.1160 var=155) bool__ne___sint___sint (__tmp.1159 __ct_0.251)  <1404>;
                    (__trgt.1535 var=354) const ()  <2064>;
                    () void_br_bool_t13s_s2 (__tmp.1160 __trgt.1535)  <2065>;
                    (__either.1536 var=343) undefined ()  <2066>;
                    if {
                        {
                            () if_expr (__either.1536)  <843>;
                            () chess_rear_then ()  <2067>;
                        } #68
                        {
                            #71 off=32
                            (__R_SP.790 var=12 __sp.791 var=18) wr_res_reg (__tmp.151 __sp.40)  <851>;
                            () void_j_t21s_s2 (f32_add.1166)  <2018>;
                            call {
                                (a.1276 var=271 stl=X off=11) assign (__ct_1065353216.749)  <1592>;
                                (b.1277 var=272 stl=X off=12) assign (x.33)  <1593>;
                                (__la.1278 var=29 stl=X off=1) assign (__la.29)  <1594>;
                                (__rt.1279 var=30 stl=X off=10) Ff32_add (__la.1278 a.1276 b.1277)  <1595>;
                                (__rt.1280 var=30) deassign (__rt.1279)  <1596>;
                            } #217 off=33
                            #72 off=34 nxt=-2
                            (__rt.792 var=30 stl=X off=10) assign (__rt.1280)  <853>;
                            () out (__rt.792)  <854>;
                            () sink (__sp.791)  <860>;
                        } #69
                        {
                        } #73 off=31
                        {
                        } #74
                    } #67
                    #391 off=35
                    (__trgt.1539 var=356) const ()  <2071>;
                    () void_j_t21s_s2 (__trgt.1539)  <2072>;
                } #65
                {
                } #76
            } #63
            #392 off=37
            (__trgt.1542 var=358) const ()  <2076>;
            () void_j_t21s_s2 (__trgt.1542)  <2077>;
        } #61
        {
            (hi.898 var=35) merge (hi.707 hi.65)  <969>;
            (lo.900 var=37) merge (lo.708 lo.66)  <971>;
            (x.903 var=31) merge (x.1260 x.33)  <974>;
            (k.912 var=45) merge (k.709 __ct_0.251)  <983>;
        } #77
    } #51
    #235 off=59
    (__link.1285 var=286) w32_jal_t21s_s2 (f32_mul.1186)  <1604>;
    call {
        (a.1286 var=283 stl=X off=11) assign (x.903)  <1605>;
        (b.1287 var=284 stl=X off=12) assign (x.903)  <1606>;
        (__link.1288 var=286 stl=X off=1) assign (__link.1285)  <1607>;
        (t.1289 var=46 stl=X off=10) Ff32_mul (__link.1288 a.1286 b.1287)  <1608>;
        (t.1290 var=46) deassign (t.1289)  <1609>;
    } #236 off=60
    #241 off=61
    (__ct_858897228.928 var=173) const ()  <999>;
    (__link.1295 var=286) w32_jal_t21s_s2 (f32_mul.1186)  <1617>;
    call {
        (a.1296 var=283 stl=X off=11) assign (t.1290)  <1618>;
        (b.1297 var=284 stl=X off=12) assign (__ct_858897228.928)  <1619>;
        (__link.1298 var=286 stl=X off=1) assign (__link.1295)  <1620>;
        (__tmp.1299 var=175 stl=X off=10) Ff32_mul (__link.1298 a.1296 b.1297)  <1621>;
        (__tmp.1300 var=175) deassign (__tmp.1299)  <1622>;
    } #242 off=62
    #247 off=63
    (__ct_3051219470.926 var=171) const ()  <997>;
    (__link.1305 var=274) w32_jal_t21s_s2 (f32_add.1166)  <1630>;
    call {
        (a.1306 var=271 stl=X off=11) assign (__ct_3051219470.926)  <1631>;
        (b.1307 var=272 stl=X off=12) assign (__tmp.1300)  <1632>;
        (__link.1308 var=274 stl=X off=1) assign (__link.1305)  <1633>;
        (__tmp.1309 var=176 stl=X off=10) Ff32_add (__link.1308 a.1306 b.1307)  <1634>;
        (__tmp.1310 var=176) deassign (__tmp.1309)  <1635>;
    } #248 off=64
    #253 off=65
    (__link.1315 var=286) w32_jal_t21s_s2 (f32_mul.1186)  <1643>;
    call {
        (a.1316 var=283 stl=X off=11) assign (t.1290)  <1644>;
        (b.1317 var=284 stl=X off=12) assign (__tmp.1310)  <1645>;
        (__link.1318 var=286 stl=X off=1) assign (__link.1315)  <1646>;
        (__tmp.1319 var=177 stl=X off=10) Ff32_mul (__link.1318 a.1316 b.1317)  <1647>;
        (__tmp.1320 var=177) deassign (__tmp.1319)  <1648>;
    } #254 off=66
    #259 off=67
    (__ct_948613973.924 var=169) const ()  <995>;
    (__link.1325 var=274) w32_jal_t21s_s2 (f32_add.1166)  <1656>;
    call {
        (a.1326 var=271 stl=X off=11) assign (__ct_948613973.924)  <1657>;
        (b.1327 var=272 stl=X off=12) assign (__tmp.1320)  <1658>;
        (__link.1328 var=274 stl=X off=1) assign (__link.1325)  <1659>;
        (__tmp.1329 var=178 stl=X off=10) Ff32_add (__link.1328 a.1326 b.1327)  <1660>;
        (__tmp.1330 var=178) deassign (__tmp.1329)  <1661>;
    } #260 off=68
    #265 off=69
    (__link.1335 var=286) w32_jal_t21s_s2 (f32_mul.1186)  <1669>;
    call {
        (a.1336 var=283 stl=X off=11) assign (t.1290)  <1670>;
        (b.1337 var=284 stl=X off=12) assign (__tmp.1330)  <1671>;
        (__link.1338 var=286 stl=X off=1) assign (__link.1335)  <1672>;
        (__tmp.1339 var=179 stl=X off=10) Ff32_mul (__link.1338 a.1336 b.1337)  <1673>;
        (__tmp.1340 var=179) deassign (__tmp.1339)  <1674>;
    } #266 off=70
    #271 off=71
    (__ct_3140881249.922 var=167) const ()  <993>;
    (__link.1345 var=274) w32_jal_t21s_s2 (f32_add.1166)  <1682>;
    call {
        (a.1346 var=271 stl=X off=11) assign (__ct_3140881249.922)  <1683>;
        (b.1347 var=272 stl=X off=12) assign (__tmp.1340)  <1684>;
        (__link.1348 var=274 stl=X off=1) assign (__link.1345)  <1685>;
        (__tmp.1349 var=180 stl=X off=10) Ff32_add (__link.1348 a.1346 b.1347)  <1686>;
        (__tmp.1350 var=180) deassign (__tmp.1349)  <1687>;
    } #272 off=72
    #277 off=73
    (__link.1355 var=286) w32_jal_t21s_s2 (f32_mul.1186)  <1695>;
    call {
        (a.1356 var=283 stl=X off=11) assign (t.1290)  <1696>;
        (b.1357 var=284 stl=X off=12) assign (__tmp.1350)  <1697>;
        (__link.1358 var=286 stl=X off=1) assign (__link.1355)  <1698>;
        (__tmp.1359 var=181 stl=X off=10) Ff32_mul (__link.1358 a.1356 b.1357)  <1699>;
        (__tmp.1360 var=181) deassign (__tmp.1359)  <1700>;
    } #278 off=74
    #283 off=75
    (__ct_1042983595.920 var=165) const ()  <991>;
    (__link.1365 var=274) w32_jal_t21s_s2 (f32_add.1166)  <1708>;
    call {
        (a.1366 var=271 stl=X off=11) assign (__ct_1042983595.920)  <1709>;
        (b.1367 var=272 stl=X off=12) assign (__tmp.1360)  <1710>;
        (__link.1368 var=274 stl=X off=1) assign (__link.1365)  <1711>;
        (__tmp.1369 var=182 stl=X off=10) Ff32_add (__link.1368 a.1366 b.1367)  <1712>;
        (__tmp.1370 var=182) deassign (__tmp.1369)  <1713>;
    } #284 off=76
    #289 off=77
    (__link.1375 var=286) w32_jal_t21s_s2 (f32_mul.1186)  <1721>;
    call {
        (a.1376 var=283 stl=X off=11) assign (t.1290)  <1722>;
        (b.1377 var=284 stl=X off=12) assign (__tmp.1370)  <1723>;
        (__link.1378 var=286 stl=X off=1) assign (__link.1375)  <1724>;
        (__tmp.1379 var=183 stl=X off=10) Ff32_mul (__link.1378 a.1376 b.1377)  <1725>;
        (__tmp.1380 var=183) deassign (__tmp.1379)  <1726>;
    } #290 off=78
    #295 off=79
    (__link.1385 var=280) w32_jal_t21s_s2 (f32_sub.1176)  <1734>;
    call {
        (a.1386 var=277 stl=X off=11) assign (x.903)  <1735>;
        (b.1387 var=278 stl=X off=12) assign (__tmp.1380)  <1736>;
        (__link.1388 var=280 stl=X off=1) assign (__link.1385)  <1737>;
        (c.1389 var=47 stl=X off=10) Ff32_sub (__link.1388 a.1386 b.1387)  <1738>;
        (c.1390 var=47) deassign (c.1389)  <1739>;
    } #296 off=80
    #301 off=81
    (__link.1395 var=286) w32_jal_t21s_s2 (f32_mul.1186)  <1747>;
    call {
        (a.1396 var=283 stl=X off=11) assign (x.903)  <1748>;
        (b.1397 var=284 stl=X off=12) assign (c.1390)  <1749>;
        (__link.1398 var=286 stl=X off=1) assign (__link.1395)  <1750>;
        (__tmp.1399 var=190 stl=X off=10) Ff32_mul (__link.1398 a.1396 b.1397)  <1751>;
        (__tmp.1400 var=190) deassign (__tmp.1399)  <1752>;
    } #302 off=82
    #232 off=83
    (__tmp.942 var=187) bool__eq___sint___sint (k.912 __ct_0.251)  <1013>;
    (__ct_1073741824.977 var=191) const ()  <1049>;
    (f32_div.1414 var=323) const ()  <1772>;
    (__trgt.1545 var=360) const ()  <2081>;
    () void_br_bool_t13s_s2 (__tmp.942 __trgt.1545)  <2082>;
    (__either.1546 var=343) undefined ()  <2083>;
    if {
        {
            () if_expr (__either.1546)  <1045>;
            () chess_rear_then ()  <2084>;
        } #80
        {
            #311 off=99
            (__link.1405 var=280) w32_jal_t21s_s2 (f32_sub.1176)  <1760>;
            call {
                (a.1406 var=277 stl=X off=11) assign (c.1390)  <1761>;
                (b.1407 var=278 stl=X off=12) assign (__ct_1073741824.977)  <1762>;
                (__link.1408 var=280 stl=X off=1) assign (__link.1405)  <1763>;
                (__tmp.1409 var=193 stl=X off=10) Ff32_sub (__link.1408 a.1406 b.1407)  <1764>;
                (__tmp.1410 var=193) deassign (__tmp.1409)  <1765>;
            } #312 off=100
            #317 off=101
            (__link.1415 var=324) w32_jal_t21s_s2 (f32_div.1414)  <1773>;
            call {
                (a.1416 var=321 stl=X off=11) assign (__tmp.1400)  <1774>;
                (b.1417 var=322 stl=X off=12) assign (__tmp.1410)  <1775>;
                (__link.1418 var=324 stl=X off=1) assign (__link.1415)  <1776>;
                (__tmp.1419 var=194 stl=X off=10) Ff32_div (__link.1418 a.1416 b.1417)  <1777>;
                (__tmp.1420 var=194) deassign (__tmp.1419)  <1778>;
            } #318 off=102
            #323 off=103
            (__link.1425 var=280) w32_jal_t21s_s2 (f32_sub.1176)  <1786>;
            call {
                (a.1426 var=277 stl=X off=11) assign (__tmp.1420)  <1787>;
                (b.1427 var=278 stl=X off=12) assign (x.903)  <1788>;
                (__link.1428 var=280 stl=X off=1) assign (__link.1425)  <1789>;
                (__tmp.1429 var=195 stl=X off=10) Ff32_sub (__link.1428 a.1426 b.1427)  <1790>;
                (__tmp.1430 var=195) deassign (__tmp.1429)  <1791>;
            } #324 off=104
            #383 off=105
            (__R_SP.1510 var=12 __sp.1511 var=18) wr_res_reg (__tmp.151 __sp.40)  <2019>;
            () void_j_t21s_s2 (f32_sub.1176)  <2024>;
            call {
                (a.1436 var=277 stl=X off=11) assign (__ct_1065353216.749)  <1800>;
                (b.1437 var=278 stl=X off=12) assign (__tmp.1430)  <1801>;
                (__la.1438 var=29 stl=X off=1) assign (__la.29)  <1802>;
                (__rt.1439 var=30 stl=X off=10) Ff32_sub (__la.1438 a.1436 b.1437)  <1803>;
                (__rt.1440 var=30) deassign (__rt.1439)  <1804>;
            } #330 off=106
            #384 off=107 nxt=-2
            (__rt.1512 var=30 stl=X off=10) assign (__rt.1440)  <2021>;
            () out (__rt.1512)  <2022>;
            () sink (__sp.1511)  <2023>;
            (__rt.1517 var=30) never ()  <2032>;
        } #81
        {
            #342 off=84
            (__link.1445 var=280) w32_jal_t21s_s2 (f32_sub.1176)  <1812>;
            call {
                (a.1446 var=277 stl=X off=11) assign (__ct_1073741824.977)  <1813>;
                (b.1447 var=278 stl=X off=12) assign (c.1390)  <1814>;
                (__link.1448 var=280 stl=X off=1) assign (__link.1445)  <1815>;
                (__tmp.1449 var=202 stl=X off=10) Ff32_sub (__link.1448 a.1446 b.1447)  <1816>;
                (__tmp.1450 var=202) deassign (__tmp.1449)  <1817>;
            } #343 off=85
            #348 off=86
            (__link.1455 var=324) w32_jal_t21s_s2 (f32_div.1414)  <1825>;
            call {
                (a.1456 var=321 stl=X off=11) assign (__tmp.1400)  <1826>;
                (b.1457 var=322 stl=X off=12) assign (__tmp.1450)  <1827>;
                (__link.1458 var=324 stl=X off=1) assign (__link.1455)  <1828>;
                (__tmp.1459 var=203 stl=X off=10) Ff32_div (__link.1458 a.1456 b.1457)  <1829>;
                (__tmp.1460 var=203) deassign (__tmp.1459)  <1830>;
            } #349 off=87
            #354 off=88
            (__link.1465 var=280) w32_jal_t21s_s2 (f32_sub.1176)  <1838>;
            call {
                (a.1466 var=277 stl=X off=11) assign (lo.900)  <1839>;
                (b.1467 var=278 stl=X off=12) assign (__tmp.1460)  <1840>;
                (__link.1468 var=280 stl=X off=1) assign (__link.1465)  <1841>;
                (__tmp.1469 var=204 stl=X off=10) Ff32_sub (__link.1468 a.1466 b.1467)  <1842>;
                (__tmp.1470 var=204) deassign (__tmp.1469)  <1843>;
            } #355 off=89
            #360 off=90
            (__link.1475 var=280) w32_jal_t21s_s2 (f32_sub.1176)  <1851>;
            call {
                (a.1476 var=277 stl=X off=11) assign (__tmp.1470)  <1852>;
                (b.1477 var=278 stl=X off=12) assign (hi.898)  <1853>;
                (__link.1478 var=280 stl=X off=1) assign (__link.1475)  <1854>;
                (__tmp.1479 var=205 stl=X off=10) Ff32_sub (__link.1478 a.1476 b.1477)  <1855>;
                (__tmp.1480 var=205) deassign (__tmp.1479)  <1856>;
            } #361 off=91
            #366 off=92
            (__link.1485 var=280) w32_jal_t21s_s2 (f32_sub.1176)  <1864>;
            call {
                (a.1486 var=277 stl=X off=11) assign (__ct_1065353216.749)  <1865>;
                (b.1487 var=278 stl=X off=12) assign (__tmp.1480)  <1866>;
                (__link.1488 var=280 stl=X off=1) assign (__link.1485)  <1867>;
                (y.1489 var=48 stl=X off=10) Ff32_sub (__link.1488 a.1486 b.1487)  <1868>;
                (y.1490 var=48) deassign (y.1489)  <1869>;
            } #367 off=93
            #339 off=94
            (__ct_m125.993 var=207) const ()  <1065>;
            (__tmp.995 var=209) bool__ge___sint___sint (k.912 __ct_m125.993)  <1067>;
            (__ct_23.1030 var=212) const ()  <1103>;
            (__trgt.1543 var=359) const ()  <2078>;
            () void_br_bool_t13s_s2 (__tmp.995 __trgt.1543)  <2079>;
            (__either.1544 var=343) undefined ()  <2080>;
            if {
                {
                    () if_expr (__either.1544)  <1099>;
                } #85
                {
                    (__tmp.1032 var=214) __sint__ls___sint___sint (k.912 __ct_23.1030)  <1105>;
                    (__tmp.1034 var=216) __uint__pl___uint___uint (y.1490 __tmp.1032)  <1107>;
                } #86 off=98
                {
                    #387 off=95
                    (__ct_100.1040 var=221) const ()  <1113>;
                    (__tmp.1042 var=223) __sint__pl___sint___sint (k.912 __ct_100.1040)  <1115>;
                    (__tmp.1045 var=226) __sint__ls___sint___sint (__tmp.1042 __ct_23.1030)  <1118>;
                    (__tmp.1047 var=228) __uint__pl___uint___uint (y.1490 __tmp.1045)  <1120>;
                    (__ct_226492416.1050 var=231) const ()  <1123>;
                    (__R_SP.1513 var=12 __sp.1514 var=18) wr_res_reg (__tmp.151 __sp.40)  <2025>;
                    () void_j_t21s_s2 (f32_mul.1186)  <2030>;
                    call {
                        (a.1496 var=283 stl=X off=11) assign (__tmp.1047)  <1878>;
                        (b.1497 var=284 stl=X off=12) assign (__ct_226492416.1050)  <1879>;
                        (__la.1498 var=29 stl=X off=1) assign (__la.29)  <1880>;
                        (__rt.1499 var=30 stl=X off=10) Ff32_mul (__la.1498 a.1496 b.1497)  <1881>;
                        (__rt.1500 var=30) deassign (__rt.1499)  <1882>;
                    } #378 off=96
                    #388 off=97 nxt=-2
                    (__rt.1515 var=30 stl=X off=10) assign (__rt.1500)  <2027>;
                    () out (__rt.1515)  <2028>;
                    () sink (__sp.1514)  <2029>;
                    (__rt.1516 var=30) never ()  <2031>;
                } #87
                {
                    (__rt.1053 var=30) merge (__tmp.1034 __rt.1516)  <1126>;
                } #88
            } #84
        } #82
        {
            (__rt.1057 var=30) merge (__rt.1517 __rt.1053)  <1130>;
        } #89
    } #79
    #91 off=108 nxt=-2
    (__R_SP.1065 var=12 __sp.1066 var=18) wr_res_reg (__tmp.151 __sp.40)  <1138>;
    () void___rts_jr_w32 (__la.29)  <1139>;
    (__rt.1067 var=30 stl=X off=10) assign (__rt.1057)  <1140>;
    () out (__rt.1067)  <1141>;
    () sink (__sp.1066)  <1147>;
} #0
0 : 'src/math.c';
----------
0 : (0,872:0,0);
3 : (0,906:10,12);
4 : (0,906:4,12);
6 : (0,906:25,13);
8 : (0,907:8,13);
10 : (0,908:12,14);
12 : (0,908:12,14);
13 : (0,908:12,14);
14 : (0,907:8,17);
16 : (0,909:13,20);
17 : (0,909:8,20);
19 : (0,910:12,21);
20 : (0,910:23,21);
21 : (0,910:27,21);
23 : (0,910:29,22);
24 : (0,910:31,23);
27 : (0,910:12,25);
28 : (0,909:8,28);
31 : (0,911:8,31);
36 : (0,911:28,40);
37 : (0,911:8,44);
40 : (0,912:8,47);
45 : (0,912:28,56);
46 : (0,912:8,60);
48 : (0,906:4,65);
51 : (0,916:4,68);
53 : (0,916:24,69);
54 : (0,917:14,69);
55 : (0,917:8,69);
57 : (0,917:28,70);
58 : (0,919:15,75);
61 : (0,927:9,85);
62 : (0,927:15,85);
63 : (0,927:9,85);
65 : (0,927:30,86);
67 : (0,928:8,86);
69 : (0,928:23,87);
71 : (0,928:23,87);
72 : (0,928:23,87);
73 : (0,928:8,90);
75 : (0,930:11,95);
79 : (0,935:4,102);
81 : (0,935:16,103);
82 : (0,935:16,105);
84 : (0,937:4,106);
86 : (0,946:8,107);
87 : (0,941:8,116);
91 : (0,937:4,129);
95 : (0,907:13,13);
102 : (0,912:13,47);
103 : (0,912:13,47);
104 : (0,912:13,47);
107 : (0,916:10,68);
116 : (0,911:13,31);
117 : (0,911:13,31);
118 : (0,911:13,31);
125 : (0,928:17,86);
126 : (0,928:17,86);
131 : (0,908:20,14);
140 : (0,918:55,72);
143 : (0,918:18,70);
144 : (0,918:18,70);
160 : (0,920:23,75);
161 : (0,920:23,75);
166 : (0,920:25,75);
167 : (0,920:25,75);
172 : (0,920:15,75);
173 : (0,920:15,75);
178 : (0,921:15,76);
179 : (0,921:15,76);
184 : (0,922:22,77);
185 : (0,922:22,77);
190 : (0,922:19,77);
191 : (0,922:19,77);
196 : (0,923:18,78);
197 : (0,923:18,78);
202 : (0,916:24,84);
203 : (0,916:24,84);
207 : (0,928:17,86);
210 : (0,928:15,86);
211 : (0,928:15,86);
217 : (0,928:33,87);
232 : (0,935:8,102);
235 : (0,933:10,100);
236 : (0,933:10,100);
241 : (0,934:38,101);
242 : (0,934:38,101);
247 : (0,934:36,101);
248 : (0,934:36,101);
253 : (0,934:32,101);
254 : (0,934:32,101);
259 : (0,934:30,101);
260 : (0,934:30,101);
265 : (0,934:26,101);
266 : (0,934:26,101);
271 : (0,934:24,101);
272 : (0,934:24,101);
277 : (0,934:20,101);
278 : (0,934:20,101);
283 : (0,934:18,101);
284 : (0,934:18,101);
289 : (0,934:14,101);
290 : (0,934:14,101);
295 : (0,934:11,101);
296 : (0,934:11,101);
301 : (0,935:30,103);
302 : (0,935:30,103);
311 : (0,935:36,103);
312 : (0,935:36,103);
317 : (0,935:33,103);
318 : (0,935:33,103);
323 : (0,935:42,103);
324 : (0,935:42,103);
330 : (0,935:26,103);
339 : (0,937:9,106);
342 : (0,936:40,105);
343 : (0,936:40,105);
348 : (0,936:34,105);
349 : (0,936:34,105);
354 : (0,936:28,105);
355 : (0,936:28,105);
360 : (0,936:44,105);
361 : (0,936:44,105);
366 : (0,936:23,105);
367 : (0,936:23,105);
378 : (0,946:16,121);
383 : (0,937:4,129);
384 : (0,937:4,129);
387 : (0,937:4,129);
388 : (0,937:4,129);
----------
46 : (0,872:6,0);
47 : (0,872:6,0);
49 : (0,872:6,0);
50 : (0,872:6,0);
80 : (0,902:15,0);
82 : (0,902:13,10);
83 : (0,902:18,0);
85 : (0,902:18,10);
87 : (0,903:7,0);
89 : (0,903:7,11);
90 : (0,906:10,0);
124 : (0,906:4,12);
125 : (0,907:13,0);
159 : (0,907:8,13);
161 : (0,908:12,0);
162 : (0,908:12,0);
164 : (0,908:12,0);
165 : (0,908:12,14);
167 : (0,908:20,0);
242 : (0,909:13,20);
274 : (0,909:8,20);
275 : (0,910:25,0);
277 : (0,910:23,21);
309 : (0,910:27,21);
312 : (0,910:27,24);
317 : (0,910:12,25);
318 : (0,910:12,25);
319 : (0,910:27,0);
392 : (0,911:15,0);
426 : (0,911:8,31);
435 : (0,911:28,40);
436 : (0,911:28,40);
437 : (0,911:48,0);
510 : (0,912:15,0);
544 : (0,912:8,47);
553 : (0,912:28,56);
554 : (0,912:28,56);
555 : (0,912:45,0);
659 : (0,916:10,0);
693 : (0,916:4,68);
694 : (0,917:14,0);
696 : (0,917:14,69);
728 : (0,917:8,69);
731 : (0,918:25,70);
732 : (0,918:24,70);
733 : (0,918:24,70);
738 : (0,918:39,71);
739 : (0,918:39,71);
744 : (0,920:17,0);
750 : (0,920:30,75);
751 : (0,920:30,75);
758 : (0,922:28,77);
764 : (0,923:24,78);
766 : (0,917:8,81);
767 : (0,917:8,81);
768 : (0,917:8,81);
771 : (0,927:15,0);
805 : (0,927:9,85);
806 : (0,928:11,0);
809 : (0,928:18,0);
843 : (0,928:8,86);
851 : (0,928:23,87);
853 : (0,928:33,0);
969 : (0,916:4,99);
971 : (0,916:4,99);
974 : (0,916:4,99);
983 : (0,916:4,99);
991 : (0,934:16,0);
993 : (0,934:22,0);
995 : (0,934:28,0);
997 : (0,934:34,0);
999 : (0,934:39,0);
1013 : (0,935:8,102);
1045 : (0,935:4,102);
1049 : (0,935:37,0);
1065 : (0,937:12,0);
1067 : (0,937:9,106);
1099 : (0,937:4,106);
1103 : (0,940:21,0);
1105 : (0,940:19,110);
1107 : (0,940:16,110);
1113 : (0,945:21,0);
1115 : (0,945:20,119);
1118 : (0,945:25,119);
1120 : (0,945:16,119);
1123 : (0,946:17,0);
1126 : (0,937:4,125);
1130 : (0,935:4,128);
1138 : (0,937:4,129);
1139 : (0,937:4,129);
1140 : (0,937:4,0);
1258 : (0,918:55,72);
1259 : (0,918:55,72);
1300 : (0,907:13,13);
1314 : (0,912:13,0);
1315 : (0,912:13,47);
1317 : (0,912:13,47);
1318 : (0,912:13,47);
1319 : (0,912:13,47);
1320 : (0,912:13,47);
1321 : (0,912:13,47);
1322 : (0,912:13,47);
1329 : (0,916:10,68);
1382 : (0,911:13,31);
1384 : (0,911:13,31);
1385 : (0,911:13,31);
1386 : (0,911:13,31);
1387 : (0,911:13,31);
1388 : (0,911:13,31);
1389 : (0,911:13,31);
1397 : (0,928:17,86);
1399 : (0,928:17,86);
1400 : (0,928:17,86);
1401 : (0,928:17,86);
1402 : (0,928:17,86);
1403 : (0,928:17,86);
1404 : (0,928:17,86);
1449 : (0,908:20,0);
1451 : (0,908:20,14);
1452 : (0,908:20,14);
1453 : (0,908:20,14);
1454 : (0,908:20,14);
1455 : (0,908:20,14);
1462 : (0,918:18,0);
1463 : (0,918:18,70);
1464 : (0,918:18,70);
1465 : (0,918:18,70);
1466 : (0,918:18,70);
1467 : (0,918:18,70);
1468 : (0,918:18,70);
1475 : (0,920:23,0);
1476 : (0,920:23,75);
1477 : (0,920:23,75);
1478 : (0,920:23,75);
1479 : (0,920:23,75);
1480 : (0,920:23,75);
1481 : (0,920:23,75);
1489 : (0,920:25,75);
1490 : (0,920:25,75);
1491 : (0,920:25,75);
1492 : (0,920:25,75);
1493 : (0,920:25,75);
1494 : (0,920:25,75);
1501 : (0,920:15,0);
1502 : (0,920:15,75);
1503 : (0,920:15,75);
1504 : (0,920:15,75);
1505 : (0,920:15,75);
1506 : (0,920:15,75);
1507 : (0,920:15,75);
1513 : (0,921:15,0);
1514 : (0,921:15,76);
1515 : (0,921:15,76);
1516 : (0,921:15,76);
1517 : (0,921:15,76);
1518 : (0,921:15,76);
1526 : (0,922:22,77);
1527 : (0,922:22,77);
1528 : (0,922:22,77);
1529 : (0,922:22,77);
1530 : (0,922:22,77);
1531 : (0,922:22,77);
1539 : (0,922:19,77);
1540 : (0,922:19,77);
1541 : (0,922:19,77);
1542 : (0,922:19,77);
1543 : (0,922:19,77);
1544 : (0,922:19,77);
1552 : (0,923:18,78);
1553 : (0,923:18,78);
1554 : (0,923:18,78);
1555 : (0,923:18,78);
1556 : (0,923:18,78);
1557 : (0,923:18,78);
1565 : (0,925:16,82);
1566 : (0,925:16,82);
1567 : (0,925:16,82);
1568 : (0,925:16,82);
1569 : (0,925:16,82);
1570 : (0,925:16,82);
1578 : (0,928:15,86);
1579 : (0,928:15,86);
1580 : (0,928:15,86);
1581 : (0,928:15,86);
1582 : (0,928:15,86);
1583 : (0,928:15,86);
1592 : (0,928:33,87);
1593 : (0,928:33,87);
1594 : (0,928:33,87);
1595 : (0,928:33,87);
1596 : (0,928:33,87);
1604 : (0,933:10,100);
1605 : (0,933:10,100);
1606 : (0,933:10,100);
1607 : (0,933:10,100);
1608 : (0,933:10,100);
1609 : (0,933:10,100);
1617 : (0,934:38,101);
1618 : (0,934:38,101);
1619 : (0,934:38,101);
1620 : (0,934:38,101);
1621 : (0,934:38,101);
1622 : (0,934:38,101);
1630 : (0,934:36,101);
1631 : (0,934:36,101);
1632 : (0,934:36,101);
1633 : (0,934:36,101);
1634 : (0,934:36,101);
1635 : (0,934:36,101);
1643 : (0,934:32,101);
1644 : (0,934:32,101);
1645 : (0,934:32,101);
1646 : (0,934:32,101);
1647 : (0,934:32,101);
1648 : (0,934:32,101);
1656 : (0,934:30,101);
1657 : (0,934:30,101);
1658 : (0,934:30,101);
1659 : (0,934:30,101);
1660 : (0,934:30,101);
1661 : (0,934:30,101);
1669 : (0,934:26,101);
1670 : (0,934:26,101);
1671 : (0,934:26,101);
1672 : (0,934:26,101);
1673 : (0,934:26,101);
1674 : (0,934:26,101);
1682 : (0,934:24,101);
1683 : (0,934:24,101);
1684 : (0,934:24,101);
1685 : (0,934:24,101);
1686 : (0,934:24,101);
1687 : (0,934:24,101);
1695 : (0,934:20,101);
1696 : (0,934:20,101);
1697 : (0,934:20,101);
1698 : (0,934:20,101);
1699 : (0,934:20,101);
1700 : (0,934:20,101);
1708 : (0,934:18,101);
1709 : (0,934:18,101);
1710 : (0,934:18,101);
1711 : (0,934:18,101);
1712 : (0,934:18,101);
1713 : (0,934:18,101);
1721 : (0,934:14,101);
1722 : (0,934:14,101);
1723 : (0,934:14,101);
1724 : (0,934:14,101);
1725 : (0,934:14,101);
1726 : (0,934:14,101);
1734 : (0,934:11,101);
1735 : (0,934:11,101);
1736 : (0,934:11,101);
1737 : (0,934:11,101);
1738 : (0,934:11,101);
1739 : (0,934:11,101);
1747 : (0,935:30,103);
1748 : (0,935:30,103);
1749 : (0,935:30,103);
1750 : (0,935:30,103);
1751 : (0,935:30,103);
1752 : (0,935:30,103);
1760 : (0,935:36,103);
1761 : (0,935:36,103);
1762 : (0,935:36,103);
1763 : (0,935:36,103);
1764 : (0,935:36,103);
1765 : (0,935:36,103);
1772 : (0,935:33,0);
1773 : (0,935:33,103);
1774 : (0,935:33,103);
1775 : (0,935:33,103);
1776 : (0,935:33,103);
1777 : (0,935:33,103);
1778 : (0,935:33,103);
1786 : (0,935:42,103);
1787 : (0,935:42,103);
1788 : (0,935:42,103);
1789 : (0,935:42,103);
1790 : (0,935:42,103);
1791 : (0,935:42,103);
1800 : (0,935:26,103);
1801 : (0,935:26,103);
1802 : (0,935:26,103);
1803 : (0,935:26,103);
1804 : (0,935:26,103);
1812 : (0,936:40,105);
1813 : (0,936:40,105);
1814 : (0,936:40,105);
1815 : (0,936:40,105);
1816 : (0,936:40,105);
1817 : (0,936:40,105);
1825 : (0,936:34,105);
1826 : (0,936:34,105);
1827 : (0,936:34,105);
1828 : (0,936:34,105);
1829 : (0,936:34,105);
1830 : (0,936:34,105);
1838 : (0,936:28,105);
1839 : (0,936:28,105);
1840 : (0,936:28,105);
1841 : (0,936:28,105);
1842 : (0,936:28,105);
1843 : (0,936:28,105);
1851 : (0,936:44,105);
1852 : (0,936:44,105);
1853 : (0,936:44,105);
1854 : (0,936:44,105);
1855 : (0,936:44,105);
1856 : (0,936:44,105);
1864 : (0,936:23,105);
1865 : (0,936:23,105);
1866 : (0,936:23,105);
1867 : (0,936:23,105);
1868 : (0,936:23,105);
1869 : (0,936:23,105);
1878 : (0,946:16,121);
1879 : (0,946:16,121);
1880 : (0,946:16,121);
1881 : (0,946:16,121);
1882 : (0,946:16,121);
1974 : (0,906:10,12);
1975 : (0,927:15,85);
2017 : (0,908:20,14);
2018 : (0,928:33,87);
2019 : (0,937:4,129);
2021 : (0,937:4,0);
2024 : (0,935:26,103);
2025 : (0,937:4,129);
2027 : (0,937:4,0);
2030 : (0,946:16,121);
2034 : (0,907:8,13);
2038 : (0,910:27,21);
2043 : (0,909:8,20);
2047 : (0,911:8,31);
2051 : (0,912:8,47);
2055 : (0,906:4,12);
2060 : (0,917:8,69);
2065 : (0,928:8,86);
2069 : (0,927:9,85);
2074 : (0,916:4,68);
2079 : (0,937:4,106);
2082 : (0,935:4,102);

