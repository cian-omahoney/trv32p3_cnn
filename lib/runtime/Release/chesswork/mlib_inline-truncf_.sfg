
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 17:32:13 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/mlib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline float truncf(float)
Ftruncf : user_defined, called {
    fnm : "truncf" 'float truncf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
    frm : ( );
}
****
!! extern float ceilf(float)
Fceilf : user_defined, called {
    fnm : "ceilf" 'float ceilf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
}
!! extern float floorf(float)
Ffloorf : user_defined, called {
    fnm : "floorf" 'float floorf(float)';
    arg : ( w32:i w32:r w32:i );
    loc : ( X[1] X[10] X[11] );
}
!!  bool f64_lt(float64_t, float64_t)
Ff64_lt : user_defined, called {
    fnm : "f64_lt" 'bool f64_lt(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
!!  float64_t f32_to_f64(float32_t)
Ff32_to_f64 : user_defined, called {
    fnm : "f32_to_f64" 'float64_t f32_to_f64(float32_t)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : truncf typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   22 : x typ=w32 bnd=p tref=__ffloat__
   23 : __ct_0S0 typ=w32 val=0S0 bnd=m
   25 : __tmp typ=w32 bnd=m
   29 : __tmp typ=bool bnd=m
   32 : ceilf typ=t21s_s2 val=0r bnd=m
   34 : __tmp typ=w32 bnd=m
   37 : floorf typ=t21s_s2 val=0r bnd=m
   39 : __tmp typ=w32 bnd=m
   40 : __tmp typ=w32 bnd=m
   41 : __ct_0s0 typ=w32 val=0s0 bnd=m
   43 : __tmp typ=w32 bnd=m
   53 : a_low typ=w32 bnd=m tref=__uint__
   54 : a_high typ=w32 bnd=m tref=__uint__
   55 : b_low typ=w32 bnd=m tref=__uint__
   56 : b_high typ=w32 bnd=m tref=__uint__
   57 : f64_lt typ=t21s_s2 val=0r bnd=m
   58 : __link typ=w32 bnd=m
   59 : __tmp typ=w32 bnd=m
   60 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   68 : a typ=w32 bnd=m tref=float32_t__
   69 : f32_to_f64 typ=t21s_s2 val=0r bnd=m
   70 : __link typ=w32 bnd=m
   72 : __tmp typ=w32 bnd=m
   73 : __tmp typ=w32 bnd=m
   85 : __either typ=bool bnd=m
   86 : __trgt typ=t13s_s2 val=0j bnd=m
]
Ftruncf {
    #29 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x.23 var=22 stl=X off=11) inp ()  <34>;
    (x.24 var=22) deassign (x.23)  <35>;
    (__rd___sp.26 var=19) rd_res_reg (__R_SP.11 __sp.17)  <37>;
    (__ct_0S0.27 var=23) const ()  <38>;
    (__tmp.29 var=25) __Pvoid__pl___Pvoid___sint (__rd___sp.26 __ct_0S0.27)  <40>;
    (__R_SP.30 var=12 __sp.31 var=18) wr_res_reg (__tmp.29 __sp.17)  <41>;
    (f32_to_f64.110 var=69) const ()  <173>;
    (__link.111 var=70) w32_jal_t21s_s2 (f32_to_f64.110)  <174>;
    call {
        (a.112 var=68 stl=X off=12) assign (x.24)  <175>;
        (__link.113 var=70 stl=X off=1) assign (__link.111)  <176>;
        (__tmp.114 var=72 stl=X off=10 __tmp.115 var=73 stl=X off=11) Ff32_to_f64 (__link.113 a.112)  <177>;
        (__tmp.117 var=72) deassign (__tmp.114)  <179>;
        (__tmp.119 var=73) deassign (__tmp.115)  <181>;
    } #30 off=1
    #26 off=2
    (f64_lt.92 var=57) const ()  <133>;
    (__link.93 var=58) w32_jal_t21s_s2 (f64_lt.92)  <134>;
    (__ct_0.94 var=60) const ()  <135>;
    call {
        (a_low.95 var=53 stl=X off=11) assign (__tmp.117)  <136>;
        (a_high.96 var=54 stl=X off=12) assign (__tmp.119)  <137>;
        (b_low.97 var=55 stl=X off=13) assign (__ct_0.94)  <138>;
        (b_high.98 var=56 stl=X off=14) assign (__ct_0.94)  <139>;
        (__link.99 var=58 stl=X off=1) assign (__link.93)  <140>;
        (__tmp.100 var=59 stl=X off=10) Ff64_lt (__link.99 a_low.95 a_high.96 b_low.97 b_high.98)  <141>;
        (__tmp.101 var=59) deassign (__tmp.100)  <142>;
    } #20 off=3
    #21 off=4
    (__ct_0s0.65 var=41) const ()  <77>;
    (__tmp.102 var=29) bool__ne___sint___sint (__tmp.101 __ct_0.94)  <143>;
    (__trgt.140 var=86) const ()  <249>;
    () void_br_bool_t13s_s2 (__tmp.102 __trgt.140)  <250>;
    (__either.141 var=85) undefined ()  <251>;
    if {
        {
            () if_expr (__either.141)  <56>;
        } #5
        {
            #35 off=8
            (ceilf.48 var=32) const ()  <60>;
            (__rd___sp.130 var=19) rd_res_reg (__R_SP.11 __sp.31)  <233>;
            (__tmp.131 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.130 __ct_0s0.65)  <234>;
            (__R_SP.132 var=12 __sp.133 var=18) wr_res_reg (__tmp.131 __sp.31)  <235>;
            () void_j_t21s_s2 (ceilf.48)  <240>;
            call {
                (x.45 var=22 stl=X off=11) assign (x.24)  <57>;
                (__la.50 var=20 stl=X off=1) assign (__la.20)  <62>;
                (__tmp.51 var=34 stl=X off=10) Fceilf (__la.50 x.45)  <63>;
                (__tmp.52 var=34) deassign (__tmp.51)  <64>;
            } #8 off=9
            #36 off=10 nxt=-2
            (__tmp.134 var=40 stl=X off=10) assign (__tmp.52)  <237>;
            () out (__tmp.134)  <238>;
            () sink (__sp.133)  <239>;
        } #6
        {
            #39 off=5
            (floorf.57 var=37) const ()  <69>;
            (__rd___sp.135 var=19) rd_res_reg (__R_SP.11 __sp.31)  <241>;
            (__tmp.136 var=43) __Pvoid__pl___Pvoid___sint (__rd___sp.135 __ct_0s0.65)  <242>;
            (__R_SP.137 var=12 __sp.138 var=18) wr_res_reg (__tmp.136 __sp.31)  <243>;
            () void_j_t21s_s2 (floorf.57)  <248>;
            call {
                (x.54 var=22 stl=X off=11) assign (x.24)  <66>;
                (__la.59 var=20 stl=X off=1) assign (__la.20)  <71>;
                (__tmp.60 var=39 stl=X off=10) Ffloorf (__la.59 x.54)  <72>;
                (__tmp.61 var=39) deassign (__tmp.60)  <73>;
            } #11 off=6
            #40 off=7 nxt=-2
            (__tmp.139 var=40 stl=X off=10) assign (__tmp.61)  <245>;
            () out (__tmp.139)  <246>;
            () sink (__sp.138)  <247>;
        } #9
        {
        } #12
    } #4
} #0
0 : 'include/math.h';
----------
0 : (0,84:21,0);
4 : (0,84:48,1);
6 : (0,84:50,2);
8 : (0,84:50,2);
9 : (0,84:61,3);
11 : (0,84:61,3);
20 : (0,84:42,1);
21 : (0,84:42,1);
26 : (0,84:42,1);
29 : (0,84:42,1);
30 : (0,84:42,1);
35 : (0,84:33,5);
36 : (0,84:33,5);
39 : (0,84:33,5);
40 : (0,84:33,5);
----------
37 : (0,84:21,0);
38 : (0,84:21,0);
40 : (0,84:21,0);
41 : (0,84:21,0);
56 : (0,84:48,1);
57 : (0,84:56,0);
62 : (0,84:50,0);
63 : (0,84:50,2);
66 : (0,84:68,0);
71 : (0,84:61,0);
72 : (0,84:61,3);
77 : (0,84:33,0);
133 : (0,84:42,0);
134 : (0,84:42,1);
135 : (0,84:42,0);
136 : (0,84:42,1);
137 : (0,84:42,1);
138 : (0,84:42,1);
139 : (0,84:42,1);
140 : (0,84:42,1);
141 : (0,84:42,1);
142 : (0,84:42,1);
143 : (0,84:42,1);
173 : (0,84:42,0);
174 : (0,84:42,1);
175 : (0,84:42,1);
176 : (0,84:42,1);
177 : (0,84:42,1);
179 : (0,84:42,1);
181 : (0,84:42,1);
233 : (0,84:33,0);
234 : (0,84:33,0);
235 : (0,84:33,5);
237 : (0,84:48,0);
240 : (0,84:50,2);
241 : (0,84:33,0);
242 : (0,84:33,0);
243 : (0,84:33,5);
245 : (0,84:48,0);
248 : (0,84:61,3);
250 : (0,84:48,1);

