
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 16:36:32 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/mlib_inline.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern inline double frexp(double, int *)
Ffrexp : user_defined, called {
    fnm : "frexp" 'double frexp(double, int *)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
    frm : ( );
}
****
!! extern double ldexp(double, int)
Fldexp : user_defined, called {
    fnm : "ldexp" 'double ldexp(double, int)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
!!  bool f64_eq(float64_t, float64_t)
Ff64_eq : user_defined, called {
    fnm : "f64_eq" 'bool f64_eq(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
}
***/

[
    0 : frexp typ=u08 bnd=e stl=PMb
    5 : __M_DMw typ=w32 bnd=d stl=DMw
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __extDMb_w32 typ=w08 bnd=b stl=DMb
   20 : __rd___sp typ=w32 bnd=m
   21 : __la typ=w32 bnd=p tref=w32__
   23 : __rt_low typ=w32 bnd=m tref=__uint__
   24 : __rt_high typ=w32 bnd=m tref=__uint__
   26 : x_low typ=w32 bnd=m tref=__uint__
   27 : x_high typ=w32 bnd=m tref=__uint__
   28 : e typ=w32 bnd=p tref=__P__sint__
   29 : __ct_0S0 typ=w32 val=0S0 bnd=m
   31 : __tmp typ=w32 bnd=m
   34 : __tmp typ=bool bnd=m
   35 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   42 : __ct_2047 typ=w32 val=2047f bnd=m
   44 : __tmp typ=w32 bnd=m
   51 : __tmp typ=w32 bnd=m
   54 : ldexp typ=t21s_s2 val=0r bnd=m
   57 : __tmp typ=w32 bnd=m
   58 : __tmp typ=w32 bnd=m
   59 : __ct_0s0 typ=w32 val=0s0 bnd=m
   61 : __tmp typ=w32 bnd=m
   67 : __ct_m1022 typ=w32 val=-1022f bnd=m
   68 : __shv___tmp typ=w32 bnd=m
   74 : a_low typ=w32 bnd=m tref=__uint__
   75 : a_high typ=w32 bnd=m tref=__uint__
   76 : b_low typ=w32 bnd=m tref=__uint__
   77 : b_high typ=w32 bnd=m tref=__uint__
   78 : f64_eq typ=t21s_s2 val=0r bnd=m
   79 : __link typ=w32 bnd=m
   80 : __tmp typ=w32 bnd=m
   97 : __tmp typ=w32 bnd=m
  110 : __ct_20 typ=w32 val=20f bnd=m
  130 : __either typ=bool bnd=m
  131 : __trgt typ=t13s_s2 val=0j bnd=m
]
Ffrexp {
    #16 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__extDMb_w32.18 var=19) source ()  <29>;
    (__la.20 var=21 stl=X off=1) inp ()  <31>;
    (__la.21 var=21) deassign (__la.20)  <32>;
    (x_low.29 var=26 stl=X off=12) inp ()  <40>;
    (x_low.30 var=26) deassign (x_low.29)  <41>;
    (x_high.33 var=27 stl=X off=13) inp ()  <44>;
    (x_high.34 var=27) deassign (x_high.33)  <45>;
    (e.37 var=28 stl=X off=14) inp ()  <48>;
    (e.38 var=28) deassign (e.37)  <49>;
    (__rd___sp.40 var=20) rd_res_reg (__R_SP.11 __sp.17)  <51>;
    (__ct_0S0.41 var=29) const ()  <52>;
    (__tmp.43 var=31) __Pvoid__pl___Pvoid___sint (__rd___sp.40 __ct_0S0.41)  <54>;
    (__R_SP.44 var=12 __sp.45 var=18) wr_res_reg (__tmp.43 __sp.17)  <55>;
    (__ct_0.60 var=35) const ()  <72>;
    (f64_eq.146 var=78) const ()  <196>;
    (__link.147 var=79) w32_jal_t21s_s2 (f64_eq.146)  <197>;
    call {
        (a_low.149 var=74 stl=X off=11) assign (x_low.30)  <199>;
        (a_high.150 var=75 stl=X off=12) assign (x_high.34)  <200>;
        (b_low.151 var=76 stl=X off=13) assign (__ct_0.60)  <201>;
        (b_high.152 var=77 stl=X off=14) assign (__ct_0.60)  <202>;
        (__link.153 var=79 stl=X off=1) assign (__link.147)  <203>;
        (__tmp.154 var=80 stl=X off=10) Ff64_eq (__link.153 a_low.149 a_high.150 b_low.151 b_high.152)  <204>;
        (__tmp.155 var=80) deassign (__tmp.154)  <205>;
    } #17 off=1
    #18 off=2
    (__ct_0s0.103 var=59) const ()  <112>;
    (__tmp.156 var=34) bool__ne___sint___sint (__tmp.155 __ct_0.60)  <206>;
    (__trgt.216 var=131) const ()  <354>;
    () void_br_bool_t13s_s2 (__tmp.156 __trgt.216)  <355>;
    (__either.217 var=130) undefined ()  <356>;
    if {
        {
            () if_expr (__either.217)  <71>;
        } #5
        {
            (__M_DMw.62 var=5 __extDMb_w32.63 var=19) store (__ct_0.60 e.38 __extDMb_w32.18)  <74>;
        } #6 off=6
        {
            #59 off=3
            (__ct_2047.69 var=42) const ()  <80>;
            (__tmp.71 var=44) __sint__ad___sint___sint (__tmp.172 __ct_2047.69)  <82>;
            (__M_DMw.75 var=5 __extDMb_w32.76 var=19) store (__shv___tmp.136 e.38 __extDMb_w32.18)  <86>;
            (__tmp.84 var=51) __sint__mi___sint___sint (__ct_0.60 __shv___tmp.136)  <94>;
            (ldexp.88 var=54) const ()  <98>;
            (__ct_m1022.135 var=67) const ()  <173>;
            (__shv___tmp.136 var=68) __sint__pl___sint___sint (__tmp.71 __ct_m1022.135)  <175>;
            (__tmp.172 var=97) __sint__rs___sint___sint (x_high.34 __ct_20.189)  <227>;
            (__ct_20.189 var=110) const ()  <260>;
            (__rd___sp.207 var=20) rd_res_reg (__R_SP.11 __sp.45)  <340>;
            (__tmp.208 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.207 __ct_0s0.103)  <341>;
            (__R_SP.209 var=12 __sp.210 var=18) wr_res_reg (__tmp.208 __sp.45)  <342>;
            () void_j_t21s_s2 (ldexp.88)  <350>;
            call {
                (x_low.78 var=26 stl=X off=12) assign (x_low.30)  <88>;
                (x_high.80 var=27 stl=X off=13) assign (x_high.34)  <90>;
                (__tmp.85 var=51 stl=X off=14) assign (__tmp.84)  <95>;
                (__la.90 var=21 stl=X off=1) assign (__la.21)  <100>;
                (__tmp.92 var=57 stl=X off=10 __tmp.96 var=58 stl=X off=11) Fldexp (__la.90 x_low.78 x_high.80 __tmp.85)  <101>;
                (__tmp.93 var=57) deassign (__tmp.92)  <103>;
                (__tmp.97 var=58) deassign (__tmp.96)  <106>;
            } #9 off=4
            #60 off=5 nxt=-2
            (__rt_low.211 var=23 stl=X off=10) assign (__tmp.93)  <344>;
            () out (__rt_low.211)  <345>;
            (__rt_high.212 var=24 stl=X off=11) assign (__tmp.97)  <346>;
            () out (__rt_high.212)  <347>;
            () sink (__sp.210)  <348>;
            () sink (__extDMb_w32.76)  <349>;
            (__extDMb_w32.213 var=19) never ()  <351>;
        } #7
        {
            (__extDMb_w32.100 var=19) merge (__extDMb_w32.63 __extDMb_w32.213)  <109>;
        } #10
    } #4
    #12 off=7 nxt=-2
    (__rd___sp.102 var=20) rd_res_reg (__R_SP.11 __sp.45)  <111>;
    (__tmp.105 var=61) __Pvoid__pl___Pvoid___sint (__rd___sp.102 __ct_0s0.103)  <114>;
    (__R_SP.106 var=12 __sp.107 var=18) wr_res_reg (__tmp.105 __sp.45)  <115>;
    () void___rts_jr_w32 (__la.21)  <116>;
    (__rt_low.109 var=23 stl=X off=10) assign (x_low.30)  <118>;
    () out (__rt_low.109)  <119>;
    (__rt_high.111 var=24 stl=X off=11) assign (x_high.34)  <121>;
    () out (__rt_high.111)  <122>;
    () sink (__sp.107)  <130>;
    () sink (__extDMb_w32.100)  <131>;
} #0
0 : 'include/math.h';
----------
0 : (0,99:21,0);
4 : (0,101:4,1);
6 : (0,102:11,2);
7 : (0,103:9,4);
9 : (0,105:12,5);
12 : (0,107:4,9);
16 : (0,101:10,1);
17 : (0,101:10,1);
18 : (0,101:10,1);
59 : (0,107:4,9);
60 : (0,107:4,9);
----------
51 : (0,99:21,0);
52 : (0,99:21,0);
54 : (0,99:21,0);
55 : (0,99:21,0);
71 : (0,101:4,1);
72 : (0,102:13,0);
74 : (0,102:8,2);
80 : (0,104:41,0);
82 : (0,104:39,4);
86 : (0,104:8,4);
88 : (0,105:18,0);
90 : (0,105:18,0);
94 : (0,105:20,5);
95 : (0,105:20,0);
100 : (0,105:12,0);
101 : (0,105:12,5);
109 : (0,101:4,8);
111 : (0,107:4,0);
112 : (0,107:4,0);
114 : (0,107:4,0);
115 : (0,107:4,9);
116 : (0,107:4,9);
118 : (0,107:11,0);
121 : (0,107:11,0);
173 : (0,104:48,0);
175 : (0,104:48,0);
196 : (0,101:10,0);
197 : (0,101:10,1);
199 : (0,101:10,1);
200 : (0,101:10,1);
201 : (0,101:10,1);
202 : (0,101:10,1);
203 : (0,101:10,1);
204 : (0,101:10,1);
205 : (0,101:10,1);
206 : (0,101:10,1);
227 : (0,104:32,4);
260 : (0,104:32,0);
340 : (0,107:4,0);
341 : (0,107:4,0);
342 : (0,107:4,9);
344 : (0,107:11,0);
346 : (0,107:11,0);
350 : (0,105:12,5);
355 : (0,101:4,1);

