
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 16:46:13 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! static float kernel_cosf(float, float)
Fkernel_cosf : user_defined, called {
    fnm : "kernel_cosf" 'float kernel_cosf(float, float)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
    frm : ( );
}
****
!!  long f32_to_i32_r_minMag(float32_t, bool)
Ff32_to_i32_r_minMag : user_defined, called {
    fnm : "f32_to_i32_r_minMag" 'long f32_to_i32_r_minMag(float32_t, bool)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_mul(float32_t, float32_t)
Ff32_mul : user_defined, called {
    fnm : "f32_mul" 'float32_t f32_mul(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_add(float32_t, float32_t)
Ff32_add : user_defined, called {
    fnm : "f32_add" 'float32_t f32_add(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float32_t f32_sub(float32_t, float32_t)
Ff32_sub : user_defined, called {
    fnm : "f32_sub" 'float32_t f32_sub(float32_t, float32_t)';
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : kernel_cosf typ=u08 bnd=i stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__ffloat__
   22 : x typ=w32 bnd=p tref=__ffloat__
   23 : y typ=w32 bnd=p tref=__ffloat__
   24 : __ct_0S0 typ=w32 val=0S0 bnd=m
   26 : __tmp typ=w32 bnd=m
   27 : ix typ=w32 bnd=m tref=int32_t__
   28 : z typ=w32 bnd=m tref=__ffloat__
   29 : r typ=w32 bnd=m tref=__ffloat__
   30 : qx typ=w32 bnd=m tref=__ffloat__
   31 : hz typ=w32 bnd=m tref=__ffloat__
   32 : a typ=w32 bnd=m tref=__ffloat__
   34 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   37 : __ct_838860800 typ=t20s_rp12 val=204800f bnd=m
   39 : __tmp typ=bool bnd=m
   40 : __tmp typ=w32 bnd=m
   41 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   43 : __tmp typ=bool bnd=m
   44 : __ct_1065353216 typ=t20s_rp12 val=260096f bnd=m
   46 : __ct_0s0 typ=w32 val=0s0 bnd=m
   48 : __tmp typ=w32 bnd=m
   50 : __ct_1026206379 typ=w32 val=1026206379f bnd=m
   52 : __ct_3132492641 typ=w32 val=-1162474655f bnd=m
   54 : __ct_936381697 typ=w32 val=936381697f bnd=m
   56 : __ct_3029594748 typ=w32 val=-1265372548f bnd=m
   58 : __ct_823096566 typ=w32 val=823096566f bnd=m
   60 : __ct_2907166542 typ=w32 val=-1387800754f bnd=m
   62 : __tmp typ=w32 bnd=m
   63 : __tmp typ=w32 bnd=m
   64 : __tmp typ=w32 bnd=m
   65 : __tmp typ=w32 bnd=m
   66 : __tmp typ=w32 bnd=m
   67 : __tmp typ=w32 bnd=m
   68 : __tmp typ=w32 bnd=m
   69 : __tmp typ=w32 bnd=m
   70 : __tmp typ=w32 bnd=m
   71 : __tmp typ=w32 bnd=m
   73 : __ct_1050253722 typ=w32 val=1050253722f bnd=m
   75 : __tmp typ=bool bnd=m
   78 : __ct_1056964608 typ=t20s_rp12 val=258048f bnd=m
   80 : __tmp typ=w32 bnd=m
   81 : __tmp typ=w32 bnd=m
   82 : __tmp typ=w32 bnd=m
   83 : __tmp typ=w32 bnd=m
   84 : __tmp typ=w32 bnd=m
   86 : __ct_1061683200 typ=t20s_rp12 val=259200f bnd=m
   88 : __tmp typ=bool bnd=m
   89 : __ct_1049624576 typ=t20s_rp12 val=256256f bnd=m
   93 : __tmp typ=w32 bnd=m
  105 : __tmp typ=w32 bnd=m
  115 : __ct_m16777216 typ=t20s_rp12 val=-4096f bnd=m
  125 : a typ=w32 bnd=m tref=float32_t__
  126 : __tmp typ=w32 bnd=m
  127 : f32_to_i32_r_minMag typ=t21s_s2 val=0r bnd=m
  128 : __link typ=w32 bnd=m
  130 : __ct_1 typ=w32 val=1f bnd=m
  132 : a typ=w32 bnd=m tref=float32_t__
  133 : b typ=w32 bnd=m tref=float32_t__
  134 : f32_mul typ=t21s_s2 val=0r bnd=m
  135 : __link typ=w32 bnd=m
  139 : a typ=w32 bnd=m tref=float32_t__
  140 : b typ=w32 bnd=m tref=float32_t__
  141 : f32_add typ=t21s_s2 val=0r bnd=m
  142 : __link typ=w32 bnd=m
  157 : a typ=w32 bnd=m tref=float32_t__
  158 : b typ=w32 bnd=m tref=float32_t__
  159 : f32_sub typ=t21s_s2 val=0r bnd=m
  160 : __link typ=w32 bnd=m
  177 : __either typ=bool bnd=m
  178 : __trgt typ=t13s_s2 val=0j bnd=m
  179 : __trgt typ=t13s_s2 val=0j bnd=m
  180 : __trgt typ=t21s_s2 val=0j bnd=m
  181 : __trgt typ=t13s_s2 val=0j bnd=m
  182 : __trgt typ=t21s_s2 val=0j bnd=m
  183 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fkernel_cosf {
    #3 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x.23 var=22 stl=X off=11) inp ()  <34>;
    (x.24 var=22) deassign (x.23)  <35>;
    (y.26 var=23 stl=X off=12) inp ()  <37>;
    (y.27 var=23) deassign (y.26)  <38>;
    (__rd___sp.29 var=19) rd_res_reg (__R_SP.11 __sp.17)  <40>;
    (__ct_0S0.30 var=24) const ()  <41>;
    (__tmp.32 var=26) __Pvoid__pl___Pvoid___sint (__rd___sp.29 __ct_0S0.30)  <43>;
    (__R_SP.33 var=12 __sp.34 var=18) wr_res_reg (__tmp.32 __sp.17)  <44>;
    (__ct_2147483647.48 var=34) const ()  <59>;
    (ix.50 var=27) __sint__ad___sint___sint (x.24 __ct_2147483647.48)  <61>;
    (__ct_838860800.51 var=37) const ()  <62>;
    (__ct_1065353216.90 var=44) const ()  <103>;
    (__rd___sp.92 var=19) rd_res_reg (__R_SP.11 __sp.34)  <105>;
    (__ct_0s0.93 var=46) const ()  <106>;
    (__tmp.95 var=48) __Pvoid__pl___Pvoid___sint (__rd___sp.92 __ct_0s0.93)  <108>;
    (__tmp.512 var=39) bool__ge___sint___sint (ix.50 __ct_838860800.51)  <738>;
    (__trgt.523 var=179) const ()  <781>;
    () void_br_bool_t13s_s2 (__tmp.512 __trgt.523)  <782>;
    (__either.524 var=177) undefined ()  <783>;
    if {
        {
            () if_expr (__either.524)  <81>;
        } #5
        {
        } #16 off=7
        {
            #40 off=1
            (__ct_1.279 var=130) const ()  <389>;
            (f32_to_i32_r_minMag.280 var=127) const ()  <390>;
            (__link.281 var=128) w32_jal_t21s_s2 (f32_to_i32_r_minMag.280)  <391>;
            call {
                (a.282 var=125 stl=X off=11) assign (x.24)  <392>;
                (__tmp.283 var=126 stl=X off=12) assign (__ct_1.279)  <393>;
                (__link.284 var=128 stl=X off=1) assign (__link.281)  <394>;
                (__tmp.285 var=40 stl=X off=10) Ff32_to_i32_r_minMag (__link.284 a.282 __tmp.283)  <395>;
                (__tmp.286 var=40) deassign (__tmp.285)  <396>;
            } #41 off=2
            #37 off=3
            (__ct_0.71 var=41) const ()  <83>;
            (__tmp.73 var=43) bool__eq___sint___sint (__tmp.286 __ct_0.71)  <85>;
            (__trgt.521 var=178) const ()  <777>;
            () void_br_bool_t13s_s2 (__tmp.73 __trgt.521)  <778>;
            (__either.522 var=177) undefined ()  <779>;
            if {
                {
                    () if_expr (__either.522)  <102>;
                    () chess_rear_then ()  <780>;
                } #9
                {
                    (__R_SP.96 var=12 __sp.97 var=18) wr_res_reg (__tmp.95 __sp.34)  <109>;
                    () void___rts_jr_w32 (__la.20)  <110>;
                    (__rt.98 var=21 stl=X off=10) assign (__ct_1065353216.90)  <111>;
                    () out (__rt.98)  <112>;
                    () sink (__sp.97)  <118>;
                } #13 off=5 nxt=-2
                {
                } #14 off=4
                {
                } #15
            } #8
            #208 off=6
            (__trgt.525 var=180) const ()  <784>;
            () void_j_t21s_s2 (__trgt.525)  <785>;
        } #6
        {
        } #17
    } #4
    #63 off=8
    (f32_mul.290 var=134) const ()  <403>;
    (__link.291 var=135) w32_jal_t21s_s2 (f32_mul.290)  <404>;
    call {
        (a.292 var=132 stl=X off=11) assign (x.24)  <405>;
        (b.293 var=133 stl=X off=12) assign (x.24)  <406>;
        (__link.294 var=135 stl=X off=1) assign (__link.291)  <407>;
        (z.295 var=28 stl=X off=10) Ff32_mul (__link.294 a.292 b.293)  <408>;
        (z.296 var=28) deassign (z.295)  <409>;
    } #64 off=9
    #69 off=10
    (__ct_2907166542.158 var=60) const ()  <178>;
    (__link.301 var=135) w32_jal_t21s_s2 (f32_mul.290)  <417>;
    call {
        (a.302 var=132 stl=X off=11) assign (z.296)  <418>;
        (b.303 var=133 stl=X off=12) assign (__ct_2907166542.158)  <419>;
        (__link.304 var=135 stl=X off=1) assign (__link.301)  <420>;
        (__tmp.305 var=62 stl=X off=10) Ff32_mul (__link.304 a.302 b.303)  <421>;
        (__tmp.306 var=62) deassign (__tmp.305)  <422>;
    } #70 off=11
    #75 off=12
    (__ct_823096566.156 var=58) const ()  <176>;
    (f32_add.310 var=141) const ()  <429>;
    (__link.311 var=142) w32_jal_t21s_s2 (f32_add.310)  <430>;
    call {
        (a.312 var=139 stl=X off=11) assign (__ct_823096566.156)  <431>;
        (b.313 var=140 stl=X off=12) assign (__tmp.306)  <432>;
        (__link.314 var=142 stl=X off=1) assign (__link.311)  <433>;
        (__tmp.315 var=63 stl=X off=10) Ff32_add (__link.314 a.312 b.313)  <434>;
        (__tmp.316 var=63) deassign (__tmp.315)  <435>;
    } #76 off=13
    #81 off=14
    (__link.321 var=135) w32_jal_t21s_s2 (f32_mul.290)  <443>;
    call {
        (a.322 var=132 stl=X off=11) assign (z.296)  <444>;
        (b.323 var=133 stl=X off=12) assign (__tmp.316)  <445>;
        (__link.324 var=135 stl=X off=1) assign (__link.321)  <446>;
        (__tmp.325 var=64 stl=X off=10) Ff32_mul (__link.324 a.322 b.323)  <447>;
        (__tmp.326 var=64) deassign (__tmp.325)  <448>;
    } #82 off=15
    #87 off=16
    (__ct_3029594748.154 var=56) const ()  <174>;
    (__link.331 var=142) w32_jal_t21s_s2 (f32_add.310)  <456>;
    call {
        (a.332 var=139 stl=X off=11) assign (__ct_3029594748.154)  <457>;
        (b.333 var=140 stl=X off=12) assign (__tmp.326)  <458>;
        (__link.334 var=142 stl=X off=1) assign (__link.331)  <459>;
        (__tmp.335 var=65 stl=X off=10) Ff32_add (__link.334 a.332 b.333)  <460>;
        (__tmp.336 var=65) deassign (__tmp.335)  <461>;
    } #88 off=17
    #93 off=18
    (__link.341 var=135) w32_jal_t21s_s2 (f32_mul.290)  <469>;
    call {
        (a.342 var=132 stl=X off=11) assign (z.296)  <470>;
        (b.343 var=133 stl=X off=12) assign (__tmp.336)  <471>;
        (__link.344 var=135 stl=X off=1) assign (__link.341)  <472>;
        (__tmp.345 var=66 stl=X off=10) Ff32_mul (__link.344 a.342 b.343)  <473>;
        (__tmp.346 var=66) deassign (__tmp.345)  <474>;
    } #94 off=19
    #99 off=20
    (__ct_936381697.152 var=54) const ()  <172>;
    (__link.351 var=142) w32_jal_t21s_s2 (f32_add.310)  <482>;
    call {
        (a.352 var=139 stl=X off=11) assign (__ct_936381697.152)  <483>;
        (b.353 var=140 stl=X off=12) assign (__tmp.346)  <484>;
        (__link.354 var=142 stl=X off=1) assign (__link.351)  <485>;
        (__tmp.355 var=67 stl=X off=10) Ff32_add (__link.354 a.352 b.353)  <486>;
        (__tmp.356 var=67) deassign (__tmp.355)  <487>;
    } #100 off=21
    #105 off=22
    (__link.361 var=135) w32_jal_t21s_s2 (f32_mul.290)  <495>;
    call {
        (a.362 var=132 stl=X off=11) assign (z.296)  <496>;
        (b.363 var=133 stl=X off=12) assign (__tmp.356)  <497>;
        (__link.364 var=135 stl=X off=1) assign (__link.361)  <498>;
        (__tmp.365 var=68 stl=X off=10) Ff32_mul (__link.364 a.362 b.363)  <499>;
        (__tmp.366 var=68) deassign (__tmp.365)  <500>;
    } #106 off=23
    #111 off=24
    (__ct_3132492641.150 var=52) const ()  <170>;
    (__link.371 var=142) w32_jal_t21s_s2 (f32_add.310)  <508>;
    call {
        (a.372 var=139 stl=X off=11) assign (__ct_3132492641.150)  <509>;
        (b.373 var=140 stl=X off=12) assign (__tmp.366)  <510>;
        (__link.374 var=142 stl=X off=1) assign (__link.371)  <511>;
        (__tmp.375 var=69 stl=X off=10) Ff32_add (__link.374 a.372 b.373)  <512>;
        (__tmp.376 var=69) deassign (__tmp.375)  <513>;
    } #112 off=25
    #117 off=26
    (__link.381 var=135) w32_jal_t21s_s2 (f32_mul.290)  <521>;
    call {
        (a.382 var=132 stl=X off=11) assign (z.296)  <522>;
        (b.383 var=133 stl=X off=12) assign (__tmp.376)  <523>;
        (__link.384 var=135 stl=X off=1) assign (__link.381)  <524>;
        (__tmp.385 var=70 stl=X off=10) Ff32_mul (__link.384 a.382 b.383)  <525>;
        (__tmp.386 var=70) deassign (__tmp.385)  <526>;
    } #118 off=27
    #123 off=28
    (__ct_1026206379.148 var=50) const ()  <168>;
    (__link.391 var=142) w32_jal_t21s_s2 (f32_add.310)  <534>;
    call {
        (a.392 var=139 stl=X off=11) assign (__ct_1026206379.148)  <535>;
        (b.393 var=140 stl=X off=12) assign (__tmp.386)  <536>;
        (__link.394 var=142 stl=X off=1) assign (__link.391)  <537>;
        (__tmp.395 var=71 stl=X off=10) Ff32_add (__link.394 a.392 b.393)  <538>;
        (__tmp.396 var=71) deassign (__tmp.395)  <539>;
    } #124 off=29
    #129 off=30
    (__link.401 var=135) w32_jal_t21s_s2 (f32_mul.290)  <547>;
    call {
        (a.402 var=132 stl=X off=11) assign (z.296)  <548>;
        (b.403 var=133 stl=X off=12) assign (__tmp.396)  <549>;
        (__link.404 var=135 stl=X off=1) assign (__link.401)  <550>;
        (r.405 var=29 stl=X off=10) Ff32_mul (__link.404 a.402 b.403)  <551>;
        (r.406 var=29) deassign (r.405)  <552>;
    } #130 off=31
    #135 off=32
    (__ct_1056964608.192 var=78) const ()  <213>;
    (__link.411 var=135) w32_jal_t21s_s2 (f32_mul.290)  <560>;
    call {
        (a.412 var=132 stl=X off=11) assign (__ct_1056964608.192)  <561>;
        (b.413 var=133 stl=X off=12) assign (z.296)  <562>;
        (__link.414 var=135 stl=X off=1) assign (__link.411)  <563>;
        (__tmp.415 var=80 stl=X off=10) Ff32_mul (__link.414 a.412 b.413)  <564>;
        (__tmp.416 var=80) deassign (__tmp.415)  <565>;
    } #136 off=33
    #141 off=34
    (__link.421 var=135) w32_jal_t21s_s2 (f32_mul.290)  <573>;
    call {
        (a.422 var=132 stl=X off=11) assign (z.296)  <574>;
        (b.423 var=133 stl=X off=12) assign (r.406)  <575>;
        (__link.424 var=135 stl=X off=1) assign (__link.421)  <576>;
        (__tmp.425 var=81 stl=X off=10) Ff32_mul (__link.424 a.422 b.423)  <577>;
        (__tmp.426 var=81) deassign (__tmp.425)  <578>;
    } #142 off=35
    #147 off=36
    (__link.431 var=135) w32_jal_t21s_s2 (f32_mul.290)  <586>;
    call {
        (a.432 var=132 stl=X off=11) assign (x.24)  <587>;
        (b.433 var=133 stl=X off=12) assign (y.27)  <588>;
        (__link.434 var=135 stl=X off=1) assign (__link.431)  <589>;
        (__tmp.435 var=82 stl=X off=10) Ff32_mul (__link.434 a.432 b.433)  <590>;
        (__tmp.436 var=82) deassign (__tmp.435)  <591>;
    } #148 off=37
    #153 off=38
    (f32_sub.440 var=159) const ()  <598>;
    (__link.441 var=160) w32_jal_t21s_s2 (f32_sub.440)  <599>;
    call {
        (a.442 var=157 stl=X off=11) assign (__tmp.426)  <600>;
        (b.443 var=158 stl=X off=12) assign (__tmp.436)  <601>;
        (__link.444 var=160 stl=X off=1) assign (__link.441)  <602>;
        (__tmp.445 var=83 stl=X off=10) Ff32_sub (__link.444 a.442 b.443)  <603>;
        (__tmp.446 var=83) deassign (__tmp.445)  <604>;
    } #154 off=39
    #60 off=40
    (__ct_1050253722.171 var=73) const ()  <191>;
    (__tmp.173 var=75) bool__lt___sint___sint (ix.50 __ct_1050253722.171)  <193>;
    (__trgt.529 var=183) const ()  <791>;
    () void_br_bool_t13s_s2 (__tmp.173 __trgt.529)  <792>;
    (__either.530 var=177) undefined ()  <793>;
    if {
        {
            () if_expr (__either.530)  <210>;
        } #20
        {
            #161 off=53
            (__link.451 var=160) w32_jal_t21s_s2 (f32_sub.440)  <612>;
            call {
                (a.452 var=157 stl=X off=11) assign (__tmp.416)  <613>;
                (b.453 var=158 stl=X off=12) assign (__tmp.446)  <614>;
                (__link.454 var=160 stl=X off=1) assign (__link.451)  <615>;
                (__tmp.455 var=84 stl=X off=10) Ff32_sub (__link.454 a.452 b.453)  <616>;
                (__tmp.456 var=84) deassign (__tmp.455)  <617>;
            } #162 off=54
            #201 off=55
            (__R_SP.515 var=12 __sp.516 var=18) wr_res_reg (__tmp.95 __sp.34)  <765>;
            () void_j_t21s_s2 (f32_sub.440)  <770>;
            call {
                (a.462 var=157 stl=X off=11) assign (__ct_1065353216.90)  <626>;
                (b.463 var=158 stl=X off=12) assign (__tmp.456)  <627>;
                (__la.464 var=20 stl=X off=1) assign (__la.20)  <628>;
                (__rt.465 var=21 stl=X off=10) Ff32_sub (__la.464 a.462 b.463)  <629>;
                (__rt.466 var=21) deassign (__rt.465)  <630>;
            } #168 off=56
            #202 off=57 nxt=-2
            (__rt.517 var=21 stl=X off=10) assign (__rt.466)  <767>;
            () out (__rt.517)  <768>;
            () sink (__sp.516)  <769>;
        } #21
        {
            #34 off=41
            (__ct_1061683200.200 var=86) const ()  <221>;
            (__ct_1049624576.219 var=89) const ()  <241>;
            (__tmp.274 var=88) bool__lt___sint___sint (__ct_1061683200.200 ix.50)  <362>;
            (__trgt.526 var=181) const ()  <786>;
            () void_br_bool_t13s_s2 (__tmp.274 __trgt.526)  <787>;
            (__either.527 var=177) undefined ()  <788>;
            if {
                {
                    () if_expr (__either.527)  <240>;
                } #25
                {
                } #26 off=43
                {
                    (__tmp.223 var=93) __sint__pl___sint___sint (ix.50 __ct_m16777216.269)  <245>;
                    (__ct_m16777216.269 var=115) const ()  <336>;
                    (__trgt.528 var=182) const ()  <789>;
                    () void_j_t21s_s2 (__trgt.528)  <790>;
                } #27 off=42
                {
                    (qx.225 var=30) merge (__ct_1049624576.219 __tmp.223)  <247>;
                } #28
            } #24
            #177 off=44
            (__link.471 var=160) w32_jal_t21s_s2 (f32_sub.440)  <638>;
            call {
                (a.472 var=157 stl=X off=11) assign (__tmp.416)  <639>;
                (b.473 var=158 stl=X off=12) assign (qx.225)  <640>;
                (__link.474 var=160 stl=X off=1) assign (__link.471)  <641>;
                (hz.475 var=31 stl=X off=10) Ff32_sub (__link.474 a.472 b.473)  <642>;
                (hz.476 var=31) deassign (hz.475)  <643>;
            } #178 off=45
            #183 off=46
            (__link.481 var=160) w32_jal_t21s_s2 (f32_sub.440)  <651>;
            call {
                (a.482 var=157 stl=X off=11) assign (__ct_1065353216.90)  <652>;
                (b.483 var=158 stl=X off=12) assign (qx.225)  <653>;
                (__link.484 var=160 stl=X off=1) assign (__link.481)  <654>;
                (a.485 var=32 stl=X off=10) Ff32_sub (__link.484 a.482 b.483)  <655>;
                (a.486 var=32) deassign (a.485)  <656>;
            } #184 off=47
            #189 off=48
            (__link.491 var=160) w32_jal_t21s_s2 (f32_sub.440)  <664>;
            call {
                (a.492 var=157 stl=X off=11) assign (hz.476)  <665>;
                (b.493 var=158 stl=X off=12) assign (__tmp.446)  <666>;
                (__link.494 var=160 stl=X off=1) assign (__link.491)  <667>;
                (__tmp.495 var=105 stl=X off=10) Ff32_sub (__link.494 a.492 b.493)  <668>;
                (__tmp.496 var=105) deassign (__tmp.495)  <669>;
            } #190 off=49
            #205 off=50
            (__R_SP.518 var=12 __sp.519 var=18) wr_res_reg (__tmp.95 __sp.34)  <771>;
            () void_j_t21s_s2 (f32_sub.440)  <776>;
            call {
                (a.502 var=157 stl=X off=11) assign (a.486)  <678>;
                (b.503 var=158 stl=X off=12) assign (__tmp.496)  <679>;
                (__la.504 var=20 stl=X off=1) assign (__la.20)  <680>;
                (__rt.505 var=21 stl=X off=10) Ff32_sub (__la.504 a.502 b.503)  <681>;
                (__rt.506 var=21) deassign (__rt.505)  <682>;
            } #196 off=51
            #206 off=52 nxt=-2
            (__rt.520 var=21 stl=X off=10) assign (__rt.506)  <773>;
            () out (__rt.520)  <774>;
            () sink (__sp.519)  <775>;
        } #22
        {
        } #30
    } #19
} #0
0 : 'src/math.c';
----------
0 : (0,640:0,0);
3 : (0,655:9,7);
4 : (0,655:4,7);
6 : (0,655:22,8);
8 : (0,656:8,8);
13 : (0,656:24,9);
14 : (0,656:8,12);
16 : (0,655:4,17);
19 : (0,660:4,22);
21 : (0,670:8,23);
22 : (0,661:8,26);
24 : (0,663:8,26);
26 : (0,663:28,27);
27 : (0,665:15,30);
34 : (0,663:14,26);
37 : (0,656:19,8);
40 : (0,656:12,8);
41 : (0,656:12,8);
60 : (0,660:10,22);
63 : (0,658:10,20);
64 : (0,658:10,20);
69 : (0,659:40,21);
70 : (0,659:40,21);
75 : (0,659:38,21);
76 : (0,659:38,21);
81 : (0,659:34,21);
82 : (0,659:34,21);
87 : (0,659:32,21);
88 : (0,659:32,21);
93 : (0,659:28,21);
94 : (0,659:28,21);
99 : (0,659:26,21);
100 : (0,659:26,21);
105 : (0,659:22,21);
106 : (0,659:22,21);
111 : (0,659:20,21);
112 : (0,659:20,21);
117 : (0,659:16,21);
118 : (0,659:16,21);
123 : (0,659:14,21);
124 : (0,659:14,21);
129 : (0,659:10,21);
130 : (0,659:10,21);
135 : (0,661:32,23);
136 : (0,661:32,23);
141 : (0,661:39,23);
142 : (0,661:39,23);
147 : (0,661:45,23);
148 : (0,661:45,23);
153 : (0,661:42,23);
154 : (0,661:42,23);
161 : (0,661:35,23);
162 : (0,661:35,23);
168 : (0,661:19,23);
177 : (0,668:25,35);
178 : (0,668:25,35);
183 : (0,669:16,36);
184 : (0,669:16,36);
189 : (0,670:23,37);
190 : (0,670:23,37);
196 : (0,670:17,37);
201 : (0,660:4,42);
202 : (0,660:4,42);
205 : (0,660:4,42);
206 : (0,660:4,42);
----------
40 : (0,640:13,0);
41 : (0,640:13,0);
43 : (0,640:13,0);
44 : (0,640:13,0);
59 : (0,654:10,0);
61 : (0,654:7,6);
62 : (0,655:10,0);
81 : (0,655:4,7);
83 : (0,656:21,0);
85 : (0,656:19,8);
102 : (0,656:8,8);
103 : (0,656:31,0);
105 : (0,656:24,0);
106 : (0,656:24,0);
108 : (0,656:24,0);
109 : (0,656:24,9);
110 : (0,656:24,9);
111 : (0,656:31,0);
168 : (0,659:12,0);
170 : (0,659:18,0);
172 : (0,659:24,0);
174 : (0,659:30,0);
176 : (0,659:36,0);
178 : (0,659:41,0);
191 : (0,660:12,0);
193 : (0,660:10,22);
210 : (0,660:4,22);
213 : (0,661:22,0);
221 : (0,663:16,0);
240 : (0,663:8,26);
241 : (0,664:17,0);
245 : (0,666:17,30);
247 : (0,663:8,34);
336 : (0,666:17,0);
362 : (0,663:14,26);
389 : (0,656:12,0);
390 : (0,656:12,0);
391 : (0,656:12,8);
392 : (0,656:12,8);
393 : (0,656:12,8);
394 : (0,656:12,8);
395 : (0,656:12,8);
396 : (0,656:12,8);
403 : (0,658:10,0);
404 : (0,658:10,20);
405 : (0,658:10,20);
406 : (0,658:10,20);
407 : (0,658:10,20);
408 : (0,658:10,20);
409 : (0,658:10,20);
417 : (0,659:40,21);
418 : (0,659:40,21);
419 : (0,659:40,21);
420 : (0,659:40,21);
421 : (0,659:40,21);
422 : (0,659:40,21);
429 : (0,659:38,0);
430 : (0,659:38,21);
431 : (0,659:38,21);
432 : (0,659:38,21);
433 : (0,659:38,21);
434 : (0,659:38,21);
435 : (0,659:38,21);
443 : (0,659:34,21);
444 : (0,659:34,21);
445 : (0,659:34,21);
446 : (0,659:34,21);
447 : (0,659:34,21);
448 : (0,659:34,21);
456 : (0,659:32,21);
457 : (0,659:32,21);
458 : (0,659:32,21);
459 : (0,659:32,21);
460 : (0,659:32,21);
461 : (0,659:32,21);
469 : (0,659:28,21);
470 : (0,659:28,21);
471 : (0,659:28,21);
472 : (0,659:28,21);
473 : (0,659:28,21);
474 : (0,659:28,21);
482 : (0,659:26,21);
483 : (0,659:26,21);
484 : (0,659:26,21);
485 : (0,659:26,21);
486 : (0,659:26,21);
487 : (0,659:26,21);
495 : (0,659:22,21);
496 : (0,659:22,21);
497 : (0,659:22,21);
498 : (0,659:22,21);
499 : (0,659:22,21);
500 : (0,659:22,21);
508 : (0,659:20,21);
509 : (0,659:20,21);
510 : (0,659:20,21);
511 : (0,659:20,21);
512 : (0,659:20,21);
513 : (0,659:20,21);
521 : (0,659:16,21);
522 : (0,659:16,21);
523 : (0,659:16,21);
524 : (0,659:16,21);
525 : (0,659:16,21);
526 : (0,659:16,21);
534 : (0,659:14,21);
535 : (0,659:14,21);
536 : (0,659:14,21);
537 : (0,659:14,21);
538 : (0,659:14,21);
539 : (0,659:14,21);
547 : (0,659:10,21);
548 : (0,659:10,21);
549 : (0,659:10,21);
550 : (0,659:10,21);
551 : (0,659:10,21);
552 : (0,659:10,21);
560 : (0,661:32,23);
561 : (0,661:32,23);
562 : (0,661:32,23);
563 : (0,661:32,23);
564 : (0,661:32,23);
565 : (0,661:32,23);
573 : (0,661:39,23);
574 : (0,661:39,23);
575 : (0,661:39,23);
576 : (0,661:39,23);
577 : (0,661:39,23);
578 : (0,661:39,23);
586 : (0,661:45,23);
587 : (0,661:45,23);
588 : (0,661:45,23);
589 : (0,661:45,23);
590 : (0,661:45,23);
591 : (0,661:45,23);
598 : (0,661:42,0);
599 : (0,661:42,23);
600 : (0,661:42,23);
601 : (0,661:42,23);
602 : (0,661:42,23);
603 : (0,661:42,23);
604 : (0,661:42,23);
612 : (0,661:35,23);
613 : (0,661:35,23);
614 : (0,661:35,23);
615 : (0,661:35,23);
616 : (0,661:35,23);
617 : (0,661:35,23);
626 : (0,661:19,23);
627 : (0,661:19,23);
628 : (0,661:19,23);
629 : (0,661:19,23);
630 : (0,661:19,23);
638 : (0,668:25,35);
639 : (0,668:25,35);
640 : (0,668:25,35);
641 : (0,668:25,35);
642 : (0,668:25,35);
643 : (0,668:25,35);
651 : (0,669:16,36);
652 : (0,669:16,36);
653 : (0,669:16,36);
654 : (0,669:16,36);
655 : (0,669:16,36);
656 : (0,669:16,36);
664 : (0,670:23,37);
665 : (0,670:23,37);
666 : (0,670:23,37);
667 : (0,670:23,37);
668 : (0,670:23,37);
669 : (0,670:23,37);
678 : (0,670:17,37);
679 : (0,670:17,37);
680 : (0,670:17,37);
681 : (0,670:17,37);
682 : (0,670:17,37);
738 : (0,655:9,7);
765 : (0,660:4,42);
767 : (0,660:4,0);
770 : (0,661:19,23);
771 : (0,660:4,42);
773 : (0,660:4,0);
776 : (0,670:17,37);
778 : (0,656:8,8);
782 : (0,655:4,7);
787 : (0,663:8,26);
792 : (0,660:4,22);

