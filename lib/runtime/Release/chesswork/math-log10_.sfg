
// File generated by noodle version U-2022.12#33f3808fcb#221128, Wed Feb 21 13:34:48 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern double log10(double)
Flog10 : user_defined, called {
    fnm : "log10" 'double log10(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
!! extern double log(double)
Flog : user_defined, called {
    fnm : "log" 'double log(double)';
    arg : ( w32:i w32:r w32:r w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    llv : 0 0 0 0 0 ;
}
!!  float64_t f32_to_f64(float32_t)
Ff32_to_f64 : user_defined, called {
    fnm : "f32_to_f64" 'float64_t f32_to_f64(float32_t)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
!!  float64_t f64_sub(float64_t, float64_t)
Ff64_sub : user_defined, called {
    fnm : "f64_sub" 'float64_t f64_sub(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_div(float64_t, float64_t)
Ff64_div : user_defined, called {
    fnm : "f64_div" 'float64_t f64_div(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_mul(float64_t, float64_t)
Ff64_mul : user_defined, called {
    fnm : "f64_mul" 'float64_t f64_mul(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t i32_to_f64(int)
Fi32_to_f64 : user_defined, called {
    fnm : "i32_to_f64" 'float64_t i32_to_f64(int)';
    arg : ( w32:i w32:r w32:r w32:i );
    loc : ( X[1] X[10] X[11] X[12] );
}
***/

[
    0 : log10 typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   22 : __rt_low typ=w32 bnd=m tref=__uint__
   23 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : x_low typ=w32 bnd=m tref=__uint__
   26 : x_high typ=w32 bnd=m tref=__uint__
   27 : __ct_0S0 typ=w32 val=0S0 bnd=m
   29 : __tmp typ=w32 bnd=m
   30 : hx typ=w32 bnd=m tref=int32_t__
   32 : k typ=w32 bnd=m tref=int32_t__
   51 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   53 : __ct_1048576 typ=t20s_rp12 val=256f bnd=m
   55 : __tmp typ=bool bnd=m
   56 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   58 : __tmp typ=w32 bnd=m
   60 : __tmp typ=w32 bnd=m
   63 : __tmp typ=bool bnd=m
   64 : __ct_4286578688 typ=t20s_rp12 val=-2048f bnd=m
   67 : __ct_0s0 typ=w32 val=0s0 bnd=m
   69 : __tmp typ=w32 bnd=m
   72 : __tmp typ=bool bnd=m
   91 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
   93 : __tmp typ=bool bnd=m
   95 : __ct_20 typ=w32 val=20f bnd=m
   97 : __tmp typ=w32 bnd=m
   98 : __ct_1023 typ=w32 val=1023f bnd=m
  100 : __tmp typ=w32 bnd=m
  103 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  105 : __tmp typ=w32 bnd=m
  106 : __ct_31 typ=w32 val=31f bnd=m
  108 : __tmp typ=w32 bnd=m
  110 : __ct_1048575 typ=w32 val=1048575f bnd=m
  112 : __tmp typ=w32 bnd=m
  115 : __tmp typ=w32 bnd=m
  118 : __tmp typ=w32 bnd=m
  120 : __tmp typ=w32 bnd=m
  139 : log typ=t21s_s2 val=0r bnd=m
  140 : __link typ=w32 bnd=m
  142 : __tmp typ=w32 bnd=m
  143 : __tmp typ=w32 bnd=m
  157 : __ct_m54 typ=w32 val=-54f bnd=m
  158 : __ct_m1023 typ=w32 val=-1023f bnd=m
  241 : a typ=w32 bnd=m tref=float32_t__
  242 : f32_to_f64 typ=t21s_s2 val=0r bnd=m
  245 : __tmp typ=w32 bnd=m
  246 : __tmp typ=w32 bnd=m
  251 : a_low typ=w32 bnd=m tref=__uint__
  252 : a_high typ=w32 bnd=m tref=__uint__
  253 : b_low typ=w32 bnd=m tref=__uint__
  254 : b_high typ=w32 bnd=m tref=__uint__
  255 : f64_sub typ=t21s_s2 val=0r bnd=m
  256 : __link typ=w32 bnd=m
  258 : __tmp typ=w32 bnd=m
  259 : __tmp typ=w32 bnd=m
  264 : a_low typ=w32 bnd=m tref=__uint__
  265 : a_high typ=w32 bnd=m tref=__uint__
  266 : b_low typ=w32 bnd=m tref=__uint__
  267 : b_high typ=w32 bnd=m tref=__uint__
  268 : f64_div typ=t21s_s2 val=0r bnd=m
  271 : __tmp typ=w32 bnd=m
  272 : __tmp typ=w32 bnd=m
  277 : a_low typ=w32 bnd=m tref=__uint__
  278 : a_high typ=w32 bnd=m tref=__uint__
  279 : b_low typ=w32 bnd=m tref=__uint__
  280 : b_high typ=w32 bnd=m tref=__uint__
  281 : f64_mul typ=t21s_s2 val=0r bnd=m
  282 : __link typ=w32 bnd=m
  284 : __tmp typ=w32 bnd=m
  285 : __tmp typ=w32 bnd=m
  293 : a_low typ=w32 bnd=m tref=__uint__
  294 : a_high typ=w32 bnd=m tref=__uint__
  295 : b_low typ=w32 bnd=m tref=__uint__
  296 : b_high typ=w32 bnd=m tref=__uint__
  297 : f64_add typ=t21s_s2 val=0r bnd=m
  298 : __link typ=w32 bnd=m
  300 : __tmp typ=w32 bnd=m
  301 : __tmp typ=w32 bnd=m
  304 : a typ=w32 bnd=m tref=__sint__
  305 : i32_to_f64 typ=t21s_s2 val=0r bnd=m
  306 : __link typ=w32 bnd=m
  308 : __tmp typ=w32 bnd=m
  309 : __tmp typ=w32 bnd=m
  331 : hx typ=w32 bnd=m
  332 : __ct_1129316352 typ=t20s_rp12 val=275712f bnd=m
  333 : __ct_301017910 typ=w32 val=301017910f bnd=m
  334 : __ct_1029308147 typ=w32 val=1029308147f bnd=m
  335 : __ct_354870542 typ=w32 val=354870542f bnd=m
  336 : __ct_1071369083 typ=w32 val=1071369083f bnd=m
  337 : __ct_1352622080 typ=t20s_rp12 val=330230f bnd=m
  338 : __ct_1070810131 typ=w32 val=1070810131f bnd=m
  347 : __either typ=bool bnd=m
  348 : __trgt typ=t13s_s2 val=0j bnd=m
  349 : __trgt typ=t13s_s2 val=0j bnd=m
  350 : __trgt typ=t13s_s2 val=0j bnd=m
  351 : __trgt typ=t21s_s2 val=0j bnd=m
  352 : __trgt typ=t13s_s2 val=0j bnd=m
]
Flog10 {
    #128 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x_low.28 var=25 stl=X off=12) inp ()  <39>;
    (x_low.29 var=25) deassign (x_low.28)  <40>;
    (x_high.32 var=26 stl=X off=13) inp ()  <43>;
    (x_high.33 var=26) deassign (x_high.32)  <44>;
    (__rd___sp.36 var=19) rd_res_reg (__R_SP.11 __sp.17)  <47>;
    (__ct_0S0.37 var=27) const ()  <48>;
    (__tmp.39 var=29) __Pvoid__pl___Pvoid___sint (__rd___sp.36 __ct_0S0.37)  <50>;
    (__R_SP.40 var=12 __sp.41 var=18) wr_res_reg (__tmp.39 __sp.17)  <51>;
    (__ct_0.69 var=51) const ()  <80>;
    (__ct_1048576.71 var=53) const ()  <82>;
    (__rd___sp.131 var=19) rd_res_reg (__R_SP.11 __sp.41)  <144>;
    (__ct_0s0.132 var=67) const ()  <145>;
    (__tmp.134 var=69) __Pvoid__pl___Pvoid___sint (__rd___sp.131 __ct_0s0.132)  <147>;
    (f64_mul.640 var=281) const ()  <833>;
    (__tmp.841 var=55) bool__ge___sint___sint (x_high.33 __ct_1048576.71)  <1161>;
    (__trgt.856 var=350) const ()  <1220>;
    () void_br_bool_t13s_s2 (__tmp.841 __trgt.856)  <1221>;
    (__either.857 var=347) undefined ()  <1222>;
    if {
        {
            () if_expr (__either.857)  <107>;
        } #5
        {
        } #26 off=16
        {
            #7 off=1
            (__ct_2147483647.96 var=56) const ()  <108>;
            (__tmp.98 var=58) __sint__ad___sint___sint (x_high.33 __ct_2147483647.96)  <110>;
            (__tmp.100 var=60) __uint__or___uint___uint (__tmp.98 x_low.29)  <112>;
            (__tmp.103 var=63) bool__eq___uint___uint (__tmp.100 __ct_0.69)  <115>;
            (__trgt.852 var=348) const ()  <1212>;
            () void_br_bool_t13s_s2 (__tmp.103 __trgt.852)  <1213>;
            (__either.853 var=347) undefined ()  <1214>;
            if {
                {
                    () if_expr (__either.853)  <138>;
                    () chess_rear_then ()  <1215>;
                } #9
                {
                    #12 off=3
                    (__ct_4286578688.128 var=64) const ()  <141>;
                    (__R_SP.135 var=12 __sp.136 var=18) wr_res_reg (__tmp.134 __sp.41)  <148>;
                    (f32_to_f64.580 var=242) const ()  <767>;
                    () void_j_t21s_s2 (f32_to_f64.580)  <1194>;
                    call {
                        (a.582 var=241 stl=X off=12) assign (__ct_4286578688.128)  <769>;
                        (__la.583 var=20 stl=X off=1) assign (__la.20)  <770>;
                        (__tmp.584 var=245 stl=X off=10 __tmp.585 var=246 stl=X off=11) Ff32_to_f64 (__la.583 a.582)  <771>;
                        (__tmp.587 var=245) deassign (__tmp.584)  <773>;
                        (__tmp.589 var=246) deassign (__tmp.585)  <775>;
                    } #138 off=4
                    #13 off=5 nxt=-2
                    (__rt_low.138 var=22 stl=X off=10) assign (__tmp.587)  <151>;
                    () out (__rt_low.138)  <152>;
                    (__rt_high.140 var=23 stl=X off=11) assign (__tmp.589)  <154>;
                    () out (__rt_high.140)  <155>;
                    () sink (__sp.136)  <163>;
                } #10
                {
                } #14 off=2
                {
                } #15
            } #8
            #16 off=6
            (__tmp.189 var=72) bool__lt___sint___sint (x_high.33 __ct_0.69)  <210>;
            (__trgt.854 var=349) const ()  <1216>;
            () void_br_bool_t13s_s2 (__tmp.189 __trgt.854)  <1217>;
            (__either.855 var=347) undefined ()  <1218>;
            if {
                {
                    () if_expr (__either.855)  <233>;
                    () chess_rear_then ()  <1219>;
                } #18
                {
                    #145 off=8
                    (f64_sub.598 var=255) const ()  <787>;
                    (__link.599 var=256) w32_jal_t21s_s2 (f64_sub.598)  <788>;
                    call {
                        (a_low.600 var=251 stl=X off=12) assign (x_low.29)  <789>;
                        (a_high.601 var=252 stl=X off=13) assign (x_high.33)  <790>;
                        (b_low.602 var=253 stl=X off=14) assign (x_low.29)  <791>;
                        (b_high.603 var=254 stl=X off=15) assign (x_high.33)  <792>;
                        (__link.604 var=256 stl=X off=1) assign (__link.599)  <793>;
                        (__tmp.605 var=258 stl=X off=10 __tmp.606 var=259 stl=X off=11) Ff64_sub (__link.604 a_low.600 a_high.601 b_low.602 b_high.603)  <794>;
                        (__tmp.608 var=258) deassign (__tmp.605)  <796>;
                        (__tmp.610 var=259) deassign (__tmp.606)  <798>;
                    } #146 off=9
                    #21 off=10
                    (__R_SP.220 var=12 __sp.221 var=18) wr_res_reg (__tmp.134 __sp.41)  <242>;
                    (f64_div.619 var=268) const ()  <810>;
                    () void_j_t21s_s2 (f64_div.619)  <1195>;
                    call {
                        (a_low.621 var=264 stl=X off=12) assign (__tmp.608)  <812>;
                        (a_high.622 var=265 stl=X off=13) assign (__tmp.610)  <813>;
                        (b_low.623 var=266 stl=X off=14) assign (__ct_0.69)  <814>;
                        (b_high.624 var=267 stl=X off=15) assign (__ct_0.69)  <815>;
                        (__la.625 var=20 stl=X off=1) assign (__la.20)  <816>;
                        (__tmp.626 var=271 stl=X off=10 __tmp.627 var=272 stl=X off=11) Ff64_div (__la.625 a_low.621 a_high.622 b_low.623 b_high.624)  <817>;
                        (__tmp.629 var=271) deassign (__tmp.626)  <819>;
                        (__tmp.631 var=272) deassign (__tmp.627)  <821>;
                    } #152 off=11
                    #22 off=12 nxt=-2
                    (__rt_low.223 var=22 stl=X off=10) assign (__tmp.629)  <245>;
                    () out (__rt_low.223)  <246>;
                    (__rt_high.225 var=23 stl=X off=11) assign (__tmp.631)  <248>;
                    () out (__rt_high.225)  <249>;
                    () sink (__sp.221)  <257>;
                } #19
                {
                } #23 off=7
                {
                } #24
            } #17
            #164 off=13
            (__link.641 var=282) w32_jal_t21s_s2 (f64_mul.640)  <834>;
            (__ct_1129316352.824 var=332) const ()  <1075>;
            call {
                (a_low.642 var=277 stl=X off=12) assign (x_low.29)  <835>;
                (a_high.643 var=278 stl=X off=13) assign (x_high.33)  <836>;
                (b_low.644 var=279 stl=X off=14) assign (__ct_0.69)  <837>;
                (b_high.645 var=280 stl=X off=15) assign (__ct_1129316352.824)  <838>;
                (__link.646 var=282 stl=X off=1) assign (__link.641)  <839>;
                (__tmp.647 var=284 stl=X off=10 __tmp.648 var=285 stl=X off=11) Ff64_mul (__link.646 a_low.642 a_high.643 b_low.644 b_high.645)  <840>;
                (__tmp.650 var=284) deassign (__tmp.647)  <842>;
                (__tmp.652 var=285) deassign (__tmp.648)  <844>;
            } #165 off=14
            #265 off=15
            (__ct_m54.452 var=157) const ()  <536>;
            (__trgt.858 var=351) const ()  <1223>;
            () void_j_t21s_s2 (__trgt.858)  <1224>;
        } #6
        {
            (hx.290 var=331) merge (x_high.33 __tmp.652)  <320>;
            (k.293 var=32) merge (__ct_0.69 __ct_m54.452)  <323>;
            (a_low.827 var=293) merge (x_low.29 __tmp.650)  <1079>;
        } #27
    } #4
    #28 off=17
    (__ct_2146435072.305 var=91) const ()  <335>;
    (__tmp.307 var=93) bool__ge___sint___sint (hx.290 __ct_2146435072.305)  <337>;
    (f64_add.666 var=297) const ()  <864>;
    (__trgt.859 var=352) const ()  <1225>;
    () void_br_bool_t13s_s2 (__tmp.307 __trgt.859)  <1226>;
    (__either.860 var=347) undefined ()  <1227>;
    if {
        {
            () if_expr (__either.860)  <360>;
        } #30
        {
            #259 off=33
            (__R_SP.844 var=12 __sp.845 var=18) wr_res_reg (__tmp.134 __sp.41)  <1196>;
            () void_j_t21s_s2 (f64_add.666)  <1203>;
            call {
                (a_low.668 var=293 stl=X off=12) assign (a_low.827)  <866>;
                (a_high.669 var=294 stl=X off=13) assign (hx.290)  <867>;
                (b_low.670 var=295 stl=X off=14) assign (a_low.827)  <868>;
                (b_high.671 var=296 stl=X off=15) assign (hx.290)  <869>;
                (__la.672 var=20 stl=X off=1) assign (__la.20)  <870>;
                (__tmp.673 var=300 stl=X off=10 __tmp.674 var=301 stl=X off=11) Ff64_add (__la.672 a_low.668 a_high.669 b_low.670 b_high.671)  <871>;
                (__tmp.676 var=300) deassign (__tmp.673)  <873>;
                (__tmp.678 var=301) deassign (__tmp.674)  <875>;
            } #177 off=34
            #260 off=35 nxt=-2
            (__rt_low.846 var=22 stl=X off=10) assign (__tmp.676)  <1198>;
            () out (__rt_low.846)  <1199>;
            (__rt_high.847 var=23 stl=X off=11) assign (__tmp.678)  <1200>;
            () out (__rt_high.847)  <1201>;
            () sink (__sp.845)  <1202>;
        } #31
        {
            #202 off=18
            (__ct_20.331 var=95) const ()  <362>;
            (__tmp.333 var=97) __sint__rs___sint___sint (hx.290 __ct_20.331)  <364>;
            (__ct_1023.334 var=98) const ()  <365>;
            (__tmp.336 var=100) __sint__pl___sint___sint (__tmp.333 __ct_m1023.459)  <367>;
            (k.337 var=32) __sint__pl___sint___sint (k.293 __tmp.336)  <368>;
            (__ct_2147483648.339 var=103) const ()  <370>;
            (__tmp.341 var=105) __uint__ad___uint___uint (k.337 __ct_2147483648.339)  <372>;
            (__ct_31.342 var=106) const ()  <373>;
            (__tmp.344 var=108) __uint__rs___uint___sint (__tmp.341 __ct_31.342)  <375>;
            (__ct_1048575.346 var=110) const ()  <377>;
            (__tmp.348 var=112) __sint__ad___sint___sint (hx.290 __ct_1048575.346)  <379>;
            (__tmp.351 var=115) __sint__mi___sint___sint (__ct_1023.334 __tmp.344)  <382>;
            (__tmp.354 var=118) __sint__ls___sint___sint (__tmp.351 __ct_20.331)  <385>;
            (hx.355 var=30) __sint__or___sint___sint (__tmp.348 __tmp.354)  <386>;
            (__tmp.356 var=120) __sint__pl___sint___sint (k.337 __tmp.344)  <387>;
            (__ct_m1023.459 var=158) const ()  <544>;
            (i32_to_f64.682 var=305) const ()  <882>;
            (__link.683 var=306) w32_jal_t21s_s2 (i32_to_f64.682)  <883>;
            call {
                (a.684 var=304 stl=X off=12) assign (__tmp.356)  <884>;
                (__link.685 var=306 stl=X off=1) assign (__link.683)  <885>;
                (__tmp.686 var=308 stl=X off=10 __tmp.687 var=309 stl=X off=11) Fi32_to_f64 (__link.685 a.684)  <886>;
                (__tmp.689 var=308) deassign (__tmp.686)  <888>;
                (__tmp.691 var=309) deassign (__tmp.687)  <890>;
            } #203 off=19
            #223 off=20
            (__link.724 var=282) w32_jal_t21s_s2 (f64_mul.640)  <937>;
            (__ct_301017910.831 var=333) const ()  <1083>;
            (__ct_1029308147.832 var=334) const ()  <1085>;
            call {
                (a_low.725 var=277 stl=X off=12) assign (__tmp.689)  <938>;
                (a_high.726 var=278 stl=X off=13) assign (__tmp.691)  <939>;
                (b_low.727 var=279 stl=X off=14) assign (__ct_301017910.831)  <940>;
                (b_high.728 var=280 stl=X off=15) assign (__ct_1029308147.832)  <941>;
                (__link.729 var=282 stl=X off=1) assign (__link.724)  <942>;
                (__tmp.730 var=284 stl=X off=10 __tmp.731 var=285 stl=X off=11) Ff64_mul (__link.729 a_low.725 a_high.726 b_low.727 b_high.728)  <943>;
                (__tmp.733 var=284) deassign (__tmp.730)  <945>;
                (__tmp.735 var=285) deassign (__tmp.731)  <947>;
            } #224 off=21
            #199 off=22
            (log.384 var=139) const ()  <415>;
            (__link.385 var=140) w32_jal_t21s_s2 (log.384)  <416>;
            call {
                (x_low.379 var=25 stl=X off=12) assign (a_low.827)  <410>;
                (x_high.381 var=26 stl=X off=13) assign (hx.355)  <412>;
                (__link.386 var=140 stl=X off=1) assign (__link.385)  <417>;
                (__tmp.388 var=142 stl=X off=10 __tmp.392 var=143 stl=X off=11) Flog (__link.386 x_low.379 x_high.381)  <418>;
                (__tmp.389 var=142) deassign (__tmp.388)  <420>;
                (__tmp.393 var=143) deassign (__tmp.392)  <423>;
            } #34 off=23
            #235 off=24
            (__link.745 var=282) w32_jal_t21s_s2 (f64_mul.640)  <960>;
            (__ct_354870542.833 var=335) const ()  <1087>;
            (__ct_1071369083.834 var=336) const ()  <1089>;
            call {
                (a_low.746 var=277 stl=X off=12) assign (__ct_354870542.833)  <961>;
                (a_high.747 var=278 stl=X off=13) assign (__ct_1071369083.834)  <962>;
                (b_low.748 var=279 stl=X off=14) assign (__tmp.389)  <963>;
                (b_high.749 var=280 stl=X off=15) assign (__tmp.393)  <964>;
                (__link.750 var=282 stl=X off=1) assign (__link.745)  <965>;
                (__tmp.751 var=284 stl=X off=10 __tmp.752 var=285 stl=X off=11) Ff64_mul (__link.750 a_low.746 a_high.747 b_low.748 b_high.749)  <966>;
                (__tmp.754 var=284) deassign (__tmp.751)  <968>;
                (__tmp.756 var=285) deassign (__tmp.752)  <970>;
            } #236 off=25
            #241 off=26
            (__link.766 var=298) w32_jal_t21s_s2 (f64_add.666)  <983>;
            call {
                (a_low.767 var=293 stl=X off=12) assign (__tmp.733)  <984>;
                (a_high.768 var=294 stl=X off=13) assign (__tmp.735)  <985>;
                (b_low.769 var=295 stl=X off=14) assign (__tmp.754)  <986>;
                (b_high.770 var=296 stl=X off=15) assign (__tmp.756)  <987>;
                (__link.771 var=298 stl=X off=1) assign (__link.766)  <988>;
                (__tmp.772 var=300 stl=X off=10 __tmp.773 var=301 stl=X off=11) Ff64_add (__link.771 a_low.767 a_high.768 b_low.769 b_high.770)  <989>;
                (__tmp.775 var=300) deassign (__tmp.772)  <991>;
                (__tmp.777 var=301) deassign (__tmp.773)  <993>;
            } #242 off=27
            #247 off=28
            (__link.787 var=282) w32_jal_t21s_s2 (f64_mul.640)  <1006>;
            (__ct_1352622080.835 var=337) const ()  <1091>;
            (__ct_1070810131.836 var=338) const ()  <1093>;
            call {
                (a_low.788 var=277 stl=X off=12) assign (__tmp.689)  <1007>;
                (a_high.789 var=278 stl=X off=13) assign (__tmp.691)  <1008>;
                (b_low.790 var=279 stl=X off=14) assign (__ct_1352622080.835)  <1009>;
                (b_high.791 var=280 stl=X off=15) assign (__ct_1070810131.836)  <1010>;
                (__link.792 var=282 stl=X off=1) assign (__link.787)  <1011>;
                (__tmp.793 var=284 stl=X off=10 __tmp.794 var=285 stl=X off=11) Ff64_mul (__link.792 a_low.788 a_high.789 b_low.790 b_high.791)  <1012>;
                (__tmp.796 var=284) deassign (__tmp.793)  <1014>;
                (__tmp.798 var=285) deassign (__tmp.794)  <1016>;
            } #248 off=29
            #263 off=30
            (__R_SP.848 var=12 __sp.849 var=18) wr_res_reg (__tmp.134 __sp.41)  <1204>;
            () void_j_t21s_s2 (f64_add.666)  <1211>;
            call {
                (a_low.809 var=293 stl=X off=12) assign (__tmp.775)  <1030>;
                (a_high.810 var=294 stl=X off=13) assign (__tmp.777)  <1031>;
                (b_low.811 var=295 stl=X off=14) assign (__tmp.796)  <1032>;
                (b_high.812 var=296 stl=X off=15) assign (__tmp.798)  <1033>;
                (__la.813 var=20 stl=X off=1) assign (__la.20)  <1034>;
                (__tmp.814 var=300 stl=X off=10 __tmp.815 var=301 stl=X off=11) Ff64_add (__la.813 a_low.809 a_high.810 b_low.811 b_high.812)  <1035>;
                (__tmp.817 var=300) deassign (__tmp.814)  <1037>;
                (__tmp.819 var=301) deassign (__tmp.815)  <1039>;
            } #254 off=31
            #264 off=32 nxt=-2
            (__rt_low.850 var=22 stl=X off=10) assign (__tmp.817)  <1206>;
            () out (__rt_low.850)  <1207>;
            (__rt_high.851 var=23 stl=X off=11) assign (__tmp.819)  <1208>;
            () out (__rt_high.851)  <1209>;
            () sink (__sp.849)  <1210>;
        } #32
        {
        } #36
    } #29
} #0
0 : 'src/math.c';
----------
0 : (0,1194:0,0);
4 : (0,1210:4,8);
6 : (0,1210:25,9);
7 : (0,1211:32,9);
8 : (0,1211:8,9);
10 : (0,1212:19,10);
12 : (0,1212:12,18);
13 : (0,1212:12,18);
14 : (0,1211:8,22);
16 : (0,1213:14,25);
17 : (0,1213:8,25);
19 : (0,1213:18,26);
21 : (0,1213:18,26);
22 : (0,1213:18,26);
23 : (0,1213:8,29);
26 : (0,1210:4,37);
28 : (0,1217:11,40);
29 : (0,1217:4,40);
31 : (0,1217:26,41);
32 : (0,1217:26,43);
34 : (0,1223:30,58);
128 : (0,1210:11,8);
138 : (0,1212:32,18);
145 : (0,1213:27,26);
146 : (0,1213:27,26);
152 : (0,1213:30,26);
164 : (0,1214:19,33);
165 : (0,1214:19,33);
177 : (0,1217:34,41);
199 : (0,1223:30,58);
202 : (0,1221:9,47);
203 : (0,1221:9,47);
223 : (0,1223:10,58);
224 : (0,1223:10,58);
235 : (0,1223:29,58);
236 : (0,1223:29,58);
241 : (0,1223:21,58);
242 : (0,1223:21,58);
247 : (0,1224:15,59);
248 : (0,1224:15,59);
254 : (0,1224:13,59);
259 : (0,1224:4,63);
260 : (0,1224:4,63);
263 : (0,1224:4,63);
264 : (0,1224:4,63);
----------
47 : (0,1194:7,0);
48 : (0,1194:7,0);
50 : (0,1194:7,0);
51 : (0,1194:7,0);
80 : (0,1209:6,0);
82 : (0,1210:13,0);
107 : (0,1210:4,8);
108 : (0,1211:17,0);
110 : (0,1211:16,9);
112 : (0,1211:28,9);
115 : (0,1211:32,9);
138 : (0,1211:8,9);
141 : (0,1212:19,0);
144 : (0,1212:12,0);
145 : (0,1212:12,0);
147 : (0,1212:12,0);
148 : (0,1212:12,18);
151 : (0,1212:32,0);
154 : (0,1212:32,0);
210 : (0,1213:14,25);
233 : (0,1213:8,25);
242 : (0,1213:18,26);
245 : (0,1213:30,0);
248 : (0,1213:30,0);
320 : (0,1210:4,39);
323 : (0,1210:4,39);
335 : (0,1217:14,0);
337 : (0,1217:11,40);
360 : (0,1217:4,40);
362 : (0,1218:14,0);
364 : (0,1218:12,44);
365 : (0,1218:18,0);
367 : (0,1218:17,44);
368 : (0,1218:6,44);
370 : (0,1219:23,0);
372 : (0,1219:22,45);
373 : (0,1219:36,0);
375 : (0,1219:34,45);
377 : (0,1220:13,0);
379 : (0,1220:12,46);
382 : (0,1220:32,46);
385 : (0,1220:35,46);
386 : (0,1220:24,46);
387 : (0,1221:19,47);
410 : (0,1223:34,0);
412 : (0,1223:34,0);
416 : (0,1223:30,58);
417 : (0,1223:30,0);
418 : (0,1223:30,58);
536 : (0,1214:10,0);
544 : (0,1218:17,0);
767 : (0,1212:32,0);
769 : (0,1212:32,18);
770 : (0,1212:32,18);
771 : (0,1212:32,18);
773 : (0,1212:32,18);
775 : (0,1212:32,18);
787 : (0,1213:27,0);
788 : (0,1213:27,26);
789 : (0,1213:27,26);
790 : (0,1213:27,26);
791 : (0,1213:27,26);
792 : (0,1213:27,26);
793 : (0,1213:27,26);
794 : (0,1213:27,26);
796 : (0,1213:27,26);
798 : (0,1213:27,26);
810 : (0,1213:30,0);
812 : (0,1213:30,26);
813 : (0,1213:30,26);
814 : (0,1213:30,26);
815 : (0,1213:30,26);
816 : (0,1213:30,26);
817 : (0,1213:30,26);
819 : (0,1213:30,26);
821 : (0,1213:30,26);
833 : (0,1214:19,0);
834 : (0,1214:19,33);
835 : (0,1214:19,33);
836 : (0,1214:19,33);
837 : (0,1214:19,33);
838 : (0,1214:19,33);
839 : (0,1214:19,33);
840 : (0,1214:19,33);
842 : (0,1214:19,33);
844 : (0,1214:19,33);
864 : (0,1217:34,0);
866 : (0,1217:34,41);
867 : (0,1217:34,41);
868 : (0,1217:34,41);
869 : (0,1217:34,41);
870 : (0,1217:34,41);
871 : (0,1217:34,41);
873 : (0,1217:34,41);
875 : (0,1217:34,41);
882 : (0,1221:9,0);
883 : (0,1221:9,47);
884 : (0,1221:9,47);
885 : (0,1221:9,47);
886 : (0,1221:9,47);
888 : (0,1221:9,47);
890 : (0,1221:9,47);
937 : (0,1223:10,58);
938 : (0,1223:10,58);
939 : (0,1223:10,58);
940 : (0,1223:10,58);
941 : (0,1223:10,58);
942 : (0,1223:10,58);
943 : (0,1223:10,58);
945 : (0,1223:10,58);
947 : (0,1223:10,58);
960 : (0,1223:29,58);
961 : (0,1223:29,58);
962 : (0,1223:29,58);
963 : (0,1223:29,58);
964 : (0,1223:29,58);
965 : (0,1223:29,58);
966 : (0,1223:29,58);
968 : (0,1223:29,58);
970 : (0,1223:29,58);
983 : (0,1223:21,58);
984 : (0,1223:21,58);
985 : (0,1223:21,58);
986 : (0,1223:21,58);
987 : (0,1223:21,58);
988 : (0,1223:21,58);
989 : (0,1223:21,58);
991 : (0,1223:21,58);
993 : (0,1223:21,58);
1006 : (0,1224:15,59);
1007 : (0,1224:15,59);
1008 : (0,1224:15,59);
1009 : (0,1224:15,59);
1010 : (0,1224:15,59);
1011 : (0,1224:15,59);
1012 : (0,1224:15,59);
1014 : (0,1224:15,59);
1016 : (0,1224:15,59);
1030 : (0,1224:13,59);
1031 : (0,1224:13,59);
1032 : (0,1224:13,59);
1033 : (0,1224:13,59);
1034 : (0,1224:13,59);
1035 : (0,1224:13,59);
1037 : (0,1224:13,59);
1039 : (0,1224:13,59);
1075 : (0,1214:22,0);
1083 : (0,1223:11,0);
1085 : (0,1223:11,0);
1087 : (0,1223:23,0);
1089 : (0,1223:23,0);
1091 : (0,1224:16,0);
1093 : (0,1224:16,0);
1161 : (0,1210:11,8);
1194 : (0,1212:32,18);
1195 : (0,1213:30,26);
1196 : (0,1224:4,63);
1198 : (0,1224:4,0);
1200 : (0,1224:4,0);
1203 : (0,1217:34,41);
1204 : (0,1224:4,63);
1206 : (0,1224:4,0);
1208 : (0,1224:4,0);
1211 : (0,1224:13,59);
1213 : (0,1211:8,9);
1217 : (0,1213:8,25);
1221 : (0,1210:4,8);
1226 : (0,1217:4,40);

