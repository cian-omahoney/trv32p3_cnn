
// File generated by noodle version U-2022.12#33f3808fcb#221128, Thu Feb 29 15:22:28 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/string.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!!  int strncmp(const char *, const char *, size_t)
Fstrncmp : user_defined, called {
    fnm : "strncmp" 'int strncmp(const char *, const char *, size_t)';
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] );
    frm : ( );
}
****
***/

[
    0 : strncmp typ=u08 bnd=e stl=PMb
    3 : __M_DMb typ=w08 bnd=d stl=DMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   17 : __extDMb typ=w08 bnd=b stl=DMb
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   21 : __rt typ=w32 bnd=p tref=__sint__
   22 : s1 typ=w32 bnd=p tref=__P__cchar__
   23 : s2 typ=w32 bnd=p tref=__P__cchar__
   24 : n typ=w32 bnd=p tref=size_t__
   25 : __ct_0S0 typ=w32 val=0S0 bnd=m
   27 : __tmp typ=w32 bnd=m
   29 : c1 typ=w08 bnd=m lscp=9 tref=__cchar__
   31 : c2 typ=w08 bnd=m lscp=9 tref=__cchar__
   36 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   38 : __tmp typ=bool bnd=m
   39 : __ct_1 typ=w32 val=1f bnd=m
   49 : __tmp typ=bool bnd=m
   55 : __tmp typ=bool bnd=m
   56 : __tmp typ=bool bnd=m
   57 : __tmp typ=__uchar bnd=m
   59 : __tmp typ=__uchar bnd=m
   62 : __ct_0s0 typ=w32 val=0s0 bnd=m
   64 : __tmp typ=w32 bnd=m
   70 : __tmp typ=bool bnd=m
   83 : __ct_4294967295 typ=w32 val=-1f bnd=m
   84 : __shv_n typ=w32 bnd=m
   85 : __shv_s1 typ=w32 bnd=m
   86 : __shv_s2 typ=w32 bnd=m
   93 : __true typ=bool val=1f bnd=m
   95 : __either typ=bool bnd=m
   96 : __trgt typ=t13s_s2 val=0j bnd=m
   97 : __trgt typ=t13s_s2 val=0j bnd=m
   98 : __trgt typ=t13s_s2 val=0j bnd=m
   99 : __trgt typ=t13s_s2 val=0j bnd=m
  100 : __trgt typ=t21s_s2 val=0j bnd=m
]
Fstrncmp {
    #3 off=0
    (__M_DMb.2 var=3) st_def ()  <4>;
    (__R_SP.11 var=12) st_def ()  <22>;
    (__extDMb.16 var=17) source ()  <27>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (s1.23 var=22 stl=X off=11) inp ()  <34>;
    (s1.24 var=22) deassign (s1.23)  <35>;
    (s2.26 var=23 stl=X off=12) inp ()  <37>;
    (s2.27 var=23) deassign (s2.26)  <38>;
    (n.29 var=24 stl=X off=13) inp ()  <40>;
    (n.30 var=24) deassign (n.29)  <41>;
    (__rd___sp.32 var=19) rd_res_reg (__R_SP.11 __sp.17)  <43>;
    (__ct_0S0.33 var=25) const ()  <44>;
    (__tmp.35 var=27) __Pvoid__pl___Pvoid___sint (__rd___sp.32 __ct_0S0.33)  <46>;
    (__R_SP.36 var=12 __sp.37 var=18) wr_res_reg (__tmp.35 __sp.17)  <47>;
    (n.45 var=24) __uint__pl___uint___uint (n.30 __ct_4294967295.260)  <56>;
    (__ct_0.46 var=36) const ()  <57>;
    (__rd___sp.138 var=19) rd_res_reg (__R_SP.11 __sp.37)  <153>;
    (__ct_0s0.139 var=62) const ()  <154>;
    (__tmp.141 var=64) __Pvoid__pl___Pvoid___sint (__rd___sp.138 __ct_0s0.139)  <156>;
    (__ct_4294967295.260 var=83) const ()  <290>;
    (__tmp.271 var=38) bool__eq___uint___uint (n.30 __ct_0.46)  <318>;
    (__trgt.281 var=99) const ()  <340>;
    () void_br_bool_t13s_s2 (__tmp.271 __trgt.281)  <341>;
    (__either.282 var=95) undefined ()  <342>;
    if {
        {
            () if_expr (__either.282)  <76>;
            () chess_frequent_else ()  <77>;
            () chess_rear_then ()  <343>;
        } #5
        {
            (__trgt.283 var=100) const ()  <344>;
            () void_j_t21s_s2 (__trgt.283)  <345>;
        } #27 off=8
        {
            #99 off=1
            (__ct_1.82 var=39) const ()  <95>;
            (__trgt.274 var=96) const ()  <328>;
            (__trgt.277 var=97) const ()  <332>;
            (__trgt.279 var=98) const ()  <337>;
            do {
                {
                    (n.73 var=24) entry (n.199 n.45)  <86>;
                    (s1.76 var=22) entry (s1.205 s1.24)  <89>;
                    (s2.79 var=23) entry (s2.211 s2.27)  <92>;
                } #8
                {
                    #10 off=2
                    (c1.85 var=29) load (__M_DMb.2 s1.76 __extDMb.16)  <98>;
                    (c2.90 var=31) load (__M_DMb.2 s2.79 __extDMb.16)  <103>;
                    (__tmp.93 var=49) bool__ne___sint___sint (c1.85 c2.90)  <106>;
                    (__shv_s1.264 var=85) __Pvoid__pl___Pvoid___sint (s1.76 __ct_1.82)  <295>;
                    (__shv_s2.265 var=86) __Pvoid__pl___Pvoid___sint (s2.79 __ct_1.82)  <296>;
                    () void_br_bool_t13s_s2 (__tmp.93 __trgt.274)  <329>;
                    (__either.275 var=95) undefined ()  <330>;
                    if {
                        {
                            () if_expr (__either.275)  <123>;
                        } #12
                        {
                            (__true.276 var=93) const ()  <331>;
                        } #13
                        {
                            (__tmp.115 var=55) bool__eq___sint___sint (c1.85 __ct_0.46)  <129>;
                            () void_br_bool_t13s_s2 (__tmp.115 __trgt.277)  <333>;
                            (__either.278 var=95) undefined ()  <334>;
                        } #14 off=3
                        {
                            (__tmp.116 var=56) merge (__true.276 __either.278)  <130>;
                        } #15
                    } #11
                    if {
                        {
                            () if_expr (__tmp.116)  <147>;
                            () chess_frequent_else ()  <335>;
                            () chess_rear_then ()  <336>;
                        } #18
                        {
                            (__tmp.133 var=57) __uchar___uchar___schar (c1.85)  <148>;
                            (__tmp.135 var=59) __uchar___uchar___schar (c2.90)  <150>;
                            (__rt.137 var=21) __sint__mi___sint___sint (__tmp.133 __tmp.135)  <152>;
                            (__R_SP.142 var=12 __sp.143 var=18) wr_res_reg (__tmp.141 __sp.37)  <157>;
                            () void___rts_jr_w32 (__la.20)  <158>;
                            (__rt.144 var=21 stl=X off=10) assign (__rt.137)  <159>;
                            () out (__rt.144)  <160>;
                            () sink (__sp.143)  <166>;
                        } #22 off=5 nxt=-2
                        {
                        } #23 off=4
                        {
                        } #24
                    } #17
                    #25 off=6
                    (__tmp.182 var=70) bool__ne___uint___uint (n.73 __ct_0.46)  <204>;
                    (__shv_n.263 var=84) __uint__pl___uint___uint (n.73 __ct_4294967295.260)  <294>;
                    () void_br_bool_t13s_s2 (__tmp.182 __trgt.279)  <338>;
                    (__either.280 var=95) undefined ()  <339>;
                } #9
                {
                    () while_expr (__either.280)  <205>;
                    (n.199 var=24 n.200 var=24) exit (__shv_n.263)  <214>;
                    (s1.205 var=22 s1.206 var=22) exit (__shv_s1.264)  <217>;
                    (s2.211 var=23 s2.212 var=23) exit (__shv_s2.265)  <220>;
                } #26
            } #7 rng=[1,2147483647]
        } #6
        {
        } #28
    } #4
    #31 off=9 nxt=-2
    (__R_SP.237 var=12 __sp.238 var=18) wr_res_reg (__tmp.141 __sp.37)  <244>;
    () void___rts_jr_w32 (__la.20)  <245>;
    (__rt.239 var=21 stl=X off=10) assign (__ct_0.46)  <246>;
    () out (__rt.239)  <247>;
    () sink (__sp.238)  <253>;
} #0
0 : 'src/string.c';
----------
0 : (0,112:0,0);
3 : (0,115:4,3);
4 : (0,115:4,3);
6 : (0,115:4,4);
7 : (0,115:4,4);
9 : (0,115:16,4);
10 : (0,118:15,10);
11 : (0,118:21,10);
13 : (0,118:21,11);
14 : (0,118:27,12);
17 : (0,118:8,14);
22 : (0,119:12,15);
23 : (0,118:8,18);
25 : (0,115:4,24);
27 : (0,115:4,26);
31 : (0,121:4,29);
----------
43 : (0,112:4,0);
44 : (0,112:4,0);
46 : (0,112:4,0);
47 : (0,112:4,0);
56 : (0,115:4,2);
57 : (0,115:4,0);
76 : (0,115:4,3);
86 : (0,115:4,4);
89 : (0,115:4,4);
92 : (0,115:4,4);
95 : (0,116:21,0);
98 : (0,116:18,6);
103 : (0,117:18,9);
106 : (0,118:15,10);
123 : (0,118:21,10);
129 : (0,118:27,12);
130 : (0,118:21,13);
147 : (0,118:8,14);
148 : (0,119:19,15);
150 : (0,119:39,15);
152 : (0,119:37,15);
153 : (0,119:12,0);
154 : (0,119:12,0);
156 : (0,119:12,0);
157 : (0,119:12,15);
158 : (0,119:12,15);
159 : (0,119:37,0);
204 : (0,115:4,24);
205 : (0,115:4,24);
214 : (0,115:4,24);
217 : (0,115:4,24);
220 : (0,115:4,24);
244 : (0,121:4,29);
245 : (0,121:4,29);
246 : (0,121:11,0);
290 : (0,115:4,0);
294 : (0,115:12,0);
295 : (0,116:21,0);
296 : (0,117:21,0);
318 : (0,115:4,3);
329 : (0,118:21,10);
333 : (0,118:8,14);
338 : (0,115:4,24);
341 : (0,115:4,3);

