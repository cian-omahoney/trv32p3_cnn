
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 12:18:38 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I.. -I../isg -I../runtime/include -DCHESS_CXX_ATTRIBUTES -DNDEBUG -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork src/math.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern double ldexp(double, int)
Fldexp : user_defined, called {
    fnm : "ldexp" 'double ldexp(double, int)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] );
    frm : ( );
}
****
!!  float64_t f64_mul(float64_t, float64_t)
Ff64_mul : user_defined, called {
    fnm : "f64_mul" 'float64_t f64_mul(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
!!  float64_t f64_add(float64_t, float64_t)
Ff64_add : user_defined, called {
    fnm : "f64_add" 'float64_t f64_add(float64_t, float64_t)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] );
}
***/

[
    0 : ldexp typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   22 : __rt_low typ=w32 bnd=m tref=__uint__
   23 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : x_low typ=w32 bnd=m tref=__uint__
   26 : x_high typ=w32 bnd=m tref=__uint__
   27 : n typ=w32 bnd=p tref=__sint__
   28 : __ct_0S0 typ=w32 val=0S0 bnd=m
   30 : __tmp typ=w32 bnd=m
   33 : k typ=w32 bnd=m tref=int32_t__
   38 : __tmpb4_Fldexp typ=w32 bnd=m lscp=314 tref=__uint__
   49 : __tmpb13_Fldexp typ=w32 bnd=m lscp=204 tref=__uint__
   60 : __ct_2146435072 typ=t20s_rp12 val=524032f bnd=m
   62 : __tmp typ=w32 bnd=m
   63 : __ct_20 typ=w32 val=20f bnd=m
   66 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   68 : __tmp typ=bool bnd=m
   69 : __ct_2147483647 typ=w32 val=2147483647f bnd=m
   71 : __tmp typ=w32 bnd=m
   72 : __tmp typ=w32 bnd=m
   75 : __tmp typ=bool bnd=m
   76 : __ct_0s0 typ=w32 val=0s0 bnd=m
   78 : __tmp typ=w32 bnd=m
   89 : __tmp typ=w32 bnd=m
   92 : __tmp typ=w32 bnd=m
   93 : __ct_54 typ=w32 val=54f bnd=m
   96 : __ct_m50000 typ=w32 val=-50000f bnd=m
   98 : __tmp typ=bool bnd=m
  105 : __ct_2047 typ=w32 val=2047f bnd=m
  107 : __tmp typ=bool bnd=m
  110 : __ct_2046 typ=w32 val=2046f bnd=m
  112 : __tmp typ=bool bnd=m
  129 : __tmp typ=bool bnd=m
  131 : __ct_2148532223 typ=w32 val=-2146435073f bnd=m
  133 : __tmp typ=w32 bnd=m
  136 : __tmp typ=w32 bnd=m
  148 : __ct_m54 typ=w32 val=-54f bnd=m
  150 : __tmp typ=bool bnd=m
  151 : __ct_50000 typ=w32 val=50000f bnd=m
  153 : __tmp typ=bool bnd=m
  191 : __tmp typ=w32 bnd=m
  258 : __tmp_high typ=w32 bnd=m
  272 : __tmp_high typ=w32 bnd=m
  316 : __tmp_high typ=w32 bnd=m
  338 : __ct_2147483648 typ=t20s_rp12 val=-524288f bnd=m
  339 : __ct_2281731484 typ=w32 val=-2013235812f bnd=m
  340 : __ct_2117592124 typ=w32 val=2117592124f bnd=m
  341 : __ct_3271095129 typ=w32 val=-1023872167f bnd=m
  342 : __ct_27618847 typ=w32 val=27618847f bnd=m
  356 : a_low typ=w32 bnd=m tref=__uint__
  357 : a_high typ=w32 bnd=m tref=__uint__
  358 : b_low typ=w32 bnd=m tref=__uint__
  359 : b_high typ=w32 bnd=m tref=__uint__
  360 : f64_mul typ=t21s_s2 val=0r bnd=m
  361 : __link typ=w32 bnd=m
  363 : __tmp typ=w32 bnd=m
  364 : __tmp typ=w32 bnd=m
  373 : a_low typ=w32 bnd=m tref=__uint__
  374 : a_high typ=w32 bnd=m tref=__uint__
  375 : b_low typ=w32 bnd=m tref=__uint__
  376 : b_high typ=w32 bnd=m tref=__uint__
  377 : f64_add typ=t21s_s2 val=0r bnd=m
  380 : __tmp typ=w32 bnd=m
  381 : __tmp typ=w32 bnd=m
  405 : hx typ=w32 bnd=m
  406 : __ct_1129316352 typ=t20s_rp12 val=275712f bnd=m
  407 : __ct_1016070144 typ=t20s_rp12 val=248064f bnd=m
  416 : __either typ=bool bnd=m
  417 : __trgt typ=t13s_s2 val=0j bnd=m
  418 : __trgt typ=t13s_s2 val=0j bnd=m
  419 : __trgt typ=t13s_s2 val=0j bnd=m
  420 : __trgt typ=t21s_s2 val=0j bnd=m
  421 : __trgt typ=t13s_s2 val=0j bnd=m
  422 : __trgt typ=t13s_s2 val=0j bnd=m
  423 : __trgt typ=t13s_s2 val=0j bnd=m
  424 : __trgt typ=t21s_s2 val=0j bnd=m
  425 : __trgt typ=t13s_s2 val=0j bnd=m
  426 : __trgt typ=t21s_s2 val=0j bnd=m
  427 : __trgt typ=t13s_s2 val=0j bnd=m
]
Fldexp {
    #242 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x_low.28 var=25 stl=X off=12) inp ()  <39>;
    (x_low.29 var=25) deassign (x_low.28)  <40>;
    (x_high.32 var=26 stl=X off=13) inp ()  <43>;
    (x_high.33 var=26) deassign (x_high.32)  <44>;
    (n.36 var=27 stl=X off=14) inp ()  <47>;
    (n.37 var=27) deassign (n.36)  <48>;
    (__rd___sp.39 var=19) rd_res_reg (__R_SP.11 __sp.17)  <50>;
    (__ct_0S0.40 var=28) const ()  <51>;
    (__tmp.42 var=30) __Pvoid__pl___Pvoid___sint (__rd___sp.39 __ct_0S0.40)  <53>;
    (__R_SP.43 var=12 __sp.44 var=18) wr_res_reg (__tmp.42 __sp.17)  <54>;
    (__ct_2146435072.77 var=60) const ()  <88>;
    (__tmp.79 var=62) __sint__ad___sint___sint (x_high.33 __ct_2146435072.77)  <90>;
    (__ct_20.80 var=63) const ()  <91>;
    (k.82 var=33) __sint__rs___sint___sint (__tmp.79 __ct_20.80)  <93>;
    (__ct_0.83 var=66) const ()  <94>;
    (__rd___sp.157 var=19) rd_res_reg (__R_SP.11 __sp.44)  <170>;
    (__ct_0s0.158 var=76) const ()  <171>;
    (__tmp.160 var=78) __Pvoid__pl___Pvoid___sint (__rd___sp.157 __ct_0s0.158)  <173>;
    (__ct_m54.543 var=148) const ()  <576>;
    (__ct_3271095129.1066 var=341) const ()  <1263>;
    (__ct_27618847.1067 var=342) const ()  <1265>;
    (f64_mul.1086 var=360) const ()  <1318>;
    (__tmp.1257 var=68) bool__ne___sint___sint (k.82 __ct_0.83)  <1598>;
    (__trgt.1282 var=419) const ()  <1664>;
    () void_br_bool_t13s_s2 (__tmp.1257 __trgt.1282)  <1665>;
    (__either.1283 var=416) undefined ()  <1666>;
    if {
        {
            () if_expr (__either.1283)  <129>;
        } #5
        {
        } #24 off=12
        {
            #7 off=1
            (__ct_2147483647.118 var=69) const ()  <130>;
            (__tmp.120 var=71) __sint__ad___sint___sint (x_high.33 __ct_2147483647.118)  <132>;
            (__tmp.121 var=72) __sint__or___sint___sint (x_low.29 __tmp.120)  <133>;
            (__tmp.124 var=75) bool__eq___sint___sint (__tmp.121 __ct_0.83)  <136>;
            (__trgt.1278 var=417) const ()  <1656>;
            () void_br_bool_t13s_s2 (__tmp.124 __trgt.1278)  <1657>;
            (__either.1279 var=416) undefined ()  <1658>;
            if {
                {
                    () if_expr (__either.1279)  <169>;
                    () chess_rear_then ()  <1659>;
                } #9
                {
                    (__R_SP.161 var=12 __sp.162 var=18) wr_res_reg (__tmp.160 __sp.44)  <174>;
                    () void___rts_jr_w32 (__la.20)  <175>;
                    (__rt_low.164 var=22 stl=X off=10) assign (x_low.29)  <177>;
                    () out (__rt_low.164)  <178>;
                    (__rt_high.166 var=23 stl=X off=11) assign (x_high.33)  <180>;
                    () out (__rt_high.166)  <181>;
                    () sink (__sp.162)  <189>;
                } #12 off=3 nxt=-2
                {
                } #13 off=2
                {
                } #14
            } #8
            #262 off=4
            (__link.1087 var=361) w32_jal_t21s_s2 (f64_mul.1086)  <1319>;
            (__ct_1129316352.1245 var=406) const ()  <1534>;
            call {
                (a_low.1088 var=356 stl=X off=12) assign (x_low.29)  <1320>;
                (a_high.1089 var=357 stl=X off=13) assign (x_high.33)  <1321>;
                (b_low.1090 var=358 stl=X off=14) assign (__ct_0.83)  <1322>;
                (b_high.1091 var=359 stl=X off=15) assign (__ct_1129316352.1245)  <1323>;
                (__link.1092 var=361 stl=X off=1) assign (__link.1087)  <1324>;
                (__tmp.1093 var=363 stl=X off=10 __tmp.1094 var=364 stl=X off=11) Ff64_mul (__link.1092 a_low.1088 a_high.1089 b_low.1090 b_high.1091)  <1325>;
                (__tmp.1096 var=363) deassign (__tmp.1093)  <1327>;
                (__tmp.1098 var=364) deassign (__tmp.1094)  <1329>;
            } #263 off=5
            #259 off=6
            (__tmp.243 var=89) __sint__ad___sint___sint (__tmp.1098 __ct_2146435072.77)  <264>;
            (__tmp.246 var=92) __sint__rs___sint___sint (__tmp.243 __ct_20.80)  <267>;
            (k.249 var=33) __sint__pl___sint___sint (__tmp.246 __ct_m54.543)  <270>;
            (__ct_m50000.250 var=96) const ()  <271>;
            (__tmp.252 var=98) bool__lt___sint___sint (n.37 __ct_m50000.250)  <273>;
            (__trgt.1280 var=418) const ()  <1660>;
            () void_br_bool_t13s_s2 (__tmp.252 __trgt.1280)  <1661>;
            (__either.1281 var=416) undefined ()  <1662>;
            if {
                {
                    () if_expr (__either.1281)  <306>;
                    () chess_rear_then ()  <1663>;
                } #17
                {
                    #20 off=8
                    (__R_SP.292 var=12 __sp.293 var=18) wr_res_reg (__tmp.160 __sp.44)  <314>;
                    () void_j_t21s_s2 (f64_mul.1086)  <1625>;
                    call {
                        (a_low.1114 var=356 stl=X off=12) assign (__ct_3271095129.1066)  <1351>;
                        (a_high.1115 var=357 stl=X off=13) assign (__ct_27618847.1067)  <1352>;
                        (b_low.1116 var=358 stl=X off=14) assign (__tmp.1096)  <1353>;
                        (b_high.1117 var=359 stl=X off=15) assign (__tmp.1098)  <1354>;
                        (__la.1118 var=20 stl=X off=1) assign (__la.20)  <1355>;
                        (__tmp.1119 var=363 stl=X off=10 __tmp.1120 var=364 stl=X off=11) Ff64_mul (__la.1118 a_low.1114 a_high.1115 b_low.1116 b_high.1117)  <1356>;
                        (__tmp.1122 var=363) deassign (__tmp.1119)  <1358>;
                        (__tmp.1124 var=364) deassign (__tmp.1120)  <1360>;
                    } #272 off=9
                    #21 off=10 nxt=-2
                    (__rt_low.295 var=22 stl=X off=10) assign (__tmp.1122)  <317>;
                    () out (__rt_low.295)  <318>;
                    (__rt_high.297 var=23 stl=X off=11) assign (__tmp.1124)  <320>;
                    () out (__rt_high.297)  <321>;
                    () sink (__sp.293)  <329>;
                } #18
                {
                } #22 off=7
                {
                } #23
            } #16
            #372 off=11
            (__trgt.1284 var=420) const ()  <1667>;
            () void_j_t21s_s2 (__trgt.1284)  <1668>;
        } #6
        {
            (hx.371 var=405) merge (x_high.33 __tmp.1098)  <401>;
            (k.374 var=33) merge (k.82 k.249)  <404>;
            (a_low.1248 var=373) merge (x_low.29 __tmp.1096)  <1538>;
        } #25
    } #4
    #26 off=13
    (__ct_2047.396 var=105) const ()  <426>;
    (__tmp.398 var=107) bool__eq___sint___sint (k.374 __ct_2047.396)  <428>;
    (__trgt.1295 var=427) const ()  <1685>;
    () void_br_bool_t13s_s2 (__tmp.398 __trgt.1295)  <1686>;
    (__either.1296 var=416) undefined ()  <1687>;
    if {
        {
            () if_expr (__either.1296)  <461>;
            () chess_rear_then ()  <1688>;
        } #28
        {
            #360 off=32
            (f64_add.1133 var=377) const ()  <1372>;
            (__R_SP.1260 var=12 __sp.1261 var=18) wr_res_reg (__tmp.160 __sp.44)  <1626>;
            () void_j_t21s_s2 (f64_add.1133)  <1633>;
            call {
                (a_low.1135 var=373 stl=X off=12) assign (a_low.1248)  <1374>;
                (a_high.1136 var=374 stl=X off=13) assign (hx.371)  <1375>;
                (b_low.1137 var=375 stl=X off=14) assign (a_low.1248)  <1376>;
                (b_high.1138 var=376 stl=X off=15) assign (hx.371)  <1377>;
                (__la.1139 var=20 stl=X off=1) assign (__la.20)  <1378>;
                (__tmp.1140 var=380 stl=X off=10 __tmp.1141 var=381 stl=X off=11) Ff64_add (__la.1139 a_low.1135 a_high.1136 b_low.1137 b_high.1138)  <1379>;
                (__tmp.1143 var=380) deassign (__tmp.1140)  <1381>;
                (__tmp.1145 var=381) deassign (__tmp.1141)  <1383>;
            } #281 off=33
            #361 off=34 nxt=-2
            (__rt_low.1262 var=22 stl=X off=10) assign (__tmp.1143)  <1628>;
            () out (__rt_low.1262)  <1629>;
            (__rt_high.1263 var=23 stl=X off=11) assign (__tmp.1145)  <1630>;
            () out (__rt_high.1263)  <1631>;
            () sink (__sp.1261)  <1632>;
            (__rt_low.1276 var=22) never ()  <1654>;
            (__rt_high.1277 var=23) never ()  <1655>;
        } #29
        {
            #297 off=14
            (k.432 var=33) __sint__pl___sint___sint (k.374 n.37)  <463>;
            (__tmp_high.907 var=258) __uint__ad___uint___uint (hx.371 __ct_2147483648.1063)  <1035>;
            (__tmp_high.924 var=272) __uint__or___uint___uint (__tmp_high.907 __ct_2117592124.1065)  <1056>;
            (__ct_2147483648.1063 var=338) const ()  <1257>;
            (__ct_2281731484.1064 var=339) const ()  <1259>;
            (__ct_2117592124.1065 var=340) const ()  <1261>;
            (__link.1155 var=361) w32_jal_t21s_s2 (f64_mul.1086)  <1396>;
            call {
                (a_low.1156 var=356 stl=X off=12) assign (__ct_2281731484.1064)  <1397>;
                (a_high.1157 var=357 stl=X off=13) assign (__ct_2117592124.1065)  <1398>;
                (b_low.1158 var=358 stl=X off=14) assign (__ct_2281731484.1064)  <1399>;
                (b_high.1159 var=359 stl=X off=15) assign (__tmp_high.924)  <1400>;
                (__link.1160 var=361 stl=X off=1) assign (__link.1155)  <1401>;
                (__tmp.1161 var=363 stl=X off=10 __tmp.1162 var=364 stl=X off=11) Ff64_mul (__link.1160 a_low.1156 a_high.1157 b_low.1158 b_high.1159)  <1402>;
                (__tmp.1164 var=363) deassign (__tmp.1161)  <1404>;
                (__tmp.1166 var=364) deassign (__tmp.1162)  <1406>;
            } #298 off=15
            #294 off=16
            (__ct_2046.433 var=110) const ()  <464>;
            (__tmp.900 var=112) bool__lt___sint___sint (__ct_2046.433 k.432)  <1025>;
            (__trgt.1292 var=425) const ()  <1680>;
            () void_br_bool_t13s_s2 (__tmp.900 __trgt.1292)  <1681>;
            (__either.1293 var=416) undefined ()  <1682>;
            if {
                {
                    () if_expr (__either.1293)  <499>;
                } #33
                {
                } #34 off=30
                {
                    #306 off=17
                    (__ct_2148532223.523 var=131) const ()  <556>;
                    (__tmp.525 var=133) __uint__ad___uint___uint (hx.371 __ct_2148532223.523)  <558>;
                    (__tmp.938 var=129) bool__lt___sint___sint (__ct_0.83 k.432)  <1074>;
                    (__trgt.1289 var=423) const ()  <1675>;
                    () void_br_bool_t13s_s2 (__tmp.938 __trgt.1289)  <1676>;
                    (__either.1290 var=416) undefined ()  <1677>;
                    if {
                        {
                            () if_expr (__either.1290)  <552>;
                        } #38
                        {
                            (__tmp.528 var=136) __sint__ls___sint___sint (k.432 __ct_20.80)  <561>;
                            (__tmpb4_Fldexp.530 var=38) __uint__or___uint___uint (__tmp.525 __tmp.528)  <563>;
                        } #314 off=28
                        {
                            #182 off=18
                            (__tmp.987 var=150) bool__ge___sint___sint (__ct_m54.543 k.432)  <1136>;
                            (__trgt.1287 var=422) const ()  <1672>;
                            () void_br_bool_t13s_s2 (__tmp.987 __trgt.1287)  <1673>;
                            (__either.1288 var=416) undefined ()  <1674>;
                            if {
                                {
                                    () if_expr (__either.1288)  <611>;
                                } #43
                                {
                                    #185 off=22
                                    (__ct_50000.578 var=151) const ()  <612>;
                                    (__tmp.991 var=153) bool__lt___sint___sint (__ct_50000.578 n.37)  <1143>;
                                    (__trgt.1285 var=421) const ()  <1669>;
                                    () void_br_bool_t13s_s2 (__tmp.991 __trgt.1285)  <1670>;
                                    (__either.1286 var=416) undefined ()  <1671>;
                                    if {
                                        {
                                            () if_expr (__either.1286)  <647>;
                                        } #47
                                        {
                                        } #67 off=26
                                        {
                                            #364 off=23
                                            (__tmp_high.998 var=316) __uint__or___uint___uint (__tmp_high.907 __ct_27618847.1067)  <1153>;
                                            (__R_SP.1264 var=12 __sp.1265 var=18) wr_res_reg (__tmp.160 __sp.44)  <1634>;
                                            () void_j_t21s_s2 (f64_mul.1086)  <1641>;
                                            call {
                                                (a_low.1200 var=356 stl=X off=12) assign (__ct_3271095129.1066)  <1454>;
                                                (a_high.1201 var=357 stl=X off=13) assign (__ct_27618847.1067)  <1455>;
                                                (b_low.1202 var=358 stl=X off=14) assign (__ct_3271095129.1066)  <1456>;
                                                (b_high.1203 var=359 stl=X off=15) assign (__tmp_high.998)  <1457>;
                                                (__la.1204 var=20 stl=X off=1) assign (__la.20)  <1458>;
                                                (__tmp.1205 var=363 stl=X off=10 __tmp.1206 var=364 stl=X off=11) Ff64_mul (__la.1204 a_low.1200 a_high.1201 b_low.1202 b_high.1203)  <1459>;
                                                (__tmp.1208 var=363) deassign (__tmp.1205)  <1461>;
                                                (__tmp.1210 var=364) deassign (__tmp.1206)  <1463>;
                                            } #332 off=24
                                            #365 off=25 nxt=-2
                                            (__rt_low.1266 var=22 stl=X off=10) assign (__tmp.1208)  <1636>;
                                            () out (__rt_low.1266)  <1637>;
                                            (__rt_high.1267 var=23 stl=X off=11) assign (__tmp.1210)  <1638>;
                                            () out (__rt_high.1267)  <1639>;
                                            () sink (__sp.1265)  <1640>;
                                        } #191
                                        {
                                        } #50
                                    } #46
                                } #44
                                {
                                    #368 off=19
                                    (__ct_54.247 var=93) const ()  <268>;
                                    (k.656 var=33) __sint__pl___sint___sint (k.432 __ct_54.247)  <691>;
                                    (__tmp.665 var=191) __sint__ls___sint___sint (k.656 __ct_20.80)  <700>;
                                    (__tmpb13_Fldexp.667 var=49) __uint__or___uint___uint (__tmp.525 __tmp.665)  <702>;
                                    (__ct_1016070144.1252 var=407) const ()  <1542>;
                                    (__R_SP.1268 var=12 __sp.1269 var=18) wr_res_reg (__tmp.160 __sp.44)  <1642>;
                                    () void_j_t21s_s2 (f64_mul.1086)  <1649>;
                                    call {
                                        (a_low.1230 var=356 stl=X off=12) assign (a_low.1248)  <1490>;
                                        (a_high.1231 var=357 stl=X off=13) assign (__tmpb13_Fldexp.667)  <1491>;
                                        (b_low.1232 var=358 stl=X off=14) assign (__ct_0.83)  <1492>;
                                        (b_high.1233 var=359 stl=X off=15) assign (__ct_1016070144.1252)  <1493>;
                                        (__la.1234 var=20 stl=X off=1) assign (__la.20)  <1494>;
                                        (__tmp.1235 var=363 stl=X off=10 __tmp.1236 var=364 stl=X off=11) Ff64_mul (__la.1234 a_low.1230 a_high.1231 b_low.1232 b_high.1233)  <1495>;
                                        (__tmp.1238 var=363) deassign (__tmp.1235)  <1497>;
                                        (__tmp.1240 var=364) deassign (__tmp.1236)  <1499>;
                                    } #354 off=20
                                    #369 off=21 nxt=-2
                                    (__rt_low.1270 var=22 stl=X off=10) assign (__tmp.1238)  <1644>;
                                    () out (__rt_low.1270)  <1645>;
                                    (__rt_high.1271 var=23 stl=X off=11) assign (__tmp.1240)  <1646>;
                                    () out (__rt_high.1271)  <1647>;
                                    () sink (__sp.1269)  <1648>;
                                } #204
                                {
                                } #52
                            } #42
                            #373 off=27
                            (__trgt.1291 var=424) const ()  <1678>;
                            () void_j_t21s_s2 (__trgt.1291)  <1679>;
                        } #40
                        {
                            (__rt_low.816 var=22) merge (a_low.1248 __tmp.1164)  <905>;
                            (__rt_high.831 var=23) merge (__tmpb4_Fldexp.530 __tmp.1166)  <920>;
                        } #53
                    } #37
                    #374 off=29
                    (__trgt.1294 var=426) const ()  <1683>;
                    () void_j_t21s_s2 (__trgt.1294)  <1684>;
                } #35
                {
                    (__rt_low.813 var=22) merge (__tmp.1164 __rt_low.816)  <902>;
                    (__rt_high.828 var=23) merge (__tmp.1166 __rt_high.831)  <917>;
                } #54
            } #32
        } #30
        {
            (__rt_low.810 var=22) merge (__rt_low.1276 __rt_low.813)  <899>;
            (__rt_high.825 var=23) merge (__rt_high.1277 __rt_high.828)  <914>;
        } #55
    } #27
    #57 off=35 nxt=-2
    (__R_SP.764 var=12 __sp.765 var=18) wr_res_reg (__tmp.160 __sp.44)  <799>;
    () void___rts_jr_w32 (__la.20)  <800>;
    (__rt_low.767 var=22 stl=X off=10) assign (__rt_low.810)  <802>;
    () out (__rt_low.767)  <803>;
    (__rt_high.769 var=23 stl=X off=11) assign (__rt_high.825)  <805>;
    () out (__rt_high.769)  <806>;
    () sink (__sp.765)  <814>;
} #0
0 : 'src/math.c';
----------
0 : (0,93:0,0);
4 : (0,104:4,6);
6 : (0,104:14,7);
7 : (0,105:32,7);
8 : (0,105:8,7);
12 : (0,105:37,8);
13 : (0,105:8,11);
16 : (0,109:8,17);
18 : (0,109:23,18);
20 : (0,109:23,18);
21 : (0,109:23,18);
22 : (0,109:8,21);
24 : (0,104:4,26);
26 : (0,111:9,29);
27 : (0,111:4,29);
29 : (0,111:18,30);
30 : (0,111:18,32);
32 : (0,113:4,34);
34 : (0,113:32,35);
35 : (0,113:20,48);
37 : (0,114:4,49);
40 : (0,115:85,63);
42 : (0,116:4,64);
44 : (0,116:18,65);
46 : (0,117:8,65);
57 : (0,123:4,122);
182 : (0,116:10,64);
185 : (0,117:14,65);
191 : (0,118:12,79);
204 : (0,117:8,97);
242 : (0,104:9,6);
259 : (0,109:13,17);
262 : (0,106:10,14);
263 : (0,106:10,14);
272 : (0,109:34,18);
281 : (0,111:26,30);
294 : (0,113:10,34);
297 : (0,113:31,45);
298 : (0,113:31,45);
306 : (0,114:10,49);
314 : (0,115:23,56);
332 : (0,119:26,89);
354 : (0,123:12,109);
360 : (0,123:4,122);
361 : (0,123:4,122);
364 : (0,123:4,122);
365 : (0,123:4,122);
368 : (0,123:4,122);
369 : (0,123:4,122);
----------
50 : (0,93:7,0);
51 : (0,93:7,0);
53 : (0,93:7,0);
54 : (0,93:7,0);
88 : (0,103:12,0);
90 : (0,103:11,5);
91 : (0,103:25,0);
93 : (0,103:23,5);
94 : (0,104:11,0);
129 : (0,104:4,6);
130 : (0,105:20,0);
132 : (0,105:19,7);
133 : (0,105:15,7);
136 : (0,105:32,7);
169 : (0,105:8,7);
170 : (0,105:37,0);
171 : (0,105:37,0);
173 : (0,105:37,0);
174 : (0,105:37,8);
175 : (0,105:37,8);
177 : (0,105:44,0);
180 : (0,105:44,0);
264 : (0,108:16,16);
267 : (0,108:28,16);
268 : (0,108:36,0);
270 : (0,108:34,16);
271 : (0,109:15,0);
273 : (0,109:13,17);
306 : (0,109:8,17);
314 : (0,109:23,18);
317 : (0,109:34,0);
320 : (0,109:34,0);
401 : (0,104:4,28);
404 : (0,104:4,28);
426 : (0,111:11,0);
428 : (0,111:9,29);
461 : (0,111:4,29);
463 : (0,112:9,33);
464 : (0,113:13,0);
499 : (0,113:4,34);
552 : (0,114:4,49);
556 : (0,115:37,0);
558 : (0,115:37,52);
561 : (0,115:52,52);
563 : (0,115:49,52);
576 : (0,116:13,0);
611 : (0,116:4,64);
612 : (0,117:16,0);
647 : (0,117:8,65);
691 : (0,121:6,98);
700 : (0,122:44,101);
702 : (0,122:41,101);
799 : (0,123:4,122);
800 : (0,123:4,122);
802 : (0,123:4,0);
805 : (0,123:4,0);
1025 : (0,113:10,34);
1035 : (0,113:32,42);
1056 : (0,113:32,42);
1074 : (0,114:10,49);
1136 : (0,116:10,64);
1143 : (0,117:14,65);
1153 : (0,119:27,86);
1257 : (0,113:32,0);
1259 : (0,113:32,0);
1261 : (0,113:32,0);
1263 : (0,119:27,0);
1265 : (0,119:27,0);
1318 : (0,106:10,0);
1319 : (0,106:10,14);
1320 : (0,106:10,14);
1321 : (0,106:10,14);
1322 : (0,106:10,14);
1323 : (0,106:10,14);
1324 : (0,106:10,14);
1325 : (0,106:10,14);
1327 : (0,106:10,14);
1329 : (0,106:10,14);
1351 : (0,109:34,18);
1352 : (0,109:34,18);
1353 : (0,109:34,18);
1354 : (0,109:34,18);
1355 : (0,109:34,18);
1356 : (0,109:34,18);
1358 : (0,109:34,18);
1360 : (0,109:34,18);
1372 : (0,111:26,0);
1374 : (0,111:26,30);
1375 : (0,111:26,30);
1376 : (0,111:26,30);
1377 : (0,111:26,30);
1378 : (0,111:26,30);
1379 : (0,111:26,30);
1381 : (0,111:26,30);
1383 : (0,111:26,30);
1396 : (0,113:31,45);
1397 : (0,113:31,45);
1398 : (0,113:31,45);
1399 : (0,113:31,45);
1400 : (0,113:31,45);
1401 : (0,113:31,45);
1402 : (0,113:31,45);
1404 : (0,113:31,45);
1406 : (0,113:31,45);
1454 : (0,119:26,89);
1455 : (0,119:26,89);
1456 : (0,119:26,89);
1457 : (0,119:26,89);
1458 : (0,119:26,89);
1459 : (0,119:26,89);
1461 : (0,119:26,89);
1463 : (0,119:26,89);
1490 : (0,123:12,109);
1491 : (0,123:12,109);
1492 : (0,123:12,109);
1493 : (0,123:12,109);
1494 : (0,123:12,109);
1495 : (0,123:12,109);
1497 : (0,123:12,109);
1499 : (0,123:12,109);
1534 : (0,106:13,0);
1542 : (0,123:13,0);
1598 : (0,104:9,6);
1625 : (0,109:34,18);
1626 : (0,123:4,122);
1628 : (0,123:4,0);
1630 : (0,123:4,0);
1633 : (0,111:26,30);
1634 : (0,123:4,122);
1636 : (0,123:4,0);
1638 : (0,123:4,0);
1641 : (0,119:26,89);
1642 : (0,123:4,122);
1644 : (0,123:4,0);
1646 : (0,123:4,0);
1649 : (0,123:12,109);
1657 : (0,105:8,7);
1661 : (0,109:8,17);
1665 : (0,104:4,6);
1670 : (0,117:8,65);
1673 : (0,116:4,64);
1676 : (0,114:4,49);
1681 : (0,113:4,34);
1686 : (0,111:4,29);

