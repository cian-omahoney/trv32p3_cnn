
// File generated by animal version U-2022.12#33f3808fcb#221128, Sat Mar 16 14:39:23 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// animal -a -Iisg +wisg -D__tct_patch__=0 -h -D__checkers__ trv32p3_cnn


// This file reports all potential pipeline hazards in trv32p3_cnn,
// and lists where sw_stall rules are automatically added to avoid them.
// The added sw_stall rules complement user-defined hw_stall and bypass rules,
// and never overlap with them.

// Instead of sw_stall rules, also hw_stall rules can be added, by setting nML property:
// property add_hw_stalls : 1;

// The default pipeline hazard covering algorithm may add sw_stall rules
// that overlap with (or even replace) other, user-defined sw_stall rules, when the latter
// only partially cover a dependency.
// If desired, this (harmless) overlap between sw_stall rules (i.e. between
// rules of the same kind) can be avoided by setting  nML property
// property allow_overlapping_sw_stalls: false;

// Also simple sw_stall rules are printed in nML syntax, mainly as information.
// It is recommended to rely on the internally added sw_stall rules, and
// certainly NOT copy the simple rules without change into an nML file,
// as the printed rules in nML syntax may OVERLAP with user-defined hw_stall or bypass rules.

// ---------------------------------------------------------------------
// This file was created without option +d (or with option +d0).
// Use option +d4, +d8, +d12, +d16 for increasingly more details and
// source references on the pipeline hazards and how they are covered.

// With option -NoCoveredHazards covered hazards are skipped in this report.
// With option -NoMCOHazards hazards involving multi-cycle operations are skipped in this report.
// ---------------------------------------------------------------------

// with the animal -v (verbose) option ALL SOURCE REFERENCES are printed;
// without it ONLY ONE source reference is printed for each operation.

// with option -n source line references with nML derivation paths are printed
// (more references are printed for +d level higher than 9)

// with option -b <nr> (combined with +d level higher than 1) <nr> of instructions
// are printed as bit-string patterns (-s prints all patterns but may be slow)


// Added internal SW stall hazard rule class(__conflict__x_r3_34) (__internal__:34)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__conflict__x_r3_34) () {
    rsrc(x_r3 `EX`);
}
-> {
    rsrc(x_r3 `ID`);
}
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__conflict__x_r3_35) (__internal__:35)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__conflict__x_r3_35) () {
    rsrc(x_r3 `EX`);
}
-> {
    rsrc(x_r3 `ID`);
}
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__conflict__x_w2_36) (__internal__:36)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__conflict__x_w2_36) () {
    rsrc(x_w2 `EX`);
}
-> {
    rsrc(x_w2 `ID`);
}
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_37) (__internal__:37)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_37) () {
    stage EX : X[#] = x_w1;
}
-> {
    stage ID : x_r4 = #X13;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X, X13
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_38) (__internal__:38)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_38) () {
    stage EX : X[#] = x_w1;
}
-> {
    stage ID : x_r6 = #X14;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X, X14
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_39) (__internal__:39)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_39) () {
    stage EX : X[#] = x_w1;
}
-> {
    stage ID : x_r5 = #X15;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X, X15
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_40) (__internal__:40)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_40) () {
    stage EX : X[#] = x_w1;
}
-> {
    stage ID : x_r7 = #X16;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X, X16
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_41) (__internal__:41)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_41) () {
    stage EX : #X12 = x_w1;
}
-> {
    stage ID : x_r4 = #X13;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X12, X13
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_42) (__internal__:42)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_42) () {
    stage EX : #X12 = x_w1;
}
-> {
    stage ID : x_r6 = #X14;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X12, X14
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_43) (__internal__:43)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_43) () {
    stage EX : #X12 = x_w1;
}
-> {
    stage ID : x_r5 = #X15;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X12, X15
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_44) (__internal__:44)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_44) () {
    stage EX : #X12 = x_w1;
}
-> {
    stage ID : x_r7 = #X16;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X12, X16
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_45) (__internal__:45)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_45) () {
    stage EX : #X15 = x_w4;
}
-> {
    stage ID : x_r4 = #X13;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X15, X13
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_46) (__internal__:46)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_46) () {
    stage EX : #X15 = x_w4;
}
-> {
    stage ID : x_r6 = #X14;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X15, X14
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_47) (__internal__:47)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_47) () {
    stage EX : #X15 = x_w4;
}
-> {
    stage ID : x_r5 = #X15;
}
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_48) (__internal__:48)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_48) () {
    stage EX : #X15 = x_w4;
}
-> {
    stage ID : x_r7 = #X16;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X15, X16
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_49) (__internal__:49)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_49) () {
    stage EX : #X16 = x_w7;
}
-> {
    stage ID : x_r4 = #X13;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X16, X13
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_50) (__internal__:50)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_50) () {
    stage EX : #X16 = x_w7;
}
-> {
    stage ID : x_r6 = #X14;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X16, X14
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_51) (__internal__:51)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_51) () {
    stage EX : #X16 = x_w7;
}
-> {
    stage ID : x_r5 = #X15;
}
// Note: to turn above rule in a valid rule, you may have to use qualifier '$' as in in X$[#], and not use just any of X16, X15
// Use e.g. option +d4 for nML source references - see top of file

// Added internal SW stall hazard rule class(__RAW__X_52) (__internal__:52)
// which is a RESTRICTED version of the following nML stall rule:
// (DO NOT ADD to nML without checking OVERLAP with hw_stall and bypass rules!)
sw_stall 1 cycles class(__RAW__X_52) () {
    stage EX : #X16 = x_w7;
}
-> {
    stage ID : x_r7 = #X16;
}
// Use e.g. option +d4 for nML source references - see top of file

