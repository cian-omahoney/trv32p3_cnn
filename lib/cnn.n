fu cnn;

trn cnn_r1<w32>;
trn cnn_r2<w32>;
trn cnn_r3<w32>;
trn cnn_w1<w32>;

trn xuC<w32>; 
trn xuB<w32>; 
trn xuA<w32>; 

trn cnn_R<w32>;


opn cnn_instrs (
    cnn_rrra_instr //|
   // cnn_rr_instr
   // cnn_parr_instr
);

enum cnn_op {
  mac  = 0b1100000001,
 // exp  = 0b1100000011,
 // relu = 0b1100001111,
  //par  = 0b1100000111,
  TEN = 0b1111111111
};


opn cnn_rrra_instr(op: cnn_op, rd: eX, mrd: mX3rw, mrs1: mX1rw, mrs2: mX2rw)
{
    action {
    stage EX: cnn_r1 = mrs1;
              cnn_r2 = mrs2;
              cnn_r3 = mrd;
    
    stage EX:         
              switch (op) {
              case mac  :  cnn_w1 = cnn_R = mac(xuC=cnn_r3,xuA=cnn_r1,xuB=cnn_r2) @cnn;
              }

              if (rd: x0)         x_w1_dead = cnn_w1;
              else                mrd = cnn_w1;
    }
    syntax : op PADMNM " " rd "," PADOP1 mrs1 "," PADOP2 mrs2;
    image  : op[9..3] :: mrs2 :: mrs1 :: op[2..0] :: rd :: mrd<alias rd> :: opc32.OP
    class(cnn_rrra);
}
/*
opn cnn_rr_instr(op: cnn_op, rd: eX, mrd: mX1w_EX, mrs1: mX1r_EX)
{
    action {
    stage EX: cnn_r1 = mrs1;
    stage EX:
              switch (op) {
              case exp  :  cnn_w1 = cnn_R = exp(xuA=cnn_r1) @cnn;
              case relu :  cnn_w1 = cnn_R = prelu(xuA=cnn_r1) @cnn;
              }
              if (rd: x0)         x_w1_dead = cnn_w1;
              else                mrd = cnn_w1;
    }
    syntax : op PADMNM " " rd "," PADOP1 mrs1;
    image  : op[9..3] :: "00000" :: mrs1 :: op[2..0] :: rd :: mrd<alias rd> :: opc32.OP
    class(cnn_rr);
}
/*
reg X10<w32> alias X[10] read(x_r1 x_r2 x_r3 x_r4 x_r5 x_r6 x_r7) write(x_w1 x_w2 x_w3 x_w4 x_w5 x_w6 x_w7);
reg X11<w32> alias X[11] read(x_r1 x_r2 x_r3 x_r4 x_r5 x_r6 x_r7) write(x_w1 x_w2 x_w3 x_w4 x_w5 x_w6 x_w7);
reg X12<w32> alias X[12] read(x_r1 x_r2 x_r3 x_r4 x_r5 x_r6 x_r7) write(x_w1 x_w2 x_w3 x_w4 x_w5 x_w6 x_w7);
reg X13<w32> alias X[13] read(x_r1 x_r2 x_r3 x_r4 x_r5 x_r6 x_r7) write(x_w1 x_w2 x_w3 x_w4 x_w5 x_w6 x_w7);
reg X14<w32> alias X[14] read(x_r1 x_r2 x_r3 x_r4 x_r5 x_r6 x_r7) write(x_w1 x_w2 x_w3 x_w4 x_w5 x_w6 x_w7);
reg X15<w32> alias X[15] read(x_r1 x_r2 x_r3 x_r4 x_r5 x_r6 x_r7) write(x_w1 x_w2 x_w3 x_w4 x_w5 x_w6 x_w7);
reg X16<w32> alias X[16] read(x_r1 x_r2 x_r3 x_r4 x_r5 x_r6 x_r7) write(x_w1 x_w2 x_w3 x_w4 x_w5 x_w6 x_w7);

opn cnn_rrra_fixed()
{
    action {
    stage EX: cnn_r1 = x_r1 = X10;
              cnn_r2 = x_r2 = X11;
              cnn_r3 = x_r3 = X12;
    
    stage EX:        
              X12 = x_w1 = cnn_w1 = cnn_R = mac(xuC=cnn_r3,xuA=cnn_r1,xuB=cnn_r2) @cnn;
    }
    syntax : "mac x12,x10,x11";
}

fu lx2;
trn lxR2 <w32>;

fu agu2;
trn aguA2 <w32>;
trn aguB2 <w32>;   
trn aguR2 <w32>;        

opn load_X10 () {
  action {
    stage ID:           aguA = x_r4 = X13;
                        aguB = 1;
                        X10 = x_w2 = x_r5 = X15;
    // ---
    stage ID:           aguR = add(aguA, aguB) @agu;
                        X13 = x_w3 = aguR;
                        dm_addr = aguA;
    // ---
    stage ID..EX:
                        dmw_rd`EX` = DMw[dm_addr`ID`]`EX`;  
    stage EX:           lxR = dmw_rd  @lx;
                        X15 = x_w4 = lxR;
  }
  syntax : "lw x10,dm(x13++)";
}


opn load_X11 () {
  action {
    stage ID:           aguA2 = x_r6 = X14;
                        aguB2 = 1;
                        X11 = x_w5 = x_r7 = X16;

    // ---
    stage ID:           aguR2 = add(aguA2, aguB2) @agu2;
                        X14 = x_w6 = aguR2;
                        dm_addr2 = aguA2;
    // ---
    stage ID..EX:
                        dmw_rd2`EX` = DMw[dm_addr2`ID`]`EX`;      
                        
    stage EX:           lxR2 = dmw_rd2  @lx2;
    stage EX:
                        X16 = x_w7 = lxR2;
  }
  syntax : "lw x11,dm(x14++)";
}

opn cnn_parr_instr(mac: cnn_rrra_fixed,
                   ld11: load_X11,
                   ld10: load_X10)
{
    action { mac; ld10; ld11;}
    syntax : mac " | " ld10 " | " ld11;
    image  : "1100000" :: "00000" :: "00000" :: "111" :: "00000" :: opc32.OP;
}*/

