fu cnn;

trn cnn_r1<w32>;
trn cnn_r2<w32>;
trn cnn_r3<w32>;
trn cnn_w1<w32>;

trn xuC<w32>; 
trn xuB<w32>; 
trn xuA<w32>; 

trn cnn_R<w32>;


opn cnn_instrs (
    //cnn_rrra_instr |
    cnn_rr_instr |
    cnn_parr_instr
);

enum cnn_op {
  mac  = 0b1100000001,
  exp  = 0b1100000011,
  relu = 0b1100001111,
  par  = 0b1100000111,
  TEN = 0b1111111111
};


opn cnn_rrra_instr(op: cnn_op, rd: eX, mrd: mX3rw, mrs1: mX1rw, mrs2: mX2rw)
{
    action {
    stage EX: cnn_r1 = mrs1;
              cnn_r2 = mrs2;
              cnn_r3 = mrd;
    
    stage EX:         
              switch (op) {
              case mac  :  cnn_w1 = cnn_R = mac(xuC=cnn_r3,xuA=cnn_r1,xuB=cnn_r2) @cnn;
              }

              if (rd: x0)         x_w1_dead = cnn_w1;
              else                mrd = cnn_w1;
    }
    syntax : op PADMNM " " rd "," PADOP1 mrs1 "," PADOP2 mrs2;
    image  : op[9..3] :: mrs2 :: mrs1 :: op[2..0] :: rd :: mrd<alias rd> :: opc32.OP
    class(cnn_rrra);
}

opn cnn_rr_instr(op: cnn_op, rd: eX, mrd: mX1w_EX, mrs1: mX1r_EX)
{
    action {
    stage EX: cnn_r1 = mrs1;
    stage EX:
              switch (op) {
              case exp  :  cnn_w1 = cnn_R = exp(xuA=cnn_r1) @cnn;
              case relu :  cnn_w1 = cnn_R = prelu(xuA=cnn_r1) @cnn;
              }
              if (rd: x0)         x_w1_dead = cnn_w1;
              else                mrd = cnn_w1;
    }
    syntax : op PADMNM " " rd "," PADOP1 mrs1;
    image  : op[9..3] :: "00000" :: mrs1 :: op[2..0] :: rd :: mrd<alias rd> :: opc32.OP
    class(cnn_rr);
}

reg X20<w32> alias X[20] read(z_r1) write(z_w1); 
reg X21<w32> alias X[21] read(z_r2) write(z_w2); 
reg X22<w32> alias X[22] read(z_r3) write(z_w3); 
reg X23<w32> alias X[23] read(z_r4) write(z_w4);
reg X24<w32> alias X[24] read(z_r5) write(z_w5); 


opn cnn_rrra_fixed()
{
    action {           
    stage EX: z_r1 = X20;
              z_r2 = X21;
              z_r3 = X22;
              z_r4 = X23;
              z_r5 = X24;
                    
              z_w3 = incmac(z_r3, z_r1, z_r2, z_r4, z_w4, z_r5, z_w5) @cnn;
              
              X22 = z_w3;
              X23 = z_w4;
              X24 = z_w5;
    }
    syntax : "mac x22,x20,x21, (x23++), (x24++)";
}
   
// Hazard condition
// cycle            0  1  2  3  4  5  6  7  8
// add x5,x6,x7     IF ID EX
//                        ^^ write x5
// ld x4,4(x5)         IF ID EX
//                        ^^ read x5

//hw_stall 1 cycles() {
//  stage EX: X$[#] = dm_addr;
//} -> {
//  stage ID: ... = X$[#];
//}

opn load_X20 () {
 // action {
  //  stage ID:           aguA = x_r3 = X23;
  //                      aguB = 1;
   // stage ID:
  //                      aguR = add(aguA, aguB) @agu;
  //                      X23 = x_w2 = aguR;
  //                      dm_addr = aguA;
   // stage ID..EX:
                        //dmw_rd`EX` = DMw[dm_addr`ID`]`EX`;  
  //  stage EX:    
                        //X10 = x_w3 = dmw_rd;
 // }
  syntax : "lw x20,dm(x23++)";
}

/*

fu lx2;
trn lxR2 <w32>;

fu agu2;
trn aguA2 <w32>;
trn aguB2 <w32>;   
trn aguR2 <w32>;  
*/
/*opn load_X11 () {
  action {
    stage ID:           aguA2 = x_r6 = X14;
                        aguB2 = 1;
    // ---
    stage ID:           aguR2 = add(aguA2, aguB2) @agu2;
                        X14 = x_w6 = aguR2;
                        dm_addr = aguA2;
    // ---
    stage ID..EX:
                        dmw_rd`EX` = DMw[dm_addr`ID`]`EX`;      
                        
    stage EX:           lxR2 = dmw_rd  @lx2;
                        X11 = x_w7 = lxR2;
  }
  syntax : "lw x11,dm(x14++)";
}*/

opn cnn_parr_instr(mac: cnn_rrra_fixed)
//                   ld20: load_X20)
{
    action { mac; }// ld20; }
    syntax : mac; //" | " ld20;
    image  : "1100000" :: "00000" :: "00000" :: "111" :: "00000" :: opc32.OP;
}

