
// File generated by noodle version U-2022.12#33f3808fcb#221128, Fri Mar  8 12:18:18 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// noodle -I. -I./isg -I./runtime/include -DCHESS_CXX_ATTRIBUTES -D__tct_patch__=0 -itrv32p3_cnn_chess.h +NOrlt +wRelease/chesswork trv32p3_cnn_c_div.c +Q0=+Sal,+Sca,+Osps,-Wflla,+NOtcr,+NOcse,+NOlsw,+NOifv,+NOrle,+NOrlt +Q1=+NOrlt trv32p3_cnn


/***
!! extern unsigned long long div_called(unsigned long long, unsigned long long, chess_output unsigned long long &)
F_Z10div_calledyyRy : user_defined, called {
    fnm : "div_called" 'unsigned long long div_called(unsigned long long, unsigned long long, chess_output unsigned long long &)';
    arg : ( w32:i w32:r w32:r w32:i w32:i w32:i w32:i w32:o w32:o );
    loc : ( X[1] X[10] X[11] X[12] X[13] X[14] X[15] X[16] X[17] );
    frm : ( );
}
****
***/

[
    0 : _Z10div_calledyyRy typ=u08 bnd=e stl=PMb
   12 : __R_SP typ=w32 bnd=d stl=SP
   18 : __sp typ=w32 bnd=b stl=SP
   19 : __rd___sp typ=w32 bnd=m
   20 : __la typ=w32 bnd=p tref=w32__
   22 : __rt_low typ=w32 bnd=m tref=__uint__
   23 : __rt_high typ=w32 bnd=m tref=__uint__
   25 : x_low typ=w32 bnd=m tref=__uint__
   26 : x_high typ=w32 bnd=m tref=__uint__
   28 : d_low typ=w32 bnd=m tref=__uint__
   29 : d_high typ=w32 bnd=m tref=__uint__
   31 : r_low typ=w32 bnd=m tref=__uint__
   32 : r_high typ=w32 bnd=m tref=__uint__
   33 : __ct_0S0 typ=w32 val=0S0 bnd=m
   35 : __tmp typ=w32 bnd=m
   42 : __inl_i typ=w32 bnd=m lscp=13 tref=__sint__
   50 : __tmp typ=bool bnd=m
   56 : __ct_0 typ=t20s_rp12 val=0f bnd=m
   58 : __ct_64 typ=w32 val=64f bnd=m
   61 : __ct_1 typ=w32 val=1f bnd=m
   71 : __tmp typ=bool bnd=m
   81 : __tmp typ=bool bnd=m
   82 : __ct_0s0 typ=w32 val=0s0 bnd=m
   84 : __tmp typ=w32 bnd=m
  100 : __tmp typ=bool bnd=m
  122 : __apl_r_low typ=w32 bnd=m tref=__uint__
  123 : __apl_r_high typ=w32 bnd=m tref=__uint__
  140 : __apl_carries typ=w32 bnd=m tref=__uint__
  145 : __apl_r_low typ=w32 bnd=m tref=__uint__
  146 : __tmp typ=w32 bnd=m
  147 : __apl_r_high typ=w32 bnd=m tref=__uint__
  154 : r_low typ=w32 bnd=m
  155 : r_high typ=w32 bnd=m
  168 : __apl_r_low typ=w32 bnd=m tref=__uint__
  177 : __inl_x_high typ=w32 bnd=m
  184 : r_low typ=w32 bnd=m
  196 : __inl_x_low typ=w32 bnd=m
  207 : __inl_x_low typ=w32 bnd=m
  218 : __ct_31 typ=w32 val=31f bnd=m
  221 : __rt typ=bool bnd=m tref=bool__
  226 : __tmp typ=bool bnd=m
  227 : __tmp typ=bool bnd=m
  255 : __tmp typ=w32 bnd=m
  256 : __tmp typ=w32 bnd=m
  291 : __true typ=bool val=1f bnd=m
  292 : __false typ=bool val=0f bnd=m
  293 : __either typ=bool bnd=m
  294 : __trgt typ=t13s_s2 val=0j bnd=m
  295 : __trgt typ=t13s_s2 val=0j bnd=m
  296 : __trgt typ=t13s_s2 val=0j bnd=m
  297 : __trgt typ=t21s_s2 val=0j bnd=m
  298 : __trgt typ=t13s_s2 val=0j bnd=m
  299 : __trgt typ=t13s_s2 val=0j bnd=m
  300 : __trgt typ=t13s_s2 val=0j bnd=m
  301 : __trgt typ=t21s_s2 val=0j bnd=m
  302 : __trgt typ=t13s_s2 val=0j bnd=m
  303 : __trgt typ=t13s_s2 val=0j bnd=m
  304 : __trgt typ=t21s_s2 val=0j bnd=m
]
F_Z10div_calledyyRy {
    #89 off=0
    (__R_SP.11 var=12) st_def ()  <22>;
    (__sp.17 var=18) source ()  <28>;
    (__la.19 var=20 stl=X off=1) inp ()  <30>;
    (__la.20 var=20) deassign (__la.19)  <31>;
    (x_low.28 var=25 stl=X off=12) inp ()  <39>;
    (x_low.29 var=25) deassign (x_low.28)  <40>;
    (x_high.32 var=26 stl=X off=13) inp ()  <43>;
    (x_high.33 var=26) deassign (x_high.32)  <44>;
    (d_low.37 var=28 stl=X off=14) inp ()  <48>;
    (d_low.38 var=28) deassign (d_low.37)  <49>;
    (d_high.41 var=29 stl=X off=15) inp ()  <52>;
    (d_high.42 var=29) deassign (d_high.41)  <53>;
    (__rd___sp.50 var=19) rd_res_reg (__R_SP.11 __sp.17)  <61>;
    (__ct_0S0.51 var=33) const ()  <62>;
    (__tmp.53 var=35) __Pvoid__pl___Pvoid___sint (__rd___sp.50 __ct_0S0.51)  <64>;
    (__R_SP.54 var=12 __sp.55 var=18) wr_res_reg (__tmp.53 __sp.17)  <65>;
    (__ct_0.123 var=56) const ()  <136>;
    (__ct_1.166 var=61) const ()  <181>;
    (__tmp.361 var=100) bool__lt___sint___sint (d_high.42 __ct_0.123)  <404>;
    (__trgt.767 var=303) const ()  <1011>;
    () void_br_bool_t13s_s2 (__tmp.361 __trgt.767)  <1012>;
    (__either.768 var=293) undefined ()  <1013>;
    if {
        {
            () if_expr (__either.768)  <103>;
        } #5
        {
            #238 off=9
            (__tmp.593 var=226) bool__lt___uint___uint (d_high.42 x_high.33)  <705>;
            (__trgt.749 var=295) const ()  <985>;
            () void_br_bool_t13s_s2 (__tmp.593 __trgt.749)  <986>;
            (__either.750 var=293) undefined ()  <987>;
            if {
                {
                    () if_expr (__either.750)  <708>;
                } #240
                {
                    (__false.751 var=292) const ()  <988>;
                } #241
                {
                    #243 off=10
                    (__tmp.711 var=227) bool__ne___uint___uint (d_high.42 x_high.33)  <926>;
                    (__trgt.747 var=294) const ()  <982>;
                    () void_br_bool_t13s_s2 (__tmp.711 __trgt.747)  <983>;
                    (__either.748 var=293) undefined ()  <984>;
                    if {
                        {
                            () if_expr (__either.748)  <710>;
                        } #245
                        {
                            (__true.752 var=291) const ()  <989>;
                        } #247
                        {
                            (__rt.712 var=221) bool__lt___uint___uint (x_low.29 d_low.38)  <927>;
                            (__trgt.753 var=296) const ()  <990>;
                            () void_br_bool_t13s_s2 (__rt.712 __trgt.753)  <991>;
                            (__either.754 var=293) undefined ()  <992>;
                        } #293 off=11
                        {
                            (__rt.713 var=221) merge (__true.752 __either.754)  <928>;
                        } #248
                    } #244
                } #242
                {
                    (__tmp.714 var=50) merge (__false.751 __rt.713)  <929>;
                } #249
            } #239
            if {
                {
                    () if_expr (__tmp.714)  <127>;
                } #9
                {
                } #11 off=13
                {
                    (__apl_r_low.385 var=122) __uint_sub___uint___uint (x_low.29 d_low.38)  <437>;
                    (__apl_r_high.386 var=123) __uint_sub___uint___uint (x_high.33 d_high.42)  <438>;
                    (__apl_r_high.389 var=123) __uint__mi___uint___uint (__apl_r_high.386 __tmp.650)  <441>;
                    (__tmp.650 var=255) __sint_slt___uint___uint (x_low.29 d_low.38)  <826>;
                    (__trgt.755 var=297) const ()  <993>;
                    () void_j_t21s_s2 (__trgt.755)  <994>;
                } #465 off=12
                {
                    (__rt_low.302 var=22) merge (__ct_0.123 __ct_1.166)  <332>;
                    (r_low.332 var=31) merge (x_low.29 __apl_r_low.385)  <362>;
                    (r_high.346 var=32) merge (x_high.33 __apl_r_high.389)  <375>;
                } #12
            } #8
        } #6
        {
            #515 off=1
            (__ct_64.125 var=58) const ()  <138>;
            (__ct_31.554 var=218) const ()  <658>;
            (__trgt.756 var=298) const ()  <995>;
            (__trgt.758 var=299) const ()  <998>;
            (__trgt.762 var=300) const ()  <1003>;
            (__trgt.764 var=301) const ()  <1006>;
            (__trgt.765 var=302) const ()  <1008>;
            do {
                {
                    (__inl_i.163 var=42) entry (__inl_i.240 __ct_0.123)  <178>;
                    (r_low.559 var=154) entry (r_low.557 __ct_0.123)  <663>;
                    (r_high.567 var=155) entry (r_high.565 __ct_0.123)  <670>;
                    (__inl_x_high.575 var=177) entry (__inl_x_high.573 x_high.33)  <677>;
                    (__inl_x_low.583 var=196) entry (__inl_x_low.581 x_low.29)  <684>;
                } #19
                {
                    #268 off=2
                    (__apl_carries.413 var=140) __uint__rs___uint___sint (r_low.559 __ct_31.554)  <471>;
                    (__apl_r_low.414 var=145) __uint__ls___uint___sint (r_low.559 __ct_1.166)  <472>;
                    (__tmp.415 var=146) __uint__ls___uint___sint (r_high.567 __ct_1.166)  <473>;
                    (__apl_r_high.416 var=147) __uint__or___uint___uint (__tmp.415 __apl_carries.413)  <474>;
                    (__apl_r_low.445 var=168) __uint__rs___uint___sint (__inl_x_high.575 __ct_31.554)  <509>;
                    (r_low.463 var=184) __uint__or___uint___uint (__apl_r_low.414 __apl_r_low.445)  <531>;
                    (__apl_carries.486 var=140) __uint__rs___uint___sint (__inl_x_low.583 __ct_31.554)  <560>;
                    (__apl_r_low.487 var=145) __uint__ls___uint___sint (__inl_x_low.583 __ct_1.166)  <561>;
                    (__tmp.488 var=146) __uint__ls___uint___sint (__inl_x_high.575 __ct_1.166)  <562>;
                    (__apl_r_high.489 var=147) __uint__or___uint___uint (__tmp.488 __apl_carries.486)  <563>;
                    (__tmp.609 var=226) bool__lt___uint___uint (d_high.42 __apl_r_high.416)  <726>;
                    () void_br_bool_t13s_s2 (__tmp.609 __trgt.758)  <999>;
                    (__either.759 var=293) undefined ()  <1000>;
                    if {
                        {
                            () if_expr (__either.759)  <729>;
                        } #270
                        {
                            (__false.760 var=292) const ()  <1001>;
                        } #271
                        {
                            #273 off=3
                            (__tmp.715 var=227) bool__ne___uint___uint (d_high.42 __apl_r_high.416)  <930>;
                            () void_br_bool_t13s_s2 (__tmp.715 __trgt.756)  <996>;
                            (__either.757 var=293) undefined ()  <997>;
                            if {
                                {
                                    () if_expr (__either.757)  <731>;
                                } #275
                                {
                                    (__true.761 var=291) const ()  <1002>;
                                } #277
                                {
                                    (__rt.716 var=221) bool__lt___uint___uint (r_low.463 d_low.38)  <931>;
                                    () void_br_bool_t13s_s2 (__rt.716 __trgt.762)  <1004>;
                                    (__either.763 var=293) undefined ()  <1005>;
                                } #296 off=4
                                {
                                    (__rt.717 var=221) merge (__true.761 __either.763)  <932>;
                                } #278
                            } #274
                        } #272
                        {
                            (__tmp.718 var=71) merge (__false.760 __rt.717)  <933>;
                        } #279
                    } #269
                    if {
                        {
                            () if_expr (__tmp.718)  <211>;
                        } #23
                        {
                        } #25 off=6
                        {
                            (__apl_r_low.516 var=122) __uint_sub___uint___uint (r_low.463 d_low.38)  <598>;
                            (__apl_r_high.517 var=123) __uint_sub___uint___uint (__apl_r_high.416 d_high.42)  <599>;
                            (__apl_r_high.520 var=123) __uint__mi___uint___uint (__apl_r_high.517 __tmp.655)  <602>;
                            (__inl_x_low.538 var=207) __uint__or___uint___uint (__apl_r_low.487 __ct_1.166)  <624>;
                            (__tmp.655 var=256) __sint_slt___uint___uint (r_low.463 d_low.38)  <834>;
                            () void_j_t21s_s2 (__trgt.764)  <1007>;
                        } #487 off=5
                        {
                            (__rt_low.312 var=22) merge (__apl_r_low.487 __inl_x_low.538)  <343>;
                            (r_low.340 var=31) merge (r_low.463 __apl_r_low.516)  <369>;
                            (r_high.354 var=32) merge (__apl_r_high.416 __apl_r_high.520)  <382>;
                        } #26
                    } #22
                    #27 off=7
                    (__inl_i.204 var=42) __sint__pl___sint___sint (__inl_i.163 __ct_1.166)  <220>;
                    (__tmp.207 var=81) bool__lt___sint___sint (__inl_i.204 __ct_64.125)  <223>;
                    () void_br_bool_t13s_s2 (__tmp.207 __trgt.765)  <1009>;
                    (__either.766 var=293) undefined ()  <1010>;
                } #20
                {
                    () while_expr (__either.766)  <224>;
                    (__inl_i.240 var=42 __inl_i.241 var=42) exit (__inl_i.204)  <241>;
                    (r_low.557 var=154 r_low.558 var=154) exit (r_low.340)  <662>;
                    (r_high.565 var=155 r_high.566 var=155) exit (r_high.354)  <669>;
                    (__inl_x_high.573 var=177 __inl_x_high.574 var=177) exit (__apl_r_high.489)  <676>;
                    (__inl_x_low.581 var=196 __inl_x_low.582 var=196) exit (__rt_low.312)  <683>;
                } #28
            } #18 rng=[64,64]
            #519 off=8
            (__trgt.769 var=304) const ()  <1014>;
            () void_j_t21s_s2 (__trgt.769)  <1015>;
        } #13
        {
            (__rt_low.299 var=22) merge (__rt_low.302 __inl_x_low.582)  <329>;
            (__rt_high.315 var=23) merge (__ct_0.123 __inl_x_high.574)  <346>;
            (r_low.329 var=31) merge (r_low.332 r_low.558)  <359>;
            (r_high.343 var=32) merge (r_high.346 r_high.566)  <372>;
        } #31
    } #4
    #33 off=15 nxt=-2
    (__rd___sp.256 var=19) rd_res_reg (__R_SP.11 __sp.55)  <254>;
    (__ct_0s0.257 var=82) const ()  <255>;
    (__tmp.259 var=84) __Pvoid__pl___Pvoid___sint (__rd___sp.256 __ct_0s0.257)  <257>;
    (__R_SP.260 var=12 __sp.261 var=18) wr_res_reg (__tmp.259 __sp.55)  <258>;
    () void___rts_jr_w32 (__la.20)  <259>;
    (__rt_low.263 var=22 stl=X off=10) assign (__rt_low.299)  <261>;
    () out (__rt_low.263)  <262>;
    (__rt_high.265 var=23 stl=X off=11) assign (__rt_high.315)  <264>;
    () out (__rt_high.265)  <265>;
    (r_low.271 var=31 stl=X off=16) assign (r_low.329)  <271>;
    () out (r_low.271)  <272>;
    (r_high.273 var=32 stl=X off=17) assign (r_high.343)  <274>;
    () out (r_high.273)  <275>;
    () sink (__sp.261)  <281>;
} #0
0 : 'trv32p3_cnn_c_div.c';
----------
0 : (0,54:0,0);
4 : (0,58:9,9);
6 : (0,58:9,10);
8 : (0,58:9,12);
11 : (0,58:9,17);
13 : (0,58:9,25);
18 : (0,58:9,29);
20 : (0,58:9,29);
22 : (0,58:9,31);
25 : (0,58:9,36);
27 : (0,58:9,43);
33 : (0,58:2,57);
89 : (0,58:9,9);
238 : (0,58:9,12);
239 : (0,58:9,12);
240 : (0,58:9,12);
241 : (0,58:9,12);
242 : (0,58:9,12);
243 : (0,58:9,12);
244 : (0,58:9,12);
245 : (0,58:9,12);
247 : (0,58:9,12);
248 : (0,58:9,12);
249 : (0,58:9,12);
268 : (0,58:9,31);
269 : (0,58:9,31);
270 : (0,58:9,31);
271 : (0,58:9,31);
272 : (0,58:9,31);
273 : (0,58:9,31);
274 : (0,58:9,31);
275 : (0,58:9,31);
277 : (0,58:9,31);
278 : (0,58:9,31);
279 : (0,58:9,31);
293 : (0,58:9,12);
296 : (0,58:9,31);
465 : (0,58:9,13);
487 : (0,58:9,32);
----------
61 : (0,55:19,0);
62 : (0,55:19,0);
64 : (0,55:19,0);
65 : (0,55:19,0);
103 : (0,58:9,9);
127 : (0,58:9,12);
136 : (0,58:9,0);
138 : (0,58:9,0);
178 : (0,58:9,29);
181 : (0,58:9,0);
211 : (0,58:9,31);
220 : (0,58:9,40);
223 : (0,58:9,43);
224 : (0,58:9,43);
241 : (0,58:9,43);
254 : (0,58:2,0);
255 : (0,58:2,0);
257 : (0,58:2,0);
258 : (0,58:2,57);
259 : (0,58:2,57);
261 : (0,58:16,0);
264 : (0,58:16,0);
271 : (0,58:16,0);
274 : (0,58:16,0);
404 : (0,58:9,9);
437 : (0,58:9,13);
438 : (0,58:9,13);
441 : (0,58:9,13);
471 : (0,58:9,29);
472 : (0,58:9,29);
473 : (0,58:9,29);
474 : (0,58:9,29);
509 : (0,58:9,29);
531 : (0,58:9,29);
560 : (0,58:9,30);
561 : (0,58:9,30);
562 : (0,58:9,30);
563 : (0,58:9,30);
598 : (0,58:9,32);
599 : (0,58:9,32);
602 : (0,58:9,32);
624 : (0,58:9,33);
658 : (0,58:9,0);
705 : (0,58:9,12);
708 : (0,58:9,12);
710 : (0,58:9,12);
726 : (0,58:9,31);
729 : (0,58:9,31);
731 : (0,58:9,31);
826 : (0,58:9,13);
834 : (0,58:9,32);
926 : (0,58:9,12);
927 : (0,58:9,12);
928 : (0,58:9,12);
929 : (0,58:9,12);
930 : (0,58:9,31);
931 : (0,58:9,31);
932 : (0,58:9,31);
933 : (0,58:9,31);
983 : (0,58:9,12);
986 : (0,58:9,12);
991 : (0,58:9,12);
996 : (0,58:9,31);
999 : (0,58:9,31);
1004 : (0,58:9,31);
1009 : (0,58:9,43);
1012 : (0,58:9,9);

