/*
-- File : mpy.n
--
-- Contents : nML model for the trv32p3_cnn processor -- MPY instructions.
--
-- Copyright (c) 2019-2022 Synopsys, Inc. This Synopsys processor model
-- captures an ASIP Designer Design Technique. The model and all associated
-- documentation are proprietary to Synopsys, Inc. and may only be used
-- pursuant to the terms and conditions of a written license agreement with
-- Synopsys, Inc.  All other use, reproduction, modification, or distribution
-- of the Synopsys processor model or the associated  documentation is
-- strictly prohibited.
*/

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Units & Transitories
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

fu mpy;
trn mpyA  <w32>;
trn mpyB  <w32>;
trn mpyR  <w32>;

trn mpyL  <w32>;       // low product
trn mpyH  <w32>;       // high product
trn mpyM  <t2u>;       // mode: 0bAB, where A/B control signedness of mpyA/B
                       // 0b11: mpyA and mpyB are signed
                       // 0b10: mpyA is signed, mpyB is unsigned
                       // 0b00: mpyA and mpyB are unsigned

// avoid warning that one output is unused
property dead_end : mpyL, mpyH;

def md_mul    = 0b11;
def md_mulh   = 0b11;
def md_mulhsu = 0b10;
def md_mulhu  = 0b00;


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Instruction nML Rules
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Top-Level Rule for this nML file

opn mpy_instrs (
    mpy_rrr_instr
);

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Multiplier
//
// mul    rd, rs1, rs2
// mulh   rd, rs1, rs2
// mulhsu rd, rs1, rs2
// mulhu  rd, rs1, rs2

opn mpy_rrr_instr (op: majOP_fn10, rd: mX1w_EX, rs1: mX1r_EX, rs2: mX2r_EX) {
  action {
    stage EX:           mpyA = rs1;
                        mpyB = rs2;
    // ---
    stage EX:
      switch (op) {
        case mul    :   mul_hw (mpyA,mpyB,mpyM=md_mul,   mpyL,mpyH) @ mpy;
        case mulh   :   mul_hw (mpyA,mpyB,mpyM=md_mulh,  mpyL,mpyH) @ mpy;
        case mulhsu :   mul_hw (mpyA,mpyB,mpyM=md_mulhsu,mpyL,mpyH) @ mpy;
        case mulhu  :   mul_hw (mpyA,mpyB,mpyM=md_mulhu, mpyL,mpyH) @ mpy;

        // low product
        case mul :
                        mpyR = mpyL;
        // high product
        case mulh|mulhsu|mulhu:
                        mpyR = mpyH;
      }
    // ---
    stage EX:           rd = mpyR;
  }
  syntax : op PADMNM " " rd "," PADOP1 rs1 "," PADOP2 rs2;
  image  : op[9..3] :: rs2 :: rs1 :: op[2..0] :: rd :: opc32.OP
           class(mpy);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Chess Views for RTL Optimized Multiplication Primitive
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~ Multiplier

chess_view () {
   mpyR = mpyL; mul_hw (mpyA, mpyB, mpyM=md_mul, mpyL, mpyH);
} -> {
   mpyR = mul    (mpyA, mpyB);
}

chess_view () {
   mpyR = mpyH; mul_hw (mpyA, mpyB, mpyM=md_mulh, mpyL, mpyH);
} -> {
   mpyR = mulh   (mpyA, mpyB);
}

chess_view () {
   mpyR = mpyH; mul_hw (mpyA, mpyB, mpyM=md_mulhsu, mpyL, mpyH);
} -> {
   mpyR = mulhsu (mpyA, mpyB);
}

chess_view () {
   mpyR = mpyH; mul_hw (mpyA, mpyB, mpyM=md_mulhu, mpyL, mpyH);
} -> {
   mpyR = mulhu  (mpyA, mpyB);
}
